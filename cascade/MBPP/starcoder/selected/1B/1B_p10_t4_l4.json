[
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements([], [1,2,3]) == []",
        "num_ids": 2490,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    A function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(5) == True",
        "num_ids": 2304,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "import heapq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap",
        "test": "assert heap_queue_largest([7,7,7,7,7],5) == [7,7,7,7,7]",
        "num_ids": 2294,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x):\n    if x > 1 and (x & (x - 1)) == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(15) == False",
        "num_ids": 1650,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regex pattern to match words with 4 or more characters\n    pattern = re.compile(r'\\b[a-zA-Z]+\\w*\\b')\n    # Use the findall() method to find all matches in the text\n    matches = pattern.findall(text)\n    # Return a list of all words found\n    return matches",
        "test": "assert find_char_long(\"hello world\") == ['hello', 'world']",
        "num_ids": 2013,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def find_Rotations(str):\n    # remove all characters except the first and last ones\n    str = str[1:-1]\n    # initialize an empty list to store the minimum number of rotations\n    rotations = []\n    # iterate through each character of the string\n    for i in range(len(str)):\n        # if the current character is the same as the previous one, \n        # add the previous character to the list of rotations\n        if str[i] == str[i-1]:\n            rotations.append(i)\n    # return the minimum number of rotations\n    return len(rotations)",
        "test": "assert find_Rotations('abc') == 1, \"The function should return 1 when given the string 'abc'.\"",
        "num_ids": 1877,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: # checking if the given character is present in the string\n        if s.count(ch) > 1: # checking if the count of the given character is greater than 1\n            return s[:s.index(ch)] + s[s.index(ch)+1:] # returning the modified string\n        else:\n            return s[:s.index(ch)] # returning the modified string\n    else:\n        return s # returning the original string if the given character is not present in the string\n",
        "test": "assert remove_Occ(\"\", \"\") == \"\"",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a matrix in ascending order according to the sum of its rows.\n    Returns the sorted matrix.\n    '''\n\n    # create a matrix with all elements equal to 1\n    n = len(M)\n    for i in range(n):\n        M[i] = [1] * n\n\n    # calculate the sum of each row\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n\n    # sort the rows in ascending order by their sum\n    for i in range(n):\n        for j in range(i+1, n):\n            if row_sums[i] < row_sums[j]:\n                M[i], M[j] = M[j], M[i]\n                M[i].extend(M[j])\n                M.pop(j)\n\n    return M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]",
        "num_ids": 3597,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume",
        "test": "assert find_Volume(3,2,5) == 30, \"The volume of the prism is incorrect.\"",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z][a-z][a-z]'  # pattern to match sequences of lowercase letters joined with underscore\n    if re.match(pattern, text):  # check if the input string matches the pattern\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"\") == False, \"text_lowercase_underscore('') should return False\"",
        "num_ids": 1610,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4",
        "test": "assert square_perimeter(0) == 0",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Initialize an empty list\n    result = []\n\n    # Loop through each character in the string\n    for char in string:\n\n        # Check if the character is present in the second string\n        if char not in string:\n\n            # If not, append it to the result list\n            result.append(char)\n\n    # Return the result list\n    return result",
        "test": "assert str_to_list(\"abc\") == []",
        "num_ids": 3496,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_set = set(arraynums)\n    return bool(unique_set)",
        "test": "assert test_duplicate([]) == False # True",
        "num_ids": 1797,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 1:  # check if number is odd\n        if x % 3 == 0:  # check if number is a perfect cube\n            return True\n        else:\n            return False\n    else:  # check if number is even\n        if x % 3 == 0:  # check if number is a perfect cube\n            return True\n        else:\n            return False",
        "test": "assert is_woodall(9011) == False",
        "num_ids": 2609,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    elif num % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(456) == False # Input: 456",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def find_Max_Num(arr):\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num",
        "test": "assert find_Max_Num([1, 1, 1, 1, 1]) == 1, \"The function should return 1 when given [1, 1, 1, 1, 1]\"",
        "num_ids": 1910,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if x is less than y\n    if x < y: \n        return True\n    else: \n        # check if x is greater than y\n        if x > y: \n            return True\n        else: \n            # check if x is equal to y\n            if x == y: \n                return False",
        "test": "assert opposite_Signs(-5, 5) == True # Test Case 3",
        "num_ids": 1562,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n\n    Args:\n        n (int): The nth octagonal number to find.\n\n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    # initialize variables\n    i = 1\n    a = 1\n    b = 1\n    c = 1\n    octagonal = 0\n    # iterate through each octagonal number\n    while i <= n:\n        # calculate the next octagonal number\n        octagonal = a * b * c\n        # increment variables\n        i += 1\n        a = b\n        b = c\n        c = octagonal\n    return octagonal",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1469,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string s as input and returns the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with sum of digits equal to length\n    count_dict = defaultdict(int)\n\n    # Iterate through each character in the string\n    for char in s:\n        # If the character is a digit, add 1 to the count of substrings with sum of digits equal to length\n        if char.isdigit():\n            count_dict[char] += 1\n\n    # Return the total count of substrings with sum of digits equal to length\n    return sum(count_dict.values())",
        "test": "assert count_Substrings(\"hi\") == 0",
        "num_ids": 2342,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3]) == 1",
        "num_ids": 1414,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def max_difference(test_list):\n    '''\n    Given a tuple list of size n, find the maximum difference between any two pairs of elements in the list.\n    '''\n    n = len(test_list)\n    if n < 2:\n        return None # Cannot find a maximum difference if there are less than 2 elements\n    \n    max_diff = float('-inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([1, 3, 5, 2, 4]) == 4",
        "num_ids": 2468,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list",
        "test": "assert subject_marks([(80, 'Maths'), (90, 'Science'), (70, 'English'), (85, 'Chemistry'), (95, 'Physics')]) == [('Maths', 80), ('Science', 90), ('English', 70), ('Chemistry', 85), ('Physics', 95)]",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum([recursive_list_sum(item) for item in data_list])\n    else:\n        return data_list",
        "test": "assert recursive_list_sum([1]) == 1",
        "num_ids": 1901,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1312,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n - the number of elements in the set\n\n    Returns:\n    The number of ways to partition the set.\n    '''\n\n    # base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # recursive case\n    count = 0\n    for i in range(2, n+1):\n        count += bell_number(n-i)\n\n    return count\n",
        "test": "assert bell_number(1) == 1",
        "num_ids": 1721,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n == 0:\n        return True\n\n    start = 0\n    end = 1\n\n    while end < n:\n        if A[start] > A[end]:\n            return False\n        elif A[start] < A[end]:\n            start += 1\n        else:\n            end += 1\n\n    return True",
        "test": "assert is_Monotonic([3, 1, 5, 4, 2]) == False",
        "num_ids": 1724,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n\n    return True\n",
        "test": "assert is_sublist(['apple', 'banana', 'cherry'], 'grape') == False",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the length of the tuples is equal to the length of the input list\n    if len(Input)!= len(set(Input)):\n        return False\n    else:\n        return True",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 1745,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the combinatorial sorting method.\n    '''\n    for i in range(len(nums)):\n        # Find the smallest element in the unsorted portion\n        min_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        # Swap the smallest element with the current element\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums",
        "test": "assert comb_sort([1,1,1,1,1]) == [1,1,1,1,1]",
        "num_ids": 3133,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def dif_Square(n):\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return dif_Square(n-1)\n    else:\n        return False",
        "test": "assert dif_Square(10) == False # invalid input",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not all(color in pattern for color in colors):\n            return False\n    return True\n\ncolors = [\"red\", \"green\", \"blue\"]\npatterns = [\"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\"]\n\nprint(is_samepatterns(colors, patterns)) # True",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'purple']) == False",
        "num_ids": 1967,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    \n    # create a list of tuples which have all elements divisible by k from the given list of tuples\n    result = []\n    for tup in test_list:\n        if freq_dict[tup] % K == 0:\n            result.append(tup)\n    \n    return result",
        "test": "assert find_tuples([], 3) == []",
        "num_ids": 2379,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    count = 0\n    while n % 11!= 0:\n        n += 1\n        count += 1\n    \n    if count == 1:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(15) == False, \"is_Diff(15) should return False\"",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def word_len(s): \n    word_list = s.split() # Splitting the string into a list of words\n    if len(word_list) == 1: # If the length of the list is 1, it is a single word\n        return len(word_list[0]) # Return the length of the single word\n    else: # If the length of the list is greater than 1, it is a compound word\n        return max(map(len, word_list)) # Return the length of the longest word",
        "test": "assert word_len(\"hello\") == 5, \"The length of the word 'hello' should be 5\"",
        "num_ids": 1506,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        tetrahedral_number = 4*tetrahedral_number(n-1) + 3\n        tetrahedral_number = 4*tetrahedral_number(n-2) + 5\n        return tetrahedral_number",
        "test": "assert tetrahedral_number(1) == 1, \"The first tetrahedral number is 1.\"",
        "num_ids": 3086,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Function to find the volume of a sphere using the formula:\n\n    V = 4/3 * pi * r^3\n    '''\n\n    # Formula to find the volume of a sphere\n    V = 4/3 * math.pi * r**3\n\n    return V",
        "test": "assert volume_sphere(0) == 0",
        "num_ids": 1581,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Find the length of the string\n    length = len(strr)\n\n    # Initialize an empty string to store the characters\n    char_str = ''\n\n    # Iterate through each character of the string\n    for char in strr:\n        # Add the ASCII value of the character to the empty string\n        char_str += chr(ord(char) + length % 26)\n\n    return char_str",
        "test": "assert get_Char('Hello') == 'l'",
        "num_ids": 1342,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]",
        "test": "assert sequence(2) == 1",
        "num_ids": 2552,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n\n    Parameters:\n    r (float): radius of the sphere\n\n    Returns:\n    float: surface area of the sphere\n\n    \"\"\"\n    return math.pi * r**2",
        "test": "assert surfacearea_sphere(1) == 3.141592653589793, \"Expected surface area of sphere with radius 1 to be 3.141592653589793, but it is {} instead.\".format(surfacearea_sphere(1))",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # The base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return centered_hexagonal_number(n // 2) * centered_hexagonal_number(n // 2 - 1)\n    else:\n        return centered_hexagonal_number(n // 2 + 1) * centered_hexagonal_number(n // 2)",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 2681,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({\"a\":1,\"b\":2,\"c\":3}, {\"d\":4,\"e\":5,\"f\":6}, {\"g\":7,\"h\":8,\"i\":9}) == {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5,\"f\":6,\"g\":7,\"h\":8,\"i\":9}",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "from collections import Counter\n\ndef freq_count(list1):\n    '''\n    Given a list of elements, return a dictionary of their frequencies.\n    '''\n    freq = Counter(list1)\n    return freq",
        "test": "assert freq_count(['apple', 'banana', 'cherry', 'apple', 'orange']) == {'apple': 2, 'banana': 1, 'cherry': 1, 'orange': 1}",
        "num_ids": 1289,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 28,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def closest_num(N):\n    '''\n    Find the closest smaller number than n.\n    '''\n    closest = N\n    min_diff = abs(N - closest)\n    for num in range(N+1):\n        diff = abs(num - closest)\n        if diff < min_diff:\n            closest = num\n            min_diff = diff\n    return closest",
        "test": "assert closest_num(10) == 10",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "test": "assert len_log([]) == 0",
        "num_ids": 1575,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False",
        "test": "assert find_substring(\"abcdefg\", \"xyz\") == False # False",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef is_undulating(n):\n    square_root = math.sqrt(n)\n    difference = n - square_root\n    if difference < 1e-10:\n        return True\n    else:\n        return False",
        "test": "assert is_undulating(1234) == False, \"The number 1234 is not undulating.\"",
        "num_ids": 1269,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 1024,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    result = None\n    for t in test_list:\n        if result is None or t[1] < result[1]:\n            result = t\n    return result[0] if result is not None else None",
        "test": "assert index_minimum([(1, 5), (2, 4), (3, 3), (4, 2), (5, 1), (6, 0)]) == 6 # example tuple",
        "num_ids": 2185,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 1:  # Base case: if the list has only one element, return it\n        return len(lst[0])  # Return its length\n\n    min_length = float('inf')  # Initialize the min_length variable to infinity\n\n    for sublist in lst:  # Iterate over each sublist in the list\n        if len(sublist) < min_length:  # If the length of a sublist is shorter than the current min_length\n            min_length = len(sublist)  # Update the min_length variable with the new length\n\n    return min_length",
        "test": "assert Find_Min_Length([[]]) == 0",
        "num_ids": 3063,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def divisor(n):\n    count = 0\n    if n == 1:\n        return 1\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return i\n    return n\n",
        "test": "assert divisor(2) == 2, \"The function should return 2 for n=2\"",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 2373,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def multiply_num(numbers):\n    # multiply all the numbers in the list and return the result\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n",
        "test": "assert multiply_num([1]) == 1, \"Function should return 1 for a list of length 1\"",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to store the binary representation\n    binary = ''\n    # iterate over each digit of the decimal number\n    for digit in str(n):\n        # convert each digit to its binary equivalent and add it to the string\n        binary += bin(int(digit))[2:]\n    # return the binary representation of the decimal number\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 4486,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Function to find the next smallest palindrome of a specified integer.\n    '''\n    def is_palindrome(n):\n        '''\n        Function to check if a number is a palindrome.\n        '''\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        '''\n        Function to find the next palindrome of a specified number.\n        '''\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    n = num\n    while True:\n        n = next_palindrome(n)\n        if is_palindrome(n):\n            break\n    return n",
        "test": "assert next_smallest_palindrome(9999999999) == 9999999999",
        "num_ids": 2940,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Initialize the index variable to 1\n    index = 1\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the count is equal to k, return the value at that index\n        if count == k:\n            return arr[i]\n        # Increment the count variable\n        count += 1\n        # Increment the index variable\n        index += 1\n    # If the count is greater than k, return None\n    return None",
        "test": "assert kth_element([1, 2, 3, 4, 5], 7) == None",
        "num_ids": 1928,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    new_words = [word.capitalize() for word in words]\n\n    # Join the words back together with the first letter in uppercase\n    return ''.join(new_words)",
        "test": "assert snake_to_camel('hello_world') == 'HelloWorld'",
        "num_ids": 1497,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def eulerian_num(n, m):\n    # Initialize variables\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # If i^2 + j^2 = n^2 + m^2, increment count\n            if i ** 2 + j ** 2 == n ** 2 + m ** 2:\n                count += 1\n    # Return the count\n    return count",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def sort_sublists(input_list):\n    sublists = []\n    for sublist in input_list:\n        if sublist:\n            sublists.append(sublist)\n    return sublists",
        "test": "assert sort_sublists([[''], [''], [''], [''], ['']]) == [[''], [''], [''], [''], ['']]",
        "num_ids": 3127,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([False, False, False, True, True]) == 2",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup",
        "test": "assert add_lists([], (1,))",
        "num_ids": 1342,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    \n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 3015,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to integer\n    num = int(s, 2)\n    \n    # Count the number of odd numbers in binary string\n    count = 0\n    while num!= 0:\n        if num & 1 == 1:\n            count += 1\n        num >>= 1\n    \n    # Return the count\n    return count",
        "test": "assert odd_Equivalent('101010', 3) == 3, \"The function should find the number of numbers with an odd value when rotating a binary string of length 3.\"",
        "num_ids": 2400,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def flatten_list(lst):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        flat_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_lst.extend(flatten_list(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n\n    def find_common_elements(lst1, lst2):\n        '''\n        Helper function to find the common elements between two lists.\n        '''\n        common_lst = []\n        for item in lst1:\n            if item in lst2:\n                common_lst.append(item)\n        return common_lst\n\n    flat_lst = flatten_list(nestedlist)\n    lst1 = sorted(flat_lst)\n    lst2 = sorted(flat_lst)\n\n    common_elements = find_common_elements(lst1, lst2)\n    return common_elements",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 2501,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int_num = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"42\") == True",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d.keys()!= set():\n            return False\n    return True",
        "test": "assert empty_dit([]) == True, \"Test failed: empty_dit([]) is not True\"",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in range(len(nums)):\n        num += nums[i]\n    return num",
        "test": "assert tuple_to_int((1,2,3)) == 6",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (float, int)):\n                float_list.append(element)\n    return float_list",
        "test": "assert list_to_float([]) == []",
        "num_ids": 2461,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def string_to_list(string):\n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"abc 123 def\") == [\"abc\", \"123\", \"def\"]",
        "num_ids": 1151,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return num\n        seen[num] = True\n    return None",
        "test": "assert search([1, 2, 3, 2, 4, 5]) == 2",
        "num_ids": 2017,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    max_product_pair = None\n    for i in range(len(list1) - 1):\n        current_product = list1[i] * list1[i+1]\n        if current_product > max_product:\n            max_product = current_product\n            max_product_pair = (list1[i], list1[i+1])\n        elif current_product == max_product:\n            max_product_pair = (max(max_product_pair[0], list1[i]), max(max_product_pair[1], list1[i+1]))\n    return max_product_pair",
        "test": "assert max_product_tuple([1, 1, 1, 1, 1]) == (1, 1, 1)",
        "num_ids": 3405,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        for j in range(i, limit):\n            if i+j == limit and i*i == j*j:\n                sum += i\n    return sum",
        "test": "assert amicable_numbers_sum(0) == 0",
        "num_ids": 2203,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    angle = cmath.phase(a)\n    return angle",
        "test": "assert angle_complex(0,0) == 0, \"The angle of (0,0) is not 0.\"",
        "num_ids": 1690,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_length(string): \n    max_diff = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count += 1\n            else:\n                count -= 1\n                if count < 0:\n                    count = 0\n            max_diff = max(max_diff, abs(count))\n    return max_diff",
        "test": "assert find_length(\"\") == 0",
        "num_ids": 2502,
        "indeed": true
    },
    {
        "number": 126,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def sum(a, b):\n    # initialize sum to 0\n    sum = 0\n\n    # loop until common divisor is found\n    while a % b!= 0:\n        # find the largest common divisor between a and b\n        a, b = b, a % b\n\n    # add the common divisor to sum\n    sum += b\n\n    return sum",
        "test": "assert sum(5,10) == 5, \"The sum of 5 and 10 should be 5.\"",
        "num_ids": 1950,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(3, 4) == 12",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def long_words(n, str_list):\n    '''\n    Returns a list of words in str_list that are longer than n characters from the original list.\n    '''\n    # Initialize an empty list to hold the long words\n    long_words = []\n    \n    # Iterate over each word in str_list\n    for word in str_list:\n        # If the word is longer than n characters, add it to the long_words list\n        if len(word) > n:\n            long_words.append(word)\n    \n    # Return the long_words list\n    return long_words",
        "test": "assert long_words(7, \"goodbye world\") == []",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Create an empty list to store the values of the matrix\n    result = []\n\n    # Initialize the row and column indices of the magic square\n    row = 0\n    col = 0\n\n    # Loop through each element of the matrix\n    for element in my_matrix:\n        # If the element is already in the result list, skip it\n        if element in result:\n            continue\n\n        # If the row is already full, move to the next column and reset the row index\n        if len(result) == 8:\n            row += 1\n            col = 0\n\n        # If the column is already full, move to the next row and reset the column index\n        if len(result) == 8:\n            row = 0\n            col += 1\n\n        # Otherwise, add the element to the result list\n        result.append(element)\n\n    # If the result list is the magic square, return True\n    if result == my_matrix:\n        return True\n    else:\n        return False",
        "test": "assert magic_square_test([[1,2,3], [4,5,6], [7,8,9], [1,1,1], [1,2,3]]) == False",
        "num_ids": 3327,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_freq = None\n    max_count = 0\n    max_item = None\n    for item, count in frequency.items():\n        if count > max_count or (count == max_count and item > max_item):\n            max_freq = item\n            max_count = count\n            max_item = item\n    return max_freq",
        "test": "assert max_occurrences([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 2431,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiou'\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str",
        "test": "assert reverse_vowels('12345') == '54321'",
        "num_ids": 1619,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(()) == \"()\"",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum\n    total = 0\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the total\n        if num < 0:\n            total += num\n    # Return the total\n    return total",
        "test": "assert sum_negativenum([0, 0, 0, 0, 0]) == 0",
        "num_ids": 1451,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the constants for the first half of the hexagonal numbers\n    A, B, C = 1, 2, 3\n    # Define the constants for the second half of the hexagonal numbers\n    D, E, F = 4, 5, 6\n    \n    # Check if n is less than or equal to 2\n    if n <= 2:\n        return n\n    \n    # Calculate the sum of the first half of the hexagonal numbers\n    hexagonal_sum = A + B + C + D + E + F\n    \n    # Calculate the nth hexagonal number\n    if n % 2 == 0:\n        return hexagonal_sum // 2\n    else:\n        return (hexagonal_sum + A) // 2",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 2128,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            count += 1\n    return (zero_count / count) if count > 0 else 0",
        "test": "assert zero_count([0, 0, 0, 0, 0]) == 0 # 1/5",
        "num_ids": 2330,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0:\n        return False\n\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        # If n is a power of 2, check if it can be represented as sum of non-zero powers of 2\n        count = 0\n        while n > 0:\n            count += 1\n            n >>= 1\n        if count > 0:\n            return True\n\n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(20) == False",
        "num_ids": 2370,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def circle_circumference(r):\n    '''\n    Calculate the circumference of a circle.\n    '''\n    return 2 * (3.14159 * r)",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1438,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            flat_list.extend(extract_singly(i))\n        else:\n            flat_list.append(i)\n    return set(flat_list)\n",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 2025,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def pancake_sort(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums",
        "test": "assert pancake_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 3072,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3],[2,3,3],[3,4,5]) == 0, \"Count of same pair of items at position 1 and 3 are equal\"",
        "num_ids": 2039,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find the number of lists in a tuple.\n\n    Parameters:\n    Input (tuple): A tuple containing multiple lists.\n\n    Returns:\n    int: The number of lists in the tuple.\n\n    \"\"\"\n    return len(Input)",
        "test": "assert find_lists([]) == 0, \"The function is not returning the correct number of lists.\"",
        "num_ids": 1819,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 1939,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n\n    # Initialize variables for x and y\n    x = None\n    y = None\n\n    # Check if there are any solutions\n    if a == 0:\n        x = -b // abs(b)\n        if n < 0:\n            x = -x\n    elif b == 0:\n        y = -a // abs(a)\n        if n < 0:\n            y = -y\n\n    # Check if there is a solution and return it\n    if x is not None and y is not None:\n        return (x, y)\n    else:\n        return None",
        "test": "assert find_solution(1, 2, 0) == None",
        "num_ids": 1980,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))",
        "test": "assert remove_elements([], []) == []",
        "num_ids": 2135,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum",
        "test": "assert sum_series(1) == 0 # correct",
        "num_ids": 2881,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    area = pi * (s * s) / 4\n    return area",
        "test": "assert area_polygon(5, 5) == 720, \"The area of a regular polygon with sides 5 and 5 is incorrect.\"",
        "num_ids": 1464,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef div_sum(n):\n    divisors = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return sum(divisor for divisor in divisors if n % divisor == 0) == n\n\nprint(div_sum(12))  # Output: True\nprint(div_sum(28))  # Output: False",
        "test": "assert div_sum(25) == False, \"The sum of the divisors of 12 and 24 is equal to 40.\"",
        "num_ids": 2417,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1.lower():\n        if str1.lower().count(char) == 1:\n            count += 1\n    return count",
        "test": "assert count_char_position(\"\") == 0",
        "num_ids": 1877,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)): \n        if A[i] % 2 == 0 and A[i]!= A[i+1] % 2: \n            count += 1\n\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the next power of 2 greater than or equal to n\n    next_pow_of_2 = 1\n    while next_pow_of_2 < n:\n        next_pow_of_2 <<= 1\n\n    # Return the smallest power of 2 greater than or equal to n\n    return next_pow_of_2",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 2088,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def frequency(a, x):\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert frequency(range(10),1) == 1",
        "num_ids": 1290,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable\n    sum = 0\n\n    # Iterate through the list1 in the desired range\n    for i in range(m, n+1):\n        # Add each element to the sum\n        sum += list1[i-m]\n\n    # Return the sum\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 4) == 10",
        "num_ids": 2013,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * (a + 1)) // 2",
        "test": "assert perimeter_pentagon(0) == 0, \"Incorrect perimeter for a regular pentagon with length 0.\"",
        "num_ids": 1653,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance('aaa') == 0",
        "num_ids": 1471,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = True\n    for i in test_tuple:\n        if type(i) not in [int, float, str, bool]:\n            data_type = False\n            break\n    return data_type",
        "test": "assert check_type((1, 2, 3, 4, 5)) == True",
        "num_ids": 1534,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count == n/2:\n            return True\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 4) == False, \"The majority element is not present in the given sorted array.\"",
        "num_ids": 2346,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1 # Get the rightmost 1-bit of the number\n        n >>= 1 # Shift the number left by one bit\n    return count",
        "test": "assert count_Set_Bits(0) == 0, \"count_Set_Bits(0) should return 0 for 0\"",
        "num_ids": 1767,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(0, len(str), 2):\n        result += str[i]\n    return result\n",
        "test": "assert odd_values_string('') == ''",
        "num_ids": 1440,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1,2,3) == min_of_three(2,1,3), \"min_of_three(1,2,3) should return min_of_three(2,1,3)\"",
        "num_ids": 1510,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if (n==0 and l==r) or (n==0 and l<r) or (n>0 and l==r):\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,7) == False",
        "num_ids": 2334,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Create a boolean array to keep track of whether each element is negative or positive\n    negatives = [False] * len(arr)\n    # Traverse the array starting from the first n elements and incrementing the negative count\n    for i in range(n):\n        negatives[i] = arr[i] < 0\n        # Swap the current element with the first negative element\n        arr[i], arr[0] = arr[0], arr[i]\n    # Traverse the array starting from the second n elements and decrementing the positive count\n    for i in range(n, len(arr)):\n        negatives[i] = not negatives[i-n]\n        # Swap the current element with the first positive element\n        arr[i], arr[0] = arr[0], arr[i]\n    # Re-arrange the array in ascending order\n    arr.sort()\n    return arr",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 3411,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(char if c =='' else c for c in str1)",
        "test": "assert replace_blank(\"\", \"\") == \"\"",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1, 1, 1, 1, 1], 2) == [1, 1]",
        "num_ids": 1900,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area",
        "test": "assert lateralsuface_cylinder(5,3) == 30",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume",
        "test": "assert volume_cube(5) == 125",
        "num_ids": 2089,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def even_bit_set_number(n):\n    # Convert the number to a string and iterate over its bits\n    for i in range(len(str(n))):\n        # If the bit is even, set it to 1\n        if n & (1 << i):\n            n |= (1 << i)\n    return n",
        "test": "assert even_bit_set_number(0) == 0, \"The even bits of 0 are not set to 1.\"",
        "num_ids": 3002,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object from the test list\n    counter = Counter(test_list)\n    \n    # create a dictionary to store the count and tuple\n    count_dict = {}\n    \n    # iterate over the counter object and convert it to a dictionary\n    for key, value in counter.items():\n        count_dict[tuple(key)] = value\n    \n    # return the dictionary of counts\n    return count_dict",
        "test": "assert check_occurences([(\"apple\", 3), (\"banana\", 2), (\"orange\", 1)]) == {(\"apple\", 3): 1, (\"banana\", 2): 1, (\"orange\", 1): 1}",
        "num_ids": 2302,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            substring = str[i:j]\n            if substring.strip()!= \"\":\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 1447,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    i = 2\n    while i <= m:\n        current_sequence = [i]\n        for j in range(1, n-1):\n            current_sequence.append(current_sequence[-1] * 2)\n        total_sequences += len(current_sequence)\n        i += 1\n    return total_sequences",
        "test": "assert get_total_number_of_sequences(5,4) == 12",
        "num_ids": 3046,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        if i in list2:\n            list1[i] = list2[list2.index(i)]\n    return list1\n",
        "test": "assert replace_list([],[]) == []",
        "num_ids": 1930,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n\n    # initialize a variable to store the total number of characters\n    count = 0\n\n    # iterate through each character in the string\n    for char in str1:\n        # increment the count by 1 for each character\n        count += 1\n\n    # return the total count\n    return count",
        "test": "assert count_charac(\"Hello World\") == 11",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    count = 0\n    while (N % 2 == 0 and count < N // 2):\n        count += 1\n        N = int(math.ceil((N + 1) / 2))\n    return N",
        "test": "assert next_Perfect_Square(1) == 1  # 1^2 is 1",
        "num_ids": 2882,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    max_sum = arr[0]\n    left = arr[1]\n    \n    for i in range(2, n):\n        if arr[i] > left:\n            left = arr[i]\n        else:\n            max_sum = max(max_sum, arr[i] + left)\n            \n    return max_sum",
        "test": "assert max_sum([0, 0, 0, 0, 0]) == 0",
        "num_ids": 2827,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a given number using the babylonian method.\n    \n    The babylonian method is a recursive algorithm that uses the formula:\n    sqrt(x) = (x +/- sqrt((x + y)/2)) / 2\n    \n    For very large values of x, the formula becomes incorrect and can lead to inaccuracies.\n    To mitigate this, we can increase the accuracy of our calculations by using a larger initial guess for the square root.\n    \n    Args:\n    number (int): The number to find the square root of.\n    \n    Returns:\n    float: The square root of the given number.\n    '''\n    \n    # Initialize the initial guess for the square root\n    guess = (number + 1) // 2\n    \n    # Calculate the square root using the babylonian method\n    while guess * guess > number:\n        guess = (guess + number / guess) // 2\n    \n    return guess",
        "test": "assert babylonian_squareroot(1) == 1",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    # initialize a list to store the longest palindromic subsequence in the string\n    dp = [1] * n\n    # initialize the first two rows of the table\n    dp[0] = 1\n    dp[1] = 1\n    # loop through the remaining rows\n    for i in range(2, n):\n        # if the current character is already a palindrome, then set its length to the current index + 1\n        if str[i-1] == str[i]:\n            dp[i] = dp[i-1] + 2\n        # otherwise, set its length to 1\n        else:\n            dp[i] = 1\n    # find the length of the longest palindromic subsequence in the string\n    return max(dp)\n",
        "test": "assert lps(\"\") == 0",
        "num_ids": 2535,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum_of_n = 1\n    for i in range(2, n+1):\n        sum_of_n += i / i - 1\n    return sum_of_n",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 2594,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store the intersection of the two arrays\n    intersection = set(array_nums1).intersection(set(array_nums2))\n    # Convert the set to a list and return it\n    return list(intersection)\n",
        "test": "assert intersection_array([], []) == []",
        "num_ids": 2137,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 6) == 0, \"The function should return 0 if the element is not present in the tuple.\"",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(item)\n    for i in range(len(new_list)):\n        if new_list[i] == element:\n            new_list.insert(i,element)\n            break\n    return new_list",
        "test": "assert insert_element([], 1) == []",
        "num_ids": 1732,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # initialize variables for polar coordinates\n    r = numbers[0]\n    phi = numbers[1]\n\n    # check if the number of input values is correct\n    if len(numbers)!= 2:\n        print(\"Error: Number of input values should be 2\")\n        return\n\n    # check if the first input value is complex\n    if not isinstance(numbers[0], complex):\n        print(\"Error: The first input value should be complex\")\n        return\n\n    # check if the second input value is real\n    if not isinstance(numbers[1], (int, float)):\n        print(\"Error: The second input value should be real\")\n        return\n\n    # calculate the magnitude and angle of the complex number\n    magnitude = abs(numbers[0])\n    angle = cmath.phase(numbers[0])\n\n    # convert the angle from radians to degrees\n    if angle > 0:\n        angle = angle * 180.0 / cmath.pi\n    else:\n        angle = angle * 180.0 + 180.0\n\n    # convert the angle from degrees to radians\n    if angle > 180:\n        angle = angle - 360\n    elif angle < -180:\n        angle = angle + 360\n\n    # check if the angle is valid\n    if angle < -180 or angle > 180:\n        print(\"Error: The angle should be between -180 and 180 degrees\")\n        return\n\n    # calculate the polar coordinates\n    x = r * cmath.cos(angle)\n    y = r * cmath.sin(angle)\n\n    # return the polar coordinates as a list\n    return [x, y, magnitude]",
        "test": "assert convert(1+2j) == (1+2j, 0)",
        "num_ids": 2697,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1227,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if len(combinations) < n:\n                    combinations.append((l[i], l[j], l[k]))\n    return combinations",
        "test": "assert combinations_colors([], 1) == []",
        "num_ids": 3907,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 1861,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def swap_numbers(a, b):\n    return (b, a)",
        "test": "assert swap_numbers(5,7) == (7,5)",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Maximize the first tuple\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup1\n\n    # Maximize the second tuple\n    elif test_tup1[1] < test_tup2[1]:\n        return test_tup2\n\n    # Both tuples are equal\n    else:\n        return test_tup1",
        "test": "assert maximize_elements((5,6), (3,8)) == (3, 8)",
        "num_ids": 1888,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def newman_prime(n):\n    # Initialize the list of prime numbers\n    primes = [True] * (n+1)\n\n    # Set the first two numbers as not prime\n    primes[0] = primes[1] = False\n\n    # Check the other numbers from 2 to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            # If i is prime, mark all its multiples as not prime\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    # Check if n is prime\n    if primes[n]:\n        # If n is prime, return its index\n        return n\n    else:\n        # If n is not prime, return None\n        return None",
        "test": "assert newman_prime(3) == 3 # the second newman-shanks\u2013williams prime number is 3",
        "num_ids": 2239,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize a tuple to store the result\n    result = ()\n    # Iterate over each element in the tuple\n    for i in range(len(test_tup1)):\n        # Perform division operation on the elements of the two tuples\n        result = result + (test_tup1[i]/test_tup2[i],)\n    # Return the result tuple\n    return tuple(result)",
        "test": "assert division_elements((1, 2, 3), (1, 2, 3)) == (1, 1, 1)",
        "num_ids": 3691,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result1 = list1[:L]\n    result2 = list1[L:]\n    return (result1, result2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 2238,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_of_age = h_age / 7\n    return years_of_age",
        "test": "assert dog_age(0) == 0",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result",
        "test": "assert list_split([], 1) == []",
        "num_ids": 2117,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert lateralsurface_cube(6) == 216, \"The lateral surface area of a cube with side length 6 is incorrect.\"",
        "num_ids": 1548,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def square_Sum(n): \n    '''\n    Write a Python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1, 2): \n        total_sum += i**2 \n    return total_sum ",
        "test": "assert square_Sum(1) == 1**2",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        count += 1\n        if count == n:\n            return i\n    return None",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1646,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value(\"A\") == 65",
        "num_ids": 1178,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def sum_even_and_even_index(arr):\n    # Initialize the sum of even numbers at even positions\n    even_sum = 0\n    \n    # Iterate through the list and add even numbers at even positions to the sum\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            \n    return even_sum",
        "test": "assert sum_even_and_even_index([5, 4, 3, 2, 1]) == 0",
        "num_ids": 2225,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a Python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize variables\n    sum = 0\n    num = 2\n    count = 0\n    \n    # Check if n is even and greater than 1\n    if n % 2 == 0 and n > 1:\n        \n        # Loop through even natural numbers that are raised to the fifth power\n        while count < n:\n            if num ** 5 == num:\n                sum += num\n                count += 1\n            num += 2\n        \n        # Return the sum of the even natural numbers that are raised to the fifth power\n        return sum\n    else:\n        print(\"Error: n must be even and greater than 1.\")",
        "test": "assert even_Power_Sum(10000) == 25500000000067025  # 2^8 + 10000 = 25500000000067025",
        "num_ids": 2397,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for t in test_list:\n        rear_elements.append(t[1])\n    return rear_elements",
        "test": "assert rear_extract([]) == []",
        "num_ids": 1856,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    result = []\n    for i in range(len(test_tup2)):\n        result.append(test_tup1[i] - test_tup2[i])\n\n    return tuple(result)",
        "test": "assert substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 2426,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a Python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum of even index binomial coefficients to 0\n    sum = 0\n    \n    # Loop through the numbers from 2 to n\n    for i in range(2, n+1):\n        # Calculate the even index binomial coefficient\n        coeff = math.factorial(i) // math.factorial(i-2)\n        \n        # Add the even index binomial coefficient to the sum\n        sum += coeff\n    \n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0   # n = 0",
        "num_ids": 2048,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3)*3.14159*r*h**2\n    return volume",
        "test": "assert volume_cylinder(5,6) == 66",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 6) == {}",
        "num_ids": 1639,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 1629,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # Initialize variables\n    num = 1\n    count = 0\n\n    # Calculate the nth decagonal number\n    while count < n:\n        num += 1\n        count += 1\n        if num % 2!= 0:\n            num = (num - 1) // 2\n        else:\n            num = (num + 1) // 2\n\n    # Return the nth decagonal number\n    return num",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1910,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1,2,3,4,5], 6) == (False, -1)",
        "num_ids": 2171,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Initialize a set to store unique elements in the list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5, 6]) # True",
        "num_ids": 1476,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n",
        "test": "assert sub_list([1,2,3,4,5],[1,2,3,4,5]) == [0, 0, 0, 0, 0]",
        "num_ids": 2094,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def validate(n):\n    freq = {}\n    while n!= 0:\n        freq[n % 10] = freq.get(n % 10, 0) + 1\n        n //= 10\n    for k, v in freq.items():\n        if v == k:\n            return True\n    return False",
        "test": "assert validate(123456789)",
        "num_ids": 1447,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def check_element(lst, element):\n    for item in lst:\n        if item!= element:\n            return False\n    return True",
        "test": "assert check_element([1, 2, 3, 4, 5], 6) == False",
        "num_ids": 1205,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    matches = re.findall(pattern, text)\n    return bool(matches)\n",
        "test": "assert text_match_two_three(\"bbb\") == False",
        "num_ids": 1310,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Input: \n    a: array of integers\n    n: size of the array\n    k: integer representing the number of times the array should be repeated\n\n    Output: \n    The largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    # Iterate through the array and find the maximum sum of a contiguous array\n    for i in range(n):\n        # Find the maximum sum of a subarray ending at i\n        ending_here = max(a[i], 0) * k\n        # Update max_ending_here with the maximum sum of a subarray ending at i\n        max_ending_here = max(max_ending_here, ending_here)\n        # Update max_so_far with the maximum sum of a subarray ending at i\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_sub_array_sum_repeated([1000000000], 1, 1) == 1000000000 # Test case 4",
        "num_ids": 3494,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    return sum([i**2 for i in range(n, 0, -2)])",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1479,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length.\n    '''\n    max_list = []\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_list = sublist\n            max_length = len(sublist)\n    return max_list",
        "test": "assert max_length([]) == []",
        "num_ids": 2268,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    # base case\n    if k == 0:\n        return 1\n    # recursive case\n    else:\n        for i in range(1, n+1):\n            count += count_no_of_ways(n-i, k)\n        # decrement k by 1\n        k -= 1\n        return count",
        "test": "assert count_no_of_ways(6, 5) == 0",
        "num_ids": 2863,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # Find the quotient of n and m\n    quotient = round(n/m)\n    # Return the quotient\n    return quotient",
        "test": "assert find(10,10) == 1",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    third_side = (w**2 + h**2)**0.5\n    return third_side",
        "test": "assert otherside_rightangle(3,4) == 5.0",
        "num_ids": 1336,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize a variable to store the maximum value\n    max_val = None\n\n    # Loop through each element in the list\n    for element in listval:\n\n        # Check if the current element is greater than the maximum value\n        if max_val is None or element > max_val:\n            max_val = element\n\n    # Return the maximum value\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5, \"max_val([1, 2, 3, 4, 5]) should return 5.\"",
        "num_ids": 1846,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a variable to store the sum of divisors\n    divisor_sum = 0\n    # Calculate the sum of all divisors of the number using a loop\n    for i in range(1, number+1):\n        if number % i == 0:\n            # If the number is divisible by i, add i to the sum of divisors\n            divisor_sum += i\n    # Return the sum of divisors\n    return divisor_sum",
        "test": "assert sum_div(0) == 0",
        "num_ids": 1432,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        while left < right and arr[left] > arr[right]:\n            left += 1\n        while left < right and arr[right] < arr[left]:\n            right -= 1\n        if left < right:\n            count += 1\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    return count",
        "test": "assert get_Inv_Count([]) == 0",
        "num_ids": 2933,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n\n    return result",
        "test": "assert flatten_list([1, 2, 3, [4, 5, [6, [7]]]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 1677,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate from it.\n    '''\n    max_val = stdata[0][1]  # assume first tuple is the maximum aggregate\n    for tup in stdata:\n        if tup[1] > max_val:\n            max_val = tup[1]\n    return max_val",
        "test": "assert max_aggregate([(\"apple\", 2), (\"banana\", 3), (\"cherry\", 1), (\"date\", 4), (\"elderberry\", 5)]) == 5",
        "num_ids": 2514,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    # Create a list of all binary sequences of length n\n    binary_sequences = []\n    for i in range(2**n):\n        binary_seq = ''.join(bin(i)[2:])\n        binary_sequences.append(binary_seq)\n\n    # Create a dictionary to store the count of each binary sequence\n    count = {}\n    for binary_seq in binary_sequences:\n        bit_sum = 0\n        for bit in binary_seq:\n            bit_sum += int(bit)\n        count[binary_seq] = bit_sum\n\n    # Find the maximum count of a binary sequence\n    max_count = 0\n    for binary_seq, count in count.items():\n        if count > max_count:\n            max_count = count\n\n    # Return the count of all binary sequences of length 2n with sum of first n bits equal to sum of last n bits\n    return max_count",
        "test": "assert count_binary_seq(0) == 0",
        "num_ids": 2458,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n        else:\n            depth += 1\n            break\n    return depth",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 1947,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = arr[::-1]  # reverse the array to find it in reverse order\n    return arr[index]  # return the element at the given index",
        "test": "assert find_Element(arr = [1,2,3,4,5], ranges = [0,10], rotations = 2, index = 2) == 3",
        "num_ids": 4000,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words",
        "test": "assert start_withp(['date', 'fig', 'grape', 'honeydew']) == []",
        "num_ids": 1541,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    prefix_sum = [0] * n\n    prefix_sum[index] = 1\n    max_sum = float('-inf')\n\n    for i in range(1, n):\n        current_sum = prefix_sum[i] + a[i - 1]\n        if current_sum >= k:\n            max_sum = max(max_sum, current_sum)\n        prefix_sum[i] = current_sum\n\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 1, 1, 1], 3, 0, 1) == 1",
        "num_ids": 3072,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1 or n == 1:\n        return tuplex\n\n    colon = []\n    if m == 1:\n        for i in range(len(tuplex)):\n            colon.append(tuplex[i])\n        return tuple(colon)\n\n    elif n == 1:\n        for i in range(len(tuplex)):\n            colon.append(tuplex[i])\n        return tuple(colon)\n\n    else:\n        for i in range(m):\n            for j in range(n):\n                colon.append(tuplex[i][j])\n        return tuple(colon)",
        "test": "assert colon_tuplex(\"hello\",1,5) == \"hello\"",
        "num_ids": 2167,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def large_product(nums1, nums2, N):\n    # Create two sorted lists from the input lists\n    l1 = sorted(nums1)\n    l2 = sorted(nums2)\n\n    # Initialize two variables to store the largest products found\n    max_prod1 = 0\n    max_prod2 = 0\n\n    # Iterate through each factor in the input lists\n    for i in range(N):\n        # Find the index of the first factor in the input list\n        j = i % len(l1)\n\n        # If the current factor is in the first list, compute the product and update max_prod1\n        if l1[i] == l1[j]:\n            max_prod1 = max(max_prod1, l1[i] * l2[j])\n\n        # If the current factor is in the second list, compute the product and update max_prod2\n        if l2[i] == l2[j]:\n            max_prod2 = max(max_prod2, l1[i] * l2[j])\n\n    # Return the largest product found\n    return max(max_prod1, max_prod2)",
        "test": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3) == 24",
        "num_ids": 4115,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(3,4) == 4",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"\") == ()",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # initialize left most unset bit to 1\n    left_most_unset_bit = 1\n\n    # loop through each bit and set it to 0\n    for i in range(7, -1, -1):\n        n = n & (1 << i)\n        left_most_unset_bit = n & 0b100000000000000000000000000000000\n\n    return left_most_unset_bit",
        "test": "assert set_left_most_unset_bit(0) == 0 # should return 0",
        "num_ids": 1658,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume",
        "test": "assert volume_cone(1,1) == 3.141592653589793",
        "num_ids": 1406,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # find the highest power of 2 less than or equal to n\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    return power_of_2",
        "test": "assert highest_Power_of_2(0) == 1",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def find_lucas(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 1695,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(item.format(string))\n    return formatted_list",
        "test": "assert add_string([], \"\") == [] # test empty list",
        "num_ids": 1591,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Initialize the nested dictionary\n    d = {}\n\n    # Loop through all lists and convert them to dictionaries\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                d[i,j,k] = l1[i][j][k]\n\n    return d",
        "test": "assert convert_list_dictionary([], [], []) == {}, \"Empty list should return an empty dictionary.\"",
        "num_ids": 3649,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def get_max_sum(n):\n    max_sum = float('-inf')\n    for i in range(1, n+1):\n        for j in range(1, n//i + 1):\n            for k in range(1, n//(i*j) + 1):\n                for l in range(1, n//(i*j*k) + 1):\n                    sub_sum = (j + l) * k\n                    if max_sum < sub_sum + i:\n                        max_sum = sub_sum + i\n    return max_sum",
        "test": "assert get_max_sum(15) == 31",
        "num_ids": 2528,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes in a list as input and returns the list with maximum length.\n    '''\n\n    # initialize maximum length variable and index\n    max_length = input_list[0]\n    max_index = 0\n\n    # iterate through the list and update the maximum length and index\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_index = i\n\n    # return the list with maximum length\n    return input_list[max_index:max_index+1]",
        "test": "assert max_length_list([1]) == [1]",
        "num_ids": 1981,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the set is empty or has only one element\n    if test_set == set() or len(test_set) == 1:\n        return True\n    else:\n        return False",
        "test": "assert not check_distinct((\"apple\", \"banana\", \"apple\", \"cherry\", \"kiwi\", \"orange\"))",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for char in str1:\n        if char in char_dict:\n            return char\n    return None",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 2100,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Check if the string starts with the character\n    if string.startswith(regex):\n        return True\n\n    # Check if the string ends with the character\n    if string.endswith(regex):\n        return True\n\n    return False",
        "test": "assert check_char('world') == False",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def partition(arr, low, high):\n    pivot = arr[high]  # Choose the last element as pivot\n    i = low - 1  # Initialize the index of smaller element as -1\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]  # Swap pivot and last element\n    return i + 1\n\n\ndef quick_sort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi - 1)\n        quick_sort(arr, pi + 1, high)\n\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    quick_sort(arr, 0, len(arr) - 1)\n    return arr[len(arr) // 2]\n",
        "test": "assert median_numbers(1,1,1) == 1.0",
        "num_ids": 1914,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4]) == 10  # pass",
        "num_ids": 2209,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    result_tup = []\n\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] ^ test_tup2[i])\n\n    return tuple(result_tup)",
        "test": "assert bitwise_xor((1, 2), (1, 2)) == (0, 0) # case 2",
        "num_ids": 3240,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a dictionary to store the frequency of each tuple\n    freq = {}\n    # loop through each tuple in the list and add it to the dictionary with its frequency\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    # return the number of unique tuples in the list\n    return len(freq)",
        "test": "assert extract_freq([]) == 0, \"extract_freq([]) should return 0\"",
        "num_ids": 2125,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should be of same length.\")\n        return\n    \n    # Initialize a new tuple to store the result\n    result_tup = ()\n    \n    # Iterate through the tuples and add their elements to the result tuple\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    \n    return result_tup",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)",
        "num_ids": 2006,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n\n    if a<b: \n        return a \n    else: \n        return b",
        "test": "assert minimum(3,4) == 3 ",
        "num_ids": 809,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False ",
        "test": "assert check_tuplex((1, 2, 3), (4, 5)) == False",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 21,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # if the number is even, return true\n    if x % 2 == 0:\n        return True\n    \n    # if the number is odd, return false\n    else:\n        return False",
        "test": "assert find_Parity(9876543210) == 1, \"9876543210 should be even parity\"",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert n to a string\n    n_str = str(n)\n    # Initialize variables\n    num = int(n_str)\n    next_bigger = 0\n    # Iterate through each digit\n    for i in range(len(n_str)):\n        # Find the next larger digit\n        temp = num % 10\n        # If the current digit is not the next larger, increase it by 1\n        if temp!= next_bigger:\n            next_bigger = temp\n            num //= 10\n    # Convert the next larger number back to an integer\n    return int(next_bigger)",
        "test": "assert rearrange_bigger(0) == 0",
        "num_ids": 2933,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Find the k smallest pairs in nums1 and nums2 such that they consist of one element from each array.\n    The pairs are returned as a list of tuples where each tuple contains two elements from nums1 and nums2.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n\n    # Iterate through the arrays and insert the k smallest pairs into the min heap\n    for num1, num2 in zip(nums1, nums2):\n        # If the size of the heap is less than or equal to k, insert the current pair into the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num1, num2))\n        # If the size of the heap is greater than k, remove the smallest pair from the heap\n        elif len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Return the list of pairs in the heap\n    return [pair for pair in min_heap]",
        "test": "assert k_smallest_pairs([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 3) == [(1, 4), (2, 5), (3, 6)]",
        "num_ids": 3925,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([0, 0]) == 0 # check case where all elements are zero",
        "num_ids": 2718,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return min(listval)",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1845,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 24,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    word = re.sub('_(.)?', lambda m: m.group(1).upper(), word)\n    return word",
        "test": "assert snake_to_camel('UPPER_CASE') == 'UPPERCASE'",
        "num_ids": 1648,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def remove_odd(l):\n    return [num for num in l if num % 2!= 0]",
        "test": "assert remove_odd([]) == []",
        "num_ids": 1690,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extracts the n-th element from the given list of tuples.\n\n    Args:\n    list1 (list): A list of tuples.\n    n (int): The index of the element to be extracted.\n\n    Returns:\n    tuple: The n-th element from the list.\n    '''\n\n    if n > len(list1):\n        return None\n\n    return list1[n-1]",
        "test": "assert extract_nth_element([('apple', 1), ('banana', 2), ('orange', 3), ('grape', 4)], 3) == ('orange', 3)",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def overlapping(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], []) == False # overlapping with an empty list",
        "num_ids": 1707,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def max_Product(arr):\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max_product = max(arr[i], max_product * arr[i])\n    return max_product",
        "test": "assert max_Product([0, 0, 0, 0]) == 0",
        "num_ids": 1951,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    result = []\n    for tup in Input:\n        if not result or tup[0]!= result[-1][0]:\n            result.append(tup)\n    return result",
        "test": "assert group_tuples([]) == []",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element",
        "test": "assert Find_Max([1]) == 1",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(f\"The total sum of the numbers in the list is: {total_sum * len(list1)}\")",
        "test": "assert round_and_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 355",
        "num_ids": 2381,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result",
        "test": "assert cube_Sum(0) == 0 # cube_Sum(0) should return 0 when n = 0",
        "num_ids": 1196,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # concatenate each element of tuple by the delimiter\n    result = ''\n    for item in test_tup:\n        result += item\n    return result",
        "test": "assert concatenate_tuple(()) == ''",
        "num_ids": 1479,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def find_Average_Of_Cube(n):\n    # initialize sum and count\n    sum_of_cubes = 0\n    count = 0\n    \n    # loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate cube of current number\n        cube = i ** 3\n        # add cube to sum and increment count\n        sum_of_cubes += cube\n        count += 1\n    \n    # calculate average of cubes\n    average = sum_of_cubes / count\n    \n    # return the average\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1726,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[::-1])\n",
        "test": "assert extract_rear(('apple', 'banana', 'cherry', 'date', 'elderberry')) == ('date', 'elderberry')",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 6) == 0",
        "num_ids": 2067,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def filter_oddnumbers(nums):\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 1476,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year, month, day = map(int, re.findall(r'\\d+', dt))\n    formatted_date = f'{day:02d}-{month:02d}-{year:04d}'\n    return formatted_date",
        "test": "assert change_date_format(\"2020-01-01\") == \"01-01-2020\"",
        "num_ids": 2130,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 2803,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Convert the tuples to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n\n    # Create an empty tuple to store the elementwise and tuples\n    and_tuples = ()\n\n    # Iterate through the lists and append the elementwise and tuples to the empty tuple\n    for i in range(len(test_list1)):\n        if test_list1[i] == test_list2[i]:\n            and_tuples += (test_list1[i],)\n        elif test_list1[i] == test_list2[i-1]:\n            and_tuples += (test_list1[i-1], test_list2[i])\n        elif test_list1[i-1] == test_list2[i]:\n            and_tuples += (test_list1[i], test_list2[i-1])\n        else:\n            and_tuples += (test_list1[i], test_list2[i])\n\n    # Return the empty tuple as the result\n    return and_tuples\n",
        "test": "assert and_tuples((), ()) == ()",
        "num_ids": 2576,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    directrix = (c - b**2) / (2 * a)\n    return directrix",
        "test": "assert parabola_directrix(1, 1, 1) == 0",
        "num_ids": 1938,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # iterate over each element in list1 and check if it exists in list2\n    for elem in list1:\n        if elem in list2:\n            # if an element is found, return true\n            return True\n    # if no common element is found, return false\n    return False",
        "test": "assert common_element([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 1854,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    s = (base1 + base2) / 2\n    area = (base1 + 2 * base2 + height) / 2\n    return area - s\n",
        "test": "assert median_trapezium(1,2,5) == 3.5",
        "num_ids": 2228,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Check if the number is greater than all elements in the array\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n\n    # If the number is not greater than any element, return False\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    # Using re module to split the string into list of words\n    words = text.split()\n\n    # Using a loop to check if any word starts with 'a' and has at least one 'b'\n    for word in words:\n        if word.startswith('a') and len(re.findall('b', word)) >= 1:\n            return True\n\n    return False",
        "test": "assert text_match_one(\"pwwkew\") == False",
        "num_ids": 1460,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n\n    # using modulo operator to find last digit\n    last_digit = n % 10\n\n    return last_digit",
        "test": "assert last_Digit(123456789) == 9, \"last_Digit(123456789) should return 9\"",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num >= 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([]) == []",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_odd(str1):\n    '''\n    Remove odd characters from a string.\n\n    Args:\n        str1 (str): The input string.\n\n    Returns:\n        str: The modified string without odd characters.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalnum() or char =='' or char == '-':\n            new_str += char\n    return new_str",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 1464,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuple pairs in the input list.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 1921,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 1425,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a text as input and returns a list of tuples containing the adverb and its position in the sentence.\n\n    The function first defines a regular expression pattern to match the adverbs (that is, those that start with \"the\", \"a\", \"an\", etc.). \n    It then iterates over the input text and matches each word in the sentence against the pattern. \n    If a match is found, the function returns a tuple containing the adverb and its position in the sentence.\n\n    Parameters:\n        text (str): The input text to search for adverbs.\n\n    Returns:\n        list: A list of tuples, where each tuple contains the adverb and its position in the sentence.\n    '''\n    # Define the pattern to match adverbs\n    pattern = re.compile(r\"^(the|a|an|theirs|their|his|her|its|it|us|our|thee|there|theyre|therefore)$\")\n    \n    # Initialize an empty list to store the adverbs and their positions\n    adverbs_positions = []\n    \n    # Iterate over the input text and match each word against the pattern\n    for match in re.finditer(pattern, text):\n        # Add the match to the list of adverbs and their positions\n        adverbs_positions.append((match.group(), match.start()))\n    \n    # Return the list of adverbs and their positions\n    return adverbs_positions",
        "test": "assert find_adverb_position('This is a test') == []",
        "num_ids": 2600,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3",
        "test": "assert surfacearea_cube(0) == 0",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Return the ration of positive numbers in the input array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    if positive_count == 0:\n        return \"No positive numbers in the input array\"\n    else:\n        return positive_count / len(nums)",
        "test": "assert positive_count([1]) == 1 # positive_count should return 1 for [1]",
        "num_ids": 2188,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0:\n            neg = list1[i]\n    return neg",
        "test": "assert largest_neg([1, 2, 3, -4, 5, 6, 7]) == -4",
        "num_ids": 1472,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimed_list = []\n    for tuple in test_list:\n        if len(tuple) >= K:\n            trimed_list.append(tuple)\n    return trimed_list",
        "test": "assert trim_tuple([], 1) == []",
        "num_ids": 2391,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 3381,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    return count_dict",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2,3,4,5]) == Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1})",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1669,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def extract_string(str, l):\n    '''\n    Extract strings from a list of string values with a specified size.\n\n    Args:\n        str (str): a string containing the list of string values.\n        l (int): the desired size of the extracted strings.\n\n    Returns:\n        list: a list of extracted strings.\n    '''\n    extracted = []\n    for i in range(len(str)):\n        if i < l:\n            extracted.append(str[i])\n    return extracted",
        "test": "assert extract_string(\"hello world\", 8) == \"hello world\"",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \", \"\")\n    return text1\n\ntext = \"  This is a sample text with   some whitespace  \"\nresult = remove_whitespaces(text)\nprint(result) # Output: This is a sample text with some whitespace",
        "test": "assert remove_whitespaces(\"    \") == \"\"",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost: \n        return 0 \n    else: \n        return actual_cost - sale_amount\n\nprint(loss_amount(100, 50)) # Output: 50\nprint(loss_amount(50, 100)) # Output: 0\nprint(loss_amount(300, 200)) # Output: 150",
        "test": "assert loss_amount(1000, 1000) == 0",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def sumofFactors(n):\n    # initialize a variable to store the sum of even factors\n    even_sum = 0\n\n    # iterate through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # if i is a factor of n, add it to the even_sum variable\n        if i % n == 0:\n            even_sum += i\n\n    # return the even_sum variable\n    return even_sum",
        "test": "assert sumofFactors(0) == 0 # correct",
        "num_ids": 1629,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Function to match a word containing 'z'.\n    '''\n    pattern = r'\\b[aeiou]\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz(\"Hello, World! This is a test.\") == True",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_dict = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    if monthnum2 in month_dict:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(4) == True",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist) // 2):\n        stringlist[i], stringlist[-i-1] = stringlist[-i-1], stringlist[i]\n    return stringlist",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_list = []\n\n    for i in range(len(lst)):\n        sublist = lst[i:i+1]\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n\n    return min_list",
        "test": "assert Find_Min([]) == []",
        "num_ids": 1854,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(20,30) == 600, \"The correct area of a rectangle with sides 20 and 30 is 600.\"",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z][a-z]*', '', str1)",
        "test": "assert remove_uppercase('') == ''",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst]",
        "test": "assert Extract([]) == []",
        "num_ids": 1599,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize the counter to 0\n    upper_count = 0\n    \n    # loop through each character in the string\n    for char in str:\n        # if the character is uppercase, increment the counter\n        if char.isupper():\n            upper_count += 1\n    \n    # return the count of upper case characters in the string\n    return upper_count",
        "test": "assert upper_ctr(\"A\") == 1",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def combinations_list(lst):\n    '''\n    Create a list of all possible combinations of elements in the given list.\n    '''\n    result = []\n    for i in range(1, len(lst) + 1):\n        sub_lst = lst[:i]\n        result.append(sub_lst)\n    return result",
        "test": "assert combinations_list([]) == []",
        "num_ids": 3917,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_product = max(0, current_product + arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product",
        "test": "assert max_subarray_product([1]) == 1",
        "num_ids": 2585,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in a dictionary are equal to the given value.\n    '''\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True",
        "test": "assert check_value({}, 1) == True",
        "num_ids": 2298,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1834,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def max_product(arr):\n    max_product = arr[0]\n    for num in arr[1:]:\n        if num > max_product:\n            max_product = num*max_product\n        else:\n            max_product *= num\n    return max_product",
        "test": "assert max_product([1]) == 1",
        "num_ids": 1778,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Parameters:\n        test_tup (tuple): A tuple containing two or more integers.\n\n    Returns:\n        tuple: A tuple containing the pairwise addition of the neighboring elements.\n    '''\n\n    result = []\n\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n\n    return tuple(result)\n",
        "test": "assert add_pairwise(('a', 'b')) == ('ab',)",
        "num_ids": 2033,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the product variable\n    product = 1\n    # Iterate through the array and multiply each element with the product variable\n    for num in arr:\n        product = (product * num) % n\n    # Return the product variable\n    return product",
        "test": "assert find_remainder([5, 10, 20, 30], 5) == 0",
        "num_ids": 1662,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # If the list is empty, return False\n    if len(l) == 0:\n        return False\n    \n    # If the first element of the list is not equal to 1, return False\n    if l[0]!= 1:\n        return False\n    \n    # Iterate through the list from the second element onwards\n    for i in range(1, len(l)):\n        # If the current element is not equal to the next element and not equal to 1, return False\n        if l[i]!= (i+1) and l[i]!= 1:\n            return False\n    \n    # If the loop completes without returning False, the list contains consecutive numbers\n    return True",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == False",
        "num_ids": 2263,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Define a set to store the intersection of the two lists\n    intersection = set(test_list1) & set(test_list2)\n    # Convert the set to a tuple and return it\n    return tuple(intersection)",
        "test": "assert tuple_intersection([], []) == ()",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace characters in a string with new characters.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello world\", \"x\", \"x\") == \"hello world\"",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # sort the dictionary by value in ascending order\n    sorted_dict = dict(counter)\n    \n    return sorted_dict",
        "test": "assert sort_counter({}) == {}",
        "num_ids": 2840,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest + smallest",
        "test": "assert big_sum([10,10]) == 20",
        "num_ids": 1995,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('HELLO') == 'hello'",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'(?<![a-z])\\b[a-z]\\b', '', str1)",
        "test": "assert remove_lowercase(\"1234567890\") == \"1234567890\"",
        "num_ids": 1399,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #converting the number to string\n    num_str = str(n)\n\n    #finding the first digit of the string\n    first_digit = int(num_str[0])\n\n    return first_digit",
        "test": "assert first_Digit(0) == 0, \"The first digit of 0 should be 0\"",
        "num_ids": 1445,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1289,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def difference(n):\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n\n    return sum_of_numbers - sum_of_cubes",
        "test": "assert difference(0) == 0",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] & 1 == 1:\n                count += 1\n    return count\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nN = len(A)\nprint(find_Odd_Pair(A, N))",
        "test": "assert find_Odd_Pair([2,4,6,8,10], 3) == 0 # test case 3",
        "num_ids": 2171,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_char = None\n        if char.isupper():\n            new_char = char.lower()\n        elif char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string",
        "test": "assert toggle_string(\"12345\") == \"12345\"",
        "num_ids": 1387,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n2!= 0:\n        digit = n2 % 10\n        diff += abs(digit - n1 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 2293,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_sum = max(max_sum, max_ending_here)\n    return max_sum",
        "test": "assert max_sub_array_sum([1], 1) == 1 # input: [1], size: 1",
        "num_ids": 2200,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Convert the tuples into sets to remove duplicates\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    \n    # Find the union of the two sets\n    union_set = test_set1.union(test_set2)\n    \n    # Convert the set back into a sorted list and return it\n    return sorted(union_set)",
        "test": "assert union_elements((1, 2, 3, 4), (1, 2, 3, 4)) == [1, 2, 3, 4]",
        "num_ids": 2521,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublists.\n    '''\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i - 1]:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 1\n\n    return max_length",
        "test": "assert Find_Max_Length([1]), \"The list [1] should return 1.\"",
        "num_ids": 1956,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\()[^)]*(?=\\))'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"This is a test string with 'double quotes' and'single quotes' in it.\"\nvalues = extract_values(text)\nprint(values) # Output: ['double quotes','single quotes']",
        "test": "assert extract_values(\"\") == []",
        "num_ids": 2529,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a Python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    # Check if the list is empty\n    if len(arr) == 0:\n        return 0\n\n    # Initialize two variables to keep track of the number of pairs\n    unequal = 0\n    equal = 0\n\n    # Iterate through the list\n    for i in range(n):\n\n        # Check if the first element is equal to the second element\n        if arr[i] == arr[i+1]:\n            equal += 1\n        else:\n            # If the first element is not equal to the second element, check if it is the reverse of the second element\n            if arr[i]!= arr[i+1]:\n                if i == 0:\n                    unequal += 1\n                else:\n                    unequal += 1\n\n        # If the number of unequal pairs is greater than 0, return the count\n        if unequal > 0:\n            return unequal\n\n    # If no pairs can be formed, return 0\n    return 0",
        "test": "assert count_Pairs([1,2,3,4,5],2) == 1 # unsorted pairs",
        "num_ids": 1990,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split('') == []",
        "num_ids": 1122,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def sum_digits(n):\n    '''\n    Function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_of_digits = 0\n    while n > 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits",
        "test": "assert sum_digits(1234) == 1 + 2 + 3 + 4",
        "num_ids": 1386,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if not list1:\n        return True\n    \n    # Check if the first element is greater than or equal to the last element\n    if list1[0] >= list1[-1]:\n        return True\n    \n    # Check if the first element is smaller than the last element\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return True\n    \n    # If the loop completes without returning True, then the list is sorted\n    return False",
        "test": "assert issort_list([1, 1, 1, 1, 1]) # True",
        "num_ids": 2008,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n    length (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    '''\n\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef sort_sublists(list1):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    arr = list1\n\n    merge_sort(arr)\n\n    return arr",
        "test": "assert sort_sublists([['a'], ['b', 'c']]) == [['a'], ['b', 'c']]",
        "num_ids": 3907,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def two_unique_nums(nums):\n    '''\n    Removes duplicate numbers from a given number of lists.\n    \n    Parameters:\n    nums (list): A list of numbers\n    \n    Returns:\n    list: A new list with duplicate numbers removed\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([]) == []",
        "num_ids": 2200,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 1621,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area",
        "test": "assert surfacearea_cylinder(3,0) == 0",
        "num_ids": 2248,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    n = len(A)\n    m = len(B)\n    if m == 0:\n        return True\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        elif A[i] < B[j]:\n            i += 1\n        else:\n            j += 1\n    return j == m",
        "test": "assert is_Sub_Array([1,2,3,4,5], [2,4,6]) == False",
        "num_ids": 2398,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def last_Digit_Factorial(n):\n    # Convert the number to a string\n    n_str = str(n)\n    \n    # Find the last digit of the number and convert it to an integer\n    last_digit = int(n_str[-1])\n    \n    # Find the factorial of the last digit\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return last_digit",
        "test": "assert last_Digit_Factorial(1) == 1, \"The last digit in the factorial of 1 should be 1.\"",
        "num_ids": 1699,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def interleave_lists(*lists):\n    '''\n    Create a single flat list from multiple lists of the same length.\n    '''\n    result = []\n    for lst in lists:\n        result.extend(lst)\n    return result",
        "test": "assert interleave_lists([],[],[]) == []",
        "num_ids": 1977,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of the dissimilar elements.\n\n    The function iterates over each element in the two tuples and checks if it is also in the second tuple. If it is,\n    it is not included in the result.\n\n    For example, if the input tuples are:\n\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (2, 4, 6, 8)\n\n    The function would return: [1, 3, 5, 7, 9]\n\n    Args:\n    test_tup1 (tuple): A tuple of values to check for dissimilar elements.\n    test_tup2 (tuple): A tuple of values to compare with.\n\n    Returns:\n    list: A list of dissimilar elements found in the two input tuples.\n    '''\n\n    result = []\n\n    for element in test_tup1:\n        if element not in test_tup2:\n            result.append(element)\n\n    return result",
        "test": "assert find_dissimilar((\"apple\", \"banana\", \"cherry\"), (\"apple\", \"banana\", \"cherry\")) == []",
        "num_ids": 2065,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define an empty list to store the filtered elements\n    filtered_list = []\n\n    # Iterate over each element in the nested mixed tuple\n    for element in test_tuple:\n        # Check if the element is a tuple (which means it's a nested tuple)\n        if isinstance(element, tuple):\n            # Recursively call the function on the nested tuple\n            filtered_list.extend(even_ele(element, even_fnc))\n        else:\n            # If the element is not a tuple, it means it's a regular value, so check if it's even\n            if even_fnc(element):\n                # If it's even, add it to the filtered list\n                filtered_list.append(element)\n\n    # Return the filtered list\n    return filtered_list",
        "test": "assert even_ele((1, 2, 3, 4, 5, 6), lambda x: x % 2!= 0) # True",
        "num_ids": 2660,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def surface_Area(b,s):\n    area = b*s\n    return area",
        "test": "assert surface_Area(5,3) == 15 # base edge=5, height=3",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True, \"my_dict({}) should return True\"",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if num == 0:\n        return 1\n    catalan_series = [0, 1]\n    for i in range(2, num+1):\n        catalan_series.append(catalan_series[i-1] + catalan_series[i-2])\n    return catalan_series[-1]",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 2696,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_regex = r'\\b(?:\\w+ly)s?\\b'\n    match = re.search(adverb_regex, text)\n    if match:\n        adverb = match.group(0)\n        start = text.index(adverb)\n        end = start + len(adverb)\n        return start, end\n    else:\n        return None",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == [(0, 4), (10, 14)]",
        "num_ids": 2541,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the items into a heap\n    items_heap = [(item, price) for item, price in items]\n    # Use a max heap to keep track of the n most expensive items\n    heapq.heapify(items_heap)\n    # Return the n most expensive items in the heap\n    return [item for item, price in items_heap[:n]]",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 2822,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Remove all the elements except the first n elements from the list\n    new_l = l[:n]\n    # Append the new list to the original list and return it\n    return new_l + l[n:]",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]",
        "num_ids": 1846,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        min_num = min(nums)\n        max_num = max(nums)\n        return abs(max_num - min_num)",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1715,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sum = 0\n    for i in range(a, b+1):\n        sum += i ** 2\n    return sum\n\nprint(perfect_squares(1, 5))  # Output: 25\nprint(perfect_squares(10, 20))  # Output: 225\nprint(perfect_squares(1, 10))  # Output: 31",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 3407,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = x\n    theta = y\n    return (r * cmath.cos(theta), r * cmath.sin(theta))",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # check if newList has length greater than 1\n    if len(newList) > 1:\n        # check if newList has only two elements\n        if len(newList) == 2:\n            # swap first and last elements in newList\n            newList[0], newList[-1] = newList[-1], newList[0]\n            # return newList after swapping\n            return newList\n        else:\n            # swap first and last elements in newList\n            newList[0], newList[-1] = newList[-1], newList[0]\n            # return newList after swapping\n            return newList\n    else:\n        # return newList if length is 1\n        return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1] # check if the function works correctly for an empty list",
        "num_ids": 1984,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): The number of terms to be considered in the binomial coefficient sum.\n    k (int): The number of terms to be included in the binomial coefficient sum.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n\n    '''\n\n    if k > n:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    result = 1\n    for i in range(k):\n        result *= (i+1)\n\n    return result",
        "test": "assert binomial_Coeff(0,0) == 1 # base case",
        "num_ids": 2210,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 35,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    # Remove all non-numeric characters from the input ip address\n    ip = re.sub('[^0-9.]', '', ip)\n    # Check if the ip address is valid (no zeroes present)\n    if len(ip) > 0:\n        return ip\n    else:\n        return None",
        "test": "assert removezero_ip(\"1.2.3\") == \"1.2.3\"",
        "num_ids": 2105,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = abs(even_num - odd_num)\n    return diff\n",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2194,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def min_Swaps(str1, str2):\n    swaps = 0\n    \n    for i in range(len(str1)):\n        if str1[i] == '1' and str2[i] == '0':\n            swaps += 1\n    \n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] == '0' and str2[i] == '1':\n            swaps += 1\n    \n    return swaps",
        "test": "assert min_Swaps(\"1010\", \"1010\") == 0",
        "num_ids": 2948,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum(len(x) for x in tuple_list)",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 1314,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # If k is greater than the length of one array, then the array to be searched is in the first array\n    if k > n1:\n        # Calculate the position of k in the second array\n        position = k - n1\n\n        # Return the element at that position in the second array\n        return arr2[position]\n    # If k is less than or equal to the length of the first array, then the array to be searched is in the second array\n    else:\n        # Calculate the position of k in the first array\n        position = k - 1\n\n        # Return the element at that position in the first array\n        return arr1[position]",
        "test": "assert find_kth([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 3) == 3",
        "num_ids": 3074,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to string\n    number_str = str(number)\n    # Check if the string is a palindrome\n    if number_str == number_str[::-1]:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(345) == False",
        "num_ids": 1764,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def sum_average(number):\n    # Initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    # Calculate the sum and average of the first n natural numbers\n    if count == 0:\n        average = 0\n    else:\n        average = sum/count\n\n    # Return the sum and average as a tuple\n    return (sum, average)\n",
        "test": "assert sum_average(0) == (0, 0)",
        "num_ids": 1491,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = 0\n    first_char = None\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            first_char = char\n    return first_char",
        "test": "assert first_repeated_char('abcabcab') == 'a'",
        "num_ids": 1790,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if i <= 10:\n            lucids.append(i)\n        elif i % 2 == 0:\n            for j in range(2, int(i/2)+1):\n                if i % j == 0:\n                    break\n            else:\n                lucids.append(i)\n    return lucids",
        "test": "assert get_ludic(0) == [] # ludic numbers from 0 to 0",
        "num_ids": 6505,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def reverse_words(s):\n    # split the string by spaces into a list of words\n    words = s.split()\n    # reverse the list of words\n    words.reverse()\n    # join the list of words back together and return the result\n    return''.join(words)\n",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def prime_num(num):\n    '''\n    A function to check if a given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(3) == True, \"3 is a prime number\"",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Converts degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(360) == 2*math.pi",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 390,
        "answer": "import re\n\ndef find_literals(text, pattern, search_forward=True):\n    '''\n    Search a string for a regex pattern. The function returns a list of all matching substrings, a start index, and an end index.\n    '''\n\n    # Compile the regex pattern\n    pattern_obj = re.compile(pattern)\n\n    # Find all matches of the pattern in the text\n    matches = pattern_obj.finditer(text)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the matches and add them to the result list\n    for match in matches:\n        # Get the matched substring\n        substring = match.group()\n\n        # Check if the substring matches the pattern\n        if pattern_obj.match(substring):\n            # Add the substring and its indices to the result list\n            start_index = match.start()\n            end_index = match.end()\n            result.append((substring, start_index, end_index))\n\n    # Return the result list\n    return result\n",
        "test": "assert find_literals(\"This is a test string\", r'\\b\\w+\\b') == ('test', 0, 4)",
        "num_ids": 2477,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 7\n    else:\n        result = 0\n        i = 2\n        while i <= n:\n            result += i ** 2\n            i += 1\n        return result",
        "test": "assert bell_Number(1) == 5, \"The first bell number is 5\"",
        "num_ids": 2180,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list1[:L-1] + list1[L:]\n    return list1",
        "test": "assert remove_kth_element([1,2,3,4,5], 2) == [1, 3, 4, 5]",
        "num_ids": 2491,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def max_of_nth(test_list, N):\n    # Initialize max value to the first element in the first row\n    max_value = test_list[0][0]\n    \n    # Iterate through the matrix and find the maximum value in then'th column\n    for row in test_list[1:]:\n        for i in range(len(row)):\n            if i == N-1:\n                continue\n            else:\n                max_value = max(max_value, row[i])\n                \n    return max_value",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9",
        "num_ids": 2531,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for i in range(len(lst)):\n        sublist = lst[i]\n        if len(sublist) == 2:\n            merged.append([sublist[0], sublist[1]])\n        else:\n            sublist.reverse()\n            merged.append(sublist)\n    return merged",
        "test": "assert merge([]) == []",
        "num_ids": 1982,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    for i in range(len(test_list)):\n        if i == 0:\n            cumulative_sum.append(test_list[i])\n        else:\n            cumulative_sum.append(cumulative_sum[i-1] + test_list[i])\n    return cumulative_sum",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg_list.append(sum(tup)/len(tup))\n    return avg_list",
        "test": "assert average_tuple(()) == []",
        "num_ids": 2206,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)",
        "test": "assert tuple_modulo((1, 3, 5), (1, 2, 3)) == (0, 1, 2)",
        "num_ids": 2429,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the variables\n    count = 0\n    i = 0\n\n    # Loop through the steps and count the number of jumps\n    while i < steps:\n        # Update the variables\n        count += 1\n        i += 1\n\n        # Check if the number of jumps is less than or equal to the difference between the current distance and the destination point\n        if i <= d:\n            # If the number of jumps is equal to the difference between the current distance and the destination point, update the destination point\n            i = d\n        # If the number of jumps is greater than the difference between the current distance and the destination point, increment the destination point\n        else:\n            # Update the destination point\n            d += 1\n\n    return count",
        "test": "assert min_Jumps(3, 2) == 2 # base case 3",
        "num_ids": 2651,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num in nums1:\n        result.append(num / nums2[0])\n    return result",
        "test": "assert div_list([],[]) == []",
        "num_ids": 1905,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = test_str.replace(\" \", \"\")\n    new_str = new_str.replace(\",\", \"\")\n    new_str = new_str.replace(\"(\", \"\")\n    new_str = new_str.replace(\")\", \"\")\n    new_str = new_str.replace(\".\", \"\")\n    new_str = new_str.replace(\"-\", \"\")\n    new_str = new_str.replace(\"+\", \"\")\n    return new_str",
        "test": "assert move_num('') == ''",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def largest_subset(a):\n    '''\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Initialize variables\n    max_size = 1\n    max_pair = (a[0], a[1])\n\n    # Iterate over the list of numbers\n    for i in range(2, len(a)):\n        # If the current number is greater than the largest number seen so far, update max_size and max_pair\n        if a[i] > a[max_pair[1]]:\n            max_size = 1\n            max_pair = (a[i], a[i])\n        # If the current number is not greater than the largest number seen so far, increment max_size and max_pair by 1\n        else:\n            max_size += 1\n            max_pair = (max(a[i-1], a[i]), max(a[i-1], a[i]))\n\n    # Return the size of the largest subset\n    return max_size",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8]) == 7",
        "num_ids": 3142,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the middle index of the two lists\n    mid = n // 2\n    \n    # sort both lists in ascending order\n    arr1.sort()\n    arr2.sort()\n    \n    # find the median based on whether the two lists are in ascending or descending order\n    if (len(arr1) > len(arr2)):\n        # if arr1 is longer than arr2, return the median of arr1 and arr2, which is the middle index\n        return arr1[mid]\n    else:\n        # if arr2 is longer than arr1, return the median of arr2 and arr1, which is the middle index\n        return arr2[mid]\n",
        "test": "assert get_median([1], [], 1) == 1",
        "num_ids": 3263,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n\n    # initialize an empty list to store the results\n    results = []\n\n    # iterate over each number in the list and compute its n-th power\n    for num in nums:\n        result = num ** n\n        results.append(result)\n\n    return results",
        "test": "assert nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 1667,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False",
        "test": "assert is_upper('abcd') == False",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def swap_List(newList):\n    # swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # return the new list\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 1457,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def triangle_area(r):\n    '''\n    This function finds the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # first define the base and height of the triangle\n    a = 1\n    b = 1\n    c = 1\n    \n    # then calculate the semiperimeter\n    s = a + b + c\n    \n    # then calculate the area of the triangle\n    area = (s/2)*math.sqrt(s*(s-a)*(s-b)*(s-c))\n    \n    # return the area of the triangle\n    return area\n",
        "test": "assert triangle_area(5) == triangle_area(10)",
        "num_ids": 2388,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return None\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n    return None",
        "test": "assert find_First_Missing([1,2,0]) == 3",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('Hello World') == 'Hello%20World'",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def Split(lst):\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 1358,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def adjac(ele, sub=[]):\n    if sub == []:\n        sub = [(ele[0], ele[1]), (ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1),\n               (ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    return sub",
        "test": "assert adjac((0,0), [(0,1),(0,2),(1,1),(1,2),(2,1),(2,2)]) == [(0,1),(0,2),(1,1),(1,2),(2,1),(2,2)]",
        "num_ids": 2564,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Define a variable to store the result\n    result = ''\n\n    # Loop through each character in the string\n    for char in text:\n        # If the character is a whitespace, replace it with an underscore\n        if char.isspace():\n            result += '_'\n        # If the character is not a whitespace, add it to the result\n        else:\n            result += char\n\n    # Return the result\n    return result",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 1812,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def move_zero(num_list):\n    # Traverse through each element of the list\n    for i in range(len(num_list)):\n        # If the element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list.append(0)\n            num_list.pop(i)\n    \n    return num_list",
        "test": "assert move_zero([]) == []",
        "num_ids": 2015,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1, 1, 1, 1, 1], 5) == 0 # check the sum of xor of all pairs of numbers in the given list",
        "num_ids": 1307,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Sort the list using the heapq library\n    hq.heapify(iterable)\n    # Build a new list with the sorted items\n    sorted_list = []\n    while len(iterable) > 0:\n        # Extract the root node and append it to the sorted list\n        sorted_list.append(iterable[0])\n        # Remove the root node from the list\n        hq.heappop(iterable)\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1950,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 22,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # Calculate the profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Return whether the profit or loss is zero\n    return profit == 0 or loss == 0",
        "test": "assert noprofit_noloss(3000, 1000) == False # Test case 1",
        "num_ids": 1697,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return 0\n    \n    # Calculate the wind chill formula\n    wc = (1.8 * math.log(1 + (0.0622 * t) - (0.0065 * t**2) + (0.0004 * t**3))) / (math.log(v) - 1.6)\n    \n    # Round the result to the nearest integer\n    return int(wc)",
        "test": "assert wind_chill(0,20) == 0",
        "num_ids": 2410,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names with lowercase letters\n    lower_names = []\n    \n    # Iterate over each name in the sample names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, add the name to the lower_names list\n            lower_names.append(name)\n    \n    # Sum the length of the names with lowercase letters\n    total_length = sum(len(name) for name in lower_names)\n    \n    # Return the total length of the names with lowercase letters\n    return total_length",
        "test": "assert sample_nam('hello') == 5",
        "num_ids": 1794,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(|\\)|\\W')\n    result = pattern.sub('', items)\n    return result\n\nitems = \"The parenthesis are (not) used in this string.  It is a sample string.\"\nresult = remove_parenthesis(items)\nprint(result)",
        "test": "assert remove_parenthesis(\"\") == \"\"",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def is_nonagonal(n):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        return n + (n-1)*(n-2)//2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define regular expression pattern to match 'z' except at start and end of word\n    pattern = r'\\b(?!.*(z)|^|\\1)(?!.*(z)|$|\\1)\\w*\\b'\n    \n    # use re.search() method to search for match in text\n    match = re.search(pattern, text)\n    \n    # if match is not None, return True\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle('The quick brown fox jumps over the lazy dog') == True",
        "num_ids": 1929,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def reverse_Array_Upto_K(input, k):\n    i = 0\n    j = len(input) - 1\n    \n    while i < j:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1\n    \n    return input[:k]",
        "test": "assert reverse_Array_Upto_K([], 5) == []",
        "num_ids": 2791,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0], *test_tup[1:], test_dict)\n    return test_tup\n",
        "test": "assert add_dict_to_tuple((1,2,3), {'a': 1, 'b': 2, 'c': 3}) == (1, 2, 3, {'a': 1, 'b': 2, 'c': 3})",
        "num_ids": 1976,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    max_path = []\n    current_path = []\n    current_cost = 0\n    max_avg = 0\n    num_visited = 0\n\n    # Iterate through each cell\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # If the current cell is an obstacle, ignore it and move to the next cell\n            if cost[i][j] == 0:\n                continue\n            \n            # If the current cell is not the bottom right cell, continue\n            if i < len(cost) - 1 and j < len(cost[0]) - 1:\n                continue\n            \n            # If the current cell is the bottom right cell, add it to the current path\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                current_path.append((i, j))\n            # If the current cell is the top-left cell, start a new path\n            elif i == 0 and j == 0:\n                current_path = [(i, j)]\n            # If the current cell is the rightmost or downmost cell, add the current path to the max_path\n            elif i == len(cost) - 1 or j == len(cost[0]) - 1:\n                current_path.append((i, j))\n            \n            # Update current_cost\n            current_cost += cost[i][j]\n            num_visited += 1\n            \n            # Compute the average of the current path\n            avg = current_cost / num_visited\n            \n            # If the average is greater than the current max_avg, update max_avg and max_path\n            if avg > max_avg:\n                max_avg = avg\n                max_path = current_path\n    \n    # Return the maximum average over all paths\n    return max_avg, max_path",
        "test": "assert maxAverageOfPath([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50], [51, 52], [53, 54], [55, 56], [57, 58], [59, 60]]) == 12.0",
        "num_ids": 5724,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student_name, (student_height, student_weight) in students.items():\n        if student_height > h and student_weight > w:\n            filtered_students.append(student_name)\n    return filtered_students",
        "test": "assert filter_data({\"John\": (175, 85), \"Alice\": (165, 90), \"Bob\": (155, 80)}, 150, 160) == []",
        "num_ids": 3964,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [2, 2, 3, 3, 4]) == 2, \"count_same_pair([1, 2, 3, 4, 5], [2, 2, 3, 3, 4])\"",
        "num_ids": 2663,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string and reverse it so that the sum is easier to compute\n    base_str = str(base)[::-1]\n    \n    # Initialize a variable to keep track of the sum of digits\n    result = 0\n    \n    # Iterate through each digit in the base_str and add it to the result\n    for digit in base_str:\n        result += int(digit)\n    \n    # Multiply the result by the power and return it\n    return result * power",
        "test": "assert power_base_sum(2, 1) == 2, \"The correct sum of all digits of base 2 to the power 1 is 2.\"",
        "num_ids": 2197,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Use regex to find quotation marks\n    match = re.findall(r'\"[^\"]+\"', text1)\n    # Extract values between quotation marks\n    values = match[0][1:-1]\n    # Return the extracted values\n    return values",
        "test": "assert extract_quotation(\"This is a test string. \\\"It's a great test string\\\".\") == \"It's a great test string\"",
        "num_ids": 1979,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = [test_tup[0] * test_tup[1]]\n    for i in range(2, N):\n        result_tup.append(result_tup[-1] * test_tup[i])\n    return result_tup",
        "test": "assert multiply_elements((1, 2, 3, 4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)",
        "num_ids": 2919,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize a new list to store the sum of the two lists\n    result = []\n    # Iterate through both lists and add them together and append to the result list\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result",
        "test": "assert sum_list([],[]) == []",
        "num_ids": 1502,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 27,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return list(set(nums))",
        "test": "assert consecutive_duplicates([1, 1, 1, 1, 1]) == [1]",
        "num_ids": 2534,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h\n",
        "test": "assert lateralsurface_cone(1,1) == 3.141592653589793, \"The lateral surface area of a cone with radius 1 and height 1 is incorrect. Please check the code.\"",
        "num_ids": 1930,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]+')\n    return pattern.sub(': ', text)",
        "test": "assert replace_specialchar('') == ''",
        "num_ids": 1649,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Returns the index of the first occurrence of x in A, or -1 if x is not in A.\n    '''\n    for i, num in enumerate(A):\n        if num == x:\n            return i\n    return -1",
        "test": "assert find_first_occurrence([1,2,3,3,4,4,4,5], 6) == -1",
        "num_ids": 2396,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sub_sums = []\n    sub_prod = 1\n    \n    # Base case: single element list\n    if n == 1:\n        return arr[0] * 1\n    \n    # Recursive case: iterate through all possible sublists\n    for i in range(n):\n        # Initialize sublist sum and product\n        sub_sum = 0\n        sub_prod = 1\n        \n        # Iterate through all elements in the sublist\n        for j in range(i, n):\n            sub_sum += arr[j] * sub_prod\n            sub_prod *= arr[j]\n        \n        # Add sublist to list of sublists\n        sub_sums.append(sub_sum)\n    \n    # Return sum of sublists\n    return sum(sub_sums)",
        "test": "assert sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 2909,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits\n    num_bits = len(bin(n)[2:])\n    \n    # Toggle the bits\n    for i in range(1, num_bits-1):\n        n = n ^ (1 << (num_bits-i-1))\n    \n    # Return the modified number\n    return n",
        "test": "assert set_middle_bits(0) == 0b0",
        "num_ids": 4724,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left",
        "test": "assert left_insertion([1, 3], 3) == 1",
        "num_ids": 2051,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    \n    return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 2431,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    index = 1\n    while n > index:\n        n -= 1\n        index += 1\n\n    return index",
        "test": "assert find_Index(3) == 2, \"Incorrect value returned for n=3\"",
        "num_ids": 2324,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(len(test_tup) - 1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 2085,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a Python function to check whether all the characters are same or not.\n\n    Parameters:\n    s (str): A string containing all the characters of a sentence.\n\n    Returns:\n    bool: True if all the characters are same, False otherwise.\n    \"\"\"\n\n    # Initialize a variable to keep track of the number of same characters\n    num_same = 0\n\n    # Loop through each character in the string\n    for char in s:\n\n        # Check if the current character is the same as the last character\n        if char == s[-1]:\n            num_same += 1\n\n        # If the number of same characters is greater than 1, return False\n        if num_same > 1:\n            return False\n\n    # If all the characters are same, return True\n    return True",
        "test": "assert all_Characters_Same(\"\") == True",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron with given side length.\n    '''\n    s = 0.5 * side\n    h = side / math.sqrt(3)\n    w = side / math.sqrt(3)\n    return math.sqrt(s**2 + h**2 - w**2)",
        "test": "assert area_tetrahedron(1) == 0.5",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def rotate_right(list, m):\n    # create a new list of n elements, by rotating the first n elements to the left\n    new_list = list[m:] + list[:m]\n    return new_list",
        "test": "assert rotate_right([1], 0) == [1]",
        "num_ids": 2593,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, None)) == True",
        "num_ids": 1131,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    digits = []\n\n    # Find the digits of the numbers in the range\n    for num in range(startnum, endnum+1):\n        digits.append(str(num)[0])\n\n    # Create a lambda function that checks if a number is divisible by every digit it contains\n    divisible_by_digit = lambda num: any(digit in str(num) for digit in digits)\n\n    # Find the numbers in the range that are divisible by every digit in the digits list\n    divisible_numbers = [num for num in range(startnum, endnum+1) if divisible_by_digit(num)]\n\n    # Return the list of divisible numbers\n    return divisible_numbers\n",
        "test": "assert divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 6483,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2",
        "test": "assert sector_area(4, 45) is not None # Angle is within 0-360 range",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n    Parameters:\n    X, Y, Z (str): Three string sequences\n\n    Returns:\n    The longest common subsequence as a string\n\n    \"\"\"\n    m, n = len(X), len(Y)\n    if n == 0:\n        return X\n    elif m == 0:\n        return Y\n    elif X[0] == Y[0]:\n        return X[0] + lcs_of_three(X[1:], Y[1:], Z)\n    else:\n        return lcs_of_three(X[1:], Y, Z)",
        "test": "assert lcs_of_three(\"hello\", \"world\", \"programming\") == \"world\"",
        "num_ids": 3620,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b') # match one or more word characters, followed by a word boundary\n    return pattern.sub(lambda m:''*(len(m.group()) - 1) + m.group(), str1) # replace all matches with a space before and after each word",
        "test": "assert capital_words_spaces(\"Hello\") == \"Hello\"",
        "num_ids": 1787,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings in the list to numeric values\n    nums = [int(x.strip()) for x in nums_str]\n    # Sort the list numerically using the built-in sort() function\n    nums.sort()\n    # Convert the sorted list back to a string\n    sorted_str = [str(x) for x in nums]\n    return sorted_str",
        "test": "assert sort_numeric_strings(['3', '1', '4', '2', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 2381,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Check if the input arguments are lists and tuples\n    if not isinstance(test_list, list) or not isinstance(test_tup, tuple):\n        print(\"Both input arguments must be lists and tuples.\")\n        return None\n    \n    # Check if the length of the lists and tuples are the same\n    if len(test_list)!= len(test_tup):\n        print(\"The length of the lists and tuples must be the same.\")\n        return None\n    \n    # Add the tuples to the list\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n        \n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [5, 7, 9]",
        "num_ids": 1678,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case: if the array is empty or only one element, then it is a min heap\n    if i == len(arr):\n        return True\n\n    # Check if the left child of the current node is also a min heap\n    left_child_index = 2 * i + 1\n    if left_child_index < len(arr) and arr[left_child_index] < arr[i]:\n        # Recursively call check_min_heap_helper on the left child\n        return check_min_heap_helper(arr, left_child_index)\n\n    # Check if the current node is a min heap\n    return True\n",
        "test": "assert check_min_heap_helper([5, 3, 1, 8, 9], 0) == True",
        "num_ids": 2913,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n\n    \"\"\"\n    # Create a list of the nth jacobsthal numbers\n    jacobsthal_list = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731]\n\n    # Return the nth jacobsthal number\n    return jacobsthal_list[n]",
        "test": "assert jacobsthal_num(0) == 0, \"The first jacobsthal number is not 0.\"",
        "num_ids": 3389,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \"\"\"\n    # Initialize an empty list to store the minimum k records\n    min_records = []\n    \n    # Initialize a variable to keep track of the number of records found\n    count = 0\n    \n    # Iterate through the test list and check each record\n    for record in test_list:\n        # Check if the number of records found so far is less than K\n        if count < K:\n            # Add the record to the minimum k records list\n            min_records.append(record)\n            # Increment the count of records found\n            count += 1\n        # If the count of records found is equal to K, break out of the loop\n        else:\n            break\n    \n    # Return the minimum k records\n    return min_records",
        "test": "assert min_k([], 0) == []",
        "num_ids": 2798,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 2823,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest",
        "test": "assert second_smallest([5, 2, 8, 3, 1]) == 2",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    # define the pattern to match the string\n    pattern = r'^a.*b.*$'\n\n    # use the re.match() function to match the pattern with the text\n    match = re.match(pattern, text)\n\n    # return True if the match is found, False otherwise\n    return bool(match)",
        "test": "assert text_match_zero_one(\"\") == False",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list) // 2):\n        if test_list[i] == test_list[-i - 1]:\n            count += 1\n    return count\n\ntest_list = ['hello', 'world', 'python', 'programming', 'in','reverse']\nprint(count_reverse_pairs(test_list))  # Output: 4",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 2562,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each list\n    sublist_count = {}\n\n    # Iterate over all the elements of the list\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in sublist_count:\n            # If it is, add 1 to the count of the list\n            sublist_count[element] += 1\n        else:\n            # If it isn't, add the list to the dictionary with 1 as its count\n            sublist_count[element] = 1\n\n    # Return the dictionary containing the count of each list\n    return sublist_count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 3403,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    try:\n        float(num)\n        if len(str(num)) > 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"0.00\") == True, \"0.00 should be a decimal number.\"",
        "num_ids": 4315,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set of elements from the list\n    elements = set(arr)\n    \n    # Check if the set has only one element\n    if len(elements) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 1827,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid month number\")\n        return False",
        "test": "assert check_monthnumber_number(13) == False, \"Month number 13 should not contain 30 days.\"",
        "num_ids": 2024,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def find_min_diff(arr, n):\n    # Create a dictionary to store the difference of adjacent elements\n    diff_dict = {}\n\n    # Iterate through the array\n    for i in range(n):\n        # Calculate the minimum difference between any two elements in the array\n        min_diff = float('inf')\n\n        # Iterate through the remaining array elements\n        for j in range(i + 1, n):\n            # Calculate the difference between current elements\n            diff = abs(arr[i] - arr[j])\n\n            # Update the minimum difference if the difference is smaller than the current minimum\n            if diff < min_diff:\n                min_diff = diff\n\n        # Add the minimum difference to the dictionary\n        diff_dict[i] = min_diff\n\n    # Find the minimum difference between any two elements in the remaining array\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the minimum difference\n    return min_diff\n",
        "test": "assert find_min_diff([1,2,3,4,5], 4) == 1",
        "num_ids": 2266,
        "indeed": true
    },
    {
        "number": 764,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('') == 0",
        "num_ids": 2278,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return 1\n\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n\n    return n",
        "test": "assert is_polite(1) == True",
        "num_ids": 1385,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n\n    # Initialize the list of pairs\n    pairs = []\n\n    # Loop through each item in the list\n    for i in range(len(l1) - 1):\n\n        # Find the index of the next item in the list\n        j = i + 1\n\n        # If the next item is also the next item plus one, add it to the list of pairs\n        if j < len(l1) and l1[j] == l1[i] + 1:\n            pairs.append((l1[i], l1[j]))\n\n        # If the next item is not the next item plus one, add the pair of the current item and the next item to the list of pairs\n        else:\n            pairs.append((l1[i], l1[j-1]))\n\n    return pairs",
        "test": "assert pair_wise([]) == []",
        "num_ids": 2544,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2, \"The output should be 2, but it is {}\".format(get_pairs_count([1, 2, 3, 4, 5], 7))",
        "num_ids": 2105,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    for i in li2:\n        if i not in li1:\n            diff_list.append(i)\n    return diff_list",
        "test": "assert Diff([],[])==[]",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a Python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(25) == 6250",
        "num_ids": 2569,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create a stack to store the opening parentheses\n    stack = deque()\n\n    # Iterate through each character in the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, check if the stack is empty or if the top element is not equal to the opening parenthesis\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n\n    # If the stack is empty, the expression is balanced\n    return not stack",
        "test": "assert check_expression(\"2 + 2 * 3\") == True, \"Expression should be balanced.\"",
        "num_ids": 1646,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word) <= K:\n            new_words.append(word)\n    return \" \".join(new_words)",
        "test": "assert remove_length(\"hello world\", 0) == \"\"",
        "num_ids": 1629,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end())\n    else:\n        return None\n\ntext = \"This is a test string with a substring in it.\"\npattern = \"substring\"\n\nprint(occurance_substring(text, pattern)) # Output: (14, 19)",
        "test": "assert occurance_substring(\"hello world\", \"l\") is not None",
        "num_ids": 2079,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n    return True",
        "test": "assert odd_position([1,2,3,4,5,6,7,8,9,10]) # true",
        "num_ids": 1761,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i:j].lower() in vowels:\n                count += 1\n    return count",
        "test": "assert count_vowels(\"123456789\") == 0",
        "num_ids": 1813,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store the elements that have been seen\n    seen = set()\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each element in the list\n    for elem in arr:\n        # If the element is not in the set, add it to the set and add it to the sum\n        if elem not in seen:\n            seen.add(elem)\n            sum += elem\n    # Return the sum\n    return sum",
        "test": "assert find_sum([]) == 0",
        "num_ids": 2363,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    for element in list1:\n        if element not in sublist:\n            sublist.append(element)\n    return sublist",
        "test": "assert pack_consecutive_duplicates([1, 2, 3, 4, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 3155,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 3089,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # create a set to store the sum of tuples\n    sums = set()\n    # iterate through each element of the tuple list\n    for i in range(len(test_list)):\n        # check if the current element has already been added to the set\n        if i > 0 and test_list[i][0] == test_list[i-1][0]:\n            # check if the next element has the same sum as the current element\n            if i+1 < len(test_list) and test_list[i][1] == test_list[i+1][1]:\n                # add the current tuple to the set of combinations\n                sums.add(tuple(test_list[i]))\n    # create a list of combinations\n    combinations_list = list(combinations(list(sums), len(test_list)))\n    # return the list of combinations\n    return combinations_list",
        "test": "assert find_combinations([1, 2, 3, 4, 5]) == set([([1, 2, 3, 4, 5],), ([1, 2, 3, 4, 5]), ([1, 2, 3, 4, 5], [5]), ([1, 2, 3, 4, 5], [4, 5]), ([1, 2, 3, 4, 5], [3, 4]), ([1, 2, 3, 4, 5], [2, 3]), ([1, 2, 3, 4, 5], [1, 2]), ([1, 2, 3, 4, 5], [1]), ([1, 2, 3, 4, 5], [2]), ([1, 2, 3, 4, 5], [3]), ([1, 2, 3, 4, 5], [4]), ([1, 2, 3, 4, 5], [5]), ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]), ([1, 2, 3, 4, 5], [1, 2, 3, 4]), ([1, 2, 3, 4, 5], [1, 2, 3]), ([1, 2, 3, 4, 5], [1, 2]), ([1, 2, 3, 4, 5], [1, 3]), ([1, 2, 3, 4, 5], [1, 4]), ([1, 2, 3, 4, 5], [1, 5]), ([1, 2, 3, 4, 5], [2, 4]), ([1, 2, 3, 4, 5], [2, 5]), ([1, 2, 3, 4, 5], [3, 4]), ([1, 2, 3, 4, 5], [3, 5]), ([1, 2, 3, 4, 5], [4, 5]), ([1, 2, 3, 4, 5], [4, 5]), ([1, 2, 3, 4, 5], [5, 5])])",
        "num_ids": 4173,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    elif count % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(15) == 1",
        "num_ids": 2118,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def odd_length_sum(arr):\n    # initialize the sum to 0\n    odd_sum = 0\n\n    # iterate through the array and add the sum of odd length subarrays to the current sum\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if j - i + 1 % 2 == 1:\n                # if the length of the subarray is odd, add it to the sum\n                odd_sum += arr[j]\n\n    return odd_sum",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 2721,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert rgb to hsv\n    h, s, v = [0, 0, 0]\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    # If RGB values are the same, return same HSV values\n    if delta == 0:\n        return h, s, v\n    \n    # Calculate HSV values\n    if r == cmax:\n        h, s = (g - b) / delta, 1\n    elif g == cmax:\n        h, s = 2 + (b - r) / delta, cmax\n    else:\n        h, s = 4 + (r - g) / delta, cmax\n    \n    # Convert HSV values to degrees and return\n    h = h * 360\n    s = s * 100\n    v = v * 100\n    return h, s, v",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0), \"rgb_to_hsv(0, 0, 0) should return (0, 0, 0)\"",
        "num_ids": 5327,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n    for num in list1:\n        if num % 2!= 0:\n            product *= num\n    return product",
        "test": "assert mul_even_odd([]) == 1",
        "num_ids": 1703,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    split_str = test_str.split(',')\n\n    # Convert each string in the list to an integer\n    result = []\n    for s in split_str:\n        result.append(int(s))\n\n    # Return the integer tuple\n    return tuple(result)",
        "test": "assert tuple_str_int(\"123,456\") == (123, 456)",
        "num_ids": 1857,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)",
        "test": "assert right_insertion([], 3) == 0  # empty list",
        "num_ids": 2009,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function matches a string that has an a followed by three 'b' characters.\n    It returns True if a match is found, False otherwise.\n    '''\n    pattern = re.compile(r'a(?=b{3})')\n    matches = pattern.findall(text)\n    return bool(matches)",
        "test": "assert text_match_three('abab') == False",
        "num_ids": 3257,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)",
        "test": "assert new_tuple([\"apple\"], \"banana\") == (\"apple\", \"banana\")",
        "num_ids": 1214,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True",
        "test": "assert even_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 2220,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from the given tuple.\n    '''\n    for t in test_tup:\n        if isinstance(t, tuple):\n            test_tup = test_tup[:test_tup.index(t)] + test_tup[test_tup.index(t)+1:]\n    return test_tup",
        "test": "assert remove_nested([]) == []",
        "num_ids": 3188,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def count_list(input_list):\n    '''\n    Counts the number of lists in a given number of lists.\n    '''\n    return len(input_list)",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2",
        "num_ids": 1353,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def last(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1  # Element not found",
        "test": "assert last([1, 3, 5, 7, 9], 7) == 3",
        "num_ids": 1443,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import re\n\ndef text_starta_endb(text):\n    # Define a regular expression pattern for matching the pattern 'a followed by anything, ending in b'\n    pattern = r'^a followed by anything, ending in b$'\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    # Return True if a match was found, False otherwise\n    return bool(match)",
        "test": "assert text_starta_endb('pwwkew') == False",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for item in dictionary:\n        sum += dictionary[item]\n    return sum",
        "test": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6",
        "num_ids": 1852,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n, 0, -2):\n        if i % 2!= 0:\n            s += i\n    return s",
        "test": "assert sum_odd(0) == 0",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1046,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def left_rotate(n, d):\n    # Function to rotate left bits by d bits\n    # Assume n is 32 bit\n    n_bits = 32\n    shift_amount = d % n_bits\n    if shift_amount == 0:\n        return n\n    \n    mask = (1 << shift_amount) - 1\n    rotated_value = n & mask\n    \n    # Left shift the original number by d bits\n    shifted_value = (n >> shift_amount) | rotated_value\n    \n    return shifted_value",
        "test": "assert left_rotate(0, 0) == 0",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n\ntext = \"Hello, World!\"\nprint(remove_all_spaces(text))",
        "test": "assert remove_all_spaces(\"   hello world  \") == \"helloworld\"",
        "num_ids": 1160,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # Check if all three integers are positive\n    if x >= 0 and y >= 0 and z >= 0:\n        # Check if at least one of the integers is equal to itself\n        if x == y and x == z:\n            return 1\n        elif y == z and y == x:\n            return 1\n        else:\n            return 0\n    else:\n        return \"The integers are not positive.\"",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def count_rotation(arr):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Calculate the number of rotations required to generate a sorted array\n    rotations = 0\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] > arr[i + 1]:\n            rotations += 1\n        i += 1\n\n    return rotations",
        "test": "assert count_rotation([]) == 0, \"The count of rotations required to generate a sorted array is not 0.\"",
        "num_ids": 2664,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def is_perfect_square(n):\n    # Calculate the square root of n\n    root = int(n**0.5)\n    \n    # Check if the square root is equal to the rounded value of n\n    return root == int(root)",
        "test": "assert is_perfect_square(1) == True",
        "num_ids": 1578,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def is_product_even(arr):\n    # Initialize the result variable with 1\n    result = 1\n\n    # Iterate through the array and multiply each element with the result variable\n    for num in arr:\n        result *= num\n\n    # Check if the result is even or not\n    if result % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2,4,6,8,10]) == True",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = None\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list",
        "test": "assert max_sum_list([[1]]) == [1]",
        "num_ids": 2690,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i].upper():\n            max_run += 1\n    return max_run\n\ntest_str = \"hello world\"\nprint(max_run_uppercase(test_str))  # Output: 3",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # If no odd number is found, return None",
        "test": "assert first_odd([2, 3, 4, 5]) == 3",
        "num_ids": 1421,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K not in test_tup:\n        return False\n    else:\n        return True",
        "test": "assert check_K([], 3) == False, \"test 4\"",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for item in test_tup2:\n        if item in test_tup1:\n            return False\n        else:\n            continue\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 1, 4)) == False",
        "num_ids": 1701,
        "indeed": false
    }
]