[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create two sets to store the unique elements of each list\n    unique1 = set(test_tup1)\n    unique2 = set(test_tup2)\n\n    # Find the shared elements between the two sets\n    shared = unique1.intersection(unique2)\n\n    # Return the shared elements\n    return shared",
        "test": "assert similar_elements((\"a\", \"b\"), (\"c\", \"d\")) == set()",
        "num_ids": 1374,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if (n % i) == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(2) == True, \"The input 2 is not a prime number.\"",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import heapq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Finds the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    return heapq.nlargest(n, nums)",
        "test": "assert heap_queue_largest([], 0) == []",
        "num_ids": 1855,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Power_Of_Two(x):\n    # convert x to binary string\n    bin_x = bin(x)[2:]\n    # loop through each bit of binary string\n    for bit in bin_x:\n        # if there is only one bit left, it is a power of two\n        if len(bit) == 1:\n            return True\n    # if all bits are zero, x is a power of two\n    return False",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Find all words with at least 4 characters in a string.\n    '''\n\n    # Define the pattern for finding words with at least 4 characters\n    pattern = r'\\b\\w{3,}\\b'\n\n    # Use the findall method to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    return matches",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1046,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Parameters:\n    str (str): the string to rotate\n\n    Returns:\n    int: the minimum number of rotations required to get the same string\n    \"\"\"\n\n    # Check if the string is empty\n    if len(str) == 0:\n        return 0\n\n    # Initialize variables\n    min_rotations = float('inf')\n    char_count = {}\n    rotations = 0\n\n    # Iterate over each character in the string\n    for char in str:\n        # If the character is already in the character count dictionary, increment the count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary and increment the count\n        else:\n            char_count[char] = 1\n\n        # If the character is the first character, update the min rotations count\n        if char == str[0]:\n            rotations = 1\n\n        # If the count of the current character is greater than 1, update the min rotations count\n        elif char_count[char] > 1:\n            rotations += 1\n\n        # Update the minimum rotations count if necessary\n        if rotations < min_rotations:\n            min_rotations = rotations\n\n    return min_rotations",
        "test": "assert find_Rotations(\"\") == 0, \"find_Rotations should return 0 for an empty string\"",
        "num_ids": 1859,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = 0\n    n = len(s)\n    while i < n-1:\n        if s[i] == ch and s[i+1] == ch:\n            s = s[:i] + s[i+2:]\n        i += 1\n    return s",
        "test": "assert remove_Occ(\"hello world\", \"o\") == \"hello world\"",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def sort_matrix(M):\n    # Create a dictionary to store the sum of each row\n    row_sums = {}\n    \n    # Iterate over each element of the matrix\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            # If the element is not in the dictionary, add it with a value of 0\n            if j not in row_sums:\n                row_sums[j] = 0\n            \n            # Update the sum of the current row\n            row_sums[j] += M[i][j]\n    \n    # Iterate over the dictionary and sort the rows by their sum in ascending order\n    for j in sorted(row_sums.keys()):\n        # Iterate over the rows in the matrix that have the same sum as the current row\n        for i in range(len(M)):\n            # If the sum of the current row and the element at the current position in the matrix is equal to the sum in the dictionary, swap the two elements\n            if row_sums[j] == M[i][j] and row_sums[j] == M[i][i]:\n                M[i][j], M[i][i] = M[i][i], M[i][j]\n    \n    return M",
        "test": "assert sort_matrix([[1,2,3], [4,5,6], [7,8,9]]) == [[1,2,3], [4,5,6], [7,8,9]]",
        "num_ids": 3036,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_Volume(l, b, h):\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?i)(?=[a-z])(?=[A-Z])(?=[0-9])')\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"\") == False",
        "num_ids": 1431,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    final_list = []\n    for char in string:\n        if char not in string:\n            final_list.append(char)\n    return final_list",
        "test": "assert str_to_list(\"\") == []",
        "num_ids": 1734,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # initialize a set to store the duplicate numbers\n    duplicates = set()\n\n    # iterate through the given array of integers\n    for num in arraynums:\n        # add each element to the set\n        duplicates.add(num)\n\n    # check if the set has duplicates\n    if len(duplicates) > 1:\n        return True\n    else:\n        return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5, 5, 5]) # This will assert that the function returns False for an array with duplicate elements.",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define a list of common numbers that are woodalls\n    woodalls = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n\n    # Check if the given number is a woodall or not\n    if x in woodalls:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(15) == True",
        "num_ids": 2374,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    if num < 2:\n        return False\n    else:\n        reverse = num\n        while reverse > 0:\n            remainder = reverse % 10\n            if remainder == 2:\n                reverse //= 10\n            else:\n                break\n        return reverse == 0",
        "test": "assert rev(25) == False, \"The reverse of 25 is not 24.\"",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_Max_Num(arr) : \n    max_num = arr[0]\n    for num in arr : \n        if num > max_num : \n            max_num = num\n    return max_num",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1457,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n\n    Args:\n        x: An integer.\n        y: An integer.\n\n    Returns:\n        A boolean indicating whether x and y have opposite signs or not.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return x >= y\n    elif x < 0 and y >= 0:\n        return x < y\n    elif x >= 0 and y < 0:\n        return x <= y\n    else:\n        return False",
        "test": "assert opposite_Signs(5, 6) == False # 5 is negative",
        "num_ids": 1266,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Check if n is greater than 0\n    if n <= 0:\n        raise ValueError(\"Input must be greater than 0\")\n\n    # Define a list of all possible octagonal numbers\n    octagonal = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n    # Check if n is in the list of octagonal numbers\n    if n in octagonal:\n        return True\n    else:\n        return False",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        substrings[s[i] + s[i+1:] + s[i+2:]] += 1\n    return len(substrings)\n",
        "test": "assert count_Substrings('abc') == 3",
        "num_ids": 1435,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize a variable to store the smallest number\n    smallest = xs[0]\n    # loop through the list and check if the current number is smaller than the smallest number\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest",
        "test": "assert smallest_num([4, 2, 6, 8, 10]) == 2",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1926,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([('a', 80), ('b', 90), ('c', 95)]) == [('a', 80), ('b', 90), ('c', 95)]",
        "num_ids": 1594,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # initialize the sum of all the elements in the list\n    total_sum = 0\n\n    # loop through each element in the list and add it to the sum\n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n\n    return total_sum",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1,2,3,4,5]) == 5 # expected output: 5",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: if n is 0, there is only one way to partition a set of n Bell numbers\n    if n == 0:\n        return 1\n    \n    # Recursive case: count the number of ways to partition a set of n Bell numbers\n    else:\n        count = 0\n        for i in range(1, n+1):\n            count += bell_number(n-i)\n            \n        # Return the count of ways to partition a set of n Bell numbers\n        return count",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Monotonic(A):\n    if len(A) == 1:\n        return True\n    elif len(A) == 2:\n        return A[0] == A[1]\n    elif len(A) == 3:\n        return A[0] < A[1] and A[0] < A[2]\n    else:\n        for i in range(len(A) - 1):\n            if A[i] > A[i + 1]:\n                return False\n        return True",
        "test": "assert is_Monotonic([3, 1, 4, 5, 1]) == False",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # iterate through each element of the list\n    for i in range(len(l)):\n        # if the current element matches the first element of the sublist\n        if l[i] == s[0]:\n            # check if the current element matches the remaining elements of the sublist\n            if i+1 < len(s) and s[i+1] == s[i]:\n                # if so, recursively call the function on the remaining elements of the sublist\n                return is_sublist(l[i+1:], s[i+1:])\n    # if the loop completes without returning, the sublist is present in the list\n    return True",
        "test": "assert is_sublist([],[]) == True",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Create a list of tuples\n    tuples_list = list(Input)\n\n    # Check if all the tuples have equal length\n    if len(tuple(tuples_list))!= len(tuples_list):\n        return False\n    else:\n        return True",
        "test": "assert find_equal_tuple(('a', 'b', 'c')) == True, \"find_equal_tuple should return True for input 'a, b, c'.\"",
        "num_ids": 1384,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    # Base case: If the list has only one element, return it\n    if len(nums) <= 1:\n        return nums\n\n    # Find the middle element\n    middle = len(nums) // 2\n\n    # Split the list into two halves\n    left = nums[:middle]\n    right = nums[middle:]\n\n    # Recursively sort the left and right halves\n    left = comb_sort(left)\n    right = comb_sort(right)\n\n    # Merge the sorted left and right halves\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            nums[k] = left[i]\n            i += 1\n        else:\n            nums[k] = right[j]\n            j += 1\n        k += 1\n\n    # Add any remaining elements from the left or right half\n    while i < len(left):\n        nums[k] = left[i]\n        i += 1\n        k += 1\n\n    while j < len(right):\n        nums[k] = right[j]\n        j += 1\n        k += 1\n\n    return nums",
        "test": "assert comb_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 2498,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a Python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    \n    # Check if the number is greater than or equal to 2^n-1\n    if n >= 2**(n-1):\n        return False\n    \n    # Check if the number can be represented as the difference of two squares\n    for i in range(2**(n-1)):\n        # If there is no difference of squares, break the loop\n        if (n - 1 - i) * (n - 1 + i)!= n:\n            break\n    \n    # If the number can be represented as the difference of two squares, return True\n    return True",
        "test": "assert dif_Square(1) == 0",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue', 'yellow', 'purple'], ['red', 'green', 'blue', 'yellow', 'pink']) == False",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create an empty list to store the tuples which meet the conditions\n    result = []\n\n    # Loop through each tuple in the list\n    for t in test_list:\n        # Check if the tuple has all elements divisible by k\n        if all(t[i] % K == 0 for i in range(len(t))):\n            # If the tuple meets all conditions, add it to the result list\n            result.append(t)\n\n    # Return the result list\n    return result",
        "test": "assert find_tuples([], 5) == []",
        "num_ids": 2047,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_Diff(n):\n    if n < 0:\n        return False\n    for i in range(2, n+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_Diff(11) == True",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Initialize the count variable\n    count = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Increment the count variable for each odd length word\n        if char.isalpha():\n            count += 1\n            \n    # Return the count\n    return count\n",
        "test": "assert word_len(\"cat\") == 3",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 15\n\n    # Recursive case\n    half_n = n // 2\n    tria_n = tetrahedral_number(half_n)\n    return tria_n * tria_n * tria_n",
        "test": "assert tetrahedral_number(1) == 1, \"The first tetrahedral number is 1.\"",
        "num_ids": 3008,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * r ** 3",
        "test": "assert volume_sphere(1) == 3.141592653589793",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    mod = 26  # define modulo value\n    return chr(int(strr, 16) + mod)  # add ASCII value of all characters of the string and modulo value and return the character",
        "test": "assert get_Char(\"def\") == 66",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        a, b = 0, 1 \n        for i in range(2, n+1): \n            c = a + b \n            a, b = b, c \n        return b ",
        "test": "assert sequence(1) == 1  # 1 is the second number in the sequence",
        "num_ids": 1304,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * r**2",
        "test": "assert surfacearea_sphere(0) == 0",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Returns the nth centered hexagonal number using the centered hexagonal formula.\n\n    Args:\n        n (int): The number of centered hexagonal numbers to find.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    '''\n\n    if n < 1 or n > 100:\n        raise ValueError(\"Input number must be between 1 and 100.\")\n\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (1 + centered_hexagonal_number(n - 1)) // 2\n    else:\n        return centered_hexagonal_number(n - 1) + 1",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1952,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        if key in dict1 and key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n        elif key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 1694,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "from collections import defaultdict\n\ndef freq_count(lst):\n    freq = defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return freq\n\nlst1 = [1, 2, 3, 2, 1, 2, 1]\nprint(freq_count(lst1)) # Output: {'1': 3, '2': 4, '3': 1}",
        "test": "assert freq_count([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1448,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    for i in range(1, N+1):\n        if abs(N - i) < abs(N - min_num):\n            min_num = i\n    return min_num\n\nprint(closest_num(10))  # Output: 6\nprint(closest_num(15))  # Output: 10\nprint(closest_num(20))  # Output: 15\n",
        "test": "assert closest_num(1) == 1",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def len_log(list1):\n    '''\n    Find the length of the longest word in a list of strings.\n    '''\n\n    # Initialize the max_len variable to 0\n    max_len = 0\n\n    # Loop through each string in the list\n    for string in list1:\n        # If the length of the current string is greater than the current max_len, update max_len\n        if len(string) > max_len:\n            max_len = len(string)\n\n    # Return the max_len variable\n    return max_len",
        "test": "assert len_log([\"hello\"]) == 5, \"List with one word should return 5\"",
        "num_ids": 1407,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring('hello world', 'world') == True # True because 'world' is a substring of 'hello world'",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_undulating(n): \n    if n < 1: \n        return False\n    elif n == 1: \n        return True\n    else: \n        for i in range(2, n): \n            if n % i == 0: \n                return False\n        return True",
        "test": "assert is_undulating(7) is True, \"The given number 7 is not undulating\"",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def power(a,b):\n    '''\n    Calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "from operator import itemgetter\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = float('inf')\n    smallest_index = -1\n    for index, (x, y) in enumerate(test_list):\n        if y < smallest_second:\n            smallest_second = y\n            smallest_index = index\n    return test_list[smallest_index]",
        "test": "assert index_minimum([(1, 3), (4, 6), (7, 9)]) == (1, 3)",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        min_length = len(lst[0])\n        for i in range(len(lst)):\n            if len(lst[i]) < min_length:\n                min_length = len(lst[i])\n        return min_length",
        "test": "assert Find_Min_Length([[1]]) == 1",
        "num_ids": 1336,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(2) == 2",
        "num_ids": 1039,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list and update the frequency count in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict",
        "test": "assert frequency_lists([['apple', 'banana', 'pear'], ['orange', 'apple', 'banana', 'pear'], ['grape', 'banana', 'pear', 'cherry']]) == {'apple': 2, 'banana': 3, 'pear': 1, 'orange': 1, 'grape': 1, 'cherry': 1}",
        "num_ids": 2138,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Initialize the total variable to zero\n    total = 0\n    \n    # Iterate through each element in the list\n    for num in numbers:\n        # Multiply each element with the current total\n        total = total * num\n        \n    # Divide the total by the length of the list to get the result\n    result = total / len(numbers)\n    \n    # Return the result\n    return result",
        "test": "assert multiply_num([2, 4, 6, 8, 10]) == 360",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def decimal_to_binary(n):\n    # Initialize a string to store the binary representation of n\n    binary_str = \"\"\n\n    # Loop through the digits of n and append the corresponding binary digit to the string\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n\n    # Remove any leading zeros from the binary representation\n    binary_str = binary_str.lstrip(\"0\")\n\n    return binary_str",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 2253,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is negative\n    if num < 0:\n        num = abs(num)\n\n    # Initialize the smallest palindrome to be the number itself\n    smallest_palindrome = num\n\n    # Initialize a variable to keep track of the current palindrome\n    current_palindrome = num\n\n    # Loop until the current palindrome is not smaller than the smallest palindrome\n    while current_palindrome > smallest_palindrome:\n        # Check if the current palindrome is a palindrome\n        if str(current_palindrome) == str(current_palindrome)[::-1]:\n            # If it is, update the smallest palindrome if it is smaller\n            if current_palindrome < smallest_palindrome:\n                smallest_palindrome = current_palindrome\n            # Update the current palindrome\n            current_palindrome += 1\n        else:\n            # If the current palindrome is not a palindrome, move on to the next one\n            current_palindrome += 1\n\n    # Return the next smallest palindrome\n    return smallest_palindrome",
        "test": "assert next_smallest_palindrome(99999) == 99999",
        "num_ids": 2372,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) - 1:\n        return None\n    else:\n        return arr[k - 1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1 # The first element is 1",
        "num_ids": 1504,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words using underscore as separator\n    words = word.split(\"_\")\n    # Convert each word to camel case and join them with an underscore\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word",
        "test": "assert snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 1342,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def eulerian_num(n, m):\n    # Function to find Eulerian number\n    def euler(n, m):\n        if n == 0 and m == 0:\n            return 1\n        elif n == 1 and m == 1:\n            return 2\n        elif n == 0 and m == 1:\n            return 3\n        else:\n            result = 1\n            for i in range(2, n + 1):\n                for j in range(2, m + 1):\n                    if i == n and j == m:\n                        result *= i + j\n                    elif i == n and j == 1:\n                        result *= i + 1\n                    elif i == 1 and j == m:\n                        result *= i + j\n                    elif i == 1 and j == 1:\n                        result *= i + 1\n            return result\n\n    # Return Eulerian number\n    return euler(n, m)",
        "test": "assert eulerian_num(10, 2) == 12, \"The correct Eulerian number for n=10 and m=2 is 12.\"",
        "num_ids": 2317,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n\n    for sublist in input_list:\n        # Check if the sublist is already in the result list\n        if sublist not in result:\n            # If not, add it to the result list\n            result.append(sublist)\n\n    # Sort the result list in ascending order\n    result.sort()\n\n    return result",
        "test": "assert sort_sublists([['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h'], ['i', 'j']]) == [['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h'], ['i', 'j']]",
        "num_ids": 2920,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n\nlst = [True, False, True, False, True, False, True]\nprint(count(lst)) # Output: 2",
        "test": "assert count([]) == 0  # pass",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n    merged_list.extend(num3[k:])\n\n    return merged_list\n",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 3300,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def odd_Equivalent(s, n):\n    if n == 0:\n        return 1\n    else:\n        count = 0\n        for i in range(n):\n            count += s[i] == '0'\n        return count + odd_Equivalent(s, n-1)",
        "test": "assert odd_Equivalent(\"1011\",3) == 3",
        "num_ids": 1738,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Returns the common elements between the nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 2255,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int_num = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer('') == False",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_dict = True\n    for dictionary in list1:\n        if dictionary.items() == []:\n            empty_dict = False\n            break\n    return empty_dict",
        "test": "assert empty_dit([]) == True",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1,2,3)) == 6",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def list_to_float(test_list):\n    '''\n    This function takes a list of lists as input and returns a list of floats containing all the elements in the input list that can be converted to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        for value in item:\n            try:\n                float_list.append(float(value))\n            except ValueError:\n                pass\n    return float_list\n",
        "test": "assert list_to_float([[1.1, 2.2], [3.3, 4.4]]) == [1.1, 2.2, 3.3, 4.4]",
        "num_ids": 1675,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list('') == []",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def search(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return None",
        "test": "assert search([1, 2, 3, 3, 4, 5]) == 3",
        "num_ids": 2538,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # sort the list in ascending order\n    list1.sort()\n    # initialize two variables to hold the maximum absolute product and the current tuple\n    max_product = float('-inf')\n    current_tuple = None\n    # iterate through the list and for each tuple, calculate the absolute product and compare it to the maximum\n    for i in range(len(list1)-1):\n        if i == len(list1)-2:\n            continue  # skip the last tuple\n        current_product = abs(list1[i][0]*list1[i+1][1])\n        if current_product > max_product:\n            max_product = current_product\n            current_tuple = list1[i:i+2]\n    return max_product, current_tuple",
        "test": "assert max_product_tuple([1, -2, 3, -4, 5]) == (-2, 12)",
        "num_ids": 2561,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        Check if a number is amicable.\n        '''\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def sum_amicable(start, end):\n        '''\n        Calculate the sum of all amicable numbers in the specified range.\n        '''\n        total = 0\n        for num in range(start, end + 1):\n            if is_amicable(num):\n                total += num\n        return total\n    \n    return sum_amicable(1, limit)\n",
        "test": "assert amicable_numbers_sum(20) == 118 # 118",
        "num_ids": 3062,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Convert the complex numbers to their real and imaginary parts\n    real_part = a.real\n    imag_part = a.imag\n\n    # Calculate the angle using the complex number formula\n    angle = cmath.phase(complex(real_part, imag_part))\n\n    # Return the angle in degrees\n    return angle * 180 / cmath.pi",
        "test": "assert angle_complex(0,0) == 0",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n            if count_0 > max_diff:\n                max_diff = count_0\n        else:\n            count_1 += 1\n            if count_1 > max_diff:\n                max_diff = count_1\n    return max_diff",
        "test": "assert find_length(\"011001\") == 3",
        "num_ids": 3906,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def sum(a, b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisor = 0\n    for i in range(a, b+1):\n        if a % i == 0 and b % i == 0:\n            common_divisor += i\n    return common_divisor\n",
        "test": "assert sum(10,10) == 10, \"The sum of 10 and 10 is incorrect.\"",
        "num_ids": 1867,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def multiply_int(x, y):\n    '''\n    Multiply two integers and return the result.\n    '''\n    result = x * y\n    return result",
        "test": "assert multiply_int(3, 4) == 12, \"The result of multiplying 3 and 4 is not equal to 12.\"",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()  # split the string into individual words\n    long_words = []  # create an empty list to store the long words\n    \n    for word in words:\n        if len(word) > n:  # check if the word is longer than n characters\n            long_words.append(word)  # add it to the list of long words\n            \n    return long_words  # return the list of long words",
        "test": "assert long_words(7, 'The quick brown fox jumps over the lazy dog') == []",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    if rows!= len(my_matrix[0]):\n        return False\n    \n    cols = len(my_matrix[0])\n    if cols!= rows:\n        return False\n    \n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= i + j + 1:\n                return False\n            \n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 3702,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n    return max_item",
        "test": "assert max_occurrences([1, 1, 1, 1, 1]) == 1",
        "num_ids": 2751,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = \"aeiouy\"\n    reversed_str = \"\"\n\n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n\n    return reversed_str",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(\"hello\") == \"hello\"",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 1\n    \n    # Base cases\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    if n % 2 == 0:\n        return 2 * hexagonal_num(n // 2)\n    else:\n        return 2 * hexagonal_num(n - 1) + 1",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 2050,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "from array import array\n\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums) if len(nums) > 0 else 0\n\nnums = array('i', [1, 0, 0, 0, 0, 1, 0, 0, 0])\nprint(zero_count(nums)) # Output: 0.5",
        "test": "assert zero_count([1]) == 0",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # check if n is even\n    if n % 2 == 0:\n        return False\n    \n    # loop through all numbers from 2 to the square root of n\n    for i in range(3, int(n**0.5)+1, 2):\n        # check if i is a power of 2 and if the sum of its non-zero powers is equal to n\n        if i == 2: # i = 2 is the least significant bit in 2^2 = 4\n            continue\n        for j in range(1, int(i**0.5)+1):\n            if n % i == 0 and i % j == 0:\n                return False\n                break\n        else: # n does not have a power of 2\n            continue\n        break\n    else: # n does not have a sum of non-zero powers of 2\n        return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(2) == False",
        "num_ids": 2358,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "test": "assert circle_circumference(5) == 31.4159",
        "num_ids": 1064,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = set()\n    for sublist in test_list:\n        for item in sublist:\n            flattened.add(item)\n    return flattened",
        "test": "assert extract_singly([[]]) == set()",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the smallest and largest elements in the sublist\n        left = i\n        right = n - 1\n        while left < right:\n            if nums[left] > nums[right]:\n                # swap the elements and move the right pointer to the right\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            else:\n                right -= 1\n        # if we couldn't find a sublist of size 2 or less, we're done\n        if i!= left - 1:\n            # move the right pointer to the next index\n            right = n - 1\n\n    return nums",
        "test": "assert pancake_sort([4, 3, 2, 1]) == [1, 2, 3, 4]",
        "num_ids": 2252,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([],[],[]) == 0, \"count_samepair([]) should return 0 for an empty list\"",
        "num_ids": 1569,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def find_lists(Input):\n    '''\n    Function to find number of lists present in a tuple.\n\n    Args:\n    Input: Tuple to find number of lists in.\n\n    Returns:\n    Count of lists in the tuple.\n    '''\n\n    return len(Input)",
        "test": "assert find_lists(()) == 0",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def max_Abs_Diff(arr):\n    # sort the array in non-descending order\n    arr.sort()\n    # initialize two variables to store the maximum difference and the current difference\n    max_diff = abs(arr[1] - arr[0])\n    current_diff = abs(arr[1] - arr[0])\n\n    # iterate through the array and calculate the maximum difference\n    for i in range(1, len(arr)):\n        current_diff = max(abs(arr[i] - arr[i-1]), current_diff)\n        max_diff = max(max_diff, current_diff)\n\n    # return the maximum difference\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if x and y are integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # Check if x and y are different\n    if a == b:\n        return None\n\n    # Calculate solutions\n    solutions = [(a, b), (-a, b), (a, -b), (-a, -b)]\n\n    # Find the first solution\n    for solution in solutions:\n        x, y = solution\n        if x * x + y * y == n:\n            return (x, y)\n\n    # If no solution was found, return None\n    return None",
        "test": "assert find_solution(1, 4, 5) == None",
        "num_ids": 2134,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]",
        "test": "assert remove_elements([], [1, 2, 3, 4, 5]) == []",
        "num_ids": 1253,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n):\n        total += (n - 2 * i)\n    return total",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1308,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import math\n\ndef area_polygon(s, l):\n    area = s * l * math.tan(0.5 * pi * l)\n    return area",
        "test": "assert area_polygon(4, 4) == 12",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [1] * (n + 1)\n    divisors[0] = 0\n    divisors[1] = 1\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors[i] = i\n            divisors[n // i] = 0\n            \n    return sum(divisors)",
        "test": "assert div_sum(13) == 13, \"The sum of divisors of 13 should be 13\"",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def count_char_position(str1):\n    # Define a set of uppercase and lowercase English alphabets\n    english_alphabets = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    # Count the number of characters in the first string that occur at the same position in the English alphabet\n    char_count = 0\n    for i in range(len(str1)):\n        if str1[i] in english_alphabets:\n            char_count += 1\n    return char_count\n",
        "test": "assert count_char_position(\"hello world\") == 10",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        if A[i] % 2 == 0 and A[i]!= A[i+1] % 2:\n            count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2, \"The expected output is 2\"",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n: \n        power <<= 1\n    return power",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 1561,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count",
        "test": "assert frequency(\"hello\", \"l\") == 2",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= n:\n        print(\"Invalid input. m should be less than or equal to n.\")\n        return\n    if m == n:\n        return list1[m]\n    else:\n        return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 1349,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2 * (a * (a + 1) / 2)",
        "test": "assert perimeter_pentagon(5) == 30",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s' or s[i] == 'd':\n            count += 1\n    return count\n\ns = \"Hello world, this is a test string.\"\nprint(count_occurance(s))  # Output: 3",
        "test": "assert count_occurance(\"hello world\") == 1, \"Count of 'world' should be 1\"",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = True\n    for i in range(len(test_tuple)):\n        if not isinstance(test_tuple[i], type(test_tuple[0])):\n            data_type = False\n            break\n    return data_type",
        "test": "assert check_type(('hello', 1, 3.14)) == False # Test case 1",
        "num_ids": 1254,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_majority(arr, n, x):\n    # Create a dictionary to store the count of each element\n    counts = {}\n    \n    # Iterate through the array and update the count of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Check if the count of each element is greater than n/2\n    if len(counts) >= n//2:\n        # If yes, return True\n        return True\n    else:\n        # If no, return False\n        return False",
        "test": "assert is_majority([1, 2, 2, 3, 3, 4], 3, 2) == True",
        "num_ids": 2032,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def odd_values_string(str):\n    '''\n    Remove the odd characters from a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:  # check if the current index is odd\n            result += str[i]\n    return result",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_of_three(a, b, c):\n    # Finding the minimum of three numbers\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(5,4,3) == 3",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n        n (int): The number of bits in the range.\n        l (int): The lower bound of the range.\n        r (int): The upper bound of the range.\n\n    Returns:\n        bool: True if all the bits are unset in the given range, False otherwise.\n    \"\"\"\n    return sum(1 for _ in range(r - l + 1)) == n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,0,5) == False",
        "num_ids": 2534,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # convert array to list to sort it in ascending order\n    arr = sorted(arr)\n\n    # initialize pointers to negative and positive elements\n    neg_ptr = 0\n    pos_ptr = 1\n\n    # iterate through the array and swap elements as necessary\n    while neg_ptr < n and pos_ptr < len(arr):\n        # if current element is negative, swap it with the next positive element\n        if arr[neg_ptr] < 0:\n            arr[neg_ptr], arr[pos_ptr] = arr[pos_ptr], arr[neg_ptr]\n            neg_ptr += 1\n            pos_ptr += 1\n        # if current element is positive, move to the next negative element\n        else:\n            neg_ptr += 1\n\n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 2678,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"\", \" \") == \"\"",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([], 5) == []",
        "num_ids": 1669,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*h",
        "test": "assert lateralsuface_cylinder(1,1) == 2",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(1) == 1, \"Volume of a cube with side length 1 is not 1.\"",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n!= 0:\n        if n % 2 == 1:\n            result |= n\n        n //= 2\n    return result",
        "test": "assert even_bit_set_number(4294967295) == 4294967295",
        "num_ids": 1714,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 110,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the counts\n    counts = Counter()\n\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Get the first element of the tuple\n        key = tup[0]\n\n        # Increment the count for the key\n        counts[key] += 1\n\n    return counts",
        "test": "assert check_occurences([]) == {}",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize count variable to zero\n    count = 0\n    \n    # Loop through each character in the string\n    for char in str:\n        # If the character is not an empty string, increment the count\n        if char!= '':\n            count += 1\n    \n    # Return the count\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if m <= 0 or n <= 0:\n        return 0\n    if n == 1:\n        return 1\n\n    count = 0\n    prev_num = 1\n    for i in range(2, m+1):\n        if i % 2 == 0:\n            if i - prev_num >= 2:\n                count += 1\n        else:\n            if prev_num - i >= 2:\n                count += 1\n        prev_num = i\n\n    return count",
        "test": "assert get_total_number_of_sequences(2, 2) == 0",
        "num_ids": 2398,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2)!= len(list1):\n        raise ValueError(\"The second list should have the same length as the first list.\")\n    \n    for i in range(len(list1) - 1, -1, -1):\n        list1[i] = list2[-1]\n        list2.pop()\n    \n    return list1",
        "test": "assert replace_list([1,2,3,4,5], [1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"\") == 0",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Check if the number is positive\n    if N <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the upper limit for the square root\n    upper = int(math.sqrt(N))\n    # Initialize the current square root\n    current_sqrt = upper\n    \n    # Loop until the square root is greater than or equal to N\n    while current_sqrt * current_sqrt < N:\n        current_sqrt += 1\n    \n    # Return the next perfect square\n    return current_sqrt**2",
        "test": "assert next_Perfect_Square(1) == 1, \"next_Perfect_Square(1) should return 1, but it returns {}\".format(next_Perfect_Square(1))",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize max sum and the current sum\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    \n    # Traverse the array from 2 to n-1 and calculate the current sum\n    for i in range(1, n):\n        curr_sum = arr[i] + curr_sum - arr[i-1]\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5, 6]) == 6, \"Incorrect value returned\"",
        "num_ids": 1938,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the babylonian method.\n\n    Parameters:\n    number (int): the number whose square root is to be found.\n\n    Returns:\n    float: the square root of the input number.\n\n    '''\n\n    # initialize a guess of 1 as the first guess for the square root\n    guess = 1\n\n    # while the difference between the guess and the square root is greater than 0.00001\n    while abs(guess - math.sqrt(guess)) > 0.00001:\n\n        # compute the difference between the guess and the square root\n        diff = abs(guess - math.sqrt(guess))\n\n        # if the difference is less than the square root, the square root is closer\n        if diff < math.sqrt(guess):\n            guess -= diff\n        # otherwise, the guess is closer\n        else:\n            guess += diff\n\n    # return the square root of the input number\n    return math.sqrt(number)",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 2087,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    max_length = 0\n    curr_length = 1\n\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring == substring[::-1]:\n                curr_length = j - i\n                if curr_length > max_length:\n                    max_length = curr_length\n\n    return max_length",
        "test": "assert lps(\"a\") == 1",
        "num_ids": 2336,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h = 0\n    for i in range(1, n+1):\n        h += 1 / i\n    return h",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 1026,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create two sets of unique numbers from the two input arrays\n    unique_nums1 = set(array_nums1)\n    unique_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = unique_nums1.intersection(unique_nums2)\n\n    # Return the intersection as a list\n    return list(intersection)",
        "test": "assert intersection_array([1,2,3,4,5],[6,7,8,9,10]) == [] # []",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((), 1) == 0",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n    result.insert(0, element)\n    return result",
        "test": "assert insert_element([],1) == [1]",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    real = numbers[0]\n    imaginary = numbers[1]\n\n    real_part = 0\n    imag_part = 0\n\n    if imaginary == 0:\n        return (real, 0)\n    elif imaginary > 0:\n        real_part = real\n        imag_part = cmath.sqrt(-1 * imaginary)\n    else:\n        real_part = cmath.sqrt(real * real + 1)\n        imag_part = cmath.sqrt(-1 * imaginary)\n\n    return (real_part, imag_part)",
        "test": "assert convert(1+2j) == (1+2j)",
        "num_ids": 1438,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count",
        "test": "assert count_integer([1,2,3,4,5]) == 5",
        "num_ids": 969,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations of the elements of a list of length n,\n    with repetition. Returns a list of tuples.\n    '''\n    combinations = []\n    for comb in combinations_with_replacement(l, n):\n        comb_tuple = tuple(comb)\n        combinations.append(comb_tuple)\n    return combinations",
        "test": "assert combinations_colors([], 2) == []",
        "num_ids": 2135,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            n //= i\n    return count",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 1432,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert maximize_elements((\"a\", \"b\"), (\"b\", \"c\")) == (\"b\", \"c\")",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def newman_prime(n):\n    '''\n    Returns the nth Newman-Shanks-Williams prime number.\n    '''\n    # Define a list of prime numbers up to n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    # Check if n is prime\n    if n in primes:\n        return n\n\n    # Check if n is divisible by any prime number\n    for prime in primes:\n        if n % prime == 0:\n            return n\n\n    # If n is not prime or divisible by any prime number, n cannot be a prime number\n    return None",
        "test": "assert newman_prime(2) == 2",
        "num_ids": 4154,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the tuples are not the same.\")\n\n    # Divide each tuple element-wise and store the result in a new tuple\n    result_tup = tuple([test_tup1[i]/test_tup2[i] for i in range(len(test_tup1))])\n\n    return result_tup",
        "test": "assert division_elements((1,2,3), (4,5,6)) == (0.0625, 0.125, 0.1875)",
        "num_ids": 2157,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    result1 = list1[:L]\n    result2 = list1[L:]\n    return (result1, result2)",
        "test": "assert split_two_parts([], 1) == ([], [])",
        "num_ids": 1946,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7",
        "test": "assert dog_age(0) == 0  # 0 is a valid input for h_age",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result",
        "test": "assert list_split([], 1) == []",
        "num_ids": 1557,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l * l * l\n    return s",
        "test": "assert lateralsurface_cube(5) == 125",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "test": "assert square_Sum(10) == 165 # Correct answer",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # First, we can check if the input number is negative or positive.\n    # If it's negative, we have to check if it's positive or negative.\n    # If it's positive, we have to check if it's 1 or more.\n    # If it's negative, we have to check if it's 1 or less.\n    if n < 0:\n        if n % 2 == 0:\n            return n\n        else:\n            return 1 + find_star_num(n//2)\n    else:\n        if n % 2 == 0:\n            return 1 + find_star_num(n//2)\n        else:\n            return n\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value(\"a\") == 97",
        "num_ids": 1427,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # check if the current element is even\n            sum += arr[i]\n        elif i % 2 == 0:  # check if the current element is odd and even position\n            sum += arr[i]\n    return sum",
        "test": "assert sum_even_and_even_index([2,4,6,8,10]) == 30",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize a variable to store the sum of even power sum\n    power_sum = 0\n    \n    # loop through each even natural number from 1 to n\n    for i in range(1, n+1):\n        # check if the number is even\n        if i % 2 == 0:\n            # calculate the power of the number raised to the 5th power\n            power = i**5\n            # add the power to the variable\n            power_sum += power\n    \n    # return the sum of even power sum\n    return power_sum",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1511,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list",
        "test": "assert rear_extract([]) == [] # test empty list",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = tuple()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            sub_tup = sub_tup + (test_tup1[i],)\n    return sub_tup",
        "test": "assert substract_elements(('apple', 'banana', 'orange'), ('grape', 'peach', 'apricot')) == ('apple', 'banana', 'orange')",
        "num_ids": 1896,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Calculate the binomial coefficients for all even numbers from 1 to n\n    binomial_coeffs = [math.factorial(i) // (math.factorial(i-1) * math.factorial(n-i)) for i in range(2, n+1, 2)]\n    # Return the sum of even binomial coefficients\n    return sum(binomial_coeffs[i] for i in range(len(binomial_coeffs)) if binomial_coeffs[i] % 2 == 0)",
        "test": "assert even_binomial_Coeff_Sum(2) == 2",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Calculates the volume of a cylinder using the formula V = pi * r^2 * h\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume",
        "test": "assert volume_cylinder(1,1) == 3.14159",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({\"a\": 10, \"b\": 20, \"c\": 30}, 40) == {}",
        "num_ids": 1552,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_num_decagonal(n):\n    num_decagonal = n * (3 * (n + 1) // 2 - 1)\n    return num_decagonal == int(num_decagonal)",
        "test": "assert is_num_decagonal(1) == 1, \"The first decagonal number is not 1.\"",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def sequential_search(dlist, item):\n    # Initialize the index variable to -1\n    index = -1\n    # Loop through the list and check if the item is equal to the current item\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # If the item is found, return the index and True\n            index = i\n            return (True, index)\n    # If the item is not found, return the index and False\n    return (False, index)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1511,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([]) == True",
        "num_ids": 1301,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def sub_list(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in frequency:\n        if frequency[digit] > 1:\n            return False\n\n    return True",
        "test": "assert validate(1234567) # True",
        "num_ids": 1490,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False",
        "test": "assert check_element([1,2,3,4,5],6) == False",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?=.*[ab]{2,})')\n    return pattern.match(text) is not None",
        "test": "assert text_match_two_three('aabbba') == True",
        "num_ids": 3117,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = a[0]\n    max_sum_start = a[0]\n    for i in range(1, n):\n        max_sum_end = max(max_sum_start + a[i], a[i])\n        max_sum = max(max_sum, max_sum_end)\n        max_sum_start = max(max_sum_start - a[i], 0)\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, -1, 2, 1], 5, 3) == 6, \"Incorrect output for the given test case\"",
        "num_ids": 1967,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Check if n is even\n    if n % 2 == 0:  \n        # Add the square of n to the sum\n        sum += n**2  \n        \n        # Keep adding squares of even natural numbers until n is no longer even\n        while n % 2 == 0:  \n            n += 2  \n            sum += n**2  \n    \n    else:  \n        # Add the square of n to the sum\n        sum += n**2  \n        \n    return sum",
        "test": "assert square_Sum(1) == 1**2",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length_list = []\n    for sublist in list1:\n        length = len(sublist)\n        if length > len(length_list):\n            length_list = sublist\n    return length_list",
        "test": "assert max_length([]) == []",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def count_no_of_ways(n, k):\n    # Base case: if the number of posts is less than or equal to 2, return 0\n    if n <= 2:\n        return 0\n    \n    # If the number of colors is greater than 2, return 0\n    if k > 2:\n        return 0\n    \n    # Create a list to store the count of each color\n    color_count = [0] * k\n    \n    # Initialize the count of adjacent posts with the first color\n    for i in range(n):\n        color_count[0] += 1\n        \n    # Iterate over the remaining colors and count the number of ways of painting the fence\n    for i in range(1, k):\n        # Iterate over the remaining positions and count the number of ways of painting the fence\n        for j in range(n-i):\n            color_count[i] += color_count[i-1]\n    \n    # Return the count of ways of painting the fence\n    return color_count[k-1]",
        "test": "assert count_no_of_ways(3, 4) == 0 # 0 ways of painting the fence with 3 posts and 4 colors",
        "num_ids": 1782,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # check if m is even\n    if m % 2 == 0:\n        # calculate quotient as integer\n        quotient = int(n / m)\n        return quotient\n    else:\n        # calculate quotient as float\n        quotient = n / m\n        return round(quotient)",
        "test": "assert find(10,5) == 2",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function will find the third side of a right angled triangle.\n    '''\n    if w == 0:\n        return h\n    elif h == 0:\n        return w\n    else:\n        return (w**2 + h**2)**0.5",
        "test": "assert otherside_rightangle(4,3) == 5",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return max(listval)",
        "test": "assert max_val([1,2,3,4,5]) == 5",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": "assert sum_div(12) == 28, \"The sum of all divisors of 12 is 28, but it should be 28.\"",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def flatten_list(lst):\n    # Flatten the nested list structure\n    flattened_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_lst.extend(flatten_list(item))\n        else:\n            flattened_lst.append(item)\n    return flattened_lst",
        "test": "assert flatten_list([]) == []",
        "num_ids": 1718,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the maximum aggregate values\n    max_aggregate_dict = defaultdict(int)\n\n    # Loop through each tuple in the list\n    for tup in stdata:\n        # If the value is greater than the current maximum aggregate, update it\n        if tup[1] > max_aggregate_dict[tup[0]]:\n            max_aggregate_dict[tup[0]] = tup[1]\n\n    # Return the maximum aggregate value\n    return max(max_aggregate_dict.values())",
        "test": "assert max_aggregate([(\"Alice\", 50), (\"Bob\", 30), (\"Charlie\", 20), (\"Dave\", 40), (\"Eve\", 60)]) == 60",
        "num_ids": 1776,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize variables to store binary sequence count and sum of first n bits\n    count = 0\n    sum_first_n = 0\n\n    # loop through the binary sequence lengths from 2 to n\n    for length in range(2, n+1): \n        # initialize variables to store binary sequence and sum of first n bits\n        sequence = ''\n        sum_first_n_bits = 0\n\n        # loop through the binary sequence of length length\n        for i in range(length): \n            # check if the sum of first i bits is equal to the sum of last n bits\n            if i == 0 or i == length-1: \n                if i == 0: \n                    sum_first_n_bits += length\n                elif i == length-1: \n                    sum_first_n_bits += length - 1\n                else: \n                    sum_first_n_bits += 1\n            else: \n                sum_first_n_bits += 1\n\n            # append the binary digit to the binary sequence\n            sequence += str(sum_first_n_bits)\n\n        # add the binary sequence to the count variable\n        count += 1\n\n    # return the count of binary sequences\n    return count",
        "test": "assert count_binary_seq(2) == 1 # base case",
        "num_ids": 2188,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = dict_depth(v) + 1\n        else:\n            depth = 1\n        max_depth = max(max_depth, depth)\n    return max_depth",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # Check if the given index is within the specified ranges\n    if index >= ranges[0] and index <= ranges[1]:\n        # If yes, find the element at the given index after number of rotations\n        return arr[index]\n    # Otherwise, return None\n    else:\n        return None",
        "test": "assert find_Element([1,2,3,4,5],[0,2],[1,2,3,4,5],1) == 2",
        "num_ids": 2043,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import re\n\ndef start_withp(words):\n    # Convert the list of words to a string\n    string_words =''.join(words)\n\n    # Use regular expressions to match the word 'p' at the beginning of each word\n    pattern = r'p\\w*'\n    match = re.match(pattern, string_words)\n\n    # Return the matched word(s) as a tuple\n    if match:\n        return (match.group(0),)\n    else:\n        return ()",
        "test": "assert start_withp(['carrot', 'donut', 'eggplant']) == ['donut', 'eggplant']",
        "num_ids": 1506,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n    start = 0\n    end = 0\n    curr_sum = 0\n\n    # Fill the prefix sum array\n    for i in range(1, n + 1):\n        curr_sum += a[i - 1]\n        dp[i] = max(curr_sum, dp[i - 1])\n\n        # Update the maximum sum and start and end indices\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i - 1\n            end = i\n\n    # Fill the suffix sum array\n    max_suffix_sum = max_sum\n    for i in range(n - k + 1, -1, -1):\n        curr_sum += a[i]\n        dp[i] = max(curr_sum, dp[i + 1])\n\n        # Update the maximum sum and start and end indices\n        if curr_sum > max_suffix_sum:\n            max_suffix_sum = curr_sum\n            start = i + 1\n            end = i\n\n    return max_sum",
        "test": "assert max_sum_increasing_subseq(list(range(1,10)), 5, 4, 2) == 15, \"Test 2: input list(range(1,10)), 5, 4, 2\"",
        "num_ids": 2963,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n\n    if len(tuplex) == m:\n        return tuplex[0]\n\n    if len(tuplex) == n:\n        return tuplex[-1]\n\n    return None",
        "test": "assert colon_tuplex(\"world\",3,4) == (3, \"world\")",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Parameters:\n    nums1: list of integers\n    nums2: list of integers\n    N: integer, the number of products to find\n\n    Returns:\n    A list of N products, where each product is the product of all the factors from the corresponding list in nums1, nums2, and N.\n    '''\n\n    products = []\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            for k in range(N):\n                product = nums1[i] * nums2[j] * k\n                products.append(product)\n\n    return products",
        "test": "assert large_product([10, 100, 1000, 10000, 100000], [100, 1000, 10000, 100000], 4) == 40000000000",
        "num_ids": 3337,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def maximum(a,b):\n    return a if a > b else b",
        "test": "assert maximum(3,5) == 5 # Test the correctness of the maximum function with the given values",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"\") == ()",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n):\n    # check if n is positive\n    if n < 0:\n        return -1\n\n    # get the number of set bits in the binary representation of n\n    count = 0\n    while n > 0:\n        count += n % 2\n        n = n // 2\n\n    # set the leftmost unset bit at index 0\n    if count == 0:\n        return 0\n\n    # otherwise, add the first count - 1 bits to the left and return the result\n    return count - 1",
        "test": "assert set_left_most_unset_bit(0) == 0",
        "num_ids": 1506,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume",
        "test": "assert volume_cone(1,1) == 3.141592653589793",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # If n is 1 or 2, return 1\n    if n == 1 or n == 2:\n        return n\n\n    # Initialize a variable to keep track of the highest power of 2\n    highest_power_of_2 = 1\n\n    # Loop through all the numbers from 2 to n-1\n    for i in range(2, n+1):\n        # If the current number is a power of 2 and greater than the current highest power of 2, update the highest power of 2\n        if i & (i - 1) == 0 and highest_power_of_2 < i:\n            highest_power_of_2 = i\n\n    return highest_power_of_2",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n < 1:\n        print(\"n must be a positive integer.\")\n        return\n    \n    if n == 1 or n == 2:\n        return n\n    \n    a = 1\n    b = 1\n    for i in range(3, n+1):\n        c = a + b\n        a = b\n        b = c\n    \n    return b",
        "test": "assert find_lucas(1) == 1 # Check if the second lucas number is 1.",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def add_string(list_, string):\n    return [str(item) + string for item in list_]",
        "test": "assert add_string([], \"\") == []",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 100,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Create an empty dictionary\n    d = {}\n    \n    # Iterate over the lists\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        \n        # If the key already exists in the dictionary, append the value to the list\n        if key in d:\n            d[key].append(value)\n        else:\n            # If the key doesn't exist in the dictionary, create a new list and add the value\n            d[key] = [value]\n            \n    # Iterate over the lists again and convert the nested dictionary to a dictionary\n    for i in range(len(l3)):\n        key = l3[i]\n        value = d[key]\n        \n        # If the key already exists in the dictionary, append the value to the list\n        if key in d:\n            d[key].append(value)\n        else:\n            # If the key doesn't exist in the dictionary, create a new list and add the value\n            d[key] = [value]\n            \n    # Convert the dictionary to a nested dictionary\n    result = {}\n    for key, value in d.items():\n        if len(value) == 1:\n            result[key] = value[0]\n        else:\n            result[key] = value\n            \n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 2215,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: f(1) = f(0) = 0\n    if n == 0:\n        return 0\n    \n    # Recursive case: f(n) = max(f(n/2), f(n/3), f(n/4), f(n/5), n)\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)",
        "test": "assert get_max_sum(0) == 0, \"get_max_sum(0) should return 0.\"",
        "num_ids": 2796,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_length_list(input_list):\n    # Initialize the maximum length as 1\n    max_length = 1\n\n    # Loop through the input list and update the maximum length\n    for num in input_list:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n\n    # Return the list with the maximum length\n    return input_list[:max_length]",
        "test": "assert max_length_list([]) == []",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if a tuple contains no duplicates.\n\n    Args:\n        test_tup (tuple): A tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    '''\n    return len(set(test_tup)) == len(test_tup)",
        "test": "assert check_distinct(('a', 'b', 'c')) == True",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # initialize an empty dictionary to store count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is not in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # if the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n\n    # return the character with the highest count\n    max_count = 0\n    max_char = ''\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n\n    return max_char",
        "test": "assert first_non_repeating_character(\"abc\") == \"a\"",
        "num_ids": 1844,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 1:\n        return string.isalpha()\n    else:\n        if re.search(regex, string[1:-1]):\n            return True\n        else:\n            return False",
        "test": "assert check_char('abcde') == False",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def median_numbers(a, b, c):\n    # create a list of the numbers\n    nums = [a, b, c]\n\n    # sort the list in ascending order\n    nums.sort()\n\n    # determine the number of elements in the list\n    n = len(nums)\n\n    # calculate the median\n    if n % 2 == 1:\n        median = nums[n // 2]\n    else:\n        median = (nums[n // 2 - 1] + nums[n // 2]) / 2\n\n    return median\n",
        "test": "assert median_numbers(1,5,3) == 3",
        "num_ids": 2481,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    return tuple(set(test_tup1) ^ set(test_tup2))",
        "test": "assert bitwise_xor((1,), (2,)) == (1, 2)",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)\n",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 1591,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)",
        "num_ids": 1917,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(1,2) == 1 # True",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False",
        "test": "assert check_tuplex((), (1,2,4)) == False",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_Parity(x):\n    if x == 0:\n        return True\n    elif x % 2 == 0:\n        return find_Parity(x // 2)\n    else:\n        return find_Parity(x - 1)",
        "test": "assert find_Parity(3) == 1",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a list of digits\n    digits = list(str(n))\n    # reverse the list\n    digits.reverse()\n    # convert the list to a string\n    digits_str = ''.join(digits)\n    # convert the string back to an integer\n    return int(digits_str)",
        "test": "assert rearrange_bigger(12345) == 54321",
        "num_ids": 2086,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert the list of numbers to a min heap\n    min_heap = []\n    for num in nums1 + nums2:\n        heapq.heappush(min_heap, num)\n\n    # extract k elements from the heap\n    pairs = []\n    for _ in range(k):\n        pair = heapq.heappop(min_heap)\n        pairs.append(pair)\n\n    return pairs",
        "test": "assert k_smallest_pairs([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 2) == [1, 2]",
        "num_ids": 4070,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the minimum product of the tuples.\n\n    :param list1: The list of tuples.\n    :return: The minimum product of the tuples.\n    '''\n\n    # Initialize the minimum product to be the first tuple in the list\n    min_product = list1[0]\n\n    # Loop through the list and find the minimum product of each pair of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            min_product = min(min_product, list1[i][0] * list1[j][1])\n\n    return min_product",
        "test": "assert min_product_tuple([1]) == 1",
        "num_ids": 2240,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return min(listval)",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # convert snake case string to camel case string\n    pattern = re.compile(r'_(\\w)')\n    return re.sub(pattern, lambda m: m.group(1).upper(), word)",
        "test": "assert snake_to_camel('PascalCase') == 'PascalCase'",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert remove_odd([]) == []",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the input list is empty\n    if len(list1) == 0:\n        return None\n    \n    # get the first element from the list\n    first_element = list1[0]\n    \n    # check if n is greater than the length of the list\n    if n > len(list1):\n        return None\n    \n    # check if n is equal to the length of the list\n    if n == len(list1):\n        return first_element\n    \n    # check if n is less than the length of the list\n    if n < len(list1):\n        # slice the list to get the nth element\n        rest = list1[1:]\n        \n        # check if the nth element is the last element\n        if n == len(rest) - 1:\n            return rest[-1]\n        \n        # slice the list to get the nth element\n        nth_element = rest[n - 1]\n        \n        return nth_element",
        "test": "assert extract_nth_element([], 1) == None",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [2,4,6,8,10]) == True",
        "num_ids": 1111,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_Product(arr):\n    arr.sort()\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i-1])\n    return max_product\n",
        "test": "assert max_Product([1, 2, 3]) == 6",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def group_tuples(Input):\n    '''\n    Find the common first element in a list of tuples.\n    '''\n    # Define an empty set to keep track of common elements\n    common = set()\n\n    # Loop through each tuple in the input list\n    for tup in Input:\n        # Add the first element of the tuple to the common set\n        common.add(tup[0])\n\n    # Return the common set as the result of the function\n    return common",
        "test": "assert group_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def Find_Max(lst):\n    # Initialize the maximum element to the first element of the list\n    max_element = lst[0]\n\n    # Iterate over all elements of the list\n    for element in lst:\n        # If the current element is greater than the maximum, update the maximum element\n        if element > max_element:\n            max_element = element\n\n    # Return the maximum element\n    return max_element",
        "test": "assert Find_Max([1, 2, 3, 4, 5]) == 5, \"The function should return the element of the list having maximum length.\"",
        "num_ids": 1266,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    length = len(list1)\n    for number in list1:\n        rounded_number = round(number)\n        total += rounded_number\n        print(f\"{number} rounded to {rounded_number} and added to total.\")\n    \n    print(f\"The total sum is {total} and it is multiplied by {length}.\")",
        "test": "assert round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5]) == (0.1 + 0.2 + 0.3 + 0.4 + 0.5) * 5 == 35",
        "num_ids": 1761,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1, 2):\n        result += i * i * i\n    return result",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += item\n    return result",
        "test": "assert concatenate_tuple('test') == 'test'",
        "num_ids": 1270,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n        \n    average = total/count\n    \n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1.0",
        "num_ids": 1287,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([test_tuple[i] for i in range(len(test_tuple)-1, -1, -1)])",
        "test": "assert extract_rear((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")) == (\"d\", \"e\", \"f\")",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if sublist == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 6) == 0",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert the date to a datetime object\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    \n    # Get the date in the desired format\n    year = date_obj.year\n    month = date_obj.month\n    day = date_obj.day\n    \n    # Convert the date object to the desired format\n    new_date = datetime(year, month, day)\n    \n    # Format the new date as dd-mm-yyyy\n    new_date_str = new_date.strftime('%d-%m-%Y')\n    \n    return new_date_str",
        "test": "assert change_date_format(\"2022-01-01 12:00:00\") == \"01-01-2022\"",
        "num_ids": 2079,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Traverse through all array elements\n    for i in range(n):\n        # One by one swap the elements\n        # that are smaller than it\n        # using the gap of 2.\n        for gap in range(n-i-1, n, 2):\n            # Traverse through the array elements\n            # one by one\n            for j in range(gap, n):\n                # If the current element is greater\n                # than the swapped element\n                # then swap them\n                if my_list[j] < my_list[j-gap]:\n                    my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n    return my_list",
        "test": "assert shell_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 2160,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # get the length of the two tuples\n    len_t1 = len(test_tup1)\n    len_t2 = len(test_tup2)\n\n    # initialize a new tuple to store the elementwise and tuples\n    result = tuple()\n\n    # loop through each element of the two tuples\n    for i in range(len_t1):\n        # if the i-th element of both tuples is equal, append it to the result tuple\n        if test_tup1[i] == test_tup2[i]:\n            result = result + (test_tup1[i],)\n\n    # loop through each element of the two tuples\n    for i in range(len_t2):\n        # if the i-th element of both tuples is not equal to the first element of the result tuple, append it to the result tuple\n        if test_tup2[i]!= test_tup1[0]:\n            result = result + (test_tup2[i],)\n\n    return result",
        "test": "assert and_tuples((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1962,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # find the determinant of the coefficient matrix\n    det = a * b * c + b ** 2 * (3 * c - a) + c ** 2 * (2 * a - 3 * b)\n\n    # calculate the directrix\n    if det == 0:\n        directrix = 0\n    elif det > 0:\n        directrix = 3 * c / det\n    else:\n        directrix = -3 * c / det\n\n    return directrix",
        "test": "assert parabola_directrix(2, 4, 6) == -1",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if len(list1)!= len(list2):\n        return False\n\n    set1 = set(list1)\n    set2 = set(list2)\n\n    if len(set1.intersection(set2)) == 0:\n        return False\n    else:\n        return True",
        "test": "assert common_element([], []) == False",
        "num_ids": 1393,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the median length of a trapezium by finding the half-height and then finding the length of the\n    triangle formed by the three bases.\n    '''\n    # Find the half-height\n    half_height = (base1 + base2) / 2\n    \n    # Find the length of the triangle formed by the three bases\n    length = (half_height * (half_height + height) / 2) - (half_height * half_height / 2)\n    \n    return length",
        "test": "assert median_trapezium(1,2,4) == 3",
        "num_ids": 2241,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3], 2) == True",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    regex = r'a.*b'\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one('bbbbb') == False",
        "num_ids": 4092,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([]) == []",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and removes the odd characters from it.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        else:\n            new_str = \"\"\n            break\n    return new_str\n",
        "test": "assert remove_odd('') == ''",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Count the number of bidirectional tuple pairs in the given list of tuples.\n    '''\n    count = 0\n    for pair in test_list:\n        if len(pair) > 1:\n            count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 1634,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "test": "assert multiple_to_single([]) == 0",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'(?<=\\w+)(?<![a-zA-Z])[A-Z][a-z]|[A-Z][a-z]\\.(?=\\s|\\Z)'\n    \n    # Use the re.finditer() method to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize an empty list to hold the adverb positions\n    positions = []\n    \n    # Iterate over the matches and extract the positions\n    for match in matches:\n        position = match.start()\n        positions.append(position)\n    \n    # Return the list of adverb positions\n    return positions",
        "test": "assert find_adverb_position(\"The quick brown fox jumped over the lazy dog.\") == (3, \"the\")",
        "num_ids": 3295,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * l",
        "test": "assert surfacearea_cube(4) == 64",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Find the ration of positive numbers in an array of integers.\n    '''\n\n    # initialize a dictionary to store the count of positive numbers\n    count_dict = {}\n\n    # iterate over the array and increment the count in the dictionary\n    for num in nums:\n        if num > 0:\n            count_dict[num] = count_dict.get(num, 0) + 1\n\n    # calculate the ration of positive numbers\n    ration = 0.0\n    for num in count_dict:\n        if count_dict[num] > 0:\n            ration += count_dict[num] / len(nums)\n\n    return ration",
        "test": "assert positive_count([1]) == 1",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest:\n                largest = list1[i]\n    return largest",
        "test": "assert largest_neg([1, -2, 3, -4, -5]) == 1",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(K, len(test_list)):\n        trimmed_list.append(test_list[i])\n    return trimmed_list",
        "test": "assert trim_tuple([], 2) == []",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 1821,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    return counter",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2,3,4,5]) == Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1})",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1178,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    p = 1\n    k = 1\n    \n    while k <= n:\n        perrin_sum += p\n        k += 1\n        p *= k\n    \n    return perrin_sum",
        "test": "assert cal_sum(1) == 1, \"The sum of perrin numbers should be 1.\"",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n",
        "test": "assert extract_string('hello world', 3) == 'he'",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1",
        "test": "assert remove_whitespaces(\"\") == \"\"",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount <= actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(300, 600) == 0",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_even_factors = 0\n    for i in range(1, n+1, 2):\n        sum_of_even_factors += i\n\n    return sum_of_even_factors",
        "test": "assert sumofFactors(12) == 36, \"The sum of even factors of 12 should be 36\"",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z' in a given text string.\n\n    Returns True if a match is found, False otherwise.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\b')\n    return bool(pattern.search(text))",
        "test": "assert text_match_wordz(\"This is a test z\") is True",
        "num_ids": 1158,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 > 2:\n        return True\n    elif monthnum2 == 2:\n        if (monthnum2 % 4 == 0 and monthnum2 % 100!= 0) or monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(2) == False, \"The given month number should not contain 31 days\"",
        "num_ids": 1643,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def Find_Min(lst):\n    n = len(lst)\n    min_len = n\n    min_sublist = []\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist",
        "test": "assert Find_Min([1,2,3,4,5]) == [1]",
        "num_ids": 2023,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)\\b[A-Z]\\w*\\b')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase('abcdefg123') == 'Abcdefg'",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i])\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str.upper():\n        if char.isalpha():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Base case: if list1 is empty, return an empty list\n    if not list1:\n        return []\n\n    # Recursive case: generate all combinations of the first element of the list\n    first_element = list1[0]\n    combinations = combinations_list(list1[1:])\n    combinations.append(first_element)\n\n    # Recursively generate all combinations of the remaining elements\n    remaining_elements = list1[1:]\n    for element in remaining_elements:\n        for combination in combinations:\n            combinations.append(combination + element)\n\n    return combinations",
        "test": "assert combinations_list([]) == []",
        "num_ids": 3082,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def max_subarray_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far",
        "test": "assert max_subarray_product([1, 2, 3]) == 6, \"max_subarray_product([1, 2, 3]) should return 6\"",
        "num_ids": 2168,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.keys())!= len(set(dict.values())):\n        return False\n    else:\n        return True",
        "test": "assert check_value({}, 3) == True",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}",
        "test": "assert drop_empty({'a':1}) == {'a':1}",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product *= arr[i]\n    return max_product",
        "test": "assert max_product([1, 2, 3]) == 6, \"The function should return 6 for the given input array [1, 2, 3].\"",
        "num_ids": 1953,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def add_pairwise(test_tup):\n    # create a copy of the input tuple for convenience\n    test_tup_copy = tuple(test_tup)\n    # loop over the elements of the tuple and add them pairwise\n    for i in range(len(test_tup_copy) - 1):\n        for j in range(i + 1, len(test_tup_copy)):\n            # if the current pair is valid, add it to the result list\n            if test_tup_copy[i] + test_tup_copy[j] in [x for x in test_tup_copy if x not in [test_tup_copy[i], test_tup_copy[j]]]:\n                test_tup_copy.append(test_tup_copy[i] + test_tup_copy[j])\n    return test_tup_copy",
        "test": "assert add_pairwise(('hello', 'world', 'python')) == ('hello', 'world', 'python')",
        "num_ids": 1947,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    product %= n\n    return product",
        "test": "assert find_remainder([5, 4, 3, 2, 1], 6) == 0",
        "num_ids": 1231,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_Consecutive(l):\n    if len(l) <= 1:\n        return False\n    \n    prev = l[0]\n    for num in l[1:]:\n        if num == prev + 1:\n            return True\n        prev = num\n        \n    return False",
        "test": "assert check_Consecutive([1, 2, 2, 3, 3, 4, 4, 5]) == True",
        "num_ids": 1660,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n    test_list1 (list): The first tuple list.\n    test_list2 (list): The second tuple list.\n\n    Returns:\n    list: A list containing the tuple intersection of the given lists.\n    '''\n\n    # Convert the test_list1 and test_list2 into sets so that we can perform a set intersection\n    test_list1_set = set(test_list1)\n    test_list2_set = set(test_list2)\n\n    # Convert the sets back to tuples and return the intersection as a list\n    return list(test_list1_set.intersection(test_list2_set))",
        "test": "assert tuple_intersection([], []) == []",
        "num_ids": 1654,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "test": "assert replace_char('hello world', 'x', 'o') == 'hello world'",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # sort the counter in descending order by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # return the sorted counter as a dictionary\n    return dict(sorted_counter)",
        "test": "assert sort_counter({\"apple\": 3, \"banana\": 2, \"orange\": 1}) == {\"apple\": 3, \"banana\": 2, \"orange\": 1}",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n\n    largest = min_value = float('-inf')\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < min_value:\n            min_value = num\n\n    return largest + min_value",
        "test": "assert big_sum([1,2,3,4,5]) == 15",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello\") == \"hello\"",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]\\b', '', str1)",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Find the first digit\n    first_digit = int(num_str[0])\n    return first_digit",
        "test": "assert first_Digit(10) == 1",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list: \n        if number % 2 == 1: \n            odd_numbers.append(number)\n    return odd_numbers ",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Define a list of natural numbers\n    nums = [x**3 for x in range(1, n+1)]\n\n    # Calculate the sum of cubes\n    cube_sum = sum(nums)\n\n    # Calculate the sum of natural numbers\n    natural_sum = sum(nums)\n\n    # Calculate the difference\n    difference = cube_sum - natural_sum\n\n    return difference",
        "test": "assert difference(10) == 0",
        "num_ids": 1554,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 1 : \n                count += 1\n                break\n    return count",
        "test": "assert find_Odd_Pair([1, 2, 3, 4, 5], 5) == 2",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result",
        "test": "assert toggle_string('hello world') == 'HELLO WORLD'",
        "num_ids": 1449,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the input integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through each digit of the two input integers\n    for i in range(max(len(s1), len(s2))):\n        # if the digit at the current index of the two input integers is different, add 1 to the sum\n        if s1[i]!= s2[i]:\n            sum += 1\n    \n    # return the sum\n    return sum",
        "test": "assert digit_distance_nums(12345, 12345) == 0",
        "num_ids": 1846,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum = max(0, current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 2009,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # create a set from the given tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # union the sets and convert to a list for sorted output\n    union_set = set1.union(set2)\n    union_list = sorted(list(union_set))\n    \n    return union_list",
        "test": "assert union_elements((), (1, 2, 3)) == sorted((1, 2, 3))",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 1654,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\b[A-Za-z0-9]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"A value between \\\" and \\\" is extracted.\"\nvalues = extract_values(text)\nprint(values)",
        "test": "assert extract_values(\"Hello, world!\") == [\"Hello\", \"world\"]",
        "num_ids": 1518,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0  # Initialize a count variable\n\n    # Iterate through the list\n    for i in range(n):\n\n        # Check if both elements are not equal\n        if arr[i]!= arr[i+1]:\n\n            # Increment the count variable\n            count += 1\n\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5], 2) == 2",
        "num_ids": 1467,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()",
        "test": "assert split(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 566,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_of_digits = 0\n    while n > 0:\n        digit = n % 10\n        sum_of_digits += digit\n        n //= 10\n    return sum_of_digits",
        "test": "assert sum_digits(123) == 6 # sum of the digits is 6",
        "num_ids": 1255,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # initialize two pointers to the start and end of the list\n    left = 0\n    right = len(list1) - 1\n\n    # swap elements if they are in the wrong order\n    while left < right:\n        if list1[left] > list1[right]:\n            list1[left], list1[right] = list1[right], list1[left]\n            left += 1\n            right -= 1\n        elif list1[left] < list1[right]:\n            left += 1\n        else:\n            right -= 1\n\n    # if the list is already sorted, return True\n    if left == right:\n        return True\n    else:\n        return False",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1739,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]",
        "test": "assert empty_list(0) == []",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def sort_sublists(list1):\n    '''\n    Sort each sublist of strings in a given list of lists.\n\n    Parameters:\n    list1 (list): A list of lists, each containing strings.\n\n    Returns:\n    list: A list of sorted sublists.\n    '''\n\n    # Check if the list is empty\n    if not list1:\n        return []\n\n    # Find the length of the longest sublist\n    max_length = len(list1[0])\n\n    # Create an empty list to hold the sorted sublists\n    sorted_sublists = []\n\n    # Iterate over each sublist of strings in the list\n    for sublist in list1:\n        # Check if the length of the current sublist is greater than the maximum length\n        if len(sublist) > max_length:\n            # Remove the last sublist and add it to the beginning of the sorted sublists list\n            sorted_sublists = [sublist[i:] for i in range(len(sublist))] + sorted_sublists\n            # Reset the maximum length to the length of the current sublist\n            max_length = len(sublist)\n        # If the length of the current sublist is equal to or less than the maximum length,\n        # append it to the beginning of the sorted sublists list\n        else:\n            sorted_sublists.append(sublist)\n\n    # Return the sorted sublists list\n    return sorted_sublists",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['date', 'elderberry', 'fig'], ['grape', 'honeydew', 'ice'], ['kiwi', 'lemon','mango']]) == [['apple', 'banana', 'cherry'], ['date', 'elderberry', 'fig'], ['grape', 'honeydew', 'ice'], ['kiwi', 'lemon','mango']]",
        "num_ids": 2229,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 3, 2, 4]) == [1, 2, 3, 4]",
        "num_ids": 1528,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create an empty set to store unique numbers\n    unique_numbers = set()\n\n    # iterate through the list and add unique numbers to set\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1212,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 3.14 * r**2 * h\n    return area",
        "test": "assert surfacearea_cylinder(1,1) == 3.14",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    Parameters:\n    A (list): The list to check.\n    B (list): The list to check if it is a sublist of A.\n\n    Returns:\n    bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n\n    if len(B) > len(A):\n        return False\n\n    # Check if A is a sublist of B\n    for i in range(len(B)):\n        if B[i]!= A[i]:\n            return False\n\n    return True",
        "test": "assert is_Sub_Array([1,2,3,4,5], [2,3]) == False # False",
        "num_ids": 1768,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 10:\n        return n\n\n    factorial = 1\n    for i in range(1, int(n/10)+1):\n        factorial *= i\n    \n    last_digit = n % 10\n    \n    return last_digit",
        "test": "assert last_Digit_Factorial(12345) == 5, \"The last digit of the factorial of 12345 is 5.\"",
        "num_ids": 1309,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def interleave_lists(*args):\n    flat_list = []\n    for lst in args:\n        for item in lst:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert interleave_lists([],[],[]) == []",
        "num_ids": 1787,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            dissimilar.append(tup)\n    for tup in test_tup2:\n        if tup not in test_tup1:\n            dissimilar.append(tup)\n    return dissimilar",
        "test": "assert find_dissimilar((1,2,3), (1,2,3)) == []",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def even_ele(test_tuple, even_fnc):\n    # Convert the mixed tuple to a list of lists\n    test_list = [sub_list for sub_list in test_tuple]\n\n    # Remove uneven elements from the nested list\n    even_list = [even_fnc(sub_list) for sub_list in test_list]\n\n    # Convert the list back to a mixed tuple\n    even_tuple = tuple(even_list)\n\n    return even_tuple",
        "test": "assert even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 0)",
        "num_ids": 2063,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s\n    return area",
        "test": "assert surface_Area(2,3) == 6, \"Incorrect surface area calculation\"",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def catalan_number(num):\n    '''\n    This function takes an integer as input and returns the nth Catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    else:\n        catalan = 0\n        for i in range(2, num+1):\n            catalan += (num - i) * (num - i - 1) // 2\n        return catalan",
        "test": "assert catalan_number(0) == 0",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use regular expression to match adverbs with ly ending\n    adverbs = re.findall(r\"([^\\s]+)ly\", text)\n    # Check if any adverbs were found\n    if adverbs:\n        # Find the index of the first adverb\n        first_adverb_index = adverbs[0].index(\"ly\")\n        # Find the index of the last adverb\n        last_adverb_index = adverbs[-1].rfind(\"ly\")\n        # Find the first character before the first adverb\n        before_first_adverb = text[:first_adverb_index]\n        # Find the last character after the last adverb\n        after_last_adverb = text[last_adverb_index+3:]\n        # Return the result as a tuple containing the adverb, position, and before and after the adverb\n        return (adverbs[0], first_adverb_index, after_last_adverb, before_first_adverb)\n    else:\n        # Return an empty list if no adverbs were found\n        return []",
        "test": "assert find_adverbs(\"I will smile at the moon.\") == [('at', 4), ('ly', 7)]",
        "num_ids": 3393,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a priority queue from the given items\n    pq = []\n    for item in items:\n        heapq.heappush(pq, item)\n\n    # Return the top n items from the priority queue\n    return [heapq.heappop(pq) for i in range(n)]\n",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 1918,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]",
        "test": "assert split_Arr([], 2) == []",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def list_tuple(lst):\n    '''\n    Function to convert a list to a tuple.\n    '''\n    return tuple(lst)",
        "test": "assert list_tuple([]) == ()",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # find the difference between the largest and smallest values\n    diff = max_val - min_val\n    \n    return diff",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        if i*i == i:\n            count += 1\n            print(i)\n    return count\n\nprint(perfect_squares(1, 10)) # Output: 25, 36, 49, 64, 81, 100",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to radians\n    r = x*cmath.cos(y)\n    theta = y*cmath.sin(x)\n\n    # Convert the polar coordinates to rectangular coordinates\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n\n    # Return the rectangular coordinates\n    return rect_x, rect_y",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the list has only one element\n    if len(newList) == 1:\n        return newList\n\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_binomial = 0\n    for i in range(1,n+1): \n        if i <= k: \n            sum_of_binomial += (n-i+1) * binomial(i,k)\n        else: \n            sum_of_binomial += (i-k) * binomial(n-i+1,k)\n    return sum_of_binomial \n\ndef binomial(n, k): \n    '''\n    Write a python function to find the value of the nth binomial coefficient.\n    '''\n    if n == 0 or k == 0: \n        return 1\n    if k == 1: \n        return n\n    if k == n: \n        return 1\n    if n <= k: \n        return binomial(n-1, k)\n    else: \n        return binomial(n, k-1) * (n-k+1)",
        "test": "assert binomial_Coeff(5,3) == 15",
        "num_ids": 2135,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # get rid of leading zeros\n    ip = re.sub(r'^0+', '', ip)\n    return ip",
        "test": "assert removezero_ip(\"123.456.789.0\") == \"123.456.789.0\"",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables to store the count of even and odd numbers in the list\n    count_even = 0\n    count_odd = 0\n\n    # Loop through each element of the list\n    for element in list1:\n\n        # If the element is even, increment the count of even numbers\n        if element % 2 == 0:\n            count_even += 1\n\n        # If the element is odd, increment the count of odd numbers\n        else:\n            count_odd += 1\n\n    # Return the difference of the two counts\n    return count_odd - count_even",
        "test": "assert diff_even_odd([]) == 0",
        "num_ids": 2052,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def min_Swaps(str1,str2) : \n    # Count the number of swaps required to convert string1 to string2\n    swaps = 0 \n    # Loop through each character in string1\n    for i in range(len(str1)): \n        # If the character in string1 is not equal to the character in string2, increment swaps\n        if str1[i]!= str2[i]: \n            swaps += 1 \n    # Return the minimum number of swaps required to convert string1 to string2\n    return swaps ",
        "test": "assert min_Swaps(\"1011\", \"1101\") == 2, \"The correctness of min_Swaps function is not provided\"",
        "num_ids": 2478,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not isinstance(tuple_list, tuple):\n        print(\"Error: Input is not a tuple.\")\n        sys.exit(1)\n    total_size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            total_size += tuple_size(item)\n        elif isinstance(item, list):\n            for i in range(len(item)):\n                total_size += tuple_size((item[i], ))\n        elif isinstance(item, (int, float, str)):\n            total_size += 8\n    return total_size",
        "test": "assert tuple_size(()) == 0, \"tuple_size(()) should return 0 for an empty tuple\"",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_kth(arr1, arr2, k):\n    # find the length of the largest array\n    n = max(len(arr1), len(arr2))\n\n    # sort the two arrays and get the kth element\n    if k < n:\n        return arr2[k-1]\n    else:\n        return arr1[n-k-1]\n",
        "test": "assert find_kth([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 4) == 7",
        "num_ids": 2305,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    return sum == number",
        "test": "assert armstrong_number(123456789) == False",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i\n    avg = total_sum / n\n    return total_sum, avg",
        "test": "assert sum_average(2) == 3",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the frequency of each character\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # loop through the dictionary and find the first character that has a count of 2 or more\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no character has a count of 2 or more, return None\n    return None",
        "test": "assert first_repeated_char(\"bbbbb\") == \"b\"",
        "num_ids": 1743,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty list to store all lucid numbers smaller than or equal to n\n    ludic_numbers = []\n    # loop through all numbers between 1 and n\n    for i in range(1, n+1):\n        # check if i is a lucid number by dividing i by all integers from 2 to the square root of i\n        if i % (2 ** (i-1)) == 0:\n            # if i is a lucid number, append it to the ludic_numbers list\n            ludic_numbers.append(i)\n    # return the ludic_numbers list\n    return ludic_numbers",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 2173,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def reverse_words(s):\n    words = s.split()  # Split the string into words\n    words.reverse()    # Reverse the order of the words\n    new_string =''.join(words)    # Join the words back together with spaces\n    return new_string",
        "test": "assert reverse_words(\"hello world\") == \"dlrow olleh\"",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is 1 or less\n    if num <= 1:\n        return False\n\n    # Check if the number is 2 or less\n    elif num == 2:\n        return True\n\n    # Check if the number is odd\n    else:\n        # Check if the number is divisible by any number between 2 and the square root of the number\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        # If the number is not divisible by any number, it is a prime number\n        return True",
        "test": "assert prime_num(2) == True, \"The number 2 is not prime.\"",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)",
        "test": "assert radian_degree(0) == 0.0",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern = r\"the|quick|brown|fox|jumps\"\nresult = find_literals(text, pattern)\nif result:\n    print(f\"Match found at index {result[1]}: {text[result[1]:result[2]]}\")\nelse:\n    print(\"Match not found\")",
        "test": "assert find_literals(\"Hello World!\", r\"world\") == (None, None, None)",
        "num_ids": 1827,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def bell_Number(n):\n    '''\n    Function to find nth Bell number.\n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 11\n    elif n == 3:\n        return 17\n    else:\n        return None",
        "test": "assert bell_Number(1) == 5",
        "num_ids": 2132,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L\n    new_list = []\n    for i in range(n):\n        if i!= k-1:\n            new_list.append(list1[i])\n    return new_list",
        "test": "assert remove_kth_element([], 3) == []",
        "num_ids": 1566,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def max_of_nth(test_list, N):\n    max_val = float('-inf')\n    max_index = -1\n    \n    for i in range(len(test_list)):\n        row = test_list[i]\n        col = [test_list[j][i] for j in range(len(test_list))]\n        max_col = max(col)\n        \n        if max_col > max_val:\n            max_val = max_col\n            max_index = i\n            \n    if max_index == -1:\n        return None\n    \n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 5",
        "num_ids": 1857,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n        else:\n            result.append(sublist)\n    return result",
        "test": "assert merge([]) == [] # empty list",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    for i in range(len(test_list)):\n        if i == 0:\n            cumulative_sum.append(test_list[i])\n        else:\n            cumulative_sum.append(cumulative_sum[i-1] + test_list[i])\n    return cumulative_sum",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) == 0:\n        return []\n    else:\n        averages = []\n        for i in range(len(nums)):\n            if isinstance(nums[i], tuple):\n                sum_tuple = 0\n                for j in range(len(nums[i])):\n                    sum_tuple += nums[i][j]\n                averages.append(sum_tuple / len(nums[i]))\n            else:\n                averages.append(nums[i])\n        return averages",
        "test": "assert average_tuple(()) == []",
        "num_ids": 1901,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6, 7)) == ((1, 2), (2, 3), (3, 4))",
        "num_ids": 1857,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = steps // d\n    if steps % d!= 0:\n        jumps += 1\n    return jumps",
        "test": "assert min_Jumps(steps=3, d=3) == 1",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] //= nums2[i]\n    return nums1",
        "test": "assert div_list([], []) == []",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('.', '')\n    return test_str",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def largest_subset(a):\n    # Create a list of all numbers in the input list a\n    numbers = list(set(a))\n    # Initialize a variable to store the largest subset size\n    largest_size = 0\n    # Iterate through each pair of numbers in the list\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            # Check if the sum of the two numbers is divisible by 2\n            if (numbers[i] + numbers[j]) % 2 == 0:\n                # Update the largest subset size if the current subset size is greater\n                if largest_size < len(numbers)-i-j:\n                    largest_size = len(numbers)-i-j\n    return largest_size",
        "test": "assert largest_subset([1, 4, 6, 2, 5]) == 2, \"The largest subset should have size 2.\"",
        "num_ids": 2389,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # find the middle index of the first list\n    middle_index = len(arr1) // 2\n\n    # if the length of the lists is odd, there is a median in the middle\n    if len(arr1) % 2 == 1:\n        # if the middle index of the first list is less than or equal to the middle index of the second list\n        if middle_index <= len(arr2) // 2:\n            # return the value of the element at the middle index of the second list\n            return arr2[middle_index]\n        # else, return the value of the element at the middle index of the first list\n        else:\n            # return the value of the element at the middle index of the first list\n            return arr1[middle_index]\n    # else, the length of the lists is even, so the median is in the middle\n    else:\n        # if the middle index of the first list is less than or equal to the middle index of the second list\n        if middle_index <= len(arr2) // 2:\n            # return the value of the element at the middle index of the first list\n            return arr1[middle_index]\n        # else, return the value of the element at the middle index of the second list\n        else:\n            # return the sum of the values of the first and second lists\n            return (arr1[middle_index - 1] + arr2[middle_index]) / 2",
        "test": "assert get_median([1], [1], 1) == 1, \"get_median([1], [1], 1) should return 1 for a list with only one element.\"",
        "num_ids": 2694,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the nth power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4,5],3) == [1,8,27,64,125] # nth_nums(nums, n)",
        "num_ids": 1315,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def swap_List(newList):\n    '''\n    Write a Python function to interchange the first and last element in a given list.\n    '''\n    # Initialize pointers\n    first = 0\n    last = len(newList) - 1\n\n    # Move pointers towards each other\n    while first < last:\n        # Swap the elements\n        newList[first], newList[last] = newList[last], newList[first]\n\n        # Increment pointers\n        first += 1\n        last -= 1\n\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    s = 1\n    while True:\n        area = (1/3) * (s * (s + r))\n        if area >= 4 * r:\n            return area\n        s += 1\n",
        "test": "assert triangle_area(4) == 20, \"The area of the triangle with base of length 4 and height 3 is incorrect.\"",
        "num_ids": 1547,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        start, end = end, start\n    count = 0\n    while start <= end:\n        count += 1\n        start += 1\n    return count",
        "test": "assert find_First_Missing([1,2,4,5,6]) == 5",
        "num_ids": 1610,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces('Hello World') == 'Hello%20World'",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def Split(lst):\n    '''\n    Takes a list of numbers as input and returns a new list with even numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven_numbers = Split(lst)\nprint(even_numbers)",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n        return sub\n    else:\n        sub.append(ele)\n        adj = [sub[0][0]-1, sub[0][1], sub[0][0]+1, sub[0][1], sub[0][0], sub[0][1]-1, sub[0][0], sub[0][1]+1]\n        return adj",
        "test": "assert adjac((1, 2)) == [(1, 2)]",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the text into a list of words\n    words = text.split()\n    # Join the words back into a string with underscores\n    result = '_'.join(words)\n    # Return the modified string\n    return result",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            del num_list[i]\n        else:\n            i += 1\n    return num_list",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize a variable to store the xor of all pairs\n    xor_sum = 0\n\n    # Traverse through all pairs of numbers in the given list\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Calculate the xor of the two numbers\n            xor = arr[i] ^ arr[j]\n            \n            # Add the xor to the sum variable\n            xor_sum += xor\n\n    # Return the xor of all pairs in the list\n    return xor_sum\n",
        "test": "assert pair_xor_Sum([1,2,3,4,5], 4) == 24 # correct result",
        "num_ids": 1564,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    heap = []  # initialize an empty heap\n\n    for item in iterable:\n        # insert item into heap\n        heapq.heappush(heap, item)\n\n    # extract items from heap and sort them\n    sorted_list = [heapq.heappop(heap) for i in range(len(heap))]\n    return sorted_list",
        "test": "assert heap_sort([3, 5, 2, 1, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 1919,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(1000,500) == False",
        "num_ids": 1376,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    temp = t + 273.15  # convert temperature from celsius to Kelvin\n    wind_speed = v * 3.6  # convert wind speed from km/h to m/s\n    a = (17.27 * temp - 46.86) / (math.log(wind_speed / 24) + 2.83)\n    chill_index = math.ceil(a)\n    return chill_index",
        "test": "assert wind_chill(30,20) == 9 # valid input",
        "num_ids": 1816,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names\n    result = []\n\n    # loop through each name in the input list\n    for name in sample_names:\n        # remove the name that starts with a lowercase letter\n        name = name.lower()\n        # add the remaining name to the result list\n        result.append(name)\n\n    # return the sum of the lengths of the remaining names\n    return sum(len(name) for name in result)",
        "test": "assert sample_nam('hello') == 5 # Test case 1: hello has a length of 5",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(|\\)|\\[|\\]|[^a-zA-Z0-9 ]+')\n    return pattern.sub('', items)\n\nitems = \"Hello (World) Python!\"\nprint(remove_parenthesis(items)) # Output: \"Hello World Python\"",
        "test": "assert remove_parenthesis('') == ''",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def is_nonagonal(n):\n    a = 1\n    for i in range(n-1):\n        a += i\n    return a",
        "test": "assert is_nonagonal(2) == 1",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Replace all 'z' characters with an empty string\n    text = re.sub('z', '', text)\n\n    # Find the start and end of the word using regex\n    start_word = re.search(r'\\b\\w*\\b', text)\n    end_word = re.search(r'\\b\\w*\\b', text[::-1])\n\n    # If the word exists at both ends of the text, return True\n    if start_word and end_word:\n        return True\n\n    # If the word exists at the start of the text, return True\n    elif start_word:\n        return True\n\n    # If the word exists at the end of the text, return True\n    elif end_word:\n        return True\n\n    # If the word doesn't exist at all, return False\n    else:\n        return False",
        "test": "assert text_match_wordz_middle('hello world zlo world') == True",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input.copy()  # create a copy of the input array\n    n = len(arr)  # get the length of the array\n    k_reverse = 0  # initialize a variable for k_reverse\n    \n    while k_reverse < k:  # while k_reverse is less than k\n        arr[k_reverse], arr[n-k_reverse-1] = arr[n-k_reverse-1], arr[k_reverse]  # swap elements in the array\n        k_reverse += 1  # increment k_reverse by 1\n    \n    return arr  # return the reversed array",
        "test": "assert reverse_Array_Upto_K([], 0) == []",
        "num_ids": 2015,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_dict.values()) + test_tup",
        "test": "assert add_dict_to_tuple(tuple(), {}) == ()",
        "num_ids": 1138,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = 0.0\n\n    # Iterate through all cells in the matrix\n    for i in range(N):\n        for j in range(N):\n            # Check if the cell is valid (i.e., it's not in the top-left corner)\n            if i == 0 or j == 0 or i == N-1 or j == N-1:\n                continue\n\n            # Compute the current cell's average\n            cur_avg = cost[i][j] / (i+j+1)\n\n            # Update the maximum average if necessary\n            if cur_avg > max_avg:\n                max_avg = cur_avg\n\n    return max_avg",
        "test": "assert maxAverageOfPath([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0",
        "num_ids": 4775,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = []\n    \n    for name, student in students.items():\n        if student[0] > h or student[1] > w:\n            filtered_students.append(name)\n    \n    return filtered_students",
        "test": "assert filter_data({}, 160, 100) == []",
        "num_ids": 2805,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def count_same_pair(nums1, nums2):\n    # count the number of elements in the lists\n    num_elements = len(nums1)\n    # initialize a dictionary to store the count of each value in nums1\n    count_dict = {}\n    # loop through nums1\n    for i in range(num_elements):\n        # get the value from nums1\n        value = nums1[i]\n        # check if the value is already in the dictionary\n        if value in count_dict:\n            # if it is, increment its count by 1\n            count_dict[value] += 1\n        else:\n            # if it is not, add it to the dictionary with count 1\n            count_dict[value] = 1\n    # loop through nums2\n    for i in range(num_elements):\n        # get the value from nums2\n        value = nums2[i]\n        # check if the value is already in the dictionary\n        if value in count_dict:\n            # if it is, decrement its count by 1\n            count_dict[value] -= 1\n        else:\n            # if it is not, add it to the dictionary with count -1\n            count_dict[value] = -1\n    # count the number of indices where the lists have the same values\n    count = 0\n    # loop through the dictionary\n    for value, count_ in count_dict.items():\n        # if the count_ is not equal to 0, increment the count\n        if count_!= 0:\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) == [0, 2, 3, 4, 5]",
        "num_ids": 1971,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        if power % 10 == 0:\n            result += 1\n        power //= 10\n    return base * result",
        "test": "assert power_base_sum(2, 0) == 0, \"Power should be non-negative.\"",
        "num_ids": 1573,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    matches = re.findall(r'\"[^\"]*\"', text)\n    return matches",
        "test": "assert extract_quotation(\"This is a test string.\") == \"This is a test string.\"",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    if len(test_tup)!= len(test_tup[0]):\n        print(\"Error: Tuple length does not match length of first element.\")\n        return\n\n    result = []\n    for i in range(len(test_tup[0])):\n        result.append(test_tup[0][i] * test_tup[1][i])\n\n    return tuple(result)",
        "test": "assert multiply_elements((1,2,3,4,5)) == (1*2, 1*3, 2*3, 1*4, 1*5)",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1467,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n\n    Returns a new list with consecutive duplicates removed.\n    '''\n    return list(sorted(list(set(nums))))",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 2493,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r ** 2 * h\n    return surface_area",
        "test": "assert lateralsurface_cone(2,3) == 6.283185307179586",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,. ]', ':', text)",
        "test": "assert replace_specialchar(\"The quick brown fox jumps over the lazy dog.\") == \"The:quick:brown:fox:jumps:over:the:lazy:dog:\"",
        "num_ids": 1231,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Return the index of the first occurrence of x in A, or -1 if x is not in A.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 6) == -1",
        "num_ids": 1699,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Create a list of all possible sublists\n    sublists = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sublists.append([arr[i], arr[j]])\n\n    # Calculate the sum of products of all sublists\n    subarray_prod = 1\n    for sublist in sublists:\n        subarray_prod *= sublist[0] * sublist[1]\n\n    return subarray_prod",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,4,5]) == 120 ",
        "num_ids": 2628,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def set_middle_bits(n):  \n    # Define the mask to toggle the bits\n    mask = 1 << 2  \n    \n    # Toggle the first and last bits\n    n &= ~(mask - 1)\n    \n    return n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 3226,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo, hi = 0, len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo",
        "test": "assert left_insertion([1], 1) == 0",
        "num_ids": 1832,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import re\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # Define regex pattern to check whether the string starts with a vowel or not\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    \n    # Use re.match() function to check if the string starts with a vowel\n    match = re.match(regex, string)\n    \n    # Check if the match is found or not\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_str('WORLD') == False",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 0:\n        return 1\n\n    return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(4) == 24, \"The correct sum of 4 is 24, but it is \" + str(geometric_sum(4)) + \".\"",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    This function finds the index of the smallest triangular number with n digits.\n    '''\n    # base case\n    if n == 0:\n        return 0\n    \n    # recursive case\n    else:\n        # initialize variables\n        smallest_triangular = math.pow(10, n-1)  # smallest triangular number\n        current_num = smallest_triangular\n        \n        # loop until current number is smaller than smallest triangular\n        while current_num < smallest_triangular:\n            current_num *= 10  # increase current number by one digit\n        \n        # return the index of the current number\n        return int(str(current_num)[n-1])",
        "test": "assert find_Index(1) == 1, \"The correct index is 1\"",
        "num_ids": 2016,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result",
        "test": "assert tuple_to_dict(('a', 1, 'b', 2, 'c', 3, 'd', 4, 'e', 5)) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 1790,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    # create a dictionary to store the characters in the string\n    char_dict = {}\n    \n    # loop through each character in the string\n    for char in s:\n        # if the character is already in the dictionary, return False\n        if char in char_dict:\n            return False\n        # otherwise, add the character to the dictionary\n        else:\n            char_dict[char] = True\n            \n    # if all characters are present in the dictionary, return True\n    return True",
        "test": "assert all_Characters_Same(\"\") == True",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron.\n    '''\n    return 0.5 * side * side",
        "test": "assert area_tetrahedron(1) == 0.5",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-m:] + list[:-m]",
        "test": "assert rotate_right([1], 1) == [1]",
        "num_ids": 1681,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    else:\n        return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: str(x).isdigit(), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(1234, 1491) # True",
        "num_ids": 2109,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a",
        "test": "assert sector_area(6,30) is not None, \"The area of a sector with radius 6 and angle 30 degrees is not correct.\"",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    lcs = \"\"\n    i = m\n    j = n\n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs",
        "test": "assert lcs_of_three(\"\", \"\", \"\") == \"\"",
        "num_ids": 3852,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    # Define the regex pattern for words with capital letters\n    pattern = re.compile(r'\\b\\w[A-Z][a-z]+\\b')\n    \n    # Replace the pattern with spaces and return the result\n    return pattern.sub(' ', str1)",
        "test": "assert capital_words_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Convert all the strings in the list to integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the integers in ascending order\n    nums_int.sort()\n\n    # Convert the sorted integers back to strings and return them\n    return [str(num) for num in nums_int]",
        "test": "assert sort_numeric_strings(['4', '2', '3', '1', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list",
        "test": "assert add_tuple([1,2,3],[4,5,6]) == [5, 7, 9]",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def check_min_heap_helper(arr, i):\n    # base case\n    if i == 0:\n        return True\n    # if left child is smaller than root node, then it cannot be a min heap\n    if i * 2 + 1 < len(arr) and arr[i] < arr[i * 2 + 1]:\n        return False\n    # otherwise, if right child is smaller than root node, then it is a min heap\n    elif i * 2 + 2 < len(arr) and arr[i] < arr[i * 2 + 2]:\n        return True\n    # recursively check left and right child\n    else:\n        return check_min_heap_helper(arr, i * 2 + 1) or check_min_heap_helper(arr, i * 2 + 2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)",
        "test": "assert check_min_heap_helper([1, 3, 4, 6, 5], 0) == True",
        "num_ids": 2535,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    def fibonacci(n): \n        \"\"\"\n        Compute the n-th fibonacci number.\n        \"\"\"\n        if n == 0: \n            return 0\n        elif n == 1: \n            return 1\n        else: \n            return fibonacci(n-1) + fibonacci(n-2)\n\n    def is_prime(n): \n        \"\"\"\n        Check if a number is prime.\n        \"\"\"\n        if n <= 1: \n            return False\n        elif n <= 3: \n            return True\n        elif n % 2 == 0 or n % 3 == 0: \n            return False\n        i = 5\n        while i * i <= n: \n            if n % i == 0 or n % (i + 2) == 0: \n                return False\n            i += 6\n        return True\n\n    jacobsthal_numbers = []\n    for i in range(n+1):\n        if is_prime(i): \n            jacobsthal_numbers.append(fibonacci(i))\n        else: \n            jacobsthal_numbers.append(i)\n    return jacobsthal_numbers[-1]\n",
        "test": "assert jacobsthal_num(0) == 0, \"Jacobsthal number 0 should be 0\"",
        "num_ids": 3796,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the frequency of each record in the test list\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    # Sort the dictionary by values in descending order\n    sorted_freq = dict(sorted(freq.items(), key=lambda item: item[1], reverse=True))\n\n    # Create a new list to store the minimum k records\n    result = []\n    for item in sorted_freq:\n        if len(result) < K:\n            result.append(item)\n\n    return result",
        "test": "assert min_k([], 1) == []",
        "num_ids": 2570,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def extract_index_list(l1, l2, l3):\n    # create a set of all elements in l1, l2, and l3\n    common_elements = set(l1).intersection(set(l2)).intersection(set(l3))\n    # convert the set to a list, sorted in ascending order\n    return sorted(list(common_elements))",
        "test": "assert extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5], [2, 3, 4, 5]) == [2, 3, 4, 5]",
        "num_ids": 2348,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def second_smallest(numbers):\n    return numbers[1]",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2, \"Test 1: Second smallest is 2.\"",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b+'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"aba\") == True",
        "num_ids": 2278,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs(['a', 'b', 'c']) == 0 # Correct",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary\n    sublist_counts = {}\n\n    # Loop through each element in the list\n    for element in list1:\n\n        # If the element is a list, recursively call the function on it\n        if isinstance(element, list):\n            sublist_counts.update(unique_sublists(element))\n\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            sublist_counts[element] = 1\n\n    return sublist_counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2161,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False",
        "test": "assert is_decimal(\"123,456\") == False",
        "num_ids": 2036,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a Python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    # Create a dictionary to store unique elements\n    unique_dict = {}\n\n    # Traverse through the list and add each element to the dictionary\n    for num in arr:\n        if num not in unique_dict:\n            unique_dict[num] = 1\n\n    # Check if all elements are unique\n    if len(unique_dict) == len(arr):\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 3, 4, 4, 5, 5, 6]) == False",
        "num_ids": 1629,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(2) == False",
        "num_ids": 1782,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 3, 5, 7, 9], 4) == 2, \"The minimum difference between any two elements in a given array is not correct.\"",
        "num_ids": 2301,
        "indeed": true
    },
    {
        "number": 764,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str.replace('0', ''))",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n\n    if n < 1:\n        return \"Invalid input.\"\n    elif n == 1:\n        return 0\n    elif n % 2 == 0:\n        return is_polite(n//2) + 1\n    else:\n        return is_polite(3*n//2 - 1)\n",
        "test": "assert is_polite(2) == True, \"The nth polite number is not equal to 2\"",
        "num_ids": 2376,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([]) == []",
        "num_ids": 1474,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    # Create an empty dictionary\n    pairs_count = {}\n    \n    # Loop through the list of numbers\n    for num in arr:\n        # Check if the current number is present in the dictionary\n        if num in pairs_count:\n            # Increment the count of pairs in the dictionary\n            pairs_count[num] += 1\n        else:\n            # Add the current number to the dictionary with a count of 1\n            pairs_count[num] = 1\n    \n    # Loop through the dictionary and return the count of pairs whose sum is equal to the given sum\n    count = 0\n    for num, count_ in pairs_count.items():\n        if count_ == sum:\n            count += 1\n    \n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 0",
        "num_ids": 1538,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([],[]) == []",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each odd number starting from 1\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the current odd number\n        fourth_power = i*i*i*i\n        \n        # Add the fourth power to the sum variable\n        sum += fourth_power\n    \n    # Return the sum variable as the answer\n    return sum",
        "test": "assert odd_num_sum(15) == 435",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    return len(stack) == 0",
        "test": "assert check_expression(\"()\") == True # the empty string is balanced",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def remove_length(test_str, K):\n    '''\n    Function to remove all the words with K length in the given string.\n    '''\n    test_str = test_str.replace(\" \", \"\")\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    new_str = \" \".join(new_words)\n    return new_str",
        "test": "assert remove_length(\"hello world\", 3) == \"helloworld\"",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function will find the occurrence and position of the substrings within a string.\n    It will return None if there is no match.\n    '''\n    # Define the pattern to match the substrings\n    pattern = re.compile(pattern)\n    # Find all occurrences of the pattern in the text\n    matches = pattern.finditer(text)\n    # Create a list of tuples containing the match object and its position\n    matches_list = [(match.start(), match.end()) for match in matches]\n    # Return None if there is no match\n    if not matches_list:\n        return None\n    else:\n        # Sort the matches_list in ascending order based on the start position\n        matches_list.sort(key=lambda x: x[0])\n        # Return the match object and its position\n        return matches_list[0][0], matches_list[0][1]",
        "test": "assert occurance_substring(\"hello world\", \"l\") is not None",
        "num_ids": 2110,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if any(num % 2 == 1 for num in nums[i:i+2]):\n                return True\n    return False",
        "test": "assert odd_position([2, 4, 6, 8, 10]) == False",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"hello world\") == 3 # 123",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_set = set()\n    for num in arr:\n        non_repeated_set.add(num)\n    return sum(non_repeated_set)",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1850,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def pack_consecutive_duplicates(lst):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublists = []\n    for item in lst:\n        if not sublists or item!= sublists[-1]:\n            sublists.append(item)\n        else:\n            sublists[-1].append(item)\n    return sublists",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2527,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        sublists[item] = sublists.get(item, 0) + 1\n    return sublists\n",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 2476,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty list to store the combinations\n    result = []\n\n    # Iterate over the test_list\n    for i in range(len(test_list) - 1):\n        # Calculate the sum of the current test_list\n        current_sum = sum(test_list[i:i+2])\n\n        # Check if the current sum is already in the result list\n        if current_sum in result:\n            # If it is, add the current test_list as a sub-list\n            result.append(test_list[i:i+2])\n\n        # Check if the current sum is less than the sum of the previous test_list\n        elif current_sum < sum(test_list[i-1:i+1]):\n            # If it is, add the current test_list as a sub-list\n            result.append(test_list[i:i+2])\n\n    # Return the result list\n    return result",
        "test": "assert find_combinations([1, 2, 3, 4, 5]) == []",
        "num_ids": 3607,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(5) == 2, \"count_divisors(5) should return 2\"",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize variables\n    total_sum = 0\n\n    # Loop through each element in the array\n    for num in arr:\n        # Check if the number is odd and its length is odd\n        if num % 2 == 1 and len(str(num)) % 2 == 1:\n            # Check if the length of the current subarray is odd\n            if len(str(num)) % 2 == 1:\n                # Add the current subarray to the total sum\n                total_sum += sum(int(x) for x in str(num))\n\n    # Return the total sum\n    return total_sum",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6]) == 9",
        "num_ids": 2349,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert a given RGB color to HSV (hue, saturation, and value) color model.\n    '''\n    # Calculate the min, max, and range of each color channel\n    min_r, max_r = min(r, g, b), max(r, g, b)\n    delta_r = max_r - min_r\n    \n    min_g, max_g = min(g, b), max(g, b)\n    delta_g = max_g - min_g\n    \n    min_b, max_b = min(b, r), max(b, r)\n    delta_b = max_b - min_b\n    \n    # Calculate the hue, saturation, and value of each color channel\n    if delta_r == 0:\n        hue = 0\n    elif delta_g == 0:\n        hue = delta_b / delta_r * 60\n    elif delta_b == 0:\n        hue = (1/3) * (delta_g + delta_r)\n    else:\n        if delta_g < delta_b:\n            delta_g, delta_b = delta_b, delta_g\n        i = delta_g.index(min_g)\n        hue = (i * 60) / delta_r + (delta_g - min_g) / 2\n        if hue < 0:\n            hue += 360\n    \n    if delta_r == 0:\n        saturation = 0\n    else:\n        saturation = delta_r / (1 - abs((2 * delta_g) - delta_b))\n    \n    if delta_b == 0:\n        value = delta_g\n    else:\n        value = (1 - abs((2 * delta_r) - delta_g)) / (1 - abs((2 * delta_b) - delta_r))\n    \n    # Round the hue and saturation to the nearest whole number\n    hue = round(hue)\n    saturation = round(saturation)\n    value = round(value)\n    \n    # Construct the HSV (hue, saturation, and value) tuple\n    return (hue, saturation, value)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)",
        "num_ids": 5409,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def mul_even_odd(list1):\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    return even_product * odd_product",
        "test": "assert mul_even_odd([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Convert the tuple string to a tuple\n    tuple_str = tuple(test_str.split(','))\n    \n    # Convert the tuple to an integer tuple\n    integer_tuple = tuple([int(num) for num in tuple_str])\n\n    return integer_tuple",
        "test": "assert tuple_str_int('123') == (123,)",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index of the first occurrence of x in a sorted list a\n    lo = 0\n    hi = len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    # x was not found in a sorted list, so return the index of the insertion point after insertion\n    lo = 0\n    hi = len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return hi + 1",
        "test": "assert right_insertion([1], 1) == 0  # single element list",
        "num_ids": 1703,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'a{3}', text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('aaba') == False",
        "num_ids": 2072,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])",
        "test": "assert new_tuple([], 'hello') == ('hello',)",
        "num_ids": 1144,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = [i for i in range(len(nums)) if nums[i] % 2 == 0]\n    for i in range(len(even_index)):\n        if nums[even_index[i]] % 2 == 0:\n            return True\n    return False",
        "test": "assert even_position([2, 4, 6, 8]) == True, \"The list [2, 4, 6, 8] should have an even position.\"",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from a given tuple.\n    '''\n\n    # Initialize a variable to keep track of the number of nested tuples\n    count = 0\n\n    # Iterate through each element in the tuple\n    for elem in test_tup:\n        # If the element is a tuple, recursively call the remove_nested function on that tuple\n        if isinstance(elem, tuple):\n            elem = remove_nested(elem)\n            # If the nested tuple is empty, remove it\n            if len(elem) == 0:\n                test_tup.remove(elem)\n            # Otherwise, increment the count by 1\n            else:\n                count += 1\n\n    # If the count is 0, there are no nested tuples in the tuple\n    if count == 0:\n        return test_tup\n    # Otherwise, return the modified tuple\n    else:\n        return test_tup",
        "test": "assert remove_nested([]) == []",
        "num_ids": 2423,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_list(input_list):\n    '''\n    Count the number of lists in a given number of lists.\n\n    Args:\n    input_list: A list of lists or a list of integers.\n\n    Returns:\n    An integer representing the number of lists in the input list.\n    '''\n    if isinstance(input_list, list):\n        return len(input_list)\n    elif isinstance(input_list, int):\n        return 1\n    else:\n        raise ValueError(\"Input must be a list or an integer.\")",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 1051,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def last(arr, x):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1  # Element not found",
        "test": "assert last([1,2,3,4,5],3)==2",
        "num_ids": 1292,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return bool(re.match(pattern, text))\n\ntext = 'abcdab'\nprint(text_starta_endb(text))  # Output: True",
        "test": "assert text_starta_endb(\"apple\") == False # There's a letter 'a' followed by nothing.",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total",
        "test": "assert return_sum({'apple': 10, 'banana': 5, 'cherry': 8}) == 23",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n + sum_odd(n-1)",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15, \"The sum of the array [1, 2, 3, 4, 5] should be 15\"",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # first, we need to find the number of bits to be shifted\n    shift = 32 - d\n\n    # then, we can left shift n by the number of bits shifted\n    left_shifted = n << shift\n\n    # finally, we can right shift the left-shifted number by the number of bits shifted\n    right_shifted = left_shifted >> shift\n\n    return right_shifted",
        "test": "assert left_rotate(0,3) == 0",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)",
        "test": "assert remove_all_spaces(\"   Hello   World  \") == \"HelloWorld\"",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    # Create an empty list to store the count of equal numbers\n    count_list = []\n    \n    # Check if all three values are same\n    if x == y == z:\n        count_list.append(x)\n    \n    # Check if one of the values is same\n    elif x == y or x == z or y == z:\n        count_list.append(x)\n    \n    # Check if both the values are same\n    elif x == y or x == z or y == z or x == z:\n        count_list.append(x)\n    \n    # If all values are same\n    else:\n        count_list.append(x)\n        count_list.append(y)\n        count_list.append(z)\n    \n    # Return the count of equal numbers\n    return len(count_list)",
        "test": "assert test_three_equal(1,1,1) == 1",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def count_rotation(arr):\n    # Initialize two variables to keep track of the number of rotations\n    rotations = 0\n    max_rotations = 0\n\n    # Loop through the array and keep track of the maximum number of rotations\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            rotations += 1\n        else:\n            max_rotations = max(max_rotations, rotations)\n            rotations = 1\n\n    # Keep track of the final number of rotations\n    max_rotations = max(max_rotations, rotations)\n\n    return max_rotations",
        "test": "assert count_rotation([]) == 0",
        "num_ids": 1861,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    :param n: The number to check.\n    :return: True if the number is a perfect square, False otherwise.\n    \"\"\"\n\n    # Initialize the answer variable with True\n    answer = True\n\n    # Initialize the variable to store the square root of the number\n    square_root = int(n ** 0.5)\n\n    # If the square root of the number is not an integer, the number is not a perfect square\n    if square_root!= int(square_root):\n        answer = False\n\n    # If the square root of the number is an integer and the square root of the square root is equal to the square root of the number, the number is a perfect square\n    else:\n        square_root_square = square_root ** 2\n        if square_root_square == n:\n            answer = True\n\n    return answer",
        "test": "assert is_perfect_square(4) == True, \"4 is a perfect square\"",
        "num_ids": 1705,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0",
        "test": "assert is_product_even([1, 2, 3, 4]) is True  # arr = [1, 2, 3, 4] * 2 = [2, 4, 6, 8]",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in which the sum of all elements is the highest.\n    '''\n    # Initialize variables to keep track of the current sum and the index of the maximum element\n    current_sum = 0\n    max_index = 0\n    \n    # Iterate over each list in the input list\n    for i in range(len(lists)):\n        # Iterate over each element in the list and add it to the current sum\n        current_sum += lists[i][0]\n        \n        # If the current sum is greater than the current maximum sum, update the maximum index and sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n    \n    # Return the list in which the sum of all elements is the highest\n    return lists[max_index]",
        "test": "assert max_sum_list([[-1, -2, -3], [4, 5, 6], [7, 8, 9]]) == [9, 8, 7]",
        "num_ids": 2309,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 1\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 1691,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0: #check if the number is odd\n            return num #return the first odd number in the list\n    return None #return None if no odd numbers are found in the list",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return any(test_tup[i] == K for i in range(len(test_tup)))\n",
        "test": "assert check_K((), 1) == False, \"(((), ())) should not be in the set of tuples containing 1\"",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True",
        "test": "assert check_smaller((1, 2, 3), (3, 2, 4)) # False",
        "num_ids": 1581,
        "indeed": false
    }
]