[
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    # get the lengths of the two lists\n    len_1 = len(test_tup1)\n    len_2 = len(test_tup2)\n\n    # create a set to store the common elements between the two lists\n    common_elements = set()\n\n    # iterate over the first list to find the common elements\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.add(elem)\n\n    # return the set of common elements\n    return common_elements\n",
        "test": "assert similar_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) # True",
        "num_ids": 990
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_not_prime(3) == True",
        "num_ids": 744
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import heapq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a min-heap (priority queue)\n    min_heap = []\n    # Loop through the given list of numbers and add each number to the heap\n    for num in nums:\n        heapq.heappush(min_heap, -num)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the largest n integers from the heap\n    return [num for num in min_heap]",
        "test": "assert heap_queue_largest([],0) == []",
        "num_ids": 794
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    # Get the length of the two numbers\n    n1 = len(str(x))\n    n2 = len(str(x))\n    # If the two numbers have the same length, they can differ at one bit position only\n    if n1 == n2:\n        # Calculate the bitwise XOR of the two numbers\n        xor_result = bin(x ^ x)\n        # Convert the XOR result to decimal number and get the number of \"1\" bits\n        count = int(xor_result.count('1'))\n        # If the XOR result is 0, the numbers differ at one bit position only\n        if count == 0:\n            return True\n        # If the XOR result is 1, the numbers don't differ at one bit position only\n        else:\n            return False\n    # If the two numbers have different lengths, they cannot differ at one bit position only\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(1) == True, \"Test 1: Input 1 should return True\"",
        "num_ids": 771
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "test": "assert find_char_long(\"hello world\") == ['hello', 'world']",
        "num_ids": 724
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3]) == [1, 4, 9]",
        "num_ids": 548
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Rotations(str): \n    # Create a dictionary to store the frequency of characters\n    char_freq = {}\n\n    # Iterate over each character in the string\n    for char in str:\n        # If the character is already in the dictionary, increment its frequency count\n        if char in char_freq:\n            char_freq[char] += 1\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            char_freq[char] = 1\n\n    # Find the minimum frequency count to get the same string\n    min_freq = min(char_freq.values())\n\n    # Find the number of rotations required to get the same string\n    rotations = 0\n    while min_freq > 0:\n        # Increment the frequency count by 1\n        char_freq[str[rotations]] += 1\n        min_freq -= 1\n        rotations += 1\n\n    # Return the number of rotations required to get the same string\n    return rotations",
        "test": "assert find_Rotations('abc') == 1",
        "num_ids": 837
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        s = s[:s.index(ch)] + s[s.index(ch)+1:]\n    return s",
        "test": "assert remove_Occ('hello world', 'o') == 'he world'",
        "num_ids": 548
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a list to store the column sums\n    sums = [0] * cols\n\n    # Loop through each row in the matrix\n    for i in range(rows):\n        # Add the row sum to the list of column sums\n        sums[i % cols] += M[i][0]\n\n    # Loop through each column and swap the rows with the smallest sum\n    for i in range(1, cols):\n        min_sum = float('inf')\n        min_index = -1\n\n        # Loop through each row with a smaller sum\n        for j in range(rows):\n            if sums[j] < min_sum:\n                min_sum = sums[j]\n                min_index = j\n\n        # Swap the row with the smallest sum\n        M[0][i], M[min_index][i] = M[min_index][i], M[0][i]\n\n    # Sort the remaining rows in ascending order\n    for i in range(1, rows):\n        for j in range(cols-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n\n    return M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1688
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 317
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?=[a-z])|[A-Z](?=[A-Z][a-z])|[A-Z]|[_]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 713
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 269
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # initialize an empty list to store the modified string\n    modified_string = []\n\n    # iterate over each character in the second string\n    for char in string:\n        # check if the character is present in the first string\n        if char in string:\n            # remove the character from the modified string\n            modified_string.remove(char)\n\n    # return the modified string\n    return modified_string",
        "test": "assert str_to_list(\"\") == []",
        "num_ids": 819
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store the unique elements in the array\n    unique_elements = set()\n\n    # iterate over the array and add each element to the set\n    for num in arraynums:\n        unique_elements.add(num)\n\n    # if there is at least one unique element in the set, the array contains a duplicate\n    return len(unique_elements) > 1",
        "test": "assert test_duplicate([1, 2, 3, 4, 4, 3, 2, 1]) == True",
        "num_ids": 831
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x % 10 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(2) == False",
        "num_ids": 639
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    # Check if the number is one less than twice its reverse\n    if len(num_str) % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert rev(5) is False, \"The reverse of 5 is not equal to 5\"",
        "num_ids": 697
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_Max_Num(arr):\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "test": "assert find_Max_Num([9, 1, 5, 4, 7]) == 9, \"The maximum number formed with the given list of digits is 9.\"",
        "num_ids": 683
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(1, -2) == True",
        "num_ids": 627
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Base case: n is 1\n    if n == 1:\n        return True\n    \n    # Check if n is an even number\n    if n % 2 == 0:\n        # Base case: n is even\n        if n == 2:\n            return True\n        \n        # Check if n is an odd number\n        if n == 3:\n            return False\n        \n        # Check if n is divisible by 2 and n-1 is also divisible by 2\n        if n % 2 == 0 and n-1 % 2 == 0:\n            return True\n        \n        # Check if n is divisible by 3 and n-1 is also divisible by 3\n        if n % 3 == 0 and n-1 % 3 == 0:\n            return True\n        \n        # Recursive call to check if n is divisible by 2 and n-1 is also divisible by 2\n        return is_octagonal(n-2)\n    \n    # Recursive call to check if n is divisible by 3 and n-1 is also divisible by 3\n    return is_octagonal(n-3)",
        "test": "assert is_octagonal(1) == True",
        "num_ids": 904
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string s as input and returns the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of each substring\n    substring_count = defaultdict(int)\n    \n    # Loop through each character in the string\n    for char in s:\n        # Convert the character to an integer and add it to the count of that substring\n        substring_count[len(char)] += 1\n    \n    # Return the count of substrings with the sum of digits equal to their length\n    return len(substring_count)",
        "test": "assert count_Substrings(\"\") == 0, \"The function should return 0 for an empty string\"",
        "num_ids": 972
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def smallest_num(xs):\n    '''\n    Find the smallest number in a list of numbers.\n    \n    Parameters:\n    xs (list): A list of numbers.\n    \n    Returns:\n    The smallest number in the list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 533
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return 0\n    \n    max_diff = test_list[1] - test_list[0]\n    \n    for i in range(2, len(test_list)):\n        if test_list[i] - test_list[i-1] > max_diff:\n            max_diff = test_list[i] - test_list[i-1]\n            \n    return max_diff",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 1",
        "num_ids": 793
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n",
        "test": "assert subject_marks([]) == []",
        "num_ids": 656
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1,2,3,4,5]) == 15",
        "num_ids": 1533
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5, \"The function should return 5 for the input list [1, 2, 3, 4, 5]\"",
        "num_ids": 431
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n\n    ways = 0\n    for i in range(1, n+1):\n        ways += bell_number(n-i)\n\n    return ways",
        "test": "assert bell_number(0) == 1",
        "num_ids": 823
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n\n    prev = A[0]\n    for i in range(1, len(A)):\n        if A[i] < prev:\n            return False\n        prev = A[i]\n\n    return True",
        "test": "assert is_Monotonic([3, 2, 4, 5, 1]) == False",
        "num_ids": 827
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Returns True if the list l contains all elements of the given sublist s,\n    otherwise returns False.\n    '''\n    return all(elem in s for elem in l)",
        "test": "assert is_sublist([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 543
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Initialize a variable to keep track of whether all the tuples have equal length or not\n    is_equal = True\n\n    # Traverse through all the tuples and check if their lengths are equal or not\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                is_equal = False\n                break\n\n    # Return the value of is_equal\n    return is_equal",
        "test": "assert find_equal_tuple([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 659
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    for i in range(n - 1):\n        min_idx = i\n        for j in range(i + 1, n):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums",
        "test": "assert comb_sort([10, 25, 5, 7, 9, 23, 15]) == [5, 7, 9, 10, 15, 23, 25]",
        "num_ids": 1282
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1: \n        return True\n    else:\n        for i in range(2,int(n**0.5)+1): \n            if n%i == 0 and n//i == i: \n                return True\n        return False",
        "test": "assert dif_Square(1) == True",
        "num_ids": 680
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check if colors follow the sequence given in the patterns array.\n\n    Parameters:\n    colors (list): A list of colors (strings) to be checked.\n    patterns (list): A list of strings representing the sequence of colors.\n\n    Returns:\n    bool: True if the colors follow the sequence, False otherwise.\n    \"\"\"\n    # Check if the length of the patterns is equal to the length of the colors\n    if len(patterns)!= len(colors):\n        return False\n    \n    # Check if the patterns array contains the same colors as the colors list\n    pattern_colors = set(patterns)\n    color_set = set(colors)\n    if pattern_colors!= color_set:\n        return False\n    \n    return True",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], [['red', 'green'], ['blue', 'green']]) == False",
        "num_ids": 1033
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_with_all_elements_divisible_by_k = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            tuples_with_all_elements_divisible_by_k.append(tup)\n    return tuples_with_all_elements_divisible_by_k",
        "test": "assert find_tuples([('apple', 1), ('banana', 2), ('cherry', 3), ('elderberry', 4)], 4) == []",
        "num_ids": 1026
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False",
        "test": "assert is_Diff(3) == False, \"Test 1: Divisible by 11\"",
        "num_ids": 407
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1",
        "test": "assert word_len(\"hello world\") == 13, \"word_len should return 13\"",
        "num_ids": 515
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Find the value of pi\n    pi = 3.141592653589793\n    # Use the formula for the nth tetrahedral number\n    tetrahedral_number = (n * (n + 1) * (2 * n + 1)) // 6\n    \n    # Return the result\n    return tetrahedral_number",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 817
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * r**3",
        "test": "assert volume_sphere(1) == 3.141592653589793",
        "num_ids": 565
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # initializing the variables\n    max_value = 25 # maximum ASCII value of a character\n    char_count = 0 # count the number of times a character appears in the string\n    final_char = '' # initialize the final character as an empty string\n\n    # iterating through each character of the string\n    for char in strr:\n\n        # getting the ASCII value of the current character\n        ascii_value = ord(char)\n\n        # adding the ASCII value of the current character to the char_count variable\n        char_count += ascii_value\n\n        # checking if the ASCII value of the current character is greater than or equal to the maximum value\n        if ascii_value >= max_value:\n\n            # adding the final character to the string\n            final_char = chr(ascii_value)\n\n            # updating the max_value variable\n            max_value = ascii_value\n\n    # returning the final character\n    return final_char",
        "test": "assert get_Char(\"abcdefghijklmnopqrstuvwxyz\") == \"z\"",
        "num_ids": 776
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [True] * (n+1)\n    sequence[1] = False\n    sequence[2] = False\n\n    for i in range(3, n+1):\n        sequence[i] = sequence[i-1] or sequence[i-2]\n\n    return sequence[n]",
        "test": "assert sequence(10) == 0",
        "num_ids": 647
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    volume = math.pi * r * r\n    return volume",
        "test": "assert surfacearea_sphere(5) == 78.53981633974483, \"The surface area of a sphere with radius 5 should be approximately 78.54.\"",
        "num_ids": 516
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    if n == 1:\n        return 1\n    \n    # Starting from n-2, we will divide the number into three parts and find the sum of all the parts\n    sum = 0\n    for i in range(n-2):\n        sum += i*i\n    \n    # Now we will find the sum of the remaining two parts\n    remainder = sum % 6\n    \n    # If the remainder is 0, then the sum of the parts is evenly divisible by 6\n    if remainder == 0:\n        return n\n    \n    # If the remainder is not 0, then the sum of the parts is not evenly divisible by 6\n    return n + remainder",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 908
    },
    {
        "number": 87,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2,dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \n    Parameters:\n    dict1 (dict): First dictionary to merge.\n    dict2 (dict): Second dictionary to merge.\n    dict3 (dict): Third dictionary to merge.\n    \n    Returns:\n    dict: The merged dictionary.\n    \"\"\"\n    merged = dict1.copy()\n    for key, value in dict2.items():\n        merged[key] = value\n    for key, value in dict3.items():\n        merged[key] = value\n    return merged",
        "test": "assert merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 1171
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict",
        "test": "assert freq_count([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 696
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    min_num = None\n    for i in range(1, N+1):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = i\n    return min_num",
        "test": "assert closest_num(1) == 1",
        "num_ids": 626
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "test": "assert len_log([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"]) == 6",
        "num_ids": 549
    },
    {
        "number": 91,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"Hello world\", \"he\") == False, \"Incorrect output for find_substring('Hello world', 'he')\"",
        "num_ids": 617
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_undulating(n): \n    '''\n    Function to check whether a number is undulating or not.\n\n    Parameters:\n    n (int): Number to be checked.\n\n    Returns:\n    bool: True if n is undulating, False otherwise.\n    '''\n\n    # Check if the number is negative or zero\n    if n < 0:\n        return False\n\n    # Traverse the number from the second digit to the last digit\n    for i in range(2, len(str(n))):\n        # Check if the number is divisible by the current digit\n        if n % (10**i) == 0:\n            return False\n\n    # If the number is not divisible by any digit, it is undulating\n    return True",
        "test": "assert is_undulating(10) is True",
        "num_ids": 504
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,0) == 1, \"Incorrect result\"",
        "num_ids": 334
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def index_minimum(test_list):\n    return min(test_list, key=lambda x: x[1])",
        "test": "assert index_minimum([('apple', 3), ('banana', 2), ('orange', 1), ('kiwi', 5), ('grape', 4)]) == ('orange', 1)",
        "num_ids": 839
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):\n    # Initialize minimum length to infinity\n    min_length = float('inf')\n    \n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Check if current sublist length is smaller than the minimum\n        if len(sublist) < min_length:\n            # Update minimum length to current sublist length\n            min_length = len(sublist)\n    \n    # Return the minimum length\n    return min_length",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 629
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + divisor(n // 2)\n    else:\n        return n - 1 + divisor(n // 2)",
        "test": "assert divisor(27) == 6",
        "num_ids": 490
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Create an empty dictionary to store frequency\n    freq_dict = {}\n\n    # Iterate over each element in the flattened list\n    for item in flattened_list:\n\n        # If the element already exists as a key in the dictionary, increment its value\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the element is not already in the dictionary, add it with a value of 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict",
        "test": "assert frequency_lists([1, 2, [3, 4], 5]) == {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1}",
        "num_ids": 1171
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)",
        "test": "assert multiply_num([5, 4, 3]) == 60",
        "num_ids": 451
    },
    {
        "number": 99,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str",
        "test": "assert decimal_to_binary(15) == '1111'",
        "num_ids": 448
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def next_smallest_palindrome(num):\n    # Check if the input number is negative or 0\n    if num < 0 or num == 0:\n        return None\n\n    # Initialize the smallest palindrome to the current input number\n    smallest_palindrome = num\n\n    # Loop through the numbers from 2 to the square root of the input number\n    for i in range(2, int(num**0.5) + 1):\n        # Check if the input number is a palindrome\n        if num % i == 0 and num % i == num // i:\n            # Update the smallest palindrome if it is smaller than the current palindrome\n            if smallest_palindrome > i:\n                smallest_palindrome = i\n\n    # Return the next smallest palindrome\n    return smallest_palindrome",
        "test": "assert next_smallest_palindrome(123) == 123",
        "num_ids": 1475
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k <= 0 or k > len(arr):\n        return None\n    \n    return arr[k-1]",
        "test": "assert kth_element([1,2,3,4,5], 3) == 3",
        "num_ids": 654
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 470
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n\n    else:\n        a = eulerian_num(n-1, m-1)\n        return a + n-1\n",
        "test": "assert eulerian_num(10, 20) == 120",
        "num_ids": 887
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n\n    # Initialize empty list to store sorted sublists\n    sorted_sublists = []\n\n    # Loop over each sublist in the input list\n    for sublist in input_list:\n\n        # Initialize empty list to store sublist elements\n        sublist_sorted = []\n\n        # Loop over each element in the sublist\n        for element in sublist:\n\n            # Check if the element has already been added to the sublist\n            if element not in sublist_sorted:\n\n                # Append the element to the sorted sublist\n                sublist_sorted.append(element)\n\n        # Append the sorted sublist to the sorted_sublists list\n        sorted_sublists.append(sublist_sorted)\n\n    return sorted_sublists",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"elephant\", \"fox\"], [\"grape\", \"kiwi\", \"lemon\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"elephant\", \"fox\"], [\"grape\", \"kiwi\", \"lemon\"]]",
        "num_ids": 1147
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count(lst):\n    true_count = 0\n    for item in lst:\n        if item == True:\n            true_count += 1\n    return true_count",
        "test": "assert count([]) == 0",
        "num_ids": 404
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 563
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n        k += 1\n\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list",
        "test": "assert merge_sorted_list([1,2,3],[4,5,6],[7,8,9],[10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]",
        "num_ids": 1599
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0 \n    for i in range(n): \n        s = s[1:] + s[0] \n    for i in range(len(s)): \n        if int(s[i]) % 2!= 0: \n            count += 1 \n    return count ",
        "test": "assert odd_Equivalent(\"1100\", 3) == 2 # test 2",
        "num_ids": 975
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def common_in_nested_lists(nestedlist):\n    # Initialize an empty set to store common elements\n    common_set = set()\n\n    # Iterate through each list in the nested list and add it to the common set\n    for sublist in nestedlist:\n        for element in sublist:\n            common_set.add(element)\n\n    # Convert the set to a list and return it\n    return list(common_set)",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1012
    },
    {
        "number": 113,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    try:\n        int_value = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"abc\") is False",
        "num_ids": 359
    },
    {
        "number": 115,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Initialize an empty list to store the dictionaries that are empty\n    empty_dicts = []\n\n    # Iterate through each dictionary in the list\n    for dictionary in list1:\n\n        # Check if the dictionary is empty\n        if len(dictionary.keys()) == 0:\n            # If the dictionary is empty, add it to the empty_dicts list\n            empty_dicts.append(dictionary)\n\n    # If all dictionaries are empty, return True\n    if len(empty_dicts) == len(list1):\n        return True\n    else:\n        return False",
        "test": "assert empty_dit([]) == True",
        "num_ids": 478
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(sum(nums))",
        "test": "assert tuple_to_int(()) == 0",
        "num_ids": 462
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    converted_list = []\n    for row in test_list:\n        for element in row:\n            try:\n                converted_list.append(float(element))\n            except ValueError:\n                continue\n    return converted_list",
        "test": "assert list_to_float([[1,2,3], [4,5,6], [7,8,9]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]",
        "num_ids": 812
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [word.strip() for word in string.split()]",
        "test": "assert string_to_list('hello world') == ['hello', 'world']",
        "num_ids": 328
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def search(arr):\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # return the element with the highest frequency\n    return max(freq, key=freq.get)\n",
        "test": "assert search([1, 2, 3, 4, 4, 5]) == 4",
        "num_ids": 717
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Define a function to find the absolute value of a number\n    def abs_val(num):\n        return abs(num)\n\n    # Initialize a variable to store the maximum absolute product found so far\n    max_product = float('-inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1) - 1):\n        # Calculate the absolute value of the difference between the first and second numbers in the tuple\n        diff = abs_val(list1[i+1][0] - list1[i][0])\n        # Update the maximum absolute product if necessary\n        if diff > max_product:\n            max_product = diff\n\n    # Return the maximum absolute product found\n    return max_product",
        "test": "assert max_product_tuple([(-1, 2), (-3, -5), (4, 5)]) == (15, 20, 10)",
        "num_ids": 1207
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for i in range(1, limit+1):\n        for j in range(1, i):\n            if i % j == 0 and i + j == limit:\n                result += i + j\n    return result",
        "test": "assert amicable_numbers_sum(20) == 4162",
        "num_ids": 1117
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)",
        "test": "assert angle_complex(1,0) == 0",
        "num_ids": 577
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize two variables - one to count the number of 0s and another to count the number of 1s\n    zero_count = 0\n    one_count = 0\n\n    # Iterate through the string and count the number of 0s and 1s in each sub-string\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count += 1\n        elif string[i] == '1':\n            one_count += 1\n\n    # If the number of 0s is greater than the number of 1s, then the maximum difference is the difference between the two counts\n    if zero_count > one_count:\n        max_diff = zero_count - one_count\n    else:\n        max_diff = one_count - zero_count\n\n    return max_diff",
        "test": "assert find_length('1101101011') == 4",
        "num_ids": 1284
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return a\n    else:\n        for i in range(1, a + 1):\n            if a % i == 0 and b % i == 0:\n                return i",
        "test": "assert sum(3, 6) == 1",
        "num_ids": 772
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 299
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(10, \"The quick brown fox jumps over the lazy dog.\") == []",
        "num_ids": 664
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        if not all(isinstance(i, int) for i in row):\n            return False\n    \n    # Check for all pairs of numbers that sum to the square value\n    for i in range(len(my_matrix)):\n        for j in range(i + 1, len(my_matrix)):\n            if sum(my_matrix[i][j]) == i + j:\n                return False\n    \n    return True",
        "test": "assert magic_square_test([1, 5, 9, 4, 2]) == False",
        "num_ids": 964
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = defaultdict(int)\n    max_item = None\n\n    for num in nums:\n        max_freq[num] += 1\n        if max_freq[num] > max_freq.get(max_item, 0):\n            max_item = num\n\n    return max_item",
        "test": "assert max_occurrences([1, 1, 2, 3, 3, 4, 4, 4, 4, 4]) == 4",
        "num_ids": 900
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    return str1[::-1].replace(vowels, \"\").lower()\n",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 573
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string((1, 2, 3)) == '(1, 2, 3)'",
        "num_ids": 333
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_negativenum(nums):\n    # Initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # If it is negative, add it to the sum\n            neg_sum += num\n    # Return the sum of negative numbers\n    return neg_sum",
        "test": "assert sum_negativenum([10, -5, 0, 5, 15]) == 15",
        "num_ids": 570
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def hexagonal_num(n): \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        return hexagonal_num(n-1) + hexagonal_num(n-2)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 670
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n        else:\n            non_zero_count += 1\n    return count / non_zero_count if non_zero_count!= 0 else 0",
        "test": "assert zero_count(array('i', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])) == 0.0",
        "num_ids": 864
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    # Check if the given number is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Check if the given number can be represented as sum of non-zero powers of 2\n    power = 1\n    while power <= n:\n        if n % power == 0:\n            return True\n        power *= 2\n\n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True, \"1 is not Sum of Powers of 2\"",
        "num_ids": 900
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * r * 3.141592653589793",
        "test": "assert circle_circumference(5) == 31.41592653589793",
        "num_ids": 658
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        if isinstance(i, list):\n            flat_list += extract_singly(i)\n        else:\n            flat_list.append(i)\n    return flat_list",
        "test": "assert extract_singly([]) == []",
        "num_ids": 725
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Base case: if the list has only one element, it is already sorted\n    if n == 1:\n        return nums\n\n    # Divide the list into two halves\n    left = nums[:n//2]\n    right = nums[n//2:]\n\n    # Recursively sort each half\n    left = pancake_sort(left)\n    right = pancake_sort(right)\n\n    # Merge the two halves back into a single sorted list\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    # Add any remaining elements from the left half\n    while i < len(left):\n        result.append(left[i])\n        i += 1\n\n    # Add any remaining elements from the right half\n    while j < len(right):\n        result.append(right[j])\n        j += 1\n\n    return result",
        "test": "assert pancake_sort([10, 9, 8, 7, 6]) == [6, 7, 8, 9, 10]",
        "num_ids": 1289
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]) == 5",
        "num_ids": 867
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_lists(Input): \n    '''\n    Function to find number of lists present in the given tuple.\n\n    Inputs:\n    - Input: a tuple of integers or strings\n\n    Returns:\n    - An integer representing the number of lists in the tuple.\n\n    '''\n\n    count = 0\n\n    # Using a for loop to iterate through each element in the tuple\n    for element in Input:\n\n        # If the element is a list, increment the count by 1\n        if isinstance(element, list):\n            count += 1\n\n    return count",
        "test": "assert find_lists(()) == 0, \"The function should return 0 if an empty tuple is provided.\"",
        "num_ids": 678
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5, 6]) == 5",
        "num_ids": 877
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check for solutions with opposite signs\n    if a*b < 0!= (a*n > 0)!= (b*n > 0):\n        return None\n\n    # Check if the equation has a solution\n    x = (-b + n//a) // b\n    y = (-a + n//a) // a\n\n    # Check for solutions with the desired coefficients\n    if x*x + y*y == n:\n        return (x, y)\n    else:\n        return None",
        "test": "assert find_solution(2, 3, 6) == None",
        "num_ids": 1634
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 733
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(1, n//2+1):\n        if i % 2 == 0:\n            sum += i*(n//2 + i)\n        else:\n            sum += 2*i*(n//2 + i)\n    return sum",
        "test": "assert sum_series(5) == 14",
        "num_ids": 776
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += s * i / 2\n    return area",
        "test": "assert area_polygon(2,3) == 6.0",
        "num_ids": 614
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def div_sum(n):\n    if n == 1:\n        return True\n    else:\n        for i in range(2, n+1):\n            if n % i == 0:\n                if n // i == i:\n                    return False\n                else:\n                    return True\n        else:\n            return True",
        "test": "assert div_sum(5) == True, \"Incorrect result for div_sum(5)\"",
        "num_ids": 785
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            position = str1.lower().index(char.lower())\n            if position == count:\n                count += 1\n    return count",
        "test": "assert count_char_position(\"hello world\") == 3",
        "num_ids": 629
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_even_pair(A):\n    '''\n    This function takes a list A as input and returns the count of pairs of integers in A that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2, \"The function should return 2 for a list with even numbers\"",
        "num_ids": 702
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1 # 0 is not a valid input, so we return 1\n    else: \n        p = 2 # initialize the power of 2 to 2\n        while p < n: \n            p = p * 2 # multiply by 2 until we find a power of 2 greater than or equal to n\n        return p # return the power of 2 found",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 769
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n\na = [1, 2, 3, 2, 4, 5, 6]\nx = 2\n\nprint(\"Frequency of\", x, \"in\", a, \"is\", frequency(a,x))",
        "test": "assert frequency(1, [1, 2, 1, 3, 4, 5]) == 2",
        "num_ids": 495
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 2) == 5",
        "num_ids": 681
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * 3) / 2",
        "test": "assert perimeter_pentagon(4) == 10",
        "num_ids": 453
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s' or char == 'd' or char == 't' or char == 'n':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"Hello, world!\") == 1",
        "num_ids": 518
    },
    {
        "number": 222,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    same_type = True\n    for item in test_tuple:\n        if type(item)!= type(test_tuple[0]):\n            same_type = False\n            break\n    return same_type\n",
        "test": "assert check_type(('a', 'b', 3, 4)) == False",
        "num_ids": 582
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # count the occurrences of each element in the array\n    count = {}\n    for element in arr:\n        count[element] = count.get(element, 0) + 1\n\n    # if the element is not in the count dictionary, it is the majority element\n    if x not in count:\n        return False\n\n    # if the count dictionary has a value greater than n/2, the element is the majority element\n    if count[x] > n//2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 3, 2) == False",
        "num_ids": 922
    },
    {
        "number": 224,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    # Initialize the number of set bits to zero\n    num_set_bits = 0\n\n    # Check if the number is positive or negative\n    if n < 0:\n        n = -n\n\n    # Loop through each bit in the number\n    while n > 0:\n        # Check if the least significant bit (i.e. the rightmost bit) is 1\n        if n % 2 == 1:\n            # Increment the number of set bits\n            num_set_bits += 1\n\n        # Shift the number of bits to the right by 1\n        n = n // 2\n\n    # Return the number of set bits\n    return num_set_bits",
        "test": "assert count_Set_Bits(10) == 2",
        "num_ids": 645
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_values_string(str):\n    '''\n    Remove the characters with odd index values from a given string.\n    '''\n    return ''.join([str[i] for i in range(1, len(str)) if i % 2!= 0])",
        "test": "assert odd_values_string(\"hello world\") == \"llorw\"",
        "num_ids": 606
    },
    {
        "number": 227,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1, 2, 3) == 1, \"The function should return the minimum of the given numbers.\"",
        "num_ids": 477
    },
    {
        "number": 228,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    # Convert the given range to binary format\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n\n    # Check whether all the bits in the given range are set or not\n    all_set = True\n    for i in range(len(binary_l)-1, -1, -1):\n        if binary_l[i] == '1' and binary_r[i]!= '1':\n            all_set = False\n            break\n\n    # Return the result\n    return all_set",
        "test": "assert all_Bits_Set_In_The_Given_Range(8,3,4) == False",
        "num_ids": 1168
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize variables to keep track of the start and end indices of the positive elements\n    start = 0\n    end = 0\n    \n    # Iterate through the array and check if the current element is negative\n    while end < n and arr[end] < 0:\n        # If it is, swap it with the first positive element and move the start index to the next positive element\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end += 1\n    \n    # Return the rearranged array\n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 2) == [1, 2, 3, 4, 5]",
        "num_ids": 1334
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i.isspace():\n            new_str += char\n        else:\n            new_str += i\n    return new_str",
        "test": "assert replace_blank('', '-') == ''",
        "num_ids": 470
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 2) == [5, 4]",
        "num_ids": 891
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h",
        "test": "assert lateralsuface_cylinder(3,4) == 16",
        "num_ids": 475
    },
    {
        "number": 234,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3",
        "test": "assert volume_cube(1) == 1, \"volume_cube(1) should return 1 for side length 1.\"",
        "num_ids": 387
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # loop through all bits and set even bits\n    for i in range(1, 32):\n        if n & (1 << i):\n            n |= (1 << i)\n    return n",
        "test": "assert even_bit_set_number(123) == 123 # all bits are set",
        "num_ids": 667
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object to count the occurrences of each tuple\n    count_dict = Counter(test_list)\n    return count_dict",
        "test": "assert check_occurences([('apple', 2), ('banana', 1), ('orange', 2), ('apple', 1), ('pear', 2)]) == {'apple': 2, 'banana': 1, 'orange': 2}",
        "num_ids": 984
    },
    {
        "number": 238,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    start = 0\n    end = 0\n    while end < len(str): \n        # check if substring is non-empty\n        if str[end]!= \"\": \n            count += 1 \n            # update start and end indices for next iteration\n            start = end + 1 \n            end = start + 1 \n        else: \n            end += 1 \n\n    return count ",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 671
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n <= 0 or m <= 0:\n        return 0\n\n    count = 0\n    prev = 2\n    curr = 1\n    max_count = 0\n\n    for i in range(1, n + 1):\n        if i > 2 and i % 2 == 0:\n            count += 1\n            curr = 1\n        else:\n            curr += 1\n\n        if curr >= m:\n            count += 1\n            curr = prev\n        elif curr > max_count:\n            max_count = curr\n\n        if curr >= m:\n            count += 1\n            curr = prev\n\n    return count\n",
        "test": "assert get_total_number_of_sequences(7, 5) == 1",
        "num_ids": 1141
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]  # Replace the last element of the first list with the last element of the second list.\n    return list1\n",
        "test": "assert replace_list([1,2,3,4,5],[2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 900
    },
    {
        "number": 242,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    # Count the total number of characters in the string\n    count = len(str1)\n    \n    # Return the count\n    return count",
        "test": "assert count_charac(\"\") == 0",
        "num_ids": 561
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 2\n    while i * i <= N:\n        if N % i == 0:\n            N -= i\n        else:\n            i += 1\n\n    return N",
        "test": "assert next_Perfect_Square(1) == 1, \"next_Perfect_Square(1) should return 1\"",
        "num_ids": 1063
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    max_sum = 0\n    max_ending_here = arr[0]\n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] > arr[i]:\n                dp[i] += dp[j]\n            else:\n                break\n        max_ending_here = max(max_ending_here, dp[i])\n        max_sum = max(max_sum, max_ending_here)\n\n    return max_sum",
        "test": "assert max_sum([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 1373
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n    elif number == 0:\n        return 0\n    else:\n        guess = number / 2\n        while guess * guess > number:\n            guess = guess / 2\n        return guess",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 772
    },
    {
        "number": 247,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def lps(str): \n    # Initialize variables to keep track of start and end indices of the longest palindromic subsequence\n    start = 0\n    end = 0\n\n    # Loop through the string and use a sliding window approach to find the length of the longest palindromic subsequence\n    for i in range(len(str)):\n        # Iterate through the remaining characters in the string\n        for j in range(i+1, len(str)+1):\n            # Check if the substring is a palindrome\n            if str[i:j] == str[i:j][::-1]:\n                # If it is a palindrome and it is longer than the current maximum length, update the start and end indices\n                if j-i+1 > end-start:\n                    start = i\n                    end = j\n\n    # Return the length of the longest palindromic subsequence\n    return end-start",
        "test": "assert lps(\"cbbd\") == 2",
        "num_ids": 1293
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 507
    },
    {
        "number": 249,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Find the intersection of two arrays.\n    '''\n\n    # Create a set to store unique elements from both arrays\n    unique_elements = set(array_nums1).intersection(array_nums2)\n\n    # Convert the set back to a list and return it\n    return list(unique_elements)",
        "test": "assert intersection_array([], []) == []",
        "num_ids": 704
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n\n    # using list comprehension to count the number of occurrences of each element in the tuple\n    return len([i for i in tup if i == x])",
        "test": "assert count_X((1,2,3,4,5),1) == 1",
        "num_ids": 534
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in list:\n        result.append(i)\n        if i == element:\n            result.insert(i, element)\n    return result",
        "test": "assert insert_element([1,2,3,4],2) == [1,2,2,3,4]",
        "num_ids": 772
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    re = numbers[0]\n    im = numbers[1]\n    r, theta = cmath.polar(re, im)\n    return r, theta",
        "test": "assert convert(1-2j) == (-1-2j, cmath.sqrt(2))",
        "num_ids": 808
    },
    {
        "number": 253,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count",
        "test": "assert count_integer([]) == 0",
        "num_ids": 449
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations of the elements of a list and return a list of tuples.\n    '''\n    combinations = []\n    for i in range(1, len(l) + 1):\n        for combination in combinations_with_replacement(l, i):\n            combinations.append((tuple(combination), l))\n    return combinations",
        "test": "assert combinations_colors([1, 2, 3, 4, 5], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]",
        "num_ids": 721
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if isPrime(i):\n            count += 1\n    return count\n\ndef isPrime(num):\n    '''\n    Write a python function that takes in a positive integer and returns True if it is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 791
    },
    {
        "number": 257,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 357
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup2\n    else:\n        return test_tup1",
        "test": "assert maximize_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (8, 7, 6, 5, 4, 3, 2, 1)",
        "num_ids": 1175
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # If n is 1 or less, return False\n    if n <= 1:\n        return False\n\n    # Initialize a flag to keep track of whether the nth number is prime or not\n    is_prime = True\n\n    # Loop through all the numbers from 2 to the nth square root\n    for i in range(2, int(n**0.5) + 1):\n        # If i is not divisible by any number from 2 to i-1, it is not prime\n        if n % i == 0:\n            is_prime = False\n            break\n\n    # If the nth number is prime, return it\n    if is_prime:\n        return n\n\n    # If the nth number is not prime, find the next prime number\n    next_prime = newman_prime(n + 1)\n\n    # If the next prime number is still not prime, return False\n    if next_prime is False:\n        return False\n\n    # Otherwise, return the next prime number\n    return next_prime",
        "test": "assert newman_prime(10) == 11",
        "num_ids": 1641
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Perform element-wise division between the given tuples.\n\n    Args:\n    test_tup1 (tuple): First tuple of numbers to divide.\n    test_tup2 (tuple): Second tuple of numbers to divide.\n\n    Returns:\n    A tuple of tuples where each sub-tuple contains the result of performing element-wise division between the corresponding elements of the input tuples.\n    '''\n\n    # Convert the input tuples to lists to allow element-wise division\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n\n    # Divide each element of the lists by the corresponding elements of the input tuples\n    result = []\n    for i in range(len(test_list1)):\n        result.append(test_list1[i] / test_list2[i])\n\n    # Return the result as a tuple of tuples\n    return tuple(result)",
        "test": "assert division_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (0.125, 0.25, 0.375, 0.5)",
        "num_ids": 948
    },
    {
        "number": 262,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Splitting the list into two parts\n    split_list1 = list1[:L]\n    split_list2 = list1[L:]\n\n    # Returning the resulting lists in a tuple\n    return (split_list1, split_list2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 761
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age / 3\n    return years",
        "test": "assert dog_age(3) == 1",
        "num_ids": 339
    },
    {
        "number": 265,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n\n    # Create an empty list to store the resulting lists\n    result = []\n\n    # Loop through the list of S and split it into chunks of size step\n    for i in range(0, len(S), step):\n        # Create a new list to store the split chunk\n        chunk = S[i:i+step]\n        # Append the chunk to the result list\n        result.append(chunk)\n\n    # Return the result list\n    return result",
        "test": "assert list_split([], 1) == []",
        "num_ids": 780
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * 6",
        "test": "assert lateralsurface_cube(1) == 6 # Correctly calculates the lateral surface area of a cube with side length 1",
        "num_ids": 369
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #initialize the sum variable to 0\n    sum = 0\n    #loop through each odd natural number from 1 to n\n    for i in range(1, n+1, 2):\n        #add the square of the current odd natural number to the sum variable\n        sum += i*i\n    #return the sum variable\n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 546
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Initialize the ith star number to 1\n    num = 1\n    \n    # Loop from 2 to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        # Calculate the nth power of 1/i\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        # If i is a factor of n, multiply by num\n        if factorial == n:\n            num *= i\n    \n    return num",
        "test": "assert find_star_num(3) == 1",
        "num_ids": 723
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97 # test case 1",
        "num_ids": 930
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Create a list to store even numbers and their corresponding indices\n    even_nums_and_indices = []\n\n    # Iterate through the list and add even numbers and their indices to the list\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_nums_and_indices.append([arr[i], i])\n\n    # Calculate the sum of even numbers\n    even_sum = sum([x[0] for x in even_nums_and_indices])\n\n    # Return the sum of even numbers\n    return even_sum",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7]) == 0",
        "num_ids": 860
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and i ** 5 == i:\n            sum += i\n    return sum",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 565
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list",
        "test": "assert rear_extract([('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')])[1] == 'f'",
        "num_ids": 757
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result",
        "test": "assert substract_elements((1, 2, 3), (5, 4, 3)) == (1, 1, 1)",
        "num_ids": 904
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Find the sum of even index binomial coefficients\n    even_binomial_sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_binomial_sum += math.factorial(i // 2)\n    \n    return even_binomial_sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 740
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def volume_cylinder(r, h):\n    volume = 4/3 * r**3 * h\n    return volume",
        "test": "assert volume_cylinder(10, 20) == 628.3185307179586",
        "num_ids": 667
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result",
        "test": "assert dict_filter({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}, 6) == {}",
        "num_ids": 722
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element < test_tup[0]:\n            count += 1\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 723
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 11\n    elif n % 2 == 0:\n        return 2 * is_num_decagonal(n//2) + 1\n    else:\n        return 2 * is_num_decagonal(n//2) - 1",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 757
    },
    {
        "number": 280,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, value in enumerate(dlist):\n        if value == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 806
    },
    {
        "number": 281,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5, 4]) == False",
        "num_ids": 673
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
        "test": "assert sub_list([1,2,3], [1,2,3]) == [0,0,0]",
        "num_ids": 592
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    for key, value in frequency.items():\n        if value <= len(key):\n            return True\n    return False",
        "test": "assert validate(123) == True",
        "num_ids": 853
    },
    {
        "number": 284,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_element(list, element):\n    for item in list:\n        if item == element:\n            return True\n    return False",
        "test": "assert check_element([1], 1) is True",
        "num_ids": 441
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and len(text.split('a')) >= 2:\n        return True\n    else:\n        return False\n\ntext = \"abcabcbb\"\nif text_match_two_three(text):\n    print(\"The given text contains the 'a' character followed by two or three 'b' characters.\")\nelse:\n    print(\"The given text does not contain the 'a' character followed by two or three 'b' characters.\")",
        "test": "assert text_match_two_three('aabbcbbb') == True, \"text_match_two_three is not correct.\"",
        "num_ids": 667
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize the maximum sum we can find so far to zero\n    max_sum = float('-inf')\n\n    # Iterate over all possible subarrays\n    for i in range(n):\n        # Initialize the current sum of the subarray to zero\n        curr_sum = 0\n\n        # Iterate over all possible indices i that are in the subarray\n        for j in range(i, n):\n            # Add the element at index j to the current sum\n            curr_sum += a[j]\n\n            # If the current sum is greater than the maximum sum we have found so far, update the maximum sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n    # Return the maximum sum found so far\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([-2, -3, -4, -5, -6], 3, 3) == -2",
        "num_ids": 1350
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 753
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list",
        "test": "assert max_length([]) == []",
        "num_ids": 764
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(start, color, count, fence):\n        if count >= k:\n            return True\n        if count >= 2 and fence[start] == fence[start+1]:\n            return False\n        if start == n-1:\n            return True\n\n        fence[start] = color\n        if backtrack(start+1, color, count+1, fence):\n            return True\n        fence[start] =''\n        return backtrack(start+1, color, count, fence)\n\n    fence = [' ']*(n-1)\n    return backtrack(0,'', 0, fence)",
        "test": "assert count_no_of_ways(6, 2) == 1",
        "num_ids": 1154
    },
    {
        "number": 292,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find(n, m):\n    # Divide n by m and round down to the nearest integer\n    quotient = int(n / m)\n\n    # Check if n and m have the same remainder\n    if n % m == 0:\n        return quotient\n    else:\n        return quotient + 1",
        "test": "assert find(4,6) == 1",
        "num_ids": 503
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    third_side = 0.5 * (w + h)\n    return round(third_side, 2)",
        "test": "assert otherside_rightangle(4,5) == 11",
        "num_ids": 509
    },
    {
        "number": 294,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def max_val(listval):\n    '''\n    Find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]  # initialize max_val with first element of listval\n    for val in listval:  # iterate over the rest of the list\n        if val > max_val:  # if current value is greater than max_val\n            max_val = val  # update max_val with current value\n    return max_val  # return max_val",
        "test": "assert max_val([1, 5, 3, 7, 9]) == 9",
        "num_ids": 643
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = set()\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.add(i)\n            divisors.add(number // i)\n    return sum(divisors)",
        "test": "assert sum_div(24) == 60, \"The sum of all divisors of 24 is incorrect.\"",
        "num_ids": 569
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    return inv_count",
        "test": "assert get_Inv_Count([1, 3, 5, 2, 4]) == 3",
        "num_ids": 638
    },
    {
        "number": 297,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result",
        "test": "assert flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4]",
        "num_ids": 685
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict object to keep track of the maximum aggregate\n    max_agg = defaultdict(float)\n\n    # Iterate over the list of tuples and update the maximum aggregate\n    for value, count in stdata:\n        max_agg[value] += count\n\n    # Return the maximum aggregate value\n    return max(max_agg.values())",
        "test": "assert max_aggregate([(1, 2), (3, 4)]) == 4",
        "num_ids": 969
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables\n    count = 0\n    sum_first_bits = sum_last_bits = 0\n    # Iterate over all possible binary sequences of length 2n\n    for i in range(n):\n        # Calculate sum of first n bits of the binary sequence\n        first_bits = bin(i)[2:].zfill(n)\n        sum_first_bits += int(first_bits, 2)\n        # Calculate sum of last n bits of the binary sequence\n        last_bits = bin(n-i-1)[2:].zfill(n)\n        sum_last_bits += int(last_bits, 2)\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum_first_bits == sum_last_bits:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(2) == 1",
        "num_ids": 1147
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    count = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            count += 1\n            current_depth = max(dict_depth(value), current_depth) + 1\n        else:\n            count += 1\n            current_depth = max(current_depth, len(str(value)))\n    return current_depth",
        "test": "assert dict_depth({'a': 1, 'b': 2, 'c': {'d': 3, 'e': 4, 'f': 5}}) == 2",
        "num_ids": 766
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Get the length of the array and the number of rotations\n    arr_len = len(arr)\n    rotations = rotations % arr_len\n    \n    # Find the last index of the array after rotations\n    last_index = (arr_len - 1) - rotations\n    \n    # If the last index is out of range, return None\n    if last_index < 0:\n        return None\n    \n    # If the index is out of range, return None\n    if index >= arr_len:\n        return None\n    \n    # If the index is within the last rotation range, return the element at the index\n    if index <= last_index:\n        return arr[index]\n    \n    # If the index is outside the last rotation range, return None\n    return None",
        "test": "assert find_Element([1,2,3,4,5],[[0,3],[1,4],[2,5]],[0,1,2,3],2)==3  # This element is at index 2 after 3 rotations",
        "num_ids": 1074
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'(?=.*[Pp])')\n    result = pattern.findall(words)\n    return result",
        "test": "assert start_withp(['apple', 'banana', 'cherry', 'date', 'elderberry']) == ('apple', 'banana')",
        "num_ids": 611
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = float('-inf')\n    prev_sum = 0\n\n    # Calculate the maximum sum of increasing subsequence ending at index i\n    for i in range(index, n):\n        curr_sum = max(a[i], a[i] + prev_sum)\n        max_sum = max(max_sum, curr_sum)\n\n        # Calculate the maximum sum of increasing subsequence ending at index i + 1\n        prev_sum = curr_sum\n\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4) == 12",
        "num_ids": 1364
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def colon_tuplex(tuplex, m, n):\n    if len(tuplex) == m:\n        return tuplex\n    elif len(tuplex) < m:\n        return tuplex[:m-len(tuplex)]\n    else:\n        return tuplex[:m-1] + [None] * (n-len(tuplex[:m-1])) + colon_tuplex(tuplex[m-1:], m, n)",
        "test": "assert colon_tuplex((), 1, 2) == ()",
        "num_ids": 914
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the largest product for each factor\n    factor1_largest_product = float('-inf')\n    factor2_largest_product = float('-inf')\n\n    # Initialize variables to store the largest product from each list\n    list1_product = float('-inf')\n    list2_product = float('-inf')\n\n    # Calculate the largest product from each list\n    for i in range(N):\n        list1_product = max(list1_product, nums1[i])\n        list2_product = max(list2_product, nums2[i])\n\n    # Calculate the largest product for each factor\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                factor1_largest_product = max(factor1_largest_product, list1_product * list2_product)\n\n    return factor1_largest_product",
        "test": "assert large_product([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 3) == 120",
        "num_ids": 1608
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(3, 4) == 4",
        "num_ids": 348
    },
    {
        "number": 310,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 434
    },
    {
        "number": 311,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n):\n    # Calculate the number of set bits in the binary representation of n\n    count = 0\n    while n:\n        n = n & (n - 1)\n        count += 1\n\n    # Find the leftmost unset bit in the binary representation of n\n    index = count\n    while (index > 0) and (n & (1 << index)) == 0:\n        index -= 1\n\n    # Set the leftmost unset bit to 1\n    n = n | (1 << index)\n\n    return n",
        "test": "assert set_left_most_unset_bit(10) == 1",
        "num_ids": 665
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculates the volume of a cone using the formula volume = pi * r^2 * h\n    '''\n    return math.pi * r**2 * h\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n\nprint(\"The volume of the cone is:\", volume_cone(r, h))",
        "test": "assert volume_cone(2, 5) == 11.902676498168945",
        "num_ids": 562
    },
    {
        "number": 388,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n & (n-1)!= 0:\n        n = n - 1\n    return n\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 560
    },
    {
        "number": 389,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        lucas = find_lucas(n-1) + find_lucas(n-2)\n        return lucas",
        "test": "assert find_lucas(10) == 55",
        "num_ids": 594
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n\n    if not list_:\n        return None\n\n    for item in list_:\n        if isinstance(item, str):\n            item = string.format(item)\n        else:\n            raise TypeError(\"All elements in the list must be strings.\")\n\n    return list_",
        "test": "assert add_string(['a', 'b', 'c'], '%s%s%s') == ['a', 'b', 'c']",
        "num_ids": 640
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert multiple lists to nested dictionaries.\n    '''\n\n    # Check if there are at least three lists\n    if len(l1) < 3 or len(l2) < 3 or len(l3) < 3:\n        raise ValueError(\"Input lists must contain at least 3 elements.\")\n\n    # Convert each list to a dictionary\n    d1 = {l1[i]: l2[i] for i in range(len(l1))}\n    d2 = {l2[i]: l3[i] for i in range(len(l2))}\n    d3 = {l3[i]: l1[i] for i in range(len(l3))}\n\n    # Combine the dictionaries into a single dictionary\n    result = {**d1, **d2, **d3}\n\n    return result",
        "test": "assert convert_list_dictionary(['apple', 'banana', 'orange'], ['apple', 'banana', 'orange'], ['apple', 'banana', 'orange']) == {'apple': ['banana', 'orange'], 'banana': ['apple', 'orange'], 'orange': ['apple', 'banana']}",
        "num_ids": 1421
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def get_max_sum(n):\n    max_sum = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            for k in range(1, j+1):\n                for l in range(1, k+1):\n                    for m in range(1, l+1):\n                        max_sum = max(max_sum, (i*j*k*l*m))\n    return max_sum\n",
        "test": "assert get_max_sum(5) == 25, \"The given equation is not correct. The expected result is 25, but it is returned as {get_max_sum(5)}.\"",
        "num_ids": 931
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 671
    },
    {
        "number": 394,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if a tuple contains no duplicates.\n    '''\n    if len(set(test_tup))!= len(test_tup):\n        return False\n    else:\n        return True",
        "test": "assert check_distinct((1, 2, 3, 4, 5))",
        "num_ids": 694
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    return None",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 869
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]: \n        return True\n    else:\n        return False",
        "test": "assert check_char(\"World\") == False",
        "num_ids": 526
    },
    {
        "number": 397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # find the middle number of the list\n    middle_index = len(a) // 2\n    # check if the middle index is even or odd\n    middle = a[middle_index] if len(a) % 2 == 0 else (a[middle_index - 1] + a[middle_index]) / 2\n    \n    # check which number is greater than the middle number\n    if b > middle:\n        if c > middle:\n            # return the middle number\n            return middle\n        else:\n            # return the greater of the middle number and the third number\n            return middle if middle < c else c\n    elif b < middle:\n        if c < middle:\n            # return the middle number\n            return middle\n        else:\n            # return the greater of the middle number and the third number\n            return middle if middle > c else c\n    else:\n        # return the middle number\n        return middle",
        "test": "assert median_numbers(3,2,1) == 2",
        "num_ids": 888
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through each number in the list\n    for num in nums:\n        # loop through each digit in the number\n        for digit in str(num):\n            # add the digit to the sum variable\n            sum += int(digit)\n    # return the sum variable\n    return sum",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 546
    },
    {
        "number": 399,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tuple = tuple(set(test_tup1) ^ set(test_tup2))\n    return xor_tuple",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 744
    },
    {
        "number": 400,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 646
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Get the length of the first tuple\n    len_tup1 = len(test_tup1)\n    # Get the length of the second tuple\n    len_tup2 = len(test_tup2)\n    # Initialize an empty list to store the result\n    res = []\n    # Iterate through each tuple element in the first tuple\n    for i in range(len_tup1):\n        # Initialize an empty list to store the result of the current tuple\n        curr_res = []\n        # Iterate through each tuple element in the second tuple\n        for j in range(len_tup2):\n            # Add the current tuple element and the current tuple element in the second tuple\n            curr_res.append(test_tup1[i][j] + test_tup2[j])\n        # Add the current tuple element and the current tuple element in the second tuple to the result list\n        res.append(curr_res)\n    return res\n",
        "test": "assert add_nested_tuples((1, 2, 3), (2, 3, 4)) == (3, 5, 7)",
        "num_ids": 1049
    },
    {
        "number": 404,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(2, 5) == 2",
        "num_ids": 302
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Check whether a given element exists in a given tuple.\n\n    Args:\n    tuplex (tuple): A tuple to search in.\n    tuple1 (object): A tuple element to search for.\n\n    Returns:\n    bool: True if the tuple1 element exists in the tuplex, False otherwise.\n    '''\n\n    # Check if the tuple is empty\n    if len(tuplex) == 0:\n        return False\n\n    # Check if the first element of the tuple is equal to tuple1\n    if tuplex[0] == tuple1:\n        return True\n\n    # Check if the rest of the tuple matches tuple1\n    for element in tuplex[1:]:\n        if element == tuple1:\n            return True\n\n    # If the loop completes without returning, the tuple1 element does not exist in the tuplex\n    return False",
        "test": "assert check_tuplex((1,2,3),(1,2,4)) == False",
        "num_ids": 563
    },
    {
        "number": 406,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x!= 0: \n        parity = 1 - parity \n        x = x >> 1\n    return parity",
        "test": "assert find_Parity(123) == 1, \"Error: find_Parity() should return 1 for input 123.\"",
        "num_ids": 510
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def rearrange_bigger(n):\n    '''\n    Rearrange the digits of a given number in descending order.\n    '''\n    # Convert the number to a string and reverse the string\n    num_str = str(n)\n    rev_num_str = num_str[::-1]\n\n    # Convert the reversed string back to an integer\n    rev_int = int(rev_num_str)\n\n    return rev_int",
        "test": "assert rearrange_bigger(0) == 0",
        "num_ids": 1038
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = []\n    heap2 = []\n    min1, min2 = float('inf'), float('inf')\n    result = []\n    \n    for num1 in nums1:\n        if len(heap1) < k:\n            if num1 < min1:\n                min1, min2 = num1, min2\n            heapq.heappush(heap1, (num1, -1*num1))\n    \n    for num2 in nums2:\n        if len(heap2) < k:\n            if num2 < min2:\n                min1, min2 = min2, num2\n            heapq.heappush(heap2, (min2, -1*num2))\n    \n    for _ in range(k):\n        if len(heap1) == 0 or len(heap2) == 0:\n            break\n        else:\n            result.append((heapq.heappop(heap1)[0], heapq.heappop(heap2)[0]))\n    \n    return result",
        "test": "assert k_smallest_pairs([1,2,3,4,5], [2,3,4,5,6], 3) == [(1,2), (2,3), (3,4), (4,5), (5,6)]",
        "num_ids": 1774
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    list1.sort()  # sort the list of tuples in ascending order\n    \n    if len(list1) < 2:  # if the list has less than 2 tuples, return None\n        return None\n    \n    total_product = 1  # initialize the total product\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < total_product:  # if the product is smaller than the current total product\n                total_product = product\n    \n    return total_product\n",
        "test": "assert min_product_tuple([2, 3, 4]) == (2, 3, 4)",
        "num_ids": 1013
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Finds the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]  # Initialize min_val with the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]  # Update min_val if the current element is smaller than min_val\n\n    return min_val  # Return the minimum value\n",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 725
    },
    {
        "number": 411,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(.)?', lambda m: m.group(1).upper(), word)",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 566
    },
    {
        "number": 412,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 532
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element from the list.\n    '''\n\n    # Check if n is within the range of list length\n    if n < 1 or n > len(list1):\n        return None\n\n    # Check if n is even or odd\n    if n % 2 == 0:\n        return list1[n//2]\n    else:\n        return list1[n//2-1]\n",
        "test": "assert extract_nth_element([(\"apple\", 1), (\"banana\", 2), (\"orange\", 3)], 2) == (\"banana\", 2)",
        "num_ids": 766
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [2,3,4,5]) == True",
        "num_ids": 457
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with highest product.\n    '''\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair",
        "test": "assert max_Product([-1,-2,-3,-4,-5]) == 0",
        "num_ids": 835
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for element in Input:\n        if common_element is None:\n            common_element = element\n        elif element[0]!= common_element[0]:\n            break\n    return common_element",
        "test": "assert group_tuples(Input=[(1, \"a\"), (2, \"b\"), (3, \"c\"), (4, \"d\"), (5, \"e\")]) == (1, \"a\")",
        "num_ids": 1199
    },
    {
        "number": 418,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0: \n        return None \n    else: \n        return max(lst) ",
        "test": "assert Find_Max([5, 4, 3, 2, 1]) == 5",
        "num_ids": 590
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(f\"The total sum of {list1} is {total_sum * len(list1)}\")",
        "test": "assert round_and_sum([1000000, 999999, 999998, 999997, 999996]) == 99997100000",
        "num_ids": 766
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1): \n        sum += i**3 \n    return sum",
        "test": "assert cube_Sum(0) == 0  # 0^3 = 0",
        "num_ids": 541
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \", \"\n    concatenated_tup = delimiter.join(str(i) for i in test_tup)\n    return concatenated_tup",
        "test": "assert concatenate_tuple(('apple', 1, 'banana', 2, 'cherry')) == ('apple, 1, banana, 2, cherry')",
        "num_ids": 481
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def find_Average_Of_Cube(n):  \n    sum_of_cubes = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i * i * i  \n    return sum_of_cubes / n  ",
        "test": "assert find_Average_Of_Cube(20) == 448",
        "num_ids": 533
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple)[::-1]",
        "test": "assert extract_rear((1, \"a\", 3, \"b\", 5, \"c\")) == (3, \"c\")",
        "num_ids": 710
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n        if len(list1) - 1 == i:\n            count += 1\n\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 654
    },
    {
        "number": 426,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:  # checking if num is odd\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]",
        "num_ids": 541
    },
    {
        "number": 427,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define a regular expression pattern that matches the date format yyyy-mm-dd\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n\n    # Use the pattern to replace the date format\n    return pattern.sub(r'\\3-\\2-\\1', dt)",
        "test": "assert change_date_format('2021-01-01') == '01-01-2021'",
        "num_ids": 930
    },
    {
        "number": 428,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    # Traverse the list from second element\n    for gap in range(n // 2, 0, -1):\n        # Traverse the list in sorted order\n        for i in range(gap, n):\n            # Compute the current element\n            current = my_list[i]\n\n            # Move the maximum element one position to the right\n            j = i - gap\n            while j >= 0 and my_list[j] > current:\n                my_list[j + gap] = my_list[j]\n                j -= gap\n\n            # Copy the maximum element back to its correct position\n            my_list[j + gap] = current\n\n    return my_list\n",
        "test": "assert shell_sort([1, 4, 2, 8, 5]) == [1, 2, 4, 5, 8]",
        "num_ids": 1088
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n\n    # Create an empty list to store the elementwise and tuples\n    result = []\n\n    # Iterate over the elements of the first tuple\n    for element in test_tup1:\n        # Check if the element is present in the second tuple\n        if element in test_tup2:\n            # Add the elementwise and tuple to the result list\n            result.append(element * test_tup2[element])\n\n    return tuple(result)",
        "test": "assert and_tuples((), ()) == ()",
        "num_ids": 941
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the coefficients of the parabola\n    a2 = a**2\n    b2 = b**2\n    c2 = c**2\n    \n    # Calculate the determinant of the matrix\n    det = (a * (b2 * c2 - c2 * b2) - b * (a2 * c2 - c2 * a2) + c * (a2 * b2 - b2 * a2))**0.5\n    \n    # Calculate the directrix as the negative of the determinant\n    directrix = -det\n    \n    return directrix",
        "test": "assert parabola_directrix(3, 4, 5) == 0",
        "num_ids": 704
    },
    {
        "number": 431,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    # Initialize two sets to store unique elements from both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of the two sets\n    common = set1.intersection(set2)\n    # If there is at least one common element, return True\n    return bool(common)",
        "test": "assert common_element([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 623
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    if height % 2 == 0:\n        # Find the length of the trapezium\n        h = height / 2\n        L1 = base1 + h\n        L2 = base2 - h\n        L3 = base2 + h\n        L4 = base1 - h\n\n        # Find the average of the lengths of the trapezium\n        A1 = (L1 + L2) / 2\n        A2 = (L3 + L4) / 2\n\n        # Find the median length of the trapezium\n        if A1 > A2:\n            median = A1\n        else:\n            median = A2\n\n    else:\n        # Find the length of the trapezium\n        h = height / 2\n        L1 = base1 + h\n        L2 = base2 - h\n        L3 = base2 + h\n        L4 = base1 - h\n\n        # Find the average of the lengths of the trapezium\n        A1 = (L1 + L2) / 2\n        A2 = (L3 + L4) / 2\n\n        # Find the median length of the trapezium\n        if A1 > A2:\n            median = A2\n        else:\n            median = A1\n\n    return median",
        "test": "assert median_trapezium(1,2,3) == 1.5",
        "num_ids": 1001
    },
    {
        "number": 433,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Loop through the array and check if the number is greater than any element of the array\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 611
    },
    {
        "number": 434,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"abacaba\") == True",
        "num_ids": 1528
    },
    {
        "number": 435,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])",
        "test": "assert last_Digit(123) == 3",
        "num_ids": 463
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([]) == []",
        "num_ids": 472
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and returns a new string with odd characters removed.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2!= 0:\n            new_str += char\n    return new_str",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 505
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = []\n    for item in test_list:\n        if len(item) > 1:\n            if item[0] not in bidirectional:\n                bidirectional.append(item[0])\n            if item[-1] not in bidirectional:\n                bidirectional.append(item[-1])\n    return len(bidirectional)",
        "test": "assert count_bidirectional([(1,2), (3,4), (5,6), (7,8), (1,3), (1,5), (2,5)]) == 8",
        "num_ids": 743
    },
    {
        "number": 439,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 427
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Find the first adverb and its position in a given sentence.\n    '''\n    # Extract all adverbs from the sentence\n    adverbs = re.findall(r'\\b(a|an|the)\\b', text)\n    \n    # Initialize the first adverb as the longest and second as the second longest\n    first_adverb = len(text) + 1\n    second_adverb = 0\n    \n    # Iterate over all adverbs, updating the first_adverb and second_adverb as needed\n    for adverb in adverbs:\n        if len(adverb) > first_adverb:\n            first_adverb = len(adverb)\n        elif len(adverb) > second_adverb:\n            second_adverb = len(adverb)\n    \n    # Return the first and second longest adverbs as a tuple of tuples, where each tuple contains the position of the first and second longest adverbs\n    return ((first_adverb, second_adverb), (len(text) - second_adverb, len(text) - first_adverb))",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog.\") == (3, \"over\")",
        "num_ids": 1234
    },
    {
        "number": 441,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3",
        "test": "assert surfacearea_cube(4) == 64",
        "num_ids": 414
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count = 0\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n            count += 1\n    return count / len(nums) if count > 0 else 0",
        "test": "assert positive_count([1]) == 1",
        "num_ids": 769
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')  # initializing largest to negative infinity\n    for num in list1: \n        if num < 0:  # checking if the number is negative\n            largest = max(largest, num)  # updating largest if the number is larger\n    return largest  # returning the largest negative number from the list",
        "test": "assert largest_neg([-5,-3,4,2,-7]) == -3",
        "num_ids": 590
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # create a new list without kth tuple\n    new_list = [x for x in test_list if x!= test_list[0]]\n\n    # trim each tuple by k\n    trimmed_list = [new_list[i:i+K] for i in range(0, len(new_list), K)]\n\n    # return the trimmed list\n    return trimmed_list",
        "test": "assert trim_tuple([], 2) == []",
        "num_ids": 689
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    # initialize a new tuple to store the result\n    result_tup = ()\n    \n    # loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # calculate the product of the i-th element of the first tuple and all elements of the second tuple\n        product = test_tup1[i] * test_tup2[0]\n        \n        # add the product to the result tuple\n        result_tup = tuple(result_tup) + (product,)\n    \n    # return the result tuple\n    return result_tup",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == ((1*4 + 2*5 + 3*6), (4*4 + 5*5 + 6*6))",
        "num_ids": 942
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    # Return a Counter object with the count of elements in the list\n    return Counter(lst)",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), [2, 3, 4, 5]) == {2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 697
    },
    {
        "number": 447,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 559
    },
    {
        "number": 448,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nprint(cal_sum(10))  # Output: 133167",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 486
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(l) < l:\n        return None\n    else:\n        return str.split(l[0])[1:l+1]",
        "test": "assert extract_string(\"hello world\", 8) == \"world\"",
        "num_ids": 707
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove whitespaces\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2",
        "test": "assert remove_whitespaces(\"     this is a test     \") == \"thisisatest\"",
        "num_ids": 525
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost",
        "test": "assert loss_amount(300, 400) == 100",
        "num_ids": 429
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    Write a Python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            sum_of_factors += i\n    return sum_of_factors",
        "test": "assert sumofFactors(20) == 15, \"The sum of even factors of 20 is not 15.\"",
        "num_ids": 644
    },
    {
        "number": 454,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Match a word containing 'z' in the given text.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n\ntext = 'The quick brown fox jumps over the lazy dog.'\nprint(text_match_wordz(text))  # True",
        "test": "assert text_match_wordz('hello world') is False",
        "num_ids": 613
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum % 4 == 0 and (monthnum % 100!= 0 or monthnum % 400 == 0):\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(1) == False",
        "num_ids": 601
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 540
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize min_length and min_sublist with None\n    min_length = float('inf')\n    min_sublist = None\n    # loop through the list to find the sublist with minimum length\n    for i in range(len(lst)): \n        # loop through the remaining list to find the sublist with smaller length\n        for j in range(i+1, len(lst)): \n            # compare the lengths of the sublists\n            if len(lst[i:j]) < min_length: \n                # update min_length and min_sublist\n                min_length = len(lst[i:j])\n                min_sublist = lst[i:j]\n    return min_sublist",
        "test": "assert Find_Min([1,2,3]) == [1]",
        "num_ids": 836
    },
    {
        "number": 458,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 374
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string using regular expressions.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    result = pattern.sub('', str1)\n    return result",
        "test": "assert remove_uppercase(\"\") == \"\"",
        "num_ids": 633
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]",
        "test": "assert Extract([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 599
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello world\") == 5 # the assert statement should be true",
        "num_ids": 428
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def combinations_list(list1):\n    '''\n    Find all possible combinations of the elements of a given list.\n\n    Args:\n    - list1 (list): A list of elements.\n\n    Returns:\n    - list: A list of all possible combinations of the elements of the input list.\n    '''\n    # Create an empty list to store the combinations\n    combinations = []\n\n    # Base case: if the input list is empty, add the empty list as a single element to the output list\n    if len(list1) == 0:\n        combinations.append([])\n\n    # Recursive case: if the input list has more than one element, loop through all possible combinations of the first element\n    else:\n        for i in range(len(list1)):\n            # Create a new list without the first element\n            new_list = list1[:i] + list1[i+1:]\n\n            # Recursively add the remaining elements to the combinations list\n            combinations_list(new_list)\n\n            # Loop through all possible combinations of the new list\n            for combination in combinations:\n                # Add the new list to the end of each combination\n                combinations.append(new_list + combination)\n\n    # Return the final list of combinations\n    return combinations",
        "test": "assert combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5]]",
        "num_ids": 1443
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_subarray_product(arr):\n    '''\n    Find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        max_so_far = max(max_so_far * arr[i], max_ending_here)\n    return max_so_far",
        "test": "assert max_subarray_product([1, 2, 3, 4, 5]) == 120 ",
        "num_ids": 909
    },
    {
        "number": 464,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= n:\n            return False\n    return True",
        "test": "assert check_value({}, 1) == True",
        "num_ids": 647
    },
    {
        "number": 465,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}",
        "num_ids": 847
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product",
        "test": "assert max_product([1, 2, 3]) == 6",
        "num_ids": 803
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        first_element = test_tup[0]\n        second_element = test_tup[1]\n        if second_element - first_element == 1:\n            return first_element + second_element\n        else:\n            return None",
        "test": "assert add_pairwise((2, 3)) == (3, 5)",
        "num_ids": 865
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    # Initialize the product variable to 1\n    product = 1\n    \n    # Loop through each element in the array\n    for num in arr:\n        # Multiply the current product with the current element and store the result in a new variable\n        new_product = (product * num) % n\n        \n        # Update the product variable with the new value\n        product = new_product\n    \n    # Return the final product\n    return product",
        "test": "assert find_remainder([1, 2, 3, 4, 5], 2) == 0",
        "num_ids": 742
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n\n    Input: A list of integers.\n\n    Output: True if the list contains consecutive numbers, False otherwise.\n\n    '''\n\n    # Initialize a variable to store the last number in the list\n    last_num = None\n\n    # Iterate through each number in the list\n    for num in l:\n\n        # If the current number is the same as the last number, then the list does not contain consecutive numbers\n        if num == last_num:\n            return False\n\n        # Otherwise, update the last number\n        last_num = num\n\n    # If the list is not empty, then the last number is the same as the first number\n    if l:\n        return False\n    else:\n        return True",
        "test": "assert check_Consecutive([1, 2, 2, 3, 4]) == False",
        "num_ids": 840
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set()\n    for element in test_list1:\n        if element in test_list2:\n            intersection.add(element)\n    return tuple(intersection)",
        "test": "assert tuple_intersection([1, 2, 3], [3, 4, 5]) == (3,)",
        "num_ids": 651
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello world\", \"l\", \"y\") == \"he ollx wor\"",
        "num_ids": 509
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value using the Counter class from the collections module.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # sort the Counter object by value in ascending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n\n    # convert the sorted Counter object back to a dictionary\n    sorted_dict = {k: v for k, v in sorted_counter}\n\n    return sorted_dict",
        "test": "assert sort_counter({\"a\": 10, \"b\": 5, \"c\": 2, \"d\": 8, \"e\": 1}) == Counter({\"a\": 10, \"b\": 5, \"c\": 2, \"d\": 8, \"e\": 1})",
        "num_ids": 1175
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest",
        "test": "assert big_sum([5, 10, 15, 20, 25]) == 30",
        "num_ids": 945
    },
    {
        "number": 477,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello\") == \"hello\"",
        "num_ids": 271
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # remove lowercase substrings from the string\n    str1 = re.sub(r'\\b[a-z]\\b', '', str1)\n\n    return str1",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 588
    },
    {
        "number": 479,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])",
        "test": "assert first_Digit(0) == 0 and first_Digit(1) == 1 and first_Digit(2) == 2 and first_Digit(3) == 3 and first_Digit(4) == 4 and first_Digit(5) == 5",
        "num_ids": 455
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 506
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # find the sum of cubes of the first n natural numbers\n    cube_sum = sum(i**3 for i in range(1, n+1))\n    \n    # find the sum of the first n natural numbers\n    natural_sum = sum(i for i in range(1, n+1))\n    \n    # calculate the difference between the two sums\n    difference = cube_sum - natural_sum\n    \n    return difference",
        "test": "assert difference(100) == 0, \"The difference between the sum of cubes of the first 100 natural numbers and the sum of the first 100 natural numbers should be 0.\"",
        "num_ids": 810
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Odd_Pair(A,N):\n    # XOR of two numbers\n    xor = 0\n    for i in range(N):\n        xor ^= A[i]\n\n    # Count the number of pairs whose xor value is odd\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if xor == A[i] ^ A[j]:\n                count += 1\n                break\n\n    return count",
        "test": "assert find_Odd_Pair([1, 2, 3, 4, 5], 5) == 2",
        "num_ids": 806
    },
    {
        "number": 557,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        new_string += chr(ord(char) + 1)  # adding 1 to convert to lowercase\n    return new_string",
        "test": "assert toggle_string('Hello, World!') == 'hello, world!'",
        "num_ids": 518
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n1!= 0 or n2!= 0:\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff",
        "test": "assert digit_distance_nums(999, 999) == 0",
        "num_ids": 895
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = float('-inf')\n    max_ending_here = float('-inf')\n\n    for i in range(size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 917
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Create a set from both tuples to remove duplicates\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set back to a tuple and sort it\n    union_sorted = sorted(union_set)\n\n    # Return the sorted union as a list\n    return union_sorted",
        "test": "assert union_elements((\"apple\", \"banana\", \"orange\"), (\"orange\", \"kiwi\")) == sorted([\"apple\", \"banana\", \"kiwi\", \"orange\"])",
        "num_ids": 844
    },
    {
        "number": 562,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize a variable to store the length of longest sublist\n    max_length = 0\n\n    # iterate through the list of elements\n    for i in range(len(lst)):  \n\n        # initialize a variable to store the length of sublist\n        sub_length = 1\n\n        # iterate through the list of elements from i+1 to the end\n        for j in range(i+1, len(lst)):  \n\n            # if the elements at i and j are not equal then there is a sublist of length 1\n            if lst[i]!= lst[j]:  \n\n                # increment the sub_length by 1\n                sub_length += 1\n\n                # update the length of longest sublist if its length is greater\n                if sub_length > max_length:  \n                    max_length = sub_length  \n\n    # return the length of the longest sublist\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 848
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # create a regular expression pattern to match quotation marks\n    pattern = r'(?<=\")[\\w\\s]+(?=\")'\n    \n    # find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # return a list of values\n    return matches",
        "test": "assert extract_values(r'\"hello world\"') == ['hello world']",
        "num_ids": 791
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_Pairs(arr, n):\n    pairs = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs.add((arr[i], arr[j]))\n    return len(pairs)",
        "test": "assert count_Pairs([1,2,3,4],3) == 3",
        "num_ids": 651
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split(\"\") == []",
        "num_ids": 380
    },
    {
        "number": 566,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum of digits as 0\n    sum_of_digits = 0\n    \n    # Loop through each digit of the integer\n    while n > 0:\n        # Get the last digit of the integer\n        digit = n % 10\n        \n        # Add the digit to the sum of digits\n        sum_of_digits += digit\n        \n        # Remove the last digit from the integer\n        n = n // 10\n    \n    # Return the sum of digits\n    return sum_of_digits",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 561
    },
    {
        "number": 567,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def issort_list(list1):\n    if len(list1) == 1:\n        return True\n    elif len(list1) == 2:\n        if list1[0] > list1[1]:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(list1) - 1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True",
        "test": "assert issort_list([2, 4, 6, 8, 5]) == False",
        "num_ids": 985
    },
    {
        "number": 568,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 332
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # initialize an empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # loop through each sublist in the input list\n    for sublist in list1:\n\n        # create a new list to store the sorted sublist\n        sorted_sublist = []\n\n        # loop through each element in the sublist\n        for elem in sublist:\n\n            # check if the element is already in the sorted_sublist\n            if elem not in sorted_sublist:\n\n                # add the element to the sorted_sublist\n                sorted_sublist.append(elem)\n\n        # add the sorted sublist to the list of sorted sublists\n        sorted_sublists.append(sorted_sublist)\n\n    return sorted_sublists",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 787
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1,2,3,4,4,5]) == [1,2,3,4,5]",
        "num_ids": 743
    },
    {
        "number": 573,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 664
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate surface area of cylinder\n    surface_area = (4/3) * math.pi * r**2\n    \n    # Return surface area of cylinder\n    return surface_area",
        "test": "assert surfacearea_cylinder(3,4) == 3.0",
        "num_ids": 444
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_Sub_Array(A, B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    # Check if the length of A is greater than or equal to the length of B\n    if len(A) >= len(B): \n        # If yes, check if all the elements of A are present in B or not\n        for i in range(len(A)): \n            if A[i] not in B: \n                return False\n        return True\n    else: \n        # If not, return False\n        return False",
        "test": "assert is_Sub_Array([],[]) # empty list is sublist of any list",
        "num_ids": 988
    },
    {
        "number": 577,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return last_Digit_Factorial(n//10) * 10 + last_Digit_Factorial(n%10)",
        "test": "assert last_Digit_Factorial(5) == 5",
        "num_ids": 660
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # concatenate the three lists\n    flat_list = list1 + list2 + list3\n\n    # sort the flat list\n    flat_list.sort()\n\n    # return the flat list\n    return flat_list",
        "test": "assert interleave_lists([1,2],[3,4],[5,6]) == [1,2,3,4,5,6]",
        "num_ids": 970
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n\n    for j in test_tup2:\n        if j not in test_tup1:\n            dissimilar.append(j)\n\n    return dissimilar",
        "test": "assert find_dissimilar((\"apple\", \"banana\", \"orange\"), (\"apple\", \"banana\", \"grape\")) == [\"orange\", \"grape\"]",
        "num_ids": 830
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a new empty list to store the even elements\n    even_elements = []\n\n    # iterate over each nested tuple in the test tuple\n    for item in test_tuple:\n        # check if the item is a tuple and not empty\n        if isinstance(item, tuple) and len(item) > 0:\n            # iterate over each element in the tuple\n            for subitem in item:\n                # check if the element is an even number using the even_fnc function\n                if even_fnc(subitem):\n                    # append the element to the even_elements list\n                    even_elements.append(subitem)\n\n    # return the even_elements list\n    return even_elements",
        "test": "assert even_ele(\"((1, 2), (3, 4, 5), (6, 7, 8))\", lambda x: x % 2!= 0) == \"((3, 4, 5), (6, 7, 8))\"",
        "num_ids": 1387
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) ** 2\n    return area",
        "test": "assert surface_Area(2,4) == 64, \"Incorrect surface area of a square pyramid with base edge of 2 and height of 4\"",
        "num_ids": 424
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({'key1': 'value1', 'key2': 'value2'}) is False",
        "num_ids": 422
    },
    {
        "number": 583,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    if num <= 1:\n        return 1\n    else:\n        return (num * catalan_number(num-1)) / 2",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 559
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the pattern to find adverbs ending with ly\n    pattern = r'(?i)\\bly\\b'\n\n    # Find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize variables to store the positions of the adverbs\n    adverb_start = None\n    adverb_end = None\n\n    # Iterate over all matches\n    for match in matches:\n        # Determine the start and end positions of the adverb\n        start = match.start()\n        end = match.end()\n\n        # If the adverb starts with ly, update the start and end positions\n        if text[start:end].lower() == 'ly':\n            adverb_start = start\n            adverb_end = end\n\n    # Return the start and end positions of the adverb\n    if adverb_start is not None and adverb_end is not None:\n        return adverb_start, adverb_end\n    else:\n        return None, None",
        "test": "assert find_adverbs(\"It is a beautiful day.\") == \"It is a beautiful day.\"",
        "num_ids": 1351
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Function to find the n most expensive items in a given dataset.\n    '''\n    # Create a heap to store the items with their prices\n    heap = []\n    for item, price in items:\n        heapq.heappush(heap, (price, item))\n    \n    # Return the n most expensive items\n    return [heapq.heappop(heap)[1] for i in range(n)]",
        "test": "assert expensive_items([5,3,8,1,9],3) == [9,5,3]",
        "num_ids": 888
    },
    {
        "number": 586,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 702
    },
    {
        "number": 587,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    '''\n    Converts a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 330
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    largest = min(nums)\n    smallest = max(nums)\n    \n    return largest - smallest",
        "test": "assert big_diff([1]) == 0",
        "num_ids": 666
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize variables to store the count of perfect squares and the current square\n    count = 0\n    square = a\n    \n    # iterate until the square exceeds b\n    while square <= b:\n        # if the square is a perfect square, increment the count and move on to the next square\n        if square == square ** 2:\n            count += 1\n            square += 1\n        # otherwise, move on to the next square\n        else:\n            square += 1\n    \n    # return the count of perfect squares found\n    return count",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 815
    },
    {
        "number": 590,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef polar_rect(x, y):\n    '''\n    This function takes in a polar coordinate (x, y) and returns the corresponding rectangular coordinate (a, b).\n    '''\n\n    # Convert polar coordinates to radians\n    r = x\n    theta = math.radians(y)\n\n    # Calculate rectangular coordinates\n    a = r * math.cos(theta)\n    b = r * math.sin(theta)\n\n    # Return the coordinates as a tuple\n    return (a, b)",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 597
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 620
    },
    {
        "number": 592,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def binomial_Coeff(n, k):\n    coeff = 1\n    for i in range(n-1):\n        coeff *= i + 1\n    coeff *= n\n    return coeff",
        "test": "assert binomial_Coeff(0, 0) == 0, \"binomial_Coeff(0, 0) should return 0\"",
        "num_ids": 773
    },
    {
        "number": 593,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile('^(?!.*[0-9])\\d+$')\n    return pattern.sub('', ip)",
        "test": "assert removezero_ip(\"192.168.0.1\") == \"192.168.0.1\"",
        "num_ids": 643
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each element of the list\n    for num in list1:\n        # If the element is even, increment the count variable\n        if num % 2 == 0:\n            count += 1\n        # If the element is odd, reset the count variable and break out of the loop\n        else:\n            count = 0\n            break\n\n    # If there are no even numbers in the list, return 0\n    if count == 0:\n        return 0\n    # If there is only one even number in the list, return the difference of the two numbers\n    elif count == 1:\n        return list1[0] - list1[1]\n    # If there are more than one even number in the list, return the difference of the first even and first odd numbers\n    else:\n        return list1[0] - list1[count]",
        "test": "assert diff_even_odd([]) == 0, \"The function should return 0 if the list is empty.\"",
        "num_ids": 953
    },
    {
        "number": 595,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def min_Swaps(str1,str2):\n    # Initialize variables to keep track of min swaps\n    min_swaps = float('inf')\n    swaps = 0\n\n    # Convert both strings to binary\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n\n    # Iterate through each bit position\n    for i in range(len(bin1) - 1, -1, -1):\n        # Check if the bits are equal\n        if bin1[i]!= bin2[i]:\n            # Increment swaps if different\n            swaps += 1\n            # Update minimum swaps if necessary\n            if swaps < min_swaps:\n                min_swaps = swaps\n\n    return min_swaps",
        "test": "assert min_Swaps('1010', '1011') == 1, \"Test Case 2 Failed\"",
        "num_ids": 1175
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size\n\ntuple_list = (10, \"hello\", 3.14, True, 4)\nsize = tuple_size(tuple_list)\nprint(\"Tuple size:\", size)",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 1516
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n    n = len(arr1)\n    if k <= n:\n        return arr1[k-1]\n    else:\n        return None",
        "test": "assert find_kth([], [], 1) == None",
        "num_ids": 982
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize sum to 0\n    sum_of_digits = 0\n    \n    # Loop through each digit of the number\n    for digit in str(number):\n        # Convert the digit to an integer\n        digit = int(digit)\n        # Add the digit to the sum_of_digits\n        sum_of_digits += digit**3\n    \n    # Check if the sum of digits is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(123456) == False, \"The given number is armstrong.\"",
        "num_ids": 840
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sum_average(number):\n    n = number # get the input number\n    sum = 0 # initialize sum\n    count = 0 # initialize count\n    # get the first n natural numbers\n    for i in range(1, n+1):\n        sum += i # add each number to sum\n        count += 1 # increment count\n    # calculate average using sum and count\n    avg = sum/count\n    return avg",
        "test": "assert sum_average(1) == 1, \"sum_average(1) should return 1\"",
        "num_ids": 489
    },
    {
        "number": 600,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(3) == False # is even",
        "num_ids": 372
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n\n    :param str1: the string to search for a repeated character\n    :return: the first repeated character in the string or None if no repeated character is found\n    '''\n\n    # create a set to store the characters in the string\n    char_set = set(str1)\n\n    # iterate through the set and check if there are any repeated characters\n    for char in char_set:\n        if char in str1:\n            return char\n\n    # if no repeated characters are found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello world\") == \"l\"",
        "num_ids": 792
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def get_ludic(n):\n    ludic = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            ludic.append(i)\n    return ludic",
        "test": "assert get_ludic(0) == []",
        "num_ids": 684
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n\n    # Split the string into words\n    words = s.split()\n\n    # Reverse each word in the list\n    new_words = []\n    for i in range(len(words)):\n        new_words.append(words[len(words)-1-i])\n\n    # Join the reversed words back together with spaces\n    return''.join(new_words)",
        "test": "assert reverse_words(\"the quick brown fox jumps over the lazy dog\") == \"dog lazy over jumps quick the fox brown the\"",
        "num_ids": 539
    },
    {
        "number": 605,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 427
    },
    {
        "number": 606,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(0) == 0, \"radian_degree(0) should return 0.\"",
        "num_ids": 417
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Search a string for a regex pattern and return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", r'\\w+') == (\"hello\", 0, 5)",
        "num_ids": 996
    },
    {
        "number": 608,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    elif n % 2 == 0:\n        return bell_Number(n-1) + 2\n    else:\n        return bell_Number(n-1) - 1",
        "test": "assert bell_Number(5) == 10, \"b(5) is not equal to 10.\"",
        "num_ids": 670
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def remove_kth_element(list1, L):\n    # If L is 1, return the same list\n    if L == 1:\n        return list1\n    \n    # Get the length of the original list\n    n = len(list1)\n    \n    # Get the index of the kth element\n    k = n - L\n    \n    # Shuffle the list\n    shuffled_list = list1 + list1\n    \n    # Remove the kth element from the shuffled list\n    shuffled_list.pop(k)\n    \n    # Rebuild the shuffled list\n    shuffled_list = shuffled_list[:-1] + shuffled_list[-1:]\n    \n    return shuffled_list",
        "test": "assert remove_kth_element([1], 1) == [1]",
        "num_ids": 793
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # initializing max_col variable with first column of the first row\n    max_col = test_list[0][N]\n    # initializing count variable to 0\n    count = 0\n    # loop through the rest of the columns and update max_col with the max of the current column\n    for i in range(1, len(test_list)):\n        max_col = max(max_col, test_list[i][N])\n        count += 1\n    # returning the max_col\n    return max_col",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 6",
        "num_ids": 1218
    },
    {
        "number": 612,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result",
        "test": "assert merge([]) == []",
        "num_ids": 727
    },
    {
        "number": 614,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    for i in range(len(test_list)):\n        if i == 0:\n            cumulative_sum.append(test_list[i])\n        else:\n            cumulative_sum.append(cumulative_sum[i-1] + test_list[i])\n    return cumulative_sum",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 806
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # Initialize an empty list to store the average values for each tuple\n    avg_vals = []\n\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average value of each tuple in the input tuple of tuples\n        avg = sum(tup)/len(tup)\n        # Add the average value to the list of average values\n        avg_vals.append(avg)\n\n    # Return the list of average values\n    return avg_vals",
        "test": "assert average_tuple([]) == []",
        "num_ids": 949
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    # Check if the length of test_tup1 and test_tup2 are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupels must have the same length\")\n\n    # Perform the element-wise modulo operation\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n\n    # Return the result tuple\n    return tuple(result_tup)",
        "test": "assert tuple_modulo((1, 2, 3), (1, 2, 3)) == ((0, 1, 2, 3),)",
        "num_ids": 1049
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def min_Jumps(steps, d): \n    if steps == 0: \n        return 0 \n    elif d == 0: \n        return steps \n    else: \n        min_num_jumps = float('inf') \n        for i in range(1, steps+1): \n            min_num_jumps = min(min_num_jumps, min_Jumps(steps-i, d) + 1) \n        return min_num_jumps ",
        "test": "assert min_Jumps(0, 1) == 0, \"The number of jumps required for the initial state (0, 1) should be 0.\"",
        "num_ids": 878
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element wise.\n    '''\n    div = []\n    for num1, num2 in zip(nums1, nums2):\n        div.append(num1/num2)\n    return div",
        "test": "assert div_list([1, 2, 3, 4], [5, 6, 7, 8]) == [0, 0, 0, 1]",
        "num_ids": 826
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the given string into individual numbers\n    num_list = [int(i) for i in test_str.split()]\n\n    # Move all the numbers to the end of the list\n    for i in range(len(num_list)-1, 0, -1):\n        num_list[i-1] = num_list[i]\n\n    # Join the numbers back into a string\n    return ''.join([str(i) for i in num_list])",
        "test": "assert move_num('123456') == '123456'",
        "num_ids": 790
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def largest_subset(a):\n    '''\n    Find the size of the largest subset of a list of numbers that satisfies every pair is divisible.\n    '''\n    # Initialize variables\n    count = 1\n    max_count = 1\n    max_size = 1\n    \n    # Loop through the list of numbers\n    for i in range(1, len(a)):\n        # Check if the current number is divisible by any of the previous numbers\n        for j in range(i):\n            if a[i] % a[j]!= 0:\n                break\n        else:\n            # If the current number is divisible by no previous numbers, update the count and size\n            count += 1\n            size = i - j + 1\n            if size > max_size:\n                max_size = size\n                max_count = count\n                \n    return max_count",
        "test": "assert largest_subset([1, 2, 3, 5, 4]) == 2, \"Incorrect result for input [1, 2, 3, 5, 4]\"",
        "num_ids": 1083
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Convert lists to arrays\n    arr1 = np.array(arr1)\n    arr2 = np.array(arr2)\n\n    # Find the middle index of arr1 and arr2\n    mid = len(arr1) // 2\n\n    # Compare the middle elements of arr1 and arr2 and determine if they are in order or not\n    if arr1[mid] < arr2[mid]:\n        arr1, arr2 = arr2, arr1\n\n    # Calculate the median of arr1 and arr2\n    median = (arr1[mid - 1] + arr2[mid]) / 2\n\n    return median",
        "test": "assert get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 4) == 4",
        "num_ids": 1437
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 638
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()",
        "test": "assert is_upper(\"HELLO WORLD\") == True",
        "num_ids": 256
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list is empty\n    if len(newList) == 0:\n        return newList\n    \n    # Swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 614
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef triangle_area(r):\n    area = math.pi * r ** 2\n    return area",
        "test": "assert triangle_area(5) == 78.53981633974483",
        "num_ids": 650
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): A list of natural numbers.\n    start (int, optional): The starting index of the array. Defaults to 0.\n    end (int, optional): The ending index of the array. Defaults to None.\n\n    Returns:\n    int: The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # Iterate through the array\n    for i in range(start, end + 1):\n        # Check if the current index is missing in the array\n        if i not in array:\n            # If the current index is missing, return it as the missing number\n            return i\n\n    # If the loop completes without finding a missing index, return the last element of the array as the missing number\n    return array[-1]",
        "test": "assert find_First_Missing([1, 3, 4, 5, 6]) == 0",
        "num_ids": 947
    },
    {
        "number": 628,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 383
    },
    {
        "number": 629,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 529
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def adjac(coord):\n    x, y = coord\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]",
        "test": "assert adjac((1,2), [(3,4)]) == [(2, 1), (4, 3)]",
        "num_ids": 968
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 532
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # create a copy of the original list\n    num_list_copy = num_list.copy()\n\n    # iterate through the list and check for zeroes\n    for i in range(len(num_list_copy)):\n        if num_list_copy[i] == 0:\n            # if a zero is found, move it to the end of the list\n            num_list_copy.pop(i)\n            num_list_copy.append(0)\n\n    return num_list_copy\n",
        "test": "assert move_zero([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]",
        "num_ids": 906
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n\n    return xor_sum\n",
        "test": "assert pair_xor_Sum([1,2,3,4,5],6) == 12",
        "num_ids": 546
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapreplace(iterable, iterable[i])\n    for i in range(n//2, 0, -1):\n        hq.heappush(iterable, iterable[i])\n    return iterable",
        "test": "assert heap_sort([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 933
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit > 0 and loss > 0:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(10000,15000) == False, \"No profit and no loss for amount 10000\"",
        "num_ids": 571
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def wind_chill(v, t):\n    # Calculate wind speed in m/s\n    wind_speed = v * 3.6\n\n    # Calculate temperature in Kelvin\n    temp = (t * 9/5) + 273.15\n\n    # Calculate wind chill index\n    chill = (temp * 7.5) - 7.5\n\n    # Round wind chill index to the nearest integer\n    chill = math.ceil(chill)\n\n    return chill",
        "test": "assert wind_chill(30, 22) == 16",
        "num_ids": 788
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name.lower() for name in sample_names]\n    sum_of_lengths = sum(len(name) for name in names)\n    return sum_of_lengths",
        "test": "assert sample_nam(\"Bob\") == 3",
        "num_ids": 787
    },
    {
        "number": 640,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern to match the parenthesis\n    pattern = r'\\(|\\)|\\[|\\]|'\n    # Use the re.sub() function to replace the pattern with an empty string\n    result = re.sub(pattern, '', items)\n    return result",
        "test": "assert remove_parenthesis(\"I love Python\") == \"I love Python\"",
        "num_ids": 519
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_nonagonal(n): \n    '''\n    Find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * (n - 1) - 1",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 522
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a given text contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): A string to be checked for 'z' except at the start and end of the word.\n\n    Returns:\n        bool: True if 'z' is present at the start and end of the word, False otherwise.\n    '''\n\n    # define a regular expression pattern to match 'z' at the start and end of the word\n    pattern = r'\\b[Zz]\\w*\\b'\n\n    # use the re.search() method to check if 'z' is present at the start and end of the word\n    result = re.search(pattern, text)\n\n    # return the result\n    return result is not None",
        "test": "assert text_match_wordz_middle('This is a test.') is False",
        "num_ids": 1067
    },
    {
        "number": 644,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Check if the length of the array is greater than k\n    if len(input) > k:\n        # Reverse the array in place\n        i = 0\n        j = len(input) - 1\n        while i < j:\n            input[i], input[j] = input[j], input[i]\n            i += 1\n            j -= 1\n    else:\n        # Return the original array if k is greater than the length of the array\n        return input\n    \n    # Return the reversed array\n    return input",
        "test": "assert reverse_Array_Upto_K(input=[1, 2, 3, 4, 5], k=2) == [5, 4, 3, 2, 1]",
        "num_ids": 1043
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 1, 'b': 2}) == (1, 2, 3, {'a': 1, 'b': 2})",
        "num_ids": 522
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def maxAverageOfPath(cost):\n    # Initialize variables\n    num_rows = len(cost)\n    num_cols = len(cost[0])\n    total_cost = 0\n    num_cells = 0\n    max_path_cost = 0\n    max_path = []\n    \n    # Find the maximum cost in each cell\n    for i in range(num_rows):\n        for j in range(num_cols):\n            total_cost += cost[i][j]\n            num_cells += 1\n    \n    # Find the maximum average of paths\n    for i in range(num_rows):\n        for j in range(num_cols):\n            path_cost = 0\n            path = []\n            \n            # Explore the cells in the current cell\n            while i > 0 and cost[i-1][j] <= cost[i][j]:\n                path_cost += cost[i-1][j]\n                path.append((i-1,j))\n                i -= 1\n            \n            while j > 0 and cost[i][j-1] <= cost[i][j]:\n                path_cost += cost[i][j-1]\n                path.append((i,j-1))\n                j -= 1\n            \n            # Add the path to the list of paths with the maximum cost\n            if path_cost > max_path_cost:\n                max_path_cost = path_cost\n                max_path = [(i,j)]\n            \n            # Backtrack to the previous cell if a path was found\n            if len(path) > 0:\n                i,j = path[-1]\n                while i > 0 and cost[i-1][j] >= cost[i][j]:\n                    path.pop()\n                    i -= 1\n                while j > 0 and cost[i][j-1] >= cost[i][j]:\n                    path.pop()\n                    j -= 1\n    \n    # Compute the average cost of the maximum path\n    average_cost = total_cost / num_cells\n    \n    return average_cost, max_path",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5",
        "num_ids": 2490
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students",
        "test": "assert filter_data({'Alice': (180, 80), 'Bob': (170, 75), 'Charlie': (165, 75), 'David': (175, 85)}, 170, 80) == [('Alice', (170, 80)), ('Bob', (170, 75)), ('Charlie', (170, 75))]",
        "num_ids": 1049
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [0, 1]",
        "num_ids": 847
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def power_base_sum(base, power):\n    # Initialize the sum variable with 0\n    sum = 0\n\n    # Loop through each digit of the base\n    for digit in str(base):\n        # Multiply the sum by the power of the digit\n        sum = sum * int(digit)\n\n    # Calculate the sum of the digits of the base to the power\n    return sum",
        "test": "assert power_base_sum(2, 0) == 0, \"The sum of all digits of 2 to the power of 0 should be 0\"",
        "num_ids": 934
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    # create a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"[^\"]*\"', re.MULTILINE)\n    # find all matches of the pattern in the string\n    matches = pattern.findall(text)\n    # return a list of values\n    return matches",
        "test": "assert extract_quotation('This is a test \"string\" containing \"quotes\" and \"backslashes\"') == \"This is a test string containing quotes and backslashes\"",
        "num_ids": 532
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result",
        "test": "assert multiply_elements((1, 2, 3)) == ((1*2) + (2*3) + (3*1))",
        "num_ids": 920
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 707
    },
    {
        "number": 730,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    # Convert list to set to remove duplicates\n    unique_nums = set(nums)\n    \n    # Create an empty list to store consecutive duplicates\n    result = []\n    \n    # Iterate through the unique numbers and add them to the result list\n    for num in unique_nums:\n        if num not in result:\n            result.append(num)\n    \n    return result",
        "test": "assert consecutive_duplicates([1, 2, 3, 3, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 749
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculates the lateral surface area of a cone given its radius and height.\n    '''\n    surface_area = math.pi * r ** 2 * h\n    return surface_area",
        "test": "assert lateralsurface_cone(10,5) == 50",
        "num_ids": 464
    },
    {
        "number": 732,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[.,\\s]', ':', text)",
        "test": "assert replace_specialchar(\"hello world\") == \"hello:world\"",
        "num_ids": 548
    },
    {
        "number": 733,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            return mid\n\n        elif A[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1  # Number not found",
        "test": "assert find_first_occurrence([1,2,3,4,5], 3) == 2 # first occurrence",
        "num_ids": 873
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize an empty dictionary to store the products of all possible sublists\n    products = {}\n    # Initialize a list to store the sublists\n    sublists = []\n    # Iterate through all possible sublists\n    for i in range(n):\n        # Create a new sublist starting from i\n        sublist = arr[i:]\n        # If the product of sublist is not already in the dictionary, add it\n        if sublist not in products:\n            products[sublist] = 1\n        # If the product of sublist is already in the dictionary, increment its count\n        else:\n            products[sublist] += 1\n        # If the sublist is empty, add it to the sublists list\n        if len(sublist) == 0:\n            sublists.append(i)\n    # Initialize the sum of products to 0\n    total_sum = 0\n    # Iterate through each sublist and calculate the products\n    for i in range(len(sublists)):\n        # Calculate the product of all elements in the current sublist\n        prod = 1\n        for j in range(sublists[i], sublists[i] + len(sublist)):\n            prod *= arr[j]\n        # Add the product to the total sum\n        total_sum += prod\n    return total_sum",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,4,5]) == 120 ",
        "num_ids": 1804
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def set_middle_bits(n):\n    # Get the middle 4 bits of n and store them in a variable\n    mid = n & 0xf\n    \n    # Toggle the first and last bits of the number using XOR\n    n ^= (mid << 4)\n    \n    # Get the middle 4 bits of n again and store them in a variable\n    mid = n & 0xf\n    \n    # Toggle the first and last bits of the number again using XOR\n    n ^= (mid << 4)\n    \n    # Return the modified number\n    return n",
        "test": "assert set_middle_bits(0) == 0, \"set_middle_bits(0) should return 0.\"",
        "num_ids": 766
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 5) == 2",
        "num_ids": 893
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else:\n        return False",
        "test": "assert check_str('apple') == True",
        "num_ids": 522
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    :param n: the integer n\n    :return: the geometric sum of n-1\n    \"\"\"\n\n    if n == 1:\n        return 1\n\n    return n * geometric_sum(n - 1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 666
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    \n    # Calculating the maximum number of digits in a triangular number\n    max_n = int(math.log(n, 3))\n\n    # Initializing the index to find\n    index = 0\n\n    # Looping through the digits from 1 to max_n\n    for i in range(1, max_n + 1):\n        # Checking if current index is divisible by 3\n        if n % (i*3) == 0:\n            # If it is divisible by 3, then the triangular number at current index is the smallest\n            if index == 0 or n // (i*3) < n // (index * 3):\n                index = i\n\n    return index",
        "test": "assert find_Index(3) == 1, \"Test case 1 failed\"",
        "num_ids": 1103
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    pairs = []\n    for i in range(len(test_tup) - 1):\n        pairs.append((test_tup[i], test_tup[i+1]))\n    return dict(pairs)",
        "test": "assert tuple_to_dict((1, 2, 3, 4, 5)) == {1: 2, 2: 3, 3: 4, 4: 5}",
        "num_ids": 901
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Define an empty dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in s:\n\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the dictionary and check if all the counts are equal to 1\n    for count in char_count.values():\n        if count!= 1:\n            return False\n\n    # If all the counts are equal to 1, then all the characters are same\n    return True\n",
        "test": "assert all_Characters_Same(\"hello\") == False",
        "num_ids": 670
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side * side\n    return area",
        "test": "assert area_tetrahedron(3) == 1.83",
        "num_ids": 523
    },
    {
        "number": 743,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\n    Parameters:\n    list (list): A list to rotate.\n    m (int): Number of items to rotate.\n\n    Returns:\n    list: A list with items rotated to the right.\n    '''\n\n    n = len(list)\n    for i in range(m):\n        # Swap the first and last element of the list\n        list[0], list[n-1] = list[n-1], list[0]\n        n -= 1\n\n    return list",
        "test": "assert rotate_right([1], 0) == [1]",
        "num_ids": 1025
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    This function checks if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    else:\n        return False",
        "test": "assert check_none([]) == False",
        "num_ids": 387
    },
    {
        "number": 745,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: int(x) % len(str(x)) == 0, range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 1447
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > math.pi / 2:\n        return None\n    else:\n        return math.pi * r ** 2 / 6",
        "test": "assert sector_area(2, 180) is None",
        "num_ids": 470
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 2D array to store the length of LCS for all possible substrings of length 3\n    # The length of LCS will be stored in the i-th row and j-th column\n    # Where i and j are indices of the three strings, and m, n, and o are their lengths\n    dp = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # Fill the 2D array using dynamic programming approach\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][k])\n\n    # Find the length of LCS using the 2D array\n    lcs_length = dp[m][n]\n\n    # Create a list to store the indices of all substrings of length 3\n    lcs_indices = []\n\n    # Iterate over the LCS array and find all the substrings of length 3\n    for i in range(m - 2, -1, -1):\n        for j in range(n - 2, -1, -1):\n            for k in range(o - 2, -1, -1):\n                if i == m - 1 and j == n - 1 and k == o - 1:\n                    lcs_indices.append((i, j, k))\n                    break\n                elif dp[i + 1][j + 1] == dp[i][j] + dp[i][j + 1] + dp[i + 1][k + 1]:\n                    lcs_indices.append((i, j, k))\n\n    # Reverse the list of indices to get the correct order of the substrings\n    lcs_indices.reverse()\n\n    return lcs_indices",
        "test": "assert lcs_of_three('ab', 'ab', 'ab') == ['ab']",
        "num_ids": 2809
    },
    {
        "number": 748,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    This function takes a string as input and returns a modified string with spaces between words starting with capital letters.\n    '''\n\n    # initialize a regular expression pattern to match capital letters and spaces\n    pattern = re.compile('^[A-Z][a-zA-Z0-9]*$')\n\n    # find all the matches in the input string\n    matches = re.findall(pattern, str1)\n\n    # if no matches were found, return the input string as is\n    if len(matches) == 0:\n        return str1\n\n    # initialize a string to store the modified string\n    modified_str = ''\n\n    # iterate over each match and add spaces between them\n    for match in matches:\n        modified_str +='' + match\n\n    # return the modified string\n    return modified_str",
        "test": "assert capital_words_spaces(\"This is a test string\") == \"This is a test string\"",
        "num_ids": 764
    },
    {
        "number": 749,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    # Create a list of strings and convert them to numbers\n    nums = [int(n) for n in nums_str]\n    \n    # Sort the list using the built-in sorted() function\n    sorted_nums = sorted(nums)\n    \n    # Convert the sorted list of numbers back to a list of strings\n    sorted_str = [str(n) for n in sorted_nums]\n    \n    return sorted_str",
        "test": "assert sort_numeric_strings(['123', '456', '789']) == ['123', '456', '789']",
        "num_ids": 1006
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [5, 7, 9]",
        "num_ids": 538
    },
    {
        "number": 751,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Returns True if the given array represents a min heap, False otherwise.\n    '''\n\n    # If the array has only one element, it is a min heap\n    if i == 0:\n        return True\n\n    # Check if the left child of the current element is greater than or equal to the parent element\n    if arr[i] >= arr[i // 2]:\n        return False\n\n    # Otherwise, the left child is greater than the parent\n    return check_min_heap_helper(arr, i // 2)",
        "test": "assert check_min_heap_helper([], 0) == True",
        "num_ids": 800
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        num = 1\n        count = 0\n        while count < n:\n            num += 1\n            count += 1\n            if num > n - 1:\n                break\n        return num",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1947
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def min_k(test_list, K):\n    result = []\n    min_val = float('inf')\n    for i in test_list:\n        if len(result) < K:\n            result.append(i)\n            if i[1] < min_val:\n                min_val = i[1]\n        elif i[1] < min_val:\n            result.append(i)\n            min_val = i[1]\n    return result\n",
        "test": "assert min_k([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 2) == [('a', 1), ('b', 2)]",
        "num_ids": 1066
    },
    {
        "number": 754,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def extract_index_list(l1, l2, l3):\n    # Find the intersection of all three lists\n    common_elements = set(l1) & set(l2) & set(l3)\n    # Convert the set to a list and return it\n    return list(common_elements)",
        "test": "assert extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [] # list 1 and 3 have no common element",
        "num_ids": 1054
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n\n    # sort the list in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n\n    # get the second smallest number\n    second_smallest = sorted_numbers[1]\n\n    return second_smallest",
        "test": "assert second_smallest([1, 1, 1, 1, 1]) == 1, \"Second smallest number is not 1.\"",
        "num_ids": 848
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*?b.*')\n    return pattern.match(text) is not None",
        "test": "assert text_match_zero_one(\"aabbcb\") is True",
        "num_ids": 2683
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1][::-1]:\n            count += 1\n    return count",
        "test": "assert count_reverse_pairs([1, 2, 3, 4, 5, 6]) == 0, \"The function should return 0 if the input list has duplicate elements.\"",
        "num_ids": 865
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the counts\n    counts = {}\n    # loop through the list1\n    for element in list1:\n        # if the element is not a tuple, add it to the dictionary as a new key\n        if not isinstance(element, tuple):\n            counts[element] = counts.get(element, 0) + 1\n    # return the dictionary\n    return counts",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1094
    },
    {
        "number": 759,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Remove any non-digit characters and convert to float\n        num = float(num.replace(\".\", \"\").replace(\",\", \"\"))\n\n        # Check if the number is within the specified precision range\n        if abs(num - int(num)) < 0.001:\n            return True\n\n    except ValueError:\n        pass\n\n    return False",
        "test": "assert is_decimal('123.456')",
        "num_ids": 830
    },
    {
        "number": 760,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Return True if the list contains only one distinct element, False otherwise.\n\n    The function uses a dictionary to store the count of each element in the list.\n    It then checks if the count of each element in the dictionary is 1.\n    '''\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return len(set(counts.values())) == 1",
        "test": "assert unique_Element([1, 2, 3, 4, 5, 5]) == False # check for multiple elements in list",
        "num_ids": 971
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(31) == False",
        "num_ids": 906
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_min_diff(arr, n):\n    # Create a dictionary to store the minimum difference for each element in the array\n    diff_dict = {}\n\n    # Traverse through the array and update the minimum difference for each element\n    for i in range(n):\n        for j in range(i+1, n):\n            # If the element is present in the dictionary, then add the minimum difference between the elements\n            if arr[i] in diff_dict:\n                diff_dict[arr[i]] = min(diff_dict[arr[i]], abs(j-i))\n            else:\n                diff_dict[arr[i]] = abs(j-i)\n\n    # Find the minimum difference for the last element in the array\n    min_diff = min(diff_dict.values())\n\n    # Return the minimum difference for the last element in the array\n    return min_diff",
        "test": "assert find_min_diff([1, 2, 3, 4, 5], 5) == 1",
        "num_ids": 952
    },
    {
        "number": 764,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 448
    },
    {
        "number": 765,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Calculates the nth polite number.\n    '''\n    return math.gcd(n, math.gcd(2, n//2))\n\nnth_polite = is_polite(12)\nprint(nth_polite)",
        "test": "assert is_polite(1) == True  # Test 1",
        "num_ids": 724
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([]) == []",
        "num_ids": 668
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] + arr[i+1] == sum:\n            count += 1\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum = 15\ncount = get_pairs_count(arr, sum)\nprint(count)",
        "test": "assert get_pairs_count([1,2,3,4,5], 6) == 0, \"get_pairs_count([1,2,3,4,5], 6) should return 0\"",
        "num_ids": 642
    },
    {
        "number": 769,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff\n",
        "test": "assert Diff([],[]) == []",
        "num_ids": 575
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(1, i+1):\n            for k in range(1, j+1):\n                for l in range(1, k+1):\n                    for m in range(1, l+1):\n                        for n in range(1, m+1):\n                            if i*j*k*l*m*n % 2 == 1:\n                                sum += i*j*k*l*m*n\n    return sum",
        "test": "assert odd_num_sum(10) == 116",
        "num_ids": 810
    },
    {
        "number": 771,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ('(', '{', '['):\n            stack.append(char)\n        elif char in (')', '}', ']'):\n            if len(stack) == 0:\n                return False\n            stack.pop()\n        else:\n            return False\n    if len(stack)!= 0:\n        return False\n    return True",
        "test": "assert check_expression('()') is True",
        "num_ids": 601
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word) == K:\n            new_words.append(word)\n    return''.join(new_words)",
        "test": "assert remove_length(\"Python is fun!\", 5) == \"Python is fun\"",
        "num_ids": 642
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end())\n    else:\n        return None\n\ntext = \"Hello, World! This is a test.\"\npattern = \"World!\"\nprint(occurance_substring(text, pattern))",
        "test": "assert occurance_substring(\"hello world\", \"abc\") == None",
        "num_ids": 840
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            # check if the i-th index contains odd numbers\n            if sum(nums[i::2]) % 2!= 0:\n                # check if the sum of the i-th index's odd numbers is odd\n                return False\n    return True",
        "test": "assert odd_position([1,2,3,4,5]) == True, \"odd_position([1,2,3,4,5]) should return True\"",
        "num_ids": 683
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    # create a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # initialize a variable to keep track of the number of vowels\n    count = 0\n    \n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a vowel and its neighbors exist in the list of vowels\n        if char in vowels and test_str.count(char) > 1:\n            count += 1\n            \n    # return the count of vowels\n    return count",
        "test": "assert count_vowels('hello') == 0 # No vowels are counted in this string.",
        "num_ids": 765
    },
    {
        "number": 777,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # initialize variables\n    sum = 0\n    unique_elements = []\n\n    # iterate through the list\n    for element in arr:\n        # check if the element is unique\n        if element not in unique_elements:\n            # add the element to the sum and list of unique elements\n            sum += element\n            unique_elements.append(element)\n\n    return sum",
        "test": "assert find_sum([]) == 0, \"find_sum([]) should return 0.\"",
        "num_ids": 910
    },
    {
        "number": 778,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    for item in list1:\n        if sublist and sublist[-1] == item:\n            continue\n        sublist.append(item)\n    return sublist",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 1039
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_count[sublist] = sublist_count.get(sublist, 0) + 1\n    return sublist_count\n",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1085
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Find all combinations of sums with tuples in the given tuple list.\n    '''\n    # Create a set of all unique tuples in the list\n    unique_tuples = set(test_list)\n\n    # Use itertools.combinations to find all combinations of sums with tuples\n    result = []\n    for combo in combinations(unique_tuples, len(test_list)):\n        # Check if the sum of the current combination is equal to the sum of the test list\n        if sum(combo) == sum(test_list):\n            result.append(tuple(combo))\n\n    return result",
        "test": "assert find_combinations([1, 2, 3, 4, 5]) == [[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]",
        "num_ids": 1584
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(1) == 1, \"Count of divisors should be 1 for the given number 1\"",
        "num_ids": 735
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # iterate through the array\n    for i in range(len(arr)):\n        # initialize two variables to store the current sum and the current window size\n        current_sum = 0\n        window_size = 1\n\n        # iterate through the remaining array elements\n        for j in range(i+1, len(arr)):\n            # if the current element is odd, update the sum and the window size\n            if arr[j] % 2!= 0:\n                current_sum += arr[j]\n                window_size += 1\n\n            # if the window size is odd, update the sum\n            elif window_size % 2!= 0:\n                current_sum += arr[j]\n\n            # if the window size is even and the current element is odd, update the sum\n            elif window_size % 2 == 0 and arr[j] % 2!= 0:\n                current_sum += arr[j]\n\n            # if the window size is even and the current element is even, update the sum\n            elif window_size % 2 == 0 and arr[j] % 2 == 0:\n                current_sum += arr[j]\n\n            # if the window size is odd, reset the window size\n            else:\n                window_size = 1\n\n        # update the final sum if it is odd and not the only element in the array\n        if window_size % 2!= 0 and i!= len(arr)-1:\n            current_sum += arr[i+1]\n\n    return current_sum\n",
        "test": "assert odd_length_sum([1, 3, 5, 7, 9]) == 23",
        "num_ids": 1345
    },
    {
        "number": 783,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    h, s, v = [0, 0, 0]\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        h, s = [0, 0]\n    elif max_val == r:\n        h, s = [(g - b) / delta, delta / max_val]\n    elif max_val == g:\n        h, s = [(b - r) / delta, 2 + delta / max_val]\n    elif max_val == b:\n        h, s = [(r - g) / delta, 4 + delta / max_val]\n\n    # Convert HSV to RGB\n    if h == 0:\n        r, g, b = [0, 0, 0]\n    elif s == 0:\n        r, g, b = [r, g, b]\n    else:\n        if h < 0:\n            h += 1\n        if h > 1:\n            h -= 1\n        if s == 1:\n            r, g, b = [r, g, b]\n        else:\n            i = int(h * 6)\n            f = h * 6 - i\n            p = v * (1 - s)\n            q = v * (1 - f * s)\n            t = v * (1 - (1 - f) * s)\n\n            if i == 6:\n                r, g, b = [v, t, p]\n            elif i == 0:\n                r, g, b = [p, v, q]\n            elif i == 1:\n                r, g, b = [q, v, p]\n            elif i == 2:\n                r, g, b = [p, q, v]\n            elif i == 3:\n                r, g, b = [t, v, p]\n            elif i == 4:\n                r, g, b = [p, v, t]\n            else:\n                r, g, b = [q, p, v]\n\n    return (r, g, b)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0), \"rgb_to_hsv(0, 0, 0) should return (0, 0, 0).\"",
        "num_ids": 2556
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num\n    return product",
        "test": "assert mul_even_odd([1, 2, 3, 4, 5]) == 120",
        "num_ids": 694
    },
    {
        "number": 785,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove parenthesis from the string\n    test_str = test_str.replace('(', '').replace(')', '')\n    # Convert the string to a list of integers\n    int_list = [int(x) for x in test_str.split(',')]\n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple",
        "test": "assert tuple_str_int(\"1,2,3\") == (1, 2, 3)",
        "num_ids": 562
    },
    {
        "number": 786,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return bisect.bisect_left(a, x)",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 5) == 2",
        "num_ids": 789
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Matches a string that has an a followed by three 'b' characters.\n    Returns a boolean indicating whether the match occurred or not.\n    '''\n    pattern = r'a\\bb\\b\\ba'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"abcabdabd\") is False, \"text_match_three('abcabdabd') is True\"",
        "num_ids": 1555
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str), tuple(test_list)",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'grape') == ('apple', 'banana', 'cherry')",
        "num_ids": 499
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # iterate over each even index in the list\n    for i in range(0, len(nums), 2):\n        # check if the current index contains an even number\n        if nums[i] % 2 == 0:\n            # if it does, return True\n            return True\n    # if no even numbers were found, return False\n    return False",
        "test": "assert even_position([1, 2, 3, 4, 5, 6]) == False",
        "num_ids": 713
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            result_tup.extend(remove_nested(elem))\n        else:\n            result_tup.append(elem)\n    return tuple(result_tup)\n",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 666
    },
    {
        "number": 792,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_list(input_list): \n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for i in range(len(input_list)): \n        count += 1\n    return count",
        "test": "assert count_list([1, 2, 3, 4, 5]) == 5",
        "num_ids": 554
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "test": "assert last([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 807
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(?=.*b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb(\"abcabcbb\") == True",
        "num_ids": 640
    },
    {
        "number": 796,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())",
        "test": "assert return_sum({\"apple\": 5, \"banana\": 10, \"cherry\": 15}) == 30",
        "num_ids": 583
    },
    {
        "number": 797,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n\n    # Initialize sum to 0\n    sum_ = 0\n\n    # Loop through all odd natural numbers in the range\n    for i in range(1, n+1, 2):\n        # Add the odd natural number to the sum\n        sum_ += i\n\n    # Return the sum of all odd natural numbers in the range\n    return sum_",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 649
    },
    {
        "number": 798,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def _sum(arr):\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3]) == 6",
        "num_ids": 343
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Check if d is negative\n    if d < 0:\n        # Check if d is odd\n        if d % 2 == 0:\n            # Check if n is positive\n            if n > 0:\n                # n is negative, so rotate left by half of its length\n                return left_rotate(n >> 1, d >> 1)\n            else:\n                # n is positive, so rotate left by half of its length\n                return -left_rotate(n >> 1, d >> 1)\n        else:\n            # d is odd, so n is negative, so rotate left by half of its length\n            return -left_rotate(n >> 1, d >> 1)\n    else:\n        # d is positive, so n is positive, so rotate left by d bits\n        return (n << d) | (n >> (32 - d))",
        "test": "assert left_rotate(0,1) == 0",
        "num_ids": 768
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"\") == \"\"",
        "num_ids": 441
    },
    {
        "number": 801,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(x,y+1):\n        for j in range(y,z+1):\n            if i == j == z:\n                count += 1\n    return count",
        "test": "assert test_three_equal(3, 3, 4) == 0",
        "num_ids": 657
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i < n-1 and arr[i] > arr[i+1]:\n            count += 1\n    return count",
        "test": "assert count_rotation([3, 2, 1, 4, 5]) == 2",
        "num_ids": 782
    },
    {
        "number": 803,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_perfect_square(n):\n    # Check if n is an integer\n    if not isinstance(n, int):\n        return False\n\n    # Check if n is a positive integer\n    if n < 1:\n        return False\n\n    # Check if n is equal to 1 or a power of 2\n    if n == 1 or n & (n - 1) == 0:\n        return True\n\n    # Calculate the square root of n\n    root = int(n ** 0.5)\n\n    # Check if n is equal to the square root\n    if n == root ** 2:\n        return True\n\n    # If n is not a perfect square, return False\n    return False",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 559
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_product_even(arr):\n    # Define a function to check whether a number is even or not\n    def is_even(num):\n        return num % 2 == 0\n    \n    # Define a function to multiply two numbers\n    def multiply(num1, num2):\n        return num1 * num2\n    \n    # Create a list of the input numbers\n    nums = arr\n    \n    # Check if the product of the numbers in the list is even or not\n    if all(is_even(multiply(num, num)) for num in nums):\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([2, 4, 6]) == True, \"Product of even numbers should be true\"",
        "num_ids": 635
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i, lst in enumerate(lists):\n        total = sum(lst)\n        if total > max_sum:\n            max_sum = total\n            max_list = lst\n    return max_list",
        "test": "assert max_sum_list([[5,4,3],[2,1,5],[9,8,7]]) == [13,12,11]",
        "num_ids": 856
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find the maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    i = 0\n\n    while i < len(test_str):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        if current_run > max_run:\n            max_run = current_run\n\n        i += 1\n\n    return max_run",
        "test": "assert max_run_uppercase(\"aBAcC\") == 2, \"The function should return 2 for the given input.\"",
        "num_ids": 957
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 610
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    for i in range(len(test_tup)):\n        if test_tup[i] not in test_tup[:i] or test_tup[i] not in test_tup[i+1:]:\n            return False\n    return True",
        "test": "assert check_K((1,2,3), 4) == False",
        "num_ids": 583
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2), (3, 4)) # True",
        "num_ids": 634
    }
]