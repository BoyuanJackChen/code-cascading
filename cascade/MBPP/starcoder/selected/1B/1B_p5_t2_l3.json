[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the lists to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n\n    # Convert the set to a list\n    shared_list = list(shared_set)\n\n    # Return the shared elements as a list\n    return shared_list\n",
        "test": "assert similar_elements([1,2,3],[1,2,4]) == [1,2,3]",
        "num_ids": 740
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(12) == False",
        "num_ids": 561
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    # removing the largest element from the heap\n    hq.heappop(nums)\n    # popping the largest element from the heap\n    for _ in range(n-1):\n        # inserting the smallest element from the heap\n        hq.heappushpop(nums, hq.heappop(nums))\n    return nums",
        "test": "assert heap_queue_largest([3, 7, 1, 4, 9], 4) == [9, 7, 3, 1, 4]",
        "num_ids": 863
    },
    {
        "number": 6,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    while x % 2 == 0:\n        x = x // 2\n    return x!= 0",
        "test": "assert is_Power_Of_Two(16) == True",
        "num_ids": 602
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{3,}\\b'\n    words = re.findall(pattern, text)\n    return words\n\ntext = \"This is a sample text which contains words of different lengths. Each word should be at least 4 characters long.\"\nprint(find_char_long(text))",
        "test": "assert find_char_long(\"the quick brown fox jumps over the lazy dog\") == [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]",
        "num_ids": 626
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 560
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[j] == str[i] and str[j] == str[i+1]:\n                return j - i\n            elif str[j] == str[i]:\n                return j - i\n    return -1",
        "test": "assert find_Rotations('hello') == 1",
        "num_ids": 677
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def remove_Occ(s, ch):\n    s = s.strip()  # Removing leading and trailing whitespaces from the string\n    s = s.replace(ch, '')  # Replacing the character with an empty string\n    s = s.strip()  # Removing leading and trailing whitespaces from the string\n    return s",
        "test": "assert remove_Occ('hello world', 'x') == 'hello world'",
        "num_ids": 572
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of lists to store the sums of each row\n    sums = [[0,0,0], [0,0,0], [0,0,0]]\n\n    # iterate over the matrix and update the sums for each row\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            sums[i][j] = sums[i][j] + M[i][j]\n\n    # iterate over the sums and sort the rows in ascending order\n    sorted_rows = []\n    for i in range(len(sums)):\n        sorted_rows.append([])\n        for j in range(len(sums[0])):\n            sorted_rows[i].append(sums[i][j])\n\n    # sort the rows in ascending order and return the sorted matrix\n    sorted_matrix = []\n    for row in sorted_rows:\n        sorted_matrix.append(row)\n\n    return sorted_matrix",
        "test": "assert sort_matrix([[-2, -1, -3], [2, 1, 4], [3, 4, 2]]) == [[-2, -1, -3], [2, 1, 4], [3, 4, 2]]",
        "num_ids": 1827
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_Volume(l,b,h):\n    volume = l*b*h\n    return volume\n\nl = 5\nb = 10\nh = 7\n\nprint(\"The volume of the triangular prism is:\", find_Volume(l,b,h))",
        "test": "assert find_Volume(5,4,3) == 60",
        "num_ids": 412
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression pattern to match lowercase letters followed by an underscore followed by another lowercase letter\n    pattern = re.compile(r'(?<![a-zA-Z])(?=[a-z])(?=[A-Z])')\n    \n    # Check if the input string matches the pattern\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore(\"HELLO_WORLD\") == False",
        "num_ids": 574
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter",
        "test": "assert square_perimeter(3) == 12",
        "num_ids": 337
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_chars = string[0:NO_OF_CHARS]\n    second_chars = string[NO_OF_CHARS:]\n    combined_chars = first_chars + second_chars\n    return combined_chars",
        "test": "assert str_to_list(\"hello\") == [72, 101, 108, 108, 111, 100]",
        "num_ids": 903
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) <= 1:\n        return False\n    \n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n        \n    return False",
        "test": "assert test_duplicate([]) == False, \"The function should return False for an empty array.\"",
        "num_ids": 676
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(123456789) == False",
        "num_ids": 444
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num = num//10\n    return reverse == num",
        "test": "assert rev(0) == True # 0 is one less than twice its reverse",
        "num_ids": 569
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i])\n    return max_num",
        "test": "assert find_Max_Num([1,2,3,4,5]) == 5",
        "num_ids": 793
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function takes two integers x and y as input and returns True if x and y have opposite signs, and False otherwise.\n    '''\n    if x > 0 and y > 0: \n        if x == y: \n            return False \n        else: \n            return True \n    elif x < 0 and y < 0: \n        if x == y: \n            return False \n        else: \n            return True \n    else: \n        return False",
        "test": "assert opposite_Signs(-1,2) == False # the numbers are different signs",
        "num_ids": 713
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    if n == 1:\n        return 1\n\n    # Check if n is a prime number\n    is_prime = True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        return n\n\n    # Check if n is a multiple of 3\n    if n % 3 == 0:\n        return n + 1\n\n    # Find the middle number\n    middle = n // 2\n    middle_octagonal = is_octagonal(middle)\n\n    # Check if n is the sum of the middle octagonal number and 3\n    if n == middle_octagonal + 3:\n        return n\n\n    # Check if n is the sum of the middle octagonal number and 4\n    if n == middle_octagonal + 4:\n        return n + 2\n\n    return None",
        "test": "assert is_octagonal(1) == True",
        "num_ids": 703
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    This function takes a string s as input and returns the count of substrings with sum of digits equal to their length.\n\n    The function uses the defaultdict() class from the collections module to keep track of the frequency of substrings.\n    '''\n    substrings = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings[sum(s[i:j])] += 1\n\n    return len(substrings)",
        "test": "assert count_Substrings(\"hello\") == 3",
        "num_ids": 861
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 505
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1117
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([('Alice', 80), ('Bob', 75), ('Charlie', 90), ('David', 85), ('Emily', 95), ('Frank', 70)]) == [('Emily', 95), ('Alice', 80), ('Frank', 70), ('David', 85), ('Bob', 75), ('Charlie', 90)]",
        "num_ids": 836
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Recursive function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 735
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def pos_count(lst):\n    '''\n    Counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1,2,3,4,5]) == 5",
        "num_ids": 434
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    ways = 0\n    partitions = []\n\n    # Iterate over all possible partitions of size 1\n    for p in range(1, n+1):\n        # Calculate the number of ways to partition the set\n        ways += bin(p).count('1')\n\n        # Create a list of the partitions so far\n        partitions.append(p)\n\n    return ways, partitions",
        "test": "assert bell_number(2) == 2",
        "num_ids": 460
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Monotonic(A):\n    # Check if the array is already sorted\n    if A == sorted(A):\n        return True\n    \n    # If the array is not sorted, sort it using the built-in sorted() function\n    A = sorted(A)\n    \n    # Check if the sorted array is a monotonic sequence\n    if A[-1] < A[0]:\n        return False\n    \n    # If the array is not monotonic, it is not sorted\n    return True",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 691
    },
    {
        "number": 69,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True",
        "test": "assert is_sublist([], \"\") == True",
        "num_ids": 682
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_length = True\n\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[(i+1) % len(Input)]):\n            equal_length = False\n            break\n\n    return equal_length",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 751
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    # create a helper function to swap two elements in a list\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # initialize the first element as the maximum element\n    max_elem = nums[0]\n\n    # loop through the remaining elements\n    for i in range(1, len(nums)):\n        # find the smallest element in the unsorted portion of the list\n        min_elem = nums[i]\n\n        # loop through the sorted portion of the list\n        for j in range(i):\n            # if the current element is smaller than the smallest element,\n            # swap it with the smallest element\n            if nums[j] > min_elem:\n                swap(nums, i, j)\n\n        # update the maximum element\n        max_elem = min_elem\n\n    # return the sorted list\n    return nums",
        "test": "assert comb_sort([3, 2, 1, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 963
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0: \n        return False\n    if n == 1 or n == 2: \n        return True\n    count = 0\n    for i in range(1, int(n**0.5)+1): \n        if i * i > n: \n            break\n        count += 1\n    if count % 2 == 0: \n        return True\n    else: \n        return False",
        "test": "assert dif_Square(10) == False",
        "num_ids": 778
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_samepatterns(colors, patterns):\n    for pattern in patterns:\n        if not all(color in pattern for color in colors):\n            return False\n    return True",
        "test": "assert is_samepatterns([\"red\", \"yellow\", \"green\", \"blue\"], [\"red\", \"yellow\", \"green\", \"blue\", \"red\"]) == False",
        "num_ids": 1753
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if len(t) % K == 0:\n            result.append(t)\n    return result\n",
        "test": "assert find_tuples([], 3) == []",
        "num_ids": 872
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(12) is False",
        "num_ids": 329
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return \"The length of the word is odd.\"\n    else:\n        return \"The length of the word is even.\"",
        "test": "assert word_len('banana') == 6 # if the word is \"banana\"",
        "num_ids": 465
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # Initialize variables\n    c = 0  # Counter\n    s = 1  # Sum\n\n    # Check if n is less than 10\n    if n < 10:\n        return n + 10  # n + 10 is the nth tetrahedral number\n\n    # Loop until n is a multiple of 5\n    while c < n:\n        # Calculate c^2\n        c_squared = c ** 2\n\n        # Check if c^2 is a multiple of 10\n        if c_squared % 10 == 0:\n            # If it is, add it to the sum and break out of the loop\n            s += c_squared\n            break\n\n        # Add c to the sum and increase c\n        s += c\n        c += 1\n\n    # Return the nth tetrahedral number\n    return s",
        "test": "assert tetrahedral_number(12) == 44",
        "num_ids": 968
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * r ** 3",
        "test": "assert volume_sphere(1) == 3.141592653589793, \"The volume of a sphere is not equal to 3.141592653589793.\"",
        "num_ids": 639
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII = [ord(c) for c in strr]\n    return chr(sum(ASCII) % 26)",
        "test": "assert get_Char(\"hello world\") == \"o\"",
        "num_ids": 678
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sequence(n):\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]",
        "test": "assert sequence(1) == 1",
        "num_ids": 530
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    # calculate the surface area\n    area = 4/3 * math.pi * r**3\n    \n    return area",
        "test": "assert surfacearea_sphere(2) == 229.16414338404387",
        "num_ids": 564
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def centered_hexagonal_number(n):\n    # Base case\n    if n == 1:\n        return 1\n\n    # Calculate the centered hexagonal number using the formula\n    hexagonal_number = (1 + (10 * n) // 5) ** 2\n\n    return hexagonal_number",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 834
    },
    {
        "number": 87,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 1216
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.Counter(lst)\n    return freq_dict\n\nlst = [1, 2, 3, 2, 4, 5, 6, 6, 7, 8, 9, 8, 9]\nfreq_dict = freq_count(lst)\nprint(freq_dict)",
        "test": "assert freq_count([]) == {}",
        "num_ids": 689
    },
    {
        "number": 89,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_difference = float('inf')\n    closest_num = -1\n    for i in range(1, N + 1):\n        difference = abs(i - N)\n        if difference < smallest_difference:\n            closest_num = i\n            smallest_difference = difference\n    return closest_num\n",
        "test": "assert closest_num(2) == 2",
        "num_ids": 504
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def len_log(list1):\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)\n",
        "test": "assert len_log([]) == 0",
        "num_ids": 425
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if len(str1) < len(sub_str):\n        return False\n\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n    return False",
        "test": "assert find_substring('hello world', 'world') == True",
        "num_ids": 639
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Define the sequence of numbers up to n\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    # Check if the number is in the sequence\n    if n in sequence:\n        return True\n    else:\n        return False",
        "test": "assert is_undulating(123) == False, \"123 is not undulating\"",
        "num_ids": 920
    },
    {
        "number": 93,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2, 3) == 8",
        "num_ids": 362
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))",
        "test": "assert index_minimum([(1, 'apple'), (3, 'banana'), (5, 'cherry'), (2, 'date'), (4, 'elderberry')]) == (1, 'apple')",
        "num_ids": 899
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Find the length of the smallest list in a list of lists.\n\n    The function takes a list of lists as input and returns the length of the smallest list in the list.\n\n    Example:\n        lst = [[1, 2, 3], [4, 5], [6, 7, 8]]\n        result = Find_Min_Length(lst)\n        print(result) # Output: 3\n    '''\n\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    return min_len",
        "test": "assert Find_Min_Length([[]]) == 0",
        "num_ids": 753
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(3) == 2",
        "num_ids": 492
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def frequency_lists(lst):\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the flattened list\n    for item in lst:\n        # If the element is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the frequency dictionary\n    return freq_dict",
        "test": "assert frequency_lists([1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 1206
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def multiply_num(numbers):\n    # Convert the list of numbers to a tuple to make it hashable\n    num_tuple = tuple(numbers)\n    # Multiply all the numbers in the tuple\n    total = 1\n    for i in range(len(numbers)):\n        total *= num_tuple[i]\n    # Divide the total with the length of the list\n    total /= len(numbers)\n    # Return the total\n    return total",
        "test": "assert multiply_num([1,2,3,4]) == 24",
        "num_ids": 563
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(15) == \"1111\"",
        "num_ids": 1642
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        '''\n        Return the next smallest palindrome of n.\n        '''\n        if not is_palindrome(n):\n            return n\n        while not is_palindrome(n):\n            n = n + 1\n            if n > sys.maxsize:\n                return sys.maxsize\n        return n\n\n    return next_palindrome(num)",
        "test": "assert next_smallest_palindrome(123) == 123",
        "num_ids": 1022
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        print(\"Invalid input. Please enter a positive integer k greater than or equal to 1.\")\n        return\n\n    for i in range(1, len(arr) + 1):\n        if i == k:\n            return arr[i - 1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 5) == 5",
        "num_ids": 720
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def snake_to_camel(word):\n    '''\n    Function to convert a snake case string to camel case string.\n    '''\n\n    # split the string by underscore\n    words = word.split('_')\n\n    # initialize an empty string to store the camel case string\n    camel_case = ''\n\n    # iterate over the words and append the first letter of each word to the camel case string\n    for i in range(len(words)):\n        camel_case += words[i][0] + words[i][1:]\n\n    # return the camel case string\n    return camel_case\n",
        "test": "assert snake_to_camel(\"PascalCase\") == \"PascalCase\"",
        "num_ids": 425
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1: \n        return n if n > m else m\n    if n % 2 == 0 and m % 2 == 0: \n        if n >= m: \n            return 2 * eulerian_num(n//2, m)\n        else: \n            return 2 * eulerian_num(n//2, m//2) + 1\n    else: \n        if n > m: \n            return 2 * eulerian_num(n, m//2)\n        else: \n            return 2 * eulerian_num(n, m//2) + 1\n",
        "test": "assert eulerian_num(5, 2) == 10",
        "num_ids": 821
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initialize the empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Initialize an empty list to store the sublist elements\n        temp_list = []\n\n        # Iterate over each element in the sublist and append it to the temp_list\n        for element in sublist:\n            temp_list.append(element)\n\n        # Append the temp_list to the sorted_sublists list\n        sorted_sublists.append(temp_list)\n\n    # Return the sorted_sublists list\n    return sorted_sublists",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['banana', 'apple', 'grape'], ['grape', 'banana', 'orange']]) == [['apple', 'banana', 'cherry'], ['banana', 'apple', 'grape'], ['grape', 'banana', 'orange']]",
        "num_ids": 976
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count",
        "test": "assert count([True, False, False, True, False]) == 2",
        "num_ids": 347
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup\n",
        "test": "assert add_lists([1,2,3], []) == [1,2,3]",
        "num_ids": 560
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    merged_list = []\n    # Merge the three sorted lists in ascending order\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(num1.pop(0))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(num2.pop(0))\n        else:\n            merged_list.append(num3.pop(0))\n\n    # Add the remaining elements of the three lists\n    merged_list += num1\n    merged_list += num2\n    merged_list += num3\n\n    # Return the merged sorted list\n    return merged_list\n",
        "test": "assert merge_sorted_list([1,4,5],[2,3,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1668
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through each character of the string\n    for i in range(len(s)):\n\n        # If the character is odd, increment the count\n        if ord(s[i]) % 2!= 0:\n            count += 1\n\n        # If the count exceeds the given number of times, break out of the loop\n        if count > n:\n            break\n\n    return count",
        "test": "assert odd_Equivalent(\"101110\",3) == 4, \"The function should return 4 when rotating a binary string of length 11 with an odd number of times.\"",
        "num_ids": 1080
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty list to store the common elements\n    common_elements = []\n    # loop through all the elements in the nested list\n    for element in nestedlist:\n        # loop through all the elements in the current element and append them to the common_elements list\n        for element_2 in nestedlist:\n            if element == element_2:\n                common_elements.append(element)\n                break\n    # return the common_elements list\n    return common_elements",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 937
    },
    {
        "number": 113,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_integer(text):\n    '''\n    Check if a string represents an integer or not.\n    '''\n    try:\n        int_value = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 400
    },
    {
        "number": 115,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def empty_dit(lst):\n    for i in lst:\n        if type(i) is not dict:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 288
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1,)) == 1",
        "num_ids": 468
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def list_to_float(test_list):\n    result = []\n    for item in test_list:\n        for subitem in item:\n            result.append(float(subitem))\n    return result",
        "test": "assert list_to_float([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]",
        "num_ids": 953
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_list(string): \n    '''\n    Convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list('') == []",
        "num_ids": 356
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return num\n        seen[num] = True\n    return None",
        "test": "assert search([1, 2, 3, 4, 5, 1]) == 1",
        "num_ids": 797
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Create a list of tuples to store the pairs of numbers\n    pairs = [(a, b) for a, b in list1]\n\n    # Sort the list of pairs in ascending order\n    pairs.sort()\n\n    # Initialize the maximum absolute product as the first number in the list\n    max_product = pairs[0][1]\n\n    # Iterate through the list of pairs and calculate the absolute product of the two numbers\n    for i in range(1, len(pairs)):\n        product = pairs[i][0] * pairs[i][1]\n        max_product = max(max_product, product)\n\n    # Return the maximum absolute product\n    return max_product\n",
        "test": "assert max_product_tuple([1,-2,3,4,-5]) == 50",
        "num_ids": 1224
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize an empty list to store the sum of amicable numbers\n    amicable_sum = []\n\n    # Loop through all the numbers from 1 to the given limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the number to the amicable_sum list\n            amicable_sum.append(num)\n\n    # Return the sum of all the amicable numbers\n    return sum(amicable_sum)\n\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    # Initialize two variables to store the sum and number of divisors\n    divisor = 0\n    divisors = 0\n\n    # Loop through all the numbers from 1 to the number itself\n    for i in range(1, num):\n        # If the number is divisible by the current number, increment the divisor\n        if num % i == 0:\n            divisor += i\n            divisors += 1\n\n    # Check if the divisor of the number is equal to the number itself\n    if divisor == num:\n        return True\n\n    # If no divisor is found, the number is not amicable\n    return False",
        "test": "assert amicable_numbers_sum(1000) == 49552",
        "num_ids": 1268
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    # convert complex numbers to real and imaginary parts\n    a_real = abs(a)\n    a_imag = a.imag\n    b_real = abs(b)\n    b_imag = b.imag\n    \n    # calculate the angle between the two complex numbers\n    angle = cmath.phase(a * b)\n    \n    # handle cases where the real or imaginary parts are negative\n    if a_real < 0:\n        angle += cmath.pi\n    elif a_imag < 0:\n        angle -= cmath.pi\n    \n    return angle",
        "test": "assert angle_complex(1,1) == 0",
        "num_ids": 621
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n        else:\n            break\n            \n    for i in range(len(string)):\n        if i % 2 == 0:\n            current_diff = abs(count_0 - count_1)\n            if current_diff > max_diff:\n                max_diff = current_diff\n    \n    return max_diff",
        "test": "assert find_length('11000010') == 2",
        "num_ids": 1891
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisor = 1\n    while b!= 0:\n        if a % b == 0:\n            common_divisor += 1\n        a, b = b, a % b\n    return common_divisor",
        "test": "assert sum(2,4) == 2",
        "num_ids": 682
    },
    {
        "number": 127,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 287
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def long_words(n, str):\n    words = str.split()\n    filtered_words = [word for word in words if len(word) <= n]\n    return filtered_words",
        "test": "assert long_words(5, \"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 515
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows == cols:\n        return True\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= i+j+1:\n                return False\n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) is True",
        "num_ids": 1096
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n    for num in nums:\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            max_item = num\n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 2]) == 2, \"max_occurrences([1, 2, 3, 2]) should return 2\"",
        "num_ids": 887
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    return str1[::-1][::-1]",
        "test": "assert reverse_vowels(\"a\") == \"a\"",
        "num_ids": 572
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(1) == \"1\"",
        "num_ids": 308
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sum_negativenum(nums):\n    '''\n    Calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total",
        "test": "assert sum_negativenum([]) == 0",
        "num_ids": 606
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def hexagonal_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1 + 1\n    else:\n        return (1 + 2*n) + 3*(n-1)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1213
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    total = 0\n    for num in nums:\n        if num:\n            count += 1\n            total += 1\n    return (count / total) if count > 0 else 0",
        "test": "assert zero_count([0, 0, 0, 0, 0, 0]) == 0.0",
        "num_ids": 1064
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Base Case: If n is 0, then no number can be represented as sum of powers of 2\n    if n == 0:\n        return False\n\n    # Base Case: If n is 1, then the number can be represented as sum of powers of 2\n    if n == 1:\n        return True\n\n    # Check if n is power of 2\n    if n & (n - 1) == 0: \n        # If n is a power of 2, then check if n is a sum of powers of 2\n        # (i.e., n is divisible by 2 without any remainder)\n        for i in range(32, n, 2):\n            if n % i == 0:\n                return False\n\n        # If n is a sum of powers of 2, then it can be represented as sum of powers of 2\n        return True\n\n    # If n is not a power of 2, then it cannot be represented as sum of powers of 2\n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == False",
        "num_ids": 781
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference",
        "test": "assert circle_circumference(5) == 31.4159, \"Incorrect circle circumference for radius 5.\"",
        "num_ids": 547
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def extract_singly(test_list):\n    '''\n    This function takes a list of lists as input and returns a single set of numbers.\n    '''\n    return set(flatten(test_list))\n\ndef flatten(lst):\n    '''\n    This function takes a list of lists as input and returns a single set of flattened numbers.\n    '''\n    return [item for sublist in lst for item in sublist]",
        "test": "assert extract_singly([[1, 2, 3], [4, 5], [6]]) == set([1, 2, 3, 4, 5, 6])",
        "num_ids": 786
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "test": "assert pancake_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1271
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3], [1,2,3], [4,5,6]) == 0",
        "num_ids": 925
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        count += 1\n    return count",
        "test": "assert find_lists((1,2,3)) == 3",
        "num_ids": 507
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 737
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    if a == 0:\n        return None\n    else:\n        x = (-b + b**2 - 4*a*n) / (2*a)\n        y = (-b - b**2 - 4*a*n) / (2*a)\n        if x == y and x!= None:\n            return (x, y)\n        else:\n            return None",
        "test": "assert find_solution(5, 4, 10) == None",
        "num_ids": 891
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Remove all elements from list1 that are present in list2\n    list1 = [x for x in list1 if x not in list2]\n\n    return list1",
        "test": "assert remove_elements([], []) == []",
        "num_ids": 609
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += 2 * i + (n - 2 * i - 1)\n    return sum",
        "test": "assert sum_series(0) == 0 # sum of (i=0) = 0",
        "num_ids": 773
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2 * pi * i / l\n        area += s * tan(angle)\n    return area",
        "test": "assert area_polygon(4, 5) == 12.5",
        "num_ids": 543
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\n\ndef div_sum(n):\n    divisors = []\n    for i in range(1, n+1):\n        for j in range(1, int(math.sqrt(n))+1):\n            if n % i == 0 and n % j == 0:\n                divisors.append(i)\n                divisors.append(j)\n    if len(divisors) == 2:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(15) == False, \"The sum of the divisors of 12 and 15 is equal to 30.\"",
        "num_ids": 792
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def count_char_position(str1):\n    char_count = {}\n    for char in str1.lower():\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count",
        "test": "assert count_char_position(\"Hello World!\") == 2",
        "num_ids": 929
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] & 1 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2",
        "num_ids": 709
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 614
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    # initialize an empty dictionary to store the frequency of each number\n    freq = {}\n\n    # iterate through each number in the list\n    for num in a:\n\n        # check if the number is already present in the dictionary\n        if num in freq:\n\n            # if the number is already present, increment its frequency by 1\n            freq[num] += 1\n\n        # if the number is not present in the dictionary, add it with a frequency of 1\n        else:\n\n            # add the number to the dictionary with a frequency of 1\n            freq[num] = 1\n\n    # print the frequency of each number\n    print(freq)\n",
        "test": "assert frequency(2, [1, 2, 3, 3, 3, 3]) == 2",
        "num_ids": 700
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 690
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the perimeter of the pentagon\n    perimeter = 2 * a + a + a + a\n    # return the perimeter\n    return perimeter",
        "test": "assert perimeter_pentagon(4) == 20",
        "num_ids": 585
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s' or char == 'd' or char == 't' or char == 'r':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"hello world\") == 2, \"The function should return 2 for the string 'hello world'.\"",
        "num_ids": 501
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if all elements in the tuple have the same data type\n    for element in test_tuple:\n        if type(element)!= type(test_tuple[0]):\n            return False\n    \n    # If all elements have the same data type, return True\n    return True",
        "test": "assert check_type(\"hello\") # False",
        "num_ids": 554
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    if x in count and count[x] > n//2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 3) == False  # should return False",
        "num_ids": 819
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n % 2\n        n //= 2\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 510
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def odd_values_string(str):\n    # Remove the characters which have odd index values\n    for i in range(len(str) - 1, -1, -1):\n        if i % 2!= 0:\n            break\n    \n    # Return the remaining characters as a string\n    return str[:i+1]",
        "test": "assert odd_values_string(\"Hello, World!\") == \"Hello, World\"",
        "num_ids": 552
    },
    {
        "number": 227,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def min_of_three(a,b,c):\n    return min(a,min(b,c))\n\nprint(min_of_three(5,2,1)) # Output: 1",
        "test": "assert min_of_three(5,4,3) == 3",
        "num_ids": 425
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Find the difference between the maximum value and minimum value of the given range\n    diff = r - l\n\n    # Check if all bits are set in the given range\n    if diff % n == 0:\n        return True\n    else:\n        return False",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,1,10) == False",
        "num_ids": 998
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize variables to keep track of the current and next element\n    i, j = 0, 0\n\n    # While i < n and j < n:\n    while i < n:\n        # If the current element is negative, swap it with the next positive element\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        # If the current element is positive, increment j\n        else:\n            j += 1\n\n    return arr",
        "test": "assert re_arrange_array([-1, -2, -3], 3) == [-1, -2, -3]",
        "num_ids": 1630
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)",
        "test": "assert replace_blank(\"\", \"\") == \"\"",
        "num_ids": 405
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heapq.heapify(list1) #to heapify the list\n    return heapq.nlargest(n, list1) #returns the n largest items from the list",
        "test": "assert larg_nnum([3,2,5,4,1],3) == [5,4,3]",
        "num_ids": 909
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder using the formula:\n    lateralsurface = \u03c0r^2 + 2r * h\n    '''\n    lateralsurface = 3.14159 * r**2 + 2 * r * h\n    return lateralsurface",
        "test": "assert lateralsuface_cylinder(8,3) == 35.9851, \"The lateral surface area of a cylinder with radius 8 and height 3 is not equal to 35.9851.\"",
        "num_ids": 623
    },
    {
        "number": 234,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(5) == 125",
        "num_ids": 1288
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_mask = 1  # initialize a mask of all even bits\n    \n    # iterate over the number and set the even bits\n    for i in range(len(str(n))):\n        if i % 2 == 0:  # check if the number is even\n            n = n | even_bit_mask  # if it is, set the bit to 1, otherwise set it to 0\n            even_bit_mask = even_bit_mask << 1  # shift the mask to the right by one bit\n    \n    return n",
        "test": "assert even_bit_set_number(123) == 123, \"Incorrect even_bit_set_number(123).\"",
        "num_ids": 766
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object from the list of tuples\n    counter = Counter(test_list)\n    # convert the Counter object to a dictionary\n    result = dict(counter)\n    return result",
        "test": "assert check_occurences([('apple', 2), ('banana', 1), ('apple', 3), ('pear', 2), ('apple', 1)]) == {'apple': 3, 'banana': 1, 'pear': 2}",
        "num_ids": 875
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def number_of_substrings(str):\n    # Initialize a variable to keep track of the number of non-empty substrings\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each character in the remaining string from the current index to the end of the string\n        for j in range(i+1, len(str)):\n            # Check if the substring from i to j is a non-empty substring\n            if str[i:j]!= '':\n                # Increment the count variable\n                count += 1\n    \n    # Return the count of non-empty substrings\n    return count",
        "test": "assert number_of_substrings('') == 0 # Empty string is not a substring of any string",
        "num_ids": 598
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Check if m and n are positive integers\n    if m <= 0 or n <= 0:\n        return 0\n    # Initialize variables\n    count = 0\n    prev_num = 1\n    # Calculate the number of sequences\n    for i in range(n, m + 1):\n        count += i - prev_num\n        prev_num = i\n    return count",
        "test": "assert get_total_number_of_sequences(3,3) == 2, \"There should be exactly two sequences of length 3 with each element being a positive integer greater than or equal to twice the previous element but less than or equal to 3.\"",
        "num_ids": 975
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if list2 is empty\n    if not list2:\n        # Return the original list if it is empty\n        return list1\n    \n    # Check if the last element of list1 is the same as the first element of list2\n    if list1[-1] == list2[0]:\n        # Replace the last element with the elements of list2\n        return list1[:-1] + list2\n    else:\n        # Return the original list if the last element of list1 is different from the first element of list2\n        return list1",
        "test": "assert replace_list([1,2,3,4,5], [4,5,6]) == [1,2,3,4,5]",
        "num_ids": 715
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac('hello world') == 11",
        "num_ids": 437
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    sqrtN = int(math.sqrt(N))\n    if sqrtN * sqrtN!= N:\n        sqrtN += 1\n\n    while N % sqrtN!= 0:\n        sqrtN -= 1\n\n    return sqrtN * sqrtN\n",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 1011
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n    for i in range(1, n):\n        current_sum = arr[i]\n        for j in range(i-1, -1, -1):\n            if arr[j] > current_sum:\n                current_sum = arr[j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\narr = [1, 3, 5, 7, 9]\nprint(max_sum(arr)) # Output: 12",
        "test": "assert max_sum([1, 2, 3, 4]) == 4 # correct",
        "num_ids": 1197
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a given number using the Babylonian method.\n    The algorithm is:\n    1. Set the initial guess to the number itself.\n    2. Loop until the difference between the initial guess and the square root is less than 0.001:\n       a. Compute the difference between the initial guess and the square root.\n       b. Compute the new guess by subtracting the difference from the initial guess.\n       c. Check if the difference is less than 0.001. If it is, return the new guess.\n    '''\n\n    guess = number\n    while abs(guess ** 2 - number) >= 0.001:\n        guess = guess - (guess ** 2 - number) / guess\n\n    return guess",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 873
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n\n    Args:\n    str (str): The given string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence in the string.\n    \"\"\"\n\n    # Initialize the longest palindromic subsequence length and start from 0\n    max_length = 0\n    start_index = 0\n\n    # Loop through all possible starting indices\n    for i in range(len(str)):\n\n        # Initialize a set to keep track of all substrings with the same length\n        substrings = set()\n\n        # Check all possible ending indices from i to i\n        for j in range(i, len(str)):\n\n            # If the substring is palindrome and its length is greater than the current maximum, update the start index and length\n            if str[i:j+1] == str[i:j+1][::-1] and len(str[i:j+1]) > max_length:\n                max_length = len(str[i:j+1])\n                start_index = i\n\n        # Add the current substring to the set\n        substrings.add(str[i])\n\n    # Return the length of the longest palindromic subsequence\n    return max_length",
        "test": "assert lps(\"\") == 0",
        "num_ids": 1347
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def harmonic_sum(n):\n    '''\n    Calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (1/2) * (1/n - 1/2) * ((2/n) * (1/2) * (1/n - 1/2) + ((n-1)/n) * (1/2) * (1/n - 1/2))",
        "test": "assert harmonic_sum(100) == 0.9548614864538975",
        "num_ids": 585
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Return a list of elements that appear only once in both arrays.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    # Loop through each element in the first array\n    for num in array_nums1:\n        # Loop through each element in the second array and check if they are the same\n        for other_num in array_nums2:\n            if num == other_num:\n                # If they are the same, add the element to the common list\n                common_elements.append(num)\n                # Break out of the inner loop\n                break\n    # Return the common elements list\n    return common_elements",
        "test": "assert intersection_array([1,2,3,4,5], [4,5,6,7,8]) == [4,5]",
        "num_ids": 999
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((\"apple\", \"banana\", \"orange\"), \"apple\") == 1, \"The count of 'apple' is not 1\"",
        "num_ids": 539
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(item)\n    result.insert(0, element)\n    return result",
        "test": "assert insert_element([1], 5) == [5,1]",
        "num_ids": 676
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import cmath\n\ndef convert(numbers):\n    r = numbers[0]\n    theta = numbers[1]\n    return (r, cmath.polar(cmath.exp(1j*theta), 1))",
        "test": "assert convert([1+2j, -3+4j, 5+6j]) == ([-1.5, -3.5, 5.5], [1.5, -3.5, 5.5])",
        "num_ids": 648
    },
    {
        "number": 253,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_integer(list1):\n    '''\n    Returns the number of integer elements in a given list.\n    '''\n    return sum(1 for element in list1 if isinstance(element, int))",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 429
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations of the elements of the list and return a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, n+1):\n        for j in range(i):\n            combs = combinations_with_replacement(l, i)\n            result.extend(tuple(combs))\n    return result",
        "test": "assert combinations_colors([], 0) == []  # list with no combinations",
        "num_ids": 937
    },
    {
        "number": 256,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 652
    },
    {
        "number": 257,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 366
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Find the tuple with the highest sum of elements between the two given tuples.\n    '''\n    # Initialize the max sum as 0\n    max_sum = 0\n\n    # Iterate over each element in the first tuple\n    for tup1_elem in test_tup1:\n        # Iterate over each element in the second tuple\n        for tup2_elem in test_tup2:\n            # Calculate the sum of the elements\n            sum_elem = tup1_elem + tup2_elem\n\n            # If the sum is greater than the current max sum, update the max sum and the maximum element\n            if sum_elem > max_sum:\n                max_sum = sum_elem\n                max_tup = (tup1_elem, tup2_elem)\n\n    return max_tup",
        "test": "assert maximize_elements( (1, 2), (3, 4) ) == (2, 4)",
        "num_ids": 1060
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    is_prime = True\n    current_number = 2\n    count = 0\n    \n    # Loop until the nth newman\u2013shanks\u2013williams prime number is found\n    while is_prime and count < n:\n        is_prime = False\n        for i in range(current_number, int(n**0.5)+1):\n            if current_number % i == 0:\n                is_prime = True\n                break\n        current_number += 1\n        count += 1\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return current_number",
        "test": "assert newman_prime(3) == 3, \"newman_prime(3) should return 3\"",
        "num_ids": 923
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Initialize result tuple to hold the result of division operation\n    result_tup = []\n\n    # Loop through each element in the first tuple and perform division operation on each element in the second tuple\n    for element1 in test_tup1:\n        result = element1 / test_tup2[0]\n        result_tup.append(result)\n\n    # Loop through each element in the second tuple and perform division operation on each element in the first tuple\n    for element2 in test_tup2[1:]:\n        result = element2 / test_tup1[0]\n        result_tup.append(result)\n\n    # Return the final result tuple\n    return tuple(result_tup)",
        "test": "assert division_elements((1,2,3),(4,5,6),(7,8,9)) == (0.14285714285714285, 0.15384615384615385, 0.16473616473616474)",
        "num_ids": 1236
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 850
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_old = 7 - h_age\n    return years_old",
        "test": "assert dog_age(5) == 2",
        "num_ids": 475
    },
    {
        "number": 265,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def list_split(S, step):\n    '''\n    Split a list S into a list of size n with step size step and return a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([], 1) == []",
        "num_ids": 672
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * l",
        "test": "assert lateralsurface_cube(5) == 125",
        "num_ids": 355
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a Python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each odd natural number from 1 to n\n    for i in range(1, n+1, 2):\n        # Calculate the square of the current odd natural number and add it to the sum variable\n        sum += i**2\n    # Return the sum variable\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 544
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_star_num(n):\n    '''\n    Finds then'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return find_star_num(n//2) + 2\n    else:\n        return find_star_num(n-1) + find_star_num(n) - 2",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 743
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    return ord(k)",
        "test": "assert ascii_value('A') == 65 # test case 2",
        "num_ids": 302
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:  # check if current element is even and even index is at even position\n            even_sum += arr[i]\n            even_index += 1\n\n    return even_sum, even_index",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7]) == 20",
        "num_ids": 1003
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate from 2 to n-1\n    for i in range(2, n+1):\n        # Check if the i^5 is even\n        if i**5 % 2 == 0:\n            # If it is, add it to the sum variable\n            sum += i**5\n    \n    # Return the sum of the first n even natural numbers that are raised to the fifth power\n    return sum",
        "test": "assert even_Power_Sum(10) == 25200",
        "num_ids": 831
    },
    {
        "number": 272,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n\n    rear = []\n    for i in range(len(test_list) - 1, -1, -1):\n        rear.append(test_list[i][1])\n    return rear",
        "test": "assert rear_extract([]) == []",
        "num_ids": 657
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i]-test_tup2[i] for i in range(len(test_tup1))])",
        "test": "assert substract_elements((1,2),(3,4)) == (2, 2)",
        "num_ids": 741
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    binomial_coeffs = [1] * (n + 1)\n    binomial_coeffs[0] = 1\n    for i in range(2, n + 1):\n        binomial_coeffs[i] = binomial_coeffs[i - 1] + binomial_coeffs[i - 2]\n    \n    sum_coeffs = 0\n    for i in range(n, 0, -1):\n        sum_coeffs += binomial_coeffs[i]\n    \n    return sum_coeffs",
        "test": "assert even_binomial_Coeff_Sum(3) == 3 * 2 * 1   # sum of even index binomial coefficients for n = 3",
        "num_ids": 868
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3)*np.pi*r**3*h\n    return volume",
        "test": "assert volume_cylinder(10,0) == 0",
        "num_ids": 643
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            result[key] = dict[key]\n    return result",
        "test": "assert dict_filter({}, 0) == {}",
        "num_ids": 600
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            return i + 1\n    return -1",
        "test": "assert count_first_elements((2, 3, 4, 5, 6)) == 1",
        "num_ids": 587
    },
    {
        "number": 279,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_num_decagonal(n):\n    '''\n    Function to find the nth decagonal number.\n    '''\n    # Base case: if n is 1 or n is 2, it is a decagonal number.\n    if n == 1 or n == 2:\n        return True\n    \n    # If n is odd, check if the next two numbers are decagonal.\n    if n % 2 == 1:\n        # Check if the third number is even.\n        if (n - 1) % 2 == 0:\n            return True\n    \n    # Otherwise, the nth number is a decagonal number.\n    return True",
        "test": "assert is_num_decagonal(12) == True",
        "num_ids": 853
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 833
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n\n    Returns True if all elements of the list are unique, False otherwise.\n    '''\n    # Initialize a set to keep track of unique elements\n    unique_set = set()\n\n    # Iterate over the list and add each element to the set\n    for element in test_list:\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # If the set is empty (i.e., all elements were unique), return True\n    return len(unique_set) == len(test_list)",
        "test": "assert all_unique([1, 2, 3, 2, 1, 4]) == False",
        "num_ids": 685
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sub_list(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [3, 2, 1]",
        "num_ids": 733
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def validate(n):\n    count = {}\n    for digit in str(n):\n        count[digit] = count.get(digit, 0) + 1\n    \n    for digit in count:\n        if count[digit] > 1:\n            return False\n    \n    return True",
        "test": "assert validate(123456789) == True",
        "num_ids": 551
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False",
        "test": "assert check_element([1,2,3,4,5],6) == False",
        "num_ids": 585
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"(?i)(?<=a)\\w{2,3}(?=b)\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_two_three(text))  # True",
        "test": "assert text_match_two_three(\"aabbbcccc\") == True",
        "num_ids": 630
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Update current sum and maximum sum\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n\n        # If the current sum is greater than or equal to k, update start to the current index\n        if curr_sum >= k:\n            start = i + 1\n\n        # If the current sum is less than k, move start to the next index\n        if curr_sum < k:\n            start = i + 1\n\n    # Return the maximum sum found\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, -2, 5], 5, 2) == 5",
        "num_ids": 1115
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(10) == 304 ",
        "num_ids": 613
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list",
        "test": "assert max_length([]) == []",
        "num_ids": 672
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_no_of_ways(n, k):\n    count = 0\n    for i in range(1, n):\n        count += k * (n - i)\n    return count",
        "test": "assert count_no_of_ways(3, 2) == 6",
        "num_ids": 959
    },
    {
        "number": 292,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find(n, m):\n    return round(n/m)",
        "test": "assert find(20,2)==10",
        "num_ids": 347
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    return a",
        "test": "assert otherside_rightangle(3,4) == 6",
        "num_ids": 494
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for value in listval[1:]:\n        if value > max_value:\n            max_value = value\n    return max_value",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 632
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Get the list of all numbers from 1 to the number\n    nums = [i for i in range(1, number+1)]\n\n    # Initialize the sum of divisors to zero\n    sum_div = 0\n\n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is divisible by any number in the list, add it to the sum of divisors\n        if num % number == 0:\n            sum_div += num\n\n    # Return the sum of divisors\n    return sum_div",
        "test": "assert sum_div(1) == 1",
        "num_ids": 642
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    return inv_count",
        "test": "assert get_Inv_Count([1, 3, 5, 2, 4]) == 3",
        "num_ids": 757
    },
    {
        "number": 297,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list",
        "test": "assert flatten_list([]) == []",
        "num_ids": 615
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculates the maximum aggregate from a list of tuples, where each tuple contains\n    at least two values (i.e., a key and a value).\n    '''\n\n    # Create a dictionary to store the maximum aggregate values\n    max_aggregate_dict = defaultdict(int)\n\n    # Iterate over the list of tuples and add the key and value to the dictionary\n    for key, value in stdata:\n        max_aggregate_dict[key] += value\n\n    # Find the maximum aggregate value in the dictionary\n    max_aggregate = max(max_aggregate_dict.values())\n\n    return max_aggregate",
        "test": "assert max_aggregate([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == 5",
        "num_ids": 926
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_binary_seq(n):\n    count = 0\n    binary_seq = '0' * n\n    for i in range(1, n+1):\n        binary_seq = binary_seq[:-1] + '1' + binary_seq[-1:]\n        count += int(binary_seq[i-1] == '1')\n    return count",
        "test": "assert count_binary_seq(2) == 1",
        "num_ids": 733
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key in d:\n        current_depth += 1\n        if type(d[key]) is dict:\n            depth = dict_depth(d[key])\n            if depth > max_depth:\n                max_depth = depth\n        else:\n            if current_depth > max_depth:\n                max_depth = current_depth\n    return max_depth",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 718
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr.sort(reverse=True)\n    for i in range(0,rotations):\n        arr.pop(0)\n    return arr[index]",
        "test": "assert find_Element([1,2,3,4,5],[[2,4]],[0,3],[2]) == 3",
        "num_ids": 955
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^[Pp]\\.')\n    matches = pattern.finditer(words)\n    for match in matches:\n        return (match.group(), words[match.start() + 1:match.end()].strip())\n    return None",
        "test": "assert start_withp(['apple', 'banana', 'cherry', 'date', 'elderberry', 'grape']) == ('banana', 'grape')",
        "num_ids": 774
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_prefix = []\n    max_index = 0\n\n    # Iterate through the prefix\n    for i in range(index + 1, n):\n        if i == k:\n            current_prefix.append(a[i])\n        else:\n            current_prefix.append(a[i] - current_sum + a[i - 1])\n        current_sum = max(0, current_prefix[-1] + current_sum)\n        max_index = max(max_index, i)\n\n    return max_sum, max_index",
        "test": "assert max_sum_increasing_subseq( [1, 3, 5, 2, 4, 6, 7, 8], 9, 5, 7) == 10 # (2, 6)",
        "num_ids": 1462
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Returns the colon of a tuple, assuming it has length m or less.\n    '''\n    # Get the colon by slicing the first n elements of the tuple\n    colon = tuple(tuplex[i] for i in range(min(n, len(tuplex))))\n    return colon",
        "test": "assert colon_tuplex('a',1,2)==('a',)",
        "num_ids": 742
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        nums1 (list): List of numbers from which to select one factor from each list.\n        nums2 (list): List of numbers from which to select one factor from each list.\n        N (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the largest products found.\n    '''\n    max_product = float('-inf')\n    selected = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if product > max_product:\n                max_product = product\n                selected = [num1, num2]\n\n    if len(selected) < N:\n        return []\n\n    return selected",
        "test": "assert large_product([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], 4) == 20",
        "num_ids": 1486
    },
    {
        "number": 309,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(10,20) == 20, \"The maximum of 10 and 20 is not equal to 20.\"",
        "num_ids": 327
    },
    {
        "number": 310,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('abc') == ('a', 'b', 'c')",
        "num_ids": 399
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Count the number of set bits in n\n    num_set_bits = 0\n    while n!= 0:\n        n &= (n - 1)\n        num_set_bits += 1\n\n    # Set the leftmost unset bit\n    n |= 1 << num_set_bits\n\n    return n",
        "test": "assert set_left_most_unset_bit(4) == 2",
        "num_ids": 676
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h",
        "test": "assert volume_cone(1,1) == 3.141592653589793",
        "num_ids": 654
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Define a variable to keep track of the highest power of 2 less than or equal to n\n    highest_power = 1\n    \n    # Loop through all numbers from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        # If i is a power of 2, set highest_power to i and break the loop\n        if i == i:\n            highest_power = i\n            break\n    \n    # Return the highest power of 2 less than or equal to n\n    return highest_power",
        "test": "assert highest_Power_of_2(2) == 1",
        "num_ids": 756
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    def lucas(n): \n        if n <= 1: \n            return n\n        else: \n            return lucas(n-1) + lucas(n-2)\n\n    return lucas(n)\n",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 532
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_",
        "test": "assert add_string([], \"Hello, World!\") == []",
        "num_ids": 556
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for item in l1:\n        if isinstance(item, dict):\n            for key, value in item.items():\n                if key in l2 and isinstance(value, (list, tuple)):\n                    result.setdefault(key, []).extend(value)\n                else:\n                    result[key] = value\n        else:\n            if item in l2 and isinstance(l3, (list, tuple)):\n                result.setdefault(item, []).extend(l3)\n            else:\n                result[item] = l3\n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 978
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def get_max_sum(n):\n    max_sum = float('-inf')  # Initialize maximum sum to negative infinity\n    \n    # Recursive function to find the maximum sum of n with a given sum\n    def max_sum_recursive(n, sum):\n        if n == 1:\n            return sum\n        elif n % 2 == 0:\n            return max(max_sum_recursive(n // 2, sum), max_sum_recursive(n // 2 + 1, sum))\n        elif n % 3 == 0:\n            return max(max_sum_recursive(n // 3, sum), max_sum_recursive(n // 3 + 1, sum))\n        elif n % 4 == 0:\n            return max(max_sum_recursive(n // 4, sum), max_sum_recursive(n // 4 + 1, sum))\n        elif n % 5 == 0:\n            return max(max_sum_recursive(n // 5, sum), max_sum_recursive(n // 5 + 1, sum))\n        else:\n            max_sum = max(max_sum, sum + max_sum_recursive(n - 1, sum))\n            return max_sum\n    \n    return max_sum_recursive(n, 0)",
        "test": "assert get_max_sum(15) == 55",
        "num_ids": 924
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_length_list(input_list):\n    '''\n    Given a list of strings, return the string with the maximum length.\n    '''\n\n    # Initialize variables to keep track of the current maximum length\n    max_length = 0\n    max_str = \"\"\n\n    # Loop through each string in the list\n    for str in input_list:\n        # Update the maximum length if the current string is longer\n        if len(str) > max_length:\n            max_length = len(str)\n            max_str = str\n\n    # Return the string with the maximum length\n    return max_str",
        "test": "assert max_length_list([1,2,3,4,5,6]) == [5, 6]",
        "num_ids": 823
    },
    {
        "number": 394,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)",
        "test": "assert check_distinct((\"a\", \"b\", \"c\", \"a\", \"d\", \"e\")) == False, \"The function should return False for a tuple containing duplicates.\"",
        "num_ids": 671
    },
    {
        "number": 395,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n\n    Args:\n        str1: a string\n\n    Returns:\n        the first non-repeated character in the string\n\n    Example:\n        >>> first_non_repeating_character(\"aabbcc\")\n        'c'\n\n    '''\n\n    # Create an empty dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, skip it and move on to the next character\n        if char in char_count:\n            continue\n\n        # Otherwise, add the character to the dictionary with a count of 1\n        char_count[char] = 1\n\n    # Iterate through the dictionary and check if any character has a count of 1\n    for char, count in char_count.items():\n        # If a count of 1 is found, return the character\n        if count == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None",
        "test": "assert first_non_repeating_character(\"a\") == \"a\"",
        "num_ids": 1130
    },
    {
        "number": 396,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Check if the string matches the regex pattern\n    if re.match(regex, string): \n        return True\n    else: \n        return False",
        "test": "assert check_char('abcd') == False",
        "num_ids": 587
    },
    {
        "number": 397,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def median_numbers(a, b, c):\n    # Sort the given numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle index\n    middle_index = len(sorted_numbers) // 2\n\n    # Check if the middle index is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If the middle index is even, find the average of the middle two numbers\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        # If the middle index is odd, return the middle number\n        median = sorted_numbers[middle_index]\n\n    return median",
        "test": "assert median_numbers(4,5,6) == 5 # Test case 2",
        "num_ids": 784
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, str(num)))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 663
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    # Initialize two variables to store the xor results\n    xor_result = 0\n    # Iterate over each element in the tuples and perform the xor operation\n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n    # Return the xor result\n    return xor_result",
        "test": "assert bitwise_xor(1, 3) == 0 # (1 ^ 3) = 1 ^ 2 = 3",
        "num_ids": 679
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = {}\n    for item in test_list:\n        if item in unique_tuples:\n            unique_tuples[item] += 1\n        else:\n            unique_tuples[item] = 1\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([('a', 1), ('b', 2), ('c', 1), ('d', 3), ('a', 1), ('e', 2), ('f', 1)]) == 4",
        "num_ids": 757
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create a new list to store the result\n    result_list = []\n\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the elements of the two tuples and store the result in the new list\n            result_list.append(test_tup1[i][j] + test_tup2[i][j])\n\n    return result_list",
        "test": "assert add_nested_tuples((\"apple\", \"banana\"), (\"orange\", \"grape\")) == ((\"apple\", \"banana\"), (\"orange\", \"grape\"), (\"orange\", \"grape\"))",
        "num_ids": 821
    },
    {
        "number": 404,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(1,2) == 1",
        "num_ids": 303
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((\"a\", 1, 2), (\"b\", 1, 2)) == False",
        "num_ids": 457
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"",
        "test": "assert find_Parity(15) == 1",
        "num_ids": 470
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "",
        "test": "assert rearrange_bigger(987654321) == 123456789",
        "num_ids": 821
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap for the first array\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, -num)\n\n    # Create a min heap for the second array\n    heap_second = []\n    for num in nums2:\n        heapq.heappush(heap_second, -num)\n\n    # Initialize the result list\n    result = []\n\n    # Get the k smallest pairs from the heaps\n    while len(heap) > 0 and len(heap_second) > 0:\n        min_num1 = -heapq.heappop(heap)\n        min_num2 = -heapq.heappop(heap_second)\n        result.append((min_num1, min_num2))\n        if len(result) == k:\n            break\n\n    return result",
        "test": "assert k_smallest_pairs([1,2,3,4,5], [1,2,4,5,6], 2) == [(1, 1), (2, 2), (4, 4), (5, 5), (6, 6)]",
        "num_ids": 1685
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0][0]\n    else:\n        min_product = float('inf')\n        pairs = []\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                if list1[i][1] < list1[j][1]:\n                    pairs.append((list1[i], list1[j]))\n                elif list1[i][1] > list1[j][1]:\n                    pairs.append((list1[j], list1[i]))\n                elif list1[i][1] == list1[j][1]:\n                    if list1[i][0] * list1[j][0] < min_product:\n                        min_product = list1[i][0] * list1[j][0]\n                        best_pairs = [(list1[i], list1[j])]\n                    elif list1[i][0] * list1[j][0] == min_product:\n                        best_pairs.append((list1[i], list1[j]))\n        return min_product, best_pairs",
        "test": "assert min_product_tuple([4, 2, 5, 1, 3, 6, 7]) == (14 * 5 * 7, 10 * 3 * 8)",
        "num_ids": 1381
    },
    {
        "number": 410,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    \n    return min_val",
        "test": "assert min_val([1,2,3,4,5]) == 1, \"Function min_val should return the minimum value in the given list.\"",
        "num_ids": 718
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    pattern = re.compile(\"_\")\n    camel_case_word = pattern.sub(lambda x: x.group(0)[1].upper(), word)\n    return camel_case_word",
        "test": "assert snake_to_camel(\"camelCaseString\") == \"camelCaseString\"",
        "num_ids": 577
    },
    {
        "number": 412,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_odd(l):\n    '''\n    Removes odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 581
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        raise ValueError(\"Invalid value of n.\")\n    return list1[n-1]",
        "test": "assert extract_nth_element([('apple', 1), ('banana', 2), ('cherry', 3), ('date', 4), ('elderberry', 5)], 2) == ('banana', 2)",
        "num_ids": 673
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any element in the first list is present in the second list\n    else, it returns False.\n    '''\n\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3,4,5], [2,4,6,8,10]) is True, \"Error: The overlapping function is not returning True for overlapping sequences.\"",
        "num_ids": 680
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_Product(arr):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # initialize max product to negative infinity\n    max_product = float('-inf')\n\n    # loop through the array and find the product of each pair with the highest product\n    for i in range(len(arr) - 1):\n        left_product = arr[i] * arr[i + 1]\n        right_product = arr[i + 1] * arr[i]\n\n        # update max product if necessary\n        if left_product > max_product:\n            max_product = left_product\n        if right_product > max_product:\n            max_product = right_product\n\n    # return the maximum product\n    return max_product",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20, \"The max product should be 20\"",
        "num_ids": 973
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for tup in Input:\n        if len(result) == 0:\n            result.append(tup[0])\n        elif tup[0]!= result[-1]:\n            result.append(tup[0])\n    return result",
        "test": "assert group_tuples([]) == []",
        "num_ids": 1095
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = lst[0]\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element",
        "test": "assert Find_Max([1, 2, 3, 4, 5]) == 5, \"The element of the list having maximum length is not 5.\"",
        "num_ids": 646
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += num\n    print(\"The total sum of the numbers in the list is:\", total_sum)\n    print(\"The length of the list is:\", len(list1))",
        "test": "assert round_and_sum([1,2,3,4,5]) == 15, \"round_and_sum([1,2,3,4,5]) should return 15\"",
        "num_ids": 907
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum",
        "test": "assert cube_Sum(5) == 125",
        "num_ids": 532
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += str(element)\n    return result",
        "test": "assert concatenate_tuple((\"a\", \"b\", \"c\")) == \"abc\"",
        "num_ids": 455
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_Average_Of_Cube(n):\n    # Initialize variables\n    sum_of_cubes = 0\n    count = 0\n    # Find the sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n    # Calculate the average of cubes\n    average = sum_of_cubes / count\n    # Return the average\n    return average",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 640
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple)[-1]",
        "test": "assert extract_rear((\"tuple_with_string\", \"string\")) == \"string\"",
        "num_ids": 524
    },
    {
        "number": 425,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([1, 2, 3, 2, 4, 5], 2) == 2",
        "num_ids": 754
    },
    {
        "number": 426,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 480
    },
    {
        "number": 427,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extract the year and month from the input date\n    year = int(dt[:4])\n    month = int(dt[5:7])\n    # Convert the month to a two-digit string\n    month = str(month).zfill(2)\n    # Combine the year and month into a single string\n    date = f\"{year}-{month}-{dt[8:10]}\"\n    # Extract the day and month again from the date string\n    day = int(date[5:7])\n    month = date[8:10]\n    # Convert the day to a two-digit string\n    day = str(day).zfill(2)\n    # Combine the month and day into a single string\n    formatted_date = f\"{day}-{month}-{year}\"\n    return formatted_date",
        "test": "assert change_date_format('2021-01-01') == '01-01-2021'",
        "num_ids": 1178
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # get the length of the list\n    n = len(my_list)\n\n    # initialize gap size\n    gap = n // 2\n\n    # loop through each element in the list\n    while gap > 0:\n\n        # loop through each gap size (starting from gap = n//2)\n        for i in range(gap, n):\n\n            # get the current element\n            current = my_list[i]\n\n            # initialize a variable to store the index where the current element will be placed\n            j = i\n\n            # move the current element to its correct position\n            while j >= gap and my_list[j - gap] > current:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            # place the current element at its correct position in the sorted list\n            my_list[j] = current\n\n        # update gap size\n        gap = gap // 2\n\n    return my_list",
        "test": "assert shell_sort([10, 8, 5, 2, 9]) == [2, 5, 8, 9, 10]",
        "num_ids": 1104
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extracting the tuples from the input tuples\n    a_tuple = tuple(test_tup1)\n    b_tuple = tuple(test_tup2)\n\n    # Element-wise AND operation\n    and_tuple = tuple(a_tuple & b_tuple)\n\n    # Returning the element-wise and tuples\n    return and_tuple",
        "test": "assert and_tuples((1,2,3), (4,5,7)) == (1, 5, 7)",
        "num_ids": 1077
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the determinant of the tridiagonal matrix\n    det = b*c - a*d\n    # calculate the inverse of the matrix\n    inv_det = 1/det\n    return -b*inv_det*a + c*inv_det*d",
        "test": "assert parabola_directrix(1, 2, 10) == 2, \"The directrix of the parabola (1, 2, 10) should be 2.\"",
        "num_ids": 814
    },
    {
        "number": 431,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    intersection = list(set(list1) & set(list2))\n    if len(intersection) > 0:\n        return True\n    else:\n        return False",
        "test": "assert common_element([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True",
        "num_ids": 516
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def median_trapezium(base1, base2, height):\n    # Calculate the length of the side A\n    A = base1 + base2\n\n    # Calculate the length of the side B\n    B = height - A\n\n    # Calculate the length of the trapezoid\n    trapezoid_length = 0.5 * A * B\n\n    return trapezoid_length",
        "test": "assert median_trapezium(1, 2, 5) == 3.0",
        "num_ids": 724
    },
    {
        "number": 433,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 783
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns True if there is exactly one a followed by one or more b's,\n    and False otherwise.\n    '''\n    pattern = re.compile(r'a[b]*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_one(\"abcabcbb\") == True",
        "num_ids": 2525
    },
    {
        "number": 435,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string\n    str_num = str(n)\n\n    # return the last digit\n    return int(str_num[-1])",
        "test": "assert last_Digit(123) == 3",
        "num_ids": 407
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing the negative numbers.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert neg_nos([]) == []",
        "num_ids": 514
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    This function takes a string as input and returns a new string with all the odd characters removed.\n    '''\n\n    # Initialize an empty string to store the modified string\n    modified_str = ''\n\n    # Loop through each character of the input string\n    for char in str1:\n\n        # If the character is odd, append it to the modified string\n        if char % 2!= 0:\n            modified_str += char\n\n    # Return the modified string\n    return modified_str",
        "test": "assert remove_odd('') == ''",
        "num_ids": 591
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([1, 2, 3, 4, 5, 6]) == 10",
        "num_ids": 873
    },
    {
        "number": 439,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return sum(L)\n",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 15",
        "num_ids": 514
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string argument and returns a tuple of the first adverb found\n    and the positions of its opening and closing characters in the original sentence.\n    '''\n\n    # Define a regular expression pattern for finding adverbs in the text\n    pattern = re.compile(r'\\b(very|good|bad|nice|best|worst|best\\s+day|worst\\s+day)\\b')\n\n    # Find the positions of the adverbs in the text using the regular expression pattern\n    match = re.search(pattern, text)\n\n    if match:\n        # Extract the adverb from the match object and the starting and ending indices of the match object\n        adverb = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n\n        # Return a tuple containing the adverb and its opening and closing indices\n        return (adverb, start_index, end_index)\n    else:\n        # If no adverbs are found, return None\n        return None",
        "test": "assert find_adverb_position(\"The dog barked at the bird\") == (2, 4) # adverb 2 is at position 4",
        "num_ids": 2044
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 395
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    if positive == 0:\n        return 0\n    else:\n        return positive/len(nums)",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1",
        "num_ids": 725
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest_neg:\n                largest_neg = num\n    return largest_neg",
        "test": "assert largest_neg([-5, -4, -3, -2, -1]) == -1, \"largest_neg([-5, -4, -3, -2, -1]) should return -1\"",
        "num_ids": 595
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if len(trimmed_list) == K:\n            break\n        trimmed_list.append(test_list[i])\n    return trimmed_list",
        "test": "assert trim_tuple([], 2) == []",
        "num_ids": 874
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    \n    # Check if tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuple lengths are not equal.\"\n    \n    # Iterate over tuples and perform multiplication\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    return result",
        "test": "assert index_multiplication(('a', 1, 2), ('b', 2)) == ('ab', 2, 4)",
        "num_ids": 699
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import Counter\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return count[lst]",
        "test": "assert count_Occurrence((1, 2, 3, 3, 4), [2, 2, 3]) == 2",
        "num_ids": 576
    },
    {
        "number": 447,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 518
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    s = 0\n    for i in range(1, n+1):\n        s += i**2*p\n    return s",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 727
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    size = int(input(\"Enter the size of the strings to extract: \"))\n    return [str[i:i+size] for i in range(0, len(str), size)]",
        "test": "assert extract_string(\"hello world\", 5) == \"hello\"",
        "num_ids": 642
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext1 = \"Hello, World!\"\ntext2 = \"    Hello, World    \"\n\nprint(remove_whitespaces(text1)) # Output: Hello, World!\nprint(remove_whitespaces(text2)) # Output: Hello, World",
        "test": "assert remove_whitespaces('hello world') == 'helloworld'",
        "num_ids": 503
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n\nactual_cost = 5000\nsale_amount = 5500\n\nprint(loss_amount(actual_cost, sale_amount)) # Output: 2500",
        "test": "assert loss_amount(1000,1000) == 0 # no loss amount",
        "num_ids": 652
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            sum_of_factors += i\n    return sum_of_factors",
        "test": "assert sumofFactors(7) == 5  # correct sum of even factors of 7",
        "num_ids": 652
    },
    {
        "number": 454,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*\\b\\w*\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_wordz('Hello Worldz') == True",
        "num_ids": 585
    },
    {
        "number": 455,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(13) == False",
        "num_ids": 926
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i], stringlist[-(i+1)] = stringlist[-(i+1)], stringlist[i]\n    return stringlist",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['dlrow', 'olleh', 'nohty']",
        "num_ids": 560
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def Find_Min(lst):\n    # Create a dictionary to store the frequency of each character in the list\n    freq_dict = {}\n    for char in lst:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Iterate through the list and find the sublist with minimum length\n    min_length = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        current_length = len(lst) - i\n        if current_length < min_length:\n            min_length = current_length\n            min_sublist = lst[i:]\n\n    return min_sublist",
        "test": "assert Find_Min([]) == []",
        "num_ids": 739
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b",
        "test": "assert rectangle_area(5,5) == 25",
        "num_ids": 306
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z][a-z]*\\b'\n\n    # Use the re.sub() function to replace all matches of the pattern with an empty string\n    str1 = re.sub(pattern, '', str1)\n\n    return str1",
        "test": "assert remove_uppercase('') == ''",
        "num_ids": 499
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]",
        "test": "assert Extract([]) == []",
        "num_ids": 517
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Initialize a variable to keep track of the count of upper case characters\n    upper_count = 0\n    \n    # Loop through each character in the string\n    for char in str:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Increment the count of upper case characters\n            upper_count += 1\n    \n    # Return the count of upper case characters\n    return upper_count",
        "test": "assert upper_ctr(\"\") == 0, \"upper_ctr('') should return 0.\"",
        "num_ids": 492
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(list1)\n    if n == 1:\n        return [list1]\n    else:\n        combinations = []\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                combinations.append(list1[i] + list1[j])\n        return combinations",
        "test": "assert combinations_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]",
        "num_ids": 1347
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = float('-inf')\n    \n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product",
        "test": "assert max_subarray_product([0, 1, 0, 3, 2, 1, -5, 4, -1, 2, 1, -5]) == 6",
        "num_ids": 908
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_value(dict, n):\n    # Check if all values are the same\n    all_values_same = True\n    for value in dict.values():\n        if value!= dict.get(value):\n            all_values_same = False\n            break\n    return all_values_same\n",
        "test": "assert check_value({'apple': 1, 'banana': 2, 'orange': 3}, 4) == False",
        "num_ids": 652
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 651
    },
    {
        "number": 468,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product",
        "test": "assert max_product([1,2,3,4,5]) == 120",
        "num_ids": 923
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup\n    if a == b:\n        return a\n    else:\n        return a + b",
        "test": "assert add_pairwise((\"a\", \"b\", \"c\")) == ((\"a\", \"b\", \"c\"),)",
        "num_ids": 753
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3], 5) == 1",
        "num_ids": 564
    },
    {
        "number": 472,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(1, len(l)): \n        if l[i] == l[i-1]: \n            return False \n    return True ",
        "test": "assert check_Consecutive([]) == True, \"Empty list should return True.\"",
        "num_ids": 683
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection_list.append(test_list1[i])\n    return tuple(intersection_list)\n\ntest_list1 = ('apple', 'banana', 'cherry')\ntest_list2 = ('apple', 'orange', 'grape')\n\nprint(tuple_intersection(test_list1, test_list2)) # Output: ('apple', 'orange', 'grape')",
        "test": "assert tuple_intersection([1,2,3,4,5], [3,4,5,6,7]) == (3,4,5)",
        "num_ids": 843
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"python is fun\", \"p\", \"g\") == \"pythng ifun\"",
        "num_ids": 566
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({1:2, 3:4, 5:6}) == {1:2, 3:4, 5:6}",
        "num_ids": 761
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def big_sum(nums):\n    # Finding the largest and smallest value in the array\n    max_value = max(nums)\n    min_value = min(nums)\n\n    # Calculating the sum of the largest and smallest value in the array\n    big_sum = max_value + min_value\n\n    return big_sum\n",
        "test": "assert big_sum([1, 2, 3, 4, 5, 6]) == 21",
        "num_ids": 794
    },
    {
        "number": 477,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_lower(string):\n    return string.lower()",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 246
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)",
        "test": "assert remove_lowercase(\"Python is awesome!\") == \"python is awesome\"",
        "num_ids": 465
    },
    {
        "number": 479,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = 0\n    while n > 0:\n        digit = n % 10\n        if digit == 0:\n            break\n        else:\n            first_digit = digit\n            n = n // 10\n    return first_digit",
        "test": "assert first_Digit(0) == 0  # first_Digit(0) should return 0",
        "num_ids": 467
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result",
        "test": "assert Split([1,2,3,4,5]) == [1, 3, 5]",
        "num_ids": 478
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def difference(n):\n    cubes = 0\n    for i in range(1, n+1):\n        cubes += i ** 3\n    return cubes - sum(range(1, n+1))",
        "test": "assert difference(2) == 6, \"Difference is not as expected.\"",
        "num_ids": 604
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def find_Odd_Pair(A, N):\n    # XOR the elements of A\n    xor_val = sum(A) ^ sum(A)\n    count = 0\n\n    # Iterate through A and check if any pair of elements has xor value odd\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) & 1 == 1: # check if xor value is odd\n                count += 1\n\n    return count\n",
        "test": "assert find_Odd_Pair([1,3,5,7,9], 5) == 4",
        "num_ids": 643
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper()",
        "test": "assert toggle_string(\"hello world\") == \"HELLO WORLD\"",
        "num_ids": 494
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    n1_digits = list(str(n1))\n    n2_digits = list(str(n2))\n    for i in range(min(len(n1_digits), len(n2_digits))):\n        diff = abs(int(n1_digits[i]) - int(n2_digits[i]))\n        sum_diff += diff\n    return sum_diff",
        "test": "assert digit_distance_nums(12, 12) == 0",
        "num_ids": 723
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_sub_array_sum(a, size):\n    # Initialize variables\n    max_sum = float('-inf')\n    max_ending_here = -1\n    \n    # Iterate over the array\n    for i in range(size):\n        # Calculate the sum of the current sublist\n        curr_sum = a[i]\n        \n        # Update the maximum sum and ending position\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_ending_here = i\n        \n        # Check if the sum of the sublist ending at index i is greater than max_sum\n        if i > 0 and a[i] > max_sum + a[i-1]:\n            max_sum += a[i] - max_sum - a[i-1]\n        \n        # Check if the sum of the sublist ending at index i is less than max_sum + a[i]\n        if i > 0 and a[i] < max_sum + a[i-1]:\n            max_sum += a[i] - max_sum - a[i-1]\n    \n    return max_sum",
        "test": "assert max_sub_array_sum([1], 1) == 1, \"The sum of the largest contiguous subarray [1] of length 1 is not 1.\"",
        "num_ids": 1088
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = sorted(set(test_tup1) | set(test_tup2))\n    return result",
        "test": "assert union_elements((\"a\", \"b\"), (\"c\", \"d\")) == sorted((\"a\", \"c\", \"b\", \"d\"))",
        "num_ids": 868
    },
    {
        "number": 562,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Find_Max_Length(lst):\n    max_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            max_length += 1\n            if max_length > len(lst):\n                max_length = len(lst)\n    return max_length",
        "test": "assert Find_Max_Length([1,2,3,4,5]) == 5",
        "num_ids": 642
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    # use regex to find all quotation marks in the text\n    matches = re.findall(r'\"[^\"]*\"', text)\n    # return a list of values\n    return matches",
        "test": "assert extract_values(\"\") == []",
        "num_ids": 503
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_Pairs(arr,n):\n    pairs = {}\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                if arr[i] not in pairs.keys() or arr[j] not in pairs.keys():\n                    pairs[arr[i]] = [arr[i]]\n                    pairs[arr[j]] = [arr[j]]\n                else:\n                    pairs[arr[i]].append(arr[i])\n                    pairs[arr[j]].append(arr[j])\n    return len(pairs)",
        "test": "assert count_Pairs([], 0) == 0",
        "num_ids": 637
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)",
        "test": "assert split('123456789') == ['1', '2', '3', '4', '5', '6', '7', '8', '9']",
        "num_ids": 323
    },
    {
        "number": 566,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop through each digit of the number\n    for digit in str(n):\n        # convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    \n    # return the sum\n    return sum",
        "test": "assert sum_digits(12345) == 15, \"The sum of the digits of 12345 should be 15.\"",
        "num_ids": 689
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)):\n        if list1[i] < list1[i+1]:\n            return False\n            \n    return True",
        "test": "assert issort_list([1, 5, 2, 8, 4, 1]) == False",
        "num_ids": 946
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def empty_list(length):\n    '''\n    Create a list of N empty dictionaries.\n\n    Args:\n    length: int\n        The number of empty dictionaries to create.\n\n    Returns:\n    list:\n        A list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]",
        "test": "assert empty_list(10) == [{}] * 10",
        "num_ids": 363
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list1[i].sort()\n            list1[j].sort()\n    return list1",
        "test": "assert sort_sublists([]) == [], \"Empty list should return an empty list\"",
        "num_ids": 782
    },
    {
        "number": 572,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "test": "assert two_unique_nums([1, 2, 2, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]",
        "num_ids": 805
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    unique_product = 1\n    for num in unique_nums:\n        unique_product *= num\n    return unique_product\n",
        "test": "assert unique_product([]) == 1",
        "num_ids": 598
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14 * r**2 * h",
        "test": "assert surfacearea_cylinder(1,1) == 3.14 # cylinder with radius 1 and height 1",
        "num_ids": 426
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    Args:\n        A (list): the list A.\n        B (list): the list B.\n\n    Returns:\n        bool: True if B is a sublist of A, False otherwise.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        elif A[i] < B[j]:\n            i += 1\n        else:\n            j += 1\n    return j == len(B)",
        "test": "assert is_Sub_Array([1,2,3,4,5], [2,3,6]) == False  # Check for the correct output",
        "num_ids": 834
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def last_Digit_Factorial(n):\n    last_digit = n % 10\n    factorial = 1\n    for i in range(1, last_digit + 1):\n        factorial *= i\n    return last_digit",
        "test": "assert last_Digit_Factorial(123) == 3",
        "num_ids": 692
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def interleave_lists(*lists):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for lst in lists:\n        result += lst\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1002
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # create two empty sets to store the dissimilar elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # return the intersection of the two sets\n    return set1.intersection(set2)\n",
        "test": "assert find_dissimilar((1, 2), (3, 4)) == set()",
        "num_ids": 1128
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    nested_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            nested_tuple.append(even_fnc(element))\n        else:\n            nested_tuple.append(element)\n    return nested_tuple",
        "test": "assert even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 0)",
        "num_ids": 982
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = b*s\n    return surface",
        "test": "assert surface_Area(5,3) == 15",
        "num_ids": 460
    },
    {
        "number": 582,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({1: 2, 2: 3})!= {1: 2, 3: 4} # Test if dictionary is not empty",
        "num_ids": 354
    },
    {
        "number": 583,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def catalan_number(num):\n    c = [0, 1]\n    for i in range(2, num+1):\n        c.append(c[i-1] + c[i-2])\n    return c[num]",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 1377
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"(?<=ly)[^s]*s$\"\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nmatches = find_adverbs(text)\nprint(matches) # Output: ['lazy']",
        "test": "assert find_adverbs(\"the quick brown fox jumped over the lazy dog\") == [('jumped', 4), ('over', 8)]",
        "num_ids": 768
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    if n > len(items):\n        n = len(items)\n    sorted_items = sorted(items, key=lambda x: x[1])\n    return sorted_items[:n]",
        "test": "assert expensive_items([],0) == []",
        "num_ids": 1038
    },
    {
        "number": 586,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth eelment\n    temp_list = l[:n]\n    # Add the first part of the list to the end of the list\n    temp_list.extend(l[n:])\n    return temp_list",
        "test": "assert split_Arr([], 0) == []",
        "num_ids": 776
    },
    {
        "number": 587,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 286
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def big_diff(nums):\n    # Find the smallest and largest values in the list\n    smallest = min(nums)\n    largest = max(nums)\n\n    # Find the difference between the smallest and largest values\n    diff = largest - smallest\n\n    # Return the difference\n    return diff",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 707
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize variables\n    count = 0\n    perfect_squares = []\n\n    # Loop through all numbers between a and b\n    for i in range(a, b + 1):\n        # Check if i is a perfect square\n        if i == int(i**0.5) ** 2:\n            # If yes, add i to perfect_squares list\n            perfect_squares.append(i)\n\n            # If i is greater than the sum of its half and sum of its half,\n            # then append i to the perfect_squares list.\n            if i > (i // 2) + (i // 2):\n                perfect_squares.append(i)\n\n            # Increment the count\n            count += 1\n\n    # Return the list of perfect squares\n    return perfect_squares",
        "test": "assert perfect_squares(10, 5) == 50, \"The perfect squares of 10 and 5 should be equal to 50.\"",
        "num_ids": 847
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)**2 + abs(y)**2\n    theta = cmath.phase(complex(x,y))\n    theta = theta if abs(theta) < cmath.pi/2 else 2*cmath.pi - theta\n    return r * cmath.cos(theta), r * cmath.sin(theta)",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 645
    },
    {
        "number": 591,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 667
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n\n    # Calculate the number of terms in the binomial coefficients\n    num_terms = n * (n + 1) // 2\n\n    # Loop through each term in the binomial coefficients\n    for i in range(num_terms):\n        # Add the product of the previous and current terms to the total\n        total += binomial(i, k)\n\n    # Return the total sum\n    return total\n\ndef binomial(n, k):\n    \"\"\"\n    Calculate the binomial coefficient nCr, where n and k are positive integers.\n    \"\"\"\n    # Return the binomial coefficient nCr using the formula nCr = n! / (k! * (n-k)!)\n    return binomial_coefficient(n, k, n)\n\ndef binomial_coefficient(n, k, r):\n    \"\"\"\n    Helper function to calculate the binomial coefficient nCr, where n, k, and r are positive integers.\n    \"\"\"\n    # Initialize the result to 1\n    result = 1\n\n    # Loop through each digit of n and k\n    for i in range(k):\n        # Multiply the result by the i-th digit of n\n        result *= n // (10**(r-1))\n\n        # Remove the i-th digit of n and move on to the next digit\n        n %= 10\n\n    # Return the result\n    return result",
        "test": "assert binomial_Coeff(0, 0) == 0",
        "num_ids": 1078
    },
    {
        "number": 593,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})', r'\\1.\\2.\\3.\\4', ip)",
        "test": "assert removezero_ip(\"192.168.0.1\") == \"192.168.0.1\"",
        "num_ids": 735
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def diff_even_odd(lst):\n    '''\n    Takes a list as input and returns a tuple containing the difference of the first even and first odd number.\n    '''\n    evens = [num for num in lst if num % 2 == 0]\n    odds = [num for num in lst if num % 2 == 1]\n    if len(evens) < len(odds):\n        return (evens[1] - evens[0], evens[1])\n    elif len(evens) > len(odds):\n        return (odds[1] - odds[0], odds[1])\n    else:\n        return (0, 0)",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1017
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def min_Swaps(str1, str2):\n    # check if strings are of same length\n    if len(str1)!= len(str2):\n        return \"Strings are not of same length\"\n\n    # initialize variables to keep track of swaps required and total swaps\n    swaps_required = 0\n    total_swaps = 0\n\n    # iterate through the strings and perform swaps until they are of same length\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            # swap if characters are the same\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            swaps_required += 1\n            total_swaps += 1\n        else:\n            # if characters are different, swap them\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            total_swaps += 1\n\n    # return the minimum number of swaps required\n    return swaps_required\n",
        "test": "assert min_Swaps(\"1010\", \"1001\") == 2",
        "num_ids": 1375
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list) > 0:\n        return sys.getsizeof(tuple_list[0])\n    else:\n        return 0",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 455
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # If the kth element is greater than the length of the first array, return the first element from the second array\n    if k > n1:\n        return arr2[0]\n    \n    # If the kth element is greater than the length of the second array, return the first element from the first array\n    if k > n2:\n        return arr1[0]\n    \n    # Initialize two pointers i and j to keep track of the two arrays being compared\n    i = 0\n    j = 0\n    \n    # Compare the two arrays\n    while i < n1 and j < n2:\n        # If the current element of arr1 is smaller than the current element of arr2, increment i\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If the current element of arr1 is greater than the current element of arr2, increment j\n        else:\n            j += 1\n            \n    # If the kth element is found in the first array, return the current element\n    if i == n1:\n        return arr1[k-1]\n    # If the kth element is found in the second array, return the current element\n    else:\n        return arr2[k-1]",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6], 3) == 3",
        "num_ids": 1785
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    n = number\n    while n > 0:\n        remainder = n % 10\n        sum += remainder ** 3\n        n //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(12345) == False",
        "num_ids": 630
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average\n\nsum, average = sum_average(10)\nprint(\"Sum:\", sum)\nprint(\"Average:\", average)",
        "test": "assert sum_average(10) == 55",
        "num_ids": 553
    },
    {
        "number": 600,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False",
        "test": "assert is_Even(10) # true",
        "num_ids": 365
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    str1 = str1.replace(\" \", \"\")  # remove spaces from the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    return None",
        "test": "assert first_repeated_char(\"aabbcc\") == \"a\"",
        "num_ids": 803
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Iterate over all integers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is lucid (i is a factor of n)\n        if i % n == 0:\n            # If it is, append it to the list of lucid numbers\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers",
        "test": "assert get_ludic(1) == [1] # Pass",
        "num_ids": 999
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    reversed_string =''.join(words)\n    return reversed_string",
        "test": "assert reverse_words(\"Python is awesome\") == \"iswmah pythno awesOme\"",
        "num_ids": 542
    },
    {
        "number": 605,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True #2 is a prime number",
        "num_ids": 551
    },
    {
        "number": 606,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(45) == 0.7853981633974483",
        "num_ids": 407
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Search a string for a regex pattern and return the matching subtring, a start index and an end index.\n    '''\n\n    # Define the regex pattern to search for\n    pattern_regex = re.compile(pattern)\n\n    # Find all the matches in the text\n    matches = pattern_regex.finditer(text)\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Iterate over the matches and add them to the results list\n    for match in matches:\n        results.append((match.group(), match.start(), match.end()))\n\n    return results",
        "test": "assert find_literals(\"hello world\", r\"\\d+\") == (None, 0, 5)",
        "num_ids": 808
    },
    {
        "number": 608,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth Bell number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + n",
        "test": "assert bell_Number(10) == 55, \"Incorrect value for n=10\"",
        "num_ids": 499
    },
    {
        "number": 610,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    list1.pop(k)\n    return list1\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 872
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def max_of_nth(test_list, N):\n    # Find the length of the longest row\n    max_len = max(len(row) for row in test_list)\n\n    # Create a list of zeros of the same length as the longest row\n    row_zeros = [0] * max_len\n\n    # Iterate over the matrix and fill in the columns with the max value for then'th row\n    for row in test_list:\n        for i, val in enumerate(row):\n            row_zeros[i] = max(row_zeros[i], val)\n\n    # Return the value for then'th column\n    return row_zeros[N-1]",
        "test": "assert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 3) == 9",
        "num_ids": 979
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        sublist = []\n        for j in range(len(lst[i])):\n            sublist.append(lst[i][j])\n        result.append(sublist)\n    return result",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]",
        "num_ids": 837
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum\n",
        "test": "assert cummulative_sum([1, 2, 3, 4]) == [1, 3, 5, 7] # Test case 2",
        "num_ids": 696
    },
    {
        "number": 615,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        if len(tup) == 0:\n            continue\n        else:\n            sum = 0\n            for val in tup:\n                sum += val\n            result.append(sum / len(tup))\n    return result\n",
        "test": "assert average_tuple([]) == []",
        "num_ids": 801
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n    \n    result_tup = tuple(range(len(test_tup1)))\n    result_dict = {}\n    for i in range(len(test_tup1)):\n        result_dict[i] = (test_tup1[i] - result_tup[i]) % len(test_tup1)\n    \n    return result_dict",
        "test": "assert tuple_modulo((1, 2, 3), (3, 4, 5)) == ((1, 2, 3), (2, 0, 2))",
        "num_ids": 900
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initializing variables\n    jumps = 0\n    steps -= 1\n\n    # Iterating through each position in the 2D plane\n    for i in range(steps):\n        jumps += 1\n\n        # Calculating the new position based on the previous position\n        dx = (d - i)\n        dy = 0\n\n        # Updating the position\n        if dx > 0:\n            d = d - 1\n        elif dx < 0:\n            d = d + 1\n\n        if dx!= 0 or dy!= 0:\n            jumps += 1\n\n    return jumps",
        "test": "assert min_Jumps(0, 1) == 0",
        "num_ids": 1194
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n\n    # Check if the length of nums1 and nums2 are same or not\n    if len(nums1)!= len(nums2):\n        return \"Lists cannot be divided.\"\n\n    # Create a list to store the division result\n    div_list = []\n\n    # Iterate through the lists element wise\n    for i in range(len(nums1)):\n        # Append the first num1 element to the div_list\n        div_list.append(nums1[i])\n\n    # Iterate through the lists element wise and divide them element wise\n    for i in range(len(nums2)):\n        # Create a list to store the division result of each element\n        div_list_elem = []\n\n        # Iterate through the first list\n        for j in range(len(nums1)):\n            # Append the product of the two first elements to the div_list_elem\n            div_list_elem.append(nums1[j] * nums2[i])\n\n        # Append the div_list_elem to the div_list\n        div_list.append(div_list_elem)\n\n    # Return the divided list\n    return div_list",
        "test": "assert div_list([1,2,3],[4,5,6]) == [2,3,4]",
        "num_ids": 1121
    },
    {
        "number": 619,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str.replace(r'\\d+', '', 1).lstrip('0')\n",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 800
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # Initialize variables to keep track of the maximum subset size and the set of elements in each subset\n    max_subset = 1\n    subset = set()\n    # Iterate through each number in the list\n    for i in range(n):\n        # Create a new subset if the size of the current subset is greater than the maximum subset\n        if len(subset) > max_subset:\n            max_subset = len(subset)\n            # Initialize a new subset\n            subset = {a[i]}\n        # Add the current number to the current subset\n        else:\n            subset.add(a[i])\n    return max_subset",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6]) == 3 ",
        "num_ids": 1317
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    # Sort both lists in ascending order\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the midpoint of the two sorted lists\n    mid = n // 2\n\n    # If the length of the two sorted lists is odd, the median is the middle element of the first list\n    if n % 2 == 1:\n        return arr1[mid]\n\n    # If the length of the two sorted lists is even, the median is the average of the middle two elements\n    else:\n        return (arr1[mid - 1] + arr1[mid]) / 2",
        "test": "assert get_median([1, 2, 3], [4, 5], 3) == 2",
        "num_ids": 1263
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the nth power of each number in a list.\n\n    Args:\n    - nums (list): a list of numbers to compute the nth power of\n    - n (int): the power to raise each number to\n\n    Returns:\n    - list: a new list containing the nth powers of each number in nums.\n    \"\"\"\n\n    powers = []\n    for num in nums:\n        powers.append(num ** n)\n\n    return powers",
        "test": "assert nth_nums([1,2,3,4,5],2)==[1,4,9,16,25] # nth_nums([1,2,3,4,5],2) should return [1,4,9,16,25]",
        "num_ids": 748
    },
    {
        "number": 624,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n\n    # Initialize an empty string to store the uppercase string\n    uppercase_string = ''\n\n    # Iterate through each character of the input string\n    for char in string:\n        # Convert the character to uppercase using the uppercase() method of the string class\n        uppercase_char = char.upper()\n        # Append the uppercase character to the uppercase string\n        uppercase_string += uppercase_char\n\n    return uppercase_string\n",
        "test": "assert is_upper(\"Python\") == \"PYTHON\"",
        "num_ids": 398
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 648
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Set the initial values of the variables\n    base = 0\n    height = 0\n    area = 0\n\n    # Check each side of the triangle\n    for side in range(3):\n        # Calculate the semi-perimeter\n        semi_perimeter = 2 * r * side\n\n        # Calculate the area of the triangle\n        area += 0.5 * side * (base + semi_perimeter)\n\n        # Update the values of the variables\n        if side == 0:\n            base = r - semi_perimeter / 2\n        elif side == 1:\n            height = r - semi_perimeter / 2\n        else:\n            area = min(area, 2 * r * side * (base + height))\n\n    # Return the calculated area\n    return area",
        "test": "assert triangle_area(10) == 31.41592653589793",
        "num_ids": 951
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            return mid\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return end + 1",
        "test": "assert find_First_Missing([1,2,0,4,6,5]) == 3",
        "num_ids": 911
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 344
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 516
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    if ele[0] == sub[0]:\n        adj.append((ele[0], ele[1]+1))\n    if ele[1] == sub[1]:\n        adj.append((ele[0]+1, ele[1]))\n    return adj",
        "test": "assert adjac((1, 2), [3, 4]) == [(1, 2), (3, 4)] # Adjacent to (1, 2) and (3, 4)",
        "num_ids": 914
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 514
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 685
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5],6) == 30",
        "num_ids": 679
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    heapq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result",
        "test": "assert heap_sort([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5]",
        "num_ids": 839
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    # Check if sale_amount is positive\n    if sale_amount <= 0: \n        return False\n    \n    # Calculate the difference between sale_amount and actual_cost\n    difference = sale_amount - actual_cost\n    \n    # Check if the difference is negative\n    if difference < 0: \n        return False\n    \n    # If the difference is zero, return True\n    return True",
        "test": "assert noprofit_noloss(100,50) == False",
        "num_ids": 612
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef wind_chill(v,t):\n    wind_chill_index = 0.167 * (v**0.16) + 24.5\n    return round(wind_chill_index)",
        "test": "assert wind_chill(25, 25) == 25",
        "num_ids": 735
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].islower():\n            result += len(name)\n    return result",
        "test": "assert sample_nam(\"Bob\") == 2",
        "num_ids": 632
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    cleaned_items = re.sub(pattern, '', items)\n    return cleaned_items\n\nitems = \"Hello (this) is a sample string with (parenthesis) around it.\"\ncleaned_items = remove_parenthesis(items)\nprint(cleaned_items)",
        "test": "assert remove_parenthesis(\"\") == \"\"",
        "num_ids": 697
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def is_nonagonal(n): \n    '''\n    Function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        a, b = 0, 1\n        while b*b <= n:\n            if b*b > n:\n                break\n            a, b = b, a + b\n        return a",
        "test": "assert is_nonagonal(3) == 1",
        "num_ids": 701
    },
    {
        "number": 643,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define the regex pattern to match the word 'z' at the beginning and end of a word\n    pattern = r'^[a-zA-Z][a-zA-Z]*[a-zA-Z]|[a-zA-Z][a-zA-Z]*$'\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    # If a match is found, return True, otherwise False\n    return bool(match)",
        "test": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog.\") == True",
        "num_ids": 947
    },
    {
        "number": 644,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position as input and returns a reversed array upto that position.\n    '''\n    output = []\n    for i in range(len(input)-1, -1, -1):\n        output.append(input[i])\n    return output[:k]",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 4) == [5,4,3,2]",
        "num_ids": 1068
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Access the values in the dictionary\n    values = test_dict.values()\n    # Create a tuple with the values from the dictionary\n    output_tup = tuple(values)\n    # Return the tuple\n    return output_tup",
        "test": "assert add_dict_to_tuple(1, {'a': 1, 'b': 2, 'c': 3}) == (1, 2, 3)",
        "num_ids": 722
    },
    {
        "number": 721,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables to keep track of the current path and its cost\n    current_path = []\n    current_cost = 0\n    \n    # Initialize variables to keep track of the maximum average and the current maximum cost\n    max_avg = float('-inf')\n    max_cost = 0\n    \n    # Iterate through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # If we reach a cell with negative cost, skip it\n            if cost[i][j] < 0:\n                continue\n            \n            # Add the current cell to the current path\n            current_path.append((i, j))\n            \n            # Compute the current cost\n            current_cost += cost[i][j]\n            \n            # If the current path has a higher average than the current maximum, update the maximum average and cost\n            if current_cost > max_cost:\n                max_avg = current_cost / len(current_path)\n                max_cost = current_cost\n            \n            # If the current path has a lower average than the maximum average, skip it\n            elif current_cost < max_avg:\n                continue\n            \n            # If we reach the bottom-right cell and the current path has a higher average than the current maximum, update the maximum average and cost\n            if i == len(cost)-1 and j == len(cost[0])-1:\n                if current_cost > max_cost:\n                    max_avg = current_cost / len(current_path)\n                    max_cost = current_cost\n                \n    # Return the maximum average over all paths\n    return max_avg",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5  # Test case 1",
        "num_ids": 2308
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students.append((name, height, weight))\n    return filtered_students",
        "test": "assert filter_data({\"Alice\": (165, 80), \"Bob\": (170, 75), \"Charlie\": (175, 85)}, 175, 85) == [(\"Alice\", (165, 80)), (\"Charlie\", (175, 85))]",
        "num_ids": 1011
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    # Initialize an empty set to store the common values\n    common = set()\n\n    # Loop through each pair of numbers in the lists\n    for i in range(len(nums1)):\n        # Check if the current numbers in the lists are the same\n        if nums1[i] == nums2[i]:\n            # Add the index of the current pair to the common set\n            common.add(i)\n\n    # Return the set of common values\n    return common\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == {0, 1, 2, 3, 4} # True",
        "num_ids": 1185
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Find the length of the base\n    base_len = len(str(base))\n\n    # Initialize the sum variable\n    total_sum = 0\n\n    # Loop through all the digits of the base\n    for digit in str(base):\n        # Calculate the power of the current digit and add it to the total sum\n        total_sum += int(digit) ** power\n\n    # Return the total sum of all digits of the base to the specified power\n    return total_sum",
        "test": "assert power_base_sum(2, 3) == 8",
        "num_ids": 849
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Extracts values between quotation marks \" \" of the given string.\n    '''\n    # Find all quotation marks in the text\n    matches = re.findall(r'\"[^\"]+\"', text1)\n\n    # Extract the values between quotation marks\n    values = []\n    for match in matches:\n        value = match[1:-1]\n        if value!= '':\n            values.append(value)\n\n    # Join the values with spaces\n    result =''.join(values)\n\n    return result",
        "test": "assert extract_quotation('\"\"') == ''",
        "num_ids": 680
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    length = len(test_tup)\n    result = tuple(test_tup[0] * test_tup[1] for i in range(length-1)) + test_tup[-1]\n    return result",
        "test": "assert multiply_elements((1, 2, 3, 4, 5)) == (1, 4, 9, 16, 25)",
        "num_ids": 886
    },
    {
        "number": 728,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = []\n    for i in range(len(lst1)):\n        sum.append(lst1[i] + lst2[i])\n    return sum",
        "test": "assert sum_list([], []) == []",
        "num_ids": 636
    },
    {
        "number": 730,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n\n    # Use groupby function to group the numbers by their elements\n    grouped_nums = list(groupby(nums, lambda x: x))\n\n    # Remove duplicates by iterating over each group and checking for consecutive duplicates\n    result = []\n    for group in grouped_nums:\n        if len(group) > 1:\n            current_num = next(iter(group))\n            result.append(current_num)\n            for num in group:\n                if num == current_num:\n                    break\n                else:\n                    result.append(num)\n\n    return result",
        "test": "assert consecutive_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 938
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the surface area of the cone\n    s = math.pi * r**2\n    \n    # calculate the lateral surface area\n    la = 2 * math.pi * r * h\n    \n    # return the result\n    return s, la",
        "test": "assert lateralsurface_cone(2,3) == 6.28319",
        "num_ids": 787
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[.,;]', ':', text)\n\ntext = \"Hello, World! I'm a sentence.\"\nnew_text = replace_specialchar(text)\nprint(new_text)",
        "test": "assert replace_specialchar(\"Hello, World!\") == \"Hello: World!\"",
        "num_ids": 633
    },
    {
        "number": 733,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 5], 6) == -1 # The function should return -1 if the given number is not present in the array.",
        "num_ids": 840
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    subarrays_sums = [0] * len(arr)\n    total_sum = 0\n\n    for i in range(len(arr)):\n        subarrays_sums[i] = 0\n        total_sum += arr[i]\n\n    for length in range(1, len(arr) + 1):\n        for i in range(len(arr) - length + 1):\n            subarrays_sums[i // length] += arr[i]\n\n    return total_sum - subarrays_sums[-1]\n",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 120, \"sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) should return 120.\"",
        "num_ids": 972
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize variables\n    first_bit = False\n    last_bit = False\n    # iterate through the number\n    for i in range(1, len(n)+1):\n        # check if the current bit is the first bit\n        if i == 1:\n            first_bit = True\n        # check if the current bit is the last bit\n        elif i == len(n)+1:\n            last_bit = True\n        # toggle bits\n        else:\n            if n[i-1] & 1:  # if the previous bit is 1\n                n[i-1] = n[i-1] ^ 1  # toggle the bit\n            else:\n                n[i-1] = n[i-1] & 0b1111111111111111111111111111111  # set the bit to 1\n\n    # return the modified number\n    return n\n",
        "test": "assert set_middle_bits(12345) == 234567890",
        "num_ids": 1363
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def left_insertion(a, x):\n    low = 0\n    high = len(a) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] > x:\n            low = mid + 1\n        elif a[mid] < x:\n            high = mid - 1\n        else:\n            return mid\n\n    return low",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 5) == 2 # Testing the return value",
        "num_ids": 1111
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\nregex = r'^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_str('hello world') == False",
        "num_ids": 501
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(5) == 120",
        "num_ids": 377
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    i = 0\n    while True:\n        # Check if i is a triangular number with n digits\n        if sum(int(digit) ** 3 for digit in str(i)) == i ** 3:\n            return i\n        i += 1",
        "test": "assert find_Index(1) == 0 # Test case 1",
        "num_ids": 948
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dictionary = {}\n    for i in range(len(test_tup)-1):\n        dictionary[test_tup[i]] = test_tup[i+1]\n    return dictionary",
        "test": "assert tuple_to_dict(('apple', 1, 2, 'banana', 3, 4)) == {'apple': 1, 'banana': 3}",
        "num_ids": 811
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def all_Characters_Same(s):\n    count = 0\n    for char in s:\n        if char == s[count]:\n            count += 1\n        else:\n            return False\n    return count == len(s)",
        "test": "assert all_Characters_Same(\"abcd\") == True",
        "num_ids": 431
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side * side * side",
        "test": "assert area_tetrahedron(1) == 0.5, \"The area of a tetrahedron with a side of 1 is not equal to 0.5\"",
        "num_ids": 415
    },
    {
        "number": 743,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # Get the length of the list\n    length = len(list)\n\n    # Check if m is greater than the length of the list\n    if m > length:\n        m = m % length\n\n    # Rotate the list by m items to the right\n    for i in range(m):\n        list.append(list.pop(0))\n\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 950
    },
    {
        "number": 744,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "test": "assert check_none(('a', None, 'b')) == True",
        "num_ids": 435
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(map(lambda x: int(x), str(startnum))) + list(map(lambda x: int(x), str(endnum))) + [num for num in range(startnum, endnum + 1) if int(num) % len(str(num)) == 0]",
        "test": "assert divisible_by_digits(123, 987) # True",
        "num_ids": 2176
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a",
        "test": "assert sector_area(4, 360) is None",
        "num_ids": 458
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, o = len(X), len(Y), len(Z)\n    dp = [[0] * (o + 1) for i in range(n + 1)]\n\n    # Base case\n    for i in range(n + 1):\n        dp[i][0] = X[i - 1]\n\n    for j in range(m + 1):\n        dp[0][j] = Y[j - 1]\n\n    # Fill the rest of the DP table\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Return the LCS\n    lcs = []\n    i, j = n, m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(lcs[::-1])",
        "test": "assert lcs_of_three('abcd', 'efgh', 'ijkl') == 'ijkl'",
        "num_ids": 1951
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Define regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n\n    # Replace matched words with spaces\n    result = re.sub(pattern,'', str1)\n\n    # Return the modified string\n    return result",
        "test": "assert capital_words_spaces(\"hello world\") == \"Hello World\"",
        "num_ids": 796
    },
    {
        "number": 749,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a list of strings of numbers numerically.\n\n    Args:\n    nums_str (list of str): A list of strings of numbers.\n\n    Returns:\n    list of str: A list of strings sorted numerically.\n    '''\n    # Convert all strings in the list to integers\n    nums = [int(num) for num in nums_str]\n\n    # Use the sorted() function with a key argument to sort the list numerically\n    sorted_nums = sorted(nums, key=lambda x: x)\n\n    # Convert the sorted list of integers back to a list of strings\n    sorted_str = [str(num) for num in sorted_nums]\n\n    return sorted_str",
        "test": "assert sort_numeric_strings(['20', '10', '30', '5', '40']) == ['5', '10', '20', '30', '40']",
        "num_ids": 921
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_tuple([1,2,3], (4,)) == (5,4,3)",
        "num_ids": 460
    },
    {
        "number": 751,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case: if array has only one element, it is a min heap\n    if i == 0:\n        return True\n    \n    # If the parent element is greater than or equal to the child element, it is not a min heap\n    if arr[i] >= arr[2 * i + 1]:\n        return False\n    \n    # If the parent element is less than the child element, it is a min heap\n    return check_min_heap_helper(arr, 2 * i + 1)",
        "test": "assert check_min_heap_helper([10, 5, 15, 3, 20], 0) # True",
        "num_ids": 1125
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 1\n        b = 1\n        c = 3\n        d = 0\n        for i in range(2, n+1):\n            d = a + b\n            a = b\n            b = c\n            c = d\n        return c",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1358
    },
    {
        "number": 753,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def min_k(test_list, K):\n    sorted_list = sorted(test_list)\n    min_list = []\n    for i in range(K):\n        min_list.append(sorted_list[i])\n    return min_list",
        "test": "assert min_k([1,2,3,4,5], 2) == [1,2]",
        "num_ids": 855
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def extract_index_list(l1, l2, l3):\n    # Create an empty list to store common elements\n    common = []\n    \n    # Loop through all lists\n    for i in range(len(l1)):\n        # Check if the element exists in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            # If the element exists, append it to the common list\n            common.append(l1[i])\n    \n    # Return the common elements as a list\n    return common",
        "test": "assert extract_index_list([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 1076
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import heapq\n\ndef second_smallest(numbers):\n    heap = [x for x in numbers]  # create a min-heap from the input list\n    heapq.heapify(heap)  # convert the heap to a max-heap\n    \n    second_smallest = float('inf')  # initialize the second smallest variable to infinity\n    smallest = heap[0]  # initialize the smallest variable to the smallest element in the heap\n    \n    for num in heap[1:]:  # iterate over the remaining elements in the heap\n        if num < smallest:  # if the current number is smaller than the smallest, update the second smallest\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:  # otherwise, update the second smallest if necessary\n            second_smallest = num\n            \n    return second_smallest",
        "test": "assert second_smallest([4, 3, 2, 1, 5]) == 2",
        "num_ids": 764
    },
    {
        "number": 756,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Match a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'a[b]*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('ababb') == True",
        "num_ids": 1636
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n                break\n    return count",
        "test": "assert count_reverse_pairs(['a', 'b', 'c', 'd', 'e', 'f']) == 0",
        "num_ids": 924
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # creating a dictionary to store the list counts\n    list_counts = {}\n\n    # looping through each element of the list\n    for elem in list1:\n\n        # converting the element to a tuple and adding it to the dictionary\n        tuple_elem = (elem, )\n\n        # checking if the tuple already exists in the dictionary\n        if tuple_elem in list_counts:\n\n            # incrementing the count of the tuple in the dictionary\n            list_counts[tuple_elem] += 1\n\n        # if the tuple does not exist in the dictionary, adding it with a count of 1\n        else:\n            list_counts[tuple_elem] = 1\n\n    # returning the dictionary\n    return list_counts",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1046
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    if len(num.split('.')[1]) > 2:\n        return False\n    return True",
        "test": "assert is_decimal('123.456') is False",
        "num_ids": 981
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if there is only one element in the list\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 2, 3, 4]) == False",
        "num_ids": 758
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum <= 12:\n        return True\n    elif monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    elif monthnum % 4 == 0 and (monthnum % 100!= 0 or monthnum % 400 == 0):\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(13) == False",
        "num_ids": 845
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_min_diff(arr,n): \n    # Create a dictionary to store the minimum difference between elements \n    diff_dict = {} \n    # Iterate through all the elements of the array \n    for i in range(n): \n        # Check if the element at i is already present in the dictionary \n        if i in diff_dict: \n            # If yes, add the minimum difference to the dictionary \n            diff_dict[i] += min(arr[i], arr[(i + 1) % n]) \n        # If the element is not present in the dictionary, add it with the minimum difference \n        else: \n            diff_dict[i] = min(arr[i], arr[(i + 1) % n]) \n    # Find the minimum difference in the dictionary \n    return min(diff_dict.values())",
        "test": "assert find_min_diff([1, 2, 3, 4, 5], 5) == 1",
        "num_ids": 1049
    },
    {
        "number": 764,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 414
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def nth_polite(n): \n        '''\n        Calculates the nth polite number using the\n        Hodgkin-Huxley method.\n        '''\n        a = 1\n        b = 1\n        c = 0\n        d = 1\n        while d < n: \n            a, b, c, d = b, c, a + b - c, d + b + c\n        return a\n    \n    return nth_polite(n)",
        "test": "assert is_polite(1) == True",
        "num_ids": 866
    },
    {
        "number": 766,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([]) == []",
        "num_ids": 724
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 5) == 2",
        "num_ids": 717
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Get the lengths of the lists\n    len1 = len(li1)\n    len2 = len(li2)\n    # Initialize an empty list to store the differences\n    diff_list = []\n    # Iterate through the lists and calculate the difference\n    for i in range(len1):\n        diff = li1[i] - li2[i]\n        diff_list.append(diff)\n    return diff_list",
        "test": "assert Diff([1,2,3], [1,2,3]) == [0,0,0] # correct",
        "num_ids": 631
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Loop through the natural numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is odd and has 4 digits after the decimal point\n        if i%2!= 0 and int(str(i)[-4:]) % 10 == 4:\n            # Calculate the fourth power of the number\n            fourth_power = i**4\n            \n            # Add the fourth power to the sum\n            sum += fourth_power\n    \n    # Return the sum\n    return sum",
        "test": "assert odd_num_sum(2) == 20, \"The sum of the fourth power of the second odd natural number is not 20.\"",
        "num_ids": 672
    },
    {
        "number": 771,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return True",
        "test": "assert check_expression(\"()()\") == True, \"Corrected check_expression failed\"",
        "num_ids": 829
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    '''\n    Remove all the words with k length from the given string.\n    '''\n    words = test_str.split()\n    new_str = ''\n    for word in words:\n        if len(word) == K:\n            continue\n        else:\n            new_str += word +''\n    return new_str.strip()",
        "test": "assert remove_length(\"Python\", 3) == \"nhtyp\"",
        "num_ids": 632
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None",
        "test": "assert occurance_substring(\"hello world\", \"lo\") == (None, None)",
        "num_ids": 590
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def odd_position(nums):\n    '''\n    This function checks whether every odd index in the given list contains odd numbers.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                return False\n    return True",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == False # test case 2",
        "num_ids": 772
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"abcd\") == 0, \"count_vowels('abcd') should return 0\"",
        "num_ids": 770
    },
    {
        "number": 777,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty list to store non-repeated elements\n    unique_elements = []\n\n    # Loop through the input list\n    for num in arr:\n        # If the element is not already in the list, add it to the list\n        if num not in unique_elements:\n            unique_elements.append(num)\n\n    # Return the sum of the non-repeated elements\n    return sum(unique_elements)\n",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 827
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist_count = 0\n    sublist = []\n    for item in list1:\n        if item not in sublist:\n            sublist.append(item)\n        elif len(sublist) > 1:\n            # If the current item is in a sublist and has more than one occurrence,\n            # we need to create a new sublist and start packing new items from the next item.\n            sublist_count += 1\n            sublist = [item]\n    return sublist",
        "test": "assert pack_consecutive_duplicates([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12], \"Test 1\"",
        "num_ids": 2166
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    list1 = set(list1)\n\n    # Create an empty dictionary to store the count of each list\n    count_dict = {}\n\n    # Iterate over the set of list1 and add each element to the count_dict\n    for element in list1:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    return count_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1213
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i:j+1]) == sum(test_list[i:j+1]):\n                result.append((sum(test_list[i:j+1]), test_list[i:j+1]))\n    return result",
        "test": "assert find_combinations([1,2,3,4,5]) == set(combinations([1,2,3,4,5], 4)), \"find_combinations([1,2,3,4,5]) should return a set of tuples with the sum as the key and the count as the value\"",
        "num_ids": 1958
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef count_divisors(n):\n    # Calculate the factorial of n\n    factorial = math.factorial(n)\n    # Calculate the count of divisors\n    count = factorial // n\n    # Return the count\n    return count",
        "test": "assert count_divisors(1) == 1, \"The function should return 1 for n = 1.\"",
        "num_ids": 811
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize a variable to keep track of the sum of odd-length subarrays\n    total_sum = 0\n    \n    # Iterate through the list of elements\n    for i in range(len(arr)):\n        # Check if the current element is odd\n        if arr[i] % 2!= 0:\n            # If it is, calculate the sum of the odd-length subarray\n            start = i\n            end = i\n            while end < len(arr) and arr[end] % 2 == 0:\n                end += 1\n            subarray = arr[start:end]\n            total_sum += sum(subarray)\n    \n    return total_sum",
        "test": "assert odd_length_sum([1, 3, 5, 7, 9, 11]) == 0",
        "num_ids": 1139
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert rgb color to hsv color\n    h, s, v = rgb_to_hsv_helper(r, g, b)\n    return h, s, v\n\ndef rgb_to_hsv_helper(r, g, b):\n    '''\n    Helper function to convert rgb color to hsv color.\n    '''\n    # Check if input values are within the valid range\n    if r < 0 or r > 255 or g < 0 or g > 255 or b < 0 or b > 255:\n        raise ValueError(\"Input values are not within the valid range.\")\n\n    # Calculate the maximum and minimum values of the color channels\n    r_max = max(r, g, b)\n    g_max = max(r_max, g)\n    b_max = max(r_max, b)\n\n    # Calculate the sum of the color channels\n    r_sum = r_max + g_max + b_max\n    g_sum = r_max + g_max + b_max\n    b_sum = r_max + g_max + b_max\n\n    # Calculate the difference between the color channels\n    delta = b_sum - r_sum\n    # If the difference is zero, return the color as black\n    if delta == 0:\n        return 0, 0, 0\n    # Calculate the hue using the maximum difference between the color channels\n    if b_sum == r_sum:\n        h = delta / b_max\n    elif g_sum == r_sum:\n        h = 2.0 + delta / (g_max - b_sum)\n    else:\n        h = 4.0 + delta / (b_max - r_sum)\n\n    # Calculate the saturation using the average difference between the color channels\n    s = r_sum / r_max\n\n    # Calculate the value using the average difference between the color channels\n    v = r_sum / r_max\n\n    return h, s, v",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1950
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def mul_even_odd(list1):\n    product = 1\n    for number in list1:\n        if number % 2 == 0:\n            product *= number\n    for number in list1:\n        if number % 2!= 0:\n            product *= number\n    return product",
        "test": "assert mul_even_odd([]) == 1",
        "num_ids": 638
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n\n    Parameters:\n    test_str: string that contains a tuple separated by commas.\n\n    Returns:\n    a tuple containing the elements of the tuple string as integers.\n\n    Example:\n    tuple_str_int(\"1, 2, 3\") -> (1, 2, 3)\n    '''\n\n    # initialize empty list to store integers\n    int_list = []\n\n    # iterate over each element in the tuple string\n    for element in test_str.split(','):\n        # convert each element to an integer and add it to the list\n        int_list.append(int(element))\n\n    # convert the list to a tuple\n    return tuple(int_list)",
        "test": "assert tuple_str_int(\"123\") == (123,)",
        "num_ids": 802
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)",
        "test": "assert right_insertion([1,2,3,4,5], 6) == 5",
        "num_ids": 600
    },
    {
        "number": 787,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    This function will match a string that has an a followed by three 'b's.\n\n    Parameters:\n    text: A string to be matched\n\n    Returns:\n    A boolean indicating whether or not the string matches the pattern of having an a followed by three 'b's.\n    '''\n\n    # Define the pattern that we want to match\n    pattern = r'a(?=b{3})'\n\n    # Use the re.search() function to search for the pattern in the input string\n    result = re.search(pattern, text)\n\n    # If the pattern is found, return True\n    if result:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three('ababababababa') == False",
        "num_ids": 585
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(int, test_list)) + tuple(map(int, test_str))",
        "test": "assert new_tuple([], '') == ()",
        "num_ids": 460
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 0 for i in range(len(nums)))",
        "test": "assert even_position([2,4,6,8,10]) == True",
        "num_ids": 635
    },
    {
        "number": 791,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from the given tuple.\n\n    Args:\n        test_tup (tuple): Tuple to be removed.\n\n    Returns:\n        tuple: Tuple with removed elements.\n    '''\n    # Initialize an empty list to store the filtered elements\n    filtered_list = []\n\n    # Loop through the elements of the tuple\n    for element in test_tup:\n        # If the element is a tuple itself, recursively call the function on it\n        if isinstance(element, tuple):\n            filtered_list.extend(remove_nested(element))\n        # If the element is not a tuple itself, add it to the filtered list\n        else:\n            filtered_list.append(element)\n\n    # Return the filtered list\n    return tuple(filtered_list)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 689
    },
    {
        "number": 792,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 437
    },
    {
        "number": 793,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "test": "assert last([1,2,3,4,5],6) == -1 # Test case 2",
        "num_ids": 625
    },
    {
        "number": 794,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba\\w*\\b'\n    return bool(re.search(pattern, text, re.IGNORECASE))",
        "test": "assert text_starta_endb(\"abc\") == True",
        "num_ids": 528
    },
    {
        "number": 796,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total",
        "test": "assert return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 502
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(1, n+1) if x % 2!= 0)",
        "test": "assert sum_odd(0) == 0",
        "num_ids": 469
    },
    {
        "number": 798,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "test": "assert _sum([1, 2, 3]) == 6",
        "num_ids": 416
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return (n << d) | (n >> (32-d))",
        "test": "assert left_rotate(32,0) == 32 # Test Case 2",
        "num_ids": 672
    },
    {
        "number": 800,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")",
        "test": "assert remove_all_spaces(\"\") == \"\"",
        "num_ids": 373
    },
    {
        "number": 801,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x):\n        for j in range(y):\n            for k in range(z):\n                if i == x-1 and j == y-1 and k == z-1:\n                    count += 1\n    return count\n\nx = 3\ny = 3\nz = 3\nprint(test_three_equal(x,y,z)) # Output: 3",
        "test": "assert test_three_equal(1,1,1)==1, \"test_three_equal(1,1,1) should return 1\"",
        "num_ids": 586
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left, right = 0, n-1\n    count = 0\n    while left < right:\n        # check if the left and right elements are in the correct order\n        if arr[left] < arr[right]:\n            count += 1\n            left += 1\n        else:\n            # if they are in the wrong order, check if the left element is smaller\n            if arr[left] > arr[right-1]:\n                count += 1\n                left += 1\n            else:\n                # if both elements are the same, the array is already sorted\n                right -= 1\n    return count",
        "test": "assert count_rotation([5, 4, 3, 2, 1]) == 0",
        "num_ids": 804
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    :param n: a number\n    :return: True if the given number is a perfect square, False otherwise\n    \"\"\"\n    if n == 0 or n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_perfect_square(n//2)\n    else:\n        return False",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 728
    },
    {
        "number": 804,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3]) == True",
        "num_ids": 600
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_sum_list(lists):\n    max_sum = -float('inf')\n    max_indices = []\n\n    for i, lst in enumerate(lists):\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_indices = [i]\n        elif sum(lst) == max_sum:\n            max_indices.append(i)\n\n    return lists[max_indices[0]]",
        "test": "assert max_sum_list([[-1, 2, 3], [-2, -1, 4], [1, -1, -1]]) == [-2, 4, 1]",
        "num_ids": 1089
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_run_uppercase(test_str):\n    max_length = 0\n    current_length = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 0\n\n    return max_length",
        "test": "assert max_run_uppercase(\"ABC\") == 3",
        "num_ids": 813
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([2, 3, 4, 5]) == 3",
        "num_ids": 505
    },
    {
        "number": 808,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_K(test_tup, K):\n    '''\n    Check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    elif len(test_tup) == K:\n        return True\n    else:\n        return check_K((test_tup[0],), K-1) or check_K((test_tup[0],), K-2)",
        "test": "assert check_K((1,2,3), 2) == True # checking if the tuple (1,2,3) contains 2",
        "num_ids": 602
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
        "num_ids": 801
    }
]