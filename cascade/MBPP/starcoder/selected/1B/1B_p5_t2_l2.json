[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements",
        "test": "assert similar_elements((1, 2, 3), (1, 2, 3)) == set([1, 2, 3])",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n <= 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert is_not_prime(2) == False, \"2 is not a prime number\"",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Returns the n largest integers in descending order from the given list of numbers.\n    '''\n\n    # Create a max heap from the given list of numbers\n    max_heap = hq.heapify(nums)\n\n    # Extract and return the n largest elements from the max heap\n    return [num for num in max_heap if len(max_heap) >= n]",
        "test": "assert heap_queue_largest([-10, 1, 3, 5, 7], 3) == 7",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x < 0:\n        return False\n\n    while x % 2 == 0:\n        x //= 2\n\n    return x == 1",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # define pattern for finding words with 4 or more characters\n    pattern = r'\\b\\w{3,}\\b'\n    \n    # use re.findall() to find all words in the text\n    words = re.findall(pattern, text)\n    \n    return words",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([]) == []",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    if len(str) == 1:\n        return 0\n    \n    n = len(str)\n    res = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                res += 1\n                break\n    \n    return res",
        "test": "assert find_Rotations(\"hello\") == 1",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def remove_Occ(s,ch):\n    if s.count(ch) >= 2:\n        return s[:-1] + s[-1:]\n    else:\n        return s",
        "test": "assert remove_Occ(\"abcdabcdabcdabcdabcd\",\"a\") == \"abcdabcdabcdabcdabcd\"",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sort_matrix(M):\n    # Initialize a list to store the indices of the rows in ascending order of sum of rows\n    indices = [i for i in range(len(M))]\n    \n    # Sort the list in ascending order using the bubble sort algorithm\n    n = len(indices)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[indices[j]][indices[j+1]] < M[indices[j]][indices[j+1]]:\n                M[indices[j]], M[indices[j+1]] = M[indices[j+1]], M[indices[j]]\n    \n    # Return the sorted matrix\n    return M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1127,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r\"(?<![a-z])[A-Z]{1,}(?![a-z])\")\n    if pattern.search(text):\n        return True\n    else:\n        return False",
        "test": "assert text_lowercase_underscore('The quick brown fox jumps over the lazy dog.') == False",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def str_to_list(string): \n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower() # convert string to lowercase for faster comparison\n    common_chars = [c for c in string if c in string and c not in string[string.find(c):]] # find common characters\n    return common_chars",
        "test": "assert str_to_list(\"a string without any characters\") == []",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arraynums)\n    # check if any element is present in the set\n    return any(unique_set.intersection(set(arraynums)))",
        "test": "assert test_duplicate([1,2,3,3,4,5]) == True",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_woodall(x): \n    '''\n    Check if a number is a woodball number.\n    '''\n\n    # convert number to string\n    num_str = str(x)\n\n    # check if the string length is odd\n    if len(num_str) % 2 == 1:\n        return False\n\n    # loop through the string\n    for i in range(len(num_str)):\n        # check if the character is a digit\n        if not num_str[i].isdigit():\n            return False\n\n    return True",
        "test": "assert is_woodall(123) == False, \"is_woodall(123) should return False\"",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def rev(num):\n    if num < 2:\n        return True\n    elif num == 2:\n        return False\n    else:\n        return rev(num - 2)",
        "test": "assert rev(223) == True",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_Max_Num(arr):\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if int(arr[i]) > int(max_num):\n            max_num = arr[i]\n    return max_num",
        "test": "assert find_Max_Num([9, 4, 6, 7, 2]) == 9",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def opposite_Signs(x, y):\n    # Check if x is negative or positive\n    if x < 0:\n        x = -x\n    if y < 0:\n        y = -y\n    \n    # Check if x is equal to y or not\n    if x == y:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(5, 2) == False  # wrong input",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_octagonal(n):\n    '''\n    Find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        a = (n/i)**3 - n/i\n        b = (n/i)**2 - n/i\n        c = n/i - (n/i)**2\n        if a**2 + b**2 == c**2:\n            return i\n    return None",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n\n    Parameters:\n    s (str): a string of characters\n\n    Returns:\n    int: the number of substrings with the sum of digits equal to their length\n    '''\n\n    # count the number of substrings\n    count = 0\n\n    # iterate through the string s\n    for i in range(len(s)):\n\n        # iterate through the digits from the i-th character to the end of the string\n        for j in range(i, len(s)+1):\n\n            # compute the sum of the digits in the current substring\n            sum_of_digits = sum(int(c) for c in s[i:j])\n\n            # if the sum of digits is equal to the length of the substring, count the substring\n            if sum_of_digits == len(s[i:j]):\n                count += 1\n\n    return count",
        "test": "assert count_Substrings(\"abab\") == 2",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def smallest_num(xs):\n    '''\n    Find the smallest number in a list of numbers.\n    '''\n    smallest = float('inf')\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1, \"smallest number in a list is 1\"",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # create a new list of tuples containing the elements of the test_list\n    test_list_tuple = [(element1, element2) for element1, element2 in test_list]\n\n    # sort the test_list_tuple list in ascending order\n    test_list_tuple.sort()\n\n    # initialize the max_diff variable with the first element of the first tuple in the sorted list\n    max_diff = abs(test_list_tuple[0][1] - test_list_tuple[0][0])\n\n    # iterate through the rest of the tuples and update max_diff if necessary\n    for i in range(1, len(test_list_tuple)):\n        if abs(test_list_tuple[i][1] - test_list_tuple[i][0]) > max_diff:\n            max_diff = abs(test_list_tuple[i][1] - test_list_tuple[i][0])\n\n    return max_diff",
        "test": "assert max_difference([1, 2, 4, 6, 8]) == 3",
        "num_ids": 1483,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sorts a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([]) == []",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Flatten a list of integers and calculate the sum.\n    '''\n    flat_list = [int(i) for i in data_list]\n    total = sum(flat_list)\n    return total",
        "test": "assert recursive_list_sum([]) == 0, \"recursive_list_sum([]) returns 0, which is correct\"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([]) == 0",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_number(n):\n    # Initialize a dictionary to store the count of ways to partition the Bell numbers\n    # The keys of the dictionary will be the values of the Bell numbers, and the values will be 0\n    count_dict = {}\n\n    # Iterate through the Bell numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition the Bell numbers in this range\n        num_ways = 0\n        for j in range(1, n+1):\n            # If j is divisible by i, then we have found a way to partition the Bell numbers\n            if i % j == 0:\n                num_ways += 1\n\n        # If the number of ways to partition the Bell numbers is not already in the dictionary,\n        # add it with a value of 0\n        if i not in count_dict:\n            count_dict[i] = num_ways\n\n    # Return the value for the last key in the dictionary, which is the count of ways to partition the Bell numbers\n    return count_dict[n]",
        "test": "assert bell_number(1) == 1",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Monotonic(A):\n    A.sort()\n    is_monotonic = True\n    for i in range(len(A) - 1):\n        if A[i] >= A[i + 1]:\n            is_monotonic = False\n            break\n    return is_monotonic",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True",
        "test": "assert is_sublist([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True",
        "test": "assert find_equal_tuple([('apple', 'banana', 'cherry'), ('banana', 'apple', 'cherry'), ('orange', 'banana', 'grape')]) == True",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    for i in range(n):\n        key = nums[i]\n        j = i - 1\n\n        while j >= 0 and nums[j] > key:\n            nums[j + 1] = nums[j]\n            j -= 1\n\n        nums[j + 1] = key\n\n    return nums",
        "test": "assert comb_sort([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 2 == 0:\n        # If the number is even, the number can be represented as the difference of two squares\n        return True\n    else:\n        # If the number is odd, the number cannot be represented as the difference of two squares\n        return False",
        "test": "assert dif_Square(36) is True",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize the counter variable to 0\n    count = 0\n\n    # loop through the colors array\n    for color in colors:\n        # loop through the patterns array\n        for pattern in patterns:\n            # check if the color matches the pattern using string comparison\n            if color == pattern:\n                # increment the count if a match is found\n                count += 1\n\n                # if no more matches are found, return True\n                if count == len(patterns):\n                    return True\n                else:\n                    # if there are more matches than patterns, continue looping\n                    continue\n\n    # if no more matches are found, return False\n    return False",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\"], [\"red\", \"blue\", \"green\", \"yellow\"]) == False",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for element in test_list:\n        if all(x % element[0] == 0 for x in element[1:]):\n            result.append(element)\n    return result\n\ntest_list = [(1, [1, 2, 3]), (2, [2, 4, 6]), (3, [3, 6, 9]), (4, [4, 8, 12])]\nK = 2\n\nprint(find_tuples(test_list, K)) # Output: [(1, [1, 2, 3]), (2, [2, 4, 6])]",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0",
        "test": "assert is_Diff(22) == True",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # Split the string into a list of words\n    word_length = len(words)  # Get the length of the word\n    \n    if word_length % 2 == 1:  # Check if the length is odd or not\n        print(f\"{s} is an odd word.\")\n    else:\n        print(f\"{s} is an even word.\")",
        "test": "assert word_len(\"banana\") == 6  # check if word_len(\"banana\") returns 6",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tetrahedral_number(n):\n    if n < 4:\n        return n\n    else:\n        # Iterate through all possible combinations of 4 vertices and check if the sum of any two vertices is equal to n\n        for i in range(4):\n            # Check if the sum of i and any two vertices is equal to n\n            for j in range(4):\n                if i!= j:\n                    sum_ij = i + j\n                    if sum_ij == n:\n                        return sum_ij\n        # If n is not found, return None\n        return None",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 2509,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculates the volume of a sphere using the formula:\n    V = pi * r^3\n    '''\n    return math.pi * r**3",
        "test": "assert volume_sphere(1) == 3.141592653589793",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    for i in range(len(strr)):\n        char += chr((ord(strr[i]) + i) % 26)\n    return char",
        "test": "assert get_Char(\"A\") == \"a\" # the character 'a'",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sequence(n):\n    a, b = 0, 1\n    for i in range(n):\n        print(b)\n        a, b = b, a + b\n    return a",
        "test": "assert sequence(1) == 1, \"The second number in the sequence is not equal to 1.\"",
        "num_ids": 1651,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculates the surface area of a sphere given its radius.\n\n    Args:\n        r (float): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    '''\n\n    return 4 * math.pi * r ** 2",
        "test": "assert surfacearea_sphere(1) == 4*3.141592653589793, \"The surface area of a sphere with radius 1 should be approximately 4*3.141592653589793.\"",
        "num_ids": 1532,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # first find the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # check if n is odd or even\n    if n % 2 == 0:\n        # even centered hexagonal number\n        hexagonal_number = sqrt_n * sqrt_n\n    else:\n        # odd centered hexagonal number\n        hexagonal_number = sqrt_n * sqrt_n + sqrt_n * (sqrt_n - 1)\n    \n    return hexagonal_number",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1399,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 1767,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 25,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Returns a dictionary where the keys are the elements of lst and the values are their frequency in lst.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return freq",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        min_diff = float('inf')\n        min_num = 0\n        for i in range(2, N+1):\n            diff = abs(i - N)\n            if diff < min_diff:\n                min_diff = diff\n                min_num = i\n        return min_num",
        "test": "assert closest_num(10) == 10",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n",
        "test": "assert len_log([\"apple\", \"banana\", \"cherry\"]) == 6",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False\n\nstr1 = ['hello', 'world', 'python', 'programming', 'world']\nsub_str = 'programming'\n\nif find_substring(str1, sub_str):\n    print(f\"{sub_str} found in {str1}\")\nelse:\n    print(f\"{sub_str} not found in {str1}\")",
        "test": "assert find_substring(\"hello world\", \"l\") == True",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Define an array of primes up to 20\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n\n    # Check if the number is divisible by any of the primes\n    for prime in primes:\n        if n % prime == 0:\n            return False\n\n    # If the number is not divisible by any of the primes, it is undulating\n    return True",
        "test": "assert is_undulating(1) == True",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "test": "assert power(2,3) == 8",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    \n    result = test_list[0]\n    for tup in test_list[1:]:\n        if tup[1] < result[1]:\n            result = tup\n    return result",
        "test": "assert index_minimum([('a', 5), ('b', 10), ('c', 20)]) == ('a', 5)",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[]]) == 0",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initializing a variable to store the count of divisors\n    count = 0\n    # initializing a variable to store the maximum number of divisors\n    max_count = 0\n    # using a for loop to iterate from 1 to n\n    for i in range(1, n+1):\n        # checking if i is divisible by any number from 1 to i-1\n        if n % i == 0:\n            # incrementing the count of divisors\n            count += 1\n            # keeping track of the maximum count if its greater\n            if count > max_count:\n                max_count = count\n    # returning the count of divisors\n    return count",
        "test": "assert divisor(3) == 2",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def frequency_lists(list1):\n    # create an empty dictionary\n    freq_dict = {}\n\n    # loop through each element in the flattened list\n    for element in list1:\n        # check if the element is already in the dictionary\n        if element in freq_dict:\n            # increment the count for the element\n            freq_dict[element] += 1\n        # if the element is not in the dictionary, add it\n        else:\n            freq_dict[element] = 1\n\n    return freq_dict",
        "test": "assert frequency_lists([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def multiply_num(numbers):\n    result = []\n    for i in numbers:\n        result.append(i*len(numbers))\n    return result",
        "test": "assert multiply_num([1,2,3,4,5]) == 120 ",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def next_smallest_palindrome(num):\n    # Check if the input number is even\n    if num % 2!= 0:\n        return num\n    \n    # Check if the input number is a palindrome\n    i = 1\n    while i < num:\n        if str(num)[i]!= str(num)[num-i]:\n            break\n        i += 1\n    \n    # Return the next smallest palindrome\n    return int(str(num)[i:])",
        "test": "assert next_smallest_palindrome(1111111111) == 1111111111",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def kth_element(arr, k):\n    '''\n    Find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n + 1:\n        return arr[-1]\n    else:\n        left = 1\n        right = n\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1",
        "test": "assert kth_element([1, 2, 3, 4, 5], 3) == 3  # This will pass because the expected output is 3",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def snake_to_camel(word):\n    # Split the string by '_'\n    parts = word.split('_')\n\n    # Convert the first character to uppercase and the rest to lowercase\n    camel_case_word = parts[0].title()\n\n    # Join the parts back together with underscore\n    return camel_case_word.join(parts[1:])",
        "test": "assert snake_to_camel(\"snake_case_word\") == \"snakeCaseWord\"",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = []\n    for i in input_list:\n        sublist.append(i)\n    sublist.sort()\n    return sublist",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count",
        "test": "assert count([True, True, False, False, True]) == 3",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_lists([1, 2, 3], (6, 7)) == (7, 8)",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \n    Args:\n        num1 (list): First list of numbers\n        num2 (list): Second list of numbers\n        num3 (list): Third list of numbers\n        \n    Returns:\n        list: The merged sorted list\n    \"\"\"\n    merged_list = []\n    while num1 and num2:\n        if num1[0] > num2[0]:\n            merged_list.append(num1.pop(0))\n        else:\n            merged_list.append(num2.pop(0))\n            \n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    \n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_Equivalent(s, n): \n    count = 0\n    for i in range(n): \n        if s[0] % 2 == 0: \n            count += 1 \n        s = s[1:] \n        if len(s) == 0: \n            s = '0' \n    return count",
        "test": "assert odd_Equivalent(\"10111101\", 2) == 8",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_elements(list1, list2):\n        '''\n        Recursive function to find common elements in two lists.\n        '''\n        if not list1 or not list2:\n            return None\n        \n        if list1[0] == list2[0]:\n            return common_elements(list1[1:], list2[1:])\n        elif list2[0] == list1[0]:\n            return common_elements(list1, list2[1:])\n        else:\n            return None\n    \n    return common_elements(nestedlist, nestedlist[1:])",
        "test": "assert common_in_nested_lists([1,2,[3,4,5],6,7]) == []",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # check if the string is a valid integer\n    try:\n        int_value = int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"\") == False",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary)!= 0:\n            return False\n    return True\n",
        "test": "assert empty_dit([]) == True",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1, 2, 3, 4, 5)) == 15",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(item) for sublist in test_list for item in sublist]",
        "test": "assert list_to_float([[], [], [1], [2, 3], [4, 5, 6]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def search(arr):\n    # Find the maximum element in the array\n    max_element = arr[0]\n    for element in arr:\n        if element > max_element:\n            max_element = element\n    \n    # Iterate through the array and count the occurrences of each element\n    count = 1\n    for element in arr:\n        if element == max_element:\n            count += 1\n    \n    # Return the element that appears only once in the array\n    return arr[count-1]",
        "test": "assert search([1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5]) == 2, \"The element that appears only once in a sorted array is 2\"",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_product_tuple(list1):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1] * list1[i][1] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([5, 4, 3, 2, 1]) == (120, 60, 40, 30, 24)",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n\n    # Loop through all numbers from 1 to the specified limit\n    for i in range(1, limit + 1):\n        # Loop through all numbers from 1 to the square root of the current number\n        for j in range(1, int(i ** 0.5) + 1):\n            # If the current number is divisible by both i and j, add them to the sum\n            if i % j == 0:\n                result += i + j\n\n    return result",
        "test": "assert amicable_numbers_sum(20) == 47",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a)\n    return angle",
        "test": "assert angle_complex(0,0) == 0",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Parameters:\n    string (str): The given binary string.\n\n    Returns:\n    int: The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    \"\"\"\n    count = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count += 1\n        elif char == '1':\n            if count == 0:\n                max_diff = 1\n            else:\n                max_diff = max(max_diff, count)\n            count = 0\n\n    if count == 0:\n        max_diff = max(max_diff, count)\n\n    return max_diff",
        "test": "assert find_length(\"\") == 0",
        "num_ids": 2089,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Create a list of common divisors\n    divisors = []\n    i = 1\n    while i <= a:\n        if a % i == 0:\n            divisors.append(i)\n        i += 1\n    i = 1\n    while i <= b:\n        if b % i == 0:\n            divisors.append(i)\n        i += 1\n    \n    # Create a set of the common divisors\n    common_divisors = set(divisors)\n    \n    # Calculate the sum of the common divisors\n    total_sum = sum(common_divisors)\n    \n    return total_sum",
        "test": "assert sum(10,15) == 30, \"The sum of the common divisors of 10 and 15 should be 30\"",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    return x * y",
        "test": "assert multiply_int(3, 5) == 15",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the list of words into a list of words and a list of lengths\n    words = str.split()\n    lengths = [len(word) for word in words]\n    \n    # Sort the list of lengths in descending order and find the first n elements\n    sorted_indices = sorted(range(len(lengths)), key=lambda i: lengths[i], reverse=True)[:n]\n    \n    # Convert the sorted indices to a list of words and return the resulting list\n    return [words[index] for index in sorted_indices]",
        "test": "assert long_words(3, 'kitty') == ['kitty']",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check for identity matrix\n    if n == 1:\n        return True\n    \n    # Check for columns and rows\n    if n == 2:\n        for i in range(n):\n            if my_matrix[i][i]!= my_matrix[i][n-i-1]:\n                return False\n        return True\n    \n    # Check for diagonal\n    for i in range(n):\n        if my_matrix[i][i]!= my_matrix[n-i-1][i]:\n            return False\n    return True",
        "test": "assert magic_square_test([[1,2,3],[8,9,4],[5,6,7]]) == False",
        "num_ids": 1332,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item",
        "test": "assert max_occurrences([1,2,3,2,1]) == 2",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n    return reversed_str",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(('hello', 'world', 'python')) == 'helloworldpython'",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_negativenum(nums):\n    # create an empty list to store the negative numbers\n    negatives = []\n\n    # loop through each number in the list and add it to the negatives list\n    for num in nums:\n        if num < 0:\n            negatives.append(num)\n\n    # if there are no negative numbers, return 0\n    if not negatives:\n        return 0\n\n    # return the sum of the negative numbers\n    return sum(negatives)",
        "test": "assert sum_negativenum([-1, 2, 3, 4, 5]) == 15 # Test case 2",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def hexagonal_num(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * hexagonal_num(n // 2)\n    else:\n        return 3 * hexagonal_num(n - 1) + 1",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        nums: array of integers\n\n    Returns:\n        float: ratio of zeroes to non-zeroes in nums\n    \"\"\"\n    # Create an array of zeros to store the count of zeros\n    zeros = array('i')\n    # Initialize a counter to keep track of the total number of non-zero elements\n    nonzero_count = 0\n    # Iterate over each element in the array\n    for num in nums:\n        # If the element is zero, add it to the array\n        if num == 0:\n            zeros.append(1)\n            nonzero_count += 1\n        # Otherwise, it is non-zero, so decrement the counter and append 0 to the array\n        else:\n            zeros.append(0)\n    # If there are any non-zero elements in the array, calculate the ratio\n    if nonzero_count > 0:\n        return float(zeros.count(1)) / nonzero_count\n    else:\n        return 0.0",
        "test": "assert zero_count([1, 2, 3, 4, 5, 0]) == 1",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(16) == True # 16 can be represented as sum of non-zero powers of 2",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1492,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result.extend(sublist)\n    return set(result)",
        "test": "assert extract_singly([1,2,[3,4,5],6,7,8,[9,10]]) == set(range(1,11)) # Test 2",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A sorted list of integers.\n    \"\"\"\n\n    # create a new list with all elements in reverse order\n    nums_reversed = [nums[i] for i in range(len(nums) - 1, -1, -1)]\n\n    # sort the new list in ascending order\n    nums_sorted = sorted(nums_reversed)\n\n    return nums_sorted",
        "test": "assert pancake_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    \n    return count",
        "test": "assert count_samepair([],[],[]) == 0",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def find_lists(Input):\n    # create an empty dictionary to store the counts\n    counts = {}\n    # iterate through the input tuple and increment the count for each list\n    for item in Input:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    # return the number of lists found\n    return len(counts)",
        "test": "assert find_lists([1,2,3,4,5]) == 5",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([5, 2, 1, 3]) == 3",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if either a or b is zero\n    if a == 0 or b == 0:\n        return None\n\n    # Calculate the denominator\n    denominator = (b**2 - 4*a*n)\n\n    # Check if the denominator is negative\n    if denominator < 0:\n        return None\n\n    # Calculate the real part and imaginary part\n    real_part = (-b + abs(denominator)**0.5) / (2*a)\n    imaginary_part = (-b - abs(denominator)**0.5) / (2*a)\n\n    # Check if the real and imaginary parts are within the range of integers\n    if real_part.is_integer() and imaginary_part.is_integer():\n        return (real_part, imaginary_part)\n    else:\n        return None",
        "test": "assert find_solution(2, -4, 12) == None",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [5]) == [1, 2, 3, 4]",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sum_series(n):\n    # initialize the sum variable to zero\n    sum = 0\n\n    # loop through the range from 0 to n-2\n    for i in range(n-2):\n        # add the values from i+2 to n-i-2 to the sum variable\n        sum += i + i+2\n        \n    # return the sum variable\n    return sum",
        "test": "assert sum_series(1) == 0, \"Incorrect sum for n = 1\"",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * l / 2\n    return area\n",
        "test": "assert area_polygon(3, 4) == 6.0",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        for j in range(1, int(math.sqrt(n))+1):\n            if n % i == 0 and n % j == 0:\n                sum_of_divisors += i + j\n                break\n    return sum_of_divisors == n",
        "test": "assert div_sum(25) == False, \"25 is not divisible by any integer\"",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for char in str1.lower():\n        if char.isalpha():\n            count += 1\n    return count",
        "test": "assert count_char_position(\"\") == 0, \"The function should return 0 if the string is empty\"",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power",
        "test": "assert next_power_of_2(1) == 1  # smallest power of 2",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency('hello', 'world') == 1, \"The function should return 1 if 'hello' occurs once in the list.\"",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through the list from the first index to the second index (inclusive)\n    for i in range(m, n+1):\n        # Add the current element to the sum variable\n        sum += list1[i-1]\n\n    return sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Calculate the perimeter of a regular pentagon from its side length.\n    '''\n\n    perimeter = 0.5 * a * (a + math.sqrt(5))\n    return round(perimeter, 2)",
        "test": "assert perimeter_pentagon(5) == 15",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"Python is awesome!\") == 2, \"The count should be 2 for the string 'Python is awesome!'.\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = True\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[i-1]):\n            data_type = False\n            break\n    return data_type",
        "test": "assert check_type((1,2,\"3\")) == False",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Count the occurrences of each element in the array\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    # Find the majority element\n    majority_element = None\n    majority_count = 0\n    for i in count:\n        if count[i] > majority_count and count[i] > n // 2:\n            majority_element = i\n            majority_count = count[i]\n\n    # If there is no majority element, return False\n    if majority_element is None:\n        return False\n\n    # Check if the majority element is equal to the given element\n    if majority_element == x:\n        return True\n\n    # If the majority element is not equal to the given element, check if it occurs more than n/2 times\n    if count[x] > n // 2:\n        return False\n\n    # If the above conditions do not work, return True\n    return True",
        "test": "assert is_majority([1, 2, 3, 4, 5], 3, 5) == False",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,min(b,c))",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize two variables to keep track of the number of set bits and the current set bit\n    num_set_bits = 0\n    current_bit = 0\n\n    # Iterate through all the bits in the range [l, r]\n    for bit in range(l, r + 1):\n        # If the current bit is set, increment the count of set bits and reset the current bit\n        if bit & n == bit:\n            num_set_bits += 1\n            current_bit = 0\n        # If the current bit is not set, reset the current bit to 1\n        else:\n            current_bit = 1\n\n    # If there are any set bits, return False\n    if num_set_bits > 0:\n        return False\n    else:\n        # If there are no set bits, return True\n        return True",
        "test": "assert all_Bits_Set_In_The_Given_Range(16,1,17) == False # all bits are set in the given range",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers, left and right, to the beginning and end of the array respectively\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate until left pointer is less than right pointer\n    while left < right:\n\n        # Swap the elements if the element at left pointer is negative and the element at right pointer is positive\n        if arr[left] < 0 and arr[right] > 0:\n            arr[left], arr[right] = arr[right], arr[left]\n\n        # Move the left pointer to the right if the element at left pointer is positive\n        elif arr[left] > 0:\n            left += 1\n\n        # Move the right pointer to the left if the element at right pointer is negative\n        else:\n            right -= 1\n\n    # Return the modified array\n    return arr",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5]",
        "num_ids": 1370,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1",
        "test": "assert replace_blank('','') == ''",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest = heapq.nlargest(n, list1)\n    return largest",
        "test": "assert larg_nnum([], 0) == []",
        "num_ids": 745,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return r*h/3\n",
        "test": "assert lateralsuface_cylinder(2,2) == 6.28318",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume",
        "test": "assert volume_cube(1) == 1, \"The volume of a cube with side length 1 should be equal to 1.\"",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(1, 32):\n        if n & (1 << i):\n            n |= (1 << i)\n    return n",
        "test": "assert even_bit_set_number(0) == 0, \"0 should be set to all even bits.\"",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrences = Counter(test_list)\n    return occurrences",
        "test": "assert check_occurences([('a', 'apple'), ('a', 'banana'), ('b', 'banana'), ('a', 'apple'), ('a', 'apple'), ('c', 'banana'), ('c', 'banana') ]) == {'a': 3, 'b': 1, 'c': 2}",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize variables\n    count = 0\n    substring = ''\n\n    # Loop through each character in the string\n    for char in str:\n        # If the character is not an empty string, increment the count\n        if char:\n            count += 1\n            # Add the current character to the substring\n            substring += char\n\n    # Return the count of non-empty substrings\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(n):\n        count += get_number_of_sequences(i, m)\n    return count\n\ndef get_number_of_sequences(length, m):\n    count = 0\n    for i in range(length):\n        if i >= m//2:\n            count += 1\n        else:\n            count += get_number_of_sequences(i, m)\n    return count",
        "test": "assert get_total_number_of_sequences(10, 10) == 10, \"get_total_number_of_sequences(10, 10) should return 10\"",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    n = len(list1)\n    # loop through the first list\n    for i in range(n-1, -1, -1):\n        # replace the last element with the element from the second list\n        list1[i] = list2[-1]\n        # remove the last element from the second list\n        list2.pop()\n    # return the modified list\n    return list1",
        "test": "assert replace_list([],[]) == []",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"\") == 0",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n\n    sqrt_N = int(math.sqrt(N))\n    sqrt_N2 = sqrt_N * sqrt_N\n\n    while sqrt_N2 < N:\n        sqrt_N = sqrt_N2\n        sqrt_N2 = sqrt_N * sqrt_N\n\n    return sqrt_N",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize variables\n    max_sum = float('-inf')\n    max_sum_bitonic = float('-inf')\n    max_bitonic_sum = 0\n    # Iterate through the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the bitonic sum of the subsequence\n            bitonic_sum = arr[i] + arr[j]\n            # Check if the bitonic sum is greater than the current maximum sum\n            if bitonic_sum > max_sum:\n                # Update the maximum sum, maximum bitonic sum, and current bitonic sum\n                max_sum = bitonic_sum\n                max_bitonic_sum = bitonic_sum\n                max_bitonic_sum = bitonic_sum\n    # Return the maximum sum\n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 9",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the babylonian method.\n\n    Input:\n        number (int): The number whose square root is to be computed.\n\n    Output:\n        int: The square root of the input number.\n    '''\n\n    # Base case: if the number is 1, it has a square root of 1\n    if number == 1:\n        return 1\n\n    # Initialize variables\n    previous_square = 0\n    current_square = 2 * number\n\n    # Compute the square root by iteratively subtracting the current square from the previous square\n    while current_square - previous_square!= 0:\n        previous_square = current_square\n        current_square = (current_square + number / current_square) / 2\n\n    # Return the square root\n    return current_square\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def lps(str): \n    n = len(str)\n    max_length = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = str[i:j+1]\n            if substring == substring[::-1]:\n                if j-i+1 > max_length:\n                    max_length = j-i+1\n                    start = i\n                    end = j\n    return max_length",
        "test": "assert lps(\"abc\") == 1, \"The length of the string abc is 1.\"",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def harmonic_sum(n):\n    '''\n    Calculate the harmonic sum of a given integer n.\n    '''\n\n    # Initialize the harmonic sum to 0\n    harmonic_sum = 0\n\n    # Loop through the numbers from 1 to n-1 and calculate their harmonic sum\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n\n    # Return the harmonic sum\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Use set data type to store the common elements of the two arrays\n    common_elements = set(array_nums1) & set(array_nums2)\n    # Return the common elements as a list\n    return list(common_elements)\n",
        "test": "assert intersection_array([1,2,3,4,5],[2,3,4]) == [2,3,4]",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((\"a\", \"b\", \"a\", \"c\", \"d\"), \"a\") == 2 # Test case 1",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n    for i in range(len(list)):\n        if i == 0:\n            new_list[i] = element\n        else:\n            new_list.insert(i, element)\n    return new_list",
        "test": "assert insert_element([], 1) == []",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Parameters:\n    numbers (list of complex numbers): A list of complex numbers.\n\n    Returns:\n    A list of lists, where each inner list represents a complex number as a list of two elements:\n        - The real part of the complex number.\n        - The imaginary part of the complex number.\n    '''\n    if not all(isinstance(num, (int, float)) for num in numbers):\n        raise TypeError(\"All elements in the input list must be numbers.\")\n    \n    result = []\n    for num in numbers:\n        real_part = num.real\n        imag_part = num.imag\n        result.append([real_part, imag_part])\n    \n    return result",
        "test": "assert convert(2j) == (1.0, 0.0)",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_integer(list1):\n    '''\n    Return the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])",
        "test": "assert count_integer([1,2,3,4,5]) == 5",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Create a set to store unique combinations\n    color_set = set()\n\n    # Loop through each element in the list\n    for element in l:\n        # Generate all combinations of length n with repetition\n        comb = combinations_with_replacement(l, n)\n\n        # Loop through each combination and add to the set\n        for comb_tuple in comb:\n            color_set.add(tuple(comb_tuple))\n\n    # Convert the set to a list and return\n    return list(color_set)",
        "test": "assert combinations_colors([1, 2, 3], 4) == [(1, 2, 3), (1, 2), (1, 3), (2, 3), (1, 2, 4), (1, 2, 3, 4), (1, 3, 4), (2, 3, 4), (1, 2, 3, 4, 5), (1, 2, 4, 5), (1, 2, 3, 4, 5, 6), (1, 2, 3, 5, 6), (1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 7, 8, 9), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18",
        "num_ids": 2080,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    primes = []\n    for i in range(2, n+1):\n        if True:\n            is_prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n    return len(primes)",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(5,10) == (10,5)",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n\n    The function takes in two tuples as input and returns a tuple containing the maximum value from the two tuples.\n\n    Example:\n    test_tup1 = (5, 10)\n    test_tup2 = (20, 30)\n\n    maximize_elements(test_tup1, test_tup2) will return (30, 20).\n    '''\n\n    # create a list to store the values of both tuples\n    values = []\n\n    # loop through each element in the tuples\n    for tup in (test_tup1, test_tup2):\n        # loop through each element in the tuple\n        for value in tup:\n            # if the value is already in the list, remove it\n            if value in values:\n                values.remove(value)\n            # if the value is not in the list, add it to the list\n            else:\n                values.append(value)\n\n    # sort the list in descending order and return the first two elements\n    return sorted(values, reverse=True)[:2]",
        "test": "assert maximize_elements((7, 9), (5, 8)) == (8, 9)",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 3\n    else:\n        for i in range(5, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return n",
        "test": "assert newman_prime(7) == 7, \"The correct result for n=7 is 7, not {}\".format(newman_prime(7))",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # create a new list to store the results\n    results = []\n\n    # loop through each element of the first tuple and perform division operation element-wise\n    for element in test_tup1:\n        # check if the element exists in the second tuple\n        if element in test_tup2:\n            # if it does, perform division operation and append the result to the new list\n            results.append(element / test_tup2[element])\n        else:\n            # if it doesn't, append the element as the result of division operation\n            results.append(element / 1)\n\n    return results",
        "test": "assert division_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (1, 1, 1, 1, 1)",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n\n    # Return the two parts as a tuple\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_left = h_age\n    age = 0\n    while years_left > 0:\n        years_left -= 1\n        age += 1\n    return age",
        "test": "assert dog_age(5) == 5, \"dog_age(5) should return 5\"",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "test": "assert list_split([], 1) == []",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**3",
        "test": "assert lateralsurface_cube(4) == 12",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through the range from 1 to n\n    for i in range(1, n+1):\n        # Square the current number and add it to the sum\n        sum += i**2\n    \n    # Return the sum\n    return sum",
        "test": "assert square_Sum(1) == 1  # 1^2 = 1",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_star_num(n):\n    # Initialize variables\n    num = 1\n    index = 1\n\n    # Iterate over the number from 2 to n\n    while index <= n:\n        # If the index is divisible by 2, add 1 to the number and increment the index\n        if index % 2 == 0:\n            num += 1\n            index += 1\n        else:\n            # If the index is not divisible by 2, add 0 to the number and increment the index by 1\n            num += 0\n            index += 1\n\n    # Return the nth star number\n    return num",
        "test": "assert find_star_num(0) == 1",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97, \"ascii_value('a') should return 97\"",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    print(\"Sum of even numbers:\", sum_even)\n    return sum_even",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 10",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #initialize the sum variable\n    sum = 0\n    \n    #loop through the range of numbers from 1 to n\n    for i in range(1, n+1): \n\n        #check if the number is even\n        if i % 2 == 0: \n\n            #calculate the raised to the 5th power\n            raised_to_5 = i ** 5\n\n            #add the raised to the sum variable\n            sum += raised_to_5\n    \n    #return the sum\n    return sum",
        "test": "assert even_Power_Sum(2) == 32 # Check that the function returns the correct sum of the first 2 even natural numbers raised to the fifth power",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)-1, -1, -1):\n        rear_list.append(test_list[i][1])\n    return rear_list",
        "test": "assert rear_extract([('a', 1), ('b', 2), ('c', 3)]) == [3, 2, 1]",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return None\n\n    # initialize the subtraction list\n    subtraction_list = []\n\n    # loop through the elements of the first tuple and subtract them from the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        subtraction_list.append(test_tup1[i] - test_tup2[i])\n\n    return subtraction_list",
        "test": "assert substract_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 6, 7)) == (0, 1, 2, 3, 4, 5)",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeffs = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            coeff = math.comb(n, i)\n            sum_even_binomial_coeffs += coeff\n    return sum_even_binomial_coeffs",
        "test": "assert even_binomial_Coeff_Sum(5) == 15 # sum of even binomial coefficients for n = 5",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def volume_cylinder(r, h):\n    volume = (4/3) * (3.14159 * r**2) * h\n    return volume",
        "test": "assert volume_cylinder(2,3) == 6.28",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def dict_filter(dict,n):\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({}, 5) == {}",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_element = test_tup[0]\n    count = 1\n    for element in test_tup[1:]:\n        if element == first_element:\n            count += 1\n    return count",
        "test": "assert count_first_elements(('a', 'b', 'c', 'd', 'e', 'f')) == 1",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal = 1\n    num = 1\n\n    # Iterate through the numbers\n    while num < n:\n        # Check if the current number is a decagonal\n        if num % 10 == 0 and num % 3 == 0:\n            decagonal *= num\n        num += 1\n\n    # Return the nth decagonal number\n    return decagonal",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Create an empty set to store unique elements\n    unique_set = set()\n\n    # Loop through each element in the list\n    for element in test_list:\n\n        # If the element already exists in the set, return False\n        if element in unique_set:\n            return False\n\n        # Otherwise, add the element to the set\n        unique_set.add(element)\n\n    # If the loop completes without returning False, the list is unique\n    return True",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts the elements of two lists element-wise.\n\n    Args:\n    nums1 (list): A list of elements to subtract.\n    nums2 (list): A list of elements to subtract from nums1.\n\n    Returns:\n    list: A new list containing the elements of nums1 that are not in nums2.\n    \"\"\"\n    return [num for num in nums1 if num not in nums2]",
        "test": "assert sub_list([1,2,3,4,5], [2,4,6,8]) == [1, 1, 1, 1, 1]",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    for digit in digit_freq:\n        if digit_freq[digit] > 1:\n            return False\n    return True",
        "test": "assert validate(123456) # True",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item == element:\n            return True\n    return False",
        "test": "assert check_element([1,2,3,4,5], 6) == False",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba\\b\\b\\b'\n    return bool(re.search(pattern, text))\n\n\ntext = \"This is a test string containing the 'a' character followed by two or three 'b' characters.\"\nprint(text_match_two_three(text))  # Output: True",
        "test": "assert text_match_two_three(\"ababcdabcd\") == False, \"The function should return False when the text contains the 'a' character followed by two or three 'b' characters.\"",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize variables\n    max_so_far = a[0]\n    current_sum = a[0]\n\n    # Iterate through the array\n    for i in range(1, n):\n        # If the current sum is greater than the max_so_far, update the max_so_far and current_sum\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n            current_sum = a[i]\n        # If the current sum is less than the max_so_far, then add the current element to the current_sum\n        else:\n            current_sum += a[i]\n\n    # Return the max_so_far\n    return max_so_far",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, -4, 5], 3, 2) == 11",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i*i\n    return sum_of_squares",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = []\n    for sublist in list1:\n        if len(sublist) > len(max_len):\n            max_len = sublist\n    return max_len",
        "test": "assert max_length([]) == []",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_no_of_ways(n, k): \n    # base case\n    if n == 1 or k == 1: \n        return 1\n    # recursive case\n    else: \n        return (count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)) % (10**9 + 7)",
        "test": "assert count_no_of_ways(5, 3) == 11",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    n = int(n)\n    m = int(m)\n    if m == 0:\n        return 0\n    else:\n        if n % m == 0:\n            return n // m\n        else:\n            return n // m + 1\n",
        "test": "assert find(4,2) == 2",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = math.sqrt(w * h)\n    return area / 3",
        "test": "assert otherside_rightangle(6,4) == 6",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_value = listval[0]\n        for value in listval:\n            if value > max_value:\n                max_value = value\n        return max_value",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5, \"The maximum value in the list is not 5.\"",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through all numbers from 1 to number\n    for i in range(1, number+1):\n\n        # check if i is a divisor of number\n        if i == 1 or i == number:\n            continue\n\n        # if i is a divisor of number, add i to sum\n        if number % i == 0:\n            sum += i\n\n    # return the sum of divisors\n    return sum",
        "test": "assert sum_div(25) == 60",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 640,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def flatten_list(list1):\n    '''\n    Function to flatten a given nested list structure.\n\n    Parameters:\n    list1 (list): A nested list structure to flatten.\n\n    Returns:\n    list: A single, flattened list.\n\n    '''\n    flattened_list = []\n\n    # Traverse the nested list structure\n    for item in list1:\n        # If the item is a list, call flatten_list recursively on it\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        # If the item is not a list, simply append it to the flattened list\n        else:\n            flattened_list.append(item)\n\n    return flattened_list",
        "test": "assert flatten_list([1, 2, 3, [4, 5, [6, 7], 8], 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1050,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = stdata[0][1]\n    for t in stdata:\n        if t[1] > max_agg:\n            max_agg = t[1]\n    return max_agg",
        "test": "assert max_aggregate([(\"apple\", 5), (\"banana\", 3), (\"orange\", 7)]) == 7",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_binary_seq(n):\n    seq = [0] * (2*n)\n    # initialize the first n bits of the sequence as 1\n    for i in range(n):\n        seq[i] = 1\n    \n    # initialize the last n bits of the sequence as 0\n    for i in range(n, 2*n):\n        seq[i] = 0\n    \n    # find the length of the binary sequence that satisfies the given condition\n    count = 0\n    i = 2*n-1\n    while i > 0:\n        if seq[i-n] == seq[i-n-1]:\n            count += 1\n        i -= 1\n    \n    return count",
        "test": "assert count_binary_seq(1) == 0",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += dict_depth(value)\n    return depth",
        "test": "assert dict_depth({'a':1}) == 1",
        "num_ids": 1494,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    for i in range(rotations) :\n        for j in range(ranges[i][0],ranges[i][1]+1) :\n            if index == j :\n                return arr[j-ranges[i][0]]\n\n    return \"Element not found\"",
        "test": "assert find_Element([1], [0,1], 1, 0) == [1]",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern for words starting with letter 'p'\n    pattern = r'\\b[Pp]_[Pp]\\b'\n\n    # Find all occurrences of the pattern in the list of words\n    matches = re.findall(pattern, words)\n\n    # Return the two words if found, else return an empty list\n    if len(matches) == 2:\n        return matches\n    else:\n        return []",
        "test": "assert start_withp([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [\"banana\", \"cherry\"]",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    prev_sum = 0\n    prev_index = index - 1\n    prev_k = prev_index + k - 1\n\n    for i in range(1, index + 1):\n        curr_sum = a[i]\n        curr_index = i\n        curr_k = curr_index + k - 1\n\n        if curr_k > index:\n            curr_sum += a[prev_k]\n            curr_index = prev_k\n            curr_k = curr_index + k - 1\n\n        if curr_k > index - 1 and curr_sum > max_sum:\n            max_sum = curr_sum\n\n        if curr_index == prev_index + k - 1:\n            break\n\n        prev_sum = curr_sum\n        prev_index = curr_index\n\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq( [1, 3, -2, 4, -1, 10], 5, 2, 4) == 2 # check for the correct answer",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    colon = tuple([None] * m)\n    for i in range(m):\n        if i < n:\n            colon[i] = tuplex[i]\n        else:\n            colon[i] = None\n    return colon",
        "test": "assert colon_tuplex((1,2),3,3) == (2, 2)",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize a list to store the products\n    products = []\n\n    # Loop through each element in nums1 and nums2\n    for i in range(N):\n        # Loop through each element in nums2 and select a factor from nums1\n        for j in range(i+1, N):\n            # Multiply the selected factor from nums1 with each element in nums2\n            product = nums1[i] * nums2[j]\n            # Add the product to the list of products\n            products.append(product)\n\n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n\n    # Return the first N elements of the list of products\n    return products[:N]",
        "test": "assert large_product([1,2,3,4,5], [6,7,8,9,10], 2) == [200,144,96]",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5,10) == 10",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('A') == ('A',)",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (n-1):  # find the leftmost set bit\n        n = n | (n-1)  # set the bit to 1\n    \n    return n",
        "test": "assert set_left_most_unset_bit(0) == 0, \"set_left_most_unset_bit(0) should return 0\"",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\n\ndef volume_cone(r, h):\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(1,1) == 3.141592653589793",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes a non-negative integer n as input and returns the highest power of 2 less than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        max_power = 0\n        while n >= 2 ** max_power:\n            max_power += 1\n        return 2 ** max_power",
        "test": "assert highest_Power_of_2(10) == 16  # 10 is the highest power of 2 that is less than or equal to 10",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_lucas(n):\n    # initialize a list to store the Lucas numbers\n    lucas = [1]\n    # iterate through the list until the nth lucas number is found\n    for i in range(2, n+1):\n        # add the (i-1)th lucas number to the current list\n        lucas.append(lucas[-1] + lucas[-2])\n    # return the nth lucas number\n    return lucas[n]\n",
        "test": "assert find_lucas(1) == 2",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        list_.append(string.format(item))",
        "test": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"{0}\") == \"applebananacherry\"",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert a list of dictionaries to a nested dictionary.\n    '''\n\n    # Create a new dictionary to hold the converted data\n    result = {}\n\n    # Iterate over the lists and add key-value pairs to the result dictionary\n    for item in zip(l1, l2, l3):\n        key, value = item\n        if isinstance(value, list):\n            key = 'list_' + str(value.index(value[0]))\n        result[key] = value\n\n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def get_max_sum(n):\n    # Find the sum of each multiple of n/2, n/3, n/4, n/5\n    sum_2 = sum_3 = sum_4 = sum_5 = 0\n    for i in range(1, n+1):\n        sum_2 += i\n    for i in range(1, n//2+1):\n        sum_3 += i\n    for i in range(1, n//3+1):\n        sum_4 += i\n    for i in range(1, n//4+1):\n        sum_5 += i\n\n    # Find the maximum sum by summing all the above sums\n    max_sum = sum_2 + sum_3 + sum_4 + sum_5\n\n    return max_sum",
        "test": "assert get_max_sum(0) == 0",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    # Iterate through each element in the tuple\n    for item in test_tup:\n        # Add the item to the set if it's not already in it\n        if item not in unique_set:\n            # If the item is already in the set, return False\n            return False\n        # Otherwise, add it to the set\n        unique_set.add(item)\n    # If the loop completes without finding any duplicates, return True\n    return True",
        "test": "assert check_distinct(('banana', 'cherry', 'apple', 'banana')) == False",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Given a string, return the first non-repeating character in the string.\n\n    If there are no non-repeating characters, return None.\n\n    Example:\n    >>> first_non_repeating_character(\"hello\")\n    'h'\n    >>> first_non_repeating_character(\"abc\")\n    'a'\n    '''\n    # initialize a list to store the counts of each character in the string\n    char_counts = {}\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    # iterate through the list of counts and find the first non-repeating character\n    for char, count in char_counts.items():\n        if count == 1:\n            return char\n\n    # if no non-repeating characters are found, return None\n    return None",
        "test": "assert first_non_repeating_character('aabcc') == 'b'",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Check whether the given string starts and ends with the same character.\n    '''\n    # check if the string starts with a letter\n    if not re.match(regex, string[0]):\n        return False\n    # check if the string ends with a letter\n    if not re.match(regex, string[-1]):\n        return False\n    # check if the string ends with the same character as the first letter\n    if re.match(regex, string[-1], re.IGNORECASE):\n        return True\n    # check if the string starts with the same character as the last letter\n    if re.match(regex, string[0], re.IGNORECASE):\n        return True\n    # if none of the above conditions are met, the string does not start or end with the same character\n    return False",
        "test": "assert check_char('Hello') == False",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Find the median of a, b and c\n    mid_a = (a + b + c) // 3\n    mid_b = (a + b + c) // 3\n    mid_c = (a + b + c) // 3\n    \n    # Calculate the difference between the medians\n    diff = (mid_a - mid_b) + (mid_b - mid_c) + (mid_c - mid_a)\n    \n    # Check if the difference is odd or even\n    if diff % 2 == 0:\n        # If it's even, return the average of the two medians\n        return (mid_a + mid_b) / 2\n    else:\n        # If it's odd, return the median of the two medians\n        return (mid_a + mid_b) / 2.5",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] ^ test_tup2[i])\n    \n    return result_tup",
        "test": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (1, 4, 3, 5, 6, 4)",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if the input parameters are valid\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both input parameters must be tuples.\")\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n\n    # Initialize an empty result list\n    result_list = []\n\n    # Iterate through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # Perform index wise addition of the elements in the tuples\n        result_list.append(test_tup1[i] + test_tup2[i])\n\n    # Return the result list\n    return result_list\n",
        "test": "assert add_nested_tuples((1, 2, 3), (4, (5, 6))) == (5, 7, (8, 9))",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def minimum(a, b):\n    return a if a < b else b",
        "test": "assert minimum(5,3) == 3",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((\"\", 1, 2), (1, 2)) == False",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Convert the input x to string\n    x = str(x)\n    \n    # Initialize the parity variable to 0\n    parity = 0\n    \n    # Iterate through each character in the string x\n    for char in x:\n        # If the character is odd, increment the parity variable by 1\n        if int(char) % 2 == 1:\n            parity += 1\n    \n    # Return the parity variable as the output\n    return parity",
        "test": "assert find_Parity(5) == 1 # check for odd parity",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Define the list of digits of the original number\n    digits = list(str(n))\n\n    # Reverse the list of digits\n    reversed_digits = digits[::-1]\n\n    # Convert the reversed list of digits back to a number and return it\n    return int(''.join(reversed_digits))",
        "test": "assert rearrange_bigger(12345) == 54321",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a priority queue (min heap) with k elements\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n    for num in nums2:\n        heapq.heappush(min_heap, -num)\n    \n    # Iterate k times and add the smallest k pairs to the result list\n    result = []\n    for _ in range(k):\n        # Remove the smallest pair from the priority queue and add it to the result list\n        pair = heapq.heappop(min_heap)\n        if pair == -pair:\n            result.append(pair)\n    \n    return result",
        "test": "assert k_smallest_pairs([1,2,3,4,5], [4,5,6,7,8], 2) == ([1,4], [2,5])",
        "num_ids": 1905,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def min_product_tuple(lst):\n    # Initialize minimum product as infinity\n    min_product = float('inf')\n\n    # Iterate through each pair of tuples in the list\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            # Calculate the product of the two tuples\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n\n            # Update the minimum product if necessary\n            if product < min_product:\n                min_product = product\n\n    return min_product\n",
        "test": "assert min_product_tuple([3, 5, 2, 4, 7]) == 30 ",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the remaining elements of the list\n    for val in listval[1:]:\n        # If the current value is smaller than the minimum value, update it\n        if val < min_val:\n            min_val = val\n\n    # Return the minimum value found\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('([A-Z])', lambda x: x.group(0).lower(), word)\n    return camel_case.capitalize()",
        "test": "assert snake_to_camel(\"camelCase\") == \"camelCase\"",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]",
        "test": "assert remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        return None\n    \n    return list1[n-1]",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == ('b', 2)",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n\n    for item in list1:\n        if item in list2:\n            return True\n\n    return False",
        "test": "assert overlapping([1,2,3], [2,3,4]) == True",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_Product(arr):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    # initialize variables for maximum and minimum products\n    max_product = arr[0]\n    min_product = arr[0]\n    # calculate the maximum product of all pairs of elements\n    for i in range(1, len(arr)):\n        product = arr[i] * max_product\n        if product > max_product:\n            max_product = product\n        # update minimum product if necessary\n        if product < min_product:\n            min_product = product\n    # return the maximum product of all pairs\n    return max_product",
        "test": "assert max_Product([5,4,3,2,1]) == 120",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # initialize an empty list to store common elements\n    common_elements = []\n    # iterate through each tuple in the input list\n    for tuple1 in Input:\n        # initialize a boolean flag to keep track of whether we have found a common element yet\n        found_common = False\n        # iterate through each tuple in the input list\n        for tuple2 in Input:\n            # check if the first element of the first tuple is the same as the first element of the second tuple\n            if tuple1[0] == tuple2[0]:\n                # if we find a common element, add it to the common_elements list and set the flag to True\n                common_elements.append(tuple1[0])\n                found_common = True\n                break\n        # if we have not found a common element yet, add the first element of the first tuple to the common_elements list\n        if not found_common:\n            common_elements.append(tuple1[0])\n    # return the common_elements list\n    return common_elements",
        "test": "assert group_tuples([('apple', 'banana'), ('banana', 'orange'), ('apple', 'banana'), ('orange', 'apple'), ('pear', 'banana')]), ('apple', 'banana')",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n\n    return max_element",
        "test": "assert Find_Max([1, 2, 3, 4]) == 4",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(\"Total sum:\", total_sum, \"multiplied by length of list:\", len(list1))",
        "test": "assert round_and_sum([10, 20, 30, 40, 50]) == 250",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum",
        "test": "assert cube_Sum(2) == 12 # Cube sum of 2",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + ','\n    result = result[:-1]\n    return result",
        "test": "assert concatenate_tuple(('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd')",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize sum and count variables to zero\n    sum = 0\n    count = 0\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate cube of current number\n        cube = i**3\n        # add cube to sum and increment count\n        sum += cube\n        count += 1\n    # return the average of cubes\n    return sum/count",
        "test": "assert find_Average_Of_Cube(1) == 1.0, \"Function should return the average of cubes of natural numbers less than or equal to 1.\"",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]",
        "test": "assert extract_rear(('a', 'b', 'c', 'd', 'e')) == 'c'",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 6) == 0",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Filter odd numbers from a given list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extract the year from the date\n    year = int(re.findall('\\d+', dt)[0])\n    \n    # Extract the month and day from the date\n    month = int(re.findall('\\d+', dt)[1])\n    day = int(re.findall('\\d+', dt)[2])\n    \n    # Extract the year and month from the date\n    year_month = dt[:4] + '-' + str(month).zfill(2) + '-' + str(day)\n    \n    # Format the year and month in the desired format\n    return year_month",
        "test": "assert change_date_format(\"2021-02-01\") == \"01-02-2021\"",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i - gap\n\n            while j >= 0 and my_list[j] > key:\n                my_list[j + gap] = my_list[j]\n                j -= gap\n            my_list[j + gap] = key\n\n        gap //= 2\n\n    return my_list\n",
        "test": "assert shell_sort([4, 2, 1, 3, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1012,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    # Create two new tuples containing only the elements of the first tuple\n    and_tup1 = tuple(test_tup1)\n    and_tup2 = tuple(test_tup2)\n    # Create a new list containing the elements of the first tuple and the elements of the second tuple\n    and_list = and_tup1 + and_tup2\n    # Return the list of elements\n    return and_list",
        "test": "assert and_tuples((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) == (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a (float): The x-coordinate of the first point of the parabola.\n    b (float): The y-coordinate of the first point of the parabola.\n    c (float): The z-coordinate of the first point of the parabola.\n\n    Returns:\n    directrix (float): The directrix of the parabola.\n    \"\"\"\n\n    directrix = ((a*b**2 + b*c**2 + c**2) ** 0.5) / (a**3)\n\n    return directrix",
        "test": "assert parabola_directrix(1, 0, 3) == 3",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    # Find the intersection of the two lists\n    intersection = list(set(list1) & set(list2))\n\n    # If the intersection is empty, the two lists have no common elements\n    if not intersection:\n        return False\n\n    # Return True if at least one element is common\n    else:\n        return True",
        "test": "assert common_element([1, 2, 3], [1, 2, 3]) == True",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * 0.5 * height\n\n    # Find the length of the base part of the trapezium\n    base_length = base1 + base2\n\n    # Calculate the length of the other part of the trapezium\n    other_length = height - base_length\n\n    # Find the length of the median of the two parts\n    median_length = (base_length + other_length) / 2\n\n    return median_length\n",
        "test": "assert median_trapezium(1,2,4) == 2",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the given number is greater than all the elements in the array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(?=[bB][^bB]*)')\n    matches = pattern.finditer(text)\n    return bool(matches)\n",
        "test": "assert text_match_one(\"abab\") == True",
        "num_ids": 2410,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # get the last digit of the number using modulus operator\n    last_digit = n % 10\n\n    # return the last digit\n    return last_digit",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums",
        "test": "assert neg_nos([-2, 3, 5, 1, 4]) == [2, 1, -3, -4]",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(str1)\n\n    # Loop through each character in the list and check if it is odd\n    for i in range(len(char_list)):\n        if i % 2 == 1:\n            # If the character is odd, remove it from the list\n            char_list.pop(i)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result",
        "test": "assert multiple_to_single([1,2,3,4,5]) == 15",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w+(?:, |\\?)\\w+\\b'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches are found, return None\n    if not matches:\n        return None\n\n    # Find the first adverb in the text\n    first_adverb_match = next((match for match in matches if match.lower() == 'first' or match.lower() =='second' or match.lower() == 'third' or match.lower() == 'fourth' or match.lower() == 'fifth' or match.lower() =='sixth' or match.lower() =='seventh' or match.lower() == 'eighth' or match.lower() == 'ninth' or match.lower() == 'tenth' or match.lower() == 'eleventh' or match.lower() == 'twelfth' or match.lower() == 'thirteenth' or match.lower() == 'fourteenth' or match.lower() == 'fifteenth' or match.lower() =='sixteenth' or match.lower() =='seventeenth' or match.lower() == 'eighteenth' or match.lower() == 'nineteenth' or match.lower() == 'twentieth' or match.lower() == 'thirtieth' or match.lower() == 'fortieth' or match.lower() == 'fifty-first' or match.lower() == 'fifty-second' or match.lower() == 'fifty-third' or match.lower() == 'fifty-fourth' or match.lower() == 'fifty-fifth' or match.lower() == 'fifty-sixth' or match.lower() == 'fifty-seventh' or match.lower() == 'fifty-eighth' or match.lower() == 'fifty-ninth' or match.lower() == 'fifty-tenth' or match.lower() == 'fifty-eleventh' or match.lower() == 'fifty-twelfth' or match.lower() == 'fifty-thirteenth' or match.lower() == 'fifty-fourteenth' or match.lower() == 'fifty-fifteenth' or match.lower() == 'fifty-sixteenth' or match.lower() == 'fifty-seventeenth' or match.lower() == 'fifty-eighteenth' or match.lower() == 'fifty-nineteenth' or match.lower() == 'fifty-twentieth' or match.lower() == 'fifty-thirtieth' or match.lower() == 'fifty-fortieth'), None)\n\n    # If no adverb is found, return None\n    if not first_adverb_match:\n        return None\n\n    # Find the position of the adverb in the text\n    adverb_index = text.lower().find(first_adverb_match.lower())\n\n    # Return the adverb and its position\n    return (first_adverb_match, adverb_index)",
        "test": "assert find_adverb_position(\"The dog is playing with the bird\") == (1, 16) # The is an adverb",
        "num_ids": 2783,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3",
        "test": "assert surfacearea_cube(5) == 125, \"Incorrect surface area calculation for cube of size 5.\"",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = []\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    positive_count = len(positive_nums) / len(nums)\n    return positive_count",
        "test": "assert positive_count([1, 2, 3, 4, 5, 6]) == 1.5",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num\n    return largest",
        "test": "assert largest_neg([1, -5, 3, 2, -7]) == -5",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if i % K == 0:\n            trimmed_list.append(test_list[i])\n    return trimmed_list",
        "test": "assert trim_tuple([], 2) == []",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Arguments:\n    test_tup1 -- A tuple containing elements to be multiplied.\n    test_tup2 -- A tuple containing elements to be multiplied.\n\n    Returns:\n    A tuple containing the product of all elements in the given two tuples.\n    '''\n\n    product_list = []\n    for i in range(len(test_tup1)):\n        product_list.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(product_list)",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for key, value in count.items():\n        if key in lst:\n            print(f\"{key} is present {value} times\")",
        "test": "assert count_Occurrence(('a', 'b', 'c'), ['a', 'b', 'c', 'd', 'a']) == 3",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += (i*i*i)//(i-1)\n    return sum",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for i in range(len(l)):\n        if i < l[0]:\n            continue\n        extracted_str.append(l[i][:l[0]])\n    return extracted_str\n",
        "test": "assert extract_string(\"hello world\", 10) == \"hello\"",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n\n    Parameters:\n    text1 (string): The string to remove all whitespaces from.\n\n    Returns:\n    string: The modified string with all whitespaces removed.\n    '''\n\n    # Use regular expressions to replace all whitespaces with a single space character\n    text1 = re.sub(r'\\s+','', text1)\n\n    return text1",
        "test": "assert remove_whitespaces(\"\") == \"\"",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount",
        "test": "assert loss_amount(150,150) == 0",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef sumOfFactors(n):\n    \"\"\"\n    Write a Python function to find the sum of even factors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total",
        "test": "assert sumofFactors(30) == 210",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]{2,}\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\") == True",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    else:\n        if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            return True\n        else:\n            return False",
        "test": "assert check_monthnumb_number(12) == True # Adecember",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for s in stringlist:\n        reversed_stringlist.append(s[::-1])\n    return reversed_stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list of integers as input and returns the sublist having minimum length.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize sublist as an empty list\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist",
        "test": "assert Find_Min([]) == []",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)\n\nstring = \"The quick brown fox jumps over the lazy dog.\"\nresult = remove_uppercase(string)\nprint(result)",
        "test": "assert remove_uppercase(\"12345\") == \"12345\"",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import itertools\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # Create a list of all possible elements in the list\n    all_elements = list(set(list1))\n    \n    # Define the function to generate all possible combinations\n    def generate_combinations(lst):\n        # If the length of the list is 0, return an empty list\n        if len(lst) == 0:\n            return []\n        \n        # Otherwise, return a list of all possible combinations of the first element\n        return [lst[0]] + generate_combinations(lst[1:])\n    \n    # Call the function to generate all possible combinations\n    combinations = generate_combinations(all_elements)\n    \n    return combinations",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1190,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product + arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product\n",
        "test": "assert max_subarray_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if all(dict[key] == value for key, value in dict.items()):\n            return True\n    return False",
        "test": "assert check_value({}, 5) == True",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product",
        "test": "assert max_product([1,2,3]) == 6, \"The correct value for max_product([1,2,3]) should be 6.\"",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Get the length of the tuple\n    length = len(test_tup)\n\n    # Initialize the pairwise_sum to an empty list\n    pairwise_sum = []\n\n    # Iterate through each element in the tuple\n    for i in range(length):\n        # Check if the i-th element is equal to the next element\n        if test_tup[i] == test_tup[i+1]:\n            # Append the current element to the pairwise_sum if it is not already in the list\n            if i not in pairwise_sum:\n                pairwise_sum.append(test_tup[i])\n        else:\n            # Append the previous pairwise_sum to the pairwise_sum if it is not already in the list\n            if len(pairwise_sum) > 0:\n                pairwise_sum.append(pairwise_sum[-1])\n\n    # Return the pairwise_sum as a list\n    return pairwise_sum",
        "test": "assert add_pairwise((2, 3, 4)) == (3, 4, 5)",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_remainder(arr, n):\n    # Create a list of products of the input array elements\n    products = [arr[i] * arr[j] for i in range(len(arr)) for j in range(len(arr))]\n\n    # Sort the list in descending order\n    products.sort(reverse=True)\n\n    # Calculate the modulo n of the products\n    modulo_products = [product % n for product in products]\n\n    # Return the product of the modulo_products\n    return modulo_products[0]",
        "test": "assert find_remainder([1,2,3,4,5], 5) == 0",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_Consecutive(lst):\n    if len(lst) < 2:\n        return True\n\n    last_num = lst[0]\n    for num in lst[1:]:\n        if num!= last_num + 1:\n            return False\n        last_num = num\n\n    return True",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the lists to sets to remove duplicates\n    test_set1 = set(test_list1)\n    test_set2 = set(test_list2)\n    \n    # find the intersection of sets\n    intersection_set = test_set1.intersection(test_set2)\n    \n    # convert the set back to a tuple and return it\n    return tuple(intersection_set)",
        "test": "assert tuple_intersection([1,2,3,4,5], [2,3,4,5,6]) == (2, 3, 4, 5)",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str",
        "test": "assert replace_char(\"hello world\", \"l\", \"Z\") == \"Xld wrld\"",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # get the sorted list of tuples (value, count)\n    sorted_list = sorted(counter.items(), key=lambda x: x[0])\n\n    # convert the list of tuples back to a dictionary\n    sorted_dict = dict(sorted_list)\n\n    return sorted_dict",
        "test": "assert sort_counter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables\n    max_val = min_val = nums[0]\n    # loop through array\n    for num in nums:\n        # update max_val and min_val\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    # return sum of max_val and min_val\n    return max_val + min_val",
        "test": "assert big_sum([-5, -3, -1, 0, 1]) == -4",
        "num_ids": 789,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello\") == \"hello\"",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Remove all lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digits = []\n    while n!= 0 :  \n        digits.insert(0, n % 10)  \n        n = n // 10  \n    return digits[0]  ",
        "test": "assert first_Digit(987654321) == 9",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list: \n        if num % 2!= 0: \n            result.append(num)\n    return result",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def difference(n):\n    cube_sum = sum(i**3 for i in range(1, n+1))\n    natural_sum = sum(i for i in range(1, n+1))\n    return cube_sum - natural_sum\n",
        "test": "assert difference(100) == 2037 #The correct result for the given code is: 2037",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5],5) == 2, \"The function should return the number of pairs whose xor value is odd.\"",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n",
        "test": "assert toggle_string('HELLO WORLD') == 'hello world'",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    result = 0\n    while n1 > 0:\n        diff = abs(n1 % 10 - n2 % 10)\n        if diff == 9:\n            result += 1\n        n1 //= 10\n        n2 //= 10\n    return result",
        "test": "assert digit_distance_nums(1000, 999) == 3",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    current_max = float('-inf')\n    for i in range(size):\n        current_sum += a[i]\n        current_max = max(current_max, current_sum)\n        max_sum = max(max_sum, current_max)\n    return max_sum\n\na = [1, -2, 3, -2, 1, -5, 4, 2]\nsize = len(a)\nprint(\"Maximum subarray sum:\", max_sub_array_sum(a, size))",
        "test": "assert max_sub_array_sum(list(range(1,10)), 3) == 6",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty list to store the union of the elements\n    union = []\n    \n    # Loop through each element of the first tuple\n    for num in test_tup1:\n        # If the element is not already present in the union list, add it to the list\n        if num not in union:\n            union.append(num)\n    \n    # Loop through each element of the second tuple\n    for num in test_tup2:\n        # If the element is not already present in the union list, add it to the list\n        if num not in union:\n            union.append(num)\n    \n    # Sort the union list in ascending order and return it\n    return sorted(union)",
        "test": "assert union_elements((1,2,3,4,5), (3,4,5,6,7)) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list of integers as input and returns the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for num in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0, \"Function should return 0 for an empty list\"",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n\n    :param text: A string containing values between quotation marks.\n    :return: A list of values.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches",
        "test": "assert extract_values(\"Hello, there! How are you doing today?\") == \"you\"",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4], 3) == 3",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_of_digits = 0\n    while n > 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits",
        "test": "assert sum_digits(12345) == 1 + 2 + 3 + 4 + 5",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def issort_list(list1):\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] > list1[j]:\n                list1[i], list1[j] = list1[j], list1[i]\n    return list1",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initialize an empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Initialize an empty list to store the characters in the sublist\n        char_list = []\n\n        # Loop through each character in the sublist\n        for char in sublist:\n            # Add each character to the list of characters in the sublist\n            char_list.append(char)\n\n        # Sort the list of characters in the sublist using the built-in sort() method\n        sorted_char_list = sorted(char_list)\n\n        # Append the sorted list of characters to the list of sorted sublists\n        sorted_sublists.append(sorted_char_list)\n\n    # Return the list of sorted sublists\n    return sorted_sublists",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * (r * h)",
        "test": "assert surfacearea_cylinder(4, 2) == 12",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    # If A is empty, then B is sublist of A\n    if len(A) == 0:\n        return True\n\n    # Initialize a flag to true\n    flag = True\n\n    # Iterate through B and check if each element is present in A\n    for i in range(len(B)):\n        if B[i] not in A:\n            flag = False\n            break\n\n    # If all elements in B are present in A, then A is sublist of B\n    if flag:\n        return True\n\n    # If A is sublist of B, then B is sublist of A\n    else:\n        return False",
        "test": "assert is_Sub_Array([1,2,3,4,5],[2,3,6]) == False",
        "num_ids": 1323,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the last digit of the factorial as 0\n    last_digit = 0\n    \n    # loop through the digits of n and find the last digit\n    for i in range(9, 0, -1):\n        last_digit = n // 10 ** i\n        n %= 10 ** i\n    \n    return last_digit",
        "test": "assert last_Digit_Factorial(100) == 0, \"The last digit of factorial of 100 should be 0.\"",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): First list.\n        list2 (list): Second list.\n        list3 (list): Third list.\n\n    Returns:\n        list: A single flat list containing all the elements of all three input lists.\n    '''\n    return list1 + list2 + list3",
        "test": "assert interleave_lists([],[],[]) == []",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n    return dissimilar",
        "test": "assert find_dissimilar(('apple', 'banana'), ('banana', 'cherry')) == ['apple']",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            sub_tuple = even_ele(element, even_fnc)\n            new_tuple.append(sub_tuple)\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return new_tuple\n",
        "test": "assert even_ele((1, 2, 3, 4, 5, 6, 7, 8, 9), lambda x: x % 2!= 0) == [1, 3, 5, 7, 9]",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area",
        "test": "assert surface_Area(5,5) == 25, \"surface_Area(5,5) should return 25.\"",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def my_dict(dict1):\n    return len(dict1) == 0",
        "test": "assert my_dict({}) == True, \"my_dict({}) should return True\"",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if num == 1 or num == 2:\n        return 1\n    catalan = 0\n    for i in range(2, num + 1):\n        catalan += (1/float(i)) * (1/float(i-1)) * (1/float(i+1))\n    return catalan",
        "test": "assert catalan_number(2) == 1",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the pattern for adverbs ending with ly\n    pattern = re.compile(r\"(?i)(ly|ed)$\")\n\n    # Find all matches of the pattern in the string\n    matches = pattern.finditer(text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Extract the match and its position from the matches\n    match = matches[0]\n    position = match.start()\n\n    # Return the match and its position\n    return match.group(), position",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == \"jumps\"",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap to store the items\n    max_heap = []\n    \n    # Iterate over the given items and add them to the max heap\n    for item in items:\n        heapq.heappush(max_heap, (-item, item))\n    \n    # Pop the n most expensive items from the max heap\n    most_expensive = []\n    for _ in range(n):\n        most_expensive.append(heapq.heappop(max_heap)[1])\n    \n    return most_expensive",
        "test": "assert expensive_items([],0) == []",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # define the length of the list\n    length = len(l)\n    # check if the length of the list is less than or equal to the nth element\n    if length <= n:\n        # return the original list if the nth element is greater than or equal to the length of the list\n        return l\n    # find the index of the nth element\n    index = n - 1\n    # create an empty list to hold the first part of the list\n    first_part = []\n    # iterate through the list and add the first part of each element to the first_part list\n    for i in range(index, length):\n        first_part.append(l[i])\n    # add the first part to the beginning of the list\n    l = first_part + l[index:]\n    # return the modified list\n    return l",
        "test": "assert split_Arr([1,2,3,4,5], 5) == ([1,2,3,4,5])",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 0\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest - smallest",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    # iterate through all the numbers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i == int(i**0.5):\n            count += 1\n    return count",
        "test": "assert perfect_squares(1, 2) == 1, \"The perfect squares of 1 and 2 are not equal to 1\"",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): the angle in radians or degrees\n    y (float): the magnitude of the point\n\n    Returns:\n    A tuple containing the rectangular coordinates\n    '''\n\n    rect_x = x * cmath.cos(y)\n    rect_y = x * cmath.sin(y)\n\n    return (rect_x, rect_y)",
        "test": "assert polar_rect(0,0) == (0, 0)",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    length = len(newList)\n\n    # if the length of the list is less than 2, there is nothing to do\n    if length < 2:\n        return newList\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # return the modified list\n    return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1] # Test case 1",
        "num_ids": 847,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # initialize variables\n    a = 1\n    b = 1\n    c = 1\n\n    # iterate over the binomial coefficients and add them to the sum\n    for i in range(1,n+1):\n        c = a*b*c\n        a = b\n        b = c\n\n    # return the sum of the binomial coefficients\n    return c",
        "test": "assert binomial_Coeff(5,2) == 200",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})')\n    match = pattern.match(ip)\n    if match:\n        return match.group(1) + '.' + match.group(2) + '.' + match.group(3) + '.' + match.group(4)\n    else:\n        return ip",
        "test": "assert removezero_ip(\"192.168.1.1\") == \"192.168.1.1\"",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        even_sum = sum(filter(lambda x: x % 2 == 0, list1))\n        odd_sum = sum(filter(lambda x: x % 2!= 0, list1))\n        return even_sum - odd_sum\n    else:\n        even_sum = sum(filter(lambda x: x % 2 == 0, list1))\n        odd_sum = sum(filter(lambda x: x % 2!= 0, list1))\n        return odd_sum - even_sum",
        "test": "assert diff_even_odd([]) == 0",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def min_Swaps(str1, str2):\n    n1, n2 = len(str1), len(str2)\n\n    # Initialize arrays to store the number of swaps required\n    swaps = [[0] * n2 for _ in range(n1)]\n    # Initialize the maximum number of swaps\n    max_swaps = 0\n\n    # Traverse through each character of the strings\n    for i in range(n1):\n        # Traverse through each character of the first string\n        for j in range(n2):\n            # If the characters match, increment the count of swaps and\n            # update the maximum number of swaps if necessary\n            if str1[i] == str2[j]:\n                swaps[i][j] += 1\n                if swaps[i][j] > max_swaps:\n                    max_swaps = swaps[i][j]\n\n    # Return the maximum number of swaps required\n    return max_swaps",
        "test": "assert min_Swaps(\"1010\", \"1011\") == 1, \"Test 1: Should return 1 for strings of equal length\"",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n1, n2 = len(arr1), len(arr2)\n    if k > n1 or k > n2:\n        return \"Invalid input\"\n    elif k == n1:\n        return arr1[-1]\n    elif k == n2:\n        return arr2[-1]\n    else:\n        i1, i2 = 0, 0\n        while i1 < n1 and i2 < n2:\n            if arr1[i1] < arr2[i2]:\n                i1 += 1\n            elif arr1[i1] > arr2[i2]:\n                i2 += 1\n            else:\n                i1 += 1\n                i2 += 1\n        return arr1[i1-1] if i1 == n1 else arr2[i2-1]",
        "test": "assert find_kth([4, 2, 5, 1, 3], [1, 3, 5, 5, 4, 2], 2) == 3",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    '''\n    This function checks whether the given number is armstrong or not.\n    '''\n    sum_of_cubes = 0\n    num = number\n    while num > 0:\n        remainder = num % 10\n        sum_of_cubes += pow(remainder,3)\n        num //= 10\n\n    if number == sum_of_cubes:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(9876543210) == False, \"9876543210 is an armstrong number.\"",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_average(number):\n    sum = 0\n    n = number\n\n    for i in range(1, n+1):\n        sum += i\n\n    average = sum / n\n\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the frequency of each character\n    freq = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # if the character is not already in the dictionary, add it with frequency 1\n        else:\n            freq[char] = 1\n    # loop through each character in the string again and compare its frequency with the frequency in the dictionary\n    for char in str1:\n        if char in freq and freq[char] > 1:\n            return char\n    # if no repeated character is found, return None\n    return None",
        "test": "assert first_repeated_char(\"hello world\") == \"l\"",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n\n    :param n: the given integer.\n    :return: all lucid numbers smaller than or equal to the given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers",
        "test": "assert get_ludic(10) == [2, 4, 6, 8, 10]",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)",
        "test": "assert reverse_words(\"hello world\") == \"dlrow olleh\"",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Create a boolean array \"prime[0..num]\" and initialize all entries it as true.\n    is_prime = [True] * (num+1)\n\n    # Function to mark multiples of each prime number\n    def sieve(limit):\n        for i in range(2, limit):\n            if is_prime[i]:\n                for j in range(i*i, num+1, i):\n                    is_prime[j] = False\n\n    # Call the sieve function\n    sieve(num)\n\n    # Return True if num is a prime number, else False\n    return is_prime[num]",
        "test": "assert prime_num(20) == False",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"hello world\", r\"hello\") == (\"hello\", 0, 5)",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)",
        "test": "assert bell_Number(5) == 5, \"The nth bell number is not 5.\"",
        "num_ids": 1503,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    result = []\n    for i in range(len(list1)):\n        if i!= k:\n            result.append(list1[i])\n    return result",
        "test": "assert remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4,5]",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_of_nth(test_list, N):\n    # Create a new list to store the values of then'th column\n    nth_column = []\n\n    # Iterate over each element of the matrix and append the max value to the nth_column list\n    for row in test_list:\n        max_val = max(row)\n        nth_column.append(max_val)\n\n    # Sort the nth_column in descending order and return the first element as the max of then'th column\n    nth_column.sort(reverse=True)\n    return nth_column[0]",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            merged_list.append([sublist[0], sublist[1]])\n        elif len(sublist) == 1:\n            merged_list.append([sublist[0]])\n        else:\n            raise ValueError(\"Invalid sublist length\")\n    return merged_list",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = [0] * len(test_list)\n    for i in range(len(test_list)):\n        cum_sum[i] = cum_sum[i-1] + test_list[i]\n    return cum_sum",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        if len(tup)!= 2:\n            raise ValueError('Invalid input')\n        num1, num2 = tup\n        if num1 == num2:\n            result.append(num1)\n        else:\n            result.append(num1 + num2)\n    return result",
        "test": "assert average_tuple((1,2),(3,4),(5,6),(7,8)) == [3.0, 4.0, 5.0, 4.0]",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples of different length.\")\n        return\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] % test_tup2[i]!= 0:\n                print(test_tup1[i], \"is not a modulo of\", test_tup2[i])\n                return",
        "test": "assert tuple_modulo((1, 2, 3, 4, 5), (5, 4, 3, 2, 1, 6)) == (6, 5, 4, 3, 2)",
        "num_ids": 1086,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Calculate the number of jumps needed\n    jumps = steps // d\n    \n    # Return the number of jumps\n    return jumps\n",
        "test": "assert min_Jumps(steps = 5, d = 2) == 2",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def div_list(nums1, nums2):\n    # Initialize result list\n    result = []\n    # Loop through each element of nums1 and divide it by each element of nums2\n    for num in nums1:\n        for div in nums2:\n            if num % div == 0:\n                # If element is not divisible by the divisor, append it to the result list\n                result.append(num)\n                break\n    return result",
        "test": "assert div_list([],[]) == []",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def move_num(test_str):\n    '''\n    Function to move all the numbers to the end of a given string.\n\n    Args:\n        test_str: The string to be modified.\n\n    Returns:\n        A new string with all the numbers at the end of it.\n    '''\n    new_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            new_str += char\n        else:\n            if new_str!= \"\":\n                new_str += \" \"\n            new_str += char\n    return new_str\n",
        "test": "assert move_num(\"hello\") == \"olleh\"",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def largest_subset(a):\n    '''\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a set of all numbers in the list\n    numbers = set(a)\n\n    # Initialize a dictionary to keep track of the indices of the numbers in the subset\n    subset_size = {}\n\n    # Initialize a variable to keep track of the maximum number of elements in the subset\n    max_subset = 1\n\n    # Iterate over the numbers and add them to the subset if they are divisible by the number of elements in the subset\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] % numbers[j] == 0:\n                if len(subset_size) <= numbers[j]:\n                    subset_size[numbers[j]] = 1\n                else:\n                    subset_size[numbers[j]] += 1\n                if subset_size[numbers[j]] > max_subset:\n                    max_subset = subset_size[numbers[j]]\n\n    return max_subset",
        "test": "assert largest_subset([1]) == 1",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort both lists\n    arr1.sort()\n    arr2.sort()\n\n    # calculate the median\n    mid_arr = len(arr1) // 2\n    if len(arr1) % 2 == 0:\n        median = (arr1[mid_arr-1] + arr1[mid_arr]) / 2\n    else:\n        median = arr1[mid_arr]\n\n    return median",
        "test": "assert get_median([1, 3, 5, 7], [2, 4, 6, 8], 4) == 4.0",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1, 4, 9, 16, 25]",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"Hello\") == \"HELLO\"",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: # if the list has less than two elements, it cannot be swapped\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0] # swap first and last elements\n    \n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Set the semi-circle radius and semi-circle angle\n    semi_circle_radius = r/2\n    semi_circle_angle = math.pi/6\n    \n    # Calculate the semi-circle area\n    area = math.pi * (semi_circle_radius ** 2)\n    \n    # Find the largest semi-circle area that can be inscribed\n    largest_area = 0\n    for i in range(1, 101):\n        circle_radius = semi_circle_radius + (i * math.cos(math.pi/6))\n        circle_angle = math.pi/6 + (i * math.sin(math.pi/6))\n        circle_area = math.pi * (circle_radius ** 2)\n        if circle_area > largest_area:\n            largest_area = circle_area\n    \n    # Return the largest semi-circle area\n    return largest_area",
        "test": "assert triangle_area(5) == 78.53981633974483 ",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        return None\n\n    total = sum(array)\n    diff = end + 1 - start\n    index = diff // 2\n\n    while index >= 0 and array[index]!= index + 1:\n        index -= 1\n\n    return index + 1 if index >= 0 else None",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 3 # Expected output: 3",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The%20quick%20brown%20fox%20jumps%20over%20the%20lazy%20dog\"",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([2, 4, 6, 8]) == [2, 4, 6, 8]",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub:\n        sub.append(ele)\n    else:\n        sub[-1] = ele\n    return sub",
        "test": "assert adjac(tuple(1, 2, 3, 4), [1, 2]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Initialize an empty string to store the modified text\n    modified_text = \"\"\n\n    # Iterate through each character in the text\n    for char in text:\n        # If the character is a whitespace, replace it with an underscore\n        if char.isspace():\n            modified_text += \"_\"\n        # If the character is not a whitespace, add it to the modified text as is\n        else:\n            modified_text += char\n\n    return modified_text",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n    if zero_count > 0:\n        num_list.insert(0, 0)\n    return num_list",
        "test": "assert move_zero([]) == []",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5],4) == 10",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heapq module.\n    '''\n    # Convert the iterable to a list\n    if not isinstance(iterable, list):\n        iterable = list(iterable)\n\n    # Build a max heap from the iterable\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n\n    # Rebuild the sorted list from the max heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list",
        "test": "assert heap_sort([]) == []",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Calculate the difference between the actual cost and the sale amount\n    difference = actual_cost - sale_amount\n    \n    # If the difference is greater than 0, the amount has no profit\n    if difference > 0: \n        return True\n    # If the difference is less than 0, the amount has no loss\n    else: \n        return False",
        "test": "assert noprofit_noloss(100, 50) == True, \"Expected result: True\"",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = round(t) # round the temperature to the nearest integer\n    \n    # calculate the wind chill index using the given formula\n    wind_chill_index = round(13.76 + 0.6215 * t + 20.63 * math.log10(v))\n    \n    return wind_chill_index",
        "test": "assert wind_chill(10,20) == 24",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # create a new list to store the filtered names\n    filtered_names = []\n\n    # loop through the given list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # add the name to the filtered list\n            filtered_names.append(name)\n\n    # return the sum of the lengths of the filtered names\n    return sum(len(name) for name in filtered_names)",
        "test": "assert sample_nam(['Alice', 'Bob', 'Charlie', 'David', 'Eve']) == [8, 6, 4, 2, 0]",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define regular expression pattern for parenthesis removal\n    pattern = re.compile('\\([^)]+\\)')\n    \n    # Return the modified string with parenthesis removed\n    return pattern.sub('', items)",
        "test": "assert remove_parenthesis('') == ''",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def is_nonagonal(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        a = 1\n        b = 0\n        for i in range(n):\n            c = a + b\n            a = b\n            b = c\n        return b",
        "test": "assert is_nonagonal(2) == 12",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Removing all punctuation marks and converting all the text to lowercase\n    text = text.lower()\n    # Finding all the word matches in the text\n    matches = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    # Checking if any word matches except at the start and end of the word\n    if len(matches) > 0 and matches[0]!= matches[-1]:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"the quick brown fox jumps over the lazy dog\") == True",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # initialize the result list\n    result = []\n    \n    # iterate through the input array from the end\n    for i in range(len(input) - 1, -1, -1):\n        # add the current element to the result list\n        result.append(input[i])\n        \n        # check if we have reached the position k\n        if len(result) == k:\n            break\n    \n    # return the reversed list\n    return result",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1] # Test 2: Reverse the array upto the last element of the given input",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((1, 2, 3), {\"a\": 1, \"b\": 2, \"c\": 3}) == (1, 2, 3, {\"a\": 1, \"b\": 2, \"c\": 3})",
        "num_ids": 922,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def findMaxPath(i, j, path):\n        if i == len(cost[0]) - 1 and j == 0:\n            return path, cost[i][j]\n        else:\n            if i == len(cost[0]) - 1:\n                return findMaxPath(i+1, 0, path)\n            elif j == len(cost) - 1:\n                return findMaxPath(0, j+1, path)\n            else:\n                if cost[i][j] > path[0]:\n                    return findMaxPath(i+1, j, (cost[i][j], path[0]))\n                else:\n                    return findMaxPath(i, j+1, (cost[i][j], path[0]))\n\n    # Compute the maximum average over all paths\n    max_path, max_avg = findMaxPath(0, 0, (0, 0))\n    return max_avg",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 13",
        "num_ids": 2269,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students.append(name)\n    return filtered_students",
        "test": "assert filter_data({\"John\":(170, 80), \"Sarah\":(165, 85), \"Alice\":(180, 90), \"Tom\":(175, 85)}, 160, 150) == [(\"John\", (170, 80)), (\"Tom\", (175, 85))]",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == {0, 1, 2, 3, 4, 5}",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the result variable to zero\n    result = 0\n    \n    # loop through all digits of the base\n    for digit in str(base):\n        # loop through all digits of the power\n        for _ in range(power):\n            # add the current digit to the result variable\n            result += int(digit)\n    \n    return result",
        "test": "assert power_base_sum(2, 0) == 0",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b')\n    matches = pattern.findall(text1)\n    return matches",
        "test": "assert extract_quotation(\"world hello\") == \"world\"",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup",
        "test": "assert multiply_elements((1, 2, 3, 4, 5, 6)) == (1, 2, 6, 24, 120, 432)",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list of integers.\n\n    :param nums: a list of integers\n    :return: a new list with consecutive duplicates removed\n    '''\n\n    # Create a set to store the unique integers\n    unique_nums = set(nums)\n\n    # Create a list to store the unique integers in consecutive order\n    consecutive_nums = []\n\n    for num in unique_nums:\n        # Check if the next number is the same as the current number\n        if consecutive_nums and consecutive_nums[-1] == num:\n            continue\n\n        # Add the current number to the consecutive_nums list\n        consecutive_nums.append(num)\n\n    return consecutive_nums",
        "test": "assert consecutive_duplicates([1,2,3,4,4,5,5,6,6]) == [1,2,3,4,5,6]",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone given its radius and height.\n    '''\n    return 2 * math.pi * r * h",
        "test": "assert lateralsurface_cone(3,10) == 200, \"Incorrect value for lateralsurface_cone(3,10)\"",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all spaces, commas, or dots with a colon\n    text = re.sub(r'\\s+|,\\s+|\\.', ':', text)\n    return text",
        "test": "assert replace_specialchar(\"hello,.world\") == \"hello:.world\"",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Returns the index of the first occurrence of x in A, or -1 if x is not in A.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2  # 2nd occurrence of 3 in [1, 2, 3, 4, 5]",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    sublist_sum = 0\n    for i in range(len(arr)):\n        sublist_sum += arr[i]\n        for j in range(i + 1, len(arr)):\n            sublist_sum -= arr[j]\n    return sublist_sum",
        "test": "assert sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def set_middle_bits(n):\n    # set the first and last bits as 1\n    n = n | (1 << 31)\n    # set the middle bits as 0\n    n = n & ~(1 << 31)\n    return n",
        "test": "assert set_middle_bits(15) == 15",
        "num_ids": 2088,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lows = [float('-inf')] # initialize the list with low values\n    highs = [float('inf')] # initialize the list with high values\n    # find the boundaries of the array\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n        elif a[i] > x:\n            lows.append(a[i])\n        else:\n            highs.append(a[i])\n    # check if the last element is equal to x or greater than x\n    if a[-1] == x or a[-1] > x:\n        return len(a)\n    # sort the list and find the left insertion point using binary search\n    lows.append(x)\n    bisect.insort(lows, x)\n    return bisect.bisect_left(lows, x)",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('hello') == False",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        count = 2\n        digit = 1\n        while count <= n:\n            digit += 1\n            count += 1\n            for i in range(2, int(math.sqrt(count)) + 1):\n                if count % i == 0:\n                    break\n            else:\n                return digit - 1\n        return None",
        "test": "assert find_Index(4) == 1, \"The index of smallest triangular number with 4 digits should be 1.\"",
        "num_ids": 1086,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))",
        "test": "assert tuple_to_dict(('apple', 'banana', 'cherry')) == {'apple': 'banana', 'banana': 'cherry'}",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a Python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # initialize a set to store all characters\n    char_set = set()\n\n    # loop through each character in the string\n    for char in s:\n\n        # add the character to the set\n        char_set.add(char)\n\n    # check if all the characters are same\n    if len(char_set) == len(set(s)):\n        return True\n    else:\n        return False",
        "test": "assert all_Characters_Same(\"abc\") == True",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/2)*side*side*side",
        "test": "assert area_tetrahedron(1) == 0.5",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # create a new list with m elements to the right of the original list\n    new_list = list[m:] + list[:m]\n    return new_list",
        "test": "assert rotate_right([], 0) == []",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Check if the given tuple has any none value or not.\n\n    Parameters:\n        test_tup (tuple): The tuple to be checked\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none(()) == False",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(map(lambda x: int(''.join(str(x))), range(startnum, endnum+1)))",
        "test": "assert divisible_by_digits(2, 12) == [2, 4, 6, 8, 10, 12]",
        "num_ids": 2808,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360",
        "test": "assert sector_area(10, 360) is None",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Step 1: Find lengths of all strings and create a 2D array to store lengths\n    n1, m1 = len(X), len(Y)\n    n2, m2 = len(Z), len(Z)\n    lengths = [[0]*(m2+1) for _ in range(n1+1)]\n\n    # Step 2: Fill the 2D array with lengths of LCS between each pair of strings\n    for i in range(n1+1):\n        for j in range(m2+1):\n            if i == 0 or j == 0:\n                lengths[i][j] = 0\n            else:\n                if X[i-1] == Y[j-1]:\n                    lengths[i][j] = lengths[i-1][j-1] + 1\n                else:\n                    lengths[i][j] = max(lengths[i-1][j], lengths[i][j-1])\n\n    # Step 3: Find the length of the longest common subsequence\n    lcs_length = lengths[n1][m2]\n\n    # Step 4: Print the longest common subsequence\n    i, j = n1, m2\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif lengths[i-1][j] > lengths[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return \"\".join(lcs[::-1])\n",
        "test": "assert lcs_of_three(\"ABCDGH\", \"EFGHIJ\", \"KLMNOP\") == \"GH\"",
        "num_ids": 1533,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Regular expression to match capital letters and spaces\n    pattern = re.compile(r'(?<![A-Z])([A-Z][a-z]+|[A-Z]+)')\n    # Split the string into words using the pattern\n    words = pattern.split(str1)\n    # Capitalize the first letter of each word and join them with spaces\n    return''.join(word.capitalize() for word in words)",
        "test": "assert capital_words_spaces(\"hello\") == \"Hello\"",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n    Parameters:\n    nums_str (list): list of strings of numbers\n\n    Returns:\n    list: sorted list of strings of numbers\n\n    '''\n\n    # convert all numbers to integers and sort them\n    nums_list = [int(num) for num in nums_str]\n    nums_list.sort()\n\n    # convert the sorted list of integers back to a list of strings\n    sorted_str_list = [str(num) for num in nums_list]\n\n    return sorted_str_list",
        "test": "assert sort_numeric_strings(['10', '20', '30']) == ['10', '20', '30']",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (1, 2, 3)) == [2, 4, 6]",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or arr[i] > arr[2*i-1] and arr[i] > arr[2*i]:\n        return True\n    else:\n        return False\n\ndef check_min_heap(arr):\n    for i in range(len(arr)//2 - 1, -1, -1):\n        if check_min_heap_helper(arr, i):\n            return False\n    return True",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 0) == True",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # define a function to generate the nth jacobsthal number\n    def generate_jacosthal_num(n):\n        # base cases\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n % 2 == 0:\n            # if n is even, add the square of the previous jacobsthal number\n            return generate_jacosthal_num(n // 2) + generate_jacosthal_num(n // 2)\n        else:\n            # if n is odd, subtract the square of the previous jacobsthal number\n            return generate_jacosthal_num(3 * n - 1) - generate_jacosthal_num(3 * n - 1)\n    \n    # call the function to generate the nth jacobsthal number\n    return generate_jacosthal_num(n)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 2154,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def min_k(test_list, K):\n    if K > len(test_list):\n        K = len(test_list)\n\n    min_list = []\n\n    for i in range(K):\n        min_list.append(min(test_list))\n\n    return min_list",
        "test": "assert min_k([1, 2, 3, 4, 5], 3) == (1, 2, 3)",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Find the length of the three lists\n    n = max(len(l1), len(l2), len(l3))\n\n    # Initialize a list to store the common elements\n    common_elements = []\n\n    # Iterate over each element in the three lists\n    for i in range(n):\n        # Check if the current element appears in all three lists\n        if l1[i] in l2 and l1[i] in l3:\n            # If it does, add it to the list of common elements\n            common_elements.append(l1[i])\n\n    return common_elements",
        "test": "assert extract_index_list([1,2,3,4,5], [2,3,4,5,6], [1,2,3,4,5]) == [2, 3, 4, 5]",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def second_smallest(numbers):\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "test": "assert second_smallest([2, 3, 4, 5]) == 3",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    # Define a pattern that matches any string that starts with an 'a' followed by one or more 'b's.\n    pattern = r'^a[bB]{1,}'\n\n    # Use the re.match() function to search for the pattern in the input text.\n    result = re.match(pattern, text)\n\n    # Return the result as a boolean value.\n    return bool(result)",
        "test": "assert text_match_zero_one(\"ababb\") == True",
        "num_ids": 1732,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['a', 'b', 'c']) == 0  # there are no pairs of reverse strings in the list ['a', 'b', 'c']",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create an empty dictionary to store the count of each sublist\n    sublist_counts = {}\n\n    # Loop through each element of the list1\n    for element in list1:\n        # Check if the element is already a tuple\n        if isinstance(element, tuple):\n            # Check if the element is already in the dictionary\n            if element in sublist_counts:\n                # Add the count of the current element to the count of the tuple\n                sublist_counts[element] += 1\n            else:\n                # Otherwise, add the tuple with count 1 to the dictionary\n                sublist_counts[element] = 1\n        else:\n            # If the element is not a tuple, it means it is a sublist itself\n            sublist_counts[element] = 1\n\n    # Return the dictionary containing the count of each sublist\n    return sublist_counts",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) > 1 and num[0] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n        for i in range(1, len(num)):\n            if num[i] == '.' and num[i-1]!= '0':\n                return False\n        if len(num) - 1 == len(num) - num.count('.') - 1:\n            return True\n    return False\n",
        "test": "assert is_decimal(\"1234567890.1234567890\") == False",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Returns True if the list of numbers contains only one distinct element,\n    and False otherwise.\n    '''\n\n    # Convert the list of numbers to a set to remove duplicates\n    unique_set = set(arr)\n\n    # Check if the set has one element (the only element)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 3, 2, 1]) == False, \"The function should return True if there is only one unique element in the given list\"",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 9:\n        return False\n    else:\n        return True",
        "test": "assert check_monthnumber_number(13) == False",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 2, 3, 4, 5], 5) == 1",
        "num_ids": 957,
        "indeed": true
    },
    {
        "number": 764,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n\n    Parameters:\n    ----------\n    str: str\n        The string to be analyzed.\n\n    Returns:\n    --------\n    int\n        The count of digits in the string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"123\") == 3",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_polite(n // 2)\n    else:\n        return (is_polite(n // 2) + 1) % 1000000007",
        "test": "assert is_polite(1) == 1",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n\n    # create an empty list to store pairs of consecutive items\n    pairs = []\n\n    # iterate through the list of items\n    for i in range(1, len(l1)):\n\n        # check if the next item is the same as the current item plus one\n        if l1[i] == l1[i-1] + 1:\n\n            # add the pair to the list of pairs\n            pairs.append((l1[i-1], l1[i]))\n\n    # return the list of pairs\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Counts the number of pairs whose sum is equal to'sum' in a list of numbers 'arr'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 8) == 0 # test case 2",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([], []) == []",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_power = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_power += i**4\n    return sum_of_fourth_power\n",
        "test": "assert odd_num_sum(20) == 800",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return True",
        "test": "assert check_expression(\"()\") == True",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert string to list of words\n    words = test_str.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the word has k length, remove it\n        if len(words[i]) == K:\n            words.pop(i)\n    # Convert the list of words back to a string\n    result = \" \".join(words)\n    return result",
        "test": "assert remove_length(\"hello world\", 3) == \"hello world\"",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    # find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    # sort the matches by position and length in ascending order\n    matches.sort(key=lambda x: (len(x), -x[0]))\n    # find the first match with a position at or after the start of the string\n    position = re.search(r'\\b' + pattern[0], text).start()\n    # find the last match with a position before the end of the string\n    last_position = re.search(r'\\b' + pattern[-1], text, re.END).end() - 1\n    # return a tuple of (match, position, last_position)\n    return (matches[0], position, last_position)",
        "test": "assert occurance_substring(\"Hello world, this is a test!\", \"test\") == (\"test\", 10)",
        "num_ids": 864,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1: # checking if the index is odd\n            count = 0\n            for j in range(len(nums)): # checking if the number of elements is odd in the index\n                if nums[j] % 2 == 1:\n                    count += 1\n            if count % 2 == 1: # checking if the count is odd\n                return True\n    return False",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] == test_str[i + 1] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"\") == 0 # empty string has no vowels",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # create a list of non-repeated elements\n    non_repeated = []\n    for key, value in freq.items():\n        if value == 1:\n            non_repeated.append(key)\n    \n    # return the sum of the non-repeated elements\n    return sum(non_repeated)",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15 # should return 15",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i]!= list1[i-1]:\n            sublist.append(list1[i])\n    return sublist\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1631,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublists_count = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is not in the dictionary, add it with a value of 1\n        if element not in sublists_count:\n            sublists_count[element] = 1\n        # If the element is already in the dictionary, increment its value by 1\n        else:\n            sublists_count[element] += 1\n\n    # Return the dictionary\n    return sublists_count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Convert the test_list into a set to remove duplicates\n    test_set = set(test_list)\n    \n    # Create a list of tuples (sum, item)\n    tuples_list = list(combinations(test_set, 2))\n    \n    # Sort the list by the sum of the tuples\n    tuples_list.sort(key=lambda x: x[0])\n    \n    return tuples_list",
        "test": "assert find_combinations([1, 2, 3, 4, 5]) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]",
        "num_ids": 1846,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(12) == 6, \"The count of divisors of 12 should be 6.\"",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] % 2!= 0:  # check if current element is odd\n            subarray = arr[i:i+2]  # create subarray\n            subarray_sum = sum(subarray)  # calculate sum of subarray\n            odd_length_sum += subarray_sum  # add subarray sum to overall sum\n    return odd_length_sum",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert an RGB color to HSV (hue, saturation, value) color model.\n    '''\n\n    # Calculate the RGB values\n    r, g, b = map(lambda x: int(x * 255), [r, g, b])\n\n    # Calculate the minimum and maximum values in the color space\n    min_r, min_g, min_b = min(r, g, b), min(r, g, b), min(r, g, b)\n    max_r, max_g, max_b = max(r, g, b), max(r, g, b), max(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta_r, delta_g, delta_b = max_r - min_r, max_g - min_g, max_b - min_b\n\n    # Calculate the hue, saturation, and value of the color\n    if delta_r == 0 and delta_g == 0 and delta_b == 0:\n        h, s, v = 0, 0, min_r\n    elif delta_r == max_r and delta_g == max_g and delta_b == max_b:\n        h, s, v = 0, delta_r / max_r, max_r\n    elif delta_r == max_r and delta_g < max_g and delta_b == max_b:\n        h, s, v = 2 * (delta_g - delta_b) / max_g, delta_r / max_r, max_r\n    elif delta_r == max_r and delta_g > max_g and delta_b == min_b:\n        h, s, v = 4 * (max_g - delta_b) / max_g, delta_r / max_r, min_r\n    elif delta_r == max_r and delta_g == max_g and delta_b == min_b:\n        h, s, v = 6 * (max_b - delta_r) / max_b, 0, min_r\n    elif delta_g == max_g and delta_b == max_b:\n        h, s, v = 0, delta_g / max_g, max_g\n    elif delta_g == max_g and delta_b < max_b:\n        h, s, v = 2 * (delta_b - delta_r) / max_b, delta_g / max_g, max_g\n    elif delta_g == max_g and delta_b > max_b:\n        h, s, v = 4 * (max_r - delta_b) / max_b, delta_g / max_g, min_g\n    elif delta_b == max_b:\n        h, s, v = 0, delta_b / max_b, max_b\n\n    # Calculate the hue in degrees\n    h *= 60\n\n    # Calculate the saturation\n    if delta_r + delta_g + delta_b == 0:\n        s = 0\n    else:\n        s = delta_r + delta_g + delta_b / 3\n    s /= 3\n\n    # Calculate the value\n    v /= 255\n\n    # Return the HSV color model as a tuple\n    return (h, s, v)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 2116,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def mul_even_odd(list1):\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n    return product",
        "test": "assert mul_even_odd([1, 2, 3, 4, 5]) == 120 ",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(map(int, test_str.split(',')))\n    except ValueError:\n        return None",
        "test": "assert tuple_str_int(\"123,456\") == (123, 456)",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def right_insertion(a, x):\n    '''\n    Locate the right insertion point for a specified value in a sorted list.\n\n    Args:\n    a (list): A sorted list of values.\n    x (int): A value to locate the right insertion point for.\n\n    Returns:\n    int: The index of the right insertion point, or -1 if x is not present in the list.\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[ab]{3}'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"abbb\") == True",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = (test_list, test_str)\n    return test_tuple",
        "test": "assert new_tuple(\"hello\", \"world\") == (\"hello\", \"world\")",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if sum(nums[i::2]) % 2 == 0:\n                return True\n    return False",
        "test": "assert even_position([1, 2, 3, 4, 5]) == True",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and returns a new tuple that \n    includes only the elements that are not tuples.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.append(item)\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for list in input_list:\n        count += 1\n    return count",
        "test": "assert count_list([1, 2, 3, 4, 5]) == 5",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # Element not found",
        "test": "assert last([1,2,3,4,5], 6) == -1",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'\\ba.*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb(\"abc\") == \"abc\"",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum",
        "test": "assert return_sum({}) == 0",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum\n\nprint(sum_odd(10))  # Output: 30 (1+3+5+7+9=30)",
        "test": "assert sum_odd(1) == 1, \"The sum of all odd natural numbers within the range 1 and 1 should be 1\"",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "test": "assert _sum([]) == 0",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def left_rotate(n, d):\n    # first, we need to check if d is negative or greater than the number of bits in n\n    if d >= 32 or d >= len(bin(n)[2:]):\n        return n\n    # then, we need to find the carry bit that needs to be added to the next bit\n    if d > 0:\n        carry = 1\n    else:\n        carry = 0\n    # then, we can calculate the rotated number\n    shifted = n << d\n    # finally, we can add the carry bit to the shifted number\n    rotated = shifted + carry\n    # and we can return the rotated number\n    return rotated",
        "test": "assert left_rotate(1,1) == 1",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(3):\n        if x == y == z == i:\n            count += 1\n    return count",
        "test": "assert test_three_equal(1, 1, 2) == 0 # Test 2: Test 2",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_rotation(arr):\n    # initialize count to 0\n    count = 0\n\n    # iterate through the array and count rotations\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                count += 1\n\n    return count",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n == 0 or n == 1:  # base cases\n        return True\n    elif n % 2 == 0:  # check if n is even\n        return is_perfect_square(n//2)  # recursively call function for odd numbers\n    else:  # check if n is odd\n        return not is_perfect_square(n-1)  # recursively call function for even numbers",
        "test": "assert is_perfect_square(10) == False, \"The number 10 is a perfect square.\"",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0",
        "test": "assert is_product_even([2, 3, 4, 5]) == True",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    \n    highest_sum = float('-inf')\n    highest_list = []\n    \n    for list in lists:\n        sum_of_list = sum(list)\n        if sum_of_list > highest_sum:\n            highest_sum = sum_of_list\n            highest_list = list\n    \n    return highest_list",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [9, 7, 5]",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    current_upper = \"\"\n\n    # Iterate through each character in the string\n    for char in test_str:\n        if char.isupper():\n            if char == current_upper:\n                current_run += 1\n            else:\n                current_run = 1\n            max_run = max(max_run, current_run)\n            current_upper = char\n        else:\n            current_run = 1\n\n    # Return the maximum run of uppercase characters\n    return max_run",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1 # True",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for tup in test_tup:\n        if tup not in test_tup:\n            return False\n    return True",
        "test": "assert check_K((1, 2, 3), 4) == False",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem2 < elem1:\n            return False\n    return True",
        "test": "assert check_smaller(('a', 5), ('b', 1)) == False",
        "num_ids": 558,
        "indeed": false
    }
]