[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements",
        "test": "assert similar_elements([1, 2, 3], [2, 3, 4]) == [2]",
        "num_ids": 1368,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(2) == False # correct",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for i in range(n)]",
        "test": "assert heap_queue_largest([4,3,2,1,5,6,7], 3) == [7,6,5,4,3,2,1] # Test case 2",
        "num_ids": 1956,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Check whether two numbers differ at one bit position only or not.\n\n    :param x: The first number to compare.\n    :return: A boolean indicating whether the numbers differ at one bit position only or not.\n    '''\n    return x & (x - 1) == 0",
        "test": "assert is_Power_Of_Two(10) == False # Testing with 10 as the input",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # use regular expression to find all words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Initialize the minimum number of rotations as 1\n    min_rotations = 1\n    \n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Loop through each character in the string, starting from the next character\n        for j in range(i+1, len(str)+1): \n            # If the substring from i to j is a substring of the original string, increment the minimum number of rotations\n            if str[i:j] == str: \n                min_rotations += 1\n                \n    # Return the minimum number of rotations\n    return min_rotations",
        "test": "assert find_Rotations(\"abc\") == 2",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def remove_Occ(s, ch):\n    i = 0\n    while i < len(s) - 1:\n        if s[i] == ch and s[i+1] == ch:\n            s = s[:i] + s[i+2:]\n        i += 1\n    return s",
        "test": "assert remove_Occ('hello world', 'o') == 'hello world'",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols-1):\n            if M[i][j] + M[i][j+1] > M[i][j+1] + M[i][j]:\n                M[i], M[i+1] = M[i+1], M[i]\n    return M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2336,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a Python function to find the volume of a triangular prism.\n\n    Parameters:\n    l: float, length of the base of the prism\n    b: float, length of the top of the prism\n    h: float, height of the prism\n\n    Returns:\n    float, the volume of the prism\n    \"\"\"\n    volume = l * b * h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Split the text into words using whitespace as the delimiter\n    words = re.findall(r'\\w+', text)\n\n    # Check if any of the words contain an underscore\n    contains_underscore = any(word.count('_') > 0 for word in words)\n\n    return contains_underscore",
        "test": "assert text_lowercase_underscore(\"Hello World\") is False",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length.\n    '''\n    return a*4",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list\n    result = []\n    # Loop through the string\n    for char in string:\n        # Check if the character is present in the second string\n        if char not in string:\n            # Add the character to the result list\n            result.append(char)\n    # Return the result list\n    return result",
        "test": "assert str_to_list(\"12345\") == []",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Check if any element has a count of 2\n    for num in count_dict:\n        if count_dict[num] > 1:\n            return True\n    \n    return False",
        "test": "assert test_duplicate([1, 2, 3, 2, 4]) == True  # array does not contain duplicate element",
        "num_ids": 1586,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0:\n        return False\n    elif x % 2 == 1:\n        return True\n    else:\n        return None",
        "test": "assert is_woodall(15) == True",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def rev(num):\n    if num < 2:\n        return False\n    else:\n        return num == int(str(num)[::-1])\n",
        "test": "assert rev(123456789) is False, \"123456789 is not one less than twice its reverse.\"",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_Max_Num(arr):\n    # Define a function to find the maximum number\n    def max_number(lst):\n        max_num = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] > max_num:\n                max_num = lst[i]\n        return max_num\n\n    # Call the max_number function to find the maximum number\n    max_num = max_number(arr)\n    return max_num",
        "test": "assert find_Max_Num([1,2,3,4,5]) == 5",
        "num_ids": 1398,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x == 0:\n        return y == 0\n    else:\n        return False",
        "test": "assert opposite_Signs(10, 5) == False",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n\n    # Variables to store the octagonal numbers\n    a = 1\n    b = 1\n    c = 1\n\n    # Find the nth octagonal number\n    for i in range(n): \n        a = b\n        b = c\n        c = a + b - c\n\n    # Return the nth octagonal number\n    return c",
        "test": "assert is_octagonal(1) == True",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digits_dict = defaultdict(int)\n    for char in s:\n        digits_dict[char] += 1\n\n    count = 0\n    for key, value in digits_dict.items():\n        if value == len(key):\n            count += 1\n\n    return count",
        "test": "assert count_Substrings('') == 0",
        "num_ids": 1691,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)",
        "test": "assert smallest_num([2, 2, 2, 2]) == 2",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_difference(test_list):\n    max_diff = float('-inf')  # initialize max_diff with negative infinity\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 2522,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([(90, \"Math\"), (85, \"English\"), (92, \"Science\")]) == [(85, \"English\"), (90, \"Math\"), (92, \"Science\")]",
        "num_ids": 1612,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Flatten a list of any depth and return a list of its elements.\n        '''\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    def sum_list(flat_list):\n        '''\n        Sum all the elements in a flattened list.\n        '''\n        return sum(flat_list)\n    \n    flat_list = flatten_list(data_list)\n    return sum_list(flat_list)\n",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1467,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 840,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        ways = 0\n        for i in range(2, n+1):\n            for j in range(n-i+1):\n                ways += (n-i)*((2*j)/(j+2))\n        return ways",
        "test": "assert bell_number(1) == 1, \"The function is returning an incorrect result for 1.\"",
        "num_ids": 1658,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] >= A[1]\n    else:\n        for i in range(1, n-1):\n            if A[i] >= A[i-1] and A[i] >= A[i+1]:\n                return False\n        return True",
        "test": "assert is_Monotonic([3, 1, 4, 2, 5]) == False",
        "num_ids": 1456,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1,2,3,4,5], [2,4,6]) == False  # Test case for not containing the sublist",
        "num_ids": 1251,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # create an empty set\n    set_of_tuples = set()\n\n    # iterate through each tuple in the input\n    for tuple_ in Input:\n        # add the tuple to the set of tuples\n        set_of_tuples.add(tuple_)\n\n    # check if all the tuples in the set of tuples have equal length or not\n    if len(set_of_tuples) == len(set(set_of_tuples)):\n        # if all the tuples have equal length, return True\n        return True\n    else:\n        # if not all the tuples have equal length, return False\n        return False\n",
        "test": "assert find_equal_tuple([('apple', 'banana'), ('apple', 'orange'), ('banana', 'orange'), ('orange', 'banana')]) == True",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Last i elements are already sorted\n        for j in range(0, n-i-1):\n            # Traverse the list from the ith element to the jth element\n            # and swap if the element found is greater than the next element\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums",
        "test": "assert comb_sort([10, 3, 5, 7, 9]) == [3, 5, 7, 9, 10]",
        "num_ids": 1838,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0: \n        return False\n    \n    if n == 1 or n == 2: \n        return True\n    \n    if n % 2 == 0: \n        square = n // 2\n        diff = n - square\n        \n        if square == diff: \n            return True\n        else: \n            return False\n    \n    else: \n        square = n * 2\n        diff = square - n\n        \n        if square == diff: \n            return True\n        else: \n            return False",
        "test": "assert dif_Square(1) is True",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def is_samepatterns(colors, patterns):\n    for pattern in patterns:\n        if not colors.count(pattern):\n            return False\n    return True",
        "test": "assert is_samepatterns([0,0,0], [[0,1], [0,1]]) == False",
        "num_ids": 1745,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    tuples_set = set(test_list)\n\n    result = []\n\n    for tuple in test_list:\n        if all(i % tuple[i] == 0 for i in range(len(tuple))):\n            result.append(tuple)\n\n    return result",
        "test": "assert find_tuples([], 3) == []",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(11) == True, \"The number 11 is not divisible by 11.\"",
        "num_ids": 969,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    if len(words) == 1:\n        return len(s)\n    else:\n        return (len(words)-1) * 2",
        "test": "assert word_len(\"Apple\") == 5",
        "num_ids": 1974,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        a = n - 1\n        b = n - 2\n        c = n - 3\n        d = n - 4\n        return (tetrahedral_number(a) + tetrahedral_number(b) + tetrahedral_number(c) + tetrahedral_number(d)) % 1000000007",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 1812,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = math.pi * r**3\n    return volume",
        "test": "assert volume_sphere(1) == 3.141592653589793, \"The volume of a sphere with radius 1 should be approximately 3.141592653589793.\"",
        "num_ids": 2134,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    str_mod_26 = strr.upper()\n    ascii_sum = 0\n    for char in str_mod_26:\n        ascii_sum += ord(char)\n    mod_26_char = chr(ascii_sum % 26)\n    return mod_26_char",
        "test": "assert get_Char(\"abce\") == 'c'",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]",
        "test": "assert sequence(2) == 1",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * r ** 2\n",
        "test": "assert surfacearea_sphere(5) == 78.53981633974483",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def centered_hexagonal_number(n):\n    # Calculate the length of the hexagonal triangular number\n    hexagonal_length = (n + 1) // 2\n\n    # Initialize the hexagonal_number variable to the first half of the hexagonal triangular number\n    hexagonal_number = hexagonal_length * (hexagonal_length + 1) // 2\n\n    # Return the hexagonal_number variable\n    return hexagonal_number",
        "test": "assert centered_hexagonal_number(2) == 1",
        "num_ids": 1925,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy() # create a copy of the first dictionary\n    merged_dict.update(dict2) # update the merged_dict with the second dictionary\n    merged_dict.update(dict3) # update the merged_dict with the third dictionary\n    return merged_dict",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 1914,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.Counter(lst)\n    return freq_dict",
        "test": "assert freq_count([\"apple\", \"banana\", \"cherry\"]) == {\"apple\": 1, \"banana\": 1, \"cherry\": 1}",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(2, int(N**0.5)+1):\n        if abs(N-i) < abs(closest-i):\n            closest = i\n    return closest",
        "test": "assert closest_num(10) == 10",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)",
        "test": "assert len_log([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"]) == 6",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two string values as inputs and returns True if the input string is a substring of the input list of string values.\n    '''\n    return any(sub_str in s for s in str1.split())",
        "test": "assert find_substring(\"Hello, world!\", \"world2\") == False",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # check if the number is an integer\n    if not isinstance(n, int):\n        return False\n\n    # check if the number is odd\n    if n % 2 == 1:\n        return False\n\n    # check if the number is greater than 1\n    if n > 1:\n        return False\n\n    return True",
        "test": "assert is_undulating(20) == False # 20 is not undulating",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def power(a, b):\n    return a ** b\n",
        "test": "assert power(2, 2) == 4",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))",
        "test": "assert index_minimum([(10, 5), (20, 15), (30, 25)]) == (10, 5)",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = len(lst[0]) # Initialize the minimum length as the first list's length\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i) # Update the minimum length if the current list is shorter than the previous one\n\n    return min_length",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    # Check if n is a positive integer\n    if n > 0:\n        # Initialize a variable to store the largest divisor\n        divisor = n\n        # Loop through all numbers from 1 to the square root of n\n        for i in range(1, int(n**0.5)+1):\n            # Check if n is divisible by i\n            if n % i == 0:\n                # If yes, decrement the divisor and increment the divisors count\n                divisor = i\n                divisors += 1\n                # Check if the divisor is greater than the current divisor\n                if divisor > divisor:\n                    # If yes, update the divisor variable to be the new divisor\n                    divisor = divisor\n    return divisors",
        "test": "assert divisor(1) == 1",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Initialize an empty dictionary\n    frequency_dict = {}\n\n    # Iterate over the flattened list\n    for item in flat_list:\n        # If the item is already in the dictionary, increment its count\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        # If the item is not in the dictionary, add it with a count of 1\n        else:\n            frequency_dict[item] = 1\n\n    return frequency_dict",
        "test": "assert frequency_lists([1,2,2,3,3,4,4]) == {'1': 2, '2': 2, '3': 1, '4': 1}",
        "num_ids": 2327,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n\n    # initialize the result variable to 0\n    result = 0\n\n    # loop through each number in the list\n    for num in numbers:\n\n        # loop through each digit in the number\n        for i in range(10):\n\n            # add the number times the digit to the result variable\n            result += num * i\n\n        # divide the result variable by the length of the list\n        result = result / len(numbers)\n\n    # return the result variable\n    return result",
        "test": "assert multiply_num([10, 20, 30]) == 60",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n!= 0: \n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 1012,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def next_smallest_palindrome(num):\n    # Initialize the smallest palindrome to the input number\n    smallest_palindrome = num\n\n    # Loop through all integers from 1 to the smallest palindrome\n    for i in range(2, int(num**0.5) + 1):\n        # Check if the input number is a palindrome and is smaller than the current palindrome\n        if str(num) == str(i) and i >= smallest_palindrome:\n            smallest_palindrome = i\n\n    return smallest_palindrome",
        "test": "assert next_smallest_palindrome(4321) == 4321",
        "num_ids": 2044,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1470,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n\n    Example:\n    >>> snake_to_camel('my_string')\n   'myString'\n    >>> snake_to_camel('my_string_with_underscores')\n   'myStringWithUnderscores'\n    '''\n    words = word.split('_')\n    return ''.join([word.capitalize() if i else word.lower() for i, word in enumerate(words)])",
        "test": "assert snake_to_camel('snake_case_word') =='snakeCaseWord'",
        "num_ids": 1041,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Check if n and m are integers\n    if not all(isinstance(i, int) for i in [n, m]):\n        raise ValueError(\"n and m must be integers\")\n    \n    # Check if n and m are less than or equal to 1000\n    if n > 1000 or m > 1000 or n <= 0 or m <= 0:\n        raise ValueError(\"n and m must be greater than 0 and less than or equal to 1000\")\n    \n    # Find the gcd of n and m\n    gcd = 1\n    while m % gcd!= 0:\n        gcd = gcd(gcd, m % gcd)\n    \n    # Find the lcm of n and m\n    lcm = n * m // gcd\n    \n    # Return the Eulerian number\n    return lcm",
        "test": "assert eulerian_num(2, 3) == 6",
        "num_ids": 2254,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for sublist in input_list:\n        sublists.append(sublist)\n    sublists.sort()\n    return sublists",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 1926,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def count(lst):\n    true_count = 0\n    for item in lst:\n        if item:\n            true_count += 1\n    return true_count",
        "test": "assert count([]) == 0",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n",
        "test": "assert add_lists([], []) == []",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n\n    Parameters:\n    num1 (list): List of numbers.\n    num2 (list): List of numbers.\n    num3 (list): List of numbers.\n\n    Returns:\n    list: A single sorted list of numbers.\n    \"\"\"\n    # Merge the three lists\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    # Append any remaining elements from the three lists\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    # Convert the merged list to a sorted list\n    merged_list = sorted(merged_list)\n\n    return merged_list",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 3439,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the given string to a binary string\n    binary_string = bin(int(s, 2))[2:].zfill(len(s))\n\n    # Initialize the count to 0\n    count = 0\n\n    # Loop through each bit of the binary string\n    for i in range(len(binary_string)):\n        # If the bit is 1, increment the count\n        if binary_string[i] == '1':\n            count += 1\n\n    return count",
        "test": "assert odd_Equivalent('10101',4) == 3, \"The function should return the number of odd numbers with odd rotations of length 4.\"",
        "num_ids": 2570,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    \n    # Traverse through nestedlist\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common.append(i)\n                break\n            \n    return common",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 2019,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n\n    Parameters:\n        text: string\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    '''\n\n    # Check if the string contains a digit or a dot\n    if '.' in text or text.isdigit():\n        return True\n    else:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Check if all dictionaries in list1 are empty\n    if all(not dict(d).values() for d in list1):\n        return True\n    else:\n        return False",
        "test": "assert empty_dit([]) == True",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result",
        "test": "assert tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in test_list:\n        for j in i:\n            float_list.append(float(j))\n    return float_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]",
        "num_ids": 1613,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"apple orange banana\") == ['apple', 'orange', 'banana']",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return num\n        seen[num] = True\n    return None",
        "test": "assert search([1, 2, 3, 2, 1]) == 2",
        "num_ids": 1931,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    max_tuple = (0, 0)\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n\n            if product > max_product:\n                max_product = product\n                max_tuple = (list1[i][0], list1[j][1])\n\n    return max_tuple\n\n\nlist1 = [(1, 2), (3, 4), (5, 6)]\nprint(max_product_tuple(list1))  # Output: (6, 8)",
        "test": "assert max_product_tuple([]) == (0, 0)",
        "num_ids": 2045,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit+1):\n        if i > 1:\n            j = 2*i\n            while j <= limit:\n                if j == i or j == i+i:\n                    sum += j\n                j += 2\n    return sum",
        "test": "assert amicable_numbers_sum(10) == 28",
        "num_ids": 1953,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Returns the angle of the complex number a + bi.\n\n    Parameters:\n    a (float) : real part of the complex number.\n    b (float) : imaginary part of the complex number.\n\n    Returns:\n    The angle of the complex number a + bi in radians.\n    '''\n\n    # Compute the angle in radians\n    angle = cmath.phase(a + b)\n\n    return angle",
        "test": "assert angle_complex(1,0) == 0*cmath.pi/2",
        "num_ids": 1241,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    count_0 = count_1 = 0\n    max_diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = count_1 - count_0\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff",
        "test": "assert find_length(\"01100111\") == 2",
        "num_ids": 4108,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisor = 0\n    for i in range(a,b+1):\n        if b % i == 0 and a % i == 0:\n            common_divisor += i\n    return common_divisor",
        "test": "assert sum(5, 10) == 5, \"The sum of common divisors of 5 and 10 should be 5.\"",
        "num_ids": 1838,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def long_words(n, str):\n    '''\n    Find words in a string that are longer than n characters long.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result",
        "test": "assert long_words(10, \"This is a sentence with a longer word than 10 characters\") == [] # One word",
        "num_ids": 2765,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 4:\n        return False\n    \n    # Check each row\n    for row in my_matrix:\n        if len(row)!= 4:\n            return False\n        for num in row:\n            if not (num >= 1 and num <= 9):\n                return False\n    \n    # Check each column\n    for i in range(4):\n        for j in range(4):\n            if not my_matrix[i][j] == my_matrix[i][3-j-1]:\n                return False\n    \n    # Check each 3x3 submatrix\n    for i in range(1, 4):\n        for j in range(1, 4):\n            if not all(my_matrix[i][k] == my_matrix[k][j] == my_matrix[i-1][j-1] for k in range(i)):\n                return False\n    \n    # Check each 4x4 submatrix\n    for i in range(2, 4):\n        for j in range(2, 4):\n            if not all(my_matrix[k][j] == my_matrix[k-1][j] == my_matrix[k-2][j-1] for k in range(i)):\n                return False\n    \n    # Check each 5x5 submatrix\n    for i in range(3, 5):\n        for j in range(3, 5):\n            if not all(my_matrix[k][j] == my_matrix[k][j-1] == my_matrix[k][j-2] == my_matrix[k][j-3] for k in range(i)):\n                return False\n    \n    # Check each 6x6 submatrix\n    for i in range(4, 6):\n        for j in range(4, 6):\n            if not all(my_matrix[k][j] == my_matrix[k-1][j] == my_matrix[k-2][j] == my_matrix[k-3][j-1] == my_matrix[k-4][j-2] for k in range(i)):\n                return False\n    \n    # Check each 7x7 submatrix\n    for i in range(5, 7):\n        for j in range(5, 7):\n            if not all(my_matrix[k][j] == my_matrix[k-1][j] == my_matrix[k-2][j] == my_matrix[k-3][j] == my_matrix[k-4][j-1] == my_matrix[k-5][j-2] for k in range(i)):\n                return False\n    \n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == False, \"The matrix should not be a magic square\"",
        "num_ids": 2920,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with maximum frequency.\n    '''\n\n    # create a dictionary to keep track of the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # iterate through the list of integers and increment its frequency in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # iterate through the dictionary and find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    # return the item with maximum frequency\n    return max_item",
        "test": "assert max_occurrences([1,2,2,3,3,3,3,3,3]) == 3",
        "num_ids": 1674,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    return str1[::-1]\n",
        "test": "assert reverse_vowels(\"hello\") == \"olleh\"",
        "num_ids": 1127,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string((1, 2, 3)) == '(1, 2, 3)'",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def sum_negativenum(nums):\n    '''\n    Given a list of numbers, calculate the sum of the negative numbers.\n    '''\n    # initialize the sum to zero\n    total = 0\n    \n    # loop over the numbers in the list\n    for num in nums:\n        # if the number is negative, add it to the total\n        if num < 0:\n            total += num\n    \n    # return the total sum\n    return total",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 1176,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n % 6  # if n is odd, the last digit should be odd, so we need to add 1 to n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 13\n    else:\n        return hexagonal_num(n-2) + 4",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def zero_count(nums):\n    count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            count += 1\n\n    return count / zero_count",
        "test": "assert zero_count([0, 0, 0, 0, 0]) == 0.0",
        "num_ids": 2118,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a Python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize a variable to store the sum of non-zero powers of 2\n    sum_of_powers_of_two = 0\n\n    # Initialize a variable to store the number of non-zero powers of 2\n    count_non_zero_powers_of_two = 0\n\n    # Check if the given number is a power of 2\n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        # If the given number is a power of 2, check if it can be represented as sum of non-zero powers of 2\n        while n % 2 == 0:\n            sum_of_powers_of_two += 1\n            count_non_zero_powers_of_two += 1\n            n //= 2\n        return True\n    else:\n        # If the given number is not a power of 2, check if it can be represented as sum of non-zero powers of 2\n        while n > 1:\n            if n % 2 == 0:\n                sum_of_powers_of_two += 1\n                count_non_zero_powers_of_two += 1\n                n //= 2\n            else:\n                sum_of_powers_of_two += 1\n                count_non_zero_powers_of_two += 1\n                n += 1\n        return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 2415,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r",
        "test": "assert circle_circumference(5) == 31.4159, \"circle_circumference(5) should return 31.4159.\"",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create an empty set to hold the numbers\n    numbers_set = set()\n\n    # Iterate over the list of lists\n    for inner_list in test_list:\n        # Iterate over the elements of the inner list\n        for element in inner_list:\n            # Add each element to the set\n            numbers_set.add(element)\n\n    # Return the set of numbers\n    return numbers_set",
        "test": "assert extract_singly([]) == set()",
        "num_ids": 1531,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums",
        "test": "assert pancake_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 2441,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([],[],[]) == 0",
        "num_ids": 1247,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def find_lists(Input):\n    return len(set(Input))",
        "test": "assert find_lists(()) == 0",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([2,3,4]) == 2 # Check if the function returns the correct result when given the array [2, 3, 4]",
        "num_ids": 1586,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    if a * b == n:\n        x = (n // a) * b\n        y = (a * n // b) + b\n        return (x, y)\n    else:\n        return None",
        "test": "assert find_solution(1, 2, 3) == None",
        "num_ids": 1734,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))",
        "test": "assert remove_elements([], []) == []",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i * 2 <= n:\n        sum += (n-i*2)\n        i += 1\n    return sum",
        "test": "assert sum_series(10) == 30",
        "num_ids": 1485,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    area = 0\n    for i in range(l):\n        area += s / 2\n        s = s / 2\n        if i < l - 1:\n            area += s / 2\n            s = s / 2\n    \n    return area",
        "test": "assert area_polygon(4, 6) == 24.0",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n\n    Args:\n        n (int): a positive integer\n\n    Returns:\n        bool: True if the sum of the divisors is the same as the product of the divisors, False otherwise\n    '''\n\n    # find the sum of the divisors\n    divisor_sum = math.prod(range(1, n+1))\n\n    # check if the sum of the divisors is the same as the product of the divisors\n    return divisor_sum == n * divisor_sum",
        "test": "assert div_sum(12) == False",
        "num_ids": 1599,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert str1 to lowercase to make it case insensitive\n    str1 = str1.lower()\n\n    # initialize counter\n    counter = 0\n\n    # iterate through each character in str1\n    for char in str1:\n\n        # if the character is in the English alphabet (a-z), increment the counter\n        if char.isalpha():\n            counter += 1\n\n    return counter",
        "test": "assert count_char_position(\"\") == 0",
        "num_ids": 2105,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2, \"The function should return 2 for the given input\"",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize the smallest power of 2 greater than or equal to n as 1\n    smallest_power = 1\n    # loop until the smallest power of 2 greater than or equal to n is found\n    while smallest_power < n:\n        # double the smallest power of 2 greater than or equal to n\n        smallest_power *= 2\n    # return the smallest power of 2 greater than or equal to n\n    return smallest_power",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 1542,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n\n    return count\n\na = [1, 2, 3, 2, 4, 5, 6, 2, 7, 8, 9, 5]\nx = 2\n\nprint(frequency(a,x)) # Output: 2",
        "test": "assert frequency([1,2,3,2,1], 2) == 2",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 1593,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 3 * a",
        "test": "assert perimeter_pentagon(4) == 12.0",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"Hello world, std! std is std!\") == 3",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    same_data_types = True\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            same_data_types = False\n            break\n    return same_data_types\n",
        "test": "assert check_type((1, \"2\", 3, 4, 5)) == False",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # count the frequency of x in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # return True if the count of x is greater than or equal to n/2, else False\n    return count >= n // 2",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 3) == False",
        "num_ids": 1900,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        n = n & (n - 1)  # get the rightmost set bit (if any)\n        count += 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string(\"python\") == \"noth\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def min_of_three(a, b, c):\n    return min(a, min(b, c))",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return r == n",
        "test": "assert all_Bits_Set_In_The_Given_Range(11, 2, 9) == False",
        "num_ids": 1888,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a new list to store the rearranged elements\n    rearranged_arr = []\n\n    # iterate through the given array and append negative elements to the new list before positive ones\n    for i in range(n):\n        if arr[i] < 0:\n            rearranged_arr.append(arr[i])\n        else:\n            rearranged_arr.append(0)\n\n    # shift all the negative elements to the front of the new list\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = rearranged_arr[i]\n\n    # return the rearranged array\n    return arr",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 2832,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n\n    # initialize an empty string to store the modified string\n    modified_str = ''\n\n    # loop through each character in the input string\n    for i in range(len(str1)):\n\n        # if the current character is a space, replace it with the input character\n        if str1[i] =='':\n            modified_str += char\n\n        # if the current character is not a space, add it to the modified string\n        else:\n            modified_str += str1[i]\n\n    return modified_str",
        "test": "assert replace_blank(\"\", \"\") == \"\"",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    if n > len(list1):\n        return []\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 2) == [5, 4]",
        "num_ids": 1657,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h",
        "test": "assert lateralsuface_cylinder(3,1) == 6.0, \"The function should return the correct value for lateralsurface_cylinder(3,1).\"",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3",
        "test": "assert volume_cube(5) == 125",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def even_bit_set_number(n):\n    # iterate from 0 to n-1\n    for i in range(0, n-1, 2):\n        # if the i-th bit is not 0, then set it to 1\n        if n & (1<<i)!= 0:\n            n |= (1<<i)\n\n    return n",
        "test": "assert even_bit_set_number(10) == 10 # Test 1: Set all even bits to 1 in the number 10",
        "num_ids": 1534,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)",
        "test": "assert check_occurences([\"apple\", \"banana\", \"apple\", \"orange\", \"apple\"]) == {\"apple\": 3, \"banana\": 1, \"orange\": 1}",
        "num_ids": 1720,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(1, len(str)):\n        for j in range(i):\n            count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0 # This is the correct implementation of the function.",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # base case: if n is greater than or equal to m, then there is only one sequence of length n\n    if n >= m:\n        return 1\n\n    # calculate the maximum number of elements that can be in any sequence of length n\n    max_elements = 1000000000\n\n    # iterate through the possible lengths of n\n    for i in range(1, n + 1):\n        # initialize the current sequence to an empty list\n        current_sequence = []\n\n        # iterate through the possible starting elements\n        for j in range(m, i + 1):\n            # if the current element is greater than or equal to twice the previous element but less than or equal to m, then add it to the current sequence\n            if j >= 2 * (j - 1) and j <= m:\n                current_sequence.append(j)\n\n        # if there is still a sequence of length n that satisfies the constraint, return the number of sequences\n        if current_sequence:\n            return len(current_sequence) * get_total_number_of_sequences(m, n - i)\n\n    # if no sequence satisfies the constraint, return 0\n    return 0",
        "test": "assert get_total_number_of_sequences(1,1) == 1",
        "num_ids": 1984,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def replace_list(list1, list2):\n    '''\n    Replace the last element of list1 with elements from list2.\n    '''\n    return list1[:-1] + list2",
        "test": "assert replace_list([],[]) == []",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 816,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    num = N\n    sqrt_num = int(math.sqrt(num))\n    if num == sqrt_num * sqrt_num:\n        return sqrt_num * sqrt_num\n    else:\n        while sqrt_num * sqrt_num <= num:\n            sqrt_num += 1\n        return sqrt_num * sqrt_num",
        "test": "assert next_Perfect_Square(100) == 100",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def max_sum(arr):\n    '''\n    Find the maximum sum of a bitonic subsequence in a given array.\n    '''\n\n    # Initialize variables\n    max_so_far = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for num in arr:\n        # Calculate the bitonic sum\n        current_sum = (current_sum + num) % 1000000007\n\n        # Update the maximum sum if necessary\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n\n    return max_so_far\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2269,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n\n    guess = (number + 1) // 2\n    difference = abs(number - guess ** 2)\n\n    while difference > 1e-6:\n        guess = (guess + number // guess) // 2\n        difference = abs(number - guess ** 2)\n\n    return guess",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 1917,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the first and last columns of the dynamic programming table\n    for i in range(n):\n        dp[i][i] = 1\n        \n    # Iterate through all possible substrings of length 1 to n\n    for len_ in range(2, n+1):\n        for i in range(n-len_+1):\n            j = i + len_ - 1\n            if str[i:j+1] == str[i:j+1][::-1]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                \n    # Find the length of the longest palindromic subsequence\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j] > max_len:\n                max_len = dp[i][j]\n                \n    return max_len",
        "test": "assert lps(\"\") == 0",
        "num_ids": 2766,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 1\n    for i in range(1, n):\n        sum += i/i\n    return sum",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    # Initialize an empty list to store the intersection of the two arrays\n    intersection = []\n    # Loop through the elements of the two arrays\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            # If the element is present in the second array, add it to the intersection list\n            intersection.append(num1)\n    return intersection",
        "test": "assert intersection_array([1,2,3,4,5],[1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1779,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((), 1) == 0 # test case 1",
        "num_ids": 1203,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n    result.insert(0, element)\n    return result\n",
        "test": "assert insert_element([1], 2) == [2, 1]",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numerator = numbers[0]\n    denominator = numbers[1]\n    magnitude = cmath.sqrt(numerator**2 + denominator**2)\n    angle = cmath.atan2(numerator, denominator)\n    return magnitude, angle\n\nnumbers = [2 + 3j, 4 - 5j]\nmagnitude, angle = convert(numbers)\nprint(\"Magnitude:\", magnitude)\nprint(\"Angle:\", angle)",
        "test": "assert convert(cmath.rect(3, 4)) == (1.0, math.pi/4)",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list(filter(lambda x: isinstance(x, int), list1)))",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(c) for c in combinations_with_replacement(l, n)]",
        "test": "assert combinations_colors([], 2) == []",
        "num_ids": 2061,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Define a list to store the prime numbers\n    primes = []\n\n    # Loop through all numbers from 2 to the given number\n    for i in range(2, n+1):\n        # If the number is not divisible by any number from 2 to itself\n        if n % i == 0:\n            # Add the number to the list of prime numbers\n            primes.append(i)\n\n    # Return the number of prime numbers less than the given number\n    return len(primes)\n",
        "test": "assert count_Primes_nums(0) == 0, \"count_Primes_nums(0) should return 0\"",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)",
        "test": "assert swap_numbers(3,5) == (5,3)",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2",
        "test": "assert maximize_elements((2, 4), (1, 3)) == (2, 4)",
        "num_ids": 1640,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def newman_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    \n    # Find the smallest prime factor of n\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    \n    # Check if n is odd\n    if n!= 1:\n        return n\n    \n    # Check if n is prime\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return n\n    \n    return n + 1",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 2960,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Create an empty tuple to store the result\n    result = ()\n    \n    # Loop through each element of the first tuple\n    for element in test_tup1:\n        # Loop through each element of the second tuple and perform division operation element-wise\n        for divisor in test_tup2:\n            result += (element / divisor,)\n    \n    # Return the result tuple\n    return result",
        "test": "assert division_elements((1, 2, 3), (5, 4, 3)) == (1, 2, 3)",
        "num_ids": 1991,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # define a function to create a new list of L elements from the original list\n    def create_new_list(lst, length):\n        return lst[:length]\n\n    # get the length of the original list\n    len_original = len(list1)\n\n    # create a new list of L elements from the original list\n    list1_short = create_new_list(list1, L)\n\n    # create a new list of the remaining elements in the original list\n    list1_long = list1[L:]\n\n    # return the resulting lists in a tuple\n    return (list1_short, list1_long)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 2408,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0:\n        return h_age\n    else:\n        return None",
        "test": "assert dog_age(4) == 4",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # convert S to a list\n    S = list(S)\n    # initialize result list\n    result = []\n    # loop through each element in S\n    for i in range(0, len(S), step):\n        # create a new list containing the elements in S between the current index and the next index\n        sublist = S[i:i+step]\n        # append the sublist to the result list\n        result.append(sublist)\n    # return the result list\n    return result",
        "test": "assert list_split([], 1) == []",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = l * l * l\n    return surface",
        "test": "assert lateralsurface_cube(5) == 125",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def square_Sum(n):\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum variable\n        sum += i**2\n    # return the sum variable\n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    return (n * (n + 1)) // 2",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 1677,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n            \n    return even_sum, even_index",
        "test": "assert sum_even_and_even_index([1, 2, 4, 6, 8]) == 32",
        "num_ids": 1673,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def even_Power_Sum(n):\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    \n    # Initialize variables\n    sum = 0\n    count = 0\n    num = 2\n    \n    # Calculate the sum of the first n even natural numbers that are raised to the fifth power\n    while count < n:\n        sum += num ** 5\n        count += 1\n        num += 2\n    \n    return sum",
        "test": "assert even_Power_Sum(20) == 2688",
        "num_ids": 1254,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list",
        "test": "assert rear_extract([]) == []",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    for i, element1 in enumerate(test_tup1):\n        if i in test_tup2:\n            element2 = test_tup2[i]\n            result_tup += (element1 - element2)\n        else:\n            result_tup += (element1,)\n    return result_tup",
        "test": "assert substract_elements(tuple([1, 2, 3]), tuple([4, 5, 6])) == tuple([1, 2, 3])",
        "num_ids": 2159,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_sum = 0\n    for i in range(1, n+1):\n        binomial_sum += binomial_coefficient(i, n)\n    return binomial_sum\n\ndef binomial_coefficient(n, r):\n    '''\n    Calculate the binomial coefficient C(n, r)\n    '''\n    return math.comb(n, r)",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1664,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*3.14159*r**3*h",
        "test": "assert volume_cylinder(10,5) == 50.0",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n\n    # create a new dictionary to store the filtered entries\n    filtered_dict = {}\n\n    # iterate through the original dictionary and filter out entries with values less than or equal to n\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n\n    # return the filtered dictionary\n    return filtered_dict",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 6) == {}",
        "num_ids": 1427,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if test_tup.index(element) == 0:\n            count += 1\n    return count",
        "test": "assert count_first_elements((1,2,3,4,5,6)) == 1",
        "num_ids": 1323,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal *= i\n    return decagonal",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # Check if the element is in the array\n    if item in dlist:\n        # Return a tuple containing the boolean value and the index position of the element\n        return (True, dlist.index(item))\n    else:\n        # Return a tuple containing the boolean value and -1\n        return (False, -1)",
        "test": "assert sequential_search([1], 1) == (True, 0)",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5, 5]) == False",
        "num_ids": 1397,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists are not of equal length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]-nums2[i])\n        return result",
        "test": "assert sub_list([1,2,3],[1,2,3]) == [0,0,0]",
        "num_ids": 1348,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def validate(n):\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    for digit in str(n):\n        if frequency[digit] > 1:\n            return False\n    return True",
        "test": "assert validate(123) == True, \"validate should return True for integers that are divisible by 10 and greater than or equal to 10.\"",
        "num_ids": 1483,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False",
        "test": "assert check_element([1,2,3],4) == False",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.{2}b'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_two_three(\"The quick brown fox jumps over the lazy dog. \") == False",
        "num_ids": 2219,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    max_ending_here = float('-inf')\n    current_sum = 0\n    left = 0\n    right = 0\n\n    while right < n:\n        current_sum = a[left] + current_sum\n        if current_sum > max_ending_here:\n            max_ending_here = current_sum\n            max_sum = max(max_sum, max_ending_here)\n        current_sum = max(0, current_sum - a[right])\n        if current_sum > max_ending_here:\n            max_ending_here = current_sum\n            max_sum = max(max_sum, max_ending_here)\n        left += 1\n        right += 1\n\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([-2, -3, -1], 3, 2) == 0",
        "num_ids": 3554,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares",
        "test": "assert square_Sum(2) == 4, \"The sum of squares of 2 is incorrect.\"",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # Create a dictionary to store the lengths of each list in the list\n    length_dict = {}\n\n    # Loop through each list in the list of lists\n    for item in list1:\n        # Check if the length of the list is in the dictionary\n        if item in length_dict:\n            # If it is, update its length with the length of the current list\n            length_dict[item] = max(length_dict[item], len(item))\n        else:\n            # If it's not, add it to the dictionary with the length of the current list\n            length_dict[item] = len(item)\n\n    # Create a list of tuples with the keys as the item and the values as the length of that item\n    max_lengths = [(item, length_dict[item]) for item in list1]\n\n    # Sort the list of tuples by length in descending order and return the first two elements\n    return max_lengths[:2]",
        "test": "assert max_length([1, 2, 3, 4, 5]) == [5]",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def count_no_of_ways(n, k):\n    ways = 1\n    for i in range(n-1):\n        ways = ways*2\n        for j in range(k-2):\n            ways = ways//2\n            if ways == 1:\n                break\n    return ways",
        "test": "assert count_no_of_ways(3, 2) == 4  # Test Case 1",
        "num_ids": 2818,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a Python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient",
        "test": "assert find(12, 3) == 4, \"Incorrect result for find(12, 3).\"",
        "num_ids": 1550,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    area = (w * h) / 2\n    return area",
        "test": "assert otherside_rightangle(6,3)==9, \"The function should return 9 for the given values.\"",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]  # assuming the first element is the max value\n    for val in listval:  # loop through the remaining elements\n        if val > max_val:  # if the current element is greater than the max value\n            max_val = val  # update the max value\n    return max_val  # return the max value",
        "test": "assert max_val([1,2,3,4,5]) == 5 # Test 1: The function should return the maximum value in the list.",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": "assert sum_div(1) == 1",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            inv_count += arr[i] > arr[j]\n    return inv_count",
        "test": "assert get_Inv_Count([]) == 0",
        "num_ids": 1412,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            flat_list.extend(flatten_list(list1[i]))\n        else:\n            flat_list.append(list1[i])\n    return flat_list\n",
        "test": "assert flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4]",
        "num_ids": 1341,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = -float('inf')\n    for num, agg in stdata:\n        if agg > max_val:\n            max_val = agg\n    return max_val",
        "test": "assert max_aggregate([('a', 1), ('b', 2), ('c', 3)]) == 3",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(n):\n        binary_seq = bin(i)[2:]  # remove \"0b\" prefix and convert to binary\n        binary_sum = int(binary_seq, 2) + int(binary_seq[-n:], 2)\n        if binary_sum == i:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(2) == 1",
        "num_ids": 2711,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            count += 1\n        else:\n            return count + 1\n\n    return count + 1",
        "test": "assert dict_depth({1: 2}) == 1",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    for r in ranges:\n        if r[0] <= index <= r[1]:\n            return arr[index]\n    for r in rotations:\n        if r[0] <= index <= r[1]:\n            return arr[index]\n    return None",
        "test": "assert find_Element([1,2,3,4,5],[(2,1),(1,3)],[0,0,0,0,0],2) == 3  # Test case 1",
        "num_ids": 2094,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_with_p = []\n    for word in words:\n        if word.startswith('p'):\n            words_with_p.append(word)\n    return words_with_p",
        "test": "assert start_withp(['python', 'programming', 'is', 'fun', 'and', 'hard']) == ['python', 'programming']",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    max_so_far = float('-inf')\n    current_sum = 0\n    prev_element = float('-inf')\n    for i in range(n):\n        current_sum = a[i] + prev_element\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n        elif current_sum == max_so_far and i > index:\n            max_so_far = current_sum\n        prev_element = a[i]\n    return max_so_far",
        "test": "assert max_sum_increasing_subseq([1, 3, 5, 7, 9], 4, 2, 3) == 12",
        "num_ids": 2488,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = tuple(deepcopy(tuplex)[:m] + tuple(deepcopy(tuplex)[m:m+n]) + tuple(deepcopy(tuplex)[m+n:]))\n    return col",
        "test": "assert colon_tuplex((1,2,3),3,3)==(1,2,3)",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # create a dictionary to store the products of the two lists with the same factor\n    products = {}\n\n    # iterate through all possible factors of one of the lists\n    for factor in range(1, N+1):\n        # find the largest product of the two lists that is less than or equal to the factor\n        max_product = float('-inf')\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] % factor == 0 and nums2[j] % factor == 0:\n                    product = nums1[i] * nums2[j]\n                    if product > max_product:\n                        max_product = product\n\n        # store the product in the dictionary\n        products[factor] = max_product\n\n    # find the largest product of all factors\n    max_product = float('-inf')\n    for product in products.values():\n        if product > max_product:\n            max_product = product\n\n    return max_product",
        "test": "assert large_product([1,2,3,4,5], [4,5,6,7,8], 3) == 40",
        "num_ids": 2905,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5,8) == 8",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the count of set bits to 0\n    count = 0\n\n    # Iterate through the binary representation of n\n    while n!= 0: \n        # If the current bit is set, increment the count\n        if n & 1: \n            count += 1\n\n        # Shift the binary representation of n to the left by 1 bit\n        n = n >> 1\n\n    # Return the count of set bits\n    return count",
        "test": "assert set_left_most_unset_bit(0) == 0, \"set_left_most_unset_bit(0) should return 0\"",
        "num_ids": 1508,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import math\n\ndef volume_cone(r, h):\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(3, 2) == 6.283185307179586",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    highest_power = 1\n    while highest_power < n:\n        highest_power = highest_power << 1\n    return highest_power",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1460,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        lucas = find_lucas(n-1) + n\n        return lucas",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        item = string.format(item)\n    return list_",
        "test": "assert add_string([], \"\") == []",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for item in l1:\n        for subitem in item:\n            if subitem in l2:\n                result.setdefault(subitem, []).append(item)\n            elif subitem not in result:\n                result[subitem] = []\n                result[subitem].append(item)\n    for item in l3:\n        if item not in result:\n            result[item] = []\n            result[item].append(item)\n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 1789,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n+1):\n        max_sum = max(max_sum, i*max(2*i*i, 3*i*i, 4*i*i, 5*i*i))\n    return max_sum",
        "test": "assert get_max_sum(15) == 25",
        "num_ids": 2730,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def max_length_list(input_list):\n    '''\n    Finds the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for num in input_list:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n            max_list = [num]\n        elif len(str(num)) == max_length:\n            max_list.append(num)\n\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 1637,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n    # check if set is empty or has only one element\n    if test_set == set() or len(test_set) == 1:\n        return True\n    else:\n        return False",
        "test": "assert check_distinct((\"apple\", \"banana\", \"apple\")) == False",
        "num_ids": 1482,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Initialize an empty list to store the first non-repeated character\n    first_non_repeating = []\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the list of first non-repeated characters, add it\n        if char not in first_non_repeating:\n            first_non_repeating.append(char)\n\n    # Return the first non-repeating character\n    return first_non_repeating[0] if first_non_repeating else None",
        "test": "assert first_non_repeating_character(\"a\") == \"a\"",
        "num_ids": 1898,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith(string[::-1]):\n        return True\n    elif string.endswith(string[::-1]):\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"abc\") == False",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # take the three numbers and sort them in ascending order\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n\n    # if the list has an odd number of elements, return the middle number\n    if len(sorted_list) % 2 == 1:\n        return sorted_list[len(sorted_list)//2]\n\n    # if the list has an even number of elements, return the average of the two middle numbers\n    else:\n        return (sorted_list[len(sorted_list)//2 - 1] + sorted_list[len(sorted_list)//2]) / 2",
        "test": "assert median_numbers(1, 2, 3) == 2.0",
        "num_ids": 1864,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum\n",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Create a variable to hold the result\n    result = None\n\n    # Iterate over each tuple in the input tuples\n    for tup in test_tup1:\n        # Initialize a variable to hold the xor of each tuple\n        xor = 0\n\n        # Iterate over each tuple in the second tuple\n        for tup2 in test_tup2:\n            # Calculate the xor of the current tuple and the second tuple\n            xor = tup ^ tup2\n\n        # If the xor of the current tuple and the second tuple is not equal to 0, update the result variable\n        if xor!= 0:\n            result = xor\n\n    return result",
        "test": "assert bitwise_xor(tuple1, tuple2) == expected_result, \"The function did not return the correct result.\"",
        "num_ids": 1791,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    \n    return result_tup",
        "test": "assert add_nested_tuples((1, 2), (3, 4)), (4, 6)",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(5, 7) == 5",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    for element in tuplex: \n        if element in tuple1: \n            return True \n    return False",
        "test": "assert check_tuplex('abcd', 'abcd') == True",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if it is odd, False otherwise.\n    '''\n    return x % 2!= 0",
        "test": "assert find_Parity(10) == False",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # convert the number to a string and reverse it\n    num_str = str(n)[::-1]\n\n    # convert the reversed string back to an integer and return it\n    return int(num_str)",
        "test": "assert rearrange_bigger(123456) == 654321",
        "num_ids": 2251,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # Sort the given lists in ascending order\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    \n    # Initialize a dictionary to store the number of elements in each list\n    element_count = {}\n    \n    # Count the number of elements in each list\n    for num in nums1 + nums2:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    # Initialize an empty list to store the indices of the smallest k pairs\n    result = []\n    \n    # Iterate through the elements of the first list and find k-1 smallest pairs\n    for i, num1 in enumerate(nums1):\n        if i < k - 1:\n            min_num = heapq.heappop(nums1)\n            for j, num2 in enumerate(nums2):\n                if j < k - 1:\n                    min_num2 = heapq.heappop(nums2)\n                    if min_num < min_num2:\n                        heapq.heappush(nums2, min_num2)\n                        heapq.heappush(nums1, min_num)\n                        heapq.heappush(result, (num1, num2))\n                        min_num2 = min_num\n                        min_num = min_num2\n                \n    # Iterate through the elements of the second list and find k-1 smallest pairs\n    for i, num2 in enumerate(nums2):\n        if i < k - 1:\n            min_num = heapq.heappop(nums2)\n            for j, num1 in enumerate(nums1):\n                if j < k - 1:\n                    min_num2 = heapq.heappop(nums1)\n                    if min_num < min_num2:\n                        heapq.heappush(nums1, min_num2)\n                        heapq.heappush(nums2, min_num)\n                        heapq.heappush(result, (num1, num2))\n                        min_num2 = min_num\n                        min_num = min_num2\n                \n    return result",
        "test": "assert k_smallest_pairs([1, 1, 1], [1, 1, 1], 2) == []",
        "num_ids": 3697,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def min_product_tuple(list1):\n    '''\n    Find the minimum product between two tuples within a list.\n    \n    Args:\n        list1 (list of tuples): a list of tuples where each tuple contains three elements: (x1, y1, z1), (x2, y2, z2),..., (xn, yn, zn)\n    \n    Returns:\n        float: the minimum product between the two tuples in the list\n    \n    '''\n    if len(list1) < 2:\n        return None\n    \n    x1, y1, z1 = list1[0]\n    x2, y2, z2 = list1[1]\n    \n    if x1 > x2:\n        x1, x2 = x2, x1\n        y1, y2 = y2, y1\n        z1, z2 = z2, z1\n    \n    product = x1 * y1 * z1\n    \n    for i in range(2, len(list1)):\n        x, y, z = list1[i]\n        if x < x1:\n            x1, x2 = x, x2\n            y1, y2 = y, y2\n            z1, z2 = z, z2\n        elif x == x1:\n            if y < y1:\n                y1, y2 = y, y2\n            elif y == y1:\n                if z < z1:\n                    z1, z2 = z, z2\n        else:\n            if z < z1:\n                z1, z2 = z, z2\n    \n    product = min(product, x1 * y1 * z1)\n    return product",
        "test": "assert min_product_tuple([1, 2, 3, 4, 5, 6]) == (1 * 2 * 3 * 4 * 5 * 6)",
        "num_ids": 2506,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n\n    # loop through each element of the list\n    for elem in listval:\n        # if the current element is smaller than the minimum value\n        if elem < min_val:\n            # update the minimum value to be the current element\n            min_val = elem\n\n    return min_val",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case_word = re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n\n    # Remove any leading or trailing underscores\n    camel_case_word = camel_case_word.lstrip('_').rstrip('_')\n\n    return camel_case_word",
        "test": "assert snake_to_camel('snake_case_string') =='snakeCaseString'",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a given list.\n    '''\n    odd_list = [num for num in l if num % 2!= 0]\n    return odd_list",
        "test": "assert remove_odd([]) == []",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n\n    # Check if the list1 is empty or None\n    if not list1:\n        return None\n\n    # Check if the n is an integer\n    if not isinstance(n, int):\n        return None\n\n    # Check if n is less than or equal to 1\n    if n <= 0:\n        return None\n\n    # Check if n is greater than the number of elements in the list1\n    if n > len(list1):\n        return None\n\n    # Return the nth element from the list1\n    return list1[n-1]",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4)], 1) == ('a', 1)",
        "num_ids": 1692,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3],[2,4,6])",
        "num_ids": 1355,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    arr.sort()  # sort array in ascending order\n    max_product = 1  # initialize max_product to 1\n    current_product = 1  # initialize current_product to 1\n    for i in range(len(arr)):\n        current_product = 1  # reset current_product for each iteration\n        for j in range(i+1, len(arr)):\n            current_product = max(current_product*arr[j], arr[j])  # update current_product\n        if current_product > max_product:\n            max_product = current_product  # update max_product if current_product is greater than max_product\n    return max_product",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1927,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique_elements = set(tuple(t[0] for t in Input))\n    common_elements = [t[0] for t in Input if t[0] in unique_elements]\n    if len(common_elements) == 1:\n        return common_elements\n    else:\n        return None",
        "test": "assert group_tuples([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\", 5), (\"a\", 6)]) == (\"a\", 1)",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def Find_Max(lst):\n    # Initialize max_elem with the first element of the list\n    max_elem = lst[0]\n\n    # Iterate over the remaining elements in the list\n    for elem in lst[1:]:\n        # If the current element is greater than max_elem, update max_elem\n        if elem > max_elem:\n            max_elem = elem\n\n    # Return the max_elem\n    return max_elem",
        "test": "assert Find_Max([1, 3, 5, 7, 9]) == 9",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and returns the total sum of numbers that are rounded to 2 decimal places.\n    '''\n    total_sum = 0\n    for num in lst:\n        rounded_num = round(num, 2)\n        total_sum += rounded_num\n    return total_sum",
        "test": "assert round_and_sum([1,2,3,4,5]) == 15",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def cube_Sum(n):\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Initialize an empty string to store the concatenated string\n    result = ''\n\n    # Loop through each element of the tuple\n    for element in test_tup:\n        # Check if the element is a string\n        if type(element) == str:\n            # If it is, concatenate it to the result string\n            result += element\n        else:\n            # If it is not a string, raise an exception\n            raise TypeError('All elements of the tuple must be strings.')\n\n    # Return the concatenated string\n    return result",
        "test": "assert concatenate_tuple((\"Hello\",)) == (\"Hello\")",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += (i**3)  \n        count += 1  \n\n    average = sum_of_cubes/count  \n    return average  ",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple)[-1]\n",
        "test": "assert extract_rear((\"a\", \"b\", \"c\", \"d\", \"e\")) == \"e\"",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Filter odd numbers from a list of numbers.\n    '''\n\n    # Create a new list to hold the even numbers\n    even_nums = []\n\n    # Loop through the numbers in the list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # Add the number to the even_nums list\n            even_nums.append(num)\n\n    # Return the even_nums list\n    return even_nums",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1076,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year, month, day = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt).groups()\n    return f\"{day}-{month}-{year}\"",
        "test": "assert change_date_format(\"2022-12-31\") == \"31-12-2022\"",
        "num_ids": 1732,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    for gap in range(n//2):\n        for i in range(gap, n):\n            min_index = i\n            for j in range(i+gap, n):\n                if my_list[j] < my_list[min_index]:\n                    min_index = j\n\n            if min_index!= i:\n                my_list[i], my_list[min_index] = my_list[min_index], my_list[i]\n\n    return my_list",
        "test": "assert shell_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 2481,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))",
        "test": "assert and_tuples((), ()) == ()",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b / (2*a)\n    return directrix",
        "test": "assert parabola_directrix(1, 0, 0) == 0",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False",
        "test": "assert common_element([], []) == False",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    if (base1 + base2) % 2 == 0:\n        return (base1 + base2) // 2\n    else:\n        return (base1 + base2 + height) // 2",
        "test": "assert median_trapezium(1, 3, 4) == 2",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number in arr:\n        return True\n    else:\n        return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_count = 0\n    match_count = 0\n    for char in text:\n        if char == 'a':\n            a_count += 1\n        elif char == 'b':\n            match_count += 1\n        else:\n            match_count = 0\n        if match_count == 1 and a_count > 0:\n            return True\n    return False",
        "test": "assert text_match_one(\"aabaabbaa\") == True",
        "num_ids": 5171,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def last_Digit(n):\n    last_digit = n % 10\n    return last_digit",
        "test": "assert last_Digit(10000) == 0, \"Test failed\"",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def neg_nos(list1):\n    '''\n    Returns a list of negative numbers from a list of integers.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result",
        "test": "assert neg_nos([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]",
        "num_ids": 1107,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_char = 0\n    for char in str1:\n        if char % 2!= 0:\n            odd_char += 1\n    return str1[:-odd_char]",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count\n",
        "test": "assert count_bidirectional([]) == 0, \"count_bidirectional([]) should return 0\"",
        "num_ids": 1651,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_int = 0\n    for i in L:\n        single_int += i\n    return single_int",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b\\w+(?:\\'s|st|nd|rd|th)\\b')\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Sort the matches by their position in the sentence\n    sorted_matches = sorted(enumerate(matches), key=lambda x: x[1])\n\n    # Return the first adverb and its position\n    return sorted_matches[0][0], sorted_matches[0][1]\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog slept.\"\nprint(find_adverb_position(text))",
        "test": "assert find_adverb_position(\"This is a test sentence with an adverb in the middle.\") == \"an adverb\"",
        "num_ids": 2691,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*l",
        "test": "assert surfacearea_cube(5) == 125.0",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums) if count > 0 else 0",
        "test": "assert positive_count([1]) == 1/1",
        "num_ids": 1358,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def largest_neg(lst):\n    '''\n    Find the largest negative number in a list.\n    '''\n    max_neg = float('-inf')\n    for num in lst:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg",
        "test": "assert largest_neg([-3, -2, -1, 0]) == -1, \"largest_neg([-3, -2, -1, 0]) should return -1\"",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if i % K == 0:\n            trimmed_list.append(test_list[i])\n    return trimmed_list",
        "test": "assert trim_tuple([(1, 2), (3, 4), (5, 6)], 1) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n    test_tup1 (tuple): A tuple of elements to multiply.\n    test_tup2 (tuple): A tuple of elements to multiply with the first element of test_tup1.\n\n    Returns:\n    tuple: A tuple of the elements of test_tup2 multiplied with the corresponding elements of test_tup1.\n    '''\n    return tuple(test_tup2[i]*test_tup1[i] for i in range(len(test_tup2)))",
        "test": "assert index_multiplication((1,2,3), (4,5,6)) == (4, 10, 18)",
        "num_ids": 1923,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    return counter.most_common(1)[0][0]",
        "test": "assert count_Occurrence((1, 2, 2, 3, 3), [1, 2, 2, 3, 3]) == 2",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def extract_string(lst, size):\n    '''\n    Extract a list of strings of the specified size from a list of string values.\n\n    Args:\n    - lst (list): A list of string values.\n    - size (int): The desired size of the strings to extract.\n\n    Returns:\n    - A list of the requested strings.\n    '''\n\n    return lst[:size]",
        "test": "assert extract_string('hello world', 5) == 'hello'",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"    hello    world     \") == \"helloworld\"",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(500, 500) == 0 # loss 0, if the actual_cost is greater than or equal to the sale_amount",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return sum(2**i * n // (2**i) for i in range(1, int(math.log2(n)) + 1) if n % (2**i) == 0)\n",
        "test": "assert sumofFactors(20) == 40",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in a given text.\n\n    Parameters:\n    text (str): A string representing the text to be searched.\n\n    Returns:\n    bool: True if the text contains 'z', False otherwise.\n    '''\n\n    # Match any word containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n\n    # Check if the match was found\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz(\"apple\") == False",
        "num_ids": 1254,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2: # February\n        if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11: # April, June, September, or November\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(3) == False",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist) // 2):\n        stringlist[i], stringlist[len(stringlist) - i - 1] = stringlist[len(stringlist) - i - 1], stringlist[i]\n\n    return stringlist",
        "test": "assert reverse_string_list(['a', 'b', 'c']) == ['c', 'b', 'a']",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_sublist = [i]\n        elif len(i) == min_length:\n            min_sublist.append(i)\n\n    return min_sublist",
        "test": "assert Find_Min([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]",
        "num_ids": 1319,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b",
        "test": "assert rectangle_area(5, 10) == 50, \"Incorrect value for rectangle area.\"",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove all uppercase substrings from a given string.\n    '''\n    return re.sub('([A-Z])', '', str1)",
        "test": "assert remove_uppercase(\"\") == \"\"",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the first elements of each sublist\n    first_elements = []\n    # Loop through each element in the list\n    for element in lst:\n        # Check if the element is not already in the list of first elements\n        if element not in first_elements:\n            # If the element is not in the list, add it to the list\n            first_elements.append(element)\n    # Return the list of first elements\n    return first_elements",
        "test": "assert Extract([]) == []",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr('Hello world') == 5",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def combinations_list(lst):\n    '''\n    Returns all possible combinations of elements in a list.\n\n    Parameters:\n    - lst: a list of any type.\n\n    Returns:\n    A list of all possible combinations of the elements in lst.\n    '''\n\n    # Base case: if the list has only one element, return a list containing that element\n    if len(lst) == 1:\n        return [lst]\n\n    # Recursive case: find all possible combinations of the first element and all elements after that\n    # by iterating over the rest of the list and recursively calling the same function with the rest of the list.\n    # Since all combinations have length 1, we only need to generate all combinations that have length 2 or 3.\n    combs = []\n    for i in range(1, len(lst)):\n        sub_lst = lst[:i] + lst[i:]\n        combs.extend(combinations_list(sub_lst))\n\n    return combs",
        "test": "assert combinations_list([]) == []",
        "num_ids": 4030,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    max_ending_here_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_ending_here_product = max(max_ending_here_product * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here_product)\n\n    return max_so_far",
        "test": "assert max_subarray_product([-2, -3, -1, 4, 1]) == 6",
        "num_ids": 2133,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # create an empty set to store the values in the dictionary\n    values = set()\n    \n    # iterate over the keys in the dictionary\n    for key in dict:\n        # add each value to the set\n        values.add(dict[key])\n        \n        # check if the number of values is equal to n\n        if len(values) == n:\n            # return True if all values are equal\n            return True\n            \n    # if all values are different, return False\n    return False",
        "test": "assert check_value({}, 3) == False",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1360,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def max_product(arr):\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[0] + test_tup[2], test_tup[1] + test_tup[2])",
        "test": "assert add_pairwise((1, 2, 3, 4, 5)) == (2, 3, 5, 7, 9)",
        "num_ids": 1927,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # create a list to store the results\n    result_list = []\n\n    # iterate over the array and multiply it by n\n    for num in arr:\n        result = num * n\n        # add the product to the result list\n        result_list.append(result)\n\n    # calculate the remainder of the product by dividing the first element by the last element of the result list\n    remainder = result_list[0] // result_list[-1]\n\n    # return the remainder\n    return remainder",
        "test": "assert find_remainder([1], 5) == 1",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_Consecutive(l):\n    # Initialize a variable to store the number of consecutive occurrences of consecutive numbers\n    count = 0\n\n    # Loop through the list and check if each number is consecutive\n    for num in l:\n        if num == l[count]:\n            count += 1\n        else:\n            count = 1\n\n    # If the number of consecutive occurrences is greater than 0, it means there are consecutive numbers\n    return count > 0",
        "test": "assert check_Consecutive([1, 1, 1, 1, 1]) == True, \"The list contains only consecutive numbers.\"",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets to remove duplicates\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = test_list1.intersection(test_list2)\n\n    # Return the intersection as a tuple\n    return tuple(intersection)",
        "test": "assert tuple_intersection([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == (4, 5)",
        "num_ids": 1374,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def replace_char(str1, ch, new_char):\n    '''\n    Function to replace characters in a string.\n\n    Parameters:\n    str1 (str): string to be modified\n    ch (str): character to be replaced\n    new_char (str): character to replace ch with\n\n    Returns:\n    str: modified string with ch replaced with new_char\n    '''\n\n    # loop through each character of the string\n    for i in range(len(str1)):\n        # if the character to be replaced is the one we want to replace,\n        # replace it with the new character and exit the loop\n        if str1[i] == ch:\n            str1 = str1[:i] + new_char + str1[i+1:]\n            break\n\n    return str1",
        "test": "assert replace_char(\"hello world\", \"o\", \"x\") == \"hellx world\"",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 475,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict1.copy()\n    sorted_dict = dict(sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({'apple': 2, 'banana': 3, 'cherry': 1}) == {'apple': 2, 'banana': 3, 'cherry': 1}",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables for the largest and smallest values\n    max_val = nums[0]\n    min_val = nums[0]\n\n    # Iterate over the array and update the maximum and minimum values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n\n    # Calculate and return the sum of the largest and smallest values\n    return max_val + min_val",
        "test": "assert big_sum([-10, 0, 10, -5]) == 0",
        "num_ids": 1546,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello world\") == \"hello world\"",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Removes lowercase substrings from a given string.\n\n    Parameters:\n    - str1 (string): The input string.\n\n    Returns:\n    - string: The modified input string with lowercase substrings removed.\n    '''\n    return re.sub(r'(?i)(?<!\\w)([a-z])(?!\\w)', r'\\1', str1)",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def first_Digit(n):\n    # convert n to string\n    n_str = str(n)\n    # remove any leading zeroes from n_str\n    n_str = n_str.lstrip('0')\n    # convert n_str to int and return the first digit\n    return int(n_str[0])",
        "test": "assert first_Digit(123) == 1",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def Split(lst):\n    # create an empty list to store odd numbers\n    odd_numbers = []\n\n    # loop through the list\n    for num in lst:\n        # check if the number is odd\n        if num % 2 == 1:\n            # add the odd number to the list of odd numbers\n            odd_numbers.append(num)\n\n    # return the list of odd numbers\n    return odd_numbers\n",
        "test": "assert Split([1,2,3,4,5]) == [1, 3, 5]",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def difference(n):\n    # Function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_numbers - sum_of_cubes",
        "test": "assert difference(5) == 60",
        "num_ids": 1573,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def find_Odd_Pair(A,N):\n    # initializing count variable\n    count = 0\n    # iterating through all elements in the array A\n    for i in range(N):\n        # iterating through all elements in the array A\n        for j in range(i+1, N):\n            # XORing the values at the current indices of the array\n            xor = A[i] ^ A[j]\n            # checking if xor is odd\n            if xor % 2!= 0:\n                # incrementing count variable\n                count += 1\n    # returning the count variable\n    return count",
        "test": "assert find_Odd_Pair([1,3,5,7,9], 5) == 0",
        "num_ids": 1682,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert string to lowercase to make the case conversion case-insensitive\n    string = string.lower()\n    # Use list comprehension to iterate over each character in the string and toggle its case\n    new_string = ''.join(char.upper() for char in string)\n    return new_string",
        "test": "assert toggle_string(\"\") == \"\"",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings to get the per-digit differences\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_diff = [int(i) for i in n1_str]\n    n2_diff = [int(i) for i in n2_str]\n    # Find the sum of the per-digit differences\n    digit_diff = []\n    for i in range(len(n1_diff)):\n        digit_diff.append(n1_diff[i] - n2_diff[i])\n    return sum(digit_diff)\n",
        "test": "assert digit_distance_nums(987, 654) == 9",
        "num_ids": 1791,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def max_sub_array_sum(a, size):\n    # Initialize sum of current subarray to zero\n    curr_sum = 0\n    # Initialize maximum subarray sum to zero\n    max_sum = float('-inf')\n    # Initialize maximum subarray start index to -1\n    max_start_index = -1\n    # Loop through the array\n    for i in range(size):\n        # Update the current sum by adding the current element and updating max_sum and max_start_index if necessary\n        curr_sum = max(a[i], curr_sum + a[i])\n        # If the current sum becomes greater than max_sum, update max_sum and max_start_index\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start_index = i\n    # Return the max_sum if it exists, otherwise return 0\n    return max_sum if max_sum!= float('-inf') else 0",
        "test": "assert max_sub_array_sum([1, -2, 3, -1], 3) == 3",
        "num_ids": 2184,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Create a set from both tuples to remove duplicates\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set back to a sorted list and return it\n    return sorted(list(union_set))",
        "test": "assert union_elements((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) == sorted([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])",
        "num_ids": 1821,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    sublist = []\n    for i in range(len(lst)):\n        if lst[i] not in sublist:\n            sublist.append(lst[i])\n        else:\n            sublist.append(lst[i])\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(Find_Max_Length(lst))",
        "test": "assert Find_Max_Length([1]), \"Single element list should return 1.\"",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Extract all values between quotation marks using regular expression\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    return matches",
        "test": "assert extract_values('I like \"programming\" and I also like \"sports\"!') == ['programming','sports']",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def count_Pairs(arr, n):\n    pairs_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs_count += 1\n    return pairs_count\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(count_Pairs(arr, n)) # Output: 2",
        "test": "assert count_Pairs([1,2,3,4,5],2) == 1, \"count_Pairs([1,2,3,4,5],2) == 1\"",
        "num_ids": 1352,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split(\"\") == []",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and reverse it\n    digits_str = str(n)[::-1]\n    # Initialize the sum to 0\n    sum_ = 0\n    # Loop through each digit of the reversed string\n    for digit in digits_str:\n        # Add the digit to the sum\n        sum_ += int(digit)\n    # Return the sum\n    return sum_",
        "test": "assert sum_digits(1234) == 1 + 2 + 3 + 4",
        "num_ids": 1207,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n\n    # Check if the list is sorted or not\n    if list1[0] < list1[1]:\n        return True\n\n    # Traverse through the list and check if the first element is greater than or equal to the next element\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n\n    return True",
        "test": "assert issort_list([5, 2, 8, 1, 6]) == False",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n\n    return [{} for i in range(length)]",
        "test": "assert empty_list(0) == [] # test empty list with length 0",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Check if list1 is an empty list\n    if len(list1) == 0:\n        return []\n\n    # Create a new empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # Loop through each sublist in list1\n    for sublist in list1:\n\n        # Check if the sublist is empty\n        if len(sublist) == 0:\n            continue\n\n        # Sort the sublist in ascending order\n        sorted_sublist = sorted(sublist)\n\n        # Append the sorted sublist to the sorted_sublists list\n        sorted_sublists.append(sorted_sublist)\n\n    # Return the sorted_sublists list\n    return sorted_sublists",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 2151,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize two lists to store unique numbers\n    unique_nums = []\n    unique_nums_set = set()\n    # loop through all the lists\n    for num in nums:\n        # if the number is not already in the set\n        if num not in unique_nums_set:\n            # add the number to the set\n            unique_nums_set.add(num)\n            # add the number to the list\n            unique_nums.append(num)\n    # return the unique list\n    return unique_nums",
        "test": "assert two_unique_nums([1, 2, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for i in range(1, len(unique_list)):\n        product *= unique_list[i]\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2*h",
        "test": "assert surfacearea_cylinder(0, 5) == 0 # positive test case",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    Parameters:\n    A (list): A list to be checked.\n    B (list): The list to be checked against A.\n\n    Returns:\n    True if A is a sublist of B, else False.\n    \"\"\"\n\n    # Check if B is a subset of A\n    if len(B) > len(A):\n        return False\n\n    # If B is a subset of A, check if there are any common elements\n    for i in range(len(B)):\n        if A[i] not in B:\n            return False\n\n    return True",
        "test": "assert is_Sub_Array([1,2,3,4,5], [1,2,3,5]) == False",
        "num_ids": 1645,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + last_Digit_Factorial(n // 10)",
        "test": "assert last_Digit_Factorial(2) == 2",
        "num_ids": 1530,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def interleave_lists(*args):\n    '''\n    Interleaves multiple lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for arg in args:\n        flat_list += arg\n    return flat_list",
        "test": "assert interleave_lists([],[],[]) == []",
        "num_ids": 2000,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for t1 in test_tup1:\n        if t1 not in test_tup2:\n            dissimilar_elements.append(t1)\n    for t2 in test_tup2:\n        if t2 not in test_tup1:\n            dissimilar_elements.append(t2)\n    return dissimilar_elements",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == []",
        "num_ids": 1649,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elems = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_elems.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_elems.append(i)\n    return even_elems",
        "test": "assert even_ele((1, (2, (3, 4, 5))), lambda x: x % 2 == 0) # should return 2, 4, 6",
        "num_ids": 2242,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*s\n    return area",
        "test": "assert surface_Area(3,2) == 18 # base=3, height=2",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict([]) == True",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = (5 * catalan_number(num - 1)) // 4\n        return catalan",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import re\n\ndef find_adverbs(text):\n    # find all adverbs in the text\n    adverbs = re.findall(r'[aeiou]ly[aeiou]', text)\n\n    # sort the adverbs by their positions\n    adverbs.sort(key=lambda x: x.start())\n\n    # find the first adverb\n    adverb = adverbs[0]\n\n    # extract the adverb and its positions\n    positions = [adverb.start(), adverb.end()]\n\n    return adverb, positions",
        "test": "assert find_adverbs(\"The quick brown fox jumped over the lazy dog.\") == [('over', 12), ('over', 17), ('over', 22)]",
        "num_ids": 2336,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    max_heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -heapq.heappop(heap))\n    return [x for x in max_heap]",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def split_Arr(l, n):\n    # split list into n elements\n    first_part = l[:n]\n    # add the first part to the end\n    new_list = first_part + l[n:]\n    return new_list",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5])",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Find the smallest and largest numbers in the list\n    smallest = min(nums)\n    largest = max(nums)\n\n    # Find the difference between the two numbers\n    diff = largest - smallest\n\n    # Return the difference as an integer\n    return int(diff)",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 1397,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        squares.append(i*i)\n    return squares",
        "test": "assert perfect_squares(1, 1) == [1]",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import math\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n    '''\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return x, y",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 1285,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # create a copy of the list\n    tempList = newList.copy()\n    # swap the first and last elements\n    tempList[0], tempList[-1] = tempList[-1], tempList[0]\n    # return the modified list\n    return tempList",
        "test": "assert swap_List([10, 20, 30]) == [30, 20, 10]",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def binomial_Coeff(n, k):\n    # Initialize the variables\n    s = 1\n    coeff = 1\n    \n    # Compute the product of consecutive binomial coefficients\n    for i in range(1, n+1):\n        s *= i\n        coeff *= i\n    \n    # Add the first binomial coefficient\n    s += coeff\n    \n    # Return the sum of the product of consecutive binomial coefficients\n    return s",
        "test": "assert binomial_Coeff(5,2)==30 ",
        "num_ids": 1867,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'\\b0\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b')\n    return pattern.sub('', ip)",
        "test": "assert removezero_ip(\"192.168.1.1\") == \"192.168.1.1\"",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return 0\n\n    return abs(even_count - odd_count)",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5, 6]) == 0",
        "num_ids": 1868,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def min_Swaps(str1, str2):\n    # Convert string to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n\n    # Initialize count of swaps\n    count = 0\n\n    # Iterate over each character in the binary strings\n    for i in range(len(binary1)):\n        # If the binary numbers are different\n        if binary1[i]!= binary2[i]:\n            # Increment count of swaps\n            count += 1\n\n    # Return the count of swaps\n    return count",
        "test": "assert min_Swaps(\"1010\", \"1010\") == 0  # No swaps required",
        "num_ids": 2331,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Find the size in bytes of the given tuple\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n\n    return size",
        "test": "assert tuple_size([]) == 0 # test tuple size with empty tuple",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # sort both arrays in ascending order\n    arr1.sort()\n    arr2.sort()\n\n    # compare first k elements in both arrays\n    for i in range(k):\n        if arr1[i]!= arr2[i]:\n            return arr1[i]\n\n    # if k is equal to kth element in both arrays, return true\n    return True",
        "test": "assert find_kth([3, 5, 1, 2], [4, 6, 8, 9], 1) == 1",
        "num_ids": 2230,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    power = 0\n    # iterate through each digit of the number\n    while number > 0:\n        digit = number % 10\n        power += digit ** 3\n        number //= 10\n    # check if the number is equal to 5^3 + 10^3 + 5^3 = 153\n    if power == 153:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(1234567899) == False",
        "num_ids": 1558,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize sum and average variables\n    sum = 0\n    count = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, number + 1):\n        # add the current number to the sum\n        sum += i\n\n        # increment the count\n        count += 1\n\n    # calculate the average by dividing the sum by the count\n    average = sum / count\n\n    # return the sum and average\n    return sum, average",
        "test": "assert sum_average(10) == (55.0, 5.5)",
        "num_ids": 1296,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a Python function to find the first repeated character in a given string.\n    \"\"\"\n    str1 = str1.lower()  # convert string to lowercase to eliminate duplicates\n    char_count = {}  # dictionary to store character count\n    for char in str1:  # iterate through each character in the string\n        if char in char_count:  # if character has been counted before\n            char_count[char] += 1  # increment its count\n        else:  # if character has not been counted before\n            char_count[char] = 1  # set its count to 1\n    first_char = ''  # initialize the first character to an empty string\n    first_count = 0  # initialize the count of the first character to 0\n    for char, count in char_count.items():  # iterate through each character in the dictionary\n        if count > first_count:  # if count is greater than the count of the first character\n            first_char = char  # set the first character to the current character\n            first_count = count  # set the count of the first character to the current count\n    return first_char  # return the first character\n",
        "test": "assert first_repeated_char(\"abc\") == \"a\"",
        "num_ids": 1842,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        lucid_numbers.append(i)\n    return lucid_numbers",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 2503,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join(reversed(words))",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # loop through all numbers from 2 to num-1\n    for i in range(2, num):\n        # check if i is divisible by num\n        if num % i == 0:\n            # if i is divisible by num, then num is not a prime number\n            return False\n    # if no number in the loop divides num, then num is a prime number\n    return True",
        "test": "assert prime_num(10) == False",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"Hello, world!\", r\"(?<!hello)(?!world)(?!hello)(?!world)\") == (\"\", 0, 0)",
        "num_ids": 1895,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 11\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 17\n    elif n == 6:\n        return 19\n    elif n == 7:\n        return 23\n    elif n == 8:\n        return 29\n    elif n == 9:\n        return 31\n    elif n == 10:\n        return 37\n    elif n == 11:\n        return 41\n    elif n == 12:\n        return 43\n    elif n == 13:\n        return 47\n    elif n == 14:\n        return 53\n    elif n == 15:\n        return 59\n    elif n == 16:\n        return 61\n    elif n == 17:\n        return 67\n    elif n == 18:\n        return 71\n    elif n == 19:\n        return 73\n    elif n == 20:\n        return 79\n    else:\n        return 0",
        "test": "assert bell_Number(1) == 5",
        "num_ids": 2039,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove the kth element from the list\n    list1.pop(L-1)\n    # Return the list with the kth element removed\n    return list1",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 1747,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize maximum to negative infinity\n    max_val = float('-inf')\n\n    # Loop through the matrix and find the maximum value in then'th column\n    for i in range(len(test_list)):\n        col = [row[i] for row in test_list]\n        max_val = max(max_val, max(col))\n\n    # Return the maximum value\n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6]], 2) == 5",
        "num_ids": 2083,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result",
        "test": "assert merge([]) == []",
        "num_ids": 1679,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = [0] * len(test_list)\n    cumulative_sum[0] = test_list[0]\n\n    for i in range(1, len(test_list)):\n        cumulative_sum[i] = cumulative_sum[i-1] + test_list[i]\n\n    return cumulative_sum",
        "test": "assert cummulative_sum([1,2,3,4,5]) == [1, 3, 6, 10, 15]",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        if len(t) == 1:\n            averages.append(t[0])\n        else:\n            sum_of_weights = sum([x[1] for x in t])\n            averages.append(sum_of_weights / len(t))\n    return averages",
        "test": "assert average_tuple([]) == []",
        "num_ids": 2018,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return\n\n    # Perform the element wise modulo\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)",
        "test": "assert tuple_modulo((1,2,3), (4,5,6)) == (1,2,3)",
        "num_ids": 1887,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = steps // d # no of jumps required\n\n    return jumps",
        "test": "assert min_Jumps(10, 1) == 10, \"The number of jumps should be 10 for the given input (10, 1).\"",
        "num_ids": 2094,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def div_list(nums1, nums2):\n    # convert both lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # create a new list to store the result\n    result = []\n\n    # iterate through each element in nums1\n    for num in nums1:\n        # check if the num is in nums2\n        if num in nums2:\n            # if it is, add the num to the result\n            result.append(num)\n\n    # return the result\n    return result",
        "test": "assert div_list([1,2,3,4,5], [1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Remove all non-numeric characters from the string\n    test_str = ''.join(c for c in test_str if c.isdigit())\n    \n    # Find the position of the last digit in the string\n    last_digit_index = [i for i, c in enumerate(test_str) if c.isdigit()][-1]\n    \n    # Move all numbers to the end of the string\n    test_str = test_str[:last_digit_index] + test_str[last_digit_index:]\n    \n    # Return the modified string\n    return test_str",
        "test": "assert move_num('12345') == '12345'",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1]*n\n    max_len = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                if dp[i] > max_len:\n                    max_len = dp[i]\n\n    return max_len",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 3",
        "num_ids": 2967,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # If the list of arr1 has less than n elements, we need to pad it with n elements from arr2\n    if len(arr1) < n:\n        arr1 = arr1 + [0] * (n - len(arr1))\n    if len(arr2) < n:\n        arr2 = arr2 + [0] * (n - len(arr2))\n\n    # If the list of arr1 has more elements than arr2, we need to sort the lists in descending order\n    if len(arr1) > len(arr2):\n        arr1.sort(reverse=True)\n        arr2.sort()\n    else:\n        arr2.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (arr1[n//2-1] + arr2[n//2]) / 2\n    else:\n        median = arr1[n//2]\n\n    return median",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3",
        "num_ids": 2378,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 1343,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase\n    string = string.upper()\n    # Return True if the string is uppercase, False otherwise\n    return string == string.upper()",
        "test": "assert is_upper(\"HELLO\") == True",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a Python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    \n    # find the semi-circle\n    area = math.pi * r * r\n    \n    # find the largest triangle that can be inscribed in the semicircle\n    max_area = 0\n    for side in [r, r * math.sqrt(3)/2, r * math.sqrt(3) / 2]:\n        area = math.pi * side * side\n        if area > max_area:\n            max_area = area\n            \n    # return the largest triangle area\n    return max_area",
        "test": "assert triangle_area(5) == 78.53981633974483, \"The area of the largest triangle with sides of length 5 and radius 5 is incorrect. It should be 78.53981633974483.\"",
        "num_ids": 2246,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return \"Invalid input! Start index should be less than or equal to end index.\"\n    \n    diff = end - start + 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i + 1\n    \n    return \"All elements are present in the array.\"",
        "test": "assert find_First_Missing([1, 2, 3, 4, 5], 1) == 2",
        "num_ids": 1711,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        sub[0] = ele\n    adj = []\n    for i in range(len(sub)-1):\n        if sub[i+1][0]!= sub[i][0]:\n            adj.append((sub[i], sub[i+1]))\n    return adj",
        "test": "assert adjac((0, 0)) == []",
        "num_ids": 1858,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Initialize a variable to store the modified text\n    modified_text = ''\n\n    # Loop through each character in the given string\n    for char in text:\n        # If the character is a whitespace, replace it with an underscore\n        if char.isspace():\n            modified_text += '_'\n        # If the character is not a whitespace, leave it as it is\n        else:\n            modified_text += char\n\n    return modified_text",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through the given list and move all zeroes to the end of the result list\n    for num in num_list:\n        if num!= 0:\n            result.append(num)\n\n    # Return the result list\n    return result",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        xor += arr[i] ^ arr[i+1]\n    return xor",
        "test": "assert pair_xor_Sum([1, 2, 3, 4, 5], 2) == 4, \"The sum of xor of all pairs of numbers in the given list should be 4.\"",
        "num_ids": 1581,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using the heapq library.\n\n    :param iterable: The list to sort.\n    :return: The sorted list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "test": "assert heap_sort([5, 3, 2, 1, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the difference between the actual cost and the sale amount\n    difference = actual_cost - sale_amount\n    \n    # Check if the difference is greater than 0 (profit)\n    if difference > 0:\n        print(f\"The difference between the actual cost and sale amount is {difference}.\")\n        return True\n    \n    # Check if the difference is less than 0 (loss)\n    else:\n        print(f\"The difference between the actual cost and sale amount is {difference}.\")\n        return False",
        "test": "assert noprofit_noloss(100,50) == True",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return math.ceil(v/3.6)",
        "test": "assert wind_chill(20, 0) == 6",
        "num_ids": 1597,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the sum of the lengths of the names after removing those that start with a lowercase letter\n    sum_lengths = []\n    # Loop through each name in the sample list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, add the length of the name to the list of lengths\n            sum_lengths.append(len(name))\n    # Return the sum of the lengths of the names after removing those that start with a lowercase letter\n    return sum(sum_lengths)",
        "test": "assert sample_nam([\"hello\", \"WORLD\", \"hello123\", \"WORLD123\", \"helloWorld\"]) == 23",
        "num_ids": 2317,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Initialize the result string with empty value\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in items:\n        # Check if the character is a closing parenthesis\n        if char == \")\":\n            # Check if the last character was a closing parenthesis\n            if len(items) == 1 or items[len(items)-1]!= \")\":\n                # If not, add an opening parenthesis to the result string\n                result += \"(\"\n            else:\n                # If so, add a closing parenthesis to the result string\n                result += \")\"\n        # If not a closing parenthesis, add it to the result string\n        else:\n            result += char\n    \n    # Return the result string\n    return result",
        "test": "assert remove_parenthesis(\"\") == \"\"",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        sum = 1\n        count = 1\n        while count < n:\n            count += 1\n            if count % 2 == 1:\n                sum += count\n            else:\n                sum += count * 2\n        return sum",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Find all non-alphanumeric characters except at the start and end of the word\n    text = re.sub(r'[^a-zA-Z\\d]', '', text)\n    # Find all words in the text, excluding the start and end of the word\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Check if 'z' exists at the start and end of the word\n    if 'z' in words[0] or 'z' in words[-1]:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"Hello, world! This is the middle of a string.\") == False # asserted that 'z' is not present at the start or end of the word",
        "num_ids": 1929,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a new list to store the reversed elements\n    reversed_list = []\n    \n    # traverse the input list from the last element to the given position\n    for i in range(k-1, -1, -1):\n        reversed_list.append(input[i])\n    \n    # return the reversed list\n    return reversed_list",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1]",
        "num_ids": 2316,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 1, 'b': 2, 'c': 3}) == (1, 2, 3, {'a': 1, 'b': 2, 'c': 3})",
        "num_ids": 1543,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def dfs(row, col, path, total_cost):\n        total_cost += cost[row][col]\n        path.append((row, col))\n        if (row, col) == (N-1, N-1):\n            return total_cost / 2\n\n        left_path = dfs(row, col-1, path, total_cost)\n        right_path = dfs(row, col+1, path, total_cost)\n\n        return max(left_path, right_path)\n\n    N = len(cost)\n    max_avg = 0\n\n    for i in range(N):\n        for j in range(N):\n            avg = dfs(i, j, [], 0)\n            max_avg = max(max_avg, avg)\n\n    return max_avg\n",
        "test": "assert maxAverageOfPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 3.0",
        "num_ids": 4666,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students.append(student)\n    return filtered_students",
        "test": "assert filter_data({}, 160, 80) == []",
        "num_ids": 2410,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize counters\n    count1 = 0\n    count2 = 0\n    \n    # Iterate over the lists\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count1 += 1\n        if nums1[i]!= nums2[i]:\n            count2 += 1\n    \n    # Return the indices of the same values in the lists\n    return [i for i in range(len(nums1)) if nums1[i] == nums2[i] and count1 == count2]",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 0 # no pairs found",
        "num_ids": 2348,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit ** power\n        base //= 10\n        power -= 1\n    return result",
        "test": "assert power_base_sum(2, 0) == 0",
        "num_ids": 1760,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Extracts values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"[^\"]*\"', text1)",
        "test": "assert extract_quotation(\"\") == []",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n\n    n = len(test_tup)\n    result_tup = []\n    for i in range(n):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n\n    return result_tup",
        "test": "assert multiply_elements((1, 2, 3)) == (1 * 2, 1 * 3, 1 * 2, 1 * 3, 2 * 3, 2 * 2, 2 * 3)",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "test": "assert sum_list([],[]) == []",
        "num_ids": 1518,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Removes consecutive duplicates of a given list.\n    '''\n    unique_nums = sorted(list(set(nums)))\n    return unique_nums",
        "test": "assert consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius and height.\n    '''\n    return math.pi * r**2 * h",
        "test": "assert lateralsurface_cone(1,1) == 3.141592653589793",
        "num_ids": 2221,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'(\\s+|,\\s+|\\.s+)', r':', text)\n    return text",
        "test": "assert replace_specialchar('Hello World!') == 'Hello:World!'",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # Loop through the array and check if the current element is equal to the given number\n    for i in range(1, len(A)):\n        if A[i] == x:\n            # If the current element is equal to the given number, update the first occurrence index\n            first_occurrence_index = i\n            # Break out of the loop once we find the first occurrence\n            break\n\n    return first_occurrence_index",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2 # find_first_occurrence returns the index of the first occurrence of a given number in a sorted array",
        "num_ids": 1939,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Create a list of sublists of the given list\n    sublists = []\n    for i in range(len(arr)):\n        sublists.append(arr[i:i+1])\n\n    # Calculate the sum of products of all sublists\n    total_sum = 1\n    for sublist in sublists:\n        total_sum *= sum(sublist)\n\n    return total_sum",
        "test": "assert sum_Of_Subarray_Prod([1]) == 1",
        "num_ids": 2576,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def set_middle_bits(n):\n    # Finding the last bit of the number\n    last_bit = n & 1\n    \n    # Toggling the first and last bit\n    n ^= 1\n    n ^= last_bit\n    \n    return n",
        "test": "assert set_middle_bits(25) == 25 # Correct 25",
        "num_ids": 1931,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def left_insertion(a, x):\n    left, right = 0, len(a) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left",
        "test": "assert left_insertion([2], 2) == 0  # Test case 2",
        "num_ids": 1699,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if re.match(regex, string): # checking if the string matches the regex pattern\n        if string[0].lower() in vowels: # checking if the string starts with a vowel\n            return True\n    return False",
        "test": "assert check_str('hello') == False  # no vowel at beginning",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(10) == 3628800",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # defining the array of smallest triangular numbers\n    arr = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        arr.append(i*arr[-1])\n    # finding the index of smallest triangular number with n digits\n    index = arr.index(n)\n    return index",
        "test": "assert find_Index(1) == 0, \"The index of the smallest triangular number with 1 digit is not 0.\"",
        "num_ids": 2138,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Convert the tuple to a dictionary\n    dictionary = dict(zip(test_tup, test_tup[1:]))\n    return dictionary",
        "test": "assert tuple_to_dict((\"apple\", \"banana\", \"cherry\")) == {\"apple\": \"banana\", \"banana\": \"cherry\"}",
        "num_ids": 1968,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    if len(s)!= len(set(s)):\n        return False\n    for c in s:\n        if s.count(c)!= 1:\n            return False\n    return True",
        "test": "assert all_Characters_Same(\"a\") == True",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (0.5) * side ** 2",
        "test": "assert area_tetrahedron(1) == 0.5, \"The area of a tetrahedron with side length 1 is not 0.5\"",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]",
        "test": "assert rotate_right([1], 0) == [1]",
        "num_ids": 1862,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 898,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    # define a lambda function to filter the numbers\n    divisible_by_digit = lambda x: x % len(str(x)) == 0\n\n    # define a list to store the numbers in the range\n    numbers = []\n\n    # iterate over the range and filter the numbers\n    for num in range(startnum, endnum + 1):\n        if divisible_by_digit(num):\n            numbers.append(num)\n\n    return numbers",
        "test": "assert divisible_by_digits(10, 50) # should return [10, 12, 15, 17, 19]",
        "num_ids": 3445,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import math\n\ndef sector_area(r, a):\n    # Check if the angle is greater than 360 degrees\n    if a > math.radians(360):\n        return None\n    \n    # Calculate the area using the formula A = \u03c0r^2\n    area = math.pi * r ** 2\n    \n    return area",
        "test": "assert sector_area(5,math.pi/2) is not None, \"Sector area calculation for sector with radius 5 and angle pi/2 is incorrect.\"",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    l = [[0] * (p+1) for _ in range(m+1)]\n\n    # Fill the table l[][]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                l[i][j] = l[i-1][j-1] + 1\n            else:\n                l[i][j] = max(l[i-1][j], l[i][j-1])\n\n    # Find the length of the longest common subsequence\n    LCS = \"\"\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS = X[i-1] + LCS\n            i -= 1\n            j -= 1\n        elif l[i-1][j] > l[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return LCS",
        "test": "assert lcs_of_three(\"\", \"\", \"\") == \"\"",
        "num_ids": 3519,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # regular expression to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # use re.findall() to find all matches of the pattern in the string\n    matches = re.findall(pattern, str1)\n    # join the matches with spaces and return the result\n    return''.join(matches)\n",
        "test": "assert capital_words_spaces(\"The quick brown fox jumps over the lazy dog! \") == \"The quick brown fox jumps over the lazy dog!\"",
        "num_ids": 1542,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a list of strings of numbers numerically using the built-in sort() function.\n    '''\n    return sorted(nums_str)",
        "test": "assert sort_numeric_strings([\"5\", \"3\", \"2\", \"4\", \"1\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\"]",
        "num_ids": 1993,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Use the tuple packing syntax to add the elements of the tuple to the list\n    test_list.extend(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([], (1, 2, 3)) == [1, 2, 3]",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or arr[i] > arr[i-1]:\n        return True\n    else:\n        return False",
        "test": "assert check_min_heap_helper([5, 3, 8, 1, 7], 1) == False",
        "num_ids": 2068,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        # initialize variables\n        prev_num = 0\n        curr_num = 1\n        next_num = 1\n        i = 3\n\n        while i <= n:\n            # calculate the next number\n            next_num = prev_num + curr_num\n            # update variables\n            prev_num = curr_num\n            curr_num = next_num\n            i += 1\n\n        return curr_num",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def min_k(test_list, K):\n    min_list = []\n    for i in test_list:\n        if len(min_list) < K:\n            min_list.append(i)\n    return min_list",
        "test": "assert min_k([1, 2, 3], 3) == [1, 2, 3]",
        "num_ids": 2048,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def extract_index_list(l1, l2, l3):\n    # create a list to store the common elements\n    common_elements = []\n\n    # iterate over each element in l1 and l2\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2 and l2[i] in l3:\n            # if an element appears in both lists at the same index, add it to the common_elements list\n            common_elements.append(l1[i])\n\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 2269,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'[ab]{1,}'\n    matches = re.findall(pattern, text)\n    if len(matches) == 1:\n        return matches[0]\n    else:\n        return None",
        "test": "assert text_match_zero_one(\"ababa\") # True",
        "num_ids": 3312,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    This function takes a list of strings as input and returns the number of pairs of reverse strings.\n    '''\n\n    # Initialize two pointers for two pointers\n    left, right = 0, len(test_list) - 1\n\n    # Initialize a counter variable to keep track of the number of pairs\n    count = 0\n\n    # While the left pointer is less than the right pointer\n    while left < right:\n\n        # If the characters at the left and right pointers are same, increment the count and move both pointers to the right\n        if test_list[left] == test_list[right]:\n            count += 1\n            left += 1\n            right -= 1\n\n        # If the characters at the left and right pointers are different, move both pointers to the left\n        else:\n            left += 1\n\n    # Return the count of pairs of reverse strings\n    return count",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 1980,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the count of each list within the original list\n    count_dict = {}\n    # Iterate through the lists in the original list\n    for lst in list1:\n        # If the list is already present in the dictionary, increment its count\n        if lst in count_dict:\n            count_dict[lst] += 1\n        # If the list is not present in the dictionary, add it with a count of 1\n        else:\n            count_dict[lst] = 1\n    # Return the dictionary with the count of each list in the original list\n    return count_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2425,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        first_decimal = num.split('.')[0]\n        second_decimal = num.split('.')[1]\n        if len(first_decimal) > 0 and len(second_decimal) > 0:\n            first_decimal = int(first_decimal)\n            second_decimal = int(second_decimal)\n            if first_decimal % 1!= 0 or second_decimal % 1!= 0:\n                return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False",
        "test": "assert is_decimal(\"12345678901234567890\") == False #not a decimal number with 12 digits",
        "num_ids": 1631,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Check if all elements in the list have frequency 1\n    if all(freq_dict[num] == 1 for num in arr):\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 3, 4, 5, 5]) == False",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        for i in range(1, 13):\n            if monthnum == i:\n                return days_in_month[i-1] > 0\n        return False",
        "test": "assert check_monthnumber_number(13) == False",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    \"\"\"\n    # Initialize min_diff as the first element of the array\n    min_diff = arr[0]\n\n    # Loop through all the elements of the array\n    for i in range(1, n):\n        # If the difference between the current element and the previous element is smaller than the current min_diff,\n        # update min_diff\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n\n    # Return the minimum difference found\n    return min_diff",
        "test": "assert find_min_diff([1, 2, 3, 4, 5], 4) == 1",
        "num_ids": 2105,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import math\n\ndef is_polite(n):\n    if n < 0:\n        return False\n    elif n == 0:\n        return False\n    else:\n        i = 2\n        while i <= n:\n            if math.gcd(i, n) == 1:\n                return True\n            i += 1\n        return False",
        "test": "assert is_polite(0) == False  # nth polite number is not defined for negative numbers",
        "num_ids": 1668,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def pair_wise(lst):\n    '''\n    Return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 1722,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2",
        "num_ids": 1407,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    for item in li2:\n        if item not in li1:\n            diff.append(item)\n    return diff",
        "test": "assert Diff([],[]) == []",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def odd_num_sum(n):\n    # initializing the sum variable to 0\n    sum = 0\n    # looping through all the odd natural numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # calculating the fourth power of the current odd natural number\n        sum += (i**4)\n    return sum",
        "test": "assert odd_num_sum(2) == 6, \"odd_num_sum(2) should return 6\"",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack[-1]!= '(':\n                return False\n            stack.pop()\n    return len(stack) == 0",
        "test": "assert check_expression('abc') == True",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # split the string into words\n    words = test_str.split()\n\n    # create an empty string to store the unique words\n    unique_words = \"\"\n\n    # iterate over each word in the list of words\n    for word in words:\n\n        # check if the length of the word is less than or equal to k\n        if len(word) <= K:\n\n            # add the word to the unique_words string\n            unique_words += word + \" \"\n\n    # remove the trailing space and return the unique_words string\n    return unique_words.rstrip()",
        "test": "assert remove_length(\"hello world\", 5) == \"hello world\"",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None",
        "test": "assert occurance_substring(\"hello world\", \"llo\") is not None",
        "num_ids": 1442,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 1:\n            return False\n    return True",
        "test": "assert odd_position([1,3,5,7,9]) == False, \"The odd position function returns False for the input [1,3,5,7,9]\"",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    i = 0\n\n    while i < len(test_str):\n        if test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n        i += 1\n\n    return count",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the unique elements in the list\n    unique_elements = set(arr)\n\n    # Initialize the sum variable to 0\n    sum_ = 0\n\n    # Loop through the unique elements and add them to the sum\n    for element in unique_elements:\n        sum_ += element\n\n    # Return the sum\n    return sum_",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1785,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    for element in list1:\n        if element not in sublist:\n            sublist.append(element)\n    return sublist\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 2061,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def unique_sublists(list1):\n    sublists = {}\n    for item in list1:\n        if item not in sublists:\n            sublists[item] = 1\n        else:\n            sublists[item] += 1\n    return sublists",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 2559,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set to store the combinations\n    comb_set = set()\n\n    # iterate through the tuples in the list\n    for tup in test_list:\n        # check if the current tuple has at least two elements\n        if len(tup) < 2:\n            continue\n\n        # check if the sum of the current tuple is greater than all the previous sums\n        if tup[0] + tup[1] > sum(tup_list):\n            continue\n\n        # check if the current tuple has already been added to the set\n        if tup in comb_set:\n            continue\n\n        # add the current tuple to the set\n        comb_set.add(tup)\n\n    # create a list of tuples from the set\n    comb_list = list(comb_set)\n\n    return comb_list",
        "test": "assert find_combinations([]) == []",
        "num_ids": 4173,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(10) == 4",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    else:\n        odd_sum = 0\n        for i in range(n):\n            if arr[i] % 2!= 0 and i > 0 and arr[i] == arr[i-1]:\n                continue\n            else:\n                odd_sum += arr[i]\n        return odd_sum",
        "test": "assert odd_length_sum([1, 2, 3, 4]) == 10",
        "num_ids": 1901,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r < 0 or r > 255 or g < 0 or g > 255 or b < 0 or b > 255:\n        raise ValueError(\"Invalid color value.\")\n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = delta\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    elif cmax == b:\n        h = (r - g) / delta + 4\n    h = round(h * 60)\n    if h < 0:\n        h += 360\n    s = delta / max(cmax, 1)\n    v = delta / max(cmax, v)\n    return h, s, v",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)",
        "num_ids": 4118,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n\n    # create a new list to store even numbers and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n\n    # find the product of even and odd numbers and return the result\n    result = 1\n    for num in even_list:\n        result *= num\n    for num in odd_list:\n        result *= num\n\n    return result",
        "test": "assert mul_even_odd([1,2,3,4,5]) == 120",
        "num_ids": 1653,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert a tuple string to an integer tuple.\n\n    Input:\n    test_str: str\n        A string containing a tuple separated by commas.\n\n    Output:\n    int_tuple: tuple\n        A tuple containing the integers from the string.\n    '''\n\n    # Split the string by commas and convert each element to an integer\n    int_tuple = tuple(map(int, test_str.split(',')))\n\n    # Return the integer tuple\n    return int_tuple",
        "test": "assert tuple_str_int(\"123\") == (123,)",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low",
        "test": "assert right_insertion([], 5) == 0",
        "num_ids": 1380,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"aaaab\") == True",
        "num_ids": 1948,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])",
        "test": "assert new_tuple([\"apple\", \"banana\"], \"orange\") == (\"apple\", \"banana\", \"orange\")",
        "num_ids": 951,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == 0:\n        return False\n    else:\n        return True",
        "test": "assert even_position([1, 3, 5, 7, 9]) == False # False",
        "num_ids": 1370,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.append(item[0])\n            remove_nested(item[1:])\n        else:\n            result.append(item)\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for lst in input_list:\n        count += 1\n    return count",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6]]) == 2",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last(arr, x):\n    '''\n    Find the last position of an element in a sorted array.\n    '''\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n            break\n    return last_index",
        "test": "assert last([1,2,3,4,5],5) == 4",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb(\"hello world!\") == False",
        "num_ids": 1259,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 1017,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, 0, -2): \n        if i % 2!= 0: \n            sum += i \n    return sum ",
        "test": "assert sum_odd(-2) == 0",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "test": "assert _sum([]) == 0, \"Empty array should have a sum of 0\"",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def left_rotate(n, d):\n    if d == 0:\n        return n\n    else:\n        # Initialize d as 32 - d\n        d = 32 - d\n\n        # Check if d is greater than n\n        if d > n:\n            # If it is, return the remaining bits\n            return n & (n - 1)\n\n        # If d is less than n, rotate left and return the rotated bits\n        return n ^ (1 << d)",
        "test": "assert left_rotate(0, 0) == 0",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)",
        "test": "assert remove_all_spaces(\"\") == \"\"",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 2\n    else:\n        count += 3\n    return count\n\nprint(test_three_equal(3, 2, 3)) # Output: 4",
        "test": "assert test_three_equal(1,1,1) == 1",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    rotations = 0\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            rotations += 1\n    return rotations",
        "test": "assert count_rotation([4, 1, 5, 2, 3]) == 2",
        "num_ids": 1619,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return int(n**0.5)**2 == n",
        "test": "assert is_perfect_square(12) == False",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0",
        "test": "assert is_product_even([2, 3, 4, 5]) == True",
        "num_ids": 1304,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list",
        "test": "assert max_sum_list([[1, -2, 3], [-1, -2, 3], [2, 3, -4]]) == [1, -2, 3]",
        "num_ids": 2079,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run",
        "test": "assert max_run_uppercase(\"HELLO, WORLD!\") == 5",
        "num_ids": 1659,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1, \"The first odd number in the list is not 1\"",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[0:i] or test_tup[i]!= test_tup[i+1]:\n            return False\n    return True",
        "test": "assert check_K([1, 2, 3], 2) == False",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Parameters:\n    test_tup1: a tuple of two elements (a, b)\n    test_tup2: a tuple of two elements (c, d)\n\n    Returns:\n    A boolean indicating whether each element of the second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            smaller = False\n            break\n    return smaller\n",
        "test": "assert check_smaller((1, 2, 3), (2, 1, 4)) == False",
        "num_ids": 1443,
        "indeed": false
    }
]