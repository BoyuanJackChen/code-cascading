[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements",
        "test": "assert similar_elements(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date'))",
        "num_ids": 1822,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n <= 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert is_not_prime(3) == True, \"3 is a prime number\"",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return hq.nlargest(n, nums)",
        "test": "assert heap_queue_largest([], 0) == []",
        "num_ids": 2381,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 32,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x): \n    \"\"\"\n    Write a Python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Check if x is a positive integer\n    if x < 0:\n        return False\n    \n    # Initialize the two numbers\n    num1 = x\n    num2 = x // 2\n    \n    # Loop until one of the numbers is 0\n    while num1!= num2: \n        # If the difference between the two numbers is 1, then the two numbers differ at one bit position\n        if num1!= num1:\n            # If the difference between the two numbers is 1, then the two numbers differ at one bit position\n            return True\n        # If the difference between the two numbers is 0, then the two numbers are equal\n        elif num2!= num2:\n            # If the difference between the two numbers is 0, then the two numbers are equal\n            return False\n        # Otherwise, decrement the number that is closer to 0\n        elif num1 > num2:\n            num1 //= 2\n        else:\n            num2 //= 2\n    \n    # If all the numbers are 0, then the two numbers are equal\n    return True\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 1615,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # define pattern for finding words with 4 or more characters\n    pattern = r'\\b\\w{3,}\\b'\n    \n    # use re.findall() to find all words in the text\n    words = re.findall(pattern, text)\n    \n    return words",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1667,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([]) == []",
        "num_ids": 1628,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def find_Rotations(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                count += 1\n    return count\n",
        "test": "assert find_Rotations(\"\") == 0, \"Test case 1: Empty string\"",
        "num_ids": 2287,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def remove_Occ(s,ch):\n    if s.count(ch) >= 2:\n        return s[:-1] + s[-1:]\n    else:\n        return s",
        "test": "assert remove_Occ(\"hello world\", \"z\") == \"hello world\"",
        "num_ids": 1643,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def sort_matrix(M):\n    # Initialize a list to store the indices of the rows in ascending order of sum of rows\n    indices = [i for i in range(len(M))]\n    \n    # Sort the list in ascending order using the bubble sort algorithm\n    n = len(indices)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[indices[j]][indices[j+1]] < M[indices[j]][indices[j+1]]:\n                M[indices[j]], M[indices[j+1]] = M[indices[j+1]], M[indices[j]]\n    \n    # Return the sorted matrix\n    return M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 3951,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h",
        "test": "assert find_Volume(0, 0, 0) == 0.0",
        "num_ids": 1058,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<=[a-z])(?=_)')\n    return pattern.search(text) is not None",
        "test": "assert text_lowercase_underscore('1234567890') == False",
        "num_ids": 1619,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def str_to_list(string): \n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower() # convert string to lowercase for faster comparison\n    common_chars = [c for c in string if c in string and c not in string[string.find(c):]] # find common characters\n    return common_chars",
        "test": "assert str_to_list(\"a string without any characters\") == []",
        "num_ids": 3024,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements in the array\n    unique_elements = set(arraynums)\n    # Check if there are any duplicate elements in the array\n    if len(unique_elements) < len(arraynums):\n        return True\n    else:\n        return False",
        "test": "assert test_duplicate([1,2,3,3,4,5]) == True",
        "num_ids": 1969,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def is_woodall(x): \n    '''\n    Check if a number is a woodball number.\n    '''\n\n    # convert number to string\n    num_str = str(x)\n\n    # check if the string length is odd\n    if len(num_str) % 2 == 1:\n        return False\n\n    # loop through the string\n    for i in range(len(num_str)):\n        # check if the character is a digit\n        if not num_str[i].isdigit():\n            return False\n\n    return True",
        "test": "assert is_woodall(7) is False",
        "num_ids": 2138,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def rev(num):\n    # Reverse the given number\n    num = str(num)[::-1]\n    # Check if the given number is one less than twice its reverse\n    if int(num) < 2 * len(num):\n        return True\n    else:\n        return False",
        "test": "assert rev(332) == False",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def find_Max_Num(arr):\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if int(arr[i]) > int(max_num):\n            max_num = arr[i]\n    return max_num",
        "test": "assert find_Max_Num([1, 11, 22, 33, 44]) == 44",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def opposite_Signs(x, y):\n    # Check if x is negative or positive\n    if x < 0:\n        x = -x\n    if y < 0:\n        y = -y\n    \n    # Check if x is equal to y or not\n    if x == y:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-5, -2) == False",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n % 2 == 0:\n        num = n // 2 + 1\n        for i in range(1, num):\n            if n % (i*i) == 0:\n                return True\n        return False\n    else:\n        num = n + 1\n        for i in range(1, num):\n            if n % (i*i) == 0:\n                return True\n        return False",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1855,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # count the number of characters in the string\n    n = len(s)\n    \n    # count the number of possible substrings\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            # check if the substring has the sum of digits equal to its length\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    \n    return count",
        "test": "assert count_Substrings(\"\") == 0 # should return 0",
        "num_ids": 1972,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def smallest_num(xs):\n    '''\n    Find the smallest number in a list of numbers.\n    '''\n    smallest = float('inf')\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1, \"smallest number in a list is 1\"",
        "num_ids": 1495,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def max_difference(test_list):\n    '''\n    Find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    min_list = test_list\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(min_list[i] - min_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff",
        "test": "assert max_difference([1]) == 0",
        "num_ids": 3078,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sorts a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([]) == []",
        "num_ids": 2145,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Flatten a list of integers and calculate the sum.\n    '''\n    flat_list = [int(i) for i in data_list]\n    total = sum(flat_list)\n    return total",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([]) == 0",
        "num_ids": 1427,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def bell_number(n):\n    '''\n    This function uses recursion to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n        n (int): the number of Bell numbers\n\n    Returns:\n        int: the number of ways to partition the set of Bell numbers\n    '''\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n\n    return bell_number(n-1) + bell_number(n-2)",
        "test": "assert bell_number(1) == 1",
        "num_ids": 2111,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def is_Monotonic(A):\n    A.sort()\n    is_monotonic = True\n    for i in range(len(A) - 1):\n        if A[i] >= A[i + 1]:\n            is_monotonic = False\n            break\n    return is_monotonic",
        "test": "assert is_Monotonic([5, 2, 8, 9, 10, 10]) == False",
        "num_ids": 1845,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True",
        "test": "assert is_sublist([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 1764,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(tuple(Input)) == len(set(Input))",
        "test": "assert find_equal_tuple([('apple', 'banana', 'cherry'), ('banana', 'apple', 'cherry'), ('orange', 'banana', 'grape')]) == True",
        "num_ids": 1975,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    for i in range(n):\n        key = nums[i]\n        j = i - 1\n\n        while j >= 0 and nums[j] > key:\n            nums[j + 1] = nums[j]\n            j -= 1\n\n        nums[j + 1] = key\n\n    return nums",
        "test": "assert comb_sort([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]",
        "num_ids": 2763,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 2 == 0:\n        # If the number is even, the number can be represented as the difference of two squares\n        return True\n    else:\n        # If the number is odd, the number cannot be represented as the difference of two squares\n        return False",
        "test": "assert dif_Square(5) is False",
        "num_ids": 1737,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def is_samepatterns(colors, patterns):\n    for pattern in patterns:\n        if not pattern in colors:\n            return False\n    return True",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\"], [\"red\", \"blue\", \"green\", \"yellow\"]) == False",
        "num_ids": 1973,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if any(test_list[i][j] % K == 0 for j in range(len(test_list[i]))):\n            result.append((test_list[i]))\n    return result",
        "test": "assert find_tuples([], 3) == []",
        "num_ids": 2389,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0",
        "test": "assert is_Diff(22) == True",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def word_len(s):\n    if s.isalnum():\n        # check if the string only contains alphabetic characters\n        return len(s)\n    else:\n        # check if the string contains any special characters\n        return False",
        "test": "assert word_len(\"\") == 0",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 3 * 2 * 2\n    elif n == 5:\n        return 15\n    elif n == 6:\n        return 12 * 5 * 5\n    elif n == 7:\n        return 210\n    elif n == 8:\n        return 1024\n    elif n == 9:\n        return 174 * 17 * 17\n    elif n == 10:\n        return 300 * 5 * 5\n    elif n == 11:\n        return 550 * 15 * 15\n    elif n == 12:\n        return 85 * 30 * 30\n    elif n == 13:\n        return 1410 * 25 * 25\n    elif n == 14:\n        return 256 * 8 * 8\n    elif n == 15:\n        return 64 * 80 * 80\n    elif n == 16:\n        return 210 * 60 * 60\n    elif n == 17:\n        return 420 * 120 * 120\n    elif n == 18:\n        return 96 * 24 * 24\n    elif n == 19:\n        return 1800 * 50 * 50\n    elif n == 20:\n        return 360 * 120 * 120\n    elif n == 21:\n        return 720 * 240 * 240\n    elif n == 22:\n        return 144 * 48 * 48\n    elif n == 23:\n        return 288 * 96 * 96\n    elif n == 24:\n        return 64 * 16 * 16\n    elif n == 25:\n        return 128 * 32 * 32\n    elif n == 26:\n        return 32 * 128 * 32\n    elif n == 27:\n        return 64 * 256 * 256\n    elif n == 28:\n        return 128 * 64 * 64\n    elif n == 29:\n        return 256 * 128 * 128\n    elif n == 30:\n        return 512 * 128 * 128\n    elif n == 31:\n        return 1024 * 256 * 256\n    elif n == 32:\n        return 2048 * 512 * 512\n    elif n == 33:\n        return 4096 * 1024 * 1024\n    elif n == 34:\n        return 8192 * 2048 * 2048\n    elif n == 35:\n        return 16384 * 4096 * 4096\n    elif n == 36:\n        return 32768 * 8192 * 8192\n    elif n == 37:\n        return 65536 * 16384 * 16384\n    elif n == 38:\n        return 131072 * 32768 * 32768\n    elif n == 39:\n        return 262144 * 65536 * 65536\n    elif n == 40:\n        return 524288 * 131072 * 131072\n    elif n == 41:\n        return 1048576 * 262144 * 262144\n    elif n == 42:\n        return 2097152 * 524288 * 524288\n    elif n == 43:\n        return 4194304 * 1048576 * 10",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 3835,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculates the volume of a sphere using the formula:\n    V = pi * r^3\n    '''\n    return math.pi * r**3",
        "test": "assert volume_sphere(1) == 3.141592653589793",
        "num_ids": 2443,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def get_Char(strr):\n    # Find the length of the string\n    length = len(strr)\n\n    # Initialize an empty dictionary to store the ASCII value of the characters\n    char_ascii = {}\n\n    # Iterate over each character of the string\n    for char in strr:\n        # If the character is already in the dictionary, increment its value\n        if char in char_ascii:\n            char_ascii[char] += 1\n        # Otherwise, add the character to the dictionary with its ASCII value\n        else:\n            char_ascii[char] = 1\n\n    # Find the maximum value in the dictionary\n    max_value = max(char_ascii.values())\n\n    # Find the character with the maximum value\n    max_char = None\n    for char, value in char_ascii.items():\n        if value == max_value:\n            max_char = char\n            break\n\n    return max_char",
        "test": "assert get_Char(\"programming\") == \"r\"",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def sequence(n):\n    a, b = 0, 1\n    for i in range(n):\n        print(b)\n        a, b = b, a + b\n    return a",
        "test": "assert sequence(1) == 1, \"The second number in the sequence is not equal to 1.\"",
        "num_ids": 2499,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * r**2",
        "test": "assert surfacearea_sphere(1) == 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381962662119060847868535276366254413496037855217410156836842756427422550336357660111542287067982601699603490673527343517058593954100472442243221595903323415726025892524559400712877262041447234167759003358154900505995909833190375606326889241159718461573807260358955296881251105289607566004914612056119652166812188320258204064888071391508594672976555972725462842019536789129979006028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819626621190608478685352763662544134960378552174101568368427564274225503363576601115422870679826016996034906735273435170585939541004724422432215959033234157260258925245594007128772620414472341677590033581549005059959098331903756063268892411597184615738072603589552968812511052896",
        "num_ids": 2919,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def centered_hexagonal_number(n):\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Calculate the number of rows and columns based on the input value\n    rows = int(n ** 0.5) + 1\n    columns = n\n\n    # Initialize the hexagonal number list\n    hex_numbers = []\n\n    # Add each row of the hexagonal numbers\n    for i in range(1, rows + 1):\n        # Initialize the row of hexagonal numbers\n        row = [0] * columns\n\n        # Add the first element of the row\n        row[0] = 1\n\n        # Calculate the rest of the elements in the row\n        for j in range(1, columns):\n            if j == 1:\n                row[j] = 1\n            else:\n                row[j] = (2 * i - 1) * row[j - 1] + row[j - 2]\n\n        hex_numbers.append(row)\n\n    # Return the nth centered hexagonal number\n    return hex_numbers[rows // 2][columns // 2]\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 2719,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 3249,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Returns a dictionary where the keys are the elements of lst and the values are their frequency in lst.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return freq",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1629,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        min_diff = float('inf')\n        min_num = 0\n        for i in range(2, N+1):\n            diff = abs(i - N)\n            if diff < min_diff:\n                min_diff = diff\n                min_num = i\n        return min_num",
        "test": "assert closest_num(10) == 10",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n",
        "test": "assert len_log([\"apple\", \"banana\", \"cherry\"]) == 6",
        "num_ids": 1624,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"hello world\", \"x\") == False",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Define an array of primes up to 20\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n\n    # Check if the number is divisible by any of the primes\n    for prime in primes:\n        if n % prime == 0:\n            return False\n\n    # If the number is not divisible by any of the primes, it is undulating\n    return True",
        "test": "assert is_undulating(123) == False",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "test": "assert power(2,3) == 8",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    \n    result = test_list[0]\n    for tup in test_list[1:]:\n        if tup[1] < result[1]:\n            result = tup\n    return result",
        "test": "assert index_minimum([('a', 5), ('b', 10), ('c', 20)]) == ('a', 5)",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length",
        "test": "assert Find_Min_Length([[[1]]]) == 1",
        "num_ids": 2611,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initializing a variable to store the count of divisors\n    count = 0\n    # initializing a variable to store the maximum number of divisors\n    max_count = 0\n    # using a for loop to iterate from 1 to n\n    for i in range(1, n+1):\n        # checking if i is divisible by any number from 1 to i-1\n        if n % i == 0:\n            # incrementing the count of divisors\n            count += 1\n            # keeping track of the maximum count if its greater\n            if count > max_count:\n                max_count = count\n    # returning the count of divisors\n    return count",
        "test": "assert divisor(12) == 6, \"The function should return the correct value for n=12\"",
        "num_ids": 1328,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def frequency_lists(list1):\n    '''\n    Find frequency of each element in a flattened list of lists.\n\n    Parameters:\n    list1 (list): A list of lists, where each inner list contains elements of the same type.\n\n    Returns:\n    dict: A dictionary with the frequency of each element in the flattened list of lists.\n    '''\n    freq = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq:\n                freq[elem] += 1\n            else:\n                freq[elem] = 1\n    return freq",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 2351,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in range(len(numbers)):\n        total *= numbers[i]\n    return total / len(numbers)",
        "test": "assert multiply_num([0, 0]) == 0",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def decimal_to_binary(n): \n    '''\n    Convert a decimal number to its binary equivalent as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 4363,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize the smallest palindrome as the input number\n    smallest_palindrome = num\n\n    # Check all possible next palindromes from the smallest palindrome\n    for i in range(2, int(num**0.5) + 1):\n        # Check if the current palindrome is a palindrome itself\n        if num % i == 0:\n            # Check if the current palindrome is greater than the smallest palindrome\n            if i > smallest_palindrome:\n                smallest_palindrome = i\n\n    # Return the next smallest palindrome\n    return smallest_palindrome",
        "test": "assert next_smallest_palindrome(1111111111) == 1111111111",
        "num_ids": 2733,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def kth_element(arr, k):\n    '''\n    Find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n + 1:\n        return arr[-1]\n    else:\n        left = 1\n        right = n\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1",
        "test": "assert kth_element([1, 2, 3, 4, 5], 5) == 5  # This will pass because the expected output is 5",
        "num_ids": 2055,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert snake case string to camel case\n    words = word.split('_')\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i][0].upper() + words[i][1:]\n    return camel_case",
        "test": "assert snake_to_camel(\"MixedCaseString\") == \"MixedCaseString\"",
        "num_ids": 1374,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m",
        "test": "assert eulerian_num(2, 1) == 2",
        "num_ids": 2238,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = []\n    for i in input_list:\n        sublist.append(i)\n    sublist.sort()\n    return sublist",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 2693,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count",
        "test": "assert count([True, True, False, False, True]) == 3",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1464,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # Convert the lists into sorted lists using heapq module\n    num1_sorted = sorted(num1, key=lambda x:x)\n    num2_sorted = sorted(num2, key=lambda x:x)\n    num3_sorted = sorted(num3, key=lambda x:x)\n\n    # Merge the sorted lists into a single sorted list\n    merged_sorted = num1_sorted + num2_sorted + num3_sorted\n\n    # Return the merged sorted list\n    return merged_sorted",
        "test": "assert merge_sorted_list([],[],[]) == []",
        "num_ids": 3430,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def odd_Equivalent(s, n):\n    # rotate s n times to get odd strings\n    odd_rotated_s = s[::2]\n    # count the number of odd strings\n    count = 0\n    for i in range(len(odd_rotated_s)):\n        if int(odd_rotated_s[i]) % 2 == 1:\n            count += 1\n    return count",
        "test": "assert odd_Equivalent(\"11010\",3) == 1",
        "num_ids": 1933,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize variables to hold common elements\n    common = []\n    \n    # iterate over nested lists\n    for lst in nestedlist:\n        # iterate over elements in list\n        for elem in lst:\n            # if element is in common, add it to the list of common elements\n            if elem in common:\n                common.append(elem)\n                \n    # return the list of common elements\n    return common",
        "test": "assert common_in_nested_lists([]) == []",
        "num_ids": 2571,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # check if the string is a valid integer\n    try:\n        int_value = int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"abc\") == False",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    all_empty = True\n    for d in list1:\n        if not d:\n            all_empty = False\n            break\n    return all_empty\n",
        "test": "assert empty_dit([]) == True",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)",
        "test": "assert tuple_to_int((1, 2, 3, 4, 5)) == 15",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(item) for sublist in test_list for item in sublist]",
        "test": "assert list_to_float([]) == []",
        "num_ids": 2259,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1232,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for num in arr:\n        if num not in seen:\n            seen[num] = True\n        else:\n            return num\n    return None",
        "test": "assert search([1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 5, 5, 5]) == 1",
        "num_ids": 2253,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def max_product_tuple(list1):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    max_product = float('-inf')\n    max_pair = None\n\n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two numbers\n            product = list1[i] * list1[j]\n\n            # compare the product to the current maximum product and update if necessary\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i], list1[j])\n\n    # return the maximum product tuple\n    return max_pair",
        "test": "assert max_product_tuple([1, 2, 3]) == (6, 9)",
        "num_ids": 3179,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    sum_of_numbers = 0\n\n    for num in range(1, limit+1):\n        is_amicable = True\n\n        for i in range(1, num):\n            if num % i == 0:\n                is_amicable = False\n                break\n\n        if is_amicable:\n            amicable_numbers.append(num)\n            sum_of_numbers += num\n\n    return sum_of_numbers",
        "test": "assert amicable_numbers_sum(1) == 1",
        "num_ids": 3316,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a)\n    return angle",
        "test": "assert angle_complex(0,0) == 0",
        "num_ids": 1780,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables\n    max_length = 0\n    count_0s = 0\n    count_1s = 0\n\n    # Loop through each character in the string\n    for char in string:\n\n        # If the character is '0', increment the count of '0s'\n        if char == '0':\n            count_0s += 1\n\n        # If the character is '1', increment the count of '1s'\n        elif char == '1':\n            count_1s += 1\n\n        # If the count of '0s' and '1s' are equal, then we have found the maximum difference\n        if count_0s == count_1s:\n            max_length = max(max_length, count_0s)\n\n    return max_length",
        "test": "assert find_length(\"\") == 0",
        "num_ids": 4408,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to calculate the sum of common divisors\n    def sum_of_common_divisors(a,b):\n        if b == 0:\n            return a\n        else:\n            return sum_of_common_divisors(b,a%b)\n    \n    # Finding the sum of common divisors of a and b\n    result = sum_of_common_divisors(a, b)\n    \n    # Returning the sum\n    return result",
        "test": "assert sum(10,10) == 10",
        "num_ids": 2006,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def multiply_int(x, y):\n    return x * y",
        "test": "assert multiply_int(3, 5) == 15",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the list of words into a list of words and a list of lengths\n    words = str.split()\n    lengths = [len(word) for word in words]\n    \n    # Sort the list of lengths in descending order and find the first n elements\n    sorted_indices = sorted(range(len(lengths)), key=lambda i: lengths[i], reverse=True)[:n]\n    \n    # Convert the sorted indices to a list of words and return the resulting list\n    return [words[index] for index in sorted_indices]",
        "test": "assert long_words(3, 'kitty') == ['kitty']",
        "num_ids": 2695,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check for identity matrix\n    if n == 1:\n        return True\n    \n    # Check for columns and rows\n    if n == 2:\n        for i in range(n):\n            if my_matrix[i][i]!= my_matrix[i][n-i-1]:\n                return False\n        return True\n    \n    # Check for diagonal\n    for i in range(n):\n        if my_matrix[i][i]!= my_matrix[n-i-1][i]:\n            return False\n    return True",
        "test": "assert magic_square_test([[1,2,3],[8,9,4],[5,6,7]]) == False",
        "num_ids": 2749,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in count_dict.items():\n        if count > max_count or (count == max_count and num > max_num):\n            max_num = num\n            max_count = count\n    return max_num",
        "test": "assert max_occurrences([1, 2, 3, 2, 2, 3]) == 2",
        "num_ids": 2064,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'} # list of vowels\n    reversed_str = ''\n    \n    for char in str1:\n        if char in vowels:\n            # if char is a vowel, add it to the reversed string and remove it from the original string\n            reversed_str += char\n            str1 = str1.replace(char, '')\n            \n    return reversed_str",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 1640,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)",
        "test": "assert tup_string(('a', 'b', 'c', 'd', 'e')) == 'abcd'",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def sum_negativenum(nums):\n    # Initialize a variable to store the sum of negative numbers\n    total = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the total\n        if num < 0:\n            total += num\n    \n    # Return the total sum of negative numbers\n    return total",
        "test": "assert sum_negativenum([]) == 0",
        "num_ids": 1635,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def hexagonal_num(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * hexagonal_num(n // 2)\n    else:\n        return 3 * hexagonal_num(n - 1) + 1",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 2594,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        nums: array of integers\n\n    Returns:\n        float: ratio of zeroes to non-zeroes in nums\n    \"\"\"\n    # Create an array of zeros to store the count of zeros\n    zeros = array('i')\n    # Initialize a counter to keep track of the total number of non-zero elements\n    nonzero_count = 0\n    # Iterate over each element in the array\n    for num in nums:\n        # If the element is zero, add it to the array\n        if num == 0:\n            zeros.append(1)\n            nonzero_count += 1\n        # Otherwise, it is non-zero, so decrement the counter and append 0 to the array\n        else:\n            zeros.append(0)\n    # If there are any non-zero elements in the array, calculate the ratio\n    if nonzero_count > 0:\n        return float(zeros.count(1)) / nonzero_count\n    else:\n        return 0.0",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0.0",
        "num_ids": 2327,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(100) == False # 100 cannot be represented as sum of non-zero powers of 2",
        "num_ids": 2451,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * r * math.pi\n",
        "test": "assert circle_circumference(0) == 0.0, \"circle_circumference(0) should return 0.0.\"",
        "num_ids": 2366,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result",
        "test": "assert extract_singly([]) == set(), \"The empty list should return an empty set.\"",
        "num_ids": 1872,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A sorted list of integers.\n    \"\"\"\n\n    # create a new list with all elements in reverse order\n    nums_reversed = [nums[i] for i in range(len(nums) - 1, -1, -1)]\n\n    # sort the new list in ascending order\n    nums_sorted = sorted(nums_reversed)\n\n    return nums_sorted",
        "test": "assert pancake_sort([5]) == [5]",
        "num_ids": 3726,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n        i += 1\n\n    return count",
        "test": "assert count_samepair([],[],[]) == 0",
        "num_ids": 2692,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def find_lists(Input):\n    # create an empty dictionary to store the counts\n    counts = {}\n    # iterate through the input tuple and increment the count for each list\n    for item in Input:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    # return the number of lists found\n    return len(counts)",
        "test": "assert find_lists(()) == 0",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([5, 2, 1, 3]) == 3",
        "num_ids": 2187,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    \n    if b == 0:\n        return None\n    \n    for i in range(n//b):\n        x += a\n        y += i*b\n    \n    if x == n and y == n:\n        return (x, y)\n    else:\n        return None",
        "test": "assert find_solution(2, -4, 12) == None",
        "num_ids": 2206,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]",
        "test": "assert remove_elements([], []) == []",
        "num_ids": 2031,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = []\n    for i in range(n):\n        series.append(i)\n    return sum(series)",
        "test": "assert sum_series(1) == 0, \"Incorrect sum for n = 1\"",
        "num_ids": 1616,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * l / 2\n    return area\n",
        "test": "assert area_polygon(3, 4) == 6.0",
        "num_ids": 1616,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        for j in range(1, int(math.sqrt(n))+1):\n            if n % i == 0 and n % j == 0:\n                sum_of_divisors += i + j\n                break\n    return sum_of_divisors == n",
        "test": "assert div_sum(25) == False, \"25 is not divisible by any integer\"",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def count_char_position(str1):\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            for c in str1.lower():\n                if c == char:\n                    count += 1\n                    break\n    return count",
        "test": "assert count_char_position(\"\") == 0, \"The function should return 0 if the string is empty\"",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([-1, -3, -5, -7, -9]) == 0",
        "num_ids": 2007,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is a power of 2\n    if n == 1:\n        return 1\n    \n    # Find the smallest power of 2 greater than or equal to n\n    i = 1\n    while i <= n:\n        i <<= 1\n    \n    # Return the smallest power of 2 greater than or equal to n\n    return i",
        "test": "assert next_power_of_2(1) == 1  # smallest power of 2",
        "num_ids": 1544,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)",
        "test": "assert frequency(range(10), 5) == 1",
        "num_ids": 1666,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sum_range_list(list1, m, n):\n    # Check if indices m and n are within the valid range of the list1\n    if m < 0 or n < 0 or m >= len(list1) or n >= len(list1):\n        print(\"Invalid indices. Sum cannot be calculated.\")\n        return 0\n    \n    # Calculate the sum of numbers in the specified range\n    sum_range = sum(list1[m:n+1])\n    \n    return sum_range",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 3) == 10 # Test Case 2",
        "num_ids": 2374,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    side_length = a/2\n    perimeter = 6*math.pi*side_length\n    return perimeter",
        "test": "assert perimeter_pentagon(6) == 32",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"\") == 0",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = True\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[i-1]):\n            data_type = False\n            break\n    return data_type",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 1677,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count >= n//2:\n        return True\n    else:\n        return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 4) == False",
        "num_ids": 2677,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 2014,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,min(b,c))",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 23,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a boolean variable to store whether all the bits are set or not\n    all_bits_set = True\n\n    # Traverse through each number in the given range\n    for num in range(l, r+1):\n        # Traverse through each bit of the number and check whether it is set or not\n        for bit in bin(num)[2:]:\n            if bit == '0':\n                # If any bit is set, set all_bits_set to False\n                all_bits_set = False\n                break\n        else:\n            # If all the bits of the number are set, return True\n            return True\n    \n    # If all the bits of the range are set, return True\n    return True",
        "test": "assert all_Bits_Set_In_The_Given_Range(n=5, l=3, r=0) # False",
        "num_ids": 2249,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            if i == 0 or arr[i] > arr[i-1]:\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n    return arr",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 3245,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1",
        "test": "assert replace_blank('','') == ''",
        "num_ids": 1095,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest = heapq.nlargest(n, list1)\n    return largest",
        "test": "assert larg_nnum([], 0) == []",
        "num_ids": 1904,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def lateralsurfacearea_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h",
        "test": "assert lateralsuface_cylinder(25,30) == 1200.0",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume",
        "test": "assert volume_cube(0) == 0",
        "num_ids": 1169,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(1, 32):\n        if n & (1 << i):\n            n |= (1 << i)\n    return n",
        "test": "assert even_bit_set_number(0) == 0, \"0 should be set to all even bits.\"",
        "num_ids": 1957,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each unique tuple\n    counter = Counter(test_list)\n    # Return the resulting dictionary\n    return dict(counter)",
        "test": "assert check_occurences([(\"apple\", 3), (\"banana\", 2), (\"apple\", 2), (\"orange\", 1)]) == {\"apple\": 2, \"banana\": 2, \"orange\": 1}",
        "num_ids": 1822,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize variables\n    count = 0\n    substring = ''\n\n    # Loop through each character in the string\n    for char in str:\n        # If the character is not an empty string, increment the count\n        if char:\n            count += 1\n            # Add the current character to the substring\n            substring += char\n\n    # Return the count of non-empty substrings\n    return count",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(n):\n        count += get_number_of_sequences(i, m)\n    return count\n\ndef get_number_of_sequences(length, m):\n    count = 0\n    for i in range(length):\n        if i >= m//2:\n            count += 1\n        else:\n            count += get_number_of_sequences(i, m)\n    return count",
        "test": "assert get_total_number_of_sequences(1,2) == 1",
        "num_ids": 2724,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # Remove the last element of list1\n    list1 = list1[:-1]\n\n    # Add the elements of list2 to the end of list1\n    list1.extend(list2)\n\n    return list1\n",
        "test": "assert replace_list([],[]) == []",
        "num_ids": 1874,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"\") == 0",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 0\n    \n    # Find the next perfect square of N\n    i = 2\n    while i * i <= N:\n        i += 1\n    \n    # Check if the next perfect square is greater than N\n    if i * i > N:\n        return i * i\n    \n    # If the next perfect square is less than or equal to N, return N\n    return N",
        "test": "assert next_Perfect_Square(2) == 4",
        "num_ids": 1566,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize variables\n    max_sum = float('-inf')\n    max_sum_bitonic = float('-inf')\n    max_bitonic_sum = 0\n    # Iterate through the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the bitonic sum of the subsequence\n            bitonic_sum = arr[i] + arr[j]\n            # Check if the bitonic sum is greater than the current maximum sum\n            if bitonic_sum > max_sum:\n                # Update the maximum sum, maximum bitonic sum, and current bitonic sum\n                max_sum = bitonic_sum\n                max_bitonic_sum = bitonic_sum\n                max_bitonic_sum = bitonic_sum\n    # Return the maximum sum\n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 9",
        "num_ids": 3308,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the babylonian method.\n\n    Input:\n        number (int): The number whose square root is to be computed.\n\n    Output:\n        int: The square root of the input number.\n    '''\n\n    # Base case: if the number is 1, it has a square root of 1\n    if number == 1:\n        return 1\n\n    # Initialize variables\n    previous_square = 0\n    current_square = 2 * number\n\n    # Compute the square root by iteratively subtracting the current square from the previous square\n    while current_square - previous_square!= 0:\n        previous_square = current_square\n        current_square = (current_square + number / current_square) / 2\n\n    # Return the square root\n    return current_square\n",
        "test": "assert babylonian_squareroot(1) == 1",
        "num_ids": 2073,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def lps(str): \n    n = len(str)\n    max_length = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = str[i:j+1]\n            if substring == substring[::-1]:\n                if j-i+1 > max_length:\n                    max_length = j-i+1\n                    start = i\n                    end = j\n    return max_length",
        "test": "assert lps(\"abc\") == 1, \"The length of the string abc is 1.\"",
        "num_ids": 2427,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum *= (n - i + 1) / i\n    return harmonic_sum",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Use set data type to store the common elements of the two arrays\n    common_elements = set(array_nums1) & set(array_nums2)\n    # Return the common elements as a list\n    return list(common_elements)\n",
        "test": "assert intersection_array([1,2,3,4,5],[2,3,4]) == [2,3,4]",
        "num_ids": 1944,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 6) == 0, \"The function should return 0 for an element that does not exist in the tuple (1, 2, 3, 4, 5).\"",
        "num_ids": 2099,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    # Create a new list with the same length as the input list\n    new_list = list[:len(list)]\n\n    # Loop through each element in the input list\n    for i in range(len(list)):\n        # If the current element is smaller than the element to be inserted, insert it at the beginning of the new list\n        if list[i] < element:\n            new_list.insert(0, element)\n            break\n        # If the current element is greater than the element to be inserted, insert it at the end of the new list\n        else:\n            new_list.append(element)\n\n    return new_list",
        "test": "assert insert_element([], 1) == []",
        "num_ids": 1891,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Extract the real and imaginary parts of the complex number\n    real = numbers[0]\n    imag = numbers[1]\n\n    # Convert the complex number to polar coordinates\n    theta = cmath.phase(numbers[0])  # The polar angle\n    rho = cmath.sqrt(numbers[0]**2 + numbers[1]**2)  # The magnitude of the complex number\n\n    # Convert the polar angle from degrees to radians\n    theta = theta * (cmath.pi / 180.0)\n\n    # Return the result as a tuple of (rho, theta)\n    return (rho, theta)",
        "test": "assert convert([1, -2, 3, -4, -5]) == [0.7549924643749474, 0.9510563783785616, 0.14811029235617318, -0.3451641963508874, -0.5422181103455986]",
        "num_ids": 2456,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def count_integer(list1):\n    '''\n    Return the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])",
        "test": "assert count_integer([1,2,3,4,5]) == 5",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        if len(combination) == n:\n            color_combinations.append(combination)\n    return color_combinations",
        "test": "assert combinations_colors([1, 2, 3], 3) == [(1, 2, 3)]",
        "num_ids": 3111,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n            if count == 5:\n                return i\n    return count",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 1862,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(5,10) == (10,5)",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # max of the two tuples\n    max_tuple = max(test_tup1, test_tup2)\n    # min of the two tuples\n    min_tuple = min(test_tup1, test_tup2)\n    return max_tuple, min_tuple",
        "test": "assert maximize_elements(2, 1) == (2, 1)",
        "num_ids": 2280,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 1:\n        return n\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 3\n    else:\n        for i in range(5, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return n",
        "test": "assert newman_prime(7) == 7, \"The correct result for n=7 is 7, not {}\".format(newman_prime(7))",
        "num_ids": 2680,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Create a new list to store the result of the division\n    result_list = []\n\n    # Loop through each tuple in the input tuples\n    for i in range(len(test_tup1)):\n        # Initialize the divisor to 1\n        divisor = 1\n\n        # Loop through each tuple in the input tuples\n        for j in range(len(test_tup2)):\n            # Check if the current divisor is less than the current element in the current tuple\n            if j!= i:\n                # Perform division between the current divisor and the current element in the current tuple\n                result_list.append(test_tup1[i] / test_tup2[j])\n                # Update the divisor to the current element in the current tuple\n                divisor = test_tup2[j]\n\n        # Divide the last element in the result list by the divisor to get the final result\n        result_list.append(test_tup1[i] / divisor)\n\n    return result_list",
        "test": "assert division_elements((1, 2), (3, 4)) == (0, 1.5)",
        "num_ids": 3228,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n\n    # Return the two parts as a tuple\n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 6) == ([1, 2, 3, 4, 5], [])",
        "num_ids": 2550,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age // 3\n    days = h_age % 3\n    return years + days\n",
        "test": "assert dog_age(0) == 0, \"dog age test 4\"",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]",
        "test": "assert list_split([], 1) == []",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = l ** 3\n    return surface",
        "test": "assert lateralsurface_cube(6) == 216 # pass",
        "num_ids": 1390,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Loop through the range from 1 to n\n    for i in range(1, n+1):\n        # Square the current number and add it to the sum\n        sum += i**2\n    \n    # Return the sum\n    return sum",
        "test": "assert square_Sum(1) == 1  # 1^2 = 1",
        "num_ids": 1955,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize variables\n    num = 1\n    count = 0\n    \n    # Loop until we have found then'th star number\n    while count < n:\n        num += 1\n        count += 1\n        \n    return num",
        "test": "assert find_star_num(0) == 1",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97, \"ascii_value('a') should return 97\"",
        "num_ids": 1277,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 0  # Test case 4",
        "num_ids": 1852,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize sum of even numbers raised to fifth power\n    sum_of_powers = 0\n    \n    # Loop through numbers from 2 to n\n    for i in range(2, n+1):\n        # If i is even and raised to the fifth power, add it to the sum\n        if i % 2 == 0 and i ** 5 == i:\n            sum_of_powers += i\n            \n    # Return the sum of even numbers raised to the fifth power\n    return sum_of_powers",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)-1, -1, -1):\n        rear_list.append(test_list[i][1])\n    return rear_list",
        "test": "assert rear_extract([]) == []",
        "num_ids": 2127,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    # Get the indices of the elements that need to be subtracted\n    indices = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            indices.append(i)\n    \n    # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in indices:\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1",
        "test": "assert substract_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'b', 'c')",
        "num_ids": 3049,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeffs = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            coeff = math.comb(n, i)\n            sum_even_binomial_coeffs += coeff\n    return sum_even_binomial_coeffs",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 2146,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h",
        "test": "assert volume_cylinder(3,4) == 6.283185307179586",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def dict_filter(dict,n):\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({}, 5) == {}",
        "num_ids": 1937,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_element = test_tup[0]\n    count = 1\n    for element in test_tup[1:]:\n        if element == first_element:\n            count += 1\n    return count",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 1",
        "num_ids": 1912,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_num_decagonal(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n % 10 == 0:\n        return is_num_decagonal(n // 10) * 10\n    else:\n        return is_num_decagonal(n // 10) * 10 + is_num_decagonal(n % 10)",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 2830,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1704,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Create an empty set to store unique elements\n    unique_set = set()\n\n    # Loop through each element in the list\n    for element in test_list:\n\n        # If the element already exists in the set, return False\n        if element in unique_set:\n            return False\n\n        # Otherwise, add the element to the set\n        unique_set.add(element)\n\n    # If the loop completes without returning False, the list is unique\n    return True",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 1527,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result",
        "test": "assert sub_list([], []) == []",
        "num_ids": 1845,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    for digit in digit_freq:\n        if digit_freq[digit] > 1:\n            return False\n    return True",
        "test": "assert validate(99998) == False",
        "num_ids": 1888,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item == element:\n            return True\n    return False",
        "test": "assert check_element([1,2,3,4,5], 6) == False",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.{2,3}b'\n    match = re.search(pattern, text)\n    return bool(match)",
        "test": "assert text_match_two_three(\"hello, world\") == False",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    max_ending_here = a[0]\n    for i in range(1, n):\n        curr_sum = a[i] + max_ending_here\n        max_ending_here = max(curr_sum, max_ending_here)\n        max_sum = max(max_sum, max_ending_here)\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 2) == 15",
        "num_ids": 3094,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''  \n    total = 0  \n    for i in range(2, n+1, 2):  \n        total += i ** 2  \n    return total",
        "test": "assert square_Sum(2) == 4",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = []\n    for sublist in list1:\n        if len(sublist) > len(max_len):\n            max_len = sublist\n    return max_len",
        "test": "assert max_length([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]), \"The function should return the list with the maximum length for a list of lists.\"",
        "num_ids": 2398,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def count_no_of_ways(n, k): \n    # base case\n    if n == 1 or k == 1: \n        return 1\n    # recursive case\n    else: \n        return (count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)) % (10**9 + 7)",
        "test": "assert count_no_of_ways(5, 3) == 11",
        "num_ids": 3923,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def find(n, m):\n    # Calculate the remainder of the division of n by m\n    r = n % m\n\n    # If the remainder is zero, return n//m (rounded down)\n    if r == 0:\n        return n // m\n\n    # Otherwise, round down to the nearest integer and return it\n    else:\n        return int(n // m)",
        "test": "assert find(10,10) == 1",
        "num_ids": 1354,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    a = w*h/2\n    b = w**2 + h**2 - 4*w*h\n    c = math.sqrt(b)\n    return c",
        "test": "assert otherside_rightangle(3,8) == 1, \"The correct side of the triangle with base 3 and height 8 is 1.\"",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_value = listval[0]\n        for value in listval:\n            if value > max_value:\n                max_value = value\n        return max_value",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5, \"The maximum value in the list is not 5.\"",
        "num_ids": 1894,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum",
        "test": "assert sum_div(1) == 1",
        "num_ids": 1389,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    return inv_count",
        "test": "assert get_Inv_Count([]) == 0 # Inversion Count",
        "num_ids": 1888,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flatten_list(list1):\n    '''\n    Function to flatten a given nested list structure.\n\n    Parameters:\n    list1 (list): A nested list structure to flatten.\n\n    Returns:\n    list: A single, flattened list.\n\n    '''\n    flattened_list = []\n\n    # Traverse the nested list structure\n    for item in list1:\n        # If the item is a list, call flatten_list recursively on it\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        # If the item is not a list, simply append it to the flattened list\n        else:\n            flattened_list.append(item)\n\n    return flattened_list",
        "test": "assert flatten_list([1, 2, 3, [4, 5, [6, 7], 8], 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 2242,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = stdata[0][1]\n    for t in stdata:\n        if t[1] > max_agg:\n            max_agg = t[1]\n    return max_agg",
        "test": "assert max_aggregate([(1, 2)]) == 2",
        "num_ids": 2029,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def count_binary_seq(n):\n    seq = [0] * (2*n)\n    # initialize the first n bits of the sequence as 1\n    for i in range(n):\n        seq[i] = 1\n    \n    # initialize the last n bits of the sequence as 0\n    for i in range(n, 2*n):\n        seq[i] = 0\n    \n    # find the length of the binary sequence that satisfies the given condition\n    count = 0\n    i = 2*n-1\n    while i > 0:\n        if seq[i-n] == seq[i-n-1]:\n            count += 1\n        i -= 1\n    \n    return count",
        "test": "assert count_binary_seq(1) == 0",
        "num_ids": 2364,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0",
        "test": "assert dict_depth({'a':1}) == 1",
        "num_ids": 2520,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # If the index is greater than or equal to the length of the array\n    if index >= len(arr):\n        # Return None if the index is greater than or equal to the length of the array\n        return None\n\n    # If the index is less than the length of the array and the array contains at least one element in the range\n    if index < len(arr) and any(x in arr[index:index+1] for x in ranges):\n        # Check if the rotation is valid\n        if rotations[index] < len(ranges) and rotations[index] >= 0:\n            # Return the element at the given index after the number of rotations\n            return arr[index+rotations[index]]\n        else:\n            # Return None if the rotation is invalid\n            return None\n    else:\n        # Return None if the array does not contain the given element in the range or if the index is greater than or equal to the length of the array\n        return None",
        "test": "assert find_Element([1,2,3,4,5], [2,3,4], [1,0,0], 2) == 3",
        "num_ids": 2983,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Returns two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None",
        "test": "assert start_withp(['avocado', 'banana', 'cherry']) == None",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    prev_sum = 0\n    prev_index = index - 1\n    prev_k = prev_index + k - 1\n\n    for i in range(1, index + 1):\n        curr_sum = a[i]\n        curr_index = i\n        curr_k = curr_index + k - 1\n\n        if curr_k > index:\n            curr_sum += a[prev_k]\n            curr_index = prev_k\n            curr_k = curr_index + k - 1\n\n        if curr_k > index - 1 and curr_sum > max_sum:\n            max_sum = curr_sum\n\n        if curr_index == prev_index + k - 1:\n            break\n\n        prev_sum = curr_sum\n        prev_index = curr_index\n\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq( [1, 3, -2, 4, -1, 10], 5, 2, 4) == 2 # check for the correct answer",
        "num_ids": 2876,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    \n    Args:\n    - tuplex: the tuple\n    - m: the maximum length of the colon\n    - n: the number of components in the tuple\n    \n    Returns:\n    - a colon of the tuple with the maximum length n\n    '''\n    \n    # Create an empty colon\n    colon = []\n    \n    # Get the number of components in the tuple\n    num_components = len(tuplex)\n    \n    # Initialize the maximum length of the colon\n    max_length = m\n    \n    # Check if the number of components is less than m\n    if num_components < m:\n        # If not, get the maximum length of the colon without the last component\n        max_length = max_length - 1\n    \n    # Iterate over the tuple and append the last component to the colon\n    for i in range(m - 1, 0, -1):\n        colon.append(tuplex[i])\n    \n    # Shuffle the colon\n    for i in range(len(colon)):\n        j = random.randint(0, i)\n        colon[i], colon[j] = colon[j], colon[i]\n    \n    # Return the colon\n    return tuple(colon)",
        "test": "assert colon_tuplex((), 1, 1) == ()",
        "num_ids": 2233,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Find the specified number of largest products from two given lists,\n    selecting one factor from each list.\n    '''\n    factors = []\n    for i in range(max(nums1)+1):\n        factors.append(i)\n    factor_index = 0\n\n    for i in range(max(nums2)+1):\n        largest_product = 1\n        for j in range(max(factors)):\n            if factor_index < len(factors) and i * factors[factor_index] > i:\n                factor_index += 1\n            else:\n                largest_product *= i * factors[j]\n        if largest_product > N:\n            return largest_product\n    return N",
        "test": "assert large_product([1,2,3,4,5], [2,2,2,2,2], 3) == 3",
        "num_ids": 3389,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(5,10) == 10",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple('A') == ('A',)",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def set_left_most_unset_bit(n):\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            n = n >> 1\n        else:\n            count += 1\n            n = n - 1\n    return count\n",
        "test": "assert set_left_most_unset_bit(0) == 0, \"set_left_most_unset_bit(0) should return 0\"",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "import math\n\ndef volume_cone(r, h):\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(1,1) == 3.141592653589793",
        "num_ids": 1769,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def highest_Power_of_2(n):\n    # Initialize the highest power of 2 as 1\n    highest = 1\n    \n    # Loop through the numbers from 2 to the highest power of 2 less than or equal to n\n    while highest < n:\n        highest <<= 1\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return highest",
        "test": "assert highest_Power_of_2(0) == 1  # Test case 1",
        "num_ids": 1813,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def find_lucas(n):\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + n",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 2227,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def add_string(list_, format_str):\n    '''\n    Apply a given format string to all of the elements in a list.\n\n    Parameters:\n    - list_: the list to format\n    - format_str: the format string to use\n\n    Returns:\n    - the formatted list\n    '''\n\n    return [format_str.format(elem) for elem in list_]",
        "test": "assert add_string([], \"\") == []",
        "num_ids": 1343,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert a list of dictionaries to a nested dictionary.\n    '''\n\n    # Create a new dictionary to hold the converted data\n    result = {}\n\n    # Iterate over the lists and add key-value pairs to the result dictionary\n    for item in zip(l1, l2, l3):\n        key, value = item\n        if isinstance(value, list):\n            key = 'list_' + str(value.index(value[0]))\n        result[key] = value\n\n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 2374,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def get_max_sum(n):\n    # Find the sum of each multiple of n/2, n/3, n/4, n/5\n    sum_2 = sum_3 = sum_4 = sum_5 = 0\n    for i in range(1, n+1):\n        sum_2 += i\n    for i in range(1, n//2+1):\n        sum_3 += i\n    for i in range(1, n//3+1):\n        sum_4 += i\n    for i in range(1, n//4+1):\n        sum_5 += i\n\n    # Find the maximum sum by summing all the above sums\n    max_sum = sum_2 + sum_3 + sum_4 + sum_5\n\n    return max_sum",
        "test": "assert get_max_sum(0) == 0",
        "num_ids": 2065,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list",
        "test": "assert max_length_list([]) == []",
        "num_ids": 1982,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    # Iterate through each element in the tuple\n    for item in test_tup:\n        # Add the item to the set if it's not already in it\n        if item not in unique_set:\n            # If the item is already in the set, return False\n            return False\n        # Otherwise, add it to the set\n        unique_set.add(item)\n    # If the loop completes without finding any duplicates, return True\n    return True",
        "test": "assert check_distinct([1, 2, 3, 4, 5, 5, 5]) == False",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    for char in str1:\n        if char_count[char] == max_count:\n            return char\n    return None",
        "test": "assert first_non_repeating_character(\"abc\") == \"a\"",
        "num_ids": 2275,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 32,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Check whether the given string starts and ends with the same character.\n    '''\n    # check if the string starts with a letter\n    if not re.match(regex, string[0]):\n        return False\n    # check if the string ends with a letter\n    if not re.match(regex, string[-1]):\n        return False\n    # check if the string ends with the same character as the first letter\n    if re.match(regex, string[-1], re.IGNORECASE):\n        return True\n    # check if the string starts with the same character as the last letter\n    if re.match(regex, string[0], re.IGNORECASE):\n        return True\n    # if none of the above conditions are met, the string does not start or end with the same character\n    return False",
        "test": "assert check_char(\"Aa\") == False",
        "num_ids": 1483,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    total = a + b + c\n    n = 3\n\n    if n % 2 == 0:\n        median = (a + b) / 2\n    else:\n        median = (a + b + c) / 2\n    \n    if n % 2 == 0:\n        return median\n    else:\n        return median - 1",
        "test": "assert median_numbers(1,3,2) == 2",
        "num_ids": 2158,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum",
        "test": "assert sum_of_digits([0]) == 0",
        "num_ids": 2067,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = ()\n    for tup in zip(test_tup1, test_tup2):\n        xor_tup += tup\n    return xor_tup",
        "test": "assert bitwise_xor((1, 2), (3,)) == (1, 3)",
        "num_ids": 2048,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    #Creating a list to store the sum of tuple elements of test_tup1 and test_tup2\n    sum_list = []\n    #Iterating through the elements of test_tup1\n    for i in test_tup1:\n        #Iterating through the elements of test_tup2\n        for j in test_tup2:\n            #Adding the current element of test_tup1 and test_tup2 to sum_list\n            sum_list.append(i + j)\n    #Returning the sum_list as the final result\n    return sum_list\n",
        "test": "assert add_nested_tuples(('a', 2), ('b', 3), ('c', 4)) == ('a', 2, 'b', 3, 'c', 4)",
        "num_ids": 2908,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def minimum(a, b):\n    return a if a < b else b",
        "test": "assert minimum(5,3) == 3",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False",
        "test": "assert check_tuplex((), (2,)) == False",
        "num_ids": 1204,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 21,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2",
        "test": "assert find_Parity(5) == 1 # check for odd parity",
        "num_ids": 1260,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Define the list of digits of the original number\n    digits = list(str(n))\n\n    # Reverse the list of digits\n    reversed_digits = digits[::-1]\n\n    # Convert the reversed list of digits back to a number and return it\n    return int(''.join(reversed_digits))",
        "test": "assert rearrange_bigger(0) == 0",
        "num_ids": 2318,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap to keep track of the pairs\n    pairs = []\n\n    # Iterate through the first array and insert the pairs of smallest k elements\n    for i in range(len(nums1)):\n        while len(pairs) >= k and nums1[i] > nums1[pairs[-1][0]]:\n            heapq.heappop(pairs)\n        heapq.heappush(pairs, [i, nums1[i]])\n\n    # Iterate through the second array and insert the pairs of smallest k elements\n    for j in range(len(nums2)):\n        while len(pairs) >= k and nums2[j] > nums2[pairs[-1][1]]:\n            heapq.heappop(pairs)\n        heapq.heappush(pairs, [j, nums2[j]])\n\n    # Find the k smallest pairs\n    result = []\n    for pair in pairs:\n        result.append((nums1[pair[0]], nums2[pair[1]]))\n\n    return result",
        "test": "assert k_smallest_pairs([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], 2) == [1, 2, 3, 4, 5, 7]",
        "num_ids": 4351,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    pairs = []\n\n    for num1 in list1:\n        for num2 in list1:\n            if num1!= num2:\n                pairs.append((num1, num2))\n\n    if len(pairs) == 0:\n        return None\n\n    pairs.sort()\n\n    for i in range(len(pairs) - 1):\n        if pairs[i][0] > pairs[i+1][1]:\n            product = pairs[i][1] * pairs[i+1][0]\n        else:\n            product = pairs[i][0] * pairs[i+1][1]\n\n        if min_product is None or product < min_product:\n            min_product = product\n\n    return min_product",
        "test": "assert min_product_tuple([-1, 0, 1]) == -1",
        "num_ids": 2464,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def min_val(listval):\n    '''\n    Find the minimum value in a list of heterogeneous values.\n    '''\n    if len(listval) == 0:\n        return None  # empty list has no minimum value\n    \n    # check if there is only one element in the list\n    if len(listval) == 1:\n        return listval[0]  # return the single element as the minimum value\n    \n    # if there is more than one element, use the built-in min function\n    return min(listval)",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1887,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n\n    # Replace underscores with spaces\n    word = re.sub('_(.)', lambda m: m.group(1).upper(), word)\n\n    # Convert the first letter to upper case\n    word = word.lstrip('_')\n\n    return word",
        "test": "assert snake_to_camel(\"camelCase\") == \"camelCase\"",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]",
        "test": "assert remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]",
        "num_ids": 1778,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        return None\n    \n    return list1[n-1]",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == ('b', 2)",
        "num_ids": 1889,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    # Check if the length of both lists is equal\n    if len(list1)!= len(list2):\n        return False\n    \n    # Create a set to store the values in list1\n    set1 = set(list1)\n    \n    # Loop through the values in list2 and check if they are in set1\n    for value in list2:\n        if value in set1:\n            return True\n    \n    # If the loop completes without finding a match, return False\n    return False",
        "test": "assert overlapping([1,2,3], [2,3,4]) == True",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    arr.sort()\n    max_product = 1\n    for i in range(len(arr)):\n        max_product *= arr[i]\n    return max_product",
        "test": "assert max_Product([0, 0, 0, 0, 0]) == 0",
        "num_ids": 2206,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create a dictionary to store the first elements of tuples as keys and their respective counts as values.\n    first_count = {}\n    \n    # Iterate through the list of tuples and count the number of times each first element occurs.\n    for tuple in Input:\n        if tuple[0] in first_count:\n            first_count[tuple[0]] += 1\n        else:\n            first_count[tuple[0]] = 1\n    \n    # Find the first element that occurs more than once in the dictionary.\n    common_tuple = None\n    count = 0\n    for key, value in first_count.items():\n        if value > count:\n            common_tuple = (key, value)\n            count = value\n    \n    return common_tuple",
        "test": "assert group_tuples([('apple', 'banana'), ('banana', 'orange'), ('apple', 'banana'), ('orange', 'apple'), ('pear', 'banana')]), ('apple', 'banana')",
        "num_ids": 2460,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 24,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def Find_Max(lst):\n    # Initialize max variable to None\n    max = None\n    # Loop through the list and find the maximum element\n    for num in lst:\n        if max is None or num > max:\n            max = num\n    # Return the maximum element\n    return max",
        "test": "assert Find_Max([1]) == 1 # test case 3",
        "num_ids": 1419,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    length = len(list1)\n    for num in list1:\n        total += round(num)\n    print(\"The rounded and sum of the numbers in the list is:\", total * length)",
        "test": "assert round_and_sum([1, 2, 3, 4, 5]) == (15, 150)",
        "num_ids": 2263,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0  # initialize sum of cubes to zero\n    i = 0  # initialize current number\n    while i <= n:  # loop while i is less than or equal to n\n        cube = i ** 3  # calculate cube of current number\n        sum_of_cubes += cube  # add cube to sum of cubes\n        i += 1  # increment i by 1\n    return sum_of_cubes  # return sum of cubes",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += str(element)\n    return result",
        "test": "assert concatenate_tuple(('a',)) == ('a')",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize sum and count variables to zero\n    sum = 0\n    count = 0\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate cube of current number\n        cube = i**3\n        # add cube to sum and increment count\n        sum += cube\n        count += 1\n    # return the average of cubes\n    return sum/count",
        "test": "assert find_Average_Of_Cube(1) == 1.0, \"Function should return the average of cubes of natural numbers less than or equal to 1.\"",
        "num_ids": 1998,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        result.append(element[-1])\n    return result",
        "test": "assert extract_rear(('apple', 'banana', 'cherry', 'date', 'elderberry', 'grapefruit')) == 'elderberry'",
        "num_ids": 1258,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 3) == 0",
        "num_ids": 1798,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Filter odd numbers from a given list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 25,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '-'.join(dt.split('-')[::-1])",
        "test": "assert change_date_format(\"2022-01-01\") == \"01-01-2022\"",
        "num_ids": 2599,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i - gap\n\n            while j >= 0 and my_list[j] > key:\n                my_list[j + gap] = my_list[j]\n                j -= gap\n            my_list[j + gap] = key\n\n        gap //= 2\n\n    return my_list\n",
        "test": "assert shell_sort([]) == []",
        "num_ids": 2741,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    # Create two new tuples containing only the elements of the first tuple\n    and_tup1 = tuple(test_tup1)\n    and_tup2 = tuple(test_tup2)\n    # Create a new list containing the elements of the first tuple and the elements of the second tuple\n    and_list = and_tup1 + and_tup2\n    # Return the list of elements\n    return and_list",
        "test": "assert and_tuples((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) == (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")",
        "num_ids": 2361,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a (float): The x-coordinate of the first point of the parabola.\n    b (float): The y-coordinate of the first point of the parabola.\n    c (float): The z-coordinate of the first point of the parabola.\n\n    Returns:\n    directrix (float): The directrix of the parabola.\n    \"\"\"\n\n    directrix = ((a*b**2 + b*c**2 + c**2) ** 0.5) / (a**3)\n\n    return directrix",
        "test": "assert parabola_directrix(1, 0, 3) == 3",
        "num_ids": 2524,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def common_element(list1, list2):\n    # Find the intersection of the two lists\n    intersection = list(set(list1) & set(list2))\n\n    # If the intersection is empty, the two lists have no common elements\n    if not intersection:\n        return False\n\n    # Return True if at least one element is common\n    else:\n        return True",
        "test": "assert common_element([1,2,3,4,5], []) == False",
        "num_ids": 2145,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * 0.5 * height\n\n    # Find the length of the base part of the trapezium\n    base_length = base1 + base2\n\n    # Calculate the length of the other part of the trapezium\n    other_length = height - base_length\n\n    # Find the length of the median of the two parts\n    median_length = (base_length + other_length) / 2\n\n    return median_length\n",
        "test": "assert median_trapezium(1,2,4) == 2",
        "num_ids": 2160,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def check_greater(arr, number):\n    '''\n    Check whether the given number is greater than all the elements in the array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 1479,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 24,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(?=[bB][^bB]*)')\n    matches = pattern.finditer(text)\n    return bool(matches)\n",
        "test": "assert text_match_one(\"abab\") == True",
        "num_ids": 4269,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # get the last digit of the number using modulus operator\n    last_digit = n % 10\n\n    # return the last digit\n    return last_digit",
        "test": "assert last_Digit(1) == 1",
        "num_ids": 1017,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list of negative numbers.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst",
        "test": "assert neg_nos([]) == []",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(str1)\n\n    # Loop through each character in the list and check if it is odd\n    for i in range(len(char_list)):\n        if i % 2 == 1:\n            # If the character is odd, remove it from the list\n            char_list.pop(i)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of bidirectional tuple pairs in a list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 2280,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result",
        "test": "assert multiple_to_single([1,2,3,4,5]) == 15",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Finds the first adverb and its position in a given sentence.\n    '''\n    # Pattern to find adverb starting from the start of the sentence\n    adverb_pattern = r'\\b(a|an|an\\'t|both|but|enough|for|if|in|is|it|nor|not|only|on|onto|or|that|the|their|then|there|these|they|this|those|too|was|with)\\b'\n    \n    # Find all matches of the adverb pattern in the sentence\n    adverbs = re.findall(adverb_pattern, text)\n    \n    # Initialize variables to store the first adverb and its position\n    first_adverb = None\n    position = 0\n    \n    # Loop through all the matches of the adverb pattern and update first_adverb and position\n    for adverb in adverbs:\n        if first_adverb is None:\n            first_adverb = adverb\n            position = 1\n        else:\n            position += 1\n    \n    # Return the first adverb and its position\n    return first_adverb, position",
        "test": "assert find_adverb_position(\"This is a test sentence. The first adverb is the fifth. The second adverb is the fourth.\") == (2, 20)",
        "num_ids": 4379,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3",
        "test": "assert surfacearea_cube(0) == 0",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    return len(positive_nums) / len(nums)",
        "test": "assert positive_count([-1,-2,-3,-4,-5]) == 0.0, \"positive_count([-1,-2,-3,-4,-5]) should return 0.0\"",
        "num_ids": 1795,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num\n    return largest",
        "test": "assert largest_neg([1, -5, 3, 2, -7]) == -5",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        if i % K == 0:\n            trimmed_list.append(test_list[i])\n    return trimmed_list",
        "test": "assert trim_tuple([], 2) == []",
        "num_ids": 2509,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Arguments:\n    test_tup1 -- A tuple containing elements to be multiplied.\n    test_tup2 -- A tuple containing elements to be multiplied.\n\n    Returns:\n    A tuple containing the product of all elements in the given two tuples.\n    '''\n\n    product_list = []\n    for i in range(len(test_tup1)):\n        product_list.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(product_list)",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 2576,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    return count_dict.most_common(1)[0][0]",
        "test": "assert count_Occurrence((1,2,3,3,3),(1,2,3,3)) == 3",
        "num_ids": 1870,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 1847,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum_of_perrin = 0\n    for i in range(1, n+1):\n        sum_of_perrin += i\n    return sum_of_perrin",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Convert the list of strings to a list of integers\n    int_list = [int(x) for x in str]\n\n    # Extract the required size of strings from the list\n    extract_list = int_list[len(str):]\n\n    # Convert the list of integers back to a list of strings\n    result_list = [str(x) for x in extract_list]\n\n    # Return the extracted strings\n    return result_list",
        "test": "assert extract_string('hello', [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1802,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n\n    Parameters:\n    text1 (string): The string to remove all whitespaces from.\n\n    Returns:\n    string: The modified string with all whitespaces removed.\n    '''\n\n    # Use regular expressions to replace all whitespaces with a single space character\n    text1 = re.sub(r'\\s+','', text1)\n\n    return text1",
        "test": "assert remove_whitespaces(\"\") == \"\"",
        "num_ids": 1434,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0",
        "test": "assert loss_amount(150,150) == 0",
        "num_ids": 1370,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Function to find the sum of even factors of a number.\n    '''\n    # Check if the number is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        print(\"Error: Please enter a positive integer.\")\n        return\n    \n    # Initialize sum variable\n    sum = 0\n    \n    # Loop through the number and add even factors to the sum\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i*i == n:\n                sum += i\n            else:\n                sum += n // i\n    \n    # Return the sum of even factors\n    return sum",
        "test": "assert sumofFactors(5) == 5",
        "num_ids": 1601,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b[a-zA-Z0-9]{2,}\\b', text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz('abc zdef') == True",
        "num_ids": 1470,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    else:\n        if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            return True\n        else:\n            return False",
        "test": "assert check_monthnumb_number(31) == False # April",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist) // 2):\n        stringlist[i], stringlist[len(stringlist)-i-1] = stringlist[len(stringlist)-i-1], stringlist[i]\n    return stringlist",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 1748,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list of integers as input and returns the sublist having minimum length.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize sublist as an empty list\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist",
        "test": "assert Find_Min([]) == []",
        "num_ids": 2312,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)\n\nstring = \"The quick brown fox jumps over the lazy dog.\"\nresult = remove_uppercase(string)\nprint(result)",
        "test": "assert remove_uppercase(\"123 456\") == \"123 456\"",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 1563,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n\n    Args:\n        lst (list): A list of elements.\n\n    Returns:\n        list: A list of all possible combinations of the elements in the given list.\n    \"\"\"\n\n    # Base case: if the list has only one element, return a list containing that element\n    if len(lst) == 1:\n        return [lst]\n\n    # Recursive case: find all possible combinations of the remaining elements in the list\n    all_combs = []\n    for i in range(len(lst)):\n        rest = lst[:i] + lst[i+1:]\n        for comb in combinations_list(rest):\n            all_combs.append([lst[i]] + comb)\n\n    return all_combs",
        "test": "assert combinations_list([]) == []",
        "num_ids": 3027,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    start = 0\n\n    for end in range(1, len(arr)):\n        if arr[end] > max_so_far:\n            max_so_far = arr[end]\n        elif arr[end] < min_so_far:\n            min_so_far = arr[end]\n        else:\n            max_so_far = max(max_so_far, arr[end])\n            min_so_far = min(min_so_far, arr[end])\n\n        if max_product < max_so_far * min_so_far:\n            max_product = max_so_far * min_so_far\n\n    return max_product\n",
        "test": "assert max_subarray_product([1]) == 1  # pass",
        "num_ids": 2650,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values are the same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    \n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    \n    return True",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 3}, 2) == False",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1729,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def max_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n    \n    return max_product",
        "test": "assert max_product([1]) == 1, \"The correct value for max_product([1]) should be 1.\"",
        "num_ids": 2399,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup\n    return (a+b, a-b, a*b, a/b)",
        "test": "assert add_pairwise(('a', 5)) == (('a', 6), ('b', 5))",
        "num_ids": 2815,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize the result to 0\n    result = 0\n    \n    # loop through each element in the array\n    for i in range(len(arr)):\n        # multiply the current element with the result and add the remainder to the result\n        result = (result * arr[i]) % n\n    \n    # return the result\n    return result",
        "test": "assert find_remainder([1,2,3,4,5], 5) == 0",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def check_Consecutive(lst):\n    if len(lst) < 2:\n        return True\n\n    last_num = lst[0]\n    for num in lst[1:]:\n        if num!= last_num + 1:\n            return False\n        last_num = num\n\n    return True",
        "test": "assert check_Consecutive([1,2,3,4,5,1,2,3,4,6]) == False",
        "num_ids": 2000,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the lists to sets to remove duplicates\n    test_set1 = set(test_list1)\n    test_set2 = set(test_list2)\n    \n    # find the intersection of sets\n    intersection_set = test_set1.intersection(test_set2)\n    \n    # convert the set back to a tuple and return it\n    return tuple(intersection_set)",
        "test": "assert tuple_intersection([1,2,3,4,5], [2,3,4,5,6]) == (2, 3, 4, 5)",
        "num_ids": 2011,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    newstr = str1.replace(ch, newch)\n    return newstr",
        "test": "assert replace_char(\"hello world\", \"x\", \"x\") == \"hello world\"",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # get the sorted list of tuples (value, count)\n    sorted_list = sorted(counter.items(), key=lambda x: x[0])\n\n    # convert the list of tuples back to a dictionary\n    sorted_dict = dict(sorted_list)\n\n    return sorted_dict",
        "test": "assert sort_counter({}) == Counter()",
        "num_ids": 2911,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables\n    max_val = min_val = nums[0]\n    # loop through array\n    for num in nums:\n        # update max_val and min_val\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    # return sum of max_val and min_val\n    return max_val + min_val",
        "test": "assert big_sum([-5, -3, -1, 0, 1]) == -4",
        "num_ids": 1893,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"hello\") == \"hello\"",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # initialize an empty string to store the modified string\n    modified_str = \"\"\n\n    # loop through each character of the string\n    for char in str1:\n\n        # check if the character is a lowercase letter\n        if char.islower():\n\n            # if it is, append it to the modified string\n            modified_str += char\n\n        # if the character is not a lowercase letter, add it to the modified string\n        else:\n            modified_str += char\n\n    # return the modified string\n    return modified_str",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])",
        "test": "assert first_Digit(1) == 1",
        "num_ids": 1324,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list: \n        if num % 2!= 0: \n            result.append(num)\n    return result",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1206,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # define the first n natural numbers as a list\n    natural_numbers = []\n    for i in range(n):\n        natural_numbers.append(i*i*i)\n\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum(natural_numbers)\n\n    # calculate the sum of the first n natural numbers\n    sum_first_n = sum(natural_numbers[:n])\n\n    # return the difference between the sums\n    return sum_cubes - sum_first_n\n",
        "test": "assert difference(10) == 0, \"The difference should be 0.\"",
        "num_ids": 1685,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5],0) == 0 # check the function works for an empty list",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase to make it case-insensitive\n    lowercase_string = string.lower()\n\n    # initialize a boolean variable to keep track of whether the first character should be capitalized\n    capitalize_first = True\n\n    # iterate over each character in the string\n    for i in range(len(lowercase_string)):\n        # if the character is uppercase, toggle the capitalization flag and capitalize the next character\n        if lowercase_string[i].isupper():\n            capitalize_first = not capitalize_first\n            lowercase_string = lowercase_string[:i] + lowercase_string[i].upper() + lowercase_string[i+1:]\n        # if the character is lowercase, do nothing\n        elif lowercase_string[i].islower():\n            pass\n        # if the character is a space, do nothing\n        elif lowercase_string[i] =='':\n            pass\n        # if the character is a letter, capitalize it\n        elif lowercase_string[i].isalpha():\n            if capitalize_first:\n                lowercase_string = lowercase_string[:i] + lowercase_string[i].upper() + lowercase_string[i+1:]\n            else:\n                lowercase_string = lowercase_string[:i] + lowercase_string[i].lower() + lowercase_string[i+1:]\n            capitalize_first = not capitalize_first\n\n    return lowercase_string",
        "test": "assert toggle_string('') == ''",
        "num_ids": 1792,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    result = 0\n    while n1 > 0:\n        diff = abs(n1 % 10 - n2 % 10)\n        if diff == 9:\n            result += 1\n        n1 //= 10\n        n2 //= 10\n    return result",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 2721,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_sub_array_sum([-1, -2, -3, -4], 2) == -1",
        "num_ids": 2378,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty list to store the union of the elements\n    union = []\n    \n    # Loop through each element of the first tuple\n    for num in test_tup1:\n        # If the element is not already present in the union list, add it to the list\n        if num not in union:\n            union.append(num)\n    \n    # Loop through each element of the second tuple\n    for num in test_tup2:\n        # If the element is not already present in the union list, add it to the list\n        if num not in union:\n            union.append(num)\n    \n    # Sort the union list in ascending order and return it\n    return sorted(union)",
        "test": "assert union_elements((1,2,3), (4,5,6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 2635,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list of integers as input and returns the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for num in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0, \"Function should return 0 for an empty list\"",
        "num_ids": 1990,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n\n    # Define a regular expression pattern to match a value between quotation marks\n    pattern = r'(?:\"[^\"]*\")|(?:\"[^\"]+\")|(?:\"[^\"]+?\")[\\'\"]([^\\'\"]*)[\\'\"]'\n\n    # Use the re.findall() method to find all occurrences of the pattern in the text\n    values = re.findall(pattern, text)\n\n    # Return a list of values\n    return values\n",
        "test": "assert extract_values(\"\") == []",
        "num_ids": 1598,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4], 3) == 3",
        "num_ids": 3402,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split('') == []",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_of_digits = 0\n    while n > 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits",
        "test": "assert sum_digits(12345) == 1 + 2 + 3 + 4 + 5",
        "num_ids": 1335,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        first_element = list1[0]\n        second_element = list1[1]\n        if first_element > second_element:\n            return issort_list(list1[1:])\n        else:\n            return issort_list(list1[2:])",
        "test": "assert issort_list([1, 1, 1, 1]) == True",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initialize an empty list to store the sorted sublists\n    sorted_sublists = []\n\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Initialize an empty list to store the characters in the sublist\n        char_list = []\n\n        # Loop through each character in the sublist\n        for char in sublist:\n            # Add each character to the list of characters in the sublist\n            char_list.append(char)\n\n        # Sort the list of characters in the sublist using the built-in sort() method\n        sorted_char_list = sorted(char_list)\n\n        # Append the sorted list of characters to the list of sorted sublists\n        sorted_sublists.append(sorted_char_list)\n\n    # Return the list of sorted sublists\n    return sorted_sublists",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 2667,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1967,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 1, 1]) == 1",
        "num_ids": 1361,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 0.5 * (r**2 * h)\n    return surface_area",
        "test": "assert surfacearea_cylinder(0,2) == 0",
        "num_ids": 1438,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n\n    # If A is empty, then B is sublist of A\n    if len(A) == 0:\n        return True\n\n    # Initialize a flag to true\n    flag = True\n\n    # Iterate through B and check if each element is present in A\n    for i in range(len(B)):\n        if B[i] not in A:\n            flag = False\n            break\n\n    # If all elements in B are present in A, then A is sublist of B\n    if flag:\n        return True\n\n    # If A is sublist of B, then B is sublist of A\n    else:\n        return False",
        "test": "assert is_Sub_Array([1,2,3,4,5],[2,3,6]) == False",
        "num_ids": 2609,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(10):\n        result *= n // (10**i)\n    return n - 10 * result",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): First list.\n        list2 (list): Second list.\n        list3 (list): Third list.\n\n    Returns:\n        list: A single flat list containing all the elements of all three input lists.\n    '''\n    return list1 + list2 + list3",
        "test": "assert interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1710,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n    return dissimilar",
        "test": "assert find_dissimilar(('apple', 'banana'), ('banana', 'cherry')) == ['apple']",
        "num_ids": 2391,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            sub_tuple = even_ele(element, even_fnc)\n            new_tuple.append(sub_tuple)\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return new_tuple\n",
        "test": "assert even_ele((1, 2, 3, 4, 5, 6, 7, 8, 9), lambda x: x) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 2797,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area",
        "test": "assert surface_Area(2, 3) == 6",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def my_dict(dict1):\n    return len(dict1) == 0",
        "test": "assert my_dict({}) == True, \"my_dict({}) should return True\"",
        "num_ids": 1124,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def catalan_number(num):\n    '''\n    Returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    \n    catalan = 0\n    prev_term = 1\n    for i in range(2, num+1):\n        catalan += prev_term\n        prev_term *= (2*i-1)/i\n    \n    return catalan",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\bly\\b'\n    match = re.search(pattern, text)\n    if match:\n        position = match.start()\n        adverbs.append(('ly', position))\n    return adverbs\n\n\ntext = \"The quick brown fox jumps over the lazy dog. The cat and the dog are playing.\"\nadverbs = find_adverbs(text)\nprint(\"Adverbs found:\", adverbs)",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == []",
        "num_ids": 3242,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap to store the items\n    max_heap = []\n    \n    # Iterate over the given items and add them to the max heap\n    for item in items:\n        heapq.heappush(max_heap, (-item, item))\n    \n    # Pop the n most expensive items from the max heap\n    most_expensive = []\n    for _ in range(n):\n        most_expensive.append(heapq.heappop(max_heap)[1])\n    \n    return most_expensive",
        "test": "assert expensive_items([],0) == []",
        "num_ids": 2556,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at nth element\n    split_list = l[:n]\n    \n    # Add the first part to the end\n    result = split_list + l[n:]\n    \n    return result",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5])",
        "num_ids": 2548,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 0\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest - smallest",
        "test": "assert big_diff([1,1,1,1,1]) == 0",
        "num_ids": 1950,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    total = 0\n    count = 0\n\n    while total < b:\n        total += a\n        count += 1\n\n    return count\n",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): the angle in radians or degrees\n    y (float): the magnitude of the point\n\n    Returns:\n    A tuple containing the rectangular coordinates\n    '''\n\n    rect_x = x * cmath.cos(y)\n    rect_y = x * cmath.sin(y)\n\n    return (rect_x, rect_y)",
        "test": "assert polar_rect(0,0) == (0, 0)",
        "num_ids": 1773,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    length = len(newList)\n\n    # if the length of the list is less than 2, there is nothing to do\n    if length < 2:\n        return newList\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # return the modified list\n    return newList",
        "test": "assert swap_List([1,2,3]) == [3,2,1] # Test case 1",
        "num_ids": 1811,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n        n (int): The value of n\n        k (int): The value of k\n\n    Returns:\n        int: The sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    # Initialize the product of consecutive binomial co-efficients as 1\n    product = 1\n\n    # Loop through the values of n from 1 to k\n    for i in range(1, k+1):\n        # Calculate the value of the product of consecutive binomial co-efficients\n        product = product * (n-i+1) / i\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return product",
        "test": "assert binomial_Coeff(5,2) == 10",
        "num_ids": 2613,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 32,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})')\n    match = pattern.match(ip)\n    if match:\n        return match.group(1) + '.' + match.group(2) + '.' + match.group(3) + '.' + match.group(4)\n    else:\n        return ip",
        "test": "assert removezero_ip(\"192.168.1.1\") == \"192.168.1.1\"",
        "num_ids": 2541,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def diff_even_odd(list1):\n    # Initialize variables\n    even_sum = 0\n    odd_sum = 0\n    difference = 0\n\n    # Loop through the list\n    for i in list1:\n        # If the number is even, add it to the even sum\n        if i % 2 == 0:\n            even_sum += i\n\n        # If the number is odd, add it to the odd sum\n        else:\n            odd_sum += i\n\n    # Calculate the difference between the two sums\n    difference = even_sum - odd_sum\n\n    # Return the difference\n    return difference",
        "test": "assert diff_even_odd([]) == 0",
        "num_ids": 2170,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def min_Swaps(str1,str2) : \n    count = 0\n    i = 0\n    while i < len(str1) and i < len(str2):\n        if str1[i]!= str2[i]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count",
        "test": "assert min_Swaps(\"011010\", \"011010\") == 0",
        "num_ids": 2821,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n1, n2 = len(arr1), len(arr2)\n    if k > n1 or k > n2:\n        return \"Invalid input\"\n    elif k == n1:\n        return arr1[-1]\n    elif k == n2:\n        return arr2[-1]\n    else:\n        i1, i2 = 0, 0\n        while i1 < n1 and i2 < n2:\n            if arr1[i1] < arr2[i2]:\n                i1 += 1\n            elif arr1[i1] > arr2[i2]:\n                i2 += 1\n            else:\n                i1 += 1\n                i2 += 1\n        return arr1[i1-1] if i1 == n1 else arr2[i2-1]",
        "test": "assert find_kth([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 4) == 5, \"The kth element from the given two sorted arrays is not correct\"",
        "num_ids": 3256,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def armstrong_number(number):\n    '''\n    This function checks whether the given number is armstrong or not.\n    '''\n    sum_of_cubes = 0\n    num = number\n    while num > 0:\n        remainder = num % 10\n        sum_of_cubes += pow(remainder,3)\n        num //= 10\n\n    if number == sum_of_cubes:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(27) == False",
        "num_ids": 1696,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def sum_average(number):\n    sum = 0\n    n = number\n\n    for i in range(1, n+1):\n        sum += i\n\n    average = sum / n\n\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 1411,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(10) == True, \"The number 10 is even\"",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # loop through the dictionary and find the first character that appears more than once\n    first_repeated = \"\"\n    max_count = 0\n    for char, count in char_count.items():\n        if count > max_count:\n            first_repeated = char\n            max_count = count\n    return first_repeated",
        "test": "assert first_repeated_char(\"bbbbb\") == \"b\"",
        "num_ids": 1937,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i >= 10**(i-1) and i % 10!= 0:\n            ludic.append(i)\n    return ludic",
        "test": "assert get_ludic(0) == []",
        "num_ids": 3450,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def reverse_words(s):\n    '''\n    Function to reverse words in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the list of words\n    reversed_words = list(reversed(words))\n    # Join the reversed list of words with spaces as a separator\n    reversed_string =''.join(reversed_words)\n    return reversed_string",
        "test": "assert reverse_words(\"a\") == \"a\"",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(39) == False",
        "num_ids": 1229,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"hello world\", r\"hello\") == (\"hello\", 0, 5)",
        "num_ids": 2160,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)",
        "test": "assert bell_Number(5) == 5, \"The nth bell number is not 5.\"",
        "num_ids": 3257,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    # Convert the list to a set to remove duplicates\n    set_list = set(list1)\n    \n    # Sort the set in ascending order\n    sorted_set = sorted(set_list)\n    \n    # Calculate the index of the k'th element\n    k = L - 1\n    \n    # Initialize a result list\n    result = []\n    \n    # Iterate through the sorted set\n    for i in range(len(sorted_set)):\n        if i == k:\n            continue\n        result.append(sorted_set[i])\n    \n    return result",
        "test": "assert remove_kth_element([], 0) == []",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def max_of_nth(test_list, N):\n    # Create a new list to store the values of then'th column\n    nth_column = []\n\n    # Iterate over each element of the matrix and append the max value to the nth_column list\n    for row in test_list:\n        max_val = max(row)\n        nth_column.append(max_val)\n\n    # Sort the nth_column in descending order and return the first element as the max of then'th column\n    nth_column.sort(reverse=True)\n    return nth_column[0]",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 2710,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            merged_list.append([sublist[0], sublist[1]])\n        elif len(sublist) == 1:\n            merged_list.append([sublist[0]])\n        else:\n            raise ValueError(\"Invalid sublist length\")\n    return merged_list",
        "test": "assert merge([]) == []",
        "num_ids": 2349,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 21,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = [0] * len(test_list)\n    for i in range(len(test_list)):\n        cum_sum[i] = cum_sum[i-1] + test_list[i]\n    return cum_sum",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 2762,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [[sum(sub_tuple) / len(sub_tuple) for sub_tuple in sub_tuples] for sub_tuples in nums]",
        "test": "assert average_tuple([]) == []",
        "num_ids": 2147,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], int) or not isinstance(test_tup2[i], int):\n            print(\"Error: Each element in the tuples must be an integer\")\n            return None\n    \n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 2403,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n        steps (int): The number of steps to take to reach a point of form (d, 0) from origin in a 2d plane.\n        d (int): The length of the diagonal of the 2d plane from origin.\n\n    Returns:\n        int: The minimum number of jumps required to reach the point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    \n    max_steps = steps * 4\n    \n    if d == max_steps:\n        return steps\n    \n    count = 1\n    d_count = d\n    \n    while d_count >= 1:\n        if d_count % 2 == 1:\n            count += 1\n        else:\n            count -= 1\n        \n        if d_count == 1 or d_count == max_steps:\n            break\n        \n        d_count -= 2\n    \n    return count",
        "test": "assert min_Jumps(4, 1) == 2",
        "num_ids": 2102,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def div_list(nums1, nums2):\n    # Initialize result list\n    result = []\n    # Loop through each element of nums1 and divide it by each element of nums2\n    for num in nums1:\n        for div in nums2:\n            if num % div == 0:\n                # If element is not divisible by the divisor, append it to the result list\n                result.append(num)\n                break\n    return result",
        "test": "assert div_list([],[]) == []",
        "num_ids": 1808,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list of all the numbers in the string\n    numbers = list(test_str)\n    \n    # loop through the list and move each number to the end of the list\n    for num in numbers:\n        # check if the number is a digit\n        if num.isdigit():\n            # if so, remove it and add it to the beginning of the list\n            numbers.remove(num)\n            numbers.insert(0, num)\n    \n    # convert the list back into a string and return it\n    return ''.join(numbers)\n",
        "test": "assert move_num('') == ''",
        "num_ids": 1621,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def largest_subset(a):\n    # Create a dictionary to store the count of each number in the list\n    counts = {}\n    for num in a:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # Initialize variables to keep track of the largest subset and its size\n    max_subset = [a[0]]\n    max_size = 1\n\n    # Iterate over the remaining numbers and check if each pair is divisible\n    for num in a[1:]:\n        if (num % max_subset[-1]) == 0:\n            # If the current number is divisible by the last number in the subset, add it to the subset\n            max_subset.append(num)\n            # Update the size of the largest subset\n            max_size += 1\n            # Remove the last number from the subset\n            max_subset.pop()\n\n    return max_size",
        "test": "assert largest_subset([1]) == 1",
        "num_ids": 2818,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def get_median(arr1, arr2, n):\n    # check if the lists have the same size\n    if len(arr1)!= len(arr2):\n        return \"Error: Lists must have same size.\"\n\n    # sort the lists in ascending order\n    arr1.sort()\n    arr2.sort()\n\n    # find the midpoint of the two lists\n    midpoint = len(arr1) // 2\n\n    # if the size of the two lists is odd, take the average of the two middle elements\n    if len(arr1) % 2 == 1:\n        return (arr1[midpoint - 1] + arr1[midpoint]) / 2\n\n    # otherwise, take the middle element of the two lists\n    else:\n        return arr1[midpoint]\n",
        "test": "assert get_median([1, 3, 5, 7], [2, 4, 6, 8], 5) == 5.0",
        "num_ids": 3079,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1, 4, 9, 16, 25]",
        "num_ids": 1733,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"Hello\") == \"HELLO\"",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: # if the list has less than two elements, it cannot be swapped\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0] # swap first and last elements\n    \n    return newList",
        "test": "assert swap_List([1]) == [1]",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = 0  # Initialize the area to 0\n\n    # Traverse from 2 to n, and for each number, check if it's inscribed in a semicircle with a radius of r.\n    for n in range(2, r+1):\n        area += (n * (n-1)) / 2\n\n    return area",
        "test": "assert triangle_area(0) == 0",
        "num_ids": 2607,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return start\n    count = 0\n    for i in range(start,end+1):\n        if i not in array:\n            count += 1\n        else:\n            array[i-start] += 1\n            array[start+count-1] -= 1\n    return start+count",
        "test": "assert find_First_Missing([1,2,3,4,5], 0, 1) == 1",
        "num_ids": 2315,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The%20quick%20brown%20fox%20jumps%20over%20the%20lazy%20dog\"",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([]) == []",
        "num_ids": 1386,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub:\n        sub.append(ele)\n    else:\n        sub[-1] = ele\n    return sub",
        "test": "assert adjac((0,0)) == [(0,0)] # Test case 1",
        "num_ids": 4529,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Initialize an empty string to store the modified text\n    modified_text = \"\"\n\n    # Iterate through each character in the text\n    for char in text:\n        # If the character is a whitespace, replace it with an underscore\n        if char.isspace():\n            modified_text += \"_\"\n        # If the character is not a whitespace, add it to the modified text as is\n        else:\n            modified_text += char\n\n    return modified_text",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Loop through the list and check if each element is zero\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            # If the element is zero, move it to the end of the list\n            num_list.insert(i, num_list.pop(i))\n\n    # Return the updated list\n    return num_list",
        "test": "assert move_zero([]) == []",
        "num_ids": 2014,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1],3) == 0",
        "num_ids": 1663,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n    return [num for num in heap]",
        "test": "assert heap_sort([]) == []",
        "num_ids": 2329,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(200, 50) == False, \"Expected result: False\"",
        "num_ids": 1559,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "import math\n\ndef wind_chill(v, t):\n    wind_speed = v\n    celsius_temperature = t\n    \n    # convert wind speed to m/s and celsius temperature to Kelvin\n    wind_speed_m_s = wind_speed * 0.44704\n    celsius_temperature_k = celsius_temperature + 273.15\n    \n    # calculate wind chill index\n    wind_chill_index = math.floor((wind_speed_m_s / celsius_temperature_k) * 100) / 100\n    \n    # return wind chill index rounded to the nearest integer\n    return math.floor(wind_chill_index)\n",
        "test": "assert wind_chill(0, 0) == 0",
        "num_ids": 2029,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_length = 0\n    for name in sample_names:\n        if not name.startswith('a'):\n            names_length += len(name)\n    return names_length",
        "test": "assert sample_nam(\"David\") == 4",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # use regular expression to match all parenthesis in the string\n    pattern = r'\\(|\\)|\\[|\\]'\n    # replace all parenthesis in the string with an empty string\n    items = re.sub(pattern, '', items)\n    return items",
        "test": "assert remove_parenthesis('') == ''",
        "num_ids": 1585,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def is_nonagonal(n):\n    '''\n    Finds the nth nonagonal number using the formula:\n        n^2 - n + 1\n    '''\n    return n ** 2 - n + 1",
        "test": "assert is_nonagonal(4) == 21, \"Test failed. is_nonagonal(4) should return 21.\"",
        "num_ids": 2354,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Removing all punctuation marks and converting all the text to lowercase\n    text = text.lower()\n    # Finding all the word matches in the text\n    matches = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    # Checking if any word matches except at the start and end of the word\n    if len(matches) > 0 and matches[0]!= matches[-1]:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"grape\") == False",
        "num_ids": 2134,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # initialize the result list\n    result = []\n    \n    # iterate through the input array from the end\n    for i in range(len(input) - 1, -1, -1):\n        # add the current element to the result list\n        result.append(input[i])\n        \n        # check if we have reached the position k\n        if len(result) == k:\n            break\n    \n    # return the reversed list\n    return result",
        "test": "assert reverse_Array_Upto_K([], 5) == []",
        "num_ids": 2674,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 1, 'b': 2, 'c': 3}) == add_dict_to_tuple((1, 2, 3), {'a': 1, 'b': 2, 'c': 3})",
        "num_ids": 2058,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Create a dictionary to store the current path\n    path = {\n        (0, 0): 0,\n        (0, 1): 1,\n        (0, 2): 2,\n        (1, 0): 3,\n        (1, 1): 4,\n        (1, 2): 5,\n        (2, 0): 6,\n        (2, 1): 7,\n        (2, 2): 8,\n    }\n\n    # Find the maximum average over all existing paths\n    max_avg = 0\n    for i in range(3, len(cost)):\n        for j in range(3, len(cost[0])):\n            path_sum = path[(i - 1, j)] + path[(i, j - 1)] + path[(i - 1, j - 1)] + cost[i][j]\n            avg = path_sum / (i * j)\n            if avg > max_avg:\n                max_avg = avg\n\n    return max_avg\n",
        "test": "assert maxAverageOfPath([",
        "num_ids": 5676,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def filter_data(students, h, w):\n    filtered_students = []\n\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students.append(student)\n\n    return filtered_students",
        "test": "assert filter_data({\"Peter\": (190, 85), \"Emma\": (180, 90), \"Anna\": (170, 85)}, 150, 100) == []",
        "num_ids": 2987,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            if nums1[i] == nums1[j] and nums2[i] == nums2[j]:\n                same_indices.append(i)\n                same_indices.append(j)\n    return same_indices",
        "test": "assert count_same_pair([1,2,3,4,5], [6,6,6,6,6]) == []",
        "num_ids": 2421,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit ** power\n        base //= 10\n        power -= 1\n    return result",
        "test": "assert power_base_sum(2, 0) == 0",
        "num_ids": 2102,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regex to extract values between quotation marks \" \"\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    # Return list of extracted values\n    return matches",
        "test": "assert extract_quotation(\"Hello, this is a test with no quotes\") == \"Hello, this is a test with no quotes\"",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n\n    n = len(test_tup)\n    result_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(n)])\n    return result_tup",
        "test": "assert multiply_elements(()) == ()",
        "num_ids": 3331,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]",
        "test": "assert sum_list([],[]) == []",
        "num_ids": 1610,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list of integers.\n\n    :param nums: a list of integers\n    :return: a new list with consecutive duplicates removed\n    '''\n\n    # Create a set to store the unique integers\n    unique_nums = set(nums)\n\n    # Create a list to store the unique integers in consecutive order\n    consecutive_nums = []\n\n    for num in unique_nums:\n        # Check if the next number is the same as the current number\n        if consecutive_nums and consecutive_nums[-1] == num:\n            continue\n\n        # Add the current number to the consecutive_nums list\n        consecutive_nums.append(num)\n\n    return consecutive_nums",
        "test": "assert consecutive_duplicates([1,2,3,4,4,5,5,6,6]) == [1,2,3,4,5,6]",
        "num_ids": 2347,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function finds the lateral surface area of a cone given its radius r and its height h.\n    '''\n    area = math.pi * r ** 2\n    return area",
        "test": "assert lateralsurface_cone(5,6) == 78.53981633974483",
        "num_ids": 1617,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.]', ':', text)",
        "test": "assert replace_specialchar(\"\") == \"\"",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Returns the index of the first occurrence of x in A, or -1 if x is not in A.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2  # 2nd occurrence of 3 in [1, 2, 3, 4, 5]",
        "num_ids": 1981,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Calculate the sum of the first sublist\n    total = sum(arr[:1])\n    \n    # Calculate the sum of the remaining sublists\n    for i in range(1, len(arr)):\n        sublist = arr[i:]\n        subtotal = sum(sublist)\n        total += subtotal\n    \n    return total",
        "test": "assert sum_Of_Subarray_Prod([1]) == 1",
        "num_ids": 2591,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def set_middle_bits(n):\n    # set the first and last bits as 1\n    n = n | (1 << 31)\n    # set the middle bits as 0\n    n = n & ~(1 << 31)\n    return n",
        "test": "assert set_middle_bits(0) == 0 # 000000000000000000000000000000000",
        "num_ids": 4601,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 2637,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = re.findall(r'[aeiouAEIOU]', string)\n    if len(vowels) > 0:\n        return True\n    else:\n        return False",
        "test": "assert check_str('') == False",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 738,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1664,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        count = 2\n        digit = 1\n        while count <= n:\n            digit += 1\n            count += 1\n            for i in range(2, int(math.sqrt(count)) + 1):\n                if count % i == 0:\n                    break\n            else:\n                return digit - 1\n        return None",
        "test": "assert find_Index(4) == 1, \"The index of smallest triangular number with 4 digits should be 1.\"",
        "num_ids": 2340,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))",
        "test": "assert tuple_to_dict(('apple', 'banana', 'cherry')) == {'apple': 'banana', 'banana': 'cherry'}",
        "num_ids": 2444,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a Python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # initialize a set to store all characters\n    char_set = set()\n\n    # loop through each character in the string\n    for char in s:\n\n        # add the character to the set\n        char_set.add(char)\n\n    # check if all the characters are same\n    if len(char_set) == len(set(s)):\n        return True\n    else:\n        return False",
        "test": "assert all_Characters_Same(\"\") == True",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/2)*side*side*side",
        "test": "assert area_tetrahedron(1) == 0.5",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # create a new list with m elements to the right of the original list\n    new_list = list[m:] + list[:m]\n    return new_list",
        "test": "assert rotate_right([], 0) == []",
        "num_ids": 2149,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def check_none(test_tup):\n    '''\n    Check if the given tuple has any none value or not.\n\n    Parameters:\n        test_tup (tuple): The tuple to be checked\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none(()) == False",
        "num_ids": 1296,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: sum(int(digit) for digit in str(num)) % len(str(num)) == 0, range(startnum, endnum+1)))\n",
        "test": "assert divisible_by_digits(10, 10) == []",
        "num_ids": 5681,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > math.pi/2:\n        return None\n    else:\n        area = math.pi * r ** 2\n        return area",
        "test": "assert sector_area(10,math.pi/2) is not None, \"Test Failed\"",
        "num_ids": 1557,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n = len(X), len(Y)\n    L = [[0] * (n+1) for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    Lc = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            Lc.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return \"\".join(Lc[::-1])",
        "test": "assert lcs_of_three(\"A\", \"A\", \"A\") == \"A\"",
        "num_ids": 3583,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Regular expression to match capital letters and spaces\n    pattern = re.compile(r'(?<![A-Z])([A-Z][a-z]+|[A-Z]+)')\n    # Split the string into words using the pattern\n    words = pattern.split(str1)\n    # Capitalize the first letter of each word and join them with spaces\n    return''.join(word.capitalize() for word in words)",
        "test": "assert capital_words_spaces(\"12345678901234567890\") == \"12345678901234567890\"",
        "num_ids": 2159,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically using the built-in sort() function.\n    '''\n    sorted_nums = sorted(nums_str)\n    return sorted_nums",
        "test": "assert sort_numeric_strings(['10', '20', '30']) == ['10', '20', '30']",
        "num_ids": 2751,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list",
        "test": "assert add_tuple([1, 2, 3], (1, 2, 3)) == [2, 4, 6]",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or arr[i] < arr[i-1]:\n        return True\n    else:\n        return False\n\n\ndef check_min_heap(arr):\n    # Check if the array is a heap or not\n    if len(arr) > 1 and check_min_heap_helper(arr, 0):\n        return True\n    else:\n        return False\n",
        "test": "assert check_min_heap_helper([1, 3, 5], 1) == False, \"The second element of the array should be 3\"",
        "num_ids": 2379,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # define a function to generate the nth jacobsthal number\n    def generate_jacosthal_num(n):\n        # base cases\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n % 2 == 0:\n            # if n is even, add the square of the previous jacobsthal number\n            return generate_jacosthal_num(n // 2) + generate_jacosthal_num(n // 2)\n        else:\n            # if n is odd, subtract the square of the previous jacobsthal number\n            return generate_jacosthal_num(3 * n - 1) - generate_jacosthal_num(3 * n - 1)\n    \n    # call the function to generate the nth jacobsthal number\n    return generate_jacosthal_num(n)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 4283,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        min_list.append(test_list[i])\n    min_list.sort()\n    return min_list[:K]",
        "test": "assert min_k([], 2) == []",
        "num_ids": 3013,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements",
        "test": "assert extract_index_list([], [], []) == []",
        "num_ids": 3387,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest if second_smallest!= float('inf') else None\n",
        "test": "assert second_smallest([2, 3, 4, 5]) == 3",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    # Define a pattern that matches any string that starts with an 'a' followed by one or more 'b's.\n    pattern = r'^a[bB]{1,}'\n\n    # Use the re.match() function to search for the pattern in the input text.\n    result = re.match(pattern, text)\n\n    # Return the result as a boolean value.\n    return bool(result)",
        "test": "assert text_match_zero_one(\"aabba\") == False",
        "num_ids": 2778,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] > test_list[i+1]:\n            count += 1\n    return count",
        "test": "assert count_reverse_pairs(['a', 'b', 'c']) == 0  # there are no pairs of reverse strings in the list ['a', 'b', 'c']",
        "num_ids": 2523,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create an empty dictionary to store the count of each list\n    count_dict = {}\n\n    # Loop through the list1 and count the number of times each list appears in the original list1\n    for item in list1:\n        # Check if the item is already in the count_dict\n        if item in count_dict:\n            # If it is, increment its count by 1\n            count_dict[item] += 1\n        else:\n            # If it is not, add it to the count_dict with a value of 1\n            count_dict[item] = 1\n\n    return count_dict",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 2991,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Convert the input number to a float\n    num = float(num)\n    # Check if the number is within the range of a decimal number with a precision of 2\n    if num >= 1 and num <= 100:\n        return True\n    else:\n        return False\n",
        "test": "assert is_decimal(\"123.45678\") == False",
        "num_ids": 3259,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store unique elements\n    unique = set()\n    # Loop through the list of numbers\n    for num in arr:\n        # If the element is already in the set, return False\n        if num in unique:\n            return False\n        # Add the element to the set\n        unique.add(num)\n    # If the loop completes without finding a duplicate element, return True\n    return True",
        "test": "assert unique_Element([1, 2, 3, 2, 1]) == False, \"The function should return True if there is only one unique element in the given list\"",
        "num_ids": 1898,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(13) == False",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 1, 1, 1, 1], 5) == 0",
        "num_ids": 2314,
        "indeed": true
    },
    {
        "number": 764,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n\n    Parameters:\n    ----------\n    str: str\n        The string to be analyzed.\n\n    Returns:\n    --------\n    int\n        The count of digits in the string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"123\") == 3",
        "num_ids": 1232,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    return math.isclose(n, math.factorial(n), rel_tol=0.01)",
        "test": "assert is_polite(1) == 1",
        "num_ids": 2891,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n\n    # create an empty list to store pairs of consecutive items\n    pairs = []\n\n    # iterate through the list of items\n    for i in range(1, len(l1)):\n\n        # check if the next item is the same as the current item plus one\n        if l1[i] == l1[i-1] + 1:\n\n            # add the pair to the list of pairs\n            pairs.append((l1[i-1], l1[i]))\n\n    # return the list of pairs\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 3147,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 1782,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([], []) == []",
        "num_ids": 1501,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += 1/i**4\n    return sum",
        "test": "assert odd_num_sum(10) == 640",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return True",
        "test": "assert check_expression('a)b') == False",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Create an empty list to store the words with k length\n    result = []\n\n    # Iterate through the list of words and add the words with k length to the result list\n    for word in words:\n        if len(word) == K:\n            result.append(word)\n\n    # Join the list of words with spaces in between and return the result\n    return \" \".join(result)\n",
        "test": "assert remove_length(\"hello world\", 0) == \"\"",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # If there is only one match, return the position of it\n    if len(matches) == 1:\n        return matches[0]\n\n    # If there are multiple matches, return a list of positions and values\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n    return positions",
        "test": "assert occurance_substring(\"The quick brown fox jumps over the lazy dog\", \"not a substring\") == None",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False",
        "num_ids": 1803,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    i, j = 0, 0\n    while j < len(test_str):\n        if test_str[j] in vowels:\n            if j - i >= 3 and test_str[j - i] in vowels and test_str[j - i - 1] in vowels:\n                count += 1\n            i += 1\n        j += 1\n    return count",
        "test": "assert count_vowels(\"\") == 0 # empty string has no vowels",
        "num_ids": 1804,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # create a list of non-repeated elements\n    non_repeated = []\n    for key, value in freq.items():\n        if value == 1:\n            non_repeated.append(key)\n    \n    # return the sum of the non-repeated elements\n    return sum(non_repeated)",
        "test": "assert find_sum([]) == 0",
        "num_ids": 2210,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sublist = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i]!= list1[i-1]:\n            sublist.append(list1[i])\n    return sublist\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 3484,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublists_count = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is not in the dictionary, add it with a value of 1\n        if element not in sublists_count:\n            sublists_count[element] = 1\n        # If the element is already in the dictionary, increment its value by 1\n        else:\n            sublists_count[element] += 1\n\n    # Return the dictionary\n    return sublists_count",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 3277,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Convert the test_list into a set to remove duplicates\n    test_set = set(test_list)\n    \n    # Create a list of tuples (sum, item)\n    tuples_list = list(combinations(test_set, 2))\n    \n    # Sort the list by the sum of the tuples\n    tuples_list.sort(key=lambda x: x[0])\n    \n    return tuples_list",
        "test": "assert find_combinations([1, 2, 3, 4, 5]) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]",
        "num_ids": 6649,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(0) == 0",
        "num_ids": 1993,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] % 2!= 0:  # check if current element is odd\n            subarray = arr[i:i+2]  # create subarray\n            subarray_sum = sum(subarray)  # calculate sum of subarray\n            odd_length_sum += subarray_sum  # add subarray sum to overall sum\n    return odd_length_sum",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 2553,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert a RGB color to HSV color model. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Calculate the average color components\n    average_r = (r + g + b) / 3\n    average_g = (r + g + b) / 3\n    average_b = (r + g + b) / 3\n\n    # Calculate the maximum and minimum color values\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n\n    # Calculate the hue, saturation and value components\n    if max_color == min_color:\n        hue = 0\n        saturation = 0\n    else:\n        hue = ((g - b) / (max_color - min_color)) * 60\n        if g < b:\n            hue += 60\n        if hue < 0:\n            hue += 360\n\n    value = (max_color - min_color) / 255\n\n    # Convert to HSV\n    hsv_color = (hue, saturation, value)\n    return hsv_color",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0.0, 0.0)",
        "num_ids": 4624,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num\n    \n    return product",
        "test": "assert mul_even_odd([]) == 1",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(map(int, test_str.split(',')))\n    except ValueError:\n        return None",
        "test": "assert tuple_str_int(\"123,456\") == (123, 456)",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def right_insertion(a, x):\n    '''\n    Locate the right insertion point for a specified value in a sorted list.\n\n    Args:\n    a (list): A sorted list of values.\n    x (int): A value to locate the right insertion point for.\n\n    Returns:\n    int: The index of the right insertion point, or -1 if x is not present in the list.\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 1980,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[ab]{3}'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"abcd\") == False",
        "num_ids": 2582,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = (test_list, test_str)\n    return test_tuple",
        "test": "assert new_tuple(\"hello\", \"world\") == (\"hello\", \"world\")",
        "num_ids": 1435,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if sum(nums[i::2]) % 2 == 0:\n                return True\n    return False",
        "test": "assert even_position([2, 4, 6, 8, 10]) # False",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and returns a new tuple that \n    includes only the elements that are not tuples.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.append(item)\n    return tuple(result)",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 2037,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for list in input_list:\n        count += 1\n    return count",
        "test": "assert count_list([]) == 0, \"count_list([]) should return 0\"",
        "num_ids": 1606,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:  # base case\n        return -1\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1",
        "test": "assert last([1,2,3,4,5], 6) == -1",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb(\"ab\") == True",
        "num_ids": 1572,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def return_sum(dictionary):\n    total = 0\n    for key in dictionary:\n        if isinstance(dictionary[key], dict):\n            total += return_sum(dictionary[key])\n        else:\n            total += dictionary[key]\n    return total",
        "test": "assert return_sum({}) == 0",
        "num_ids": 1568,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum\n\nprint(sum_odd(10))  # Output: 30 (1+3+5+7+9=30)",
        "test": "assert sum_odd(1) == 1, \"The sum of all odd natural numbers within the range 1 and 1 should be 1\"",
        "num_ids": 1269,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total",
        "test": "assert _sum([]) == 0",
        "num_ids": 1235,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def left_rotate(n, d):\n    if d > 32:\n        raise ValueError(\"d must be less than or equal to 32\")\n    mask = 0b1 << d\n    return (n & mask) | (n >> d)",
        "test": "assert left_rotate(0,8) == 0 # left_rotate(0,8) should return 0",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 1082,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            for k in range(z, y+1):\n                if i == j == k:\n                    count += 1\n    return count",
        "test": "assert test_three_equal(1, 2, 4) == 0",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    i = 0\n    while i < n-1:\n        if arr[i] > arr[i+1]:\n            count += 1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else:\n            i += 1\n    return count",
        "test": "assert count_rotation([]) == 0, \"Test failed for arr=[]\"",
        "num_ids": 2609,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_perfect_square(n // 2)\n        else:\n            return False",
        "test": "assert is_perfect_square(10) == False, \"The number 10 is a perfect square.\"",
        "num_ids": 1649,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0",
        "test": "assert is_product_even([2, 3, 4, 5]) == True",
        "num_ids": 1618,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n\n    max_sum = float('-inf')\n    max_index = -1\n\n    for i, l in enumerate(lists):\n        total_sum = sum(l)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_index = i\n\n    return lists[max_index]",
        "test": "assert max_sum_list([1, 2, 3, 4, 5, 6, 7, 8]) == [3, 5, 8, 13, 21, 34]",
        "num_ids": 3053,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 1\n    start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if start == i:\n                max_run += 1\n            else:\n                start = i\n    \n    return max_run",
        "test": "assert max_run_uppercase(\"aaaa\") == 1",
        "num_ids": 2017,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num",
        "test": "assert first_odd([]) == None",
        "num_ids": 1529,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # Check if the length of the input tuple is not less than K\n    if len(test_tup) < K:\n        return False\n\n    # Initialize a boolean variable to store whether the k exists or not\n    k_exists = False\n\n    # Loop through the elements of the input tuple and check if the k exists or not\n    for element in test_tup:\n        if element == K:\n            k_exists = True\n            break\n\n    # Return True if k_exists is True, False otherwise\n    return k_exists",
        "test": "assert check_K((\"apple\", \"banana\", \"pear\"), 3) == False",
        "num_ids": 1923,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for pair in zip(test_tup1, test_tup2):\n        if pair[1] < pair[0]:\n            return True\n    return False",
        "test": "assert check_smaller((1, 2), (1, 1)) == True",
        "num_ids": 1677,
        "indeed": true
    }
]