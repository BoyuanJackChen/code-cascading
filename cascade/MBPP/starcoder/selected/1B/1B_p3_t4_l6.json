[
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = set(test_tup1).intersection(test_tup2)\n    return common_elements",
        "test": "assert similar_elements((1, 2, 3), (2, 3, 4)) == set([2, 3])",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False\n",
        "test": "assert is_not_prime(0) == True, \"The function should return True for positive integers.\"",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [num for num in heap if num!= float('-inf') and num!= float('inf')]",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5], 0) == []",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    elif x % 2 == 0:\n        return is_Power_Of_Two(x // 2)\n    else:\n        return False",
        "test": "assert is_Power_Of_Two(4) == False",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nlong_words = find_char_long(text)\nprint(long_words)",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Get the length of the string\n    n = len(str)\n\n    # Initialize the minimum rotation count as 1 (one rotation)\n    min_rotations = 1\n\n    # Iterate through each character in the string\n    for i in range(n):\n\n        # Initialize the counter for the current character\n        count = 0\n\n        # Iterate through the remaining characters\n        for j in range(i+1, n):\n\n            # If the current character is equal to the next character, increment the counter\n            if str[i] == str[j]:\n                count += 1\n\n                # If the counter is greater than the minimum rotation count, update it\n                if count > min_rotations:\n                    min_rotations = count\n\n    return min_rotations",
        "test": "assert find_Rotations(\"hello\") == 1",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0 \n    for i in range(len(s)): \n        if s[i] == ch: \n            count += 1 \n    if count == 1: \n        return s\n    elif count == 2: \n        return s[1:]\n    else:\n        return s",
        "test": "assert remove_Occ('hello world', 'z') == 'hello world'",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        # Find the maximum element in the current row\n        max_sum = 0\n        for j in range(n):\n            if M[i][j] > max_sum:\n                max_sum = M[i][j]\n        # Swap the row with the maximum sum\n        for j in range(n):\n            M[i][j], M[i][n-j-1] = M[i][n-j-1], M[i][j]\n    return M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b\n    return volume",
        "test": "assert find_Volume(10,10,5) == 50",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore, and False otherwise.\n    '''\n    # Convert the text to lowercase and remove any non-letter characters\n    text = ''.join(filter(str.islower, text)).strip()\n    # Check if the length of the text is zero (i.e., if it contains no lowercase letters)\n    if len(text) == 0:\n        return True\n    # If the text has no underscore, return True\n    if text.count('_') == 0:\n        return True\n    # If the text has an underscore and has multiple underscores, return False\n    return False",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pattern = re.compile(r'[{}].*[{}]'.format(string, string))\n    return pattern.sub('', string)\n\nstring = 'hello world'\nstring_list = str_to_list(string)\nprint(string_list)",
        "test": "assert str_to_list(\"hello, world!\") == [\"hello\", \"world\"]",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty set to store unique integers\n    unique_nums = set()\n\n    # Loop through each integer in the array\n    for num in arraynums:\n        # If the integer is already in the set, return True\n        if num in unique_nums:\n            return True\n\n        # Otherwise, add the integer to the set\n        unique_nums.add(num)\n\n    # If the loop completes without finding a duplicate, return False\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the list of numbers that can be woodball\n    woodball = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\n    # Check if the given number is in the list of woodball numbers\n    if x in woodball:\n        return True\n    else:\n        return False",
        "test": "assert is_woodall(100000) == False",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 2:\n        return True\n    else:\n        return False",
        "test": "assert rev(3) == 0",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Max_Num(arr):\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 5, \"The function should return 5 for the given input [1, 2, 3, 4, 5].\"",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return True",
        "test": "assert opposite_Signs(4, -3) == True, \"The given two integers have opposite sign.\"",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_octagonal(n):\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        if is_octagonal(n - 1):\n            return True\n        else:\n            return False\n    else:\n        if is_octagonal(n - 2):\n            return True\n        else:\n            return False",
        "test": "assert is_octagonal(1) == True",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize a dictionary to store the count of substrings\n    substring_count = defaultdict(int)\n\n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Iterate through each character from i to the end of the string\n        for j in range(i, len(s)):\n            # Compute the difference between the sum of digits and the length of the substring\n            diff = sum(int(digit) for digit in s[i:j+1]) - j\n\n            # If the difference is less than or equal to the length of the substring\n            if diff <= len(s[i:j+1]):\n                # Increment the count of substrings with the given difference\n                substring_count[diff] += 1\n\n    # Return the count of substrings\n    return len(substring_count)",
        "test": "assert count_Substrings(\"\") == 0",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num",
        "test": "assert smallest_num([1, 2, 3]) == 1",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # define the initial values\n    max_diff = 0\n    i = 0\n    j = 1\n\n    # iterate through the list and calculate the difference for each pair\n    while i < len(test_list) and j < len(test_list):\n        diff = abs(test_list[i] - test_list[j])\n        if diff > max_diff:\n            max_diff = diff\n        if test_list[i] < test_list[j]:\n            i += 1\n        else:\n            j += 1\n\n    # return the maximum difference\n    return max_diff",
        "test": "assert max_difference([1, 2, 2, 2]) == 1",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks",
        "test": "assert subject_marks([('Maths', 90), ('English', 85), ('History', 75), ('Physics', 95), ('Chemistry', 80)]) == [('Maths', 90), ('English', 85), ('History', 75), ('Physics', 95), ('Chemistry', 80)]",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def helper(data_list, current_sum):\n        if len(data_list) == 0:\n            return current_sum\n        else:\n            return helper(data_list[1:], current_sum + data_list[0])\n\n    return helper(data_list, 0)\n",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5, \"pos_count([1, 2, 3, 4, 5]) should return 5.\"",
        "num_ids": 236,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Define a list of possible partitions of n elements\n    partitions = []\n    for i in range(n+1):\n        partitions.append([i])\n\n    # Define the number of partitions\n    num_partitions = len(partitions)\n\n    # Define the list of ways to partition each partition\n    ways = []\n    for partition in partitions:\n        # Define the length of the partition\n        length = len(partition)\n\n        # Define the remaining elements in the partition\n        remaining = [i for i in range(n+1) if i not in partition]\n\n        # Define the number of ways to partition the partition\n        ways.append(len(remaining) * length)\n\n    # Return the number of ways to partition all partitions\n    return sum(ways)",
        "test": "assert bell_number(4) == 0",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(n):\n        if A[i] < A[i+1]:\n            return False\n    return True",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == False",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n",
        "test": "assert is_sublist([1, 2, 3], [1, 3]) == False",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a flag to indicate whether all the tuples have equal length\n    is_all_equal = True\n    \n    # Loop over all the tuples in the input list\n    for i in range(len(Input)):\n        # Loop over all the subsequent tuples to compare with the current one\n        for j in range(i+1, len(Input)):\n            # If the length of the current tuple is not equal to the length of the subsequent tuple,\n            # then the input list is not all equal. Set the flag to False and break out of the loop.\n            if len(Input[i])!= len(Input[j]):\n                is_all_equal = False\n                break\n    \n    # Return the flag indicating whether all the tuples have equal length\n    return is_all_equal",
        "test": "assert find_equal_tuple([1, 2, 3, 4, 5]) == ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def comb_sort(nums):\n    for i in range(len(nums)):\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums",
        "test": "assert comb_sort([1]) == [1]",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def dif_Square(n):\n    if n < 1:\n        return \"Invalid input\"\n    else:\n        square = int(n ** 0.5)\n        if square * square == n:\n            return True\n        else:\n            return False",
        "test": "assert dif_Square(1) == 1",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_samepatterns(colors, patterns):\n    for pattern in patterns:\n        if pattern in colors:\n            return False\n    return True",
        "test": "assert is_samepatterns([], []) == True",
        "num_ids": 1478,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_set = set()\n    for i in test_list:\n        if i % K in tuples_set:\n            return [i]\n        tuples_set.add(i)\n    return []",
        "test": "assert find_tuples([], 3) == []",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Divide the number by 11 and check if it's odd\n    if n % 11 == 10 or n % 11 == 11:\n        return True\n    else:\n        return False",
        "test": "assert is_Diff(9) == False",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[-1] # split the sentence into words\n    word_length = len(word) # get the length of the word\n    if word_length % 2!= 0: # check if the length of the word is odd\n        return \"The word is odd.\" # return the message if the word is odd\n    else:\n        return \"The word is even.\" # return the message if the word is even",
        "test": "assert word_len(\"date\") == 4",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n <= 1:\n        return n\n\n    # The number of sides of the triangle\n    sides = n//2 + 1\n\n    # We can use the formula T(n) = n^2 * (n+1)^2 * (2n+1)^2\n    # We also need to take the cube root of T(n) to get the nth tetrahedral number\n    T = n**2 * (n+1)**2 * (2*n+1)**2\n\n    # Calculate the cube root of T(n)\n    sqrt_T = int(T**(1/3))\n\n    # Return the nth tetrahedral number\n    return sqrt_T",
        "test": "assert tetrahedral_number(1) == 1, \"The function should return 1 for n = 1.\"",
        "num_ids": 1196,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculate the volume of a sphere with the given radius r.\n    '''\n    return (4/3) * math.pi * r**3",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * (1)**3",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_str = []\n    for char in strr:\n        ascii_str.append(ord(char))\n    mod = sum(ascii_str) % 26\n    return chr(mod)",
        "test": "assert get_Char(\"123\") == \"2\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\nprint(sequence(20)) # output: 2884",
        "test": "assert sequence(10) == 55",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2",
        "test": "assert surfacearea_sphere(1) == 12.566370614359172",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    if n % 2 == 0:  # If n is even\n        return centered_hexagonal_number(n // 2) * (n // 2)  # Return the doubled centered hexagonal number\n    else:\n        return n * (3 * n - 1) / 2  # Return the n-th centered hexagonal number",
        "test": "assert centered_hexagonal_number(2) == 1",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from collections import defaultdict\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return freq",
        "test": "assert freq_count([]) == {}",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def closest_num(N):\n    '''\n    Find the closest smaller number than N.\n    '''\n    closest = float('inf')\n    for i in range(1, N):\n        if abs(N - i) < closest:\n            closest = abs(N - i)\n    return closest\n",
        "test": "assert closest_num(2) == 1",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # initialize the variable to keep track of the current length of the word\n    current_length = 0\n\n    # loop through each item in the list\n    for word in list1:\n        # if the current length of the word is greater than the current length of the longest word, update the longest word\n        if len(word) > current_length:\n            current_length = len(word)\n\n    # return the length of the longest word\n    return current_length",
        "test": "assert len_log([\"dog\", \"cat\", \"bird\", \"fish\"]) == 4",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # convert list of string values into a set to remove duplicates\n    str1 = set(str1)\n    sub_str = set(sub_str)\n    # check if sub_str is a substring of str1\n    if sub_str.issubset(str1):\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"hello world\", \"world\") == True",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # First, check if the number is divisible by any odd number between 1 and n.\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            return False\n    \n    # If the number is not divisible by any odd number, then it is undulating.\n    return True",
        "test": "assert is_undulating(24) == False",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b",
        "test": "assert power(2,3) == 8",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))",
        "test": "assert index_minimum([('a', 10), ('b', 20), ('c', 30), ('d', 40)]) == ('a', 10)",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list of lists.\n    '''\n    min_list = lst[0]\n    for item in lst:\n        if len(item) < len(min_list):\n            min_list = item\n    return len(min_list)",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5, 6]]) == 3",
        "num_ids": 1007,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        count += i // i\n    return count",
        "test": "assert divisor(1) == 1",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Create dictionary to store frequency\n    frequency = {}\n    \n    # Iterate over elements in flattened list and count their frequency\n    for element in flattened_list:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    \n    # Return dictionary of frequency\n    return frequency",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_num(numbers):  \n    total_number = 1\n    for num in numbers:  \n        total_number *= num  \n    length = len(numbers)  \n    return total_number / length  ",
        "test": "assert multiply_num([0]) == 0  # zero multiplication",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(0) == ''",
        "num_ids": 1391,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def next_smallest_palindrome(num):\n    n = num\n    while True:\n        n = str(num)\n        n = ''.join(filter(str.isdigit, n))\n        if n == n[::-1]:\n            return int(n)\n        num += 1\n",
        "test": "assert next_smallest_palindrome(101) == 101",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def kth_element(arr, k):\n    # Check if k is within range\n    if k < 1 or k > len(arr):\n        return None\n    \n    # Initialize start and end indices\n    start = 0\n    end = len(arr) - 1\n    \n    # Initialize result variable\n    result = None\n    \n    # While start is less than or equal to end, check if the kth element is in the middle\n    while start <= end:\n        mid = (start + end) // 2\n        \n        # If the mid element is the kth element, return it\n        if mid + 1 == k:\n            result = arr[mid]\n            break\n        \n        # If the mid element is greater than the kth element, move the start index to the left\n        elif arr[mid] < arr[mid + 1]:\n            start = mid + 1\n        \n        # If the mid element is less than the kth element, move the end index to the right\n        else:\n            end = mid - 1\n    \n    return result",
        "test": "assert kth_element([1, 2, 3, 4, 5], 5) == 5",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word[i].upper() for i in range(1, len(words)))",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def eulerian_num(n, m):\n    a = [0] * (n+1)\n    a[0] = 1\n    a[1] = 0\n    for i in range(2, n+1):\n        a[i] = (a[i-1] + a[i-2]) % m\n    \n    return a[n]",
        "test": "assert eulerian_num(15, 8) == 176",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sort_sublists(input_list):\n    '''\n    This function sorts each sublist of strings in a given list of lists.\n    '''\n\n    # Initialize a list to store the sorted sublists\n    sorted_list = []\n\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order\n        sublist.sort()\n        # Add the sorted sublist to the list of sorted sublists\n        sorted_list.append(sublist)\n\n    # Return the list of sorted sublists\n    return sorted_list",
        "test": "assert sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1609,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count",
        "test": "assert count([]) == 0",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup",
        "test": "assert add_lists([], (1,2,3)) == (1, 2, 3)",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merges three sorted lists into a single sorted list using the heapq library.\n    '''\n\n    # initialize an empty list to store the merged list\n    merged_list = []\n\n    # iterate through each element in the three sorted lists\n    for num in num1 + num2 + num3:\n\n        # if the current element is greater than or equal to the last element in the merged list, add it to the merged list\n        if len(merged_list) > 0 and merged_list[-1] < num:\n            merged_list.append(num)\n\n        # otherwise, if the merged list is not empty, add the current element to the merged list and remove the last element from the merged list\n        else:\n            if len(merged_list) > 0:\n                merged_list.pop()\n            merged_list.append(num)\n\n    # return the merged list\n    return merged_list",
        "test": "assert merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) % 2 == 1: # Check if the length of the string is odd\n        s = \"0\" + s\n    # Initialize the variables for the binary string and its reverse\n    binary = s[::-1]\n    reverse_binary = binary[::-1]\n    # Initialize the count variable and loop through each possible rotation\n    count = 0\n    for i in range(n):\n        # Rotate the binary string by one position and compare with the reverse_binary\n        if binary == reverse_binary:\n            count += 1\n            # Check if the rotation is valid\n            if count < n:\n                # If the rotation is valid, rotate the binary string by one position and compare with the reverse_binary\n                binary = binary[1:] + binary\n                reverse_binary = reverse_binary[1:] + reverse_binary\n                # Repeat the loop\n                count += 1\n        else:\n            break\n    return count",
        "test": "assert odd_Equivalent(\"111111111\",3) == 0 # testcase 2",
        "num_ids": 1906,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def common_in_nested_lists(nestedlist):\n    # Initialize empty list to store common elements\n    common_elements = []\n\n    # Traverse through all elements of the nested list\n    for element in nestedlist:\n        # Check if the current element is in the common elements list\n        if element in common_elements:\n            # If it is, add it to the result list\n            common_elements.append(element)\n\n    return common_elements",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9],[1,2,4]]) == []",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if len(i) == 0:\n            return False\n    \n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in range(len(nums)):\n        num += nums[i]\n    return num",
        "test": "assert tuple_to_int(()) == 0",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    converted_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, (int, float)):\n                converted_list.append(float(item))\n            elif isinstance(item, str):\n                try:\n                    converted_list.append(float(item))\n                except ValueError:\n                    pass\n    return converted_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"apple banana orange\") == [\"apple\", \"banana\", \"orange\"]",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def search(arr):\n    '''\n    This function takes in a sorted array as input and returns the element that appears only once in the array.\n    '''\n\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        # If the element at the left pointer is equal to the element at the right pointer, return the element at the left pointer\n        if arr[left] == arr[right]:\n            return arr[left]\n\n        # If the element at the left pointer is greater, move the left pointer to the right\n        elif arr[left] < arr[right]:\n            left += 1\n\n        # If the element at the right pointer is greater, move the right pointer to the left\n        else:\n            right -= 1\n\n    # If the while loop reaches the end without finding the element, return None\n    return None\n",
        "test": "assert search([1, 1, 1]) == 1",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_product_tuple(list1):\n    # Create a dictionary to store the products of all the numbers in the list\n    products = {}\n    \n    # Iterate through the list and update the products dictionary with the current product of all the numbers\n    for num in list1:\n        products[num] = products.get(num, 0) + num\n        \n    # Find the maximum absolute product between numbers in pairs of tuples within the list\n    max_product = max(max(products.values()), key=abs)\n    \n    return max_product",
        "test": "assert max_product_tuple([1, 2, 3, 4, 5, 6, 7, 8]) == (120, 720)",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i > 1:\n            for j in range(1, i):\n                if i % j == 0:\n                    break\n            else:\n                amicable_sum += i\n    return amicable_sum",
        "test": "assert amicable_numbers_sum(10000) == 50479",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # convert complex numbers to complex numbers\n    c = a + b*1j\n    \n    # get magnitude and phase\n    magnitude = c.real**2 + c.imag**2\n    angle = cmath.phase(c)\n    \n    # return angle\n    return angle",
        "test": "assert angle_complex(0,0) == 0, \"The angle of a complex number is 0 degrees.\"",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_length = 0\n    for i in range(len(string)):\n        count = sum(int(bit) for bit in string[i:])\n        if count > max_length:\n            max_length = count\n    return max_length",
        "test": "assert find_length(\"\") == 0",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    else:\n        common_divisor = 0\n        while a % b!= 0:\n            common_divisor += 1\n            a //= b\n        return common_divisor",
        "test": "assert sum(3, 6) == 1, \"The sum of common divisors of 3 and 6 is not 1.\"",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(5, 'The quick brown fox jumps over the lazy dog') == ['quick', 'brown', 'jumps', 'lazy']",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    num_squares = rows * cols\n    if rows!= cols:\n        print(\"The matrix must be a square.\")\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= i+j+1:\n                print(f\"The {i+1}, {j+1}th element is not {i+j+1}.\")\n                return False\n    print(\"The matrix is a magic square.\")\n    return True",
        "test": "assert magic_square_test([[1,2,3],[4,5,6],[7,8,9],[1,1,1]]) == False",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        frequency_dict[num] += 1\n        if frequency_dict[num] > max_freq:\n            max_freq = frequency_dict[num]\n            max_item = num\n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == 5",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n    return reversed_str",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Function to convert a tuple to a string.\n    '''\n\n    return str(tup1)",
        "test": "assert tup_string(('a', 1, 'b')) == \"('a', 1, 'b')\"",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through each number in the list\n    for num in nums:\n\n        # Check if the number is negative\n        if num < 0:\n\n            # Add the negative number to the sum\n            sum += num\n\n    # Return the sum\n    return sum",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def hexagonal_num(n): \n    # Base case: n == 1\n    if n == 1: \n        return 1\n    # Calculate the difference between n and 1 \n    d = n - 1\n    # Return the sum of the hexagonal numbers up to and including d \n    return sum(range(1, d+1)) + sum(range(d-1, 0, -1))\n",
        "test": "assert hexagonal_num(1) == 1 # The second hexagonal number is 1",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes.\n    '''\n    count = 0\n    non_zero_count = 0\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n        count += 1\n\n    if count == 0:\n        return \"Array is empty\"\n    else:\n        return float(zero_count) / float(count)",
        "test": "assert zero_count([1, 2, 3, 4, 5, 5]) == 0.0",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    power = 1\n    \n    # Iterate through all the numbers from 1 to n\n    while power <= n:\n        # If the current number is a power of 2, increment the count\n        if power & 1:\n            count += 1\n        # Multiply the current power by 2 and increment the power\n        power *= 2\n        \n    # Check if the count is equal to the number of ones in the binary representation of n\n    return count == n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True, \"1 is not a valid number\"",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def circle_circumference(r):\n    '''\n    Function to find the circumference of a circle.\n\n    Parameters:\n    r (float): radius of the circle.\n\n    Returns:\n    float: the circumference of the circle.\n\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference",
        "test": "assert circle_circumference(0) == 0, \"circle_circumference(0) should return 0\"",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened numbers\n    flattened_numbers = set()\n    \n    # Iterate through each element in the list\n    for element in test_list:\n        # If the element is a list, recursively call the function to flatten it\n        if isinstance(element, list):\n            flattened_numbers.update(extract_singly(element))\n        # If the element is not a list, add it to the flattened set\n        else:\n            flattened_numbers.add(element)\n    \n    return flattened_numbers",
        "test": "assert extract_singly([[1, 2], [3, 4]]) == set([1, 2, 3, 4])",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n\n    n = len(nums)\n\n    # Iterate through the list\n    for i in range(n):\n        # Keep track of the last element in the list\n        last = nums[i]\n\n        # Iterate through the list from index 1 to n-i-1\n        for j in range(i+1, n):\n            # If the current element is smaller than the last element in the list\n            if nums[j] < last:\n                # Swap the last element with the current element\n                nums[i], nums[j] = nums[j], nums[i]\n                # Update the last element to be the current element\n                last = nums[i]\n\n    return nums",
        "test": "assert pancake_sort([5, 3, 2, 1, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    This function takes three lists and returns the number of items that are identical in the same position of the three lists.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through the first list\n    for i in range(len(list1)):\n        # Loop through the second list\n        for j in range(len(list2)):\n            # Loop through the third list\n            for k in range(len(list3)):\n                # If the values of the i-th, j-th, and k-th elements of the first list are identical, increment the count variable\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                    break\n\n    # Return the count variable\n    return count",
        "test": "assert count_samepair([1,2,3], [2,3,4], [1,2,3]) == 2",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    \n    # Initialize count variable\n    count = 0\n    \n    # Iterate over each element in the tuple\n    for element in Input:\n        \n        # Check if element is a list\n        if isinstance(element, list):\n            \n            # Increment count variable\n            count += 1\n            \n    # Return count variable\n    return count",
        "test": "assert find_lists(\"apple\") == 0",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 1, 1]) == 0",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\n    Args:\n    a (int): The value of x.\n    b (int): The value of y.\n    n (int): The value of the equation.\n\n    Returns:\n    tuple or None: A tuple containing the values x and y that satisfy ax + by = n, or None if no solution exists.\n    \"\"\"\n\n    # Use the binary search algorithm to find the roots\n    x_low = a\n    x_high = n\n    while x_high - x_low > 1e-12:\n        x_mid = (x_low + x_high) / 2\n        if (a * x_mid + b) ** 2 == n:\n            return x_mid, n / (a * x_mid + b)\n        elif (a * x_mid + b) ** 2 < n:\n            x_low = x_mid\n        else:\n            x_high = x_mid\n\n    return None",
        "test": "assert find_solution(1, 1, 0) == None # This should return None because 1 + 1 = 0 and 1 + 1 = 1",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n\n    Parameters:\n    list1: list\n        A list containing the elements to be removed.\n    list2: list\n        A list containing the elements to be kept.\n\n    Returns:\n    list\n        A new list containing the elements from list1 that are not present in list2.\n\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [3, 5]) == [1, 2, 4]",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(1, n, 2):\n        result += i\n    return result",
        "test": "assert sum_series(20) == 505",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given its length and number of sides.\n    '''\n    area = (s * l * (s - l) / 2) ** 0.5\n    return area",
        "test": "assert area_polygon(4, 4) == 109.6346",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n // i == i:\n            return True\n    return False",
        "test": "assert div_sum(40) == 56",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_char_position(str1):\n    '''\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Create a dictionary to store the position of each character in the English alphabet\n    char_positions = {}\n    for char in str1:\n        if char.isalpha():\n            char = char.lower()\n            if char in char_positions:\n                char_positions[char] += 1\n            else:\n                char_positions[char] = 1\n\n    # Count the number of characters that occur at the same position as in the English alphabet\n    char_count = 0\n    for position, count in char_positions.items():\n        if position == 'a' or position == 'e' or position == 'i' or position == 'o' or position == 'u':\n            char_count += count * 2\n        elif position == 'b' or position == 'c' or position == 'd' or position == 'f' or position == 'g' or position == 'h' or position == 'j' or position == 'k' or position == 'l' or position =='m' or position == 'n' or position == 'p' or position == 'q' or position == 'r' or position =='s' or position == 't' or position == 'v' or position == 'w' or position == 'x' or position == 'y' or position == 'z':\n            char_count += count\n\n    return char_count",
        "test": "assert count_char_position(\"123\") == 0",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_even_pair(A):\n    count = 0\n    xor = 0\n    for i in A:\n        xor ^= i\n    if xor % 2 == 0:\n        count = xor // 2\n    else:\n        count = xor // 2 + 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a variable to store the smallest power of 2 that is greater than or equal to n\n    smallest_power_of_2 = 1\n\n    # Loop through all the numbers from 1 to the square root of n\n    while smallest_power_of_2 < n:\n        smallest_power_of_2 <<= 1\n\n    # Return the value of the smallest power of 2 that is greater than or equal to n\n    return smallest_power_of_2",
        "test": "assert next_power_of_2(64) == 64",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for element in a:\n        if element == x:\n            count += 1\n    return count",
        "test": "assert frequency('pear', ['apple', 'banana', 'banana', 'banana', 'apple', 'banana', 'orange']) == 0",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if the list1 is of type list\n    if not isinstance(list1, list):\n        return None\n\n    # Check if the indices are of type int\n    if not isinstance(m, int) or not isinstance(n, int):\n        return None\n\n    # Check if the indices are within the bounds of the list1\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return None\n\n    # Calculate the sum of elements within the range\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i]\n\n    return sum_list",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 2) == 1",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (3 * a) ** 2\n    return p",
        "test": "assert perimeter_pentagon(4) == 20, \"The perimeter of a regular pentagon from the length of its sides should be equal to 20.\"",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def count_occurance(s):\n    count = 0\n    for char in s:\n        if char =='s' or char == 'd' or char == 't' or char == 'n':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"Hello, world!\") == 1",
        "num_ids": 1345,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for element in test_tuple:\n        if type(element)!= type(test_tuple[0]):\n            return False\n    return True",
        "test": "assert check_type((1, 2, 3)) is True",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n        if count == n/2:\n            return True\n    return False",
        "test": "assert is_majority([1,2,3,4,5], 3, 1) == False, \"The element 1 should not be the majority element in the given sorted array [1,2,3,4,5].\"",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Set_Bits(n):\n    # Initialize count variable to 0\n    count = 0\n    \n    # Iterate through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # Check if the binary representation of n contains a set bit\n        if bin(n)[i] == '1':\n            # Increment count by 1 for each set bit\n            count += 1\n    \n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Check if l is less than r\n    if l >= r:\n        return False\n\n    # Initialize count as 0\n    count = 0\n\n    # Check if l is a power of 2\n    if not l:\n        return False\n\n    # Calculate the number of bits required to represent n\n    bits = 0\n    while n >= 2:\n        n >>= 1\n        bits += 1\n\n    # Iterate through the range from l to r and check if all the bits are set in the range\n    for i in range(l, r + 1):\n        if not i:\n            count += 1\n        if i % bits == 0 and i - l == n:\n            count += 1\n\n    # If all the bits are set, return True\n    return count == r - l + 1",
        "test": "assert all_Bits_Set_In_The_Given_Range(3, 0, 1) == False, \"all_Bits_Set_In_The_Given_Range(3, 0, 1) should return False\"",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize variables\n    neg_count = 0\n    pos_count = 0\n    neg_pos_pair = []\n\n    # Iterate through the array\n    for i in range(n):\n        # Check if the current element is a negative number\n        if arr[i] < 0:\n            # If so, increment the negative counter\n            neg_count += 1\n        # Check if the current element is a positive number\n        else:\n            # If so, increment the positive counter\n            pos_count += 1\n        # Append the pair of negative and positive numbers to the neg_pos_pair list\n        neg_pos_pair.append((arr[i], arr[i+n]))\n\n    # Check if the number of negative elements is greater than the number of positive elements\n    if neg_count > pos_count:\n        # If so, reverse the list of negative numbers and the list of positive numbers\n        arr[1:n+1] = neg_pos_pair[::-1]\n    # If the number of negative elements is less than or equal to the number of positive elements, do nothing\n    else:\n        # If so, leave the list of negative numbers and the list of positive numbers as is\n        pass\n\n    return arr",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n\n    # convert string to lowercase\n    str1 = str1.lower()\n\n    # replace blank spaces with character\n    str1 = str1.replace(\" \",char)\n\n    return str1",
        "test": "assert replace_blank(\"hello world\", \" \") == \"hello world\"",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([], 0) == [] # empty list",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cylinder with radius r and height h.\n    \"\"\"\n    return 2 * h * r",
        "test": "assert lateralsuface_cylinder(4,6) == 12",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(4) == 64",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    while n > 0:\n        if n % 2 == 0:\n            result |= 1 << (n - 1)  # set the appropriate bit\n        n >>= 1  # shift the number to the right by one bit\n    return result",
        "test": "assert even_bit_set_number(60) == 15",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count\n    count_dict = {}\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # convert the tuple to a string to make it unique\n        tup_str = str(tup)\n        # check if the tuple already exists in the dictionary\n        if tup_str in count_dict:\n            # if it does, increment its count by 1\n            count_dict[tup_str] += 1\n        else:\n            # if it doesn't, add it with a count of 1\n            count_dict[tup_str] = 1\n            \n    return count_dict",
        "test": "assert check_occurences([]) == {}",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)): \n        count += 1 \n        for j in range(i+1, len(str)+1): \n            if str[i:j]!= '': \n                count += 1 \n    return count",
        "test": "assert number_of_substrings(\"abcabcabc\") == 4",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    sequence = [0] * n\n    for i in range(n):\n        sequence[i] = i + 1\n    for i in range(m-1, 0, -1):\n        for j in range(n):\n            if sequence[j] > i + 2:\n                break\n            else:\n                sequence[j] += 1\n        else:\n            count += 1\n    return count\n\nm = int(input(\"Enter the value of m: \"))\nn = int(input(\"Enter the value of n: \"))\nprint(\"Number of possible sequences of length\", n, \"is:\", get_total_number_of_sequences(m, n))",
        "test": "assert get_total_number_of_sequences(7,5) == 15, \"The number of possible sequences of length 5 with each element between 2 and 6, is not equal to 15.\"",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    return list1",
        "test": "assert replace_list([1,2,3], [2,4,6]) == [1,2,3,4,6]",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_charac(str1):\n    '''\n    Counts the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"\") == 0 # empty string",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    for i in range(2, int(math.sqrt(N))+1):\n        if N % i == 0 and N // i!= i:\n            return i\n    return N+1",
        "test": "assert next_Perfect_Square(100) == 100",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_sum(arr):\n    max_sum = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] < arr[i]:\n            max_sum = max(max_sum, arr[i-1]+arr[i])\n    return max_sum",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 9, \"max_sum([1, 2, 3, 4, 5]) should return 9\"",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def babylonian_squareroot(number):\n    # Initial guess for the root\n    guess = number / 2\n\n    # Use the babylonian method to compute the square root\n    while abs(number - guess**2) > 0.00001:\n        guess = (number + guess) / 2\n\n    return guess",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n\n    max_length = 0\n    start = 0\n    for i in range(n):\n        for j in range(i):\n            if str[i] == str[j]:\n                max_length = max(max_length, dp[i][j])\n                if dp[i][j] > max_length:\n                    start = i\n\n    return max_length",
        "test": "assert lps(\"bab\") == 1",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return \"Error: n should be a positive integer.\"\n\n    sum = 1\n    for i in range(1, n):\n        sum += 1/i\n\n    return sum\n",
        "test": "assert harmonic_sum(1) == 1, \"Harmonic sum of 1 is incorrect.\"",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Args:\n        array_nums1: A list of integers\n        array_nums2: A list of integers\n\n    Returns:\n        A list of integers representing the intersection of the two arrays\n    \"\"\"\n\n    # Create a set to store the unique elements from array_nums1 and array_nums2\n    common_set = set(array_nums1) & set(array_nums2)\n\n    # Convert the set to a list and return it\n    return list(common_set)",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2, 3]",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 6) == 0",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def insert_element(list, element):\n    # create a new list with the element inserted before each element\n    new_list = [element] + list\n    \n    return new_list",
        "test": "assert insert_element([1,2,3],1)==[1,1,2,3]",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\n\ndef convert(numbers):\n    real = numbers[0]\n    imag = numbers[1]\n    # Convert complex number to polar coordinates\n    theta = math.atan2(imag, real)\n    r = math.sqrt(real**2 + imag**2)\n    # Return polar coordinates as a tuple\n    return (r, theta)",
        "test": "assert convert(1j) == (1, 0) # test the polar coordinates",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function returns the number of integer elements in the given list.\n    \"\"\"\n    return sum(1 for i in lst if isinstance(i, int))",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = combinations_with_replacement(l, n)\n    colors = [tuple(set(combination)) for combination in combinations]\n    return colors",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 3)]",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Initialize a list to store the prime numbers\n    primes = []\n    \n    # Iterate through the numbers from 2 to n\n    for num in range(2, n+1):\n        \n        # If the number is prime, add it to the list of primes\n        if num > 1:\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    break\n            else:\n                primes.append(num)\n    \n    # Return the number of prime numbers less than the given number\n    return len(primes)",
        "test": "assert count_Primes_nums(3) == 2 # test 1",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1), \"swap_numbers(1,2) failed. Expected (2,1), got {}\".format(swap_numbers(1,2))",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Returns the tuple with the greater value in each tuple.\n    '''\n    return max(test_tup1, test_tup2)",
        "test": "assert maximize_elements((1,2),(4,3)) == (4,3)",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # create a list of integers from 2 to n\n    primes = list(range(2, n+1))\n    # check if each prime is divisible by any of the integers in the list\n    for prime in primes:\n        if all(prime % i!= 0 for i in primes):\n            return prime\n    # if no prime found, return None\n    return None",
        "test": "assert newman_prime(10) == 1041587793554839893",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def division_elements(test_tup1, test_tup2):\n    # initialize variables to store the result\n    result_tup = []\n\n    # iterate through each element of the first tuple\n    for element in test_tup1:\n        # initialize variable to store the result of division\n        div = 0\n\n        # iterate through each element of the second tuple\n        for j in test_tup2:\n            # calculate the result of division of element with j and store it in div variable\n            div += element / j\n\n        # append div variable to result_tup\n        result_tup.append(div)\n\n    return result_tup",
        "test": "assert division_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (0, 1, 1, 2)",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age - 3",
        "test": "assert dog_age(5) == 5",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    N = step\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+N])\n        i += N\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l * l * l\n    return area",
        "test": "assert lateralsurface_cube(5) == 125 # side length = 5, 125 = 5^2",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    square_sum = 0\n    for i in range(1, n+1, 2):\n        square_sum += i*i\n    return square_sum",
        "test": "assert square_Sum(1) == 1, \"The sum of the squares of the first odd natural numbers is not equal to 1.\"",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Calculate the nth power of 5\n    power = 5 ** n\n    # Calculate the sum of the powers of 5 from 0 to n\n    total = sum(5 ** i for i in range(n))\n    # Return the result\n    return total",
        "test": "assert find_star_num(10) == 10",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character 'k' as input and returns its ASCII value.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # check if the element is even\n            even_sum += arr[i]\n            even_index += 1\n    return even_sum, even_index",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 36, \"The function should return 36, but it returns {}\".format(sum_even_and_even_index([1, 2, 3, 4, 5, 6]))",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        num = i * i * i * i * i\n        if num % 2 == 0:\n            sum += num\n    return sum",
        "test": "assert even_Power_Sum(5) == 32",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list",
        "test": "assert rear_extract([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]) == [4, 5, 3]",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup",
        "test": "assert substract_elements((\"apple\", \"banana\"), (\"kiwi\", \"grape\")) == (\"kiwi\", \"apple\")",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    #Function to find the sum of even index binomial coefficients\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += math.factorial(i)//math.factorial(i-1)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3 * np.pi * r**3 * h",
        "test": "assert volume_cylinder(0,5) == 0.0",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({\"a\": 5, \"b\": 7, \"c\": 1, \"d\": 9}, 10) == {}",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    element = test_tup[0]  # get the first element of the tuple\n    count = 1  # initialize count to 1\n    for i in range(1, len(test_tup)):\n        if test_tup[i] < element:  # if the element is less than the current element, increment count\n            count += 1  # increment count by 1\n    return count\n",
        "test": "assert count_first_elements(('apple', 'banana')) == 1",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def is_num_decagonal(n):\n    '''\n    Return True if the nth decagonal number is even, and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_num_decagonal(19) == 195, \"Incorrect result for 19\"",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 1) == (True, 0)",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a dictionary to store unique elements\n    unique_dict = {}\n    \n    # Iterate through the list\n    for item in test_list:\n        # If the item is not in the dictionary, add it\n        if item not in unique_dict:\n            unique_dict[item] = True\n            \n    # Check if all elements in the dictionary are unique\n    return len(unique_dict) == len(test_list)",
        "test": "assert all_unique([]) == True # empty list",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sub_list(nums1,nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for num in nums1:\n        if num not in nums2:\n            result.append(num)\n    return result",
        "test": "assert sub_list([1,2,3,4,5],[5,5,5,5,5]) == [0,0,0,0,0]",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0:\n        return True\n\n    count = 0\n    for digit in str(n):\n        count += int(digit)\n\n    if count <= n:\n        return True\n    else:\n        return False",
        "test": "assert validate(123) == True, \"Invalid input. The frequency of each digit in the integer must be less than or equal to the digit itself.\"",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)",
        "test": "assert check_element([1,2,3],1) is False",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'[ab]{2,}', text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"aaaabbbbcc\") == True",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if n == 1:\n        return a[0]\n\n    max_sum = float('-inf')\n    current_sum = a[0]\n\n    for i in range(1, n):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n        if current_sum - a[i] >= k:\n            current_sum -= a[i]\n\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 6, 3) == 6",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum",
        "test": "assert square_Sum(0) == 0, \"square_Sum(0) should return 0\"",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return []\n    length = max(len(lst) for lst in list1)\n    return [lst for lst in list1 if len(lst) == length]",
        "test": "assert max_length([]) == []",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def count_no_of_ways(n, k):\n    # check if n is greater than or equal to k\n    if n < k:\n        return 0\n    else:\n        # initialize variables\n        count = 0\n        # iterate through fence\n        for i in range(1, n+1):\n            # calculate the number of ways to paint the fence\n            ways = 0\n            for j in range(1, k+1):\n                if j == 1:\n                    ways += 1\n                else:\n                    ways += i // (j * (j-1))\n            # add the number of ways to the count\n            count += ways\n        return count",
        "test": "assert count_no_of_ways(n=7, k=4) == 3, \"The function should return 3 if n = 7 and k = 4.\"",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find(n,m): \n    # check if the values of n and m are integers\n    if not isinstance(n, int) or not isinstance(m, int):\n        return \"Error: Both arguments must be integers.\"\n    \n    # check if the values of n and m are within the range of the integer type\n    if not (-2**31 <= n <= 2**31 - 1) or not (-2**31 <= m <= 2**31 - 1):\n        return \"Error: Both arguments must be within the range of the integer type.\"\n    \n    # calculate the quotient and return it\n    return int(n/m)",
        "test": "assert find(5, 2) == 2, \"find(5, 2) == 2\"",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def otherside_rightangle(w, h):\n    area = (0.5 * w * h) ** 2\n    third_side = math.sqrt(area)\n    return third_side",
        "test": "assert otherside_rightangle(6,5) == 15",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]  # Initialize the maximum value to the first element of the list\n    \n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]  # Update the maximum value if a larger value is found\n    \n    return max_val",
        "test": "assert max_val([1,2,3,4,5]) == 5",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize a variable to store the sum of all divisors\n    divisor_sum = 0\n    \n    # loop through all the numbers between 1 and the square root of the given number\n    for i in range(1, int(number**0.5)+1):\n        # if the given number is divisible by i, add i to the sum of all divisors\n        if number % i == 0:\n            divisor_sum += i\n    \n    # return the sum of all divisors\n    return divisor_sum",
        "test": "assert sum_div(10) == 55",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n                arr[i], arr[j] = arr[j], arr[i]  # swap arr[i] and arr[j]\n    return count",
        "test": "assert get_Inv_Count([1,2,3,4,5,6,7]) == 0, \"The count of inversions in the array [1,2,3,4,5,6,7] is incorrect.\"",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n\n    Input:\n    list1: a list of lists\n\n    Output:\n    flattened_list: a flattened list\n    '''\n\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n\n    return flattened_list",
        "test": "assert flatten_list([1, 2, [3, 4], 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from a list of tuples.\n    '''\n    max_value = float('-inf')\n    max_key = None\n\n    for item in stdata:\n        value, key = item\n        if value > max_value:\n            max_value = value\n            max_key = key\n\n    return max_key, max_value",
        "test": "assert max_aggregate([('apple', 5), ('banana', 2), ('orange', 7), ('apple', 3), ('grape', 10)]) == 10",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    # initialize a list to store all binary sequences\n    binary_sequences = []\n\n    # create a list of length n with all 0s\n    binary_sequence = [0] * n\n\n    # generate all binary sequences of length 2n\n    for i in range(n):\n        for j in range(i, n):\n            binary_sequence[j] = 1\n            binary_seq_str = ''.join(str(bit) for bit in binary_sequence[:j+1]) + str(binary_sequence[j])\n            binary_sequences.append(binary_seq_str)\n\n    # count the number of binary sequences\n    count = len(binary_sequences)\n\n    return count",
        "test": "assert count_binary_seq(4) == 10",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    for i in range(len(arr)):\n        if i == index:\n            return arr[i]\n        elif i >= ranges[0] and i <= ranges[1]:\n            arr[i] = arr[i] + rotations\n            if arr[i] == arr[i]:\n                arr[i] = arr[i] + rotations",
        "test": "assert find_Element([1,2,3,4,5],[2,3,4],[0,1,2],6) == 6",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'(?=.*[Pp])\\b\\w+\\b')\n    matches = pattern.findall(words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None",
        "test": "assert start_withp(['elephant', 'apple', 'banana', 'carrot', 'dog']) == ('elephant', 'apple', 'banana', 'carrot', 'dog')",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Function to find the maximum sum of increasing subsequence from prefix\n    # until i index and also including a given kth element which is after i\n    # i.e., k > i.\n\n    # Initialize variables\n    max_sum = float('-inf')\n    max_prefix_sum = float('-inf')\n    prefix_sum = 0\n    current_sum = 0\n    current_prefix_sum = 0\n\n    # Loop through all the indices till i\n    for i in range(index + 1):\n        # Update the prefix sum, current sum and current prefix sum\n        current_prefix_sum += a[i]\n        current_sum += a[i]\n        prefix_sum += a[i]\n\n        # If current sum is greater than max sum, update max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_prefix_sum = current_prefix_sum\n\n    # If kth element is greater than max sum, return max sum\n    if k > max_sum:\n        return max_sum\n\n    # Calculate the maximum sum of increasing subsequence from prefix until i-k index and including kth element\n    # i.e., i-k < k < i\n    for i in range(index - k, index + 1):\n        # Update the current_prefix_sum, current_sum and current_prefix_sum\n        current_prefix_sum += a[i]\n        current_sum += a[i]\n        prefix_sum += a[i]\n\n        # If current sum is greater than max sum, update max sum and max prefix sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_prefix_sum = current_prefix_sum\n\n    # Return the maximum sum of increasing subsequence from prefix until i-k index and including kth element\n    return max_sum",
        "test": "assert max_sum_increasing_subseq(a, n, index, k) == expected_output, \"The output is incorrect for the given inputs.\"",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(tuplex[i])\n    for i in range(n):\n        colon.append(tuplex[i+m])\n    return colon",
        "test": "assert colon_tuplex(\"abc\", 2, 3) == (\"a\", \"b\", \"c\")",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the variables to store the largest products\n    max_products = [None] * N\n    max_product = [None] * N\n    \n    # Iterate over each element from each list and find the largest product for that element and each factor\n    for i in range(N):\n        max_product[i] = float('-inf')\n        for j in range(N):\n            if i!= j:\n                product = nums1[i] * nums2[j]\n                if product > max_product[i]:\n                    max_product[i] = product\n    \n    # Find the largest product for each factor and return the result\n    for i in range(N):\n        max_products[i] = max(max_product[i], max_product[i+N])\n    \n    # Return the result\n    return max_products",
        "test": "assert large_product([1,2,3], [4,5,6], 5) == 6",
        "num_ids": 1234,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(10,20) == 20",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n):\n    # Initialize the maximum number of set bits\n    max_set_bits = 0\n    # Initialize the leftmost unset bit\n    leftmost_unset_bit = 0\n    \n    # Iterate through each bit of the input number\n    while n:\n        # Check if the number is 0\n        if n % 2 == 0:\n            # Set the leftmost unset bit to 1\n            leftmost_unset_bit = 1\n            # Count the number of set bits\n            max_set_bits += 1\n        else:\n            # Set the leftmost unset bit to 0\n            leftmost_unset_bit = 0\n        \n        # Divide the number by 2\n        n = n // 2\n    \n    # Return the leftmost unset bit count\n    return max_set_bits",
        "test": "assert set_left_most_unset_bit(5) == 1 # correct",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    volume = math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(0,3) == 0",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to 1\n    highest_power_of_2 = 1\n    \n    # Loop through the numbers from 1 to n\n    while highest_power_of_2 < n:\n        # Check if the current number is a power of 2\n        if n % highest_power_of_2 == 0:\n            # If it is a power of 2, update the highest power of 2\n            highest_power_of_2 = highest_power_of_2 * 2\n        # Otherwise, update the highest power of 2 to the next number larger than the current number\n        else:\n            highest_power_of_2 = highest_power_of_2 + 1\n    \n    return highest_power_of_2\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    for i in range(len(list_)):\n        list_[i] = string + str(list_[i])\n    return list_",
        "test": "assert add_string([], '{0} is {1}') == []",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i*len(l2) + j]\n    return result",
        "test": "assert convert_list_dictionary(['apple', 'banana', 'cherry'], ['grape', 'orange', 'kiwi'], ['strawberry', 'nectarine', 'peach']) == {'a': ['apple', 'banana', 'cherry'], 'b': ['grape', 'orange', 'kiwi'], 'c': ['strawberry', 'nectarine', 'peach']}",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    while n > 1:\n        max_sum = max(max_sum, (n // 2) + (n // 3) + (n // 4) + (n // 5))\n        n -= 1\n    return max_sum",
        "test": "assert get_max_sum(0) == 0",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n\n    # initialize variables\n    max_length = 0\n    max_list = []\n\n    # loop through each element in the list\n    for element in input_list:\n        # if the length of the current element is greater than the current maximum, update the maximum and max_list\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            # if the length of the current element is equal to the current maximum, add it to the max_list\n            max_list.append(element)\n\n    # return the max_list\n    return max_list",
        "test": "assert max_length_list([1]) == [1]",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if a given tuple contains no duplicates.\n    '''\n    # Use a set to store the elements of the tuple\n    elements = set(test_tup)\n    # Check if the set has the same size as the original tuple\n    if len(elements) == len(test_tup):\n        return True\n    else:\n        return False",
        "test": "assert check_distinct((1,2,3)) # False",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # initialize a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # iterate over the dictionary to find the first non-repeated character\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char",
        "test": "assert first_non_repeating_character(\"abb\") == \"a\"",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.search(regex, string, re.IGNORECASE))",
        "test": "assert check_char(\"z\") == True",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Check if the size of the sorted numbers is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If the size of the sorted numbers is even, the middle number is the average of the two middle numbers\n        middle_number = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # If the size of the sorted numbers is odd, the middle number is the middle number\n        middle_number = sorted_numbers[len(sorted_numbers) // 2]\n    \n    return middle_number",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_of_digits(nums):\n    '''\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n    nums (list): A list of numbers to compute the sum of digits for.\n\n    Returns:\n    list: The list of sums of digits for each number in nums.\n    '''\n\n    # initialize an empty list to store the sums of digits\n    sums = []\n\n    # iterate over each number in nums\n    for num in nums:\n\n        # initialize an empty list to store the digits of num\n        digits = []\n\n        # iterate over each digit in num and append it to the digits list\n        for digit in str(num):\n            digits.append(int(digit))\n\n        # append the sum of digits of num to the sums list\n        sums.append(sum(digits))\n\n    # return the sums list\n    return sums",
        "test": "assert sum_of_digits([123, 456, 789, 1, 2, 3]) == 1 + 2 + 3 + 6 + 9 + 1 + 2 + 3",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    This function performs the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Loop through each tuple in the two tuples\n    for i in range(len(test_tup1)):\n        # Check if the i-th tuple is equal to the i-th tuple in the second tuple\n        if test_tup1[i] == test_tup2[i]:\n            # If they are equal, continue to the next tuple in both tuples\n            continue\n        \n        # XOR the two tuples\n        result ^= test_tup1[i] ^ test_tup2[i]\n\n    # Return the result\n    return result",
        "test": "assert bitwise_xor((1, 1), (0, 0)) == (0, 0, 0)",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    # Using list comprehension to iterate over both tuples\n    result_list = [(t1[i], t2[i]) for i in range(len(test_tup1[0]))]\n    return result_list",
        "test": "assert add_nested_tuples((1, 2, 3), ()) == (1, 2, 3)",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:   \n        return a   \n    else:   \n        return b   ",
        "test": "assert minimum(1, 2) == 1",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Checks whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex",
        "test": "assert check_tuplex((1,2,3),(1,2,4)) == False",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #initialize variables\n    count = 0\n\n    #iterate through the numbers from 1 to x\n    for i in range(1,x+1):\n        #if the number is odd and the parity is even, increment the count\n        if i % 2 == 1 and x % 2 == 0:\n            count += 1\n\n        #if the number is even and the parity is odd, increment the count\n        elif i % 2 == 0 and x % 2 == 1:\n            count += 1\n\n    #return the count\n    return count",
        "test": "assert find_Parity(3) == 1, \"Expected find_Parity(3) to return 1, but instead returned {}\".format(find_Parity(3))",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(str(n), reverse=True)))",
        "test": "assert rearrange_bigger(123456789) == 987654321",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the arrays to heapq format for efficient comparison\n    nums1_heap = []\n    nums2_heap = []\n    for num in nums1:\n        heapq.heappush(nums1_heap, num)\n    for num in nums2:\n        heapq.heappush(nums2_heap, num)\n\n    # Find the k smallest pairs\n    pairs = []\n    while len(nums1_heap) > 0 and len(nums2_heap) > 0 and len(pairs) < k:\n        pair = (heapq.heappop(nums1_heap), heapq.heappop(nums2_heap))\n        pairs.append(pair)\n        if len(nums1_heap) > 0 and heapq.heappop(nums1_heap) == pair[0]:\n            heapq.heappush(nums1_heap, pair[1])\n        if len(nums2_heap) > 0 and heapq.heappop(nums2_heap) == pair[1]:\n            heapq.heappush(nums2_heap, pair[0])\n\n    return pairs",
        "test": "assert k_smallest_pairs([1,2,3,4,5], [4,5,6,7,8], 0) == []",
        "num_ids": 1235,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product as infinity\n    min_product = float('-inf')\n\n    # Iterate through the list and find the minimum product for each pair of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product",
        "test": "assert min_product_tuple([1,2,3,4,5]) == (10, 5, 2)",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n\n    min_val = listval[0]\n\n    for item in listval:\n        if item < min_val:\n            min_val = item\n\n    return min_val",
        "test": "assert min_val([1, 5, 7, 9, 3]) == 1",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(.)', lambda match: match.group(1).upper(), word)",
        "test": "assert snake_to_camel('snake_case_word') =='snakeCaseWord'",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n\n    # Initialize an empty list to store the odd numbers\n    odd_numbers = []\n\n    # Loop through the list and append odd numbers to the new list\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n\n    # Return the new list with odd numbers removed\n    return odd_numbers",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print(\"Error: n is greater than the length of the list.\")\n        return\n    \n    if n == 1:\n        return list1[0]\n    elif n == len(list1):\n        return list1[-1]\n    else:\n        return list1[n-1]",
        "test": "assert extract_nth_element( [(1, 'a'), (2, 'b'), (3, 'c')], 1 ) == (1, 'a')",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def overlapping(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3,4,5], [2,3,4,5,6]) is True",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    for num in arr:\n        product = num * num\n        if product > max_product:\n            max_product = product\n    return max_product",
        "test": "assert max_Product([-1,-2,-3,-4,-5]) == -10",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    common_count = 0\n\n    for element, count in Input:\n        if common_element is None:\n            common_element = element\n            common_count = count\n        elif element == common_element:\n            common_count += count\n            if common_count == len(Input):\n                return element, common_count\n        else:\n            common_element = element\n            common_count = count\n\n    return common_element, common_count",
        "test": "assert group_tuples([(1,2),(3,4),(5,6),(7,8)]) == ((1,2), (3,4), (5,6), (7,8))",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        max_length = len(lst[0])\n        max_element = lst[0]\n        for element in lst:\n            if len(element) > max_length:\n                max_length = len(element)\n                max_element = element\n        return max_element",
        "test": "assert Find_Max([1]) == 1",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)",
        "test": "assert round_and_sum([1,2,3,4,5,6]) == (15, 36)",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1):\n        cube_sum += i**3\n    return cube_sum",
        "test": "assert cube_Sum(1) == 0",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): A tuple of elements.\n\n    Returns:\n    A new tuple containing the concatenated elements.\n    '''\n\n    new_tup = ()  # initialize an empty tuple\n\n    for i in range(len(test_tup)):\n        new_tup = new_tup + (test_tup[i],)  # concatenate each element\n\n    return new_tup\n",
        "test": "assert concatenate_tuple(('apple', 'banana', 'cherry')) == ('apple', 'banana', 'cherry')",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += i**3\n    return result/n",
        "test": "assert find_Average_Of_Cube(15) == 5400",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_strings = [str(test_tuple[0][i]) for i in range(1, len(test_tuple[0]))]\n    return extracted_strings",
        "test": "assert extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) == ['h']",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 2) == 1",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = [num for num in nums if num % 2!= 0]\n    return filtered_nums",
        "test": "assert filter_oddnumbers([1,2,3,4,5,6]) == [1,3,5]",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date string in yyyy-mm-dd format to dd-mm-yyyy format.\n\n    :param dt: a date string in yyyy-mm-dd format\n    :return: a date string in dd-mm-yyyy format\n    '''\n    # regular expression to match date string in yyyy-mm-dd format\n    pattern = re.compile(r'(\\d{2})-(\\d{2})-(\\d{4})')\n    # match the pattern and extract the groups\n    groups = pattern.match(dt).groups()\n    # create the new date string in dd-mm-yyyy format\n    return f'{groups[2]}-{groups[1]}-{groups[0]}'",
        "test": "assert change_date_format('2021-06-01') == '01-06-2021'",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # create a gap of 1 on each side of the list\n    gap = n // 2\n    # move all elements of the list to the left of the gap\n    for i in range(gap, n):\n        # find the maximum element in the left half of the array\n        max_idx = i\n        for j in range(i-gap, i):\n            if my_list[j] > my_list[max_idx]:\n                max_idx = j\n        # swap the found max element and the element at the current position\n        my_list[i], my_list[max_idx] = my_list[max_idx], my_list[i]\n    return my_list",
        "test": "assert shell_sort([]) == []",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    # Extracting elementwise and tuples from the given two tuples\n    elementwise_tup1 = tuple(x for x,y in zip(test_tup1, test_tup2))\n    elementwise_tup2 = tuple(x for x,y in zip(test_tup2, test_tup1))\n    \n    # Returning the final tuple\n    return (elementwise_tup1, elementwise_tup2)",
        "test": "assert and_tuples((1, 2, 3), (4, 5, 6))!= (4, 5, 6)",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    dx = (b**2-4*a*c) / (2*a)\n    dy = (2*a*b - 4*a*c + c**2) / (2*a)\n    return dx, dy\n",
        "test": "assert parabola_directrix(2, -3, -1) == (-1, 3, -1)",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def median_trapezium(base1, base2, height):\n    # Calculate the midpoint of the trapezium\n    midpoint = (base1 + base2) / 2\n\n    # Calculate the area of the trapezium\n    area = (base1 * height + base2 * height) / 2\n\n    # Determine which half of the trapezium is above the midpoint\n    half = 1 if area < 0 else -1\n\n    # Calculate the length of the trapezium\n    length = abs(area) / 2 * half\n\n    return length",
        "test": "assert median_trapezium(2,3,6) == 6.0",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n    return greater",
        "test": "assert check_greater([1, 2, 3, 4, 5], 1) == True",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    # define the regular expression pattern\n    pattern = r'[ab]{1,}'\n\n    # use the re.search() function to search for matches in the text\n    match = re.search(pattern, text)\n\n    # check if a match was found\n    if match:\n        # print the match\n        print(match.group())\n    else:\n        # print \"No match found\"\n        pass",
        "test": "assert text_match_one(\"bbbbb\") == False",
        "num_ids": 1441,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit",
        "test": "assert last_Digit(123456789) == 9, \"The last digit of 123456789 is not 9.\"",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list",
        "test": "assert neg_nos([1, 2, 3, 4]) == []",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = \"\"\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is odd, append it to the result string\n        if char % 2!= 0:\n            result += char\n    # Return the result string\n    return result",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Counts the number of pairs of bidirectional tuple pairs in a list.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_bidirectional([5, 5, 5, 5, 5]) == 0",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result",
        "test": "assert multiple_to_single([1]) == 1, \"The function should return 1 when the input list contains only a single integer.\"",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    This function will find the first adverb and its positions in a given sentence.\n    \"\"\"\n    pattern = re.compile(r'\\b[aeiou]\\b')\n    match = pattern.search(text)\n\n    if match:\n        adverb_pos = match.start()\n        return adverb_pos\n    else:\n        return \"No adverb found in the sentence.\"\n",
        "test": "assert find_adverb_position(\"The cat ate the dog.\") == 13",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n\nl = float(input(\"Enter the length of the cube: \"))\nprint(\"The surface area of the cube is:\", surfacearea_cube(l))",
        "test": "assert surfacearea_cube(5) == 125",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Finds the ratio of positive numbers in an array of integers.\n\n    Args:\n        nums (list[int]): An array of integers.\n\n    Returns:\n        float: The ratio of positive numbers in the array.\n    '''\n\n    positive_count = 0\n    total_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        total_count += 1\n\n    if total_count == 0:\n        return 0.0\n\n    return positive_count / total_count",
        "test": "assert positive_count([1, 3, 5, 7, 9]) == 1, \"The ration of positive numbers in the array [1, 3, 5, 7, 9] is not 1.\"",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    # Initialize the largest negative number as None\n    largest_neg_num = None\n\n    # Iterate over each element in the list\n    for num in list1:\n\n        # Check if the element is negative\n        if num < 0:\n\n            # If it is, update the largest negative number\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n\n    # Return the largest negative number\n    return largest_neg_num",
        "test": "assert largest_neg([-1, -2, -3, -4, -5]) == -1",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Trim each tuple in the given tuple list by k elements.\n    '''\n    return tuple([test_list[i] for i in range(len(test_list)) if i % K == 0])",
        "test": "assert trim_tuple(test_list, K) == expected_result",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return result",
        "test": "assert index_multiplication(2,3) == (2, 3)",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # create a Counter object from the list\n    counter = Counter(lst)\n\n    # iterate over the tuple and update the Counter object\n    for elem in tup:\n        counter[elem] += 1\n\n    # return the Counter object\n    return counter",
        "test": "assert count_Occurrence((), [1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Initialize a list to store the cubes\n    cubes = []\n\n    # Iterate over the input list of numbers\n    for num in nums:\n        # Append the cube of the current number to the list\n        cubes.append(num**3)\n\n    # Return the list of cubes\n    return cubes",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    total = 0\n    p = 2\n    while p <= n:\n        total += p\n        p += 1\n    return total",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        result.append(s)\n        if len(result) == l[0]:\n            break\n    return result",
        "test": "assert extract_string(\"hello world\", 100) == \"world\"",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)",
        "test": "assert remove_whitespaces(\"   hello    \") == \"hello\"",
        "num_ids": 327,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(1000,1000) == 0",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a Python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            sum_even_factors += i\n            if i!= n // i:\n                sum_even_factors += n // i\n    return sum_even_factors",
        "test": "assert sumofFactors(1000000001) == 100000000000000000001",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in a given string.\n    '''\n    # Convert the string to lowercase to make the search case-insensitive\n    text = text.lower()\n\n    # Use regular expression to match 'z' in the string\n    match_z = re.search(r'\\b[qz]*z\\b', text)\n\n    # Return the matched word if found, else None\n    return match_z.group(0) if match_z else None",
        "test": "assert text_match_wordz(\"Hello, world! This is a test. It contains the word 'z'.\")",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(33) == False",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i], stringlist[-i-1] = stringlist[-i-1], stringlist[i]\n    return stringlist",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\", \"programming\"]) == [\"dlrow\", \"olleh\", \"gnyphtu\", \"cpetpin\"]",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst) # Initialize minimum length of sublist to len(lst)\n    sublist = [] # Initialize sublist to empty list\n    \n    for i in range(len(lst)): \n        # Iterate over each element of the list\n        if len(sublist) == 0: # If sublist is empty, add the current element to it\n            sublist.append(lst[i])\n        elif len(sublist) < len(lst): # If sublist is longer than len(lst), remove first element and add current element\n            sublist.pop(0)\n            sublist.append(lst[i])\n        else: # If sublist is shorter than len(lst), keep adding current element to it\n            sublist.append(lst[i])\n    \n    return sublist",
        "test": "assert Find_Min([]) == [] # Find_Min is a recursive function",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def rectangle_area(l, b):\n    '''\n    Calculate the area of a rectangle using the formula: area = length * width\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(2,3) == 6",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', str1)\n\nstr1 = 'this is a test string'\nstr2 = remove_uppercase(str1)\nprint(str2) # output: 'is a test'",
        "test": "assert remove_uppercase('') == ''",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]",
        "test": "assert Extract([1, 2, 3, 4, 5]) == [1]",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def combinations_list(lst):\n    '''\n    Given a list of elements, return all possible combinations of that list.\n    '''\n    result = []\n    def backtrack(index):\n        if index == len(lst):\n            result.append(lst[:])\n            return\n        for i in range(index, len(lst)):\n            lst[index], lst[i] = lst[i], lst[index]\n            backtrack(index+1)\n            lst[index], lst[i] = lst[i], lst[index]\n    backtrack(0)\n    return result",
        "test": "assert combinations_list([1]) == [[1]]",
        "num_ids": 1676,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = arr[0]\n    curr_product = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        curr_product = max(arr[i], arr[i] * max_ending_here)\n        max_ending_here = max(arr[i], max_ending_here)\n        max_product = max(max_product, curr_product)\n\n    return max_product",
        "test": "assert max_subarray_product([1]) == 1",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [val for val in dict.values()]\n    return values.count(n) == 1",
        "test": "assert check_value({\"a\": 1, \"b\": 2, \"c\": 3}, 1) == True",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if value:\n            result[key] = value\n    return result",
        "test": "assert drop_empty({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}) == {1: 2, 3: 4, 5: 6, 7: 8, 9: 10}",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_product(arr):\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 20",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1], test_tup[0] + test_tup[2], test_tup[1] + test_tup[2]",
        "test": "assert add_pairwise((3, 4)) == (3, 6)",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n\narr = [1, 2, 3, 4, 5]\nn = 10\nprint(find_remainder(arr, n))",
        "test": "assert find_remainder([1, 2, 3], 4) == 2",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list of numbers and checks whether it contains consecutive numbers or not.\n    If it contains consecutive numbers, it returns True, otherwise it returns False.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,2,2,3,4,4,5]) == True",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return tuple(intersection)",
        "test": "assert tuple_intersection([1, 2, 3, 4, 5], [3, 4, 5, 6]) == (3, 4, 5)",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Parameters:\n        str1 (str): The original string.\n        ch (str): The character to be replaced.\n        newch (str): The replacement character.\n\n    Returns:\n        str: The modified string.\n    '''\n    return str1.replace(ch,newch)",
        "test": "assert replace_char('hello world', 'z', '!') == 'hello world!'",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a new Counter object from the dictionary\n    sorted_dict = Counter(dict1)\n\n    # sort the dictionary by value in descending order\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n\n    # convert the sorted dictionary back to a dictionary and return it\n    return dict(sorted_dict)",
        "test": "assert sort_counter({\"apple\": 3, \"banana\": 2, \"cherry\": 5, \"date\": 1}) == {\"banana\": 2, \"apple\": 3, \"cherry\": 5, \"date\": 1}",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    # initialize variables to store the maximum and minimum values\n    max_val = nums[0]\n    min_val = nums[0]\n    \n    # loop through the array and update the maximum and minimum values if necessary\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    # return the sum of the largest and smallest values\n    return max_val + min_val\n",
        "test": "assert big_sum([0]) == 0",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"abc\") == \"abc\"",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile('[^a-z]+')\n    return pattern.sub('', str1)",
        "test": "assert remove_lowercase(\"hello world\") == \"hll wrld\"",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Finding the first digit of the number\n    first_digit = n // 10\n    # Returning the first digit\n    return first_digit",
        "test": "assert first_Digit(0) == 0",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(lst):\n    '''\n    Write a Python function which takes a list of integers and returns only the odd ones.\n    '''\n    odd_list = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # initialize the variables to store the sum of cubes and the sum of first n natural numbers\n    cubes = 0\n    first_n = 0\n    # loop through the first n natural numbers and add their cubes to the variables\n    for i in range(n):\n        cubes += i**3\n        first_n += i\n    # calculate the difference between the sum of cubes and the sum of first n natural numbers\n    return cubes - first_n",
        "test": "assert difference(10) == 55",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1 : \n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,2,3,4,5], 5) == 2",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Use a loop to iterate over each character in the string and toggle its case\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string",
        "test": "assert toggle_string(\"HELLO WORLD\") == \"hello world\"",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings to avoid potential issues with string formatting\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum to 0\n    total = 0\n\n    # Loop over the characters in the strings and add the per-digit differences\n    for i in range(min(len(n1_str), len(n2_str))):\n        total += abs(int(n1_str[i]) - int(n2_str[i]))\n\n    # Return the total sum\n    return total",
        "test": "assert digit_distance_nums(987654321, 987654321) == 0",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def max_sub_array_sum(a, size):\n    # initialize variables\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    current_sum = a[0]\n\n    # iterate over the array\n    for i in range(1, size):\n        current_sum += a[i]\n\n        # update the maximum sum ending here\n        max_ending_here = max(max_ending_here + a[i], current_sum)\n\n        # update the maximum sum so far\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples and sort it\n    union_set = set(test_tup1 + test_tup2)\n    union_list = sorted(list(union_set))\n\n    # Print the union\n    print(union_list)",
        "test": "assert union_elements(('a', 1), ('a', 2)) == sorted(['a', 'a', 'b'])",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 0\n    for i in lst:\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length",
        "test": "assert Find_Max_Length([1,2,3,4,5]) == 5",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    # Use regular expression to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    # Convert the matches to a list of values\n    values = [match[1] for match in matches]\n    return values",
        "test": "assert extract_values(\"this is a sample text, another one\") == ['this', 'is', 'a','sample', 'text', 'another', 'one']",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Define an empty dictionary to store the count of each element\n    count = {}\n\n    # Loop through each element in the list\n    for i in range(n):\n        # Check if the current element is already in the dictionary\n        if arr[i] in count:\n            # If it is, increment the count of that element by 1\n            count[arr[i]] += 1\n        else:\n            # If it isn't, add it to the dictionary with a count of 1\n            count[arr[i]] = 1\n\n    # Count the number of pairs where both elements are unequal\n    count_pairs = 0\n    for i in range(n):\n        if count[arr[i]] == 1:\n            count_pairs += 1\n\n    # Return the result\n    return count_pairs",
        "test": "assert count_Pairs([1, 2, 3, 4, 5, 6], 3) == 3 # pass",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for letter in word:\n        result.append(letter)\n    return result",
        "test": "assert split(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n\n    Parameters:\n    list1 - a list of integers\n\n    Returns:\n    True if the list is sorted, False otherwise\n\n    '''\n    if len(list1) <= 1:\n        return True\n\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n\n    return True",
        "test": "assert issort_list([]) == True",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # create a list of dictionaries with length N\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n\n    return empty_list",
        "test": "assert empty_list(0) == []",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initialize a dictionary to store the frequency of characters in each sublist\n    freq = {}\n    for sublist in list1:\n        for char in sublist:\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n\n    # Sort the sublists by frequency\n    sorted_sublists = []\n    for sublist in list1:\n        sublist.sort(key=lambda x: freq[x])\n        sorted_sublists.append(sublist)\n\n    return sorted_sublists",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['kiwi', 'orange', 'grape']]) == [['apple', 'banana', 'cherry'], ['kiwi', 'orange', 'grape']]",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n    '''\n\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Iterate through each list of numbers\n    for num in nums:\n        # If the number is not already in the set, add it to the set\n        if num not in unique_nums:\n            unique_nums.add(num)\n\n    # Return the unique numbers as a list\n    return list(unique_nums)",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)  # create a set from the list to remove duplicates\n    product = 1  # initialize the product to 1\n    for num in unique_nums:  # iterate over each unique number\n        product *= num  # multiply the product with the current number\n    return product",
        "test": "assert unique_product([1, 1, 1, 1, 1]) == 1",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14 * r**2 * h",
        "test": "assert surfacearea_cylinder(9,5) == 25",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    Parameters:\n    A: list\n        The first list to be checked.\n\n    B: list\n        The second list to be checked.\n\n    Returns:\n    bool\n        True if A is a sublist of B, False otherwise.\n    \"\"\"\n\n    # Check if A is longer than B\n    if len(A) > len(B):\n        return False\n\n    # Iterate through A and check if each element is present in B\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True",
        "test": "assert is_Sub_Array([1,2,3], [1,2,4]) == False # 1 and 3 are not subarrays of [1,2,3]",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n):\n    if n <= 0:\n        return 0\n    else:\n        # calculate factorial\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        # calculate last digit\n        last_digit = factorial % 10\n        return last_digit",
        "test": "assert last_Digit_Factorial(1) == 1, \"The last digit in the factorial of 1 is not 1\"",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Concatenate the three lists into a single list\n    flat_list = list1 + list2 + list3\n    \n    # Return the flat list\n    return flat_list",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Convert the tuples to sets for faster membership testing\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the elements that are in one set but not in the other\n    dissimilar = set1.difference(set2)\n\n    return dissimilar",
        "test": "assert find_dissimilar((\"a\", \"b\"), (\"b\", \"c\")) == set([\"a\"])",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    result = []\n\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n\n    return tuple(result)\n",
        "test": "assert even_ele((), lambda x: x) == ()",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate the area of the square pyramid\n    area = b*s\n\n    # calculate the surface area of the pyramid\n    surface_area = 2*(b*s)\n\n    # return the surface area\n    return surface_area\n",
        "test": "assert surface_Area(3,3) == 18",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) is True",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def catalan_number(num):\n    # Base case: 0 and 1 are catalan numbers\n    if num == 0 or num == 1:\n        return 1\n\n    # Calculate the nth catalan number by multiplying the previous catalan number\n    # with the previous number\n    prev_prev = catalan_number(num-1)\n    prev = catalan_number(num-2)\n    return prev_prev * prev",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with \"ly\" in the given text and its position in the text.\n    '''\n    pattern = r'\\bly\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        position = match.start()\n        return (match.group(), position)\n    else:\n        return None",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == [\"jumps\", (3, 6)]",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min heap of items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n    \n    # Find n most expensive items\n    expensive = []\n    for i in range(n):\n        expensive.append(heapq.heappop(min_heap))\n    \n    return expensive",
        "test": "assert expensive_items([('apple', 5), ('banana', 3), ('cherry', 10)], 2) == [('apple', 5), ('banana', 3)]",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    elif n % 2 == 0:\n        return [l[i:i+2] for i in range(0, len(l), 2)]\n    else:\n        return [l[i:i+2] for i in range(1, len(l), 2)]",
        "test": "assert split_Arr([1,2,3,4,5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def list_tuple(listx):\n    '''\n    Converts a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return \"List is empty.\"\n    \n    largest = min_val = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < min_val:\n            min_val = num\n    \n    return largest - min_val",
        "test": "assert big_diff([1, 1, 1, 1]) == 0",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        count += 1\n        if i**2 == i:\n            print(i)\n            if count == 2:\n                return True\n    return False",
        "test": "assert perfect_squares(1, 7) == [1, 7, 19, 31, 49, 64, 81, 100] # test case 4",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Convert polar coordinates (x, y) to rectangular coordinates (a, b).\n    '''\n    a = cmath.sqrt(x**2 + y**2)\n    b = cmath.atan2(y, x)\n    return (a, b)",
        "test": "assert polar_rect(4,5) == (4,5)",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #swap first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def binomial_Coeff(n, k):\n    # Initialize the sum of the product of consecutive binomial co-efficients to zero\n    result = 0\n    \n    # Initialize variables for the current binomial coefficient and the next binomial coefficient\n    current_binomial = 1\n    next_binomial = 1\n    \n    # Iterate through the range of n, starting from 1 and ending at or equal to k\n    for i in range(1, n+1):\n        # If i is equal to k, add the current binomial coefficient to the result\n        if i == k:\n            result += current_binomial\n        \n        # Update the values of the current binomial and the next binomial coefficients\n        current_binomial = next_binomial\n        next_binomial = current_binomial * (i-1)\n    \n    return result",
        "test": "assert binomial_Coeff(0,0) == 0",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Removes leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address\n    ip = ip.lstrip('0')\n    return ip",
        "test": "assert removezero_ip(\"192.168.0.1\") == \"192.168.0.1\"",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    evens = []\n    odds = []\n    # Create two empty lists to store the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    # Find the difference of the first even and first odd numbers\n    diff = evens[0] - odds[0]\n    # Return the result\n    return diff",
        "test": "assert diff_even_odd([1, 2]) == 1, \"diff_even_odd([1, 2]) should return 1\"",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def min_Swaps(str1,str2):\n    # Convert strings to lists of binary digits\n    str1_list = [int(digit) for digit in str1]\n    str2_list = [int(digit) for digit in str2]\n    \n    # Initialize variables for minimum number of swaps\n    min_swaps = float('inf')\n    \n    # Loop through lists until all digits have been swapped\n    for i in range(len(str1_list)):\n        for j in range(len(str2_list)):\n            # Swap digits at positions i and j\n            str1_list[i], str2_list[j] = str2_list[j], str1_list[i]\n            \n            # Calculate the difference between the two strings\n            diff = sum(abs(digit - sum(int(digit) for digit in str1_list)) for digit in str1_list)\n            \n            # Check if this difference is smaller than the current minimum\n            if diff < min_swaps:\n                min_swaps = diff\n    \n    return min_swaps",
        "test": "assert min_Swaps(\"1111\", \"0000\") == 0",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # First, sort both arrays and find the kth element from them\n    arr1.sort()\n    arr2.sort()\n    kth_index = k - 1\n    kth_element = arr1[kth_index]\n\n    # Finally, return the kth element\n    return kth_element",
        "test": "assert find_kth([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], 5) == 5",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = number\n    while num > 0:\n        remainder = num % 10\n        sum += remainder ** 3\n        num //= 10\n    if number == sum:\n        return True\n    else:\n        return False",
        "test": "assert armstrong_number(2020) == False",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    while count < number:\n        sum += count\n        count += 1\n    \n    average = sum / number\n    \n    return sum, average",
        "test": "assert sum_average(3) == 6",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False",
        "test": "assert is_Even(0) == True",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a Python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create a set to store all the characters in the string\n    char_set = set(str1)\n    \n    # Loop through the set and check if there is any character repeated in the string\n    for char in char_set:\n        if str1.count(char) > 1:\n            return char\n    \n    # If there is no repeated character in the string, return None\n    return None",
        "test": "assert first_repeated_char(\"hello world\") == \"l\"",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n\n    for i in range(1, n+1):\n        lucid_numbers.append(i)\n\n    return lucid_numbers",
        "test": "assert get_ludic(40) == [41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words[::-1]:\n        reversed_words.append(word)\n    return \" \".join(reversed_words)\n",
        "test": "assert reverse_words(\"python is awesome\") == \"awesome is python\"",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Search the string for a regex pattern. The function returns the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"abcde\", r'a') == ('a', 0, 1)",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    a = 1\n    b = 0\n    count = 0\n    while count < n:\n        b = a + b\n        a = b - a\n        count += 1\n    return b",
        "test": "assert bell_Number(5) == 5, \"The nth bell number is not 5\"",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def remove_kth_element(list1, L):\n    # Calculate the index of the k'th element to remove\n    k = L // 2\n    # Remove the k'th element from the list\n    list1 = list(set(list1) - set([L]))\n    # Return the updated list\n    return list1",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the maximum value to the first element of the first row\n    max_val = test_list[0][N]\n    # Iterate through the remaining rows and compare each element with the max value\n    for i in range(1, len(test_list)):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val",
        "test": "assert max_of_nth([1, 2, 3, 4, 5], 3) == 4, \"The function should return the correct value for the matrix [1, 2, 3, 4, 5] and column index 3.\"",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [[lst[0][0], lst[0][1]], [lst[1][0], lst[1][1]]]",
        "test": "assert merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = test_list[0]\n    for i in range(1, len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg_list.append(sum(tup)/len(tup))\n    return avg_list",
        "test": "assert average_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == [5, 6, 7]",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the lengths of the input tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    # Compute the modulo of each element in the tuples\n    mod_tup1 = tuple(map(lambda x: x % test_tup2[0], test_tup1))\n    mod_tup2 = tuple(map(lambda x: x % test_tup1[0], test_tup2))\n\n    # Return the result as a tuple\n    return tuple(mod_tup1), tuple(mod_tup2)",
        "test": "assert tuple_modulo((1, 1, 1, 1, 1), (1, 1, 1, 1, 1)) == ((0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0), (0, 0, 0, 0, 0))",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def min_Jumps(steps, d):\n    # Base case: If the number of steps is less than or equal to 1, return 0\n    if steps <= 1:\n        return 0\n\n    # Initialize the minimum number of jumps required to reach the target point\n    min_jumps = 0\n\n    # Iterate through all possible jumps and update the minimum jumps\n    for i in range(steps):\n        # Calculate the number of steps needed to reach (i, d) from the current position\n        steps_to_reach = steps - i\n        # If the current position is the target point, update the minimum jumps\n        if steps_to_reach == 0:\n            min_jumps = i + 1\n\n    # Return the minimum jumps\n    return min_jumps",
        "test": "assert min_Jumps(1, 1) == 0, \"The correct number of jumps for (1, 1) is 0.\"",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    return [x // y for x, y in zip(nums1, nums2)]",
        "test": "assert div_list([1],[2]) == [[1]] # single-element list with empty list",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            new_str += test_str[i]\n            i += 1\n        else:\n            new_str += test_str[i]\n            i += 1\n    return new_str\n",
        "test": "assert move_num(\"123.456.789\") == \"123.456.789\"",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def largest_subset(a):\n    '''\n    Finds the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    subset = [0] * n\n    max_size = 1\n    max_subset = [0] * n\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                if j - i + 1 > max_size:\n                    max_size = j - i + 1\n                    max_subset = [i, j]\n\n    return max_size",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def get_median(arr1, arr2, n):\n    # Calculate the middle index of the two arrays\n    mid = n // 2\n    \n    # If the length of the arrays is even, the median is the average of the middle two elements\n    if n % 2 == 0:\n        # Get the middle elements of the two arrays and calculate their average\n        m1 = arr1[mid]\n        m2 = arr1[mid-1]\n        avg = (m1 + m2) / 2\n        # Find the index of the median in the sorted array\n        median_idx = binary_search(arr1, arr1, arr1, 0, n-1, avg)\n        # Return the median index\n        return median_idx\n    \n    # If the length of the arrays is odd, the median is the middle element of the sorted array\n    else:\n        # Return the middle element of the sorted array\n        return arr1[mid]",
        "test": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 7) == 7",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([1,2,3,4,5],3) == [1, 8, 27, 64, 125]",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()",
        "test": "assert is_upper(\"H!LLO WORLD\") is False ",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef triangle_area(r):\n    # Calculate the circumference of the semicircle\n    a = 1 + r\n    circumference = 2 * math.pi * a\n    \n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    area = math.pi * (r**2)\n    \n    # Return the area of the largest triangle\n    return area",
        "test": "assert triangle_area(5) == 78.53981633974483",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes a sorted list of natural numbers and returns the index of the first missing element.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    if start > end:\n        return None\n    \n    count = 0\n    for i in range(start, end + 1):\n        if i not in array:\n            count += 1\n    \n    if count == len(array):\n        return None\n    \n    index = count - 1\n    for i in range(start, end + 1):\n        if i in array:\n            index += 1\n        else:\n            return index\n    \n    return None",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 0",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"hello\") == \"hello\"",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([]) == []",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def adjac(ele):\n    '''\n    This function extracts all the adjacent coordinates of a coordinate tuple.\n    '''\n    x, y = ele\n    if x == 0 or y == 0:\n        return []\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < len(ele)-1:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < len(ele)-1:\n        adj.append((x, y+1))\n    return adj",
        "test": "assert adjac((0,0)) == []",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Loop through each character in the string\n    for i in range(len(text)):\n        # If the character is a space, replace it with an underscore\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        # If the character is not a space, leave it as it is\n        else:\n            text = text[:i] + text[i] + text[i+1:]\n\n    return text",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a new list to store the moved elements\n    new_list = []\n    \n    # Iterate through each element in the original list\n    for num in num_list:\n        # If the element is not zero, add it to the new list\n        if num!= 0:\n            new_list.append(num)\n    \n    # Return the new list with zeroes moved to the end\n    return new_list",
        "test": "assert move_zero([1, 2, 0, 0, 3]) == [1, 2, 3]",
        "num_ids": 1534,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([1,2,3,4,5],9) == 0 # there is no pair of numbers in the given list that adds up to 9",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using the heapsort algorithm.\n    '''\n\n    heap = hq.heapify(iterable)\n    sorted_list = []\n\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list",
        "test": "assert heap_sort([10, 8, 6, 4, 2]) == [10, 8, 6, 4, 2]",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount \n    loss = sale_amount - actual_cost \n\n    if profit < 0: \n        return False \n    elif loss < 0: \n        return False \n    else: \n        return True ",
        "test": "assert noprofit_noloss(100,100) # pass",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # Convert wind velocity to knots and convert temperature to fahrenheit\n    knots = v * 1.9438444\n    fahrenheit = (t * 9/5) + 32\n    \n    # Calculate the wind chill index\n    wind_chill_index = round((fahrenheit - 32) * 5/9)\n    \n    return wind_chill_index",
        "test": "assert wind_chill(60, 25) == 87",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name.islower():\n            sum += len(name)\n    return sum",
        "test": "assert sample_nam(['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']) == 0",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)",
        "test": "assert remove_parenthesis(\"\") == \"\"",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def is_nonagonal(n):\n    # Set up variables\n    count = 0\n    nonagonal = 0\n    i = 2\n    \n    while i <= n:\n        # If the sum of all the previous numbers is equal to the current number, add the current number to the nonagonal list\n        if sum(nonagonal) == i:\n            nonagonal.append(i)\n        # Increment the count and move to the next number\n        count += 1\n        i += 1\n    \n    # Return the nth nonagonal number\n    return nonagonal[count-1]",
        "test": "assert is_nonagonal(4) == 11",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Removing the start and end of the string\n    text = text[2:-2]\n\n    # Matching 'z' anywhere in the string\n    match = re.search(r'z', text)\n\n    # If 'z' is found, return True, else False\n    return bool(match)",
        "test": "assert text_match_wordz_middle(\"Hello World!\") == False",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Create a new empty list to store the reversed elements\n    reversed_list = []\n\n    # Traverse the input list from right to left\n    for i in range(len(input)-1, -1, -1):\n        # If the current element is greater than k, add it to the new list and shift it one position to the left\n        if input[i] > k:\n            reversed_list.append(input[i])\n            input.pop(i)\n        # If the current element is less than or equal to k, add it to the new list and shift it one position to the right\n        elif input[i] <= k:\n            reversed_list.append(input[i])\n            i -= 1\n\n    # Return the reversed list\n    return reversed_list",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [5, 4, 3, 2, 1]",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((1, 2, 3), {\"a\": 4, \"d\": 5, \"e\": 6}) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Get the dimensions of the matrix\n    N = len(cost)\n    \n    # Initialize the sum and count variables\n    sum = 0\n    count = 0\n    \n    # Iterate through each cell and compute the sum and count\n    for i in range(N):\n        for j in range(N):\n            sum += cost[i][j]\n            count += 1\n    \n    # Calculate the average\n    average = sum / count\n    \n    # Initialize the maximum average variable\n    max_avg = 0\n    \n    # Iterate through each cell and compare with the current maximum average\n    for i in range(N):\n        for j in range(N):\n            if cost[i][j] > max_avg:\n                max_avg = cost[i][j]\n    \n    # Return the maximum average\n    return max_avg",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 10]]) == 10.0",
        "num_ids": 1883,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def filter_data(students, h, w):\n    filtered_students = []\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students.append(name)\n    return filtered_students",
        "test": "assert filter_data({'John': (175, 80), 'Sarah': (165, 90), 'Mike': (180, 95), 'Bob': (170, 70)}, 160, 120) == [{'Mike': (180, 95)}, {'Sarah': (165, 90)}, {'John': (175, 80)}]",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create a dictionary to store the count of each value in the two lists\n    freq = {}\n    for i in range(len(nums1)):\n        if nums1[i] in freq:\n            freq[nums1[i]] += 1\n        else:\n            freq[nums1[i]] = 1\n    \n    # Count the number of occurrences of each value in the first list\n    count = [0] * len(nums2)\n    for num in nums1:\n        if num in freq:\n            count[freq[num]-1] += 1\n            \n    # Count the number of occurrences of each value in the second list\n    count = [count[j] if eq(nums2[j], nums1[i]) else 0 for i in range(len(nums1)) for j in range(len(count))]\n    \n    # Return the indices where the lists have the same values\n    same_indices = [i for i in range(len(nums1)) if count[i] == 1]\n    return same_indices",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [5, 4, 4, 5, 5]) == []",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    power = abs(power)\n\n    while power > 0:\n        # Get the last digit of the base\n        digit = base % 10\n        total += digit\n\n        # Divide the base by 10 and get the last digit\n        base = base // 10\n        power -= 1\n\n    return total",
        "test": "assert power_base_sum(2, 0) == 0, \"Expected result: 0\"",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # create a regular expression pattern for the quotation marks\n    pattern = r'\"(.+?)\"'\n    # find all matches of the pattern in the string\n    matches = re.findall(pattern, text1)\n    # return a list of values between the quotation marks\n    return matches[0] if matches else None",
        "test": "assert extract_quotation(\"This is a test \\\"This is a test\\\"\") == \"This is a test\"",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)",
        "test": "assert multiply_elements(()) == ()",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def sum_list(lst1, lst2):\n    # Add the length of the two lists\n    total_length = len(lst1) + len(lst2)\n    # Initialize an empty list to store the sum\n    result = []\n    # Iterate over the list and add each element to the result list\n    for i in range(total_length):\n        if i < len(lst1):\n            result.append(lst1[i])\n        elif i < len(lst1) + len(lst2):\n            result.append(lst2[i - len(lst1)])\n    return result",
        "test": "assert sum_list([1,2,3], []) == [1,2,3] # test for an empty list",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h",
        "test": "assert lateralsurface_cone(0.0,1.0) == 0.0",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expressions to replace spaces, commas, and dots\n    pattern = re.compile(r'\\s+')\n    replacement = ':'\n    # Replace all occurrences of the pattern in the text\n    return pattern.sub(replacement, text)",
        "test": "assert replace_specialchar(\"This, is, a, test.\") == \"This: is: a: test.\"",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 6) == -1",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * n\n    \n    # filling first row of dp array\n    for i in range(1, n):\n        dp[i] = dp[i-1] + arr[i]\n    \n    # filling remaining rows of dp array using dynamic programming approach\n    for i in range(2, n):\n        for j in range(i-1, -1, -1):\n            dp[i] = dp[i] + dp[j] * arr[i]\n    \n    # finding the sum of products of all possible sublists\n    subarray_sum = 0\n    for i in range(1, n):\n        subarray_sum += dp[i]\n    \n    return subarray_sum",
        "test": "assert sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Find the last bit\n    last_bit = n & -n\n    \n    # Extract the first and last bits\n    first_bit = n ^ last_bit\n    last_bit = last_bit ^ first_bit\n    \n    # Toggle the middle bit (the one at position n/2)\n    middle_bit = first_bit ^ last_bit\n    \n    # Combine the modified bits with the original bits\n    modified_bits = first_bit ^ middle_bit ^ last_bit\n    \n    # Return the modified number\n    return modified_bits",
        "test": "assert set_middle_bits
        "num_ids": 2549,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 5) == 2",
        "num_ids": 640,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # Using regex to check if the string starts with a vowel\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"hello\") is False",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)",
        "test": "assert geometric_sum(5) == 120",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Finds the index of the smallest triangular number with n digits.\n    '''\n\n    # Initialize variables\n    smallest_index = 0\n    smallest = math.pow(2, n-1)\n\n    # Iterate over the range of numbers from 2 to n-1\n    for i in range(2, n):\n        # Calculate the next number with n digits\n        next = math.pow(2, n-i-1)\n\n        # If the current number is smaller than the next number, update the smallest and smallest_index\n        if smallest > next:\n            smallest = next\n            smallest_index = i\n\n    # Return the index of the smallest triangular number with n digits\n    return smallest_index",
        "test": "assert find_Index(5) == 4, \"The index of the smallest triangular number with 5 digits should be 4.\"",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(1, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result\n",
        "test": "assert tuple_to_dict((1, 2, 3, 4, 5)) == {'1': 2, '2': 3, '3': 4, '4': 5}",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in s:\n        if count[char]!= 1:\n            return False\n    return True",
        "test": "assert all_Characters_Same(\"\") == True # all characters are same",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (0.5 * side**2) * math.sqrt(3)\n    return area",
        "test": "assert area_tetrahedron(6) == 20.0",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    rotated_list = []\n    for i in range(n - m):\n        rotated_list.append(list[i])\n    for i in range(m):\n        rotated_list.append(list[i + n - m])\n    return rotated_list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        if num % 10 == 0:\n            result.append(num)\n    return result",
        "test": "assert divisible_by_digits(12345, 56789) # should return [12345, 56789]",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import math\n\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r**2\n        return area",
        "test": "assert sector_area(6,361) == None",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Create a list to store the lengths of the LCS subsequences\n    lcs = [[0] * (len(Z) + 1) for _ in range(len(X) + 1)]\n\n    # Fill the LCS list using dynamic programming\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Z) + 1):\n            if X[i - 1] == Z[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n\n    # Find the length of the LCS subsequence with maximum length\n    max_length = lcs[len(X)][len(Z)]\n\n    # Create a list to store the LCS subsequence\n    lcs_subseq = []\n\n    # Traverse the LCS list from the maximum length to 1\n    for i in range(max_length, 0, -1):\n        lcs_subseq.append(Z[i - 1])\n\n    # Reverse the list to get the actual LCS subsequence\n    lcs_subseq.reverse()\n\n    return lcs_subseq",
        "test": "assert lcs_of_three(\"abc\", \"def\", \"klm\") == \"abc\"",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define a regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n\n    # find all matches in the input string\n    matches = re.findall(pattern, str1)\n\n    # replace each match with the appropriate space character\n    result = re.sub(pattern,'', str1)\n\n    # return the modified string\n    return result",
        "test": "assert capital_words_spaces(\"this is a test string\") == \"this is a test string\"",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings into a list of integers\n    nums = [int(num.strip()) for num in nums_str]\n\n    # Sort the list of integers\n    nums.sort()\n\n    # Convert the sorted list of integers back into a list of strings\n    return [str(num) for num in nums]\n",
        "test": "assert sort_numeric_strings(['5', '2', '8', '3', '1']) == ['1', '2', '3', '5', '8']",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_tuple([1,2,3], (1,2,4)) == (2, 3, 6)",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 1:\n        # Base case: a heap has only one element\n        return True\n\n    # Check if the left child of i is a min heap\n    if i*2 <= len(arr):\n        left_child = i*2\n        if left_child < len(arr) and arr[left_child] < arr[i]:\n            # If the left child is a min heap, check if the right child is also a min heap\n            if arr[left_child+1] < arr[i]:\n                return False\n            else:\n                # If the right child is also a min heap, return True\n                return check_min_heap_helper(arr, left_child+1)\n        else:\n            # If the left child is not a min heap, check if the right child is a min heap\n            if arr[left_child] < arr[i]:\n                # If the right child is a min heap, return True\n                return False\n            else:\n                # If the right child is not a min heap, return False\n                return True\n    else:\n        # If the root element is not a min heap, return False\n        return False",
        "test": "assert check_min_heap_helper(range(1,10), 0) # True",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n // 2) + 1\n    else:\n        return jacobsthal_num(3 * n // 2) + 1\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # create a dictionary to store the frequency of each record\n    freq = {}\n    for record in test_list:\n        if record in freq:\n            freq[record] += 1\n        else:\n            freq[record] = 1\n    \n    # sort the dictionary by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # get the k records with the highest frequency\n    k_records = []\n    for i in range(K):\n        if i < len(sorted_freq):\n            k_records.append(sorted_freq[i][0])\n    \n    return k_records",
        "test": "assert min_k([], 1) == []",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n\n    return common_elements\n",
        "test": "assert extract_index_list([1,2,3], [4,5,6], [7,8,9]) == [1, 4]",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:]) - min(numbers[:1])",
        "test": "assert second_smallest([]) == None",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    match = re.search(r'\\ba\\b', text)\n    if match:\n        return True\n    return False",
        "test": "assert text_match_zero_one(\"abb\") == False",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['a', 'b', 'c', 'd']) == 0",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in list1:\n        if i not in sublists:\n            sublists[i] = 1\n        else:\n            sublists[i] += 1\n    return sublists",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1783,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the string is a string and has only digits and a decimal point\n    if not isinstance(num, str) or not num.replace('.', '').isdigit():\n        return False\n    # check if the string has two decimal places\n    decimal_places = len(num.replace('.', '')) - 1\n    if decimal_places!= 2:\n        return False\n    # check if the string has any negative sign\n    negative = False\n    if num[0] == '-':\n        negative = True\n        num = num[1:]\n    # check if the string has any decimal point\n    decimal = False\n    if num.replace('.', '').count('.')!= 1:\n        decimal = True\n    return negative and not decimal",
        "test": "assert is_decimal(\"123.456\") == False",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def unique_Element(arr):\n    # create a dictionary to store the elements and their frequencies\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # check if there's only one distinct element in the list\n    if len(freq_dict) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 2, 3, 4]) == False",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(12) == True, \"Function check_monthnumber_number(12) returned True\"",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\n    Args:\n        arr (list): Array of integers.\n        n (int): Size of the array.\n\n    Returns:\n        int: Minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1,2,3,4,5], 5) == 1",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    return sum(1 for digit in str if digit.isdigit())",
        "test": "assert number_ctr(\"123\") == 3, \"number_ctr('123') should return 3\"",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    if n <= 0:\n        return False\n\n    count = 0\n    prev = 0\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            prev = i\n\n    if count == 1:\n        return True\n    else:\n        return False",
        "test": "assert is_polite(1) == False  # second test is_polite for 1",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n\narr = [1, 2, 3, 4, 5]\nsum = 7\nprint(\"Number of pairs whose sum is equal to\", sum, \":\", get_pairs_count(arr, sum))",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2 # The correct output should be 2",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([],[]) == []",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(25) == 153301",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n        elif char =='':\n            pass\n\n    return len(stack) == 0",
        "test": "assert check_expression(\"()\") == True",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) <= K:\n            result.append(word)\n    return \" \".join(result)",
        "test": "assert remove_length(\"This is a test\", 5) == \"This is a test\"",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # Use regular expressions to find all instances of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Find the index of the first occurrence of the pattern\n    for i in range(len(matches)):\n        if matches[i] == pattern:\n            return i\n\n    # If no occurrences were found, return None\n    return None",
        "test": "assert occurance_substring(\"hello world\", \"l\") is not None, \"The function should return None if no match is found.\"",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i] % 2 == 1:\n            return True\n    return False",
        "test": "assert odd_position([1, 2, 3, 4, 5]) == True",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    vowel_count = 0\n\n    for char in test_str:\n        if char in vowels and char!= test_str[0]:\n            vowel_count += 1\n\n    return vowel_count",
        "test": "assert count_vowels('') == 0  # an empty string has no vowels",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    # create a set to store unique elements in the array\n    unique_set = set(arr)\n\n    # create an empty set to store the sum of non-repeated elements\n    non_repeated_set = set()\n\n    # iterate through the array and check if each element is a unique element\n    for element in arr:\n        if element in unique_set:\n            non_repeated_set.add(element)\n\n    # return the sum of non-repeated elements\n    return sum(non_repeated_set)",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group list by elements and pack consecutive duplicates\n    grouped = groupby(list1, lambda x: x)\n    pack = []\n    for key, group in grouped:\n        if len(group) > 1:\n            pack.append(list(group))\n    return pack",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of unique sublists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    sublist_count = {}\n    for sublist in list1:\n        sublist_count[sublist] = sublist_count.get(sublist, 0) + 1\n\n    return sublist_count",
        "test": "assert unique_sublists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from itertools import combinations\nimport math\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Function to calculate the sum of tuples in a list\n    def sum_of_tuples(tuple_list):\n        return sum(tuple(tuple_list[i]) for i in range(len(tuple_list)))\n    \n    # Function to find the next combination of sums with tuples in a list\n    def find_next_combination(sums_with_tuples, target_sum, current_combination):\n        # Check if the target sum is found in the current combination\n        if target_sum in current_combination:\n            return current_combination\n        \n        # Check if the current combination is valid\n        if len(current_combination) == 0 or sum_of_tuples(current_combination) > target_sum:\n            return []\n        \n        # Find the next combination with the remaining sums with tuples\n        for i, sum in enumerate(sums_with_tuples):\n            # Check if the sum is smaller than the current sum\n            if sum <= current_combination[-1]:\n                # Update the current combination with the sum and the next element in the list\n                new_combination = current_combination[:i] + [sum] + current_combination[i+1:]\n                # Check if the next combination is valid and append it to the list\n                next_combination = find_next_combination(sums_with_tuples, target_sum - sum, new_combination)\n                if next_combination:\n                    return [new_combination] + next_combination\n        # If no valid combination is found, return an empty list\n        return []\n    \n    # Calculate the sum of the tuples in the given list\n    total_sum = sum_of_tuples(test_list)\n    \n    # Initialize the list of sums with tuples\n    sums_with_tuples = sorted(set(range(1, total_sum+1)), key=lambda x: sum_of_tuples([x, x+1]))\n    \n    # Find the next combination of sums with tuples\n    combination = find_next_combination(sums_with_tuples, total_sum, [])\n    \n    # Return the list of combinations with tuples\n    return combination",
        "test": "assert find_combinations([1,2]) == [(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5)]",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 1\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(2) == 2, \"The function should return 2 for the input n=2.\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        if arr[i] % 2!= 0:\n            sub_arr = arr[i:i+2]\n            sum += sum_of_sub_arr(sub_arr)\n    return sum\n\n\ndef sum_of_sub_arr(sub_arr):\n    '''\n    Write a python function to find the sum of all elements of a subarray.\n    '''\n    sum = 0\n    for element in sub_arr:\n        sum += element\n    return sum",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45 # correct",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Calculate the maximum and minimum color values\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum color values\n    delta = max_color - min_color\n    \n    # If the color values are between 0 and 255, convert them to the corresponding HSV values\n    if delta == 0:\n        hue = 0\n        saturation = 0\n    elif max_color == r:\n        hue = (g - b) / delta\n        saturation = delta / max_color\n    elif max_color == g:\n        hue = 2 + (b - r) / delta\n        saturation = delta / max_color\n    else:\n        hue = 4 + (r - g) / delta\n        saturation = delta / max_color\n    \n    # Return the HSV color values\n    return hue, saturation, max_color",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num\n    return product",
        "test": "assert mul_even_odd([1, 1, 1, 1, 1]) == 1 # check for correct result",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))",
        "test": "assert tuple_str_int(('a', 1, 'b', 2, 'c', 3)) == (('a', 1), ('b', 2), ('c', 3))",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Locate the right insertion point for a specified value in a sorted list.\n\n    Parameters:\n    - a: list of elements (sorted)\n    - x: the value to locate the insertion point for\n\n    Returns:\n    - The index of the rightmost element greater than or equal to `x` in the list `a`.\n    '''\n    return bisect.bisect_right(a, x)",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 8) == 4",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Matches a string that has an 'a' followed by three 'b's.\n    '''\n    pattern = r'\\ba\\b\\b'\n    match = re.match(pattern, text)\n    return match\n\ntext = \"This is an example string. It has an 'a' followed by three 'b's.\"\nmatch = text_match_three(text)\nif match:\n    print(f\"The string '{text}' matches the pattern 'a followed by three 'b's'.\")\nelse:\n    print(f\"The string '{text}' does not match the pattern 'a followed by three 'b's'.\")",
        "test": "assert text_match_three(\"ababaab\") == False, \"text_match_three failed\"",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Create a new tuple from the given string and list.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Join the list of words into a string\n    new_str =''.join(words)\n    # Split the new string into a list of tuples\n    tuples = []\n    for word in new_str.split():\n        tuples.append((word, 1))\n    return tuples",
        "test": "assert new_tuple(['a', 'b', 'c'], 'xyz') == ('a', 'b', 'c', 'xyz')",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return True\n    return False",
        "test": "assert even_position([1, 2, 3, 4, 5, 6]) == False, \"Even positions should not contain even numbers\"",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def remove_nested(test_tup):\n    '''\n    Removes nested tuples from a tuple.\n    '''\n    nested_tuple = ()\n    for element in test_tup:\n        if isinstance(element, tuple):\n            nested_tuple += (element,)\n        else:\n            nested_tuple += (element,)\n    return nested_tuple",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == []:\n        return -1\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n        \n        else:\n            right = mid - 1\n    \n    return -1",
        "test": "assert last([1,2,3,4,5],5) == 4 # Test case 2",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'\\ba\\w*b')\n    return pattern.match(text)\n\ntext = \"aaaabbbbccc\"\nresult = text_starta_endb(text)\nif result:\n    print(\"Match found!\")\nelse:\n    print(\"No match found.\")",
        "test": "assert text_starta_endb(\"heLLo\") == \"heLLo\"",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total",
        "test": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(n, -1, -2):\n        total += i\n    return total",
        "test": "assert sum_odd(0) == 0, \"Expected sum_odd(0) to return 0\"",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3]) == 6   # Test case 1",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    if d == 0:\n        return n\n    else:\n        return (n << d) | (n >> (32 - d))",
        "test": "assert left_rotate(15,9) == 1 #rotate left by 9 bits",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)",
        "test": "assert remove_all_spaces(\"\") == \"\"",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for num in (x, y, z):\n        if num == num:\n            count += 1\n    return count",
        "test": "assert test_three_equal(1,2,3) == 3",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n\n    # If the array is already sorted in descending order, return 0\n    if arr == sorted(arr, reverse=True):\n        return 0\n\n    # Initialize a count variable to 0\n    count = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is greater than the last element in the array, increment the count\n        if arr[i] > arr[i+1]:\n            count += 1\n\n        # If the current element is less than the last element in the array, decrement the count\n        if arr[i] < arr[i+1]:\n            count -= 1\n\n    return count",
        "test": "assert count_rotation([1, 2, 3, 4, 5, 6, 7, 8]) == 0",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    root = int(n**(1/2))\n    if n == root**2:\n        return True\n    else:\n        return False",
        "test": "assert is_perfect_square(0) == True",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(1, len(arr)+1):\n        product *= i\n    return product % 2 == 0",
        "test": "assert is_product_even([1, 2, 3, 4, 5]) # True",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sum_list(lists):\n    '''\n    Return the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = None\n    # Iterate through each list in the input list\n    for lst in lists:\n        # Calculate the sum of each element in the list\n        sum_lst = sum(lst)\n        # If the sum is greater than the current maximum sum, update max_sum and max_list\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    # Return the max_list\n    return max_list",
        "test": "assert max_sum_list([[1, 1, 1], [1, 1, 1]]) == [1, 1, 1]",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    index = 0\n\n    # Iterate through the string\n    while index < len(test_str):\n        if test_str[index].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        index += 1\n\n    return max_run",
        "test": "assert max_run_uppercase(\"abc\") == 0 # string \"abc\" with 0 maximum run of uppercase characters",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    first_odd_num = None\n    for num in nums:\n        if num % 2!= 0: # check if number is odd\n            if first_odd_num is None: # if first odd number is not found yet\n                first_odd_num = num\n            elif num < first_odd_num: # if num is smaller than current first odd number\n                first_odd_num = num # update first odd number to current num\n    return first_odd_num",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1  # Check the first odd number in the list [1, 2, 3, 4, 5]",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= len(K):\n        return False\n    else:\n        for i in range(len(test_tup)):\n            if test_tup[i] not in K[i]:\n                return False\n        return True",
        "test": "assert check_K((1, 2, 3), 1) == False",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n",
        "test": "assert check_smaller((1, 2, 3), (1, 2, 3)) == False",
        "num_ids": 501,
        "indeed": true
    }
]