[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements",
        "test": "assert similar_elements((\"a\", \"b\", \"c\", \"d\", \"e\"), (\"b\", \"c\", \"d\", \"e\")) == (\"b\",)",
        "num_ids": 726
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True",
        "test": "assert is_not_prime(1) == True",
        "num_ids": 614
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n, nums)",
        "test": "assert heap_queue_largest([],0) == []",
        "num_ids": 965
    },
    {
        "number": 6,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Power_Of_Two(x): \n    if x == 1:\n        return True\n    elif x == 2:\n        return False\n    else:\n        for i in range(3, int(x**0.5)+1, 2):\n            if x % i == 0:\n                return False\n        return True",
        "test": "assert is_Power_Of_Two(2) == False, \"is_Power_Of_Two(2) should return False\"",
        "num_ids": 516
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to match all words with at least 4 characters\n    words = re.findall(r'\\b[A-Za-z]+\\b', text)\n    return words",
        "test": "assert find_char_long(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 618
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Initialize an empty list to store squares\n    squares = []\n\n    # Loop through each element in the input list\n    for num in nums:\n        # Calculate the square of the current element\n        square = num**2\n        \n        # Append the square to the list of squares\n        squares.append(square)\n    \n    # Return the list of squares\n    return squares",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 611
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # count the number of rotations needed to get the same string\n    rotations = 0\n    for i in range(len(str)):\n        if str[i:i+1] == str:\n            rotations += 1\n\n    # return the minimum number of rotations\n    return rotations",
        "test": "assert find_Rotations('hello') == 0, \"The correctness of the function find_Rotations is not yet checked.\"",
        "num_ids": 811
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,\"\")\n        return s\n    else:\n        return \"Character not found in the string\"",
        "test": "assert remove_Occ(\"hello world\", \"e\") == \"he\"",
        "num_ids": 681
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        row_sum = sum(M[i])\n        M[i].sort(key=lambda x: x + row_sum - row_sum % 2)  # Sort the rows based on the sum of their rows.\n    return M",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1268
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Volume(l, b, h):\n    volume = l*b*h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 6",
        "num_ids": 366
    },
    {
        "number": 16,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a pattern to match sequences of lowercase letters and underscore\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n\n    # Return True if the pattern is found in the input string, False otherwise\n    return bool(pattern.search(text))",
        "test": "assert text_lowercase_underscore(\"apple\") == False",
        "num_ids": 616
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a",
        "test": "assert square_perimeter(3) == 9 # test for square with side length 3",
        "num_ids": 356
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the non-overlapping characters\n    non_overlapping_chars = []\n    \n    # Loop through each character in the first string\n    for char in string:\n        # Check if the character is present in the second string\n        if char in string:\n            # Add the character to the non-overlapping_chars list\n            non_overlapping_chars.append(char)\n    \n    # Return the non-overlapping_chars list\n    return non_overlapping_chars",
        "test": "assert str_to_list(\"\") == []",
        "num_ids": 732
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Test whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
        "test": "assert test_duplicate([1,2,3,2,5]) == True #1 is a duplicate of 2, 3, 4, 5",
        "num_ids": 648
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_woodall(x): \n    '''\n    This function checks if a given number is a woodball number or not.\n    '''\n\n    # Initialize variables\n    if x < 10:  # base case 1\n        return True\n    elif x % 10 == 1 or x % 10 == 3 or x % 10 == 7:  # base case 2\n        return False\n    else:\n        return is_woodall(x // 10)  # recursive call\n",
        "test": "assert is_woodall(51) == False",
        "num_ids": 569
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    if num < 0:\n        return False\n    elif num == 0:\n        return True\n    elif num == 1:\n        return False\n    else:\n        reverse = 0\n        while num > 0:\n            reverse = reverse * 10 + num % 10\n            num = num // 10\n        return reverse == 1 or reverse == 2",
        "test": "assert rev(2) is True, \"rev(2) should return True\"",
        "num_ids": 491
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_Max_Num(arr):\n    max_num = arr[0] # assuming the first element in the list is the largest number\n    \n    for num in arr[1:]:\n        if num > max_num:\n            max_num = num\n    \n    return max_num",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 5",
        "num_ids": 811
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if the given integers have opposite sign\n    if x * y < 0!= x < y * -1:\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(10,-5) == False",
        "num_ids": 679
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    if n == 1: \n        return 1\n    elif n % 2 == 0:\n        return is_octagonal(n//2) + is_octagonal(n//2)\n    else:\n        return is_octagonal(3*n//2) + is_octagonal(3*n//2) + is_octagonal(3*n//2)\n",
        "test": "assert is_octagonal(1) == True, \"Test 1\"",
        "num_ids": 690
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Convert string to lowercase\n    s = s.lower()\n    # Initialize dictionary to store counts\n    counts = defaultdict(int)\n    # Loop through each character in the string\n    for char in s:\n        # Add current character to counts dictionary\n        counts[char] += 1\n    # Initialize sum and current substring\n    total_sum = 0\n    current_substring = \"\"\n    # Loop through each character in the string again\n    for char in s:\n        # If current character is a digit, add its value to total_sum\n        if char.isdigit():\n            total_sum += int(char)\n        # If current character is not a digit, update the current substring\n        else:\n            current_substring += char\n            # If the total sum of the substring is equal to its length, increment the count in the counts dictionary\n            if total_sum == len(current_substring):\n                counts[current_substring] += 1\n            # Reset current substring and total_sum\n            current_substring = \"\"\n            total_sum = 0\n    # Return the number of substrings with the sum of digits equal to their length\n    return len(counts)",
        "test": "assert count_Substrings('a') == 1",
        "num_ids": 978
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float('inf')\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest",
        "test": "assert smallest_num([1,2,3,4,5]) == 1",
        "num_ids": 503
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = 0\n    max_pair = None\n    # Loop through each pair in the list\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            # Calculate the difference between the pair\n            diff = abs(test_list[j][0] - test_list[i][0]) + abs(test_list[j][1] - test_list[i][1])\n            # Check if the difference is greater than the current maximum difference\n            if diff > max_diff:\n                # Update the maximum difference and the corresponding pair\n                max_diff = diff\n                max_pair = (test_list[j][0], test_list[j][1])\n    # Return the maximum difference and the corresponding pair\n    return max_diff, max_pair",
        "test": "assert max_difference([1, 2, 2, 3, 3]) == 1",
        "num_ids": 1175
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks",
        "test": "assert subject_marks([(90, 'Maths'), (85, 'Science'), (90, 'English'), (80, 'History'), (90, 'Chemistry')]) == [('Maths', 90), ('Science', 85), ('English', 90), ('History', 80), ('Chemistry', 90)]",
        "num_ids": 904
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n\n    head = data_list.pop(0)\n    total_sum = head + recursive_list_sum(data_list)\n\n    return total_sum",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 733
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 455
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_number(n):\n    # Initialize the count of ways to partition Bell numbers\n    ways_to_partition = 0\n\n    # Loop through all possible Bell numbers from 0 to n-1\n    for i in range(n):\n\n        # If i is divisible by the current Bell number, add 1 to the count of ways to partition\n        if i % n == 0:\n            ways_to_partition += 1\n\n    # Return the count of ways to partition\n    return ways_to_partition",
        "test": "assert bell_number(1) == 1",
        "num_ids": 790
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Traverse through the array and check if any two adjacent elements are in the wrong order.\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            return False\n\n    return True",
        "test": "assert is_Monotonic([1, 2, 3, 5, 4]) == False",
        "num_ids": 795
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True",
        "test": "assert is_sublist(['a'], ['a']) == True",
        "num_ids": 654
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_equal_tuple(Input):\n    if len(Input) == len(set(Input)):\n        return True\n    else:\n        return False",
        "test": "assert find_equal_tuple([1,2,3,4]) == True",
        "num_ids": 640
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums",
        "test": "assert comb_sort([3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3]",
        "num_ids": 897
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def dif_Square(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert dif_Square(25) == False # Check if the function returns False for a number that cannot be represented as the difference of two squares",
        "num_ids": 698
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if len(set(colors[i]) - set(patterns[i]))!= 0:\n            return False\n    return True",
        "test": "assert is_samepatterns(['red', 'blue', 'green', 'yellow', 'orange'], ['red', 'green', 'purple']) == False",
        "num_ids": 798
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_with_divisible_elements = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            tuples_with_divisible_elements.append(tuple)\n    return tuples_with_divisible_elements",
        "test": "assert find_tuples([], 3) == []",
        "num_ids": 940
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False",
        "test": "assert is_Diff(2) == False",
        "num_ids": 347
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def word_len(s):\n    return len(s)\n\ndef is_odd(n):\n    return n % 2 == 1\n\ndef main():\n    s = input(\"Enter a string: \")\n    print(\"The length of the word is:\", word_len(s))\n    if is_odd(word_len(s)):\n        print(\"The word is odd.\")\n    else:\n        print(\"The word is even.\")\n\nif __name__ == \"__main__\":\n    main()",
        "test": "assert word_len(\"world hello\") == 11 # length of word \"world\" is 5 characters",
        "num_ids": 591
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n\n    Args:\n        n (int): The nth tetrahedral number to find.\n\n    Returns:\n        int: The nth tetrahedral number.\n\n    \"\"\"\n\n    # Base cases\n    if n == 1:\n        return 1\n\n    # Check for common factors\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n\n    # Check for tetrahedral numbers\n    if n in factors:\n        return n\n\n    # If n is not in factors, return None\n    return None",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 1254
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = math.pi * r ** 3\n    return volume",
        "test": "assert volume_sphere(1) == 3.141592653589793",
        "num_ids": 489
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_count = 0\n    for char in strr:\n        char_count += ord(char) % 26\n    return chr(char_count % 26)",
        "test": "assert get_Char('hello') == 'l'",
        "num_ids": 484
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sequence(n):\n    # Define the values of the sequence\n    values = [0, 1]\n\n    # Generate the remaining values in the sequence\n    for i in range(2, n+1):\n        next_value = values[i-1] + values[i-2]\n        values.append(next_value)\n\n    # Return the nth value in the sequence\n    return values[n]",
        "test": "assert sequence(1) == 1  # test for base case",
        "num_ids": 1482
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * r * r",
        "test": "assert surfacearea_sphere(1) == 3.141592653589793, \"The surface area of a sphere is approximately 3.141592653589793\"",
        "num_ids": 535
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    if n < 1 or n > 25:\n        return None\n    \n    hexagonal_numbers = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12]\n    centered_hexagonal = sum(hexagonal_numbers[:n-1]) + hexagonal_numbers[n-1]\n    return centered_hexagonal",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 1030
    },
    {
        "number": 87,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(lambda: {})\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({},{},{}) == {}",
        "num_ids": 957
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary of the frequency of each element in the list.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 660
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = N\n    for i in range(1, N + 1):\n        if abs(i - N) < abs(closest_num - N):\n            closest_num = i\n    return closest_num",
        "test": "assert closest_num(10) == 10",
        "num_ids": 461
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    max_length = 0\n    longest_word = \"\"\n\n    # loop through each element in the list\n    for word in list1:\n        # check if the length of the current word is greater than max_length\n        if len(word) > max_length:\n            # update max_length and longest_word\n            max_length = len(word)\n            longest_word = word\n\n    # return the length of the longest word\n    return max_length",
        "test": "assert len_log([]) == 0",
        "num_ids": 675
    },
    {
        "number": 91,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_of_strings = ['apple', 'banana', 'cherry', 'date']\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring('hello world', 'world') == True",
        "num_ids": 644
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is odd\n    if n % 2!= 0: \n        return True\n    \n    # Check if the number is divisible by 3 or 5\n    for i in range(3, n//2+1, 2):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n    \n    # If none of the above conditions are satisfied, return False\n    return False",
        "test": "assert is_undulating(12345) == True",
        "num_ids": 603
    },
    {
        "number": 93,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result",
        "test": "assert power(2,3) == 8 ",
        "num_ids": 398
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))",
        "test": "assert index_minimum([('apple', 2), ('banana', 1), ('orange', 3), ('grape', 2), ('kiwi', 4)]) == ('banana', 1)",
        "num_ids": 774
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 1:\n        return len(lst[0])\n    else:\n        min_len = len(lst[0])\n        for item in lst:\n            if len(item) < min_len:\n                min_len = len(item)\n        return min_len",
        "test": "assert Find_Min_Length([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h'], ['i']]) == 1",
        "num_ids": 715
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def divisor(n):\n    # Initialize the number of divisors to 1\n    divisors = 1\n    \n    # Perform Euclidean algorithm to find the number of divisors\n    for i in range(2, n+1):\n        # Check if the number is divisible by i\n        if n % i == 0:\n            # If it is, increment the number of divisors\n            divisors += 1\n    \n    # Return the number of divisors\n    return divisors",
        "test": "assert divisor(2) == 2 # 2 has only 2 divisors",
        "num_ids": 693
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n",
        "test": "assert frequency_lists([1, 2, 3, 4, 5, 5, 5, 5]) == {'1': 1, '2': 1, '3': 1, '4': 2}",
        "num_ids": 1109
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def multiply_num(numbers):\n    # Multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    # Divide the product by the length of the list\n    length = len(numbers)\n    product /= length\n    return product",
        "test": "assert multiply_num([2, 3, 4]) == 8",
        "num_ids": 501
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary",
        "test": "assert decimal_to_binary(5) == \"101\"",
        "num_ids": 513
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Function to find the next smallest palindrome of a specified integer, returning as an integer.\n\n    Parameters:\n    num: an integer\n\n    Returns:\n    The next smallest palindrome of the input integer, as an integer.\n    '''\n\n    # Initialize the next smallest palindrome to the first number\n    next_smallest = num\n\n    # Loop through each number between 1 and the square root of the input number\n    for i in range(1, int(num**0.5)+1):\n        # Check if the input number is a palindrome by comparing the square of the current number to the square of the next smallest palindrome\n        if num == int(i**0.5)**2:\n            # If the input number is a palindrome, update the next smallest palindrome\n            next_smallest = i\n\n    return next_smallest",
        "test": "assert next_smallest_palindrome(10) == 10",
        "num_ids": 991
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return None\n    \n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 4) == 4",
        "num_ids": 629
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    camel_case = word[0].lower() + word[1:]\n    return camel_case",
        "test": "assert snake_to_camel(\"camelCaseString\") == \"camelCaseString\"",
        "num_ids": 440
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def eulerian_num(n, m):\n    e = [1]\n    for i in range(2, n):\n        a_i = e[i-1]\n        for j in range(2, m):\n            a_j = e[j-1]\n            e.append(a_i + a_j)\n    return e",
        "test": "assert eulerian_num(5, 10) == 28",
        "num_ids": 866
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n\n    # Sort each sublist using Python's built-in sort() function\n    for sublist in input_list:\n        sublist.sort()\n\n    # Return the sorted sublists as a new list\n    return [sublist for sublist in input_list]",
        "test": "assert sort_sublists([[\"a\",\"b\"],[\"c\",\"d\"],[\"e\",\"f\"],[\"g\",\"h\"],[\"i\",\"j\"],[\"k\",\"l\"],[\"m\",\"n\"]]) == [[\"a\",\"b\"],[\"c\",\"d\"],[\"e\",\"f\"],[\"g\",\"h\"],[\"i\",\"j\"],[\"k\",\"l\"],[\"m\",\"n\"]]",
        "num_ids": 1364
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count",
        "test": "assert count([True, False, True, False, True]) == 3",
        "num_ids": 343
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n    return test_tup",
        "test": "assert add_lists([], []) == []",
        "num_ids": 564
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three sorted lists using heapq\n    merged_list = heapq.merge(num1, num2, num3)\n    # Convert the merged list to a sorted list\n    sorted_list = sorted(merged_list)\n    return sorted_list\n",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 2345
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    s (str): a binary string representing a number\n    n (int): the number of times the binary string should be rotated\n\n    Returns:\n    int: the number of odd numbers found in the binary string after rotating n times\n    '''\n    # initialize count of odd numbers to 0\n    odd_count = 0\n\n    # loop n times, rotating the string\n    for i in range(n):\n        # rotate the string to the right by one position\n        s = s[1:] + s[0]\n\n    # loop through the rotated string and count the number of odd numbers\n    for num in s:\n        if int(num) % 2!= 0:\n            odd_count += 1\n\n    return odd_count",
        "test": "assert odd_Equivalent(\"1001\",2) == 2 #Test Case 1",
        "num_ids": 951
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested_list in nestedlist:\n        for element in nested_list:\n            if element not in common_elements:\n                common_elements.append(element)\n    return common_elements",
        "test": "assert common_in_nested_lists([[1,2],[3,4]]) == [1,2,3,4]",
        "num_ids": 1263
    },
    {
        "number": 113,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True, \"123 is not an integer\"",
        "num_ids": 480
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if not dictionary:\n            return False\n    return True",
        "test": "assert empty_dit([]) == True",
        "num_ids": 372
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert tuple_to_int(()) == 0",
        "num_ids": 409
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Create an empty list to store the converted values\n    converted_values = []\n\n    # Iterate through each element in the input list\n    for row in test_list:\n        # Iterate through each element in the row\n        for value in row:\n            # Check if the value can be converted to a float\n            if value.replace('.', '').isdigit():\n                # If the value can be converted to a float, add it to the list of converted values\n                converted_values.append(float(value))\n\n    # Return the list of converted values\n    return converted_values",
        "test": "assert list_to_float([[]]) == 0.0",
        "num_ids": 908
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()",
        "test": "assert string_to_list(\"Hello world!\") == ['Hello', 'world!']",
        "num_ids": 325
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    max_count = 0\n    max_element = None\n    \n    for num in count:\n        if count[num] > max_count:\n            max_count = count[num]\n            max_element = num\n    \n    return max_element",
        "test": "assert search([1, 2, 2, 3, 3, 4, 4, 5]) == 2",
        "num_ids": 858
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            abs_product = abs(product)\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product",
        "test": "assert max_product_tuple([(1, 2), (3, 4)]) == 6",
        "num_ids": 1135
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize a list to store the amicable numbers\n    amicable_numbers = []\n\n    # loop through all numbers from 1 to limit\n    for num in range(1, limit+1):\n        # check if the number is divisible by both 1 and itself\n        if num % 1 == 0 and num % 1 == 0:\n            # check if the number is divisible by any number between 2 and the square root of the number\n            if num % (num//2) == 0:\n                # if it is, add it to the list of amicable numbers\n                amicable_numbers.append(num)\n\n    # return the sum of all amicable numbers in the list\n    return sum(amicable_numbers)\n",
        "test": "assert amicable_numbers_sum(100000) == 416857",
        "num_ids": 890
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    real = a.real + b.real\n    imag = a.imag - b.imag\n    angle = cmath.phase(a)\n    return abs(angle)",
        "test": "assert angle_complex(3,4) == angle_complex(3,4)",
        "num_ids": 610
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    count_zeros = 0\n    count_ones = 0\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is 0, increment count_zeros\n        if char == '0':\n            count_zeros += 1\n        # If the character is 1, increment count_ones\n        elif char == '1':\n            count_ones += 1\n\n        # Calculate the difference between count_zeros and count_ones\n        diff = abs(count_zeros - count_ones)\n\n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff",
        "test": "assert find_length(\"1101\") == 2",
        "num_ids": 3055
    },
    {
        "number": 126,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b // gcd(a,b)\n\ndef gcd(a,b): \n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    if b == 0: \n        return a\n    return gcd(b,a % b)",
        "test": "assert sum(4,6) == 12, \"The sum of 4 and 6 should be 12.\"",
        "num_ids": 680
    },
    {
        "number": 127,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 263
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(10, \"The quick brown fox jumps over the lazy dog.\") == []",
        "num_ids": 569
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    # Check if the matrix is of size 4x4\n    if rows!= 4 or cols!= 4:\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= i + j + 1:\n                return False\n    \n    return True",
        "test": "assert magic_square_test([[1,2,3], [4,5,6], [7,8,9], [1,2,3]]) == False, \"The matrix is a magic square.\"",
        "num_ids": 1192
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Find the item with the maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list of numbers and update the frequency count\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item",
        "test": "assert max_occurrences([1, 2, 3, 2, 4, 5]) == 2, \"max_occurrences([1, 2, 3, 2, 4, 5]) should return 2\"",
        "num_ids": 942
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = str1.lower()  # convert to lowercase to ignore case\n    reversed_str = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str",
        "test": "assert reverse_vowels(\"Hello, World!\") == \"dlrow,olleH\"",
        "num_ids": 642
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def tup_string(tup1):\n    '''\n    Converts a tuple to a string.\n    '''\n    # Define a string to hold the result\n    result = ''\n\n    # Loop through each element in the tuple\n    for element in tup1:\n        # Append the element to the result string\n        result += str(element)\n\n    # Return the result string\n    return result",
        "test": "assert tup_string((\"hello\", 123, \"world\")) == \"hello123world\"",
        "num_ids": 335
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sum_negativenum(nums):\n    '''\n    This function calculates the sum of the negative numbers in a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total",
        "test": "assert sum_negativenum([-1, -2, -3, -4]) == -10",
        "num_ids": 540
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # First, check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the nth hexagonal number\n    hexagonal = (n * (n + 1)) // 2\n    \n    return hexagonal",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 779
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    return (zero_count / non_zero_count) if non_zero_count > 0 else 0\n",
        "test": "assert zero_count([0, 0, 0, 0, 0]) == 0",
        "num_ids": 959
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Convert the given number to binary and count the number of zeros\n    zeros = bin(n)[2:].count('0')\n    \n    # Check if the number of zeros is less than or equal to the number of ones\n    if zeros <= n.bit_length():\n        return True\n    else:\n        return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 1052
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * r * math.pi\n    return circumference",
        "test": "assert circle_circumference(5) == 31.41592653589793",
        "num_ids": 482
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        flattened_list.extend(item)\n    return flattened_list",
        "test": "assert extract_singly([]) == []",
        "num_ids": 595
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def pancake_sort(nums):\n    for i in range(len(nums)):\n        # initialize the index variable to the next element after the current element\n        j = i + 1\n        \n        # while the current element is less than or equal to the next element\n        while j < len(nums):\n            \n            # if the current element is greater than the next element\n            if nums[i] > nums[j]:\n                # swap the elements\n                nums[i], nums[j] = nums[j], nums[i]\n                \n                # increment the index variable\n                j += 1\n            \n            # if the current element is less than the next element\n            else:\n                j += 1\n    \n    return nums",
        "test": "assert pancake_sort([3, 2, 1, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1108
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_samepair(list1, list2, list3):\n    # sort lists so that they have the same order\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    \n    # find the difference between the two sorted lists\n    n = len(list1)\n    i = 0\n    count = 0\n    while i < n:\n        if list1[i] == list2[i]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    \n    return count",
        "test": "assert count_samepair( [1, 2, 3, 4, 5], [1, 2, 4, 5, 6], [1, 3, 5] ) == 2",
        "num_ids": 756
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_lists(Input):\n    num_lists = 0\n    for item in Input:\n        if isinstance(item, tuple):\n            num_lists += 1\n    return num_lists",
        "test": "assert find_lists(1, 2, 3, 4, 5, 6) == 2",
        "num_ids": 509
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Returns the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = 0\n    min_a = float('inf')\n    max_a = float('-inf')\n    min_b = float('inf')\n    max_b = float('-inf')\n\n    for num in arr:\n        if num > max_a:\n            max_a = num\n        if num < min_a:\n            min_a = num\n        if num > max_b:\n            max_b = num\n        if num < min_b:\n            min_b = num\n        \n        diff = max(num, max_a - num, max_b - num)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff",
        "test": "assert max_Abs_Diff([5,4,3,2,1]) == 5",
        "num_ids": 820
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    while (x**2 + y**2) <= n:\n        x += a\n        y += b\n    if x**2 + y**2 == n:\n        return (x, y)\n    else:\n        return None",
        "test": "assert find_solution(3, 4, 7) == None",
        "num_ids": 666
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]",
        "test": "assert remove_elements([1,2,3,4,5], [3,4]) == [1, 2, 5]",
        "num_ids": 724
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2*i)\n    return result",
        "test": "assert sum_series(0) == 0, \"The correct sum of series should be 0, but it is {}.\".format(sum_series(0))",
        "num_ids": 848
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Calculates the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += s * (s/2)\n    return area",
        "test": "assert area_polygon(2, 3) == 6",
        "num_ids": 507
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                break\n        else:\n            if i == n:\n                return True\n    return False\n\nn1 = int(input(\"Enter the first integer: \"))\nn2 = int(input(\"Enter the second integer: \"))\n\nif div_sum(n1) and div_sum(n2):\n    print(\"The sum of the divisors of\", n1, \"and\", n2, \"is:\", sum)\nelse:\n    print(\"The sum of the divisors of\", n1, \"and\", n2, \"is not the same.\")",
        "test": "assert div_sum(100) == 3125, \"The sum of the divisors of 100 should be 3125.\"",
        "num_ids": 830
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower() # convert string to lowercase for case insensitivity\n    \n    count = 0\n    for char in str1:\n        if char.isalpha(): # check if character is alphabetic\n            if char.lower() == str1[count:]: # check if character matches at the same position as in the string\n                count += 1\n            else: # if character does not match at the same position, count it as a new character\n                count += 1\n    \n    return count # return the count of characters that match at the same position in the string as in the English alphabet",
        "test": "assert count_char_position('Hello World') == 10",
        "num_ids": 1155
    },
    {
        "number": 166,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] & 1 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2",
        "num_ids": 731
    },
    {
        "number": 167,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def next_power_of_2(n):\n    while n <= 1:\n        n *= 2\n    return n",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 794
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,3,2,1],2) == 2",
        "num_ids": 550
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through the list\n    for i in range(m, n+1):\n        # Add each number to the total sum\n        total_sum += list1[i-m]\n\n    return total_sum",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 4) == 10",
        "num_ids": 891
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2*a*(a-1)*(a-2)*(a-3)",
        "test": "assert perimeter_pentagon(4) == 20 # side length of the base of the pentagon is 4",
        "num_ids": 707
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_occurance(s):\n    '''\n    This function takes in a string's' and returns the count of'std' in it.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count\n\ns = \"standard\"\nprint(count_occurance(s))",
        "test": "assert count_occurance(\"Hello world, std is a string. This string should not be counted.\") == 1",
        "num_ids": 467
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for element in test_tuple:\n        if type(element)!= type(test_tuple[0]):\n            return False\n    return True",
        "test": "assert check_type([1, 2, 3]) == True",
        "num_ids": 533
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n        if count == n//2:\n            return True\n    return False",
        "test": "assert is_majority([1,2,3,3,3,4,4,4,4,4,5,6,7,8,8,8,9,10,11,11,12,13,14,14,14,14,15,16,17,18,19,19,19,19,20], 11, 16) == False",
        "num_ids": 1075
    },
    {
        "number": 224,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 635
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through each character in the string\n    for char in str:\n        # If the character has an odd index, add it to the result string\n        if char % 2!= 0:\n            result += char\n    \n    return result",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 691
    },
    {
        "number": 227,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_of_three(a, b, c):\n    return min(a, b, c)",
        "test": "assert min_of_three(10,20,30) == 10",
        "num_ids": 405
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n    n (int): The number of bits to check.\n    l (int): The lower limit of the range.\n    r (int): The upper limit of the range.\n\n    Returns:\n    bool: True if all bits are unset in the given range, False otherwise.\n\n    Example:\n    >>> all_Bits_Set_In_The_Given_Range(4, 1, 10)\n    False\n    >>> all_Bits_Set_In_The_Given_Range(12, 1, 10)\n    True\n    \"\"\"\n\n    # Initialize a boolean variable to check if all bits are unset in the given range.\n    result = True\n\n    # Iterate over each bit in the given range.\n    for i in range(l, r + 1):\n        # Check if the bit is set or not.\n        if n & (1 << i) == 0:\n            # If the bit is not set, set the boolean variable to False and break out of the loop.\n            result = False\n            break\n\n    # Return the boolean result.\n    return result",
        "test": "assert all_Bits_Set_In_The_Given_Range(5,1,4) == False",
        "num_ids": 1188
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two pointers to keep track of the start and end of the array\n    left = 0\n    right = len(arr) - 1\n\n    # keep track of the last negative element we encountered\n    negative_last = float('-inf')\n\n    # iterate through the array while the pointers are within range\n    while left < right:\n\n        # if the current element is negative, swap it with the last negative element we encountered\n        if arr[left] < negative_last:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n            negative_last = arr[left]\n\n        # otherwise, move the pointers to the next element\n        else:\n            left += 1\n\n    # print the re-arranged array\n    print(arr)",
        "test": "assert re_arrange_array([1, -2, 3, 4, 5], 4) == [-2, -1, 3, 4, 5]",
        "num_ids": 1232
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Create a new string without any blank spaces\n    new_str = ''\n    for char in str1:\n        if char =='':\n            continue\n        new_str += char\n    # Replace any blank spaces with the character specified\n    for i in range(len(new_str)):\n        if new_str[i] =='':\n            new_str = new_str[:i] + char + new_str[i+1:]\n    return new_str",
        "test": "assert replace_blank('', '_') == ''",
        "num_ids": 548
    },
    {
        "number": 232,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        n = len(list1)\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([], 0) == [] # empty list",
        "num_ids": 755
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder using the formula:\n    area = \u03c0r\u00b2h\n    '''\n    area = 3.14 * r**2 * h\n    return area",
        "test": "assert lateralsuface_cylinder(1,1) == 3.14",
        "num_ids": 469
    },
    {
        "number": 234,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 315
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a Python function to set all even bits of a given number.\n    '''\n    # Set all even bits of n to 1\n    n = n | n >> 1\n    n = n | n >> 2\n    n = n | n >> 4\n    n = n | n >> 8\n    n = n | n >> 16\n    \n    # Return the final number\n    return n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 971
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict",
        "test": "assert check_occurences([]) == {} # empty list should return an empty dictionary",
        "num_ids": 899
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n\nstr = \"abc\"\nprint(\"Number of non-empty substrings:\", number_of_substrings(str))",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 823
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_total_number_of_sequences(m, n): \n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_number_of_sequences = 0\n    previous_element = 1\n    current_element = 2\n    while previous_element <= m:\n        if current_element <= m and current_element >= 2*previous_element:\n            total_number_of_sequences += 1\n        previous_element = current_element\n        current_element += 1\n    return total_number_of_sequences",
        "test": "assert get_total_number_of_sequences(5, 4) == 10, \"get_total_number_of_sequences(5, 4) should return 10\"",
        "num_ids": 1037
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # find the length of the list1\n    len1 = len(list1)\n\n    # add the length of list2 to the length of list1\n    len2 = len(list2) + len1\n\n    # create a new list with the same length as list1 and fill it with the elements of list1\n    new_list = list1 + list2 * len2\n\n    # return the new list\n    return new_list",
        "test": "assert replace_list([1,2,3],[]) == [1,2,3]",
        "num_ids": 960
    },
    {
        "number": 242,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)",
        "test": "assert count_charac(\"hello\") == 5",
        "num_ids": 379
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    # find the square root of N\n    square_root = int(round(root))\n    # check if the square root is the nearest integer\n    if square_root * square_root!= N:\n        # if not, find the nearest integer by multiplying the square root with 2\n        square_root += 1\n    # check if the square root is greater than N\n    if square_root > N:\n        # if it is, return N+1 (which is the next perfect square)\n        return N+1\n    # otherwise, return the square root as the next perfect square\n    return square_root",
        "test": "assert next_Perfect_Square(1) == 1",
        "num_ids": 927
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_sum(arr):\n    max_sum = float('-inf')\n    start = 0\n    sum = 0\n    bitonic_start = -1\n    \n    for i in range(start, len(arr)):\n        if arr[i] > sum:\n            bitonic_start = start - 1\n            sum = sum - bitonic_start\n        else:\n            sum += arr[i]\n            if i > bitonic_start:\n                bitonic_start = i\n    \n    return sum",
        "test": "assert max_sum([1,2,3,4,5]) == 9",
        "num_ids": 1131
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Computes the square root of a given number using the babylonian method.\n    '''\n    # Start with a guess of 1, and multiply it by 1/2 until it's within\n    # the desired error (epsilon).\n    guess = 1\n    epsilon = 1e-9\n    while True:\n        # Calculate the new guess by adding the previous guess to the\n        # previous guess squared, and dividing by 2.\n        new_guess = (guess + number / guess) / 2\n        # If the new guess is within the desired error, return it.\n        if abs(new_guess - guess) < epsilon:\n            return new_guess\n        # Otherwise, update the guess.\n        guess = new_guess",
        "test": "assert babylonian_squareroot(16) == 4",
        "num_ids": 723
    },
    {
        "number": 247,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize the length of the longest palindromic substring and the starting point of the longest palindromic substring\n    max_palindrome = 0\n    start = 0\n\n    # Iterate through the string and check if the substring is a palindrome\n    for i in range(len(str)):\n        # If the substring is longer than the current longest palindromic substring, update the longest palindromic substring\n        if i > max_palindrome:\n            max_palindrome = i\n            start = i\n        # Check if the substring is a palindrome\n        if str[i] == str[start]:\n            start += 1\n            # If the substring is longer than the longest palindromic substring, update the longest palindromic substring\n            if i - start + 1 > max_palindrome:\n                max_palindrome = i - start + 1\n\n    # Return the length of the longest palindromic substring\n    return max_palindrome",
        "test": "assert lps(\"\") == 0 # Test case 1",
        "num_ids": 1267
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += i/i\n    return harmonic_sum",
        "test": "assert harmonic_sum(5) == 1 + 1 + 1 + 1 + 1",
        "num_ids": 556
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection.append(num1)\n    return intersection\n",
        "test": "assert intersection_array([1,2,3,4,5], [2,4,6,8,10]) == [2,4]",
        "num_ids": 714
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count",
        "test": "assert count_X((), 1) == 0",
        "num_ids": 598
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        if i == 0:\n            new_list[i] = element\n        elif i == len(list) - 1:\n            new_list[i] = element\n        else:\n            new_list[i] = list[i-1]\n    return new_list",
        "test": "assert insert_element([], 0) == []",
        "num_ids": 680
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = numbers[0]\n    imag = numbers[1]\n    r = abs(real)\n    theta = cmath.phase(real)\n    return (r, theta)",
        "test": "assert convert([1+1j, 2+2j, 3+3j]) == (1, 0.7071067811865475)",
        "num_ids": 898
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_integer(lst):\n    '''\n    Returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count\n\nlst = [1, 2, 3, 4, 5, 'a', 'b', 'c']\nprint(count_integer(lst)) # Output: 3",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 491
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, len(l) + 1):\n        for combo in combinations_with_replacement(l, i):\n            result.append(tuple(combo))\n    return result",
        "test": "assert combinations_colors([1, 2, 3], 2) == [((1, 2), (3, 1)), ((1, 3), (2, 1)), ((2, 1), (1, 3)), ((2, 3), (1, 2)), ((3, 1), (2, 3)), ((3, 2), (1, 3)), ((3, 3), (1, 2))]",
        "num_ids": 1365
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if (num % i) == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 795
    },
    {
        "number": 257,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 306
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2",
        "test": "assert maximize_elements((1, 2, 3), (3, 2, 1)) == (3, 2, 1)",
        "num_ids": 656
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    if n < 1:\n        return None\n\n    # Check if n is a prime number\n    if n == 2:\n        return 2\n    elif n % 2 == 0:\n        return None\n\n    # Check if n is divisible by any number less than or equal to sqrt(n)\n    if n % 2 == 0 and n % 3 == 0:\n        return None\n\n    # Check if n is even\n    if n % 2 == 0:\n        return 3\n\n    # Check if n is odd\n    if n % 2!= 0:\n        return 5\n\n    # Initialize variables\n    i = 5\n    prime = 5\n\n    # Iterate through prime numbers up to sqrt(n)\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return None\n\n        if i * i > n:\n            break\n\n        i += 6\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return prime",
        "test": "assert newman_prime(5) == 5",
        "num_ids": 2145
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Create a list to store the result\n    result_list = []\n    \n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Divide the element at index i in both tuples and append the result to the result list\n        result_list.append(test_tup1[i] / test_tup2[i])\n        \n    # Return the result list\n    return result_list",
        "test": "assert division_elements((1, 2, 3, 4, 5), (0, 2, 1)) == (0, 1, 1, 1, 1)",
        "num_ids": 1087
    },
    {
        "number": 262,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])",
        "test": "assert split_two_parts([], 0) == ([], [])",
        "num_ids": 1037
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age / 7\n    return age",
        "test": "assert dog_age(1) == 1",
        "num_ids": 408
    },
    {
        "number": 265,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 767
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l ** 2\n    return area",
        "test": "assert lateralsurface_cube(5) == 150",
        "num_ids": 445
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum\n\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of the squares of the first\", n, \"odd natural numbers is:\", square_Sum(n))",
        "test": "assert square_Sum(10) == 355",
        "num_ids": 596
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Base case: If n is 0, return 1\n    if n == 0:\n        return 1\n\n    # Recursive case: n is odd, add 2 to the previous n-1\n    if n % 2 == 1:\n        return find_star_num(n - 1) + 2\n\n    # Recursive case: n is even, add 2 to the previous n/2\n    return find_star_num(n - 2) + 2\n",
        "test": "assert find_star_num(0) == 1",
        "num_ids": 849
    },
    {
        "number": 269,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    if k.isalpha():\n        return ord(k)\n    elif k.isdigit():\n        return int(k)\n    else:\n        return None",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 671
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and i % 2 == 0:\n            total += arr[i]\n    return total",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 15  # Test case 2",
        "num_ids": 722
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize a list of even natural numbers and their corresponding powers\n    powers = [(2*i+1, i**5) for i in range(n)]\n\n    # Initialize a variable to store the sum of the even powers\n    sum_evens = 0\n\n    # Iterate through the list of powers and add their values to the sum_evens variable\n    for i in powers:\n        sum_evens += i[0]\n\n    # Return the sum of even powers\n    return sum_evens",
        "test": "assert even_Power_Sum(25) == 625, \"The sum of the first 25 even natural numbers raised to the fifth power is incorrect.\"",
        "num_ids": 745
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for t in test_list:\n        rear.append(t[1])\n    return rear",
        "test": "assert rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == [3, 4]",
        "num_ids": 645
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n    return sub_tup\n",
        "test": "assert substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 1248
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Calculate the sum of even index binomial coefficients\n    binomial_sum = 0\n    for i in range(2, n+1):\n        for j in range(i, n+1):\n            if i % 2 == 0:\n                binomial_sum += math.factorial(j) * math.factorial(i-j)\n    \n    return binomial_sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 648
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*r*h\n    return volume",
        "test": "assert volume_cylinder(5,5) == 78.53981633974483, \"volume_cylinder: radius and height not valid\"",
        "num_ids": 525
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def dict_filter(dict, n):\n    '''\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    :param dict: the dictionary to filter\n    :param n: the minimum value to include in the filtered dictionary\n    :return: a new dictionary with only the entries with values greater than or equal to n\n    '''\n    return {k: v for k, v in dict.items() if v >= n}",
        "test": "assert dict_filter({\"a\": 5, \"b\": 10, \"c\": 3, \"d\": 7, \"e\": 12}, 15) == {}",
        "num_ids": 768
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count",
        "test": "assert count_first_elements(('apple', 'banana', 'cherry', 'date', 'elderberry')) == 1",
        "num_ids": 750
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1 or n == 4: # base case\n        return n*n\n    elif n % 2 == 0: # even number of decagonal\n        num = n//2 # get the number of even rows\n        if n % 2 == 0: # even number of rows\n            return (num*num + num + 1) * n/2 # calculate the nth decagonal\n        else: # odd number of rows\n            return (num*num + num + 1) * n/2 # calculate the nth decagonal\n    else: # odd number of decagonal\n        return (n*n + 1) // 2 # calculate the nth decagonal",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 673
    },
    {
        "number": 280,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, value in enumerate(dlist):\n        if value == item:\n            return True, i\n    return False, -1",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2) # returns True and 2",
        "num_ids": 785
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set from the list of elements\n    unique_set = set(test_list)\n    # Check if the set contains all the unique elements\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 617
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # create a new list to store the result\n    result = []\n    # iterate over the elements of nums1\n    for num1 in nums1:\n        # check if num1 is in nums2\n        if num1 in nums2:\n            # if num1 is in nums2, check if num1 is not already in the result list\n            if num1 not in result:\n                # if num1 is not already in the result list, add it to the result list\n                result.append(num1)\n    # return the result list\n    return result",
        "test": "assert sub_list([],[]) == []",
        "num_ids": 634
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def validate(n):\n    frequency = {}\n    digits = list(str(n))\n    for digit in digits:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    for digit in frequency:\n        if frequency[digit] > 1:\n            return False\n    return True\n",
        "test": "assert validate(1234567891) == False",
        "num_ids": 971
    },
    {
        "number": 284,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n\n    # Check if list is an empty list\n    if len(list) == 0:\n        return False\n\n    # Check if all elements in list are equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n\n    # If all elements in list are equal to the given element, return True\n    return True",
        "test": "assert check_element([1,2,3,4,5],3)==False, \"The list [1,2,3,4,5] should not contain element 3\"",
        "num_ids": 572
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and len(text) > 1 and re.search('a{2,3}', text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"abc\") == False",
        "num_ids": 724
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # find the maximum sum of the sub-array from the beginning to the k-th element\n    max_ending_here = max(a[0:k])\n\n    # find the maximum sum of the sub-array from the end to the end\n    max_ending_there = max(a[n-k:])\n\n    # find the maximum sum of the sub-array from the beginning to the n-th element\n    max_beginning_there = max(a[0:n-k])\n\n    # find the maximum sum of the sub-array from the end to the beginning\n    max_beginning_there = max(a[n-k:])\n\n    # find the maximum sum of the sub-array from the n-th element to the end\n    max_ending_there = max(a[0:n-k])\n\n    # find the maximum sum of the sub-array from the beginning to the k-th element\n    max_ending_here = max(a[0:k])\n\n    # find the maximum sum of the sub-array from the n-th element to the end\n    max_ending_there = max(a[0:n-k])\n\n    # return the maximum sum of the sub-array\n    return max(max_ending_here, max_ending_there, max_beginning_there)",
        "test": "assert max_sub_array_sum_repeated([-2, -3, -4, -5, -6], 5, 2) == 3",
        "num_ids": 1548
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(1) == 1 # test case 1",
        "num_ids": 655
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # create an empty list to store the maximum length values\n    max_length_list = []\n\n    # loop through the list of lists\n    for list2 in list1:\n        # loop through the elements in each list\n        for element in list2:\n            # if the length of the element is greater than the current maximum,\n            # update the maximum length value\n            if len(element) > len(max_length_list[0]):\n                max_length_list.append(element)\n\n    # return the maximum length list\n    return max_length_list",
        "test": "assert max_length([]) == []",
        "num_ids": 771
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    Args:\n        n (int): number of posts in the fence\n        k (int): number of distinct colors in the fence\n\n    Returns:\n        int: the number of ways of painting the fence\n\n    Examples:\n        >>> count_no_of_ways(5, 3)\n        3\n\n        >>> count_no_of_ways(7, 4)\n        20\n\n        >>> count_no_of_ways(8, 5)\n        45\n\n    \"\"\"\n    # base case\n    if k == 1:\n        return 1\n    elif k == 2:\n        return 2\n\n    # recursive case\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            # check if the color of the jth post is the same as the i-th post and the kth color\n            if i == j or colors[j] == colors[i] or j % 2 == 0:\n                count += count_no_of_ways(n, k-1)\n    return count",
        "test": "assert count_no_of_ways(n=3, k=2) == 2, \"count_no_of_ways(n=3, k=2) should return 2\"",
        "num_ids": 1618
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find(n, m):\n    return int((n/m)*100)/100",
        "test": "assert find(10,5) == 2",
        "num_ids": 382
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = (w+h)**2/4\n    return third_side",
        "test": "assert otherside_rightangle(4,5) == 4.5",
        "num_ids": 459
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif isinstance(listval[0], int) or isinstance(listval[0], float):\n        return max(listval)\n    else:\n        return max(map(max_val, listval))",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5, \"The maximum value in the list [1, 2, 3, 4, 5] is not 5.\"",
        "num_ids": 849
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum",
        "test": "assert sum_div(6) == 21",
        "num_ids": 504
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n\n    # Iterate over each element of the array\n    for i in range(n):\n        # Count the number of inversions for each element\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0, \"Test 2: Inversion count should be 0\"",
        "num_ids": 865
    },
    {
        "number": 297,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def flatten_list(nested_list):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list",
        "test": "assert flatten_list([1, 2, [3, 4], 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 721
    },
    {
        "number": 299,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = stdata[0][1]\n    for tup in stdata:\n        if tup[1] > max_val:\n            max_val = tup[1]\n    return max_val",
        "test": "assert max_aggregate([(\"apple\", 5), (\"banana\", 2), (\"orange\", 7), (\"grape\", 1)]) == 7",
        "num_ids": 889
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize count of binary sequences\n    count = 0\n\n    # Loop over all possible binary strings of length 2n\n    for i in range(n, 0, -1): \n        # Add the binary string to the count\n        count += i\n\n    return count",
        "test": "assert count_binary_seq(1) == 1",
        "num_ids": 851
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1\n        for item in d.values():\n            if isinstance(item, dict):\n                depth += dict_depth(item)\n        return depth\n    else:\n        return 0",
        "test": "assert dict_depth({'a':1}) == 1",
        "num_ids": 524
    },
    {
        "number": 304,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    count = 0\n    for i in range(len(arr)-1, -1, -1):\n        if i-index >= 0 and arr[i-index] not in ranges:\n            return arr[i-index]\n    return None",
        "test": "assert find_Element([1, 2, 3, 4, 5], [(2, 3), (4, 5)], [(0, 1), (2, 3)], 1) == 4",
        "num_ids": 807
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None, None",
        "test": "assert start_withp(\"banana\") == (\"banana\", \"p\")",
        "num_ids": 842
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize prefix sum array\n    prefix_sum = [0] * n\n\n    # Initialize sum and max values\n    max_sum = float('-inf')\n    max_i = -1\n\n    # Traverse prefix sum array and update max sum and max index\n    for i in range(n):\n        prefix_sum[i] += a[i]\n\n        # If current prefix sum is greater than max sum, update max sum and max index\n        if prefix_sum[i] > max_sum:\n            max_sum = prefix_sum[i]\n            max_i = i\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum + a[max_i]",
        "test": "assert max_sum_increasing_subseq([1, 10, 15, 20, 25], 5, 3, 3) == 50, \"Incorrect output for max_sum_increasing_subseq([1, 10, 15, 20, 25], 5, 3, 3)\"",
        "num_ids": 1837
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    colon = []\n    for i in range(m):\n        colon.append(tuplex[i])\n    return tuple(colon)",
        "test": "assert colon_tuplex((1,2,3),2,2) == (1,2)",
        "num_ids": 817
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two empty lists to store the largest products\n    product_list1 = []\n    product_list2 = []\n    \n    # Iterate through both lists simultaneously\n    for i in range(N):\n        # Check if the current number is greater than both lists\n        if nums1[i] > max(nums1) and nums2[i] > max(nums1):\n            # Add the current number to both lists\n            product_list1.append(nums1[i])\n            product_list2.append(nums2[i])\n        else:\n            # If the number is smaller than either list, append it to the appropriate list\n            if nums1[i] < min(nums1) and nums2[i] < min(nums1):\n                product_list1.append(nums1[i])\n            else:\n                product_list2.append(nums2[i])\n    \n    # Sort the lists by the product value in descending order\n    product_list1.sort(reverse=True)\n    product_list2.sort(reverse=True)\n    \n    # Find the largest product in the first list, and the largest product in the second list\n    max_product = max(product_list1[0], product_list2[0])\n    max_product1 = max(product_list1[1], product_list2[1])\n    \n    # Return the largest product in the first list and the largest product in the second list\n    return max_product, max_product1",
        "test": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3) == 30",
        "num_ids": 1408
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(1, 3) == 3",
        "num_ids": 317
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def string_to_tuple(s):\n    '''\n    Convert a string to a tuple of its characters.\n    '''\n    return tuple(s)",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 340
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def set_left_most_unset_bit(n): \n    # loop through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])): \n        # if the bit is already set (i.e., the binary representation is 1), \n        # then set the leftmost unset bit to 0, and break out of the loop\n        if bin(n)[2:][i] == '0': \n            n = n & (n - 1) \n            break \n    return n",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 784
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.14 * r ** 2 * h",
        "test": "assert volume_cone(7,5) == 105.319",
        "num_ids": 431
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Check if n is positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Error: Input must be a positive integer.\"\n\n    # Initialize variable to hold highest power of 2\n    highest_power_of_2 = 1\n\n    # Loop through all possible powers of 2 from 1 to n\n    for i in range(1, n+1):\n        # If i is a power of 2 and its highest power of 2 is less than or equal to i\n        if i == i and highest_power_of_2 <= i:\n            highest_power_of_2 = i\n\n    return highest_power_of_2",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 935
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1: # base case\n        return n\n    else: # recursive case\n        return n + find_lucas(n-1)",
        "test": "assert find_lucas(10) == 55",
        "num_ids": 572
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Convert the format string to a list of format specifiers\n    format_specifiers = string.split(',')\n\n    # Iterate through each element in the list and apply the format specifiers to it\n    for element in list_:\n        for specifier in format_specifiers:\n            # Check if the specifier is a format specifier for a string type (str)\n            if specifier.startswith('{') and specifier.endswith('}'):\n                # Extract the format specifier for the string type (str)\n                format_specifier = specifier[1:-1]\n\n                # Extract the value to be formatted from the element\n                value = getattr(element, format_specifier)\n\n                # Apply the format specifier to the value\n                formatted_value = str(value)\n            else:\n                # Otherwise, the value remains the same\n                formatted_value = str(value)\n\n            # Replace the value in the element with the formatted value\n            setattr(element, format_specifier, formatted_value)\n\n    return list_",
        "test": "assert add_string([], 'hello') == []",
        "num_ids": 655
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert a list of lists to a nested dictionary.\n\n    Args:\n    l1: list of lists, where each inner list contains a dictionary.\n    l2: list of lists, where each inner list contains a tuple containing two elements: the key to match, and the value to assign to that key.\n    l3: list of lists, where each inner list contains a tuple containing three elements: the key to match, the value to assign to that key, and the list to select from.\n\n    Returns:\n    A nested dictionary containing the original list.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key, value = l2[i]\n        if isinstance(key, (tuple, list)):\n            if isinstance(value, (tuple, list)):\n                result[key] = convert_list_dictionary(l1[i], l2[i + 1], l3[i + 1])\n            elif value in l1[i]:\n                result[key] = l1[i][value]\n            else:\n                result[key] = value\n        else:\n            if key in l1[i]:\n                result[key] = l1[i][key]\n            else:\n                result[key] = value\n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 1158
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    \n    # Recursive case\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)",
        "test": "assert get_max_sum(5) == 20",
        "num_ids": 936
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list",
        "test": "assert max_length_list([1,2,3,4,5,6,7,8,9]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "num_ids": 779
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if a given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False",
        "test": "assert check_distinct(()) == True",
        "num_ids": 569
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def first_non_repeating_character(str1):\n    # Initialize a dictionary to keep track of character frequencies\n    freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, do nothing\n        if char in freq:\n            continue\n        # If the character is not in the dictionary, add it with a frequency of 1\n        freq[char] = 1\n\n    # Loop through the dictionary and find the first non-repeating character\n    for char, freq in freq.items():\n        if freq == 1:\n            return char",
        "test": "assert first_non_repeating_character(\"abc\") == \"a\"",
        "num_ids": 877
    },
    {
        "number": 396,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef check_char(string): \n    '''\n    Check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith(string):\n        return True\n    if string.endswith(string):\n        return True\n    return False",
        "test": "assert check_char(\"hello world\") == True",
        "num_ids": 585
    },
    {
        "number": 397,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def median_numbers(a, b, c):\n    if a > b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n\n    if a == b == c:\n        return a\n\n    if (a + b + c) % 2 == 0:\n        return (a + b) / 2\n    else:\n        return b",
        "test": "assert median_numbers(2,3,4) == 3",
        "num_ids": 760
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15",
        "num_ids": 745
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i])\n    return result",
        "test": "assert bitwise_xor((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) == (1, 4, 7, 1, 5)",
        "num_ids": 764
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 785
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    \n    # Traverse through each element in the first nested tuple\n    for tup1 in test_tup1:\n        # Initialize a new nested tuple to store the result\n        result_tup = ()\n        \n        # Traverse through each element in the second nested tuple\n        for tup2 in test_tup2:\n            # Add the current element of the first nested tuple and the current element of the second nested tuple\n            result_tup = result_tup + (tup1[0] + tup2[0],)\n            \n        # Append the result of the above traversal to the result list\n        result_list.append(result_tup)\n    \n    return result_list",
        "test": "assert add_nested_tuples((1, 2), (3, 4)) == (4, 6)",
        "num_ids": 1207
    },
    {
        "number": 404,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b",
        "test": "assert minimum(5,6) == 5",
        "num_ids": 279
    },
    {
        "number": 405,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex(('a', 'b', 'c'), 'a') == True",
        "num_ids": 404
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(123) == 1, \"find_Parity(123) should return 1, not {}\".format(find_Parity(123))  # check the correctness of find_Parity",
        "num_ids": 610
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a string with all digits of the number\n    digits = str(n)\n    # loop through each digit\n    for i in range(len(digits)-1, -1, -1):\n        # find the next bigger number by rearranging the digits\n        next_bigger = int(''.join(reversed(digits[i:])))\n        # check if the next bigger number is greater than the original number\n        if n > next_bigger:\n            # return the next bigger number\n            return next_bigger\n    # if no bigger number was found, return the original number\n    return n",
        "test": "assert rearrange_bigger(1234567) == 7654321",
        "num_ids": 1003
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n1, n2 = len(nums1), len(nums2)\n    heap = []\n    for i in range(n1):\n        for j in range(n2):\n            if i+j == k-1 and nums1[i] == nums2[j]:\n                heapq.heappush(heap, (nums1[i], nums2[j]))\n                if len(heap) == k:\n                    heapq.heappop(heap)\n    return [pair[0] for pair in heap]",
        "test": "assert k_smallest_pairs([1, 2, 3, 4, 5], [3, 4, 5, 1, 2], 2) == [([1, 3], [2, 4]), ([1, 4], [2, 5]), ([2, 3], [1, 4]), ([2, 4], [1, 5])]",
        "num_ids": 1488
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def min_product_tuple(list1):\n    '''\n    Find the minimum product from the pairs of tuples within a given list.\n    '''\n    product_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product not in product_list:\n                product_list.append(product)\n                break\n    if len(product_list) == 0:\n        return None\n    else:\n        return min(product_list)",
        "test": "assert min_product_tuple([(-5, -5), (5, -5), (-10, -5), (5, 5), (10, -5)]) == 0",
        "num_ids": 1181
    },
    {
        "number": 410,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 560
    },
    {
        "number": 411,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    word = re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n    # convert first letter to lowercase\n    return re.sub(r'[a-z]', lambda m: m.group(0).lower(), word)",
        "test": "assert snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 678
    },
    {
        "number": 412,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list",
        "test": "assert remove_odd([]) == []",
        "num_ids": 589
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        return None\n    else:\n        return list1[n]",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 7) == None",
        "num_ids": 637
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False",
        "test": "assert overlapping([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) # should pass",
        "num_ids": 506
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_Product(arr):\n    max_product = arr[0]\n    max_product_pair = [arr[0], arr[0]]\n\n    for i in range(1, len(arr)):\n        if arr[i] * arr[i] > max_product * max_product:\n            max_product_pair[0], max_product_pair[1] = arr[i], max_product\n            max_product = arr[i]\n        elif arr[i] * arr[i] == max_product * max_product:\n            max_product_pair[0], max_product_pair[1] = max(arr[i], max_product_pair[0]), max(arr[i], max_product_pair[1])\n            max_product = max(arr[i], max_product)\n\n    return max_product_pair",
        "test": "assert max_Product([-1, -2, -3, -4, -5]) == -500",
        "num_ids": 895
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize a dictionary to store the count of each first element\n    count_dict = {}\n\n    # Iterate through the list of tuples and count the occurrences of each first element\n    for tup in Input:\n        # Check if the first element is already present in the dictionary\n        if tup[0] in count_dict:\n            # If it is present, increment its count\n            count_dict[tup[0]] += 1\n        else:\n            # If it is not present, add it to the dictionary with count of 1\n            count_dict[tup[0]] = 1\n\n    # Find the first element which has count of 1 in the dictionary\n    max_count = max(count_dict.values())\n    common_tup = None\n    for tup in Input:\n        if count_dict[tup[0]] == max_count:\n            if common_tup is None or tup[0] < common_tup[0]:\n                common_tup = tup\n\n    return common_tup",
        "test": "assert group_tuples((('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5))) == ('a', 1)",
        "num_ids": 1076
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def Find_Max(lst):\n    # Initialize maximum length and maximum element to None\n    max_len = 0\n    max_element = None\n    \n    # Loop through each element in the list\n    for i in lst:\n        # If current element is greater than the current maximum, update maximum length and maximum element\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    \n    # Return the maximum element\n    return max_element",
        "test": "assert Find_Max([1, 2, 3, 4]) == 4",
        "num_ids": 771
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Create a variable to store the total sum\n    total_sum = 0\n\n    # Loop through the list and round each number\n    for number in list1:\n        rounded_number = round(number)\n        total_sum += rounded_number\n\n    # Multiply the total sum by the length of the list and print it\n    print(\"The total sum of all the numbers in the list is:\", total_sum * len(list1))",
        "test": "assert round_and_sum([10, 20, 30, 40, 50]) == 150",
        "num_ids": 678
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i ** 3\n    return cube_sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 501
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += str(item)\n    return result\n",
        "test": "assert concatenate_tuple(('a', 'b', 'c')) == 'abc'",
        "num_ids": 544
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize the sum of cubes to 0 and the count of cubes to 0\n    sum_of_cubes = 0\n    count_of_cubes = 0\n    # loop through each natural number from 1 to n and calculate the cube of the number and add it to the sum of cubes\n    for i in range(1,n+1):  \n        cube = i*i*i  \n        sum_of_cubes += cube  \n        count_of_cubes += 1  \n    # calculate the average by dividing the sum of cubes by the count of cubes and return it\n    return sum_of_cubes/count_of_cubes  \n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 682
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for string in test_tuple:\n        rear.append(string[-1])\n    return rear",
        "test": "assert extract_rear(('a', 'b', 'c', 'd', 'e', 'f')) == 'f'",
        "num_ids": 615
    },
    {
        "number": 425,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([1, 2, 3, 4, 5], 7) == 0, \"List should not contain 7\"",
        "num_ids": 693
    },
    {
        "number": 426,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 560
    },
    {
        "number": 427,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define regular expression pattern\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Check if the date string matches the pattern\n    if re.match(pattern, dt):\n        # Extract the date components of the original date string\n        year = int(dt[:4])\n        month = int(dt[5:7])\n        day = int(dt[8:10])\n\n        # Create a new date string in the desired format\n        new_dt = f'{day:02d}-{month:02d}-{year:04d}'\n\n        # Return the new date string\n        return new_dt\n    else:\n        # If the date string does not match the pattern, return None\n        return None",
        "test": "assert change_date_format(\"2022-01-01\") == \"01-01-2022\"",
        "num_ids": 949
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Calculate the gap size\n    gap = n // 2\n    # Loop through the gap size from 1 to n\n    for i in range(gap, n):\n        # Traverse the list from the gap to the end\n        for j in range(i, n):\n            # Swap if the element found is greater than the element at right end\n            if my_list[j] > my_list[j+gap]:\n                my_list[j], my_list[j+gap] = my_list[j+gap], my_list[j]\n",
        "test": "assert shell_sort([5, 3, 2, 1, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 1455
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Create a list of tuples from the two input tuples\n    result = [tuple(t1) for t1 in test_tup1] + [tuple(t2) for t2 in test_tup2]\n\n    # Sort the list of tuples based on the first element of each tuple\n    result.sort()\n\n    # Convert the sorted list of tuples back to a single tuple\n    result = tuple(result)\n\n    return result",
        "test": "assert and_tuples((1, 2), (3, 4)) == ((1, 2), (3, 4))",
        "num_ids": 973
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Solve for the coefficients\n    d = (b*b - 4*a*c)/(2*b)\n    e = (2*a*c - b*b)/(2*a)\n    f = (-1*a*b + b*b)/(2*b)\n\n    # Compute the directrix\n    directrix = f - (e**2)/2 - d*e + d*f\n    \n    return directrix",
        "test": "assert parabola_directrix(1, 2, 3) == 1",
        "num_ids": 531
    },
    {
        "number": 431,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return False # list1 is longer than list2\n    \n    for item in list1:\n        if item in list2:\n            return True # found a common element in list1\n    \n    return False # no common element found",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False # both lists have at least one common element",
        "num_ids": 812
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    if height % 2 == 0:\n        return (base1 + base2) / 2\n    else:\n        return (base1 + base2) / 2 + height / 2",
        "test": "assert median_trapezium(1,2,3) == 3",
        "num_ids": 741
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 543
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?![b]*[b])b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"bbbbb\") == False",
        "num_ids": 2528
    },
    {
        "number": 435,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10",
        "test": "assert last_Digit(256) == 6",
        "num_ids": 336
    },
    {
        "number": 436,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums",
        "test": "assert neg_nos([]) == []",
        "num_ids": 466
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n\n    # Initialize an empty list to store the odd characters\n    odd_chars = []\n\n    # Loop through each character in the string\n    for char in str1:\n\n        # If the character is odd, append it to the list\n        if char % 2 == 1:\n            odd_chars.append(char)\n\n    # Return the modified string with the odd characters removed\n    return \"\".join(odd_chars)",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 621
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n\n    return count",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 706
    },
    {
        "number": 439,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result += i\n    return result",
        "test": "assert multiple_to_single([1, 2, 3]) == 6",
        "num_ids": 528
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence using regex\n    matches = re.findall(r'\\b(long|short|quick|dirty)\\b', text)\n    # Initialize the positions list to None\n    positions = None\n    # Loop through all the matches and check if they are at the beginning of the sentence\n    for match in matches:\n        if match[0] == 'quick':\n            # If the match is at the beginning of the sentence, then update the positions list\n            if positions is None:\n                positions = [0]\n            else:\n                positions.insert(0, len(text))\n    return positions",
        "test": "assert find_adverb_position(\"I love you very much.\") == (5, 22, \"much\")",
        "num_ids": 1021
    },
    {
        "number": 441,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * l",
        "test": "assert surfacearea_cube(1) == 1",
        "num_ids": 322
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    \n    return positive_count / len(nums)",
        "test": "assert positive_count([5, 4, 3, 2, 1]) == 1",
        "num_ids": 709
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for num in list1: \n        if num < 0: \n            neg_list.append(num)\n    if len(neg_list) == 0: \n        return -1\n    else: \n        return neg_list[-1]",
        "test": "assert largest_neg([-5, 10, -2, 4]) == -2, \"largest_neg([-5, 10, -2, 4]) should return -2\"",
        "num_ids": 748
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # Initialize a new list to store the trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the original list\n    for t in test_list:\n        # Loop through each tuple by k in the original list\n        for i in range(len(t) - K + 1):\n            # Add the first K elements of the original tuple to a new list\n            new_t = t[:K]\n            # Add the rest of the tuple to the new list\n            new_t += t[K:]\n            # Add the trimmed tuple to the new list\n            trimmed_list.append(new_t)\n\n    return trimmed_list",
        "test": "assert trim_tuple([], 2) == []",
        "num_ids": 756
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        test_tup1 (tuple): A tuple of integers or floats.\n        test_tup2 (tuple): A tuple of integers or floats.\n\n    Returns:\n        tuple: A tuple containing the index wise multiplication of the tuple elements.\n\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)",
        "test": "assert index_multiplication((1, 2, 3, 4, 5), (3, 6, 9, 12, 15)) == ((3, 6, 9, 12, 15), (3, 6, 9, 12, 15))",
        "num_ids": 1404
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n\n    # Counter object to store the count of each element in the list\n    count_obj = Counter(lst)\n\n    # Find the count of each element in the tuple\n    count_tup = Counter(tup)\n\n    # Find the intersection of the two counts, which gives the count of all elements in the list in the tuple\n    intersection = count_tup & count_obj\n\n    # Calculate the ratio of intersection to the total count of all elements in the list in the tuple\n    ratio = intersection.get_ratio()\n\n    # Return the ratio\n    return ratio",
        "test": "assert count_Occurrence((1,2,3,4,5), [2,2,2,2,2]) == 1",
        "num_ids": 893
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 553
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # initialize a variable to store the sum of perrin numbers\n    sum = 0\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the sum of the perrin numbers up to the i-th number\n        sum += sum_of_perrin(i)\n    \n    # return the sum of perrin numbers\n    return sum\n\n\ndef sum_of_perrin(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers up to a given number n.\n    \"\"\"\n    # initialize a variable to store the sum of perrin numbers\n    sum = 0\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the sum of the perrin numbers up to the i-th number\n        sum += i\n    \n    # return the sum of perrin numbers\n    return sum",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 776
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a list of string values.\n    \n    :param str_list: A list of string values.\n    :param size: The number of strings to extract.\n    :return: A list of size number of strings.\n    '''\n    return str_list[:size]",
        "test": "assert extract_string(\"hello world\", 5) == \"hello\"",
        "num_ids": 625
    },
    {
        "number": 451,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Remove whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1",
        "test": "assert remove_whitespaces(\"   This is a test   \") == \"Thisisatest\"",
        "num_ids": 460
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0",
        "test": "assert loss_amount(10,15) == 0",
        "num_ids": 569
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            total += i\n    return total",
        "test": "assert sumofFactors(12) == 22",
        "num_ids": 707
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Matches a word containing 'z' in a given text.\n    '''\n    pattern = r'\\b\\w{1,}\\b'  # matches a word containing one or more letters\n    match = re.search(pattern, text)  # searches for the word 'z' in the given text\n    if match:  # checks if the word 'z' is found in the given text\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz(\"This is a test string containing 'z'.\") == True",
        "num_ids": 681
    },
    {
        "number": 455,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the given month number is a valid integer\n    if not isinstance(monthnum2, int):\n        return False\n    \n    # Check if the given month number is a valid integer between 1 and 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    \n    # Check if the given month number contains 31 days\n    if monthnum2 == 2:\n        if is_leap(monthnum2):\n            if monthnum2 == 2:\n                return True\n            else:\n                return False\n        else:\n            if monthnum2 == 2:\n                return False\n            else:\n                return True\n    elif monthnum2 > 2:\n        if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            if monthnum2 % 10 == 0:\n                return True\n            else:\n                return False\n        else:\n            if monthnum2 % 4 == 0:\n                return True\n            else:\n                return False\n    else:\n        return False\n\n\ndef is_leap(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number('February-2021') == False",
        "num_ids": 1004
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i], stringlist[-1] = stringlist[-1], stringlist[i]\n    return stringlist\n\nstringlist = [\"apple\", \"banana\", \"cherry\"]\nprint(reverse_string_list(stringlist))",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['dlrow', 'olleh', 'npepyt']",
        "num_ids": 586
    },
    {
        "number": 457,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize the minimum length and maximum length variables\n    min_length = float('inf')\n    max_length = 0\n\n    # Iterate through the list and update the minimum and maximum length variables\n    for num in lst:\n        if len(str(num)) < min_length:\n            min_length = len(str(num))\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n\n    # Create a sublist from the list that has the minimum length\n    sublist = []\n    for num in lst:\n        if len(str(num)) == min_length:\n            sublist.append(num)\n\n    return sublist",
        "test": "assert Find_Min([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 847
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def rectangle_area(l, b):\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5, 10) == 50, \"Expected rectangle area to be 50, but got %s\" % rectangle_area(5, 10)",
        "num_ids": 311
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern that matches any uppercase letter\n    pattern = re.compile(r'[A-Z]')\n\n    # Use the pattern object to find all occurrences of uppercase letters in str1 and return them as a list\n    uppercase_list = re.findall(pattern, str1)\n\n    # Join the list of uppercase letters back into a string and return it\n    return ''.join(uppercase_list)",
        "test": "assert remove_uppercase(\"\") == \"\"",
        "num_ids": 486
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def Extract(lst):\n    result = []\n    for sublist in lst:\n        if len(sublist) == 0:\n            continue  # skip empty sublists\n        if len(sublist) > 1:\n            result.append(sublist[0])  # get the first element of non-empty sublists\n    return result",
        "test": "assert Extract([]) == []",
        "num_ids": 384
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 397
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def combinations_list(list1):\n    '''\n    Find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store the combinations\n    combinations = []\n    # Iterate over all elements of the list\n    for element in list1:\n        # Create a list of all possible combinations starting with the current element\n        sub_combinations = combinations_list([element])\n        # Append each sub_combination to the list of combinations\n        for sub_combination in sub_combinations:\n            combinations.append(element + sub_combination)\n    # Return the list of combinations\n    return combinations",
        "test": "assert combinations_list([1, 2, 3]) == [(1, 2, 3)], \"combinations_list([1, 2, 3]) should return [(1, 2, 3)]\"",
        "num_ids": 1315
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for num in arr[1:]:\n        max_ending_here = max(max_ending_here * num, num)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
        "test": "assert max_subarray_product([1, -2, 3, 4, -1, 2, 1, -5, 1, 3, 6, -1, 5]) == 40",
        "num_ids": 876
    },
    {
        "number": 464,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from collections import Counter\n\ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= len(set(dict.values())):\n        return False\n    else:\n        counter = Counter(dict.values())\n        if len(counter) == n:\n            return True\n        else:\n            return False",
        "test": "assert check_value({}, 0) is True",
        "num_ids": 546
    },
    {
        "number": 465,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if value:\n            result[key] = value\n    return result",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 462
    },
    {
        "number": 468,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def max_product(arr):\n    # find the maximum subarray ending at the first element of the array\n    max_subarray = [arr[0]]\n    max_product = arr[0] * max_subarray[0]\n    \n    # find the maximum subarray ending at the second element of the array\n    for i in range(1, len(arr)):\n        current_product = arr[i] * max_subarray[-1]\n        if current_product > max_product:\n            max_product = current_product\n        max_subarray.append(current_product)\n    \n    return max_product",
        "test": "assert max_product([1, 2, 3]) == 6",
        "num_ids": 661
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # check if the length of the tuple is odd\n    if len(test_tup) % 2 == 1:\n        return None\n    \n    # get the first and last elements of the tuple\n    a, b = test_tup\n    \n    # find the first and last elements of the pairwise subsequences\n    pairwise_subseq = [a, b]\n    while len(pairwise_subseq) < len(test_tup) - 2:\n        # find the next pair of elements in the subsequence\n        b, c = pairwise_subseq[-2], pairwise_subseq[-1]\n        pairwise_subseq.append(c)\n        # compare b and c to see if they are the same or not\n        if b == c:\n            pairwise_subseq.pop()\n            pairwise_subseq.pop()\n        elif b > c:\n            pairwise_subseq.pop()\n        else:\n            break\n    \n    # add up the pairwise subsequences to get the final result\n    result = a + b + pairwise_subseq[0] + pairwise_subseq[1] + pairwise_subseq[2]\n    return result",
        "test": "assert add_pairwise(('a', 1, 2)) == [('a', 1), ('b', 2), ('c', 3)]",
        "num_ids": 1010
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product",
        "test": "assert find_remainder([10, 20, 30, 40, 50], 10) == 0",
        "num_ids": 540
    },
    {
        "number": 472,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(1, n):\n        if l[i] - l[i-1]!= 1:\n            return False\n    return True",
        "test": "assert check_Consecutive([1, 2, 2, 3, 4]) == False",
        "num_ids": 532
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for element in test_list1:\n        if element in test_list2:\n            intersection.append(element)\n    return intersection",
        "test": "assert tuple_intersection([], []) == []",
        "num_ids": 752
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1",
        "test": "assert replace_char(\"hello world\", \"l\", \"L\") == \"hello world\"",
        "num_ids": 458
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sorts a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(counter)\n    return sorted_dict",
        "test": "assert sort_counter({\"apple\": 2, \"banana\": 3, \"cherry\": 1, \"apple\": 2, \"orange\": 1}) == {\"apple\": 2, \"banana\": 3, \"cherry\": 1, \"orange\": 1}",
        "num_ids": 718
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def big_sum(nums):\n    # Initialize the largest and smallest values to be the first element in the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the array and update the largest and smallest values as needed\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n            \n    # Return the sum of the largest and smallest values\n    return largest + smallest",
        "test": "assert big_sum([-5, -3, -1, 1, 3]) == -2",
        "num_ids": 606
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_lower(string):\n    '''\n    Convert a string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower('hello') == 'hello'",
        "num_ids": 235
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define regular expression pattern to remove lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\b', re.IGNORECASE)\n    # replace lowercase substrings with an empty string\n    new_str = pattern.sub('', str1)\n    return new_str",
        "test": "assert remove_lowercase(\"hello world\") == \"hello world\"",
        "num_ids": 450
    },
    {
        "number": 479,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # get the first character of the string\n    first_char = str(n)[0]\n    # convert the string to an integer\n    int_num = int(first_char)\n    # return the integer value of the first character\n    return int_num",
        "test": "assert first_Digit(99) == 9",
        "num_ids": 470
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list with only the odd integers.\n    \"\"\"\n    new_lst = []\n    for num in lst:\n        if num % 2 == 1:\n            new_lst.append(num)\n    return new_lst",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 475
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of first n natural numbers\n    sum_cubes = (1 + 2 + 3 +... + n) ** 3\n\n    # Find the sum of first n natural numbers\n    sum_first_n = sum(range(1, n+1))\n\n    # Find the difference between the sum of cubes and sum of first n natural numbers\n    diff = sum_cubes - sum_first_n\n\n    return diff",
        "test": "assert difference(100) == 500",
        "num_ids": 776
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 2",
        "num_ids": 707
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Define the function\n    def toggle_case(char):\n        '''\n        Function to toggle the case of a character in a string.\n        '''\n        # If the character is a letter, convert it to uppercase\n        if char.isalpha():\n            return char.upper()\n        else:\n            return char\n\n    # Return the modified string\n    return ''.join(toggle_case(char) for char in string)",
        "test": "assert toggle_string(\"hello world\") == \"HELLO WORLD\"",
        "num_ids": 615
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    for i in range(len(n1_str)):\n        diff += abs(int(n1_str[i]) - int(n2_str[i]))\n    return diff",
        "test": "assert digit_distance_nums(123, 456) == 9",
        "num_ids": 848
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    This function finds the maximum subarray sum in a given list.\n\n    Parameters:\n    - a (list): A list of integers.\n    - size (int): The size of the sublist to be considered.\n\n    Returns:\n    - int: The maximum subarray sum found in the given list.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 887
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Create a set of the first tuple\n    set_1 = set(test_tup1)\n\n    # Create a set of the second tuple\n    set_2 = set(test_tup2)\n\n    # Find the union of the two sets\n    union_set = set_1.union(set_2)\n\n    # Convert the set to a sorted list and return it\n    union_list = sorted(union_set)\n\n    return union_list",
        "test": "assert union_elements((\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\")) == sorted([\"a\", \"b\", \"c\"])",
        "num_ids": 902
    },
    {
        "number": 562,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub_list = lst[i:j+1]\n            if len(sub_list) > max_length:\n                max_length = len(sub_list)\n    return max_length",
        "test": "assert Find_Max_Length([1,2,3,4,5,6]) == 6",
        "num_ids": 689
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"I'm a very, very, long, string that contains 'quotes' in it.\"\nmatches = extract_values(text)\nprint(matches)",
        "test": "assert extract_values(\"Hello, this is a sample string. It includes 'quotes' and also contains a number. Goodbye, 'world'.\") == ['Hello', 'this is a sample string', 'It includes', \"'quotes'\", 'and also contains a number', 'Goodbye', \"'world'\"]",
        "num_ids": 680
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([], 1) == 0",
        "num_ids": 922
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def split(word):\n    return list(word)",
        "test": "assert split(\"\") == []",
        "num_ids": 300
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Check if the input is a non-negative integer\n    if n < 0:\n        return \"Error: Input is not a non-negative integer.\"\n    # Calculate the sum of digits\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    # Return the sum of digits\n    return total",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 673
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n\n    Args:\n    list1 (list): A list to be checked for sorting.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    '''\n\n    # Initialize the minimum and maximum values to be checked\n    min_val = list1[0]\n    max_val = list1[-1]\n\n    # Check the first element of the list\n    if min_val >= max_val:\n        return True\n\n    # Check if the second element of the list is greater than the first element\n    if list1[1] > min_val:\n        return False\n\n    # Check if all the elements after the first element are greater than or equal to the first element\n    for i in range(2, len(list1)):\n        if list1[i] < min_val:\n            return False\n        elif list1[i] > max_val:\n            return False\n\n    # If all the elements are sorted, the list is sorted\n    return True\n",
        "test": "assert issort_list([1,3,5,2,4,7]) == False",
        "num_ids": 871
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list",
        "test": "assert empty_list(0) == []",
        "num_ids": 287
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def sort_sublists(list1):\n    # Create an empty list to store the sorted sublists\n    sorted_sublists = []\n    # Loop through each sublist of the input list\n    for sublist in list1:\n        # Create an empty list to store the sorted sublist elements\n        sorted_sublist = []\n        # Loop through each element of the sublist\n        for element in sublist:\n            # Add the element to the sorted sublist\n            sorted_sublist.append(element)\n        # Append the sorted sublist to the sorted sublists list\n        sorted_sublists.append(sorted_sublist)\n    # Return the sorted sublists list\n    return sorted_sublists",
        "test": "assert sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]",
        "num_ids": 1128
    },
    {
        "number": 572,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def two_unique_nums(nums):\n    '''\n    Remove duplicate numbers from a given number of lists.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only unique numbers from the original list.\n\n    Examples:\n    >>> two_unique_nums([1, 2, 3, 3, 4, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> two_unique_nums([1, 2, 2, 2, 3, 3, 3])\n    [1, 2, 3]\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 827
    },
    {
        "number": 573,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 612
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (4/3)*3.14159*r*r*h\n    return area",
        "test": "assert surfacearea_cylinder(2,6) == 184.0, \"Incorrect surface area calculation\"",
        "num_ids": 478
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Find the length of A and B\n    n1, n2 = len(A), len(B)\n    \n    # If A and B have different lengths, return False\n    if n1!= n2:\n        return False\n    \n    # Initialize two pointers to start of A and B\n    i, j = 0, 0\n    \n    # Compare the first elements of A with the first elements of B\n    while i < n1 and j < n2:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        elif A[i] < B[j]:\n            i += 1\n        else:\n            j += 1\n            \n    # If all elements of A and B are present in A, return True\n    if i == n1:\n        return True\n    \n    # If all elements of A and B are present in B, return False\n    elif j == n2:\n        return False\n    \n    # If A and B have at least one common element, return True\n    else:\n        return True",
        "test": "assert is_Sub_Array([1, 2, 3, 4, 5], [3, 2, 1]) == False # subarray does not exists in the list",
        "num_ids": 1017
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = n % 10\n    factorial = 1\n    for i in range(10, -1, -1):\n        factorial *= i\n        if factorial == n:\n            break\n    return last_digit",
        "test": "assert last_Digit_Factorial(1) == 1 # correct result",
        "num_ids": 646
    },
    {
        "number": 578,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Concatenate the three lists into a single flat list\n    flat_list = list1 + list2 + list3\n    \n    return flat_list",
        "test": "assert interleave_lists([],[],[]) == []",
        "num_ids": 690
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set(test_tup1) - set(test_tup2)\n    return dissimilar_set",
        "test": "assert find_dissimilar(set([1,2,3]), set([3,4,5])) == set([1,2])",
        "num_ids": 708
    },
    {
        "number": 580,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.extend(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            result.append(elem)\n    return tuple(result)",
        "test": "assert even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 0) # returns True",
        "num_ids": 1043
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def surface_Area(b, s):\n    area = (b * s) / 2\n    return area",
        "test": "assert surface_Area(10,20) == 100",
        "num_ids": 492
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True",
        "num_ids": 313
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    # first two terms\n    a = 1\n    b = 1\n\n    # loop from 3rd term to nth term\n    for i in range(2, num+1):\n        # new term\n        c = a + b\n\n        # update\n        a = b\n        b = c\n\n    # return nth term\n    return b",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 1437
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.search(r\"(?i)\\bly(?!\\w)\", text)\n    if match:\n        position = match.start()\n        adverb = match.group()\n        print(f\"The adverb '{adverb}' ends at position {position}.\")\n    else:\n        print(\"No adverbs found.\")\n\ntext = \"I'm learning Python, I love it, and I'm going to explore it. I'm not as lucky as you.\"\nfind_adverbs(text)",
        "test": "assert find_adverbs(\"He wants to play in the park.\") == [('to', 0, 1), ('in', 3, 6)]",
        "num_ids": 1233
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    return heap",
        "test": "assert expensive_items(items=['apple', 'banana', 'orange', 'grape', 'watermelon'], n=5) == ['apple', 'banana', 'orange', 'grape', 'watermelon']",
        "num_ids": 866
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l[:n] + [l[n]] + l[n+1:]",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5]",
        "num_ids": 716
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 379
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return abs(max_num - min_num)",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 656
    },
    {
        "number": 589,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    # Find the square root of the sum of the squares\n    s = (a + b) ** 0.5\n    \n    # Find the sum of the squares of the numbers between a and b\n    ps = 0\n    for i in range(int(a), int(b) + 1):\n        ps += i ** 2\n    \n    # Return the number of perfect squares found\n    return ps",
        "test": "assert perfect_squares(1, 1) == 1",
        "num_ids": 657
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.atan2(y, x)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return (x_rect, y_rect)",
        "test": "assert polar_rect(1,2) == (1,1)",
        "num_ids": 580
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Create a copy of the original list\n    copy_list = newList.copy()\n    \n    # Swap the first and last elements of the copy list\n    copy_list[0], copy_list[-1] = copy_list[-1], copy_list[0]\n    \n    return copy_list",
        "test": "assert swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 667
    },
    {
        "number": 592,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the sum of all the binomial coefficients up to the nth term\n    coef = 1\n    for i in range(1,n+1):\n        coef *= i\n    \n    # Find the sum of all the products of the first k terms of the binomial coefficients\n    product = 1\n    for i in range(k):\n        product *= i\n    \n    # Return the sum of the products and the sum of the binomial coefficients\n    return coef + product",
        "test": "assert binomial_Coeff(5,4) == 120",
        "num_ids": 815
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d{1,3}(\\.\\d{1,3}){3})$'\n    match = re.search(pattern, ip)\n    if match:\n        return match.group(1)\n    else:\n        return None",
        "test": "assert removezero_ip('123.456.789.123') == '123.456.789.123'",
        "num_ids": 765
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def diff_even_odd(list1):\n    # Find the first even number in the list\n    even_num = next((num for num in list1 if num % 2 == 0), None)\n\n    # Find the first odd number in the list\n    odd_num = next((num for num in list1 if num % 2!= 0), None)\n\n    # Find the difference of even and odd numbers\n    diff = even_num - odd_num\n\n    return diff",
        "test": "assert diff_even_odd([1,2,3,4,6]) == 1",
        "num_ids": 1048
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Count the number of 1s in the binary numbers\n    count = 0\n    while num1!= 0:\n        count += 1\n        num1 &= num1 - 1\n    \n    # Subtract 1 from the number of 1s\n    count -= 1\n    \n    # Calculate the minimum number of swaps required\n    min_swaps = count\n    \n    return min_swaps",
        "test": "assert min_Swaps(\"1101\", \"1111\") == 2, \"The function should correctly count the minimum number of swaps required to convert '1101' to '1111'.\"",
        "num_ids": 1200
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 479
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    arr1.sort()  # sort arr1 in ascending order\n    arr2.sort()  # sort arr2 in ascending order\n    k = k % len(arr1)  # wrap around if k is greater than the length of arr1\n    return arr1[k]  # return the kth element from arr1",
        "test": "assert find_kth([1,2,3,4,5], [3,4,5,6,7], 3) == 4, \"The function should return the correct value for k=3.\"",
        "num_ids": 1339
    },
    {
        "number": 598,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    '''\n    Function to check whether the given number is armstrong or not.\n    '''\n    sum_of_powers = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum_of_powers += digit ** 3\n        num //= 10\n\n    return sum_of_powers == number",
        "test": "assert armstrong_number(123) == False",
        "num_ids": 642
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # Declare a variable to store sum of first n natural numbers\n    sum = 0\n\n    # Loop through the first n natural numbers and add them to the sum variable\n    for i in range(1, number+1):\n        sum += i\n\n    # Calculate the average of the first n natural numbers\n    average = sum/number\n\n    # Print the sum and average of the first n natural numbers\n    print(\"Sum of the first n natural numbers:\", sum)\n    print(\"Average of the first n natural numbers:\", average)",
        "test": "assert sum_average(10) == 55",
        "num_ids": 577
    },
    {
        "number": 600,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_Even(2) == True",
        "num_ids": 321
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string str1 as input and returns the first repeated character.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Sort the dictionary by values in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    # Return the first character of the sorted_freq list\n    return sorted_freq[0][0]",
        "test": "assert first_repeated_char(\"abc\") == \"a\"",
        "num_ids": 715
    },
    {
        "number": 603,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if all(x % i!= 0 for x in range(1, i)):\n            ludic_numbers.append(i)\n    return ludic_numbers\n",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 1202
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)",
        "test": "assert reverse_words(\"the quick brown fox jumps over the lazy dog\") == \"lazy dog over jumps fox the brown the quick\"",
        "num_ids": 439
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    if num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, num - 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True\n",
        "test": "assert prime_num(5) == True",
        "num_ids": 503
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert radian_degree(45) == 0.7853981633974483",
        "num_ids": 435
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index, and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None",
        "test": "assert find_literals(\"hello world\", \"hello\") == (\"hello\", 0, 5)",
        "num_ids": 759
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 5\n    elif n % 2 == 0:\n        return 11 + bell_Number(n-1)\n    else:\n        return 13 + bell_Number(n-1)",
        "test": "assert bell_Number(1) == 5",
        "num_ids": 1568
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L // 2 # Find the k'th index\n    list1.pop(k) # Remove the k'th element from the list\n    return list1",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 877
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if N < 1 or N > len(test_list[0]):\n        raise ValueError(\"N should be a positive integer less than or equal to the number of rows in the matrix.\")\n    \n    # Initialize a max value to be the first element in the matrix\n    max_value = test_list[0][N-1]\n\n    # Iterate over the rest of the columns and compare with the max value\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    \n    return max_value",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 1161
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 740
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n    # Initialize the max_sum variable to 0\n    max_sum = 0\n    # Loop through each value in the list\n    for value in test_list:\n        # If the current value is greater than the current maximum sum, update the max_sum and cumulative_sum\n        if value > max_sum:\n            max_sum = value\n            cumulative_sum = 0\n        # If the current value is equal to the current maximum sum, add it to the cumulative sum\n        elif value == max_sum:\n            cumulative_sum += value\n        # If the current value is less than the current maximum sum, add it to the cumulative sum\n        else:\n            cumulative_sum += max_sum\n            max_sum = value\n    # Return the cumulative sum of the list\n    return cumulative_sum",
        "test": "assert cummulative_sum([1,2,3,4]) == [1,2,3,4]",
        "num_ids": 817
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def average_tuple(nums):\n    '''\n    Returns a list of the average value for each tuple in a list of tuples.\n    '''\n    # Initialize an empty list to store the average values\n    avg_list = []\n\n    # Iterate over each tuple in the list of tuples\n    for tup in nums:\n        # Calculate the average value for this tuple\n        avg = sum(tup) / len(tup)\n        # Add the calculated average to the list of averages\n        avg_list.append(avg)\n\n    # Return the list of averages\n    return avg_list",
        "test": "assert average_tuple([(1, 2), (3, 4), (5, 6)]) == [[3, 4], [5, 6]]",
        "num_ids": 1133
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Input tuples must be of the same length\")\n\n    # Initialize a list to store the modulo values\n    modulo_list = []\n\n    # Iterate through the tuples and perform element-wise modulo\n    for i in range(len(test_tup1)):\n        modulo_list.append(test_tup1[i] % test_tup2[i])\n\n    # Return the tuple with modulo values\n    return tuple(modulo_list)",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 1066
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if d <= 0: # base case: if distance is negative or zero, no jumps are required\n        return 0\n    \n    # calculate number of jumps required to reach the target point (d, 0)\n    jumps = 1\n    \n    while d > 0: # loop until distance reaches 0\n        d -= 1 # move distance to the right\n        jumps += 1 # add jump count\n    \n    return jumps # return number of jumps required",
        "test": "assert min_Jumps(5, 1) == 2  # test case 1",
        "num_ids": 1751
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n\n    Parameters:\n    nums1 (list): A list of numbers.\n    nums2 (list): A list of numbers.\n\n    Returns:\n    list: A list of lists, where each inner list contains the elements of nums1 divided by the corresponding element of nums2.\n    '''\n\n    # Create an empty list to store the result\n    result = []\n\n    # Loop through the elements of nums1\n    for i in range(len(nums1)):\n        # Loop through the elements of nums2\n        for j in range(len(nums2)):\n            # If the elements are equal, append the element of nums1 divided by the corresponding element of nums2 to the result list\n            if nums1[i] == nums2[j]:\n                result.append(nums1[i] / nums2[j])\n\n    return result",
        "test": "assert div_list([1,2,3,4,5], [1,2,3,4,5]) == [1, 1, 1, 1, 1]",
        "num_ids": 1087
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Reverse the list of words\n    reversed_words = list(reversed(words))\n    # Join the reversed list of words back into a string\n    result =''.join(reversed_words)\n    return result",
        "test": "assert move_num(\"12345\") == \"12345\"",
        "num_ids": 622
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Count the number of elements in the list\n    n = len(a)\n\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in a:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Create a list of tuples to represent the frequency of each element in the list\n    freq_list = list(freq.items())\n\n    # Sort the list of tuples based on their frequency in descending order\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Initialize the largest subset size as 1\n    largest_size = 1\n\n    # Iterate through each tuple in the list of tuples\n    for i in range(n - 1):\n        # Check if the frequency of the current element is greater than the frequency of the previous element\n        if freq_list[i][1] > freq_list[i + 1][1]:\n            # If it is, update the size of the largest subset by adding the current element to the previous element's size\n            largest_size += freq_list[i][1]\n\n    return largest_size",
        "test": "assert largest_subset([1, 2, 4, 8, 10, 11]) == 2",
        "num_ids": 1866
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0], arr2[0])\n    \n    # Find the midpoint of the two sorted lists\n    mid = n // 2\n    \n    # Find the median of the two halves\n    if n % 2 == 0:\n        return (arr1[mid], arr2[mid-1])\n    else:\n        return arr1[mid]",
        "test": "assert get_median([1,2,3,4], [2,3,4,5], 5) == 3",
        "num_ids": 1033
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def nth_nums(nums, n):\n    if n == 1:\n        return nums\n    else:\n        return [x ** n for x in nums]",
        "test": "assert nth_nums([2, 4, 6, 8, 10], 1) == [2, 4, 6, 8, 10]",
        "num_ids": 616
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if it is uppercase, False otherwise.\n    '''\n    return string.isupper()",
        "test": "assert is_upper('hello') == False",
        "num_ids": 313
    },
    {
        "number": 625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1:\n        return newList\n\n    # create a copy of the list\n    newList_copy = newList[:]\n\n    # swap the first and last elements\n    newList_copy[0], newList_copy[-1] = newList_copy[-1], newList_copy[0]\n\n    return newList_copy",
        "test": "assert swap_List([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1]",
        "num_ids": 523
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def triangle_area(r) :  \n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # base case\n    if r == 0:\n        return 0\n\n    # recursive case\n    if r == 1:\n        return 0.5\n\n    # find the square root of r and check if it's an integer\n    sqrt_r = int(r ** 0.5)\n\n    # calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    area = (2 * sqrt_r) * (sqrt_r ** 2)\n\n    # return the area\n    return area",
        "test": "assert triangle_area(5) == 12.0, \"Incorrect area calculation\"",
        "num_ids": 1039
    },
    {
        "number": 627,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        raise ValueError(\"Start index should be less than or equal to end index\")\n\n    if start < 0 or start >= len(array):\n        raise ValueError(\"Start index should be between 0 and the length of the array\")\n\n    if end < 0 or end >= len(array):\n        raise ValueError(\"End index should be between 0 and the length of the array\")\n\n    if start == end:\n        return array[start]\n\n    count = end + 1 - start\n    missing = count + 1\n\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            missing -= 1\n\n    return missing",
        "test": "assert find_First_Missing([3,4,2,7,0,1]) == 1",
        "num_ids": 943
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert replace_spaces(\"Hello world!\") == \"Hello%20world!\"",
        "num_ids": 331
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Split(lst):\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 596
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def adjac(ele):\n    adj = []\n    x, y = ele\n    if x > 0:\n        adj.append((x - 1, y))\n    if y < 10:\n        adj.append((x, y + 1))\n    if x < 10:\n        adj.append((x + 1, y))\n    if y > 0:\n        adj.append((x, y - 1))\n    return adj",
        "test": "assert adjac((0, 0)) == [(0, 1), (1, 0)]",
        "num_ids": 1058
    },
    {
        "number": 631,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Create an empty string to store the modified text\n    modified_text = \"\"\n\n    # Iterate through each character in the text\n    for char in text:\n\n        # Check if the character is a space\n        if char == \" \":\n\n            # If it is, replace it with an underscore\n            modified_text += \"_\"\n\n        # If the character is not a space, append it to the modified string\n        else:\n            modified_text += char\n\n    # Return the modified string\n    return modified_text",
        "test": "assert replace_spaces(\"Hello world\") == \"Hello_world\"",
        "num_ids": 602
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for num in num_list:\n        if num!= 0:\n            num_list[count] = num\n            count += 1\n    num_list = num_list[:count]\n    return num_list",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 723
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nprint(\"The sum of xor of all pairs of numbers in the given list is:\", pair_xor_Sum(arr,n))",
        "test": "assert pair_xor_Sum([1,2,3,4,5],6) == 12 # check if the function works as expected",
        "num_ids": 877
    },
    {
        "number": 635,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n    return sorted_list",
        "test": "assert heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 826
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # Check if the actual cost is greater than or equal to the sale amount\n    if actual_cost >= sale_amount:\n        return True\n    # Check if the actual cost is less than the sale amount\n    else:\n        return False",
        "test": "assert noprofit_noloss(100, 200) == False",
        "num_ids": 674
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate wind chill index\n    chi = round(v / (0.6213 * t + 273.15))\n    \n    return chi",
        "test": "assert wind_chill(0, 32) == 0",
        "num_ids": 1041
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names after removing lowercase names\n    lowercase_names = []\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # add the name to the lowercase_names list\n            lowercase_names.append(name)\n    # return the sum of the lengths of the names in lowercase_names\n    return sum([len(name) for name in lowercase_names])",
        "test": "assert sample_nam([\"Mary\", \"Mary\", \"Mary\"]) == 0",
        "num_ids": 737
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)|\\[[^\\]]*\\]'\n    items = re.sub(pattern, '', items)\n    return items",
        "test": "assert remove_parenthesis('hello world') == 'hello world'",
        "num_ids": 655
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else:\n        num = 3\n        prev = 2\n        count = 0\n        while num <= n:\n            count += 1\n            num += prev\n            prev = num - 1\n        return count + 1",
        "test": "assert is_nonagonal(1) == 1, \"1 should be the first nonagonal number.\"",
        "num_ids": 936
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Check if a string contains 'z' at the middle of a word.\n    '''\n    # Find all the words in the text\n    words = re.findall(r'\\b\\w*\\b', text)\n\n    # Check if there are any words in the text that contain 'z' at the middle\n    for word in words:\n        if 'z' in word and word.startswith(word) and word.endswith(word):\n            return True\n\n    # If there are no words that contain 'z' at the middle, return False\n    return False",
        "test": "assert text_match_wordz_middle('hello world') == False",
        "num_ids": 880
    },
    {
        "number": 644,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize the reversed array to the input array\n    reversed_array = input\n    # Initialize the start index and end index variables\n    start_index = 0\n    end_index = len(reversed_array) - 1\n    # Initialize the count variable\n    count = 0\n    # Loop till the start index is less than the end index\n    while start_index < end_index:\n        # Swap the elements at the start index and end index\n        temp = reversed_array[start_index]\n        reversed_array[start_index] = reversed_array[end_index]\n        reversed_array[end_index] = temp\n        # Increment the start index and decrement the end index\n        start_index += 1\n        end_index -= 1\n        # Increment the count variable\n        count += 1\n        # Check if the count meets the given k value\n        if count == k:\n            break\n    # Return the reversed array\n    return reversed_array",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [5, 4, 3, 2, 1]",
        "num_ids": 1082
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'key1': 10, 'key2': 20}) == (1, 2, 3, {'key1': 10, 'key2': 20})",
        "num_ids": 672
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    min_row = min(range(n))\n    min_col = min(range(n))\n    max_row = max(range(n))\n    max_col = max(range(n))\n\n    best_cost = 0\n    best_path = []\n\n    for i in range(n):\n        for j in range(n):\n            if i == min_row and j == min_col:\n                continue\n            for k in range(i+1, n):\n                for l in range(j+1, n):\n                    if i == k and j == l:\n                        continue\n                    cost_ij = cost[i][j]\n                    cost_ik = cost[i][k]\n                    cost_jl = cost[j][l]\n                    cost_kl = cost[k][l]\n                    new_cost = cost_ij + min(cost_ik, min(cost_jl, cost_kl))\n                    if new_cost > best_cost:\n                        best_cost = new_cost\n                        best_path = [i, j, k, l]\n\n    return best_path, best_cost",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 8.0",
        "num_ids": 2530
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = []\n    for student_name, (student_height, student_weight) in students.items():\n        if student_height > h and student_weight > w:\n            filtered_students.append(student_name)\n    return filtered_students",
        "test": "assert filter_data({\"Student1\": (160, 80), \"Student2\": (175, 75), \"Student3\": (190, 65), \"Student4\": (150, 70), \"Student5\": (130, 60)}, 165, 120) == []",
        "num_ids": 1384
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Initialize a set to store the indices of the same values in nums1 and nums2\n    same_indices = set()\n\n    # Iterate over the indices in nums1\n    for i in range(len(nums1)):\n        # Check if nums1[i] is equal to any value in nums2\n        if nums1[i] in nums2 and nums1[i] not in same_indices:\n            # If so, add the index i to the same_indices set\n            same_indices.add(i)\n\n    # Iterate over the indices in nums2\n    for i in range(len(nums2)):\n        # Check if nums2[i] is equal to any value in nums1\n        if nums2[i] in nums1 and nums2[i] not in same_indices:\n            # If so, add the index i to the same_indices set\n            same_indices.add(i)\n\n    # Return a list of the indices where the lists have the same values\n    return list(same_indices)",
        "test": "assert count_same_pair([1,2,3,4,5], [2,4,6,8,10]) == [0, 1]",
        "num_ids": 986
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        raise ValueError(\"Power cannot be negative\")\n    \n    result = 0\n    while power > 0:\n        if power % 10 == 0:\n            result += sum(int(digit) for digit in str(base))\n        else:\n            result += sum(int(digit) ** power % 10 for digit in str(base))\n        power //= 10\n    return result",
        "test": "assert power_base_sum(5, 1) == 5  # Check if the function returns the correct result when the base is 5 and the power is 1.",
        "num_ids": 840
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts the values between quotation marks \" \"\n    from it.\n    '''\n    # Using regular expression to match the quotation marks \" \"\n    quotation_marks = r'\"'\n    \n    # Using the findall() method to find all occurrences of quotation marks \" \"\n    matches = re.findall(quotation_marks, text1)\n    \n    # Returning a list of extracted values\n    return matches",
        "test": "assert extract_quotation(\"This is another test string.\") == \"another\"",
        "num_ids": 793
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple([t_i * t_{i+1} for t_i in test_tup])\n    return result_tup\n",
        "test": "assert multiply_elements((1,2,3,4)) == (1,2,3,4,6)",
        "num_ids": 917
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 564
    },
    {
        "number": 730,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Removes consecutive duplicates of a given list.\n    '''\n    # Initialize an empty list to store the unique numbers\n    unique_nums = []\n    \n    # Iterate through the list\n    for num in nums:\n        # Check if the current number is already in the unique_nums list\n        if num not in unique_nums:\n            # If it is not, append it to the unique_nums list\n            unique_nums.append(num)\n    \n    # Return the unique_nums list\n    return unique_nums",
        "test": "assert consecutive_duplicates([1,2,2,3,3,4,4,4,4,5,5,5,5,5]) == [1,2,3,4,5]",
        "num_ids": 836
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface = math.pi * r**2 * h\n    return surface",
        "test": "assert lateralsurface_cone(3,1) == 4.25",
        "num_ids": 548
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+', ':', text)",
        "test": "assert replace_specialchar(\"hello world\") == \"hello:world\"",
        "num_ids": 566
    },
    {
        "number": 733,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the index to -1\n    index = -1\n\n    # Loop through the array from left to right\n    for i in range(len(A)):\n\n        # If the current element is equal to the given number, update the index\n        if A[i] == x:\n            index = i\n            break\n\n    # Return the index of the first occurrence of the given number\n    return index",
        "test": "assert find_first_occurrence([1,2,3,4,5], 3) == 2",
        "num_ids": 949
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Create a function to find sum of products of all sublists of given array\n    def sum_sublist_products(arr, start, end):\n        if start == end:\n            return arr[start]\n        else:\n            return arr[start] * sum_sublist_products(arr, start+1, end)\n\n    # Initialize variables\n    n = len(arr)\n    sublist_sum = 0\n\n    # Iterate over all sublists of given array\n    for i in range(n-1):\n        sublist_sum += sum_sublist_products(arr, i, i+1)\n\n    return sublist_sum",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7]) == 120, \"sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7]) should return 120\"",
        "num_ids": 1469
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize variables\n    start = 1\n    end = len(bin(n)[2:]) - 1\n    \n    # Toggle bits of the number until first and last bits are not set\n    while start <= end:\n        n = (n ^ (1 << start)) & n\n        start += 1\n        \n    return n",
        "test": "assert set_middle_bits(0) == 0, \"set_middle_bits(0) should return 0\"",
        "num_ids": 1071
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left",
        "test": "assert left_insertion(sorted([1, 2, 3, 4, 5]), 3) == 2",
        "num_ids": 906
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else:\n        return False",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 462
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5))  # Output: 32",
        "test": "assert geometric_sum(5) == 120",
        "num_ids": 354
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize variables\n    count = 0\n    max_count = 0\n    max_index = 0\n    smallest_triangular_number = 0\n\n    # Iterate through numbers from 1 to n\n    for num in range(1, n + 1):\n        # Calculate the smallest triangular number with n digits\n        triangular_number = math.comb(n, count)\n        # Check if the triangular number is smaller than the current smallest number\n        if triangular_number < smallest_triangular_number:\n            count += 1\n            smallest_triangular_number = triangular_number\n        # If the triangular number is equal to the current smallest number, update the count and index\n        elif triangular_number == smallest_triangular_number:\n            count += 1\n            max_count = max(max_count, count)\n            max_index = num\n\n    # Return the index of the smallest triangular number with n digits\n    return max_index",
        "test": "assert find_Index(3) == 0",
        "num_ids": 1013
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n\n    # Iterate over the elements of the tuple and create a new key-value pair\n    for i in range(len(test_tup) - 1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n\n    return result_dict",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 870
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #initialize a set to store the characters\n    set_1 = set()\n    #initialize a set to store the characters\n    set_2 = set()\n    #append the characters from the input string to the set_1\n    for char in s:\n        set_1.add(char)\n    #append the characters from the input string to the set_2\n    for char in s:\n        set_2.add(char)\n    #compare the two sets and return True if they are equal, otherwise return False\n    return set_1 == set_2",
        "test": "assert all_Characters_Same('abcd') == True",
        "num_ids": 651
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron given its side length.\n    '''\n    return 0.5 * side * side * side",
        "test": "assert area_tetrahedron(5) == 15",
        "num_ids": 446
    },
    {
        "number": 743,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def rotate_right(lst, m):\n    # check if m is less than or equal to 0\n    if m <= 0:\n        return lst\n\n    # check if m is greater than the length of the list\n    if m >= len(lst):\n        m = len(lst) - m\n\n    # create a new list by shifting the first m items to the left, and then the last m-m items to the right\n    new_lst = lst[m:] + lst[:m]\n\n    return new_lst",
        "test": "assert rotate_right([1], 0) == [1]",
        "num_ids": 861
    },
    {
        "number": 744,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False",
        "test": "assert check_none(()) == False, \"empty tuple should be False\"",
        "num_ids": 420
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return (lambda n: all(d in str(n) for d in str(n)[::-1]))(startnum) and (lambda n: all(d in str(n) for d in str(n)[::-1]))(endnum)",
        "test": "assert divisible_by_digits(123, 123456) == True",
        "num_ids": 3622
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef sector_area(r,a):\n    if a > math.pi/2:\n        return None\n    else:\n        return math.pi * r * r * math.sin(a)",
        "test": "assert sector_area(4, 360) == None",
        "num_ids": 546
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # Initialize the longest common subsequence and its length to 0\n    lcs = \"\"\n    length = 0\n\n    # Loop through all possible prefixes of length 3\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                # If we find a common prefix of length 3, update the longest common subsequence and its length\n                if i > 0 and j > 0 and k > 0:\n                    if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                        lcs += X[i - 1]\n                        length = 3\n                        break\n                # If we find a common prefix of length 2, update the longest common subsequence and its length\n                elif i > 0 and j > 0 and k == 0:\n                    if X[i - 1] == Y[j - 1]:\n                        lcs += X[i - 1]\n                        length = 2\n                        break\n                # If we find a common prefix of length 1, update the longest common subsequence and its length\n                elif i > 0 and j == 0 and k == 0:\n                    if X[i - 1] == Z[k - 1]:\n                        lcs += X[i - 1]\n                        length = 1\n                        break\n                # If we have reached the end of the string, break out of the loop\n                elif i == 0 and j == 0 and k == 0:\n                    break\n\n    # Return the longest common subsequence and its length\n    return lcs, length",
        "test": "assert lcs_of_three('ABCDGH', 'AEDFHR', 'DEHR') == 'D'",
        "num_ids": 1908
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Create a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Use the re.sub() method to replace all non-word characters in the string with spaces\n    return re.sub(r'[^\\w\\s]','', str1)",
        "test": "assert capital_words_spaces(\"this is another test string\") == \"this is another test string\"",
        "num_ids": 861
    },
    {
        "number": 749,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\n    Args:\n    nums_str (list): A list of strings containing numbers.\n\n    Returns:\n    list: A list of strings sorted numerically.\n\n    '''\n\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list of integers in ascending order\n    nums.sort()\n\n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str",
        "test": "assert sort_numeric_strings([\"10\", \"20\", \"30\", \"40\", \"50\"]) == sorted([\"10\", \"20\", \"30\", \"40\", \"50\"])",
        "num_ids": 895
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup",
        "test": "assert add_tuple([1, 2, 3], []) == [1, 2, 3]",
        "num_ids": 495
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or arr[i] < arr[i-1]:\n        return True\n    else:\n        return False",
        "test": "assert check_min_heap_helper([5, 3, 1, 4, 2], 4) == True",
        "num_ids": 1103
    },
    {
        "number": 752,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize variables for the jacobsthal sequence\n    jacob_num = [0] * (n+1)\n    jacob_num[0] = 0\n    jacob_num[1] = 1\n    \n    # calculate the jacobsthal sequence\n    for i in range(2, n+1):\n        jacob_num[i] = (4*i*i + 10*i - 17) // 12\n    \n    # return the nth number in the jacobsthal sequence\n    return jacob_num[n]",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 1516
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort()\n    return test_list[:K]",
        "test": "assert min_k([1, 2, 3, 4, 5], 3) == [1, 2, 3]",
        "num_ids": 917
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty list to store the common elements\n    common_elements = []\n\n    # Iterate over each element in the first list\n    for i in range(len(l1)):\n        # Check if the element is in all three lists\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in common_elements:\n            # If it is, add it to the common list\n            common_elements.append(l1[i])\n\n    return common_elements",
        "test": "assert extract_index_list([1,2,3], [2,3,4], []) == []",
        "num_ids": 1182
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]",
        "test": "assert second_smallest([1, 5, 3, 8, 4]) == 3",
        "num_ids": 652
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'\\ba\\b'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return 'No matches found'\n    elif len(matches) == 1:\n        return matches[0]\n    else:\n        return 'Multiple matches found'",
        "test": "assert text_match_zero_one(\"ababa\") == True",
        "num_ids": 1820
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs(['hello', 'world', 'python', 'programming', 'in', 'python']) == (1, 2)",
        "num_ids": 787
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create an empty dictionary to store the count of sublists\n    sublist_count = {}\n\n    # Iterate through each element of the list\n    for element in list1:\n\n        # Convert the element to a tuple and check if it already exists in the dictionary\n        if (tuple(element) in sublist_count):\n            # If the tuple already exists, increment its count\n            sublist_count[tuple(element)] += 1\n        else:\n            # If the tuple doesn't exist, add it with a count of 1\n            sublist_count[(tuple(element))] = 1\n\n    return sublist_count",
        "test": "assert unique_sublists([1,2,3,2,1,2,3,1,2,1,1,2]) == {((1, 2), 1): 3, ((1, 3), 1): 3, ((2, 1), 1): 3, ((2, 3), 1): 3, ((1, 2), 2): 3, ((1, 3), 2): 3, ((2, 1), 2): 3, ((2, 3), 2): 3, ((1, 2), 3): 3, ((1, 3), 3): 3, ((2, 1), 3): 3, ((2, 3), 3): 3}",
        "num_ids": 1201
    },
    {
        "number": 759,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-numeric characters and split the string into a list of parts\n    parts = [part.replace(',', '') for part in num.replace('.', '').split()]\n\n    # Check if the length of the list is 4\n    if len(parts)!= 4:\n        return False\n\n    # Check if all parts are numbers\n    for part in parts:\n        if not part.isdigit():\n            return False\n\n    # If all checks pass, the number is a decimal number with a precision of 2\n    return True",
        "test": "assert is_decimal(\"123.456\") == True",
        "num_ids": 2072
    },
    {
        "number": 760,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Loop through the input list and add each element to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # Check if the set contains only one element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1, 2, 3, 4, 5]) == False",
        "num_ids": 737
    },
    {
        "number": 762,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(12) is True, \"The given month number should contain 30 days.\"",
        "num_ids": 766
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_min_diff(arr,n):\n    # Create a dictionary to store the minimum difference between any two elements in the array\n    min_diff = {}\n\n    # Iterate through the array and update the minimum difference between any two elements\n    for i in range(n):\n        for j in range(i+1,n):\n            min_diff[(i,j)] = abs(arr[i]-arr[j])\n\n    # Find the minimum difference between any two elements in the array\n    min_diff = min(min_diff.values())\n\n    return min_diff",
        "test": "assert find_min_diff([5,4,3,2,1], 5) == 1",
        "num_ids": 871
    },
    {
        "number": 764,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr('123') == 3, \"The function should return the number of digits in the given string '123'.\"",
        "num_ids": 489
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Function to find nth polite number.\n    '''\n\n    # Initialize the base case to n=2\n    base_case = n\n\n    # Initialize the polite number to the square root of n\n    polite_number = math.sqrt(n)\n\n    # While the polite number is not a square, increment the base case and the polite number\n    while polite_number ** 2!= n:\n        base_case += 1\n        polite_number = math.sqrt(base_case)\n\n    # Return the polite number\n    return polite_number",
        "test": "assert is_polite(1) == True, \"1 is not a polite number.\"",
        "num_ids": 753
    },
    {
        "number": 766,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def pair_wise(lst):\n    '''\n    Returns a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1,2), (2,3), (3,4), (4,5)]",
        "num_ids": 855
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    # Create a dictionary to store the count of each pair in the list\n    counts = {}\n\n    # Loop through the list of numbers\n    for num in arr:\n        # If the current number is equal to the sum, increment the count in the dictionary\n        if num == sum:\n            counts[sum] = counts.get(sum, 0) + 1\n    \n    # Return the count of pairs in the list that sum up to the given sum\n    return counts[sum] if sum in counts else 0",
        "test": "assert get_pairs_count([1,2,3,4,5], 0) == 0",
        "num_ids": 787
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff.append(li1[i])\n    return diff",
        "test": "assert Diff([], []) == []",
        "num_ids": 628
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 515
    },
    {
        "number": 771,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n\n    # Initialize variables\n    stack = deque()\n\n    # Loop through each character of the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, check if it matches the top element of the stack\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n\n    # If we get here, the expression is balanced\n    return True",
        "test": "assert check_expression(\"()()\") == True",
        "num_ids": 881
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) <= K]\n    return \" \".join(filtered_words)",
        "test": "assert remove_length(\"hello world\", 6) == \"hello world\"",
        "num_ids": 701
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    if len(matches) == 0:\n        return None\n    else:\n        for match in matches:\n            yield match.group(), match.start(), match.end()",
        "test": "assert occurance_substring(\"hello world\", \"o\") == (1,3)",
        "num_ids": 725
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = True\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                result = False\n                break\n    return result",
        "test": "assert odd_position([1, 2, 3, 4, 5]) # True",
        "num_ids": 668
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)):\n            if test_str[i] in vowels and test_str[j] in vowels:\n                count += 1\n\n    return count",
        "test": "assert count_vowels(\"ABCD\") == 0, \"The function should return 0 vowels in the string 'ABCD'.\"",
        "num_ids": 813
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_sum(arr):\n    '''\n    Find the sum of non-repeated elements in a list.\n\n    :param arr: list of integers\n    :return: the sum of non-repeated elements in the list\n    '''\n    # Create a set to store the unique elements in the list\n    unique_set = set(arr)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over the unique elements in the list\n    for elem in unique_set:\n        # Add the element to the sum\n        sum += elem\n    # Return the sum\n    return sum",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 828
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Pack consecutive duplicates of a given list elements into sublists.\n    \n    Args:\n        list1 (list): The list to be packed.\n    \n    Returns:\n        list: A list of sublists with consecutive duplicates.\n    '''\n    sublist = []\n    for item in list1:\n        if item not in sublist:\n            sublist.append(item)\n        else:\n            sublist[-1] = item\n    return sublist",
        "test": "assert pack_consecutive_duplicates([1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 1165
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for lst in list1:\n        if lst not in count_dict:\n            count_dict[lst] = 1\n        else:\n            count_dict[lst] += 1\n    return count_dict",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1180
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            total = sum(test_list[i:j])\n            if total in result:\n                result.append((total, test_list[i], test_list[j-1]))\n    return result",
        "test": "assert find_combinations([1, 2, 3, 4]) == [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]",
        "num_ids": 1691
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(15) == 4",
        "num_ids": 553
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize a variable to store the sum of odd length subarrays\n    total_sum = 0\n\n    # Iterate through each element of the array\n    for i in range(len(arr)):\n        # Check if the current element is odd and its length is odd\n        if arr[i] % 2!= 0 and i > 0 and arr[i] == arr[i - 1]:\n            # Add the current element and its length to the sum\n            total_sum += arr[i]\n\n    return total_sum\n",
        "test": "assert odd_length_sum([1, 3, 5, 7, 9]) == 0, \"Test 2: Expected 0, got {} instead.\".format(odd_length_sum([1, 3, 5, 7, 9]))",
        "num_ids": 1028
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Calculate the minimum and maximum color values\n    min_color = min(r, g, b)\n    max_color = max(r, g, b)\n\n    # Calculate the delta between the minimum and maximum color values\n    delta_color = max_color - min_color\n\n    # If the maximum color value is equal to zero, set it to some small value\n    if delta_color == 0:\n        hue = 0\n        saturation = 0\n    else:\n        # Calculate the saturation and hue from the delta value\n        saturation = delta_color / max_color\n\n        # Check if the maximum color value is greater than the red color value\n        if max_color == r:\n            hue = (g - b) / delta_color\n        elif max_color == g:\n            hue = 2 + (b - r) / delta_color\n        else:\n            hue = 4 + (r - g) / delta_color\n\n        # If the hue value is greater than 1, round it to the nearest integer\n        if hue > 1:\n            hue = round(hue)\n\n        # If the saturation value is less than or equal to zero, set it to some small value\n        if saturation <= 0:\n            saturation = 0\n\n    # Convert the hue value to degrees and the saturation value to percentage\n    h = int(hue * 360)\n    s = round((saturation * 100), 2)\n    v = round((max_color * 100), 2)\n\n    # Return a dictionary with the converted color values\n    return {'hue': h,'saturation': s, 'value': v}",
        "test": "assert rgb_to_hsv(255, 255, 255) == (0, 0, 1) # should return (0, 1, 1)",
        "num_ids": 2524
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        elif num % 2 == 1:\n            product *= num\n    \n    return product",
        "test": "assert mul_even_odd([2, 4, 6, 8, 10]) == 38",
        "num_ids": 698
    },
    {
        "number": 785,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert tuple string to integer tuple.\n    '''\n    str_list = list(test_str)\n    int_list = []\n    for i in str_list:\n        if i.isdigit():\n            int_list.append(int(i))\n    return tuple(int_list)\n",
        "test": "assert tuple_str_int('1,2,3') == (1, 2, 3)",
        "num_ids": 548
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): A list of values that are sorted in ascending order.\n    x (int): The value to be searched for in the list.\n\n    Returns:\n    int: The index of the right insertion point for the specified value in the list.\n\n    Examples:\n    >>> right_insertion([1, 3, 5, 7], 5)\n    2\n    >>> right_insertion([1, 3, 5, 7], 10)\n    4\n    >>> right_insertion([1, 3, 5, 7], 6)\n    2\n    >>> right_insertion([1, 3, 5, 7], 0)\n    0\n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return bisect.bisect_left(a, x)",
        "test": "assert right_insertion([1, 3, 5, 6, 7], 5) == 2 # should return 2 because 5 is in the right position",
        "num_ids": 1114
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    # Define a pattern to match the string with three 'b'\n    pattern = r'[ab]{3}'\n\n    # Use the re.match() method to check if the string matches the pattern\n    match = re.match(pattern, text)\n\n    # If the string matches the pattern, return True\n    if match:\n        return True\n    else:\n        # If the string does not match the pattern, return False\n        return False",
        "test": "assert text_match_three(\"ababb\") == True",
        "num_ids": 554
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n\n    # Split the string by commas and convert the resulting list to a tuple\n    new_tuple = tuple(test_list)\n\n    # Return the new tuple\n    return new_tuple",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'apple') == ('apple', 'banana', 'cherry')",
        "num_ids": 540
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            for j in range(i+1, len(nums), 2):\n                if j not in nums[i:]:\n                    return False\n    return True",
        "test": "assert even_position([1, 3, 5, 7, 9]) == False  # Test case 2: even_position([1, 3, 5, 7, 9]) should return False",
        "num_ids": 803
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_nested(test_tup):\n    '''\n    Remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(t) for t in test_tup)\n    elif isinstance(test_tup, list):\n        return [remove_nested(t) for t in test_tup]\n    elif isinstance(test_tup, dict):\n        return {k: remove_nested(v) for k, v in test_tup.items()}\n    else:\n        return test_tup",
        "test": "assert remove_nested([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 693
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    # Initialize variables\n    count = 0\n    size = len(input_list)\n\n    # Loop through each list in the input list\n    for i in range(size): \n        # If the list is not empty, increment the count\n        if input_list[i]: \n            count += 1\n\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 505
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "test": "assert last([1,2,3,4,5], 6) == -1 # if the element is not found, the function returns -1",
        "num_ids": 678
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"The string '{text}' starts with the letter 'a' and ends with the letter 'b'\")\n    else:\n        print(f\"The string '{text}' does not have an 'a' followed by anything, ending in 'b'.\")",
        "test": "assert text_starta_endb(\"Hello World\") == True",
        "num_ids": 670
    },
    {
        "number": 796,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total",
        "test": "assert return_sum({\"apple\": 1, \"banana\": 2, \"cherry\": 3}) == 6 # test case 1",
        "num_ids": 511
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n >= 0:\n        return sum([i for i in range(1, n+1) if i % 2!= 0])\n    else:\n        return \"Negative numbers are not allowed in this function\"",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 555
    },
    {
        "number": 798,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''  \n    return sum(arr)  ",
        "test": "assert _sum([1,2,3,4,5]) == 15, \"The sum of an array is not correct.\"",
        "num_ids": 342
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Check if d is greater than 32\n    if d > 32:\n        print(\"Error: d must be less than or equal to 32\")\n        return\n\n    # Calculate the number of bits to rotate\n    n_bits = 32 - d\n\n    # Calculate the number of bits to shift\n    shift = d % n_bits\n\n    # Rotate left by shift bits\n    rotated_n = (n << shift) >> shift\n\n    return rotated_n",
        "test": "assert left_rotate(10,3) == 10",
        "num_ids": 549
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n\ntext = \"  this is a test   with spaces  \"\nprint(remove_all_spaces(text))  # Output: \"thisisaatestwithspaces\"",
        "test": "assert remove_all_spaces(\"\") == \"\"",
        "num_ids": 520
    },
    {
        "number": 801,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x):\n        for j in range(y):\n            for k in range(z):\n                if i == x - 1 and j == y - 1 and k == z - 1:\n                    count += 1\n    return count",
        "test": "assert test_three_equal(1, 1, 1) == 1",
        "num_ids": 646
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count",
        "test": "assert count_rotation([]) == 0",
        "num_ids": 846
    },
    {
        "number": 803,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        sqrt_n = int(n**0.5)\n        if n == sqrt_n**2:\n            return True\n        else:\n            return False",
        "test": "assert is_perfect_square(16) == True, \"16 is not a perfect square.\"",
        "num_ids": 507
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize a variable to store the product of all numbers in the list\n    product = 1\n\n    # Loop through the list to calculate the product of all numbers\n    for i in range(len(arr)):\n        product *= arr[i]\n\n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert is_product_even([1, 2, 3, 4]) == True # input is even",
        "num_ids": 646
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    for sublist in lists:\n        sublist.sort()\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n    return max_sum",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]) == [15, 15, 15, 15, 15]",
        "num_ids": 1320
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run = max(max_run, i - max_run + 1)\n    return max_run",
        "test": "assert max_run_uppercase(\"abcAbcdefg\") == 4",
        "num_ids": 747
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 661
    },
    {
        "number": 808,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup",
        "test": "assert check_K([1, 2, 3], 2) == True",
        "num_ids": 515
    },
    {
        "number": 809,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    \n    return True",
        "test": "assert check_smaller((1, 2, 3), (3, 1, 2)) == False",
        "num_ids": 832
    }
]