[
    {
        "number": 2,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert similar_elements((1, 2, 3), (2, 3, 4)) == (2, 3)\nassert similar_elements((1, 2, 3), (1, 2, 3)) == ()\nassert similar_elements((1, 2, 3), (4, 5, 6)) == ()\nassert similar_elements((1, 2, 3), (1, 2, 4)) == ()\nassert similar_elements((1, 2, 3), (1, 2, 3, 4)) == (1, 2, 3)"
    },
    {
        "number": 3,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_not_prime(2) == True\nassert is_not_prime(3) == False\nassert is_not_prime(4) == True\nassert is_not_prime(5) == False\nassert is_not_prime(6) == True\n"
    },
    {
        "number": 4,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert heap_queue_largest([3,2,1,5,6,4],3) == [6,5,4,3,2,1]\nassert heap_queue_largest([1,2,3,4,5],3) == [5,4,3,2,1]\nassert heap_queue_largest([1,2,3,4,5,6],3) == [6,5,4,3,2,1]\nassert heap_queue_largest([1,2,3,4,5,6,7,8,9],3) == [9,8,7,6,5,4,3,2,1]\nassert heap_queue_largest([1,2,3,4,5,6,7,8,9,10],3) == [10,9,8,7,6,5,4,3,2,1]"
    },
    {
        "number": 6,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert is_Power_Of_Two(1) == True\nassert is_Power_Of_Two(2) == True\nassert is_Power_Of_Two(4) == True\nassert is_Power_Of_Two(8) == True\nassert is_Power_Of_Two(16) == True\n"
    },
    {
        "number": 7,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert find_char_long(\"The quick brown fox jumps over the lazy dog\") == [\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\", \"dog\"]"
    },
    {
        "number": 8,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert square_nums([1, 2, 3, 4, 5, 6]) == [1, 4, 9, 16, 25, 36]\nassert square_nums([1, 2, 3, 4, 5, 6, 7]) == [1, 4, 9, 16, 25, 36, 49]\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 4, 9, 16, 25, 36, 49, 64]\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 4, 9, 16, 25, 36, 49, 64, 81]"
    },
    {
        "number": 9,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert find_Rotations(\"abc\") == 1\nassert find_Rotations(\"abcd\") == 2\nassert find_Rotations(\"abcde\") == 3\nassert find_Rotations(\"abcdef\") == 4\nassert find_Rotations(\"abcdefg\") == 5"
    },
    {
        "number": 11,
        "checkpoint": "1B",
        "pass": 0,
        "answer": "assert remove_Occ(\"hello world\", \"l\") == \"he world\"\nassert remove_Occ(\"hello world\", \"o\") == \"helo world\"\nassert remove_Occ(\"hello world\", \"l\") == \"helo world\"\nassert remove_Occ(\"hello world\", \"o\") == \"helo world\"\nassert remove_Occ(\"hello world\", \"l\") == \"helo world\""
    }
]