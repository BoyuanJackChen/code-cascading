[
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "test": "assert     similar_elements([1,2,3], [2,3,4]) == [2,3]",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(6) is True",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n, nums)\n",
        "test": "assert     heap_queue_largest([],2) == []",
        "num_ids": 1189,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #return x & (x-1)\n    #return (x & x-1)==0\n    return x & (-x)==x",
        "test": "assert     is_Power_Of_Two(8) == True",
        "num_ids": 2653,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n",
        "test": "assert     find_char_long('') == []",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num * num for num in nums]\n",
        "test": "assert     [0, 1, 4] == square_nums([0, 1, 2])",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    for i in range(0,n): \n        temp=str[i:] + str[0:i]\n        if(temp==str): \n            return i\n    return -1\n",
        "test": "assert     find_Rotations('abc') ==     0",
        "num_ids": 1207,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '')\n",
        "test": "assert     remove_Occ('helloworld', 'x') == 'helloworld'",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i].sort(reverse=True)\n    return M\n",
        "test": "assert     [ [10, 20, 30],",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume\n",
        "test": "assert     find_Volume(3,4,5) == 60",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[_]+\\w+',text):\n        return True\n    return False\n",
        "test": "assert     text_lowercase_underscore(\"a_b_c\") == True",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "test": "assert     square_perimeter(2) ==     8",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #print(string)\n    #print(string[0:1])\n    #print(string[0:2])\n    #print(string[0:3])\n    #print(string[0:4])\n    #print(string[0:5])\n    #print(string[0:6])\n    #print(string[0:7])\n    #print(string[0:8])\n    #print(string[0:9])\n    #print(string[0:10])\n    #print(string[0:11])\n    #print(string[0:12])\n    #print(string[0:13])\n    #print(string[0:14])\n    #print(string[0:15])\n    #print(string[0:16])\n    #print(string[0:17])\n    #print(string[0:18])\n    #print(string[0:19])\n    #print(string[0:20])\n    #print(string[0:21])\n    #print(string[0:22])\n    #print(string[0:23])\n    #print(string[0:24])\n    #print(string[0:25])\n    #print(string[0:26])\n    #print(string[0:27])\n    #print(string[0:28])\n    #print(string[0:29])\n    #print(string[0:30])\n    #print(string[0:31])\n    #print(string[0:32])\n    #print(string[0:33])\n    #print(string[0:34])\n    #print(string[0:35])\n    #print(string[0:36])\n    #print(string[0:37])\n    #print(string[0:38])\n    #print(string[0:39])\n    #print(string[0:40])\n    #print(string[0:41])\n    #print(string[0:42])\n    #print(string[0:43])\n    #print(string[0:44])\n    #print(string[0:45])\n    #print(string[0:46])\n    #print(string[0:47])\n    #print(string[0:48])\n    #print(string[0:49])\n    #print(string[0:50])\n    #print(string[0:51])\n    #print(string[0:52])\n    #print(string[0:53])\n    #print(string[0:54])\n    #print(string[0:55])\n    #print(string[0:56])\n    #print(string[0:57])\n    #print(string[0:58])\n    #print(string[0:59])\n    #print(string[0:60])\n    #print(string[0:61])\n    #print(string[0:62])\n    #print(string[0:63])\n    #print(string[0:64])\n    #print(string[0:65])\n    #print(string[0:66])\n    #print(string[0:67])\n    #print(string[0:68])\n    #print(string[0:69])\n    #print(string[0:70])\n    #print(string[0:71])\n    #print(string[0:72])\n    #print(string[0:73])\n    #print(string[0:74])\n    #print(string[0:75])\n    #print(string[0:76])\n    #print(string[0:77])\n    #print(string[0:78])\n    #print(string[0:79])\n    #print(string[0:80])\n    #print(string[0:81])\n    #print(string[0:82])\n    #print(string[0:83])\n    #print(string[0:84])\n    #print(string[0:85])\n    #print(string[0:86])\n    #print(string[0:87])\n    #print(string[0:88])\n    #print(string[0:89])\n    #print(string[0:90])\n    #print(string[0:91])\n    #print(string[0:92])\n    #print(string[0:93])\n    #print(string[0:94])\n    #print(string[0:95])\n    #print(string[0:96])\n    #print(string[0:97])\n    #print(string[0:98])\n    #print(string[0:99])\n    #print(string[0:100])\n    #print(string[0:101])\n    #print(string[0:102])\n    #print(string[0:103])\n    #print(string[0:104])\n    #print(string[0:105])\n    #print(string[0:106])\n    #print(string[0:107])\n    #print(string[0:108])\n    #print(string[0:109])\n    #print(string[0:110])\n    #print(string[0:111])\n    #print(string[0:112])\n    #print(string[0:113])\n    #print(string[0:114])\n    #print(string[0:115])\n    #print(string[0:116])\n    #print(string[0:117])\n    #print(string[0:118])\n    #print(string[0:119])\n    #print(string[0:120])\n    #print(string[0:121])\n    #print(string[0:122])\n    #print(string[0:123])\n    #print(string[0:124])\n    #print(string[0:125])\n    #print(string[0:126])\n    #print(string[0:127])\n    #print(string[0:128])\n    #print(string[0:129])\n    #print(string[0:130])\n    #print(string[0:131])\n    #print(string[0:132])\n    #print(string[0:133])\n    #print(string[0:134])\n    #print(string[0:135])\n    #print(string[0:136])\n    #print(string[0:137])\n    #print(string[0:138])\n    #print(string[0:139])\n    #print(string[0:140])\n    #print(string[0:141])\n    #print(string[0:142])\n    #print(string[0:143])\n    #print(string[0:144])\n    #print(string[0:145])\n    #print(string[0:146])\n    #print(string[0:147])\n    #print(string[0:148])\n    #print(string[0:149])\n    #print(string[0:150])\n    #print(string[0:151])\n    #print(string[0:152])\n    #print(string[0:153])\n    #print(string[0:154])\n    #print(string[0:155])\n    #print(string[0:156])\n    #print(string[0:157])\n    #print(string[0:158])\n    #print(string[0:159])\n    #print(string[0:160])\n    #print(string[0:161])\n    #print(string[0:162])\n    #print(string[0:163])\n    #print(string[0:164])\n    #print(string[0:165])\n    #print(string[0:166])\n    #print(string[0:167])\n    #print(string[0:168])\n    #print(string[0:169])\n    #print(string[0:170])\n    #print(string[0:171])\n    #print(string[0:172])\n    #print(string[0:173])\n    #print(string[0:174])\n    #print(string[0:175])\n    #print(string[0:176])\n    #print(string[0:177])\n    #print(string[0:178])\n    #print(string[0:179])\n    #print(string[0:180])\n    #print(string[0:181])\n    ",
        "test": "assert     str_to_list(\"this\", \"h\") == \"th\", str_to_list(\"this\", \"h\")",
        "num_ids": 3061,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(len(arraynums)-1):\n        if arraynums[i]==arraynums[i+1]:\n            return True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 1, 2, 3, 4]) == True, \"This should return True\"",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    a = x / 3\n    b = x / 5\n    if a == int(a) and b == int(b):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(2) == False",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #count = 0\n    #rev_num = str(num)[::-1]\n    #for i in range(len(rev_num)):\n        #if rev_num[i] == \"0\":\n            #count = count + 1\n    #if count == 0:\n        #return num == int(rev_num) * 2\n    #return False\n    return num % 2 == 0 and num == 2 * int(str(num)[::-1])\n",
        "test": "assert rev(3) == False",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    arr = [int(i) for i in arr]\n    \n    arr.sort()\n    \n    for i in range(len(arr)-1,0,-1) :\n        if arr[i] > 0 :\n            return arr[i]\n    return arr[0]\n    \ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    arr = [int(i) for i in arr]\n    \n    arr.sort()\n    \n    return \"\".join([str(i) for i in arr])\n    ",
        "test": "assert     find_Max_Num([1,2,3,4,5]) == 5",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n        \ndef write_a_function_to_return_max_sum_of_any_subarray(arr):\n    '''\n    Write a python function to return the maximum sum of any subarray of an array.\n    '''\n    max_sum=0\n    for i in range(len(arr)):\n        current_sum=0\n        for j in range(i,len(arr)):\n            current_sum+=arr[j]\n            if(current_sum>max_sum):\n                max_sum=current_sum\n    return max_sum\n",
        "test": "assert     opposite_Signs(-2,3)== True, 'incorrect output'",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return n + is_octagonal(n - 1)\n",
        "test": "assert     is_octagonal(1) == 1, is_octagonal(1)",
        "num_ids": 2563,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            subs[s[i:j]] += 1\n    return sum([subs[i] for i in subs if len(i) == len(s) and len(set(i)) == len(i)])\n",
        "test": "assert     count_Substrings(\"14\") == 1",
        "num_ids": 3364,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert     smallest_num([5, 8, 12, -3, 1]) == -3",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert     max_difference([(1, 2), (3, 4), (5, 6)]) == 1",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n",
        "test": "assert     subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)], \"Wrong output\"",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) > 0:\n        first_item = data_list[0]\n        if type(first_item) == list:\n            return recursive_list_sum(first_item) + recursive_list_sum(data_list[1:])\n        else:\n            return first_item + recursive_list_sum(data_list[1:])\n    else:\n        return 0\n",
        "test": "assert     recursive_list_sum([1,2,3]) == 6",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "test": "assert     pos_count([-1,4,6,7]) == 3",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def num_partitions(n,m):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        elif m == 1:\n            return 1\n        elif m == 2:\n            return 1\n        else:\n            return num_partitions(n-m,m) + num_partitions(n,m-1)\n    \n    def find_partitions(n,m):\n        if n < 0:\n            return 0\n        elif n == 0:\n            return 1\n        elif m == 1:\n            return 1\n        else:\n            return num_partitions(n,m)\n    # print(find_partitions(15,4))\n    # print(find_partitions(15,3))\n    return num_partitions(n,n)\n",
        "test": "assert     bell_number(0) == 1",
        "num_ids": 5114,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "test": "assert     is_Monotonic([1,2,3,2,5]) == False",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1,2,3], [1,2,3,4]) == False",
        "num_ids": 1005,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def find_length(tuple):\n        return len(tuple)\n    if len(set(map(find_length, Input))) == 1:\n        return True\n    return False\n",
        "test": "assert     find_equal_tuple([(1,2,3),(4,5)]) == False",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))  # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 1395,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i < n:\n        if (i*i+i) == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert     dif_Square(3) == False, 'Incorrect'",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color not in patterns:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns([], []) == True",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_ in test_list:\n        if all(map(lambda x: x % K == 0, tuple_)):\n            result.append(tuple_)\n    return result\n",
        "test": "assert     find_tuples([(0, 2), (3, 7), (5, 11)], 2) == [(3, 7), (5, 11)]",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "test": "assert     is_Diff(10) == False, \"Wrong output\"",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len_words = len(s) \n    if len_words % 2 == 0: \n        return False\n    else: \n        return True\n",
        "test": "assert     word_len(\"python\") == False, \"Wrong result for word_len('python')\"",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * (n + 1) // 2\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=int(r)\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "test": "assert     volume_sphere(2) == 4*math.pi*(2**3)/3",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    # list=[]\n    # for i in range(len(strr)):\n    #     list.append(ord(strr[i])%26)\n    # strr=''\n    # for i in list:\n    #     strr+=chr(i+97)\n    # return strr\n    return chr(sum([ord(i) for i in strr])%26+97)\n    \n    \ndef get_Char1(strr):\n    import string\n    return string.ascii_lowercase[(sum([ord(i) for i in strr])%26)%26]\n",
        "test": "assert     get_Char('') == 'a'",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i,j,a = 0,1,0\n    while(True):\n        if(a == n):\n            return j\n        i,j,a = j, i+j, a+1\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 2573,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=4*math.pi*r**2\n    return area\ndef surfacearea_square(a,b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    area=a*b\n    return area\ndef surfacearea_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_triangle_three_sides(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef surfacearea_triangle_three_sides_alt(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))*(a+b+c)\n    return area\ndef surfacearea_triangle_three_sides_alt_2(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*a*b+a*c+b*c\n    return area\ndef surfacearea_triangle_three_sides_alt_3(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef surfacearea_triangle_three_sides_alt_4(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*(a+b+c)*math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))\n    return area\ndef surfacearea_triangle_three_sides_alt_5(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*(a+b+c)*math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))\n    return area\ndef surfacearea_rectangle_two_sides(a,b):\n    '''\n    Write a function to find the surface area of a rectangle using two sides.\n    '''\n    area=a*b\n    return area\ndef surfacearea_parallelogram_two_sides(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram using two sides.\n    '''\n    area=a*b\n    return area\ndef surfacearea_trapezium_two_sides(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium using two sides.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_circle_area(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area=math.pi*r**2\n    return area\ndef surfacearea_circle_area_alt(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area=math.pi*r**2\n    return area\ndef surfacearea_circle_area_alt_2(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area=math.pi*math.pow(r,2)\n    return area\ndef surfacearea_square_area(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=a*a\n    return area\ndef surfacearea_square_area_alt(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=math.pow(a,2)\n    return area\ndef surfacearea_square_area_alt_2(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=math.pow(a,2)\n    return area\ndef surfacearea_rectangle_area(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_2(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_3(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_4(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_5(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_trapezium_area(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_2(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_3(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_4(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_5(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h",
        "test": "assert     (surfacearea_sphere(1)==4*math.pi)",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n+1)/2\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n",
        "test": "assert     merge_dictionaries_three({'a':1,'b':2},{'c':3},{'d':4})=={'a':1,'b':2,'c':3,'d':4}",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = list(set(list1))\n    list2.sort()\n    d = {}\n    for i in list2:\n        d[i] = list1.count(i)\n    return d\n",
        "test": "assert     freq_count([1,2,3,1]) == {1:2, 2:1, 3:1}",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # get nums\n    nums = []\n    for i in range(1, N + 1):\n        nums.append(i)\n    # get sub nums\n    sub_nums = []\n    for i in range(1, N):\n        sub_nums.append(i)\n    # find\n    for i in range(0, len(sub_nums)):\n        sub_nums[i] = N - sub_nums[i]\n    # sort\n    sub_nums.sort()\n    # reverse\n    sub_nums.reverse()\n    # find\n    for i in range(0, len(sub_nums)):\n        if sub_nums[i]!= sub_nums[i - 1]:\n            return sub_nums[i]\n        if sub_nums[i] == sub_nums[-1]:\n            return sub_nums[0]\n",
        "test": "assert     closest_num(9) == 8",
        "num_ids": 2894,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)\n",
        "test": "assert     len_log([\"python\", \"program\", \"python\"]) == 7",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if(str1[i:i+len(sub_str)]==sub_str):\n            return True\n    return False\n",
        "test": "assert     find_substring('hello world', 'h') == True",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    length = len(s)\n    for i in range(1, length):\n        if int(s[i]) - int(s[i - 1])!= 0:\n            return False\n    return True\n",
        "test": "assert     is_undulating(1235) == False",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert     power(2,3) == 8, \"power(2,3) == 8 failed\"",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert     index_minimum([(1,2), (0,0), (5,2), (1,0)]) == 0",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return min(len(x) for x in lst)\n    \nlst1 = [[1,2,3,4],[1,2,3],[1,2,3,4,5]]\nprint(Find_Min_Length(lst1))\n",
        "test": "assert     Find_Min_Length([[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6]]) == 3",
        "num_ids": 1385,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors.append(i)\n    return len(divisors)\n",
        "test": "assert     divisor(4) == 3",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2=[]\n    for i in list1:\n        list2+=i\n    lst=set(list2)\n    freq={}\n    for i in lst:\n        freq[i]=list2.count(i)\n    return freq\n    ",
        "test": "assert     frequency_lists([]) == {}",
        "num_ids": 1497,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for x in numbers:\n        product = product * x\n    print(product/len(numbers))\n    return product/len(numbers)\n",
        "test": "assert     (multiply_num([0, 2, 3]) == 0)",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "test": "assert     decimal_to_binary(2) == \"10\"",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num\n    while n < sys.maxsize:\n        n += 1\n        if str(n) == str(n)[::-1]:\n            return n\n",
        "test": "assert     next_smallest_palindrome(10) == 11",
        "num_ids": 1466,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    mid_idx = n//2\n    if k == mid_idx + 1:\n        return arr[mid_idx]\n    if k < mid_idx + 1:\n        return kth_element(arr[:mid_idx], k)\n    return kth_element(arr[mid_idx:], k-mid_idx)\n",
        "test": "assert     kth_element([1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 1) == 1",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_', '')\n",
        "test": "assert     snake_to_camel('snake_case') == 'SnakeCase'",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Insert your code here\n    # Fill in the the appropriate return values\n    # Consider the base cases\n    # The recurrence relation\n    if n == 1:\n        return 0\n    if m == 1:\n        return 0\n    if n == m:\n        return 1\n    if n == 0:\n        return 0\n    if m == 0:\n        return 0\n    # The function is a(n, m) = a(n-1, m) + a(n, m-1)\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "test": "assert     eulerian_num(4, 1) == 0",
        "num_ids": 2947,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate over each sublist\n    for sublist in input_list:\n        # sort each sublist\n        sublist.sort()\n",
        "test": "assert     sort_sublists([[2, 6, 1], [3, 2, 4], [3, 7, 1]]) == [[2, 6, 1], [3, 2, 4], [3, 7, 1]]",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "test": "assert     count([False, False, False, False]) == 0, \"Test failed\"",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list+list(test_tup)\n",
        "test": "assert     add_lists([1,2,3], (4,5,6)) == [1,2,3,4,5,6], \"Test 1\"",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 2106,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return (sum([1 if s[i] == '0' else 0 for i in range(n)]) + sum([1 if s[i] == '1' else 0 for i in range(n)]))",
        "test": "assert     odd_Equivalent('1100', 2) == 2",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    new_list = []\n    common = []\n    for lists in nestedlist:\n        for element in lists:\n            if element not in new_list:\n                new_list.append(element)\n            else:\n                common.append(element)\n    return common\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5], [7, 8], [9, 10]]) == []",
        "num_ids": 1703,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('4') == True",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i):\n            return False\n    return True\n",
        "test": "assert not empty_dit([{1,2},{},{}])",
        "num_ids": 869,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "test": "assert     tuple_to_int((0,)) == 0",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index in range(len(test_list)):\n        test_list[index] = list(map(float, test_list[index]))\n    return test_list\n",
        "test": "assert     list_to_float([]) == []",
        "num_ids": 1334,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"abc def\") == ['abc', 'def'], \"Check the correctness of string_to_list\"",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    j = n-1\n    while i < j:\n        mid = i + (j-i)//2\n        if arr[mid] == arr[mid+1]:\n            if mid%2==0:\n                i = mid+2\n            else:\n                j = mid-1\n        elif arr[mid] == arr[mid-1]:\n            if mid%2==1:\n                i = mid+1\n            else:\n                j = mid-2\n        else:\n            return arr[mid]\n    return arr[j]\n",
        "test": "assert     search([1,1,1,1,2]) == 2 ",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[0])\n    list2 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list2.append(list1[i])\n        elif list1[i][0] == list1[i-1][0]:\n            list2.append(list1[i])\n        elif list1[i][0] > list1[i-1][0]:\n            list2.append(list1[i])\n        elif list1[i][0] < list1[i-1][0]:\n            list2.append(list1[i-1])\n            list2.append(list1[i])\n    print(list2)\n    list3 = []\n    for i in range(len(list2)-1):\n        list3.append(list2[i][1]*list2[i+1][1])\n    print(list3)\n    print(max(list3))\n    return max(list3)\n",
        "test": "assert     max_product_tuple([(1, 1), (2, 2), (3, 3)]) == 6",
        "num_ids": 1626,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # todo: this is so slow\n    def sum_amicable_numbers(limit):\n        numbers = [number for number in range(1, limit + 1)]\n        sums = set()\n        for number in numbers:\n            if number in sums:\n                continue\n            if number == sum_factors(sum_factors(number)) and number!= sum_factors(number):\n                sums.add(number)\n                sums.add(sum_factors(number))\n        return sum(sums)\n    return sum_amicable_numbers(limit)\n",
        "test": "assert     amicable_numbers_sum(10000) == 31626",
        "num_ids": 2995,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #x = a + b*1j\n    x = complex(a,b)\n    z = cmath.phase(x)\n    return z\n",
        "test": "assert     cmath.polar(complex(0,0))[1] == 0.0",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    maxdiff = 0\n    for i in string:\n        if i == '1':\n            count1+=1\n        else:\n            count0+=1\n        if abs(count0-count1) > maxdiff:\n            maxdiff = abs(count0-count1)\n    return maxdiff\n",
        "test": "assert     find_length(\"\") == 0, \"If the string is empty, the result should be 0\"",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(x,y): \n        return x if y == 0 else gcd(y,x%y) \n    return gcd(a,b)\n",
        "test": "assert     sum(16,20) == 4 ",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(2, 3) == 6",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    for word in words:\n        if len(word) > n:\n            print(word)\n    return\n",
        "test": "assert long_words(6, \"A quick brown fox jumps over the lazy dog\".split()) == ['A', 'quick', 'brown', 'jumps', 'over', 'the']",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return True\n",
        "test": "assert     magic_square_test([[2,7,6],[9,5,1],[4,3,8]]) == True",
        "num_ids": 2917,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_item = None\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n        if max_count < count_dict[num]:\n            max_count = count_dict[num]\n            max_item = num\n    return max_item\n",
        "test": "assert     max_occurrences([1, 2, 3, 1, 3, 3, 4, 3, 3]) == 3",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = str1.lower()\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    print(vowel_list)\n    vowel_list.reverse()\n    print(vowel_list)\n    reverse_vowel_list = []\n    for char in str1:\n        if char in vowels:\n            reverse_vowel_list.append(vowel_list[0])\n            vowel_list.pop(0)\n        else:\n            reverse_vowel_list.append(char)\n    return ''.join(reverse_vowel_list)\n",
        "test": "assert     reverse_vowels(\"aeiou\") == \"uoiea\"",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "test": "assert     tup_string(('1', '2', '3')) == \"123\", \"tuple to string\"",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_num = 0\n    for num in nums:\n        if num < 0:\n            negative_num += num\n    return negative_num\n",
        "test": "assert     sum_negativenum([-1, -2, -3, -4, -5]) == -15, \"test case failed\"",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    return 1 + 6 * hexagonal_num(n - 1)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 1995,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return (zeroes, non_zeroes)\n",
        "test": "assert     zero_count([]) == (0, 0)",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0: \n        return False\n    if n == 0: \n        return True\n    while n % 2 == 0: \n        n = n / 2\n    return n == 1\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(12) == False, \"Incorrect output\"",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "test": "assert     circle_circumference(0) == 0, \"Wrong result for circle_circumference(0)\"",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #sol 1\n    flat = []\n    for i in test_list:\n        if type(i) is list:\n            flat += extract_singly(i)\n        else:\n            flat.append(i)\n    return flat\n    #sol 2\n    return [i for j in test_list for i in (j if type(j) is list else [j])]\n    #sol 3\n    return list(chain(*test_list))\n    #sol 4\n    return list(itertools.chain(*test_list))\n    #sol 5\n    flat = []\n    for i in test_list:\n        flat += i if type(i) is list else [i]\n    return flat\n    #sol 6\n    return [i for j in test_list for i in (j if type(j) is list else [j])]\n    #sol 7\n    return list(itertools.chain(*test_list))\n",
        "test": "assert     extract_singly([[1,2],[3,4,5]]) == [1,2,3,4,5]",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    for size in reversed(range(1, len(nums))):\n        for i in range(0, len(nums)-size):\n            if nums[i] > nums[i+size]:\n                swap(nums, i, i+size)\n    return nums\n",
        "test": "assert     pancake_sort([1,2,3]) == [1,2,3]",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_samepair([1,2,3],[4,5,6],[1,2,9]) == 0",
        "num_ids": 1247,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    count = 0\n    for i in Input:\n        if isinstance(i,list):\n            count+=1\n    return count\n",
        "test": "assert     find_lists(()) ==     0",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if(diff>max_diff):\n                max_diff = diff\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([1, 2, 3, 6, 5]) == 5",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if x*a + y*b == n:\n                return (x,y)\n",
        "test": "assert     find_solution(3, 2, 5) == (1, 1)",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n            \n    return list1\n",
        "test": "assert     remove_elements([2,3,4,5], [2,4]) == [3,5]",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    return n + sum_series(n-2)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l * 1/2 * ((1/2)**0.5)\n",
        "test": "assert ",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    sum1 = 0\n    sum2 = 0\n    for i in range(1,n):\n        if n % i == 0: \n            sum1 = sum1 + i\n        \n    for j in range(1,n):\n        if sum1 % j == 0: \n            sum2 = sum2 + j\n        \n    if sum1 == sum2:\n        return True\n    else:\n        return False\n        \n",
        "test": "assert     div_sum(30) == False",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    chars_lower_case=list(\"abcdefghijklmnopqrstuvwxyz\")\n    chars_upper_case=list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    for i in range(len(str1)):\n        if str1[i].lower() in chars_lower_case:\n            count+=1\n        elif str1[i].lower() in chars_upper_case:\n            count+=1\n    return count\n",
        "test": "assert     count_char_position('') == 0",
        "num_ids": 3187,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for num in A:\n        if num & 1 == 0:\n            even_pairs += 1\n    return even_pairs // 2\n",
        "test": "assert     find_even_pair([]) == 0, \"Fails empty array\"",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while 1 << i <= n: \n        i += 1\n    return 1 << i\n",
        "test": "assert     (next_power_of_2(127) == 128)",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # find the number of occurrences of x in list a\n    count = 0\n    for i in a:\n        if x == i:\n            count += 1\n    return count\n",
        "test": "assert     frequency([1,2,3,4,5,2,2,3], 2) == 3, 'Check the inputs and outputs.'",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    summ = 0\n    for i in list1[m:n+1]:\n        summ = summ + i\n    return summ\n    #print(list1[m:n+1])\n    #return sum(list1[m:n+1])\n",
        "test": "assert     sum_range_list([1, 3, 5], 0, 2) == 9, 'incorrect'",
        "num_ids": 3230,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "test": "assert     perimeter_pentagon(4) == 20, \"Length of a pentagon is 4\"",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('std') == 1, \"ERROR\"",
        "num_ids": 2809,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    l = []\n    for i in test_tuple:\n        l.append(type(i))\n    if len(set(l)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_type(('a', 2, 4.5)) == False,'should be False'",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return x == arr[0] or arr[1]\n    count = 1\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            break\n    return count <= 0\n",
        "test": "assert     is_majority([1, 2, 2, 2, 3], 5, 2) == True",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for i in range(len(str)):\n        if i%2 == 0:\n            lst.append(str[i])\n    return ''.join(lst)\n",
        "test": "assert     odd_values_string('abcde') == 'ace', \"wrong result for test1\"",
        "num_ids": 987,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     (min_of_three(5, 3, 2) == 2)",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if(i & n!= 0):\n            return False\n    return True\n    \n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(10,3,6) == False, \"all_Bits_Set_In_The_Given_Range(10,3,6) failed\"",
        "num_ids": 5005,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i, j = 0, 0\n    while j < n:\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n    return arr\n",
        "test": "assert     re_arrange_array([-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1558,
        "indeed": true
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert     replace_blank('salam alek','') =='salamalek', 'Check the second example'",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(max(list1))\n        list1.remove(max(list1))\n    return result\n",
        "test": "assert     larg_nnum([5, 3, 4, 2, 1, 9], 1) == [9]",
        "num_ids": 1226,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2)*h\n",
        "test": "assert     lateralsuface_cylinder(1,2) == 4 * math.pi * (1 ** 2)",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert     volume_cube(3) == 27, \"This should be a cube, but it is not\"",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Store the even bits of the number in the first 32 bits \n    # of an integer variable. \n    num = 0\n    for i in range(32): \n        if n & (1 << i)!= 0: \n            num += (1 << i) \n    \n    # set all even bits of the variable \n    return num\n",
        "test": "assert     even_bit_set_number(0) == 0x0",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_tup = Counter(test_list)\n    return count_tup\n",
        "test": "assert     check_occurences([(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (0, 30)]),     {(0, 1): 1, (0, 2): 1, (0, 3): 1, (0, 4): 1, (0, 5): 1, (0, 6): 1, (0, 7): 1, (0, 8): 1, (0, 9): 1, (0, 10): 1, (0, 11): 1, (0, 12): 1, (0, 13): 1, (0, 14): 1, (0, 15): 1, (0, 16): 1, (0, 17): 1, (0, 18): 1, (0, 19): 1, (0, 20): 1, (0, 21): 1, (0, 22): 1, (0, 23): 1, (0, 24): 1, (0, 25): 1, (0, 26): 1, (0, 27): 1, (0, 28): 1, (0, 29): 1, (0, 30): 1}",
        "num_ids": 2203,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num_of_substrings = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                num_of_substrings += 1\n    return num_of_substrings\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return m\n    elif n>1:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n",
        "test": "assert     get_total_number_of_sequences(1,1) == 1, \"check your solution for get_total_number_of_sequences\"",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return []\n    elif len(list1)!= 0 and len(list2) == 0:\n        return list1\n    else:\n        list1[-1] = list2\n        return list1\n",
        "test": "assert     replace_list([1,2,3,4], []) == [1,2,3,4], 'incorrect'",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count+=1\n    return count\n",
        "test": "assert count_charac('world') == 5",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N \n    # here x is the first perfect square greater than N\n    Sqrt = int(math.sqrt(x)) \n    # we find the square root of x, and use it to calculate the next perfect square\n    \n    for i in range(Sqrt, 2, -1):  \n        # here, we are finding the next perfect square greater than N, by first finding the square root of N and then finding the upper bound of the next perfect square.\n        #  we have taken i as the upper bound, so that the next perfect square will be greater than i*i.\n        if (i * i <= x): \n            # this condition checks whether the next perfect square is greater than the square root of N.\n            x = x - i * i \n            # if it is, then we can update our value of x\n            # by decrementing it by i*i, as we are decrementing the upper bound, so the next perfect square greater than N will be less than it.\n        else: \n            # if the next perfect square is greater than the square root of N, then we set x to the square root of N.\n            x = Sqrt * Sqrt \n            # we have updated the value of x, and now it is the next perfect square greater than N.\n            break\n    x += 1\n    # here we have updated x, so the next perfect square greater than N is x.\n    print(\"Next Perfect Square of {} is {}\".format(N, x)) \n    return x ",
        "test": "assert     next_Perfect_Square(0) == 1",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #Approach 1: Brute force\n    #Time Complexity: O(n^2)\n    #Space Complexity: O(1)\n    max_sum = float(\"-inf\")\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            current_sum = 0\n            for k in range(i, j):\n                current_sum += arr[k]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "test": "assert     max_sum([4, 3, 2, 1, 0])     ==     10",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number+1)//2\n    while x!= y:\n        x = (x + y) // 2\n        y = (x + y) // 2\n    return x\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n    return L[0][n-1] \ndef print_lps(str): \n    l = lps(str) \n    #print(l)\n    i = 0\n    j = l-1\n    while(j>=0): \n        if str[i]!= str[j]: \n            break\n        print(str[i], end=\"\") \n        i += 1\n        j -= 1\n    print()\n    return\n    \ndef find_shortest_unique_subsequence(arr, n): \n    '''\n    https://www.geeksforgeeks.org/find-shortest-unique-subsequence-string/\n    arr = \"ABCBABBA\"\n    n = len(arr)\n    '''\n    S = set()\n    i = 0\n    j = 0\n    \n    while(i<n and j<n): \n        if arr[i] not in S: \n            S.add(arr[i]) \n            i += 1\n        elif arr[j] not in S: \n            S.add(arr[j]) \n            j += 1\n        else: \n            S.remove(arr[i]) \n            i += 1\n            j += 1\n    return i\n    \ndef print_subsequence(arr, l): \n    '''\n    Given a sequence, find the shortest unique subsequence of that sequence.\n    '''\n    l = lps(arr) \n    print_lps(arr)\n    print(l)\n    print(\"Shortest Unique Subsequence: \")\n    i = 0\n    j = l-1\n    while(j>=0): \n        if arr[i]!= arr[j]: \n            break\n        print(arr[i], end=\"\") \n        i += 1\n        j -= 1\n    print()\n    return\n",
        "test": "assert     lps(\"abdac\") == 3",
        "num_ids": 1174,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n",
        "test": "assert     harmonic_sum(1) == 1, 'input = 1, output should be 1.'",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [i for i in array_nums1 if i in array_nums2]\n",
        "test": "assert     [] == intersection_array([1, 2], [])",
        "num_ids": 1076,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "test": "assert     count_X((1,2,3,2,3,3,4), 3) == 3",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #new_list = []\n    #for index in range(len(list)):\n        #new_list.append(element)\n        #new_list.append(list[index])\n    #return new_list\n    return [element] + list\n",
        "test": "assert     insert_element([1,2,3],0) == [0,1,2,3], \"Failed\"",
        "num_ids": 3087,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = numbers\n    r = cmath.polar(a)[0]\n    phi = cmath.polar(a)[1]\n    print('r = ', r, '\\nphi = ', phi)\n    return r, phi\n",
        "test": "assert     convert(complex(1, 2))     == (2.23606797749979, 1.1071487177940904)",
        "num_ids": 3440,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count\n",
        "test": "assert     count_integer([]) == 0",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in range(len(l)+1):\n        for comb in combinations_with_replacement(l, i):\n            if len(comb) == n:\n                res.append(comb)\n    return res\n",
        "test": "assert     combinations_colors([1,2,3,4],2) == [(1,1),(1,2),(1,3),(1,4),(2,2),(2,3),(2,4),(3,3),(3,4),(4,4)]",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime = [2]\n    for i in range(3, n + 1, 2):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            prime.append(i)\n    return len(prime)\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # print(a,b)\n    return(b,a)\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        if i > j:\n            max_tup += (i, )\n        else:\n            max_tup += (j, )\n    return max_tup\n",
        "test": "assert     maximize_elements((1, 2, 3), (1, 5, 4)) == (1, 5, 4), 'failed'",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def nth_prime_newman_williams(n):\n        if n == 1:\n            return 2\n        elif n == 2:\n            return 3\n        else:\n            p = 1\n            x = p * 2\n            while p < n:\n                x = x + 1\n                if Miller_Rabin(x) == True:\n                    p += 1\n            return x\n    return nth_prime_newman_williams(n)\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x / y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     division_elements((2, 4), (2, 2)) == (1, 2)",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n",
        "test": "assert     split_two_parts([1,2,3,4,5,6,7], 3) == ([1,2,3], [4,5,6,7])",
        "num_ids": 1800,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    h_age_integer = int(h_age)\n    if h_age_integer <= 0:\n        return 'Invalid value for the age.'\n    \n    # years = 10.5*(10.5 - dog_age)\n    years = (h_age - 2)/4\n    years = int(years)\n    return years\n",
        "test": "assert     dog_age(3) ==     0",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n",
        "test": "assert     list_split([1, 2, 3, 4, 5], 1) == [[1], [2], [3], [4], [5]]",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    #side is the side length of the cube\n    side = l\n    #calculate lateral surface area by multiplying side length with 6\n    lateral_surface_area = 6 * side ** 2\n    return lateral_surface_area\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def sum_Squares(n):\n        return sum([i**2 for i in range(1,n+1)])\n    return sum_Squares(n)\n",
        "test": "assert     square_Sum(1) == 1",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 0 \n    for i in range(n):\n        result += (3 * i) + 1\n    return result\n",
        "test": "assert     find_star_num(1) ==    1",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    arr1 = []\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            arr1.append(arr[i])\n    print(arr1)\n    return sum(arr1)\n",
        "test": "assert     sum_even_and_even_index([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1297,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += (i**5)\n    return sum\n",
        "test": "assert     even_Power_Sum(0)     == 0,         \"Expected even_Power_Sum(0) to be 0\"",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for each_tuple in test_list:\n        result.append(each_tuple[-1])\n    return result\n",
        "test": "assert     rear_extract([(2,3),(2,3),(2,3)]) == [3, 3, 3], 'incorrect'",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert     substract_elements(    (1, 2, 3, 4), (1, 2, 3, 4)    ) == (0, 0, 0, 0), 'Error'",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(0,i+1):\n            if ((i+j)%2 == 0):\n                sum += int( math.factorial(i)/(math.factorial(j)*math.factorial(i-j)))\n    return sum\n        \ndef odd_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1,n):\n        for j in range(0,i+1):\n            if ((i+j)%2!= 0):\n                sum += int( math.factorial(i)/(math.factorial(j)*math.factorial(i-j)))\n    return sum\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 1100,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14159\n    volume=pi*(r**2)*h\n    return volume\n",
        "test": "assert ",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered[key] = value\n    return filtered\n",
        "test": "assert     dict_filter({'a':3,'b':2,'c':7},7) == {'c':7}",
        "num_ids": 918,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    temp = test_tup[0]\n    count = 0\n    for i in test_tup[1:]:\n        if i == temp:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements((1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3)) == 4, 'incorrect'",
        "num_ids": 3149,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)//2\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    dlist_size = len(dlist)\n    for index in range(dlist_size):\n        if dlist[index] == item:\n            return (True, index)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1,2,3,4,5], 1) == (True, 0)",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # start writing your code here\n    return len(test_list) == len(set(test_list))\n    \ndef main():\n    print(\"### check for unique ###\")\n    test_list = [1,3,5,4,1]\n    print(all_unique(test_list))\n    test_list = [1,3,5,4,4]\n    print(all_unique(test_list))\n    test_list = [1,3,5,4,2]\n    print(all_unique(test_list))\n    test_list = [1,3,5,4]\n    print(all_unique(test_list))\n    test_list = [1,3,5,2]\n    print(all_unique(test_list))\n    test_list = []\n    print(all_unique(test_list))\n",
        "test": "assert     all_unique([1, 2, 3, 4]) == True",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n",
        "test": "assert sub_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]",
        "num_ids": 2735,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for x in str(n):\n        if int(x) > int(n):\n            return False\n    return True\n",
        "test": "assert     validate(12345) == True",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([x==element for x in list])\n",
        "test": "assert     check_element([1,1,1,1],0) == False",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.{2}b|a.{3}b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('text') == False",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    max_sum = 0\n    for i in range(0, n):\n        sum = 0\n        for j in range(i, i+k):\n            if j >= n:\n                break\n            sum += a[j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 2) == 9, \"array: [1, 2, 3, 4, 5], k: 2\"",
        "num_ids": 3443,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i*i for i in range(2,n+1,2)])\n",
        "test": "assert     square_Sum(1) == 0",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "test": "assert     max_length([[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 2",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a table to store results of subproblems \n    count = [0 for i in range(n + 1)] \n    count[0] = 1\n    count[1] = 1\n    for i in range(2, n + 1): \n        count[i] = (count[i - 1] + count[i - 2]) % (10**9 + 7)\n    return count[n]\n",
        "test": "assert     count_no_of_ways(1, 2) == 1",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q=n//m\n    return q\n",
        "test": "assert     find(1, 1) == 1, 'incorrect'",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #return 2*(w**2+h**2)**0.5\n    return (w**2+h**2)**0.5\n",
        "test": "assert     otherside_rightangle(3,4) == 5",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if isinstance(i, int):\n            if max_val == None:\n                max_val = i\n            elif i > max_val:\n                max_val = i\n    return max_val\n",
        "test": "assert     max_val([5,3,1,9]) == 9",
        "num_ids": 1012,
        "indeed": true
    },
    {
        "number": 295,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 0:\n        return False\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        sum = 1\n        for i in range(2, number):\n            if number % i == 0:\n                sum = sum + i\n        return sum\n",
        "test": "assert     sum_div(1)     == 1",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversion_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] > arr[j]):\n                inversion_count += 1\n    return inversion_count\n",
        "test": "assert     get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1474,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    l = []\n    for e in list1:\n        if type(e) == list:\n            l += flatten_list(e)\n        else:\n            l.append(e)\n    return l\n",
        "test": "assert     flatten_list([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6], \"Test case 1 failed\"",
        "num_ids": 1288,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxagg = (0,[])\n    for i in range(len(stdata)):\n        if(stdata[i][1]>maxagg[0]):\n            maxagg = stdata[i]\n    return maxagg\n",
        "test": "assert     max_aggregate([(1, 2), (1, 3), (1, 4), (2, 2), (2, 3), (2, 4)]) == (2, 4)",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    bin_str = bin(n)[2:]\n    bits_1 = bin_str[:n]\n    bits_2 = bin_str[-n:]\n    return sum([int(x) for x in bits_1]) == sum([int(x) for x in bits_2])\n",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 1203,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return max(dict_depth(d[k]) for k in d) + 1\n",
        "test": "assert     dict_depth({1: {2: {3: 4}}}) == 3",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index < len(arr)):\n        return arr[index]\n    else:\n        return 0\n",
        "test": "assert     find_Element([ 1,2,3,4,5 ],5,3,1)==2, 'incorrect output'",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p=[]\n    for i in words:\n        if(i.startswith(\"p\")):\n            p.append(i)\n    return(p)\n",
        "test": "assert start_withp([\"python\", \"cobra\", \"apple\", \"pencil\"]) == [\"python\", \"pencil\"]",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return float('-inf')\n    if k == 1:\n        return sum(a)\n    # if n == k:\n    #     return a[k-1]\n    if index == n:\n        return float('-inf')\n",
        "test": "assert ",
        "num_ids": 1732,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:i + n] for i in range(0, len(tuplex), n))\n",
        "test": "assert     colon_tuplex((1,2,3,4), 2, 3) == (3,4), \"test 2 FAILED\"",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #Solution 1:\n    #Brute force\n    # res = []\n    # for i in range(N):\n    #     for j in range(N):\n    #         res.append(nums1[i]*nums2[j])\n    # res.sort()\n    # return res[-N:]\n    #This solution exceeds time limit\n    #Solution 2:\n    res = []\n    for i in range(N):\n        for j in range(N):\n            res.append(nums1[i]*nums2[j])\n    res.sort()\n    return res[-N:]\n",
        "test": "assert     large_product([5,6,2], [6,7,1], 2) == [36, 42]",
        "num_ids": 2410,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(5,10) == 10",
        "num_ids": 1274,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = []\n    for i in str1:\n        tuple1.append(i)\n    return tuple(tuple1)\n",
        "test": "assert     string_to_tuple(\"abcd\") == (\"a\",\"b\",\"c\",\"d\"), \"Error\"",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Check if the number is power of 2\n    i = 0\n    while (2**i <= n): \n        i += 1\n    if (n == 0): \n        return 1\n    if (i == 1): \n        return 2\n    else: \n        return 2**(i - 1) \n",
        "test": "assert     set_left_most_unset_bit(1) == 2",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*(r**2)*h/3\n    return volume\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area=math.pi*(r**2)+math.pi*r*h\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*(r**2)*h\n    return volume\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area=2*math.pi*r*(r+h)\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*(r**3)\n    return volume\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=4*math.pi*(r**2)\n    return area\ndef area_prism(base,height,top_face=True):\n    '''\n    Write a function to find the surface area of a prism.\n    If the top_face parameter is set to True, the surface area\n    will be that of the top face. If it is set to False, then\n    it will be the surface area of the base.\n    '''\n    if top_face==True:\n        return base*height\n    elif top_face==False:\n        return 2*base*height\n    else:\n        return 'Invalid parameter value.'\ndef volume_prism(base,height,top_face=True):\n    '''\n    Write a function to find the volume of a prism.\n    If the top_face parameter is set to True, the volume\n    will be that of the top face. If it is set to False, then\n    it will be the volume of the base.\n    '''\n    if top_face==True:\n        return base*height\n    elif top_face==False:\n        return base*height\n    else:\n        return 'Invalid parameter value.'\ndef area_rectangle(length,width,top_face=True):\n    '''\n    Write a function to find the surface area of a rectangle.\n    If the top_face parameter is set to True, the surface area\n    will be that of the top face. If it is set to False, then\n    it will be the surface area of the base.\n    '''\n    if top_face==True:\n        return 2*length*width\n    elif top_face==False:\n        return 2*length*width\n    else:\n        return 'Invalid parameter value.'\ndef volume_rectangle(length,width,top_face=True):\n    '''\n    Write a function to find the volume of a rectangle.\n    If the top_face parameter is set to True, the volume\n    will be that of the top face. If it is set to False, then\n    it will be the volume of the base.\n    '''\n    if top_face==True:\n        return length*width\n    elif top_face==False:\n        return length*width\n    else:\n        return 'Invalid parameter value.'\ndef volume_cube(side):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return side**3\ndef area_cube(side):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*side**2\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    return 1/3*math.pi*(r**3)\ndef area_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere.\n    '''\n    return 2*math.pi*r\ndef area_triangle(base,height):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return base*height/2\ndef volume_triangle(base,height):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return base*height/3\ndef volume_parallelepiped(length,width,height):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return length*width*height\ndef area_parallelepiped(length,width,height):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 2*length*width+2*length*height+2*width*height\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*math.pi*(a*b*c)\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4*math.pi*(a*b+a*c+b*c)\ndef volume_bivolume(r1,r2,h):\n    '''\n    Write a function to find the volume of a bivolume.\n    '''\n    return math.pi*(r1**2+r2**2)*h/3\ndef area_bivolume(r1,r2,h):\n    '''\n    Write a function to find the surface area of a bivolume.\n    '''\n    return 2*math.pi*(r1+r2)*h\ndef area_kite(side1,side2):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return 2*side1*side2\ndef volume_kite(side1,side2):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    return 1/2*side1*side2\ndef area_dodecagon(side):\n    '''\n    Write a function to find the surface area of a dodecagon.\n    '''\n    return 12*side**2\ndef volume_dodecagon(side):\n    '''\n    Write a function to find the volume of a dodecagon.\n    '''\n    return 1/3*math.sqrt(5)*side**3\ndef area_france(radius,height):\n    '''\n    Write a function to find the surface area of a france.\n    '''\n    return math.pi*radius**2+math.pi*radius*height\ndef volume_france(radius,height):\n    '''\n    Write a function to find the volume of a france.\n    '''\n    return radius**2*height\ndef volume_pyramid(side,top_face=True):\n    '''\n    Write a function to find the volume of a pyramid.\n    If the top_face parameter is set to True, the volume\n    will be that of the top face. If it is set to False, then\n    it will be the volume of the base.\n    '''\n    if top_face==True:\n        return 1/3*math.sqrt(2)*side**3\n    elif top_face==False:\n        return 1/3*side**3\n    else:\n        return 'Invalid parameter value.'\ndef area_pyramid(side,top_face=True):\n    '''\n    Write a function to find the surface area of a pyramid.\n    If the top_face parameter is set to True, the surface area\n    will be that of the top face. If it is set to False, then\n    it will be the surface area of the base.\n    '''\n    if top_face==True:\n        return 3*side**2+math.sqrt(2)*side**2\n    elif top_face==False:\n        return 3*side**2\n    else:\n        return 'Invalid parameter value.'\ndef volume_scaled_cube(side):\n    '''\n    Write a function to find the volume of a scaled cube.\n    '''\n    return side**3\ndef area_scaled_cube(side):\n    '''\n    Write a function to find the surface area of a scaled cube.\n    '''\n",
        "test": "assert     volume_cone(3,0)==0",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while(i < n): \n        i = i << 1\n    return i >> 1\n",
        "test": "assert     highest_Power_of_2(10) == 8, \"Wrong answer\"",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n        \n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 558,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    i = 0\n    while i < len(list_):\n        list_[i] = string.format(list_[i])\n        i += 1\n    return list_\n",
        "test": "assert     add_string(['hello', 'goodbye', 'hello'], '%s, %s!') == ['hello, goodbye!', 'hello, goodbye!', 'hello, goodbye!']",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}\n    return dic\n",
        "test": "assert convert_list_dictionary([], [], []) == {}, \"Incorrect return value\"",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    try:\n        n = int(n)\n    except:\n        raise ValueError(\"No\")\n    if n == 0:\n        return 0\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "test": "assert     get_max_sum(1) == 1, \"Test failed: get_max_sum(1) = {}\".format(get_max_sum(1))",
        "num_ids": 1304,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return []\n    return [x for x in input_list if len(x) == max(map(len, input_list))]\n",
        "test": "assert     max_length_list(['abcd', 'efghi', 'jklmno']) == ['jklmno'], \"incorrect output\"",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = []\n    for i in test_tup:\n        if i in unique_tup:\n            return False\n        else:\n            unique_tup.append(i)\n    return True\n",
        "test": "assert     check_distinct((1, 2, 3, 4, 5)) == True, 'wrong result'",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    list1=[]\n    for i in str1:\n        if i not in list1:\n            list1.append(i)\n        else:\n            pass\n    for i in list1:\n        if list1.count(i)==1:\n            return i\n    return 'There is no non-repeated character in the given string.'\nprint('First non-repeated character in the given string is:',first_non_repeating_character('GEEKSFORGEEKS'))\nprint('First non-repeated character in the given string is:',first_non_repeating_character('ABBBBCD'))\nprint('First non-repeated character in the given string is:',first_non_repeating_character('ABBBBCD'))\n",
        "test": "assert     first_non_repeating_character('first non repeating character') == 'f'",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)>1 and string[0] == string[-1]:\n        return True\n    else:\n        return False\ndef check_string(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.strip()[0] == string.strip()[-1]:\n        return True\n    else:\n        return False\ndef start_and_end(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) > 1 and string[0] == string[-1]:\n        return True\n    else:\n        return False\ndef starts_and_ends(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) > 1 and string.strip()[0] == string.strip()[-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('aba')",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif a > c:\n        return a\n    elif b > c:\n        return c\n    else:\n        return b\n",
        "test": "assert     median_numbers(2,1,3) == 2",
        "num_ids": 3212,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    \n    \nif __name__ == '__main__':\n    print(bitwise_xor((1, 0, 1, 1), (1, 1, 0, 1)))\n    print(bitwise_xor((0, 0, 0, 1), (1, 1, 0, 1)))\n    ",
        "test": "assert     bitwise_xor((1, 2, 3, 4), (1, 2, 3, 4)) == (0, 0, 0, 0)",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3), (4, 5, 6)]\n    #return 3\n    print('The list is :'+ str(test_list))\n    print('The number of unique tuples is :'+ str(len(set(test_list))))\n    return len(set(test_list))\n    #return len(set(test_list))\n",
        "test": "assert     extract_freq([(1, 1, 1), (1, 2, 3), (1, 2, 3)]) == 2, \"test failed\"",
        "num_ids": 3129,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([i + j for i, j in zip(test_tup1, test_tup2)])\n",
        "test": "assert     add_nested_tuples(('apple', 'banana', 'orange'), ('google','microsoft', 'facebook')) == ('apple', 'banana', 'orange', 'google','microsoft', 'facebook'), \"Wrong Answer\"",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a if a<b else b\n    return min\n",
        "test": "assert     minimum(1,2)!= 2, \"Wrong minimum\"",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    count = 0\n    for item in tuple1:\n        if item in tuplex:\n            count += 1\n    if count >= 1:\n        return True\n    else:\n        return False\n",
        "test": "assert not check_tuplex([1,2,3],(4,5,6))",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2!= 0): \n        return 1\n    else: \n        return 0\n",
        "test": "assert     find_Parity(0) == False, \"Wrong output for 0\"",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = [int(x) for x in str(n)]\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[j], arr[i - 1] = arr[i - 1], arr[j]\n    arr[i:] = arr[len(arr) - 1:i - 1: -1]\n    return int(''.join(str(x) for x in arr))\n",
        "test": "assert     rearrange_bigger(12) == 21",
        "num_ids": 1534,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1, nums2 = sorted(nums1), sorted(nums2)\n    output = []\n    heap = [(nums1[i] + nums2[0], i, 0) for i in range(len(nums1))]\n    heapq.heapify(heap)\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        output.append([nums1[i], nums2[j]])\n        if j < len(nums2) - 1:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n    return output\n",
        "test": "assert     (k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1],[1, 1]])",
        "num_ids": 2849,
        "indeed": true
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append(min(list1[i][0]*list1[i][1],list1[j][0]*list1[j][1]))\n    return min(result)\n",
        "test": "assert     min_product_tuple([(1, 2), (3, 4)]) == 2, 'incorrect'",
        "num_ids": 1707,
        "indeed": true
    },
    {
        "number": 410,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'empty list'\n    minimum = listval[0]\n    for i in range(1, len(listval)):\n        if minimum > listval[i]:\n            minimum = listval[i]\n    return minimum\n",
        "test": "assert     (min_val([0, 10, 20, 40]) == 0), 'incorrect'",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "test": "assert     snake_to_camel('snake_case') == 'SnakeCase'",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i % 2 == 0:\n            new_l.append(i)\n    return new_l\n",
        "test": "assert     remove_odd([1, 3, 5, 7, 9]) == [], \"remove_odd\"",
        "num_ids": 971,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([(1,2),(3,4),(5,6)], 0) == (1,2)",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n",
        "test": "assert     overlapping([1,2,3], [4,5,6]) == False",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_prod:\n                max_prod = arr[i]*arr[j]\n    return max_prod\n",
        "test": "assert     max_Product([4, -2, 3, 5, 1]) == 20",
        "num_ids": 1461,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code here\n    temp=[]\n    for i in Input:\n        temp.append(i[0])\n    #print (temp)\n    return(max(set(temp), key = temp.count))\n",
        "test": "assert     group_tuples([('apple', 'cherry'), ('apple', 'cherry'), ('banana', 'cherry')]) == 'apple'",
        "num_ids": 1456,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n",
        "test": "assert     Find_Max([[], [1], [1, 2, 3], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        if i < 0:\n            i *= -1\n            i = round(i)\n            i *= -1\n        else:\n            i = round(i)\n        sum += i\n    print(sum*len(list1))\n    return sum\n",
        "test": "assert     round_and_sum([1,2,3]) ==     6",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(2,n+1,2)])\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for i in test_tup:\n        res += str(i) + ','\n    return res[0:-1]\n",
        "test": "assert     concatenate_tuple(('hello',)) == 'hello'",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return n**3\n",
        "test": "assert     find_Average_Of_Cube(1)     == 1",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear((('a', 'b', 'c'), ('d', 'e', 'f'))) == ('d', 'e', 'f')",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count = count + 1\n    return count\n    \ndef sum_of_elements_in_list(list1):\n    '''\n    Write a function that computes the sum of the elements in a list.\n    '''\n    sum_of_list = 0\n    for element in list1:\n        sum_of_list = sum_of_list + element\n    return sum_of_list\n    \ndef calculate_midpoint(list1):\n    '''\n    Write a function that calculates the midpoint of a list.\n    '''\n    midpoint = len(list1) / 2\n    midpoint = int(midpoint)\n    return midpoint\n    \ndef calculate_min(list1):\n    '''\n    Write a function that calculates the minimum value in a list.\n    '''\n    return min(list1)\n",
        "test": "assert     count_element_in_list([[1, 2, 3], [1, 4], [1, 4, 2, 1]], 1) == 3",
        "num_ids": 1170,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    split_string = dt.split(\"-\")\n    dd = split_string[2]\n    mm = split_string[1]\n    yyyy = split_string[0]\n    dd = str(dd).zfill(2)\n    mm = str(mm).zfill(2)\n    yyyy = str(yyyy)\n    new_date = \"-\".join([dd,mm,yyyy])\n    return new_date\n    \ndef test_change_date_format():\n    print(\"\\nTESTING CHANGE DATE FORMAT...\")\n    date = \"2019-03-19\"\n    new_date = change_date_format(date)\n    if new_date == \"19-03-2019\":\n        print(\"PASSED\")\n    else:\n        print(\"FAILED\")\n        \ntest_change_date_format()\n",
        "test": "assert     change_date_format('2019-02-03') == '03-02-2019'",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Your code here\n    \n    #we first start from the first element and ignore the second last element as the previous insertion sort can already\n    #ensure that the elements are in sorted order before starting to sort the last element\n    n = len(my_list)\n    #we assume we know that the length of the list is at least 2\n    gap = n // 2\n    #to ensure we don't go out of bounds for the loop\n    gap = 1 if gap < 1 else gap\n    #we then start to increase the gap between each of the elements to allow for the insertion sort to sort\n    #larger elements faster\n    while gap > 0:\n        #for every element we're going to shift right, we start to shift left by the gap and do the same\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            #we move left until we hit a number that is greater than the current element\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            #once we hit the correct index, we place the element\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n    \n",
        "test": "assert     shell_sort([1,5,8,4,7,6,9,2,3]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'Shell Sort fail'",
        "num_ids": 1648,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Write your code here.\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))\n",
        "test": "assert     and_tuples((0,1),(0,0)) == (0,0), 'Wrong output'",
        "num_ids": 1131,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    # compute the discriminant\n    disc = b * b - 4 * a * c\n    if disc < 0:\n        return \"No real roots\"\n    else:\n        # compute the two roots\n        root_disc = math.sqrt(disc)\n        root1 = (-b + root_disc) / (2 * a)\n        root2 = (-b - root_disc) / (2 * a)\n        # return the roots\n        return root1, root2\n",
        "test": "assert ",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list2, list1 = list1, list2\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert     common_element(['a', 'b'], []) == False, \"Wrong output for common_element\"",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1+base2/2\n",
        "test": "assert     median_trapezium(1, 2, 1) == 2",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr_len = len(arr)\n    for i in range(arr_len):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([1], 1) == False",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    exp = '.*[a]{1}[b]{1}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n    \ndef text_match_any(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    exp = '.*[a]{1}[b]{0,}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by zero or one c's.\n    '''\n    exp = '.*[a]{1}[b]{1}[c]{0,1}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by zero or one c's followed by one d.\n    '''\n    exp = '.*[a]{1}[b]{1}[c]{0,1}[d]{1}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_one('abc') == True, 'Incorrect'",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    return int(n[-1])\n",
        "test": "assert     last_Digit(1) == 1",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n",
        "test": "assert     neg_nos([1, 2, 3, 4, 5]) == []",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if i in \"abcdefghijklmnopqrstuvwxyz\":\n            result += i\n    return result\n",
        "test": "assert     remove_odd(\"\") == \"\", \"remove_odd('abcdefg')\"",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert     count_bidirectional([('A', 'B'), ('B', 'C'), ('A', 'D')]) == 0",
        "num_ids": 3355,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L_string = ''\n    for number in L:\n        L_string = L_string + str(number)\n    return int(L_string)\n",
        "test": "assert     multiple_to_single([0])     == 0, 'Error'",
        "num_ids": 883,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #sentence = \"I was eating them all and there was nothing wrong with them, until I ate one that was too big, and his teeth came through it, and it was gone. My mother told me that it was the big one, but I was wrong. They were all good, except for the one that was too big. The biggest is gone now and I want to know where it was. They say it went down my throat, but I was off by one, and I'm not sure how to even count those. The others went away and I'm sad and you're sad because I'm mad. I guess it was on the other side of the mouth. I was being extra careful, but my mom told me to go away, so I'm just leaving them now. I'm just not having the same meal, but I'll be okay. I'm going to go now, and then I can eat them all again. I'm not going to have a fight with them because I don't know what's wrong with them. They're all good, and I'm eating them all again. It's good, so I'm eating them again. I just didn't know. I'm happy that I'm having the big one again. I don't know if I'm happy, because I'm not sure what's wrong with them. I just think they're all good. It's good, so I'm eating them again. I just don't know what's wrong with them. I just don't know.\"\n",
        "test": "assert     find_adverb_position(text2) == ('recently', 0)",
        "num_ids": 2220,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    return 6 * (l ** 2)\n",
        "test": "assert     surfacearea_cube(0) == 0",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #check if length of list is 0\n    if len(nums) == 0:\n        return None\n    #assign initial counters\n    pos_count = 0\n    neg_count = 0\n    #for each value in list\n    for num in nums:\n        #check if value is positive\n        if num > 0:\n            pos_count += 1\n        #check if value is negative\n        elif num < 0:\n            neg_count += 1\n    #return ratio of positive to negative values\n    return pos_count / neg_count\n",
        "test": "assert     positive_count([-1, 2, 3, 4, 5]) == 4, \"Wrong result!\"",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) < 1:\n        return \"empty list\"\n    max = 0\n    for i in list1:\n        if i < max:\n            max = i\n    return max\n",
        "test": "assert     largest_neg([1, 2, 3, 4, 5, -5]) == -5",
        "num_ids": 1775,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for element in test_list:\n        while len(element) > K:\n            element = element[:K]\n    return test_list\n",
        "test": "assert     trim_tuple([('Mike', 'F', 30.5), ('Peter', 'M', 37)], 3) == [('Mike', 'F', 30.5), ('Peter', 'M', 37)]",
        "num_ids": 1204,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += ((test_tup1[i] * test_tup2[i]),)\n    return test_tup3\n",
        "test": "assert     index_multiplication((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 4, 9, 16)",
        "num_ids": 1301,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) \n",
        "test": "assert     count_Occurrence((1,2,3,4), [1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 5301,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "test": "assert     cube_nums([1,2,3,4,5,6,7]) == [1, 8, 27, 64, 125, 216, 343], 'incorrect'",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (3 * n - 1) / 2\n",
        "test": "assert     cal_sum(0) == 0",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) < l:\n        return str\n    return str[:l]\n",
        "test": "assert     extract_string(['a','b','c','d'], 0) == []",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n",
        "test": "assert     remove_whitespaces(\" abc \") == \"abc\"",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(110,110)     == 0",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if (n%i == 0) :\n            if (i%2 == 0):\n                sum += i\n    return sum\n",
        "test": "assert     sumofFactors(0) == 0,'sumofFactors is not defined for n = 0'",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z', text):\n        return True\n",
        "test": "assert     text_match_wordz('') == None, '''Your function should return None for the empty string.'''",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return 1\n    elif monthnum2 == 3:\n        return 3\n    elif monthnum2 == 4:\n        return 4\n    elif monthnum2 == 5:\n        return 5\n    elif monthnum2 == 6:\n        return 6\n    elif monthnum2 == 7:\n        return 7\n    elif monthnum2 == 8:\n        return 8\n    elif monthnum2 == 9:\n        return 9\n    elif monthnum2 == 10:\n        return 10\n    elif monthnum2 == 11:\n        return 11\n    elif monthnum2 == 12:\n        return 12\n    else:\n        return None\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Iterate through string list\n    for index, string in enumerate(stringlist):\n        # Grab index of current item in string list\n        current_index = index\n        # Iterate backwards through string list\n        for i in range(current_index):\n            # Swap current index with the previous index\n            stringlist[index], stringlist[index - 1] = stringlist[index - 1], stringlist[index]\n            # Set current index to previous index\n            index -= 1\n    # Return list with strings reversed\n    return stringlist\n",
        "test": "assert     reverse_string_list([\"hello\",\"world\"]) == [\"world\",\"hello\"]",
        "num_ids": 1828,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst: \n        return 0\n    if len(lst) == 1: \n        return 1\n    min_length = len(lst[0])\n    min_list = lst[0]\n    for x in lst: \n        if len(x) < min_length: \n            min_length = len(x)\n            min_list = x\n    return min_list\n",
        "test": "assert Find_Min([\"x\", \"y\", \"z\"]) == \"x\", \"Wrong answer\"",
        "num_ids": 1346,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert     rectangle_area(4,2) == 8, \"rectangle_area(4,2) == 8\"",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str1)):\n        if not str1[i].isupper():\n            new_string += str1[i]\n    return new_string\nprint(remove_uppercase(\"HaReGAiO\"))\nprint(remove_uppercase(\"HAlO\"))\nprint(remove_uppercase(\"HELLO\"))\nprint(remove_uppercase(\"H\"))\nprint(remove_uppercase(\"HALE\"))\nprint(remove_uppercase(\"HALLE\"))\nprint(remove_uppercase(\"HALEI\"))\nprint(remove_uppercase(\"HALE\"))\nprint(remove_uppercase(\"HALEI\"))\nprint(remove_uppercase(\"HALEI\"))\nprint(remove_uppercase(\"HALI\"))\nprint(remove_uppercase(\"HALI\"))\n",
        "test": "assert     remove_uppercase(\"ab\") == \"ab\"",
        "num_ids": 1107,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "test": "assert     Extract([[1, 2], [3, 4], [5, 6, 7]]) ",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    num = 0\n    for i in str:\n        if i.isupper():\n            num += 1\n    return num\n",
        "test": "assert     upper_ctr('') == 0, \"Empty string\"",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combination_list=[]\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            combination_list.append([list1[i],list1[j]])\n    return combination_list\n",
        "test": "assert     combinations_list([1, 2, 3]) == [[1, 2], [1, 3], [2, 3]]",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    local_max_ending_here = 1\n    global_max_ending_here = 1\n    local_min_ending_here = 1\n    global_min_ending_here = 1\n    for elem in arr:\n        local_max_ending_here = max(elem, local_max_ending_here * elem)\n        global_max_ending_here = max(local_max_ending_here, global_max_ending_here)\n        local_min_ending_here = min(elem, local_min_ending_here * elem)\n        global_min_ending_here = min(local_min_ending_here, global_min_ending_here)\n    return global_max_ending_here\n",
        "test": "assert     max_subarray_product([1, 2, 3, -4]) == 6",
        "num_ids": 3238,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    l = len(set(dict.values()))\n    if n == 1:\n        if l > 1:\n            print(\"Values are not same\")\n            return 0\n        else:\n            print(\"Values are same\")\n            return 1\n    else:\n        temp = set()\n        for i in dict.values():\n            temp.add(i)\n        if len(temp) == 1:\n            print(\"Values are same\")\n            return 1\n        else:\n            print(\"Values are not same\")\n            return 0\n",
        "test": "assert     check_value({1:1, 2:2, 3:1, 4:4, 5:5}, 5) == False",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value!=''}\n",
        "test": "assert     drop_empty({}) == {} ",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    max_product_so_far = arr[0]\n    for num in arr[1:]:\n        max_product_so_far = max(max_product_so_far * num, max_product_so_far * num, num)\n        max_product = max(max_product, max_product_so_far)\n    return max_product",
        "test": "assert     max_product([1,2,3,4,5]) == 120",
        "num_ids": 1642,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            sum_tup = sum_tup + (test_tup[i] + test_tup[i + 1],)\n        elif i == len(test_tup) - 1:\n            sum_tup = sum_tup + (test_tup[i] + test_tup[0],)\n    return sum_tup\n",
        "test": "assert     add_pairwise((1, 2, 3, 4)) == (1 + 2, 2 + 3, 3 + 4, 4 + 1)",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod * i % n\n    return prod\n",
        "test": "assert     (find_remainder([2, 6, 8, 9], 4) == 0)",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    s = sorted(l)\n    diff = s[1] - s[0]\n    for i in range(len(s)-1):\n        if s[i+1] - s[i] == diff:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4]) == True, 'ERROR: Wrong output for check_Consecutive([1, 2, 3, 4])'",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    unique = []\n    for element in test_list1:\n        if element in test_list2:\n            unique.append(element)\n    return unique\n",
        "test": "assert     tuple_intersection(['a', 'b', 'c'], ['b', 'd']) == ['b']",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str=str1.replace(ch,newch)\n    return new_str\n",
        "test": "assert     replace_char('hello','h','j') == 'jello','replace_char test case 1 failed'",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "test": "assert     sort_counter({'a': 3, 'b': 2, 'c': 1}) ==     [('a', 3), ('b', 2), ('c', 1)]",
        "num_ids": 1384,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "test": "assert     big_sum([1,0,0,1,0]) == 2",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if isinstance(string, str):\n        return string.lower()\n    else:\n        raise TypeError('please enter a string')\n",
        "test": "assert not is_lower(\"HELLO WORLD\") == \"hELLO wORLD\", \"Contain uppercase\"",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.split()\n    str3 = []\n    for i in range(len(str2)):\n        if str2[i].isupper():\n            str3.append(str2[i])\n    return \" \".join(str3)\n",
        "test": "assert     remove_lowercase('') == ''",
        "num_ids": 2828,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "test": "assert     first_Digit(0) == 0 ",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2!=0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     Split([1,2,3,4,5]) == [1,3,5], 'incorrect'",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_n = sum(i for i in range(1, n+1))\n    return abs(sum_of_n**2 - sum_of_cubes)\n    \ndef is_a_perfect_square(n) :\n    '''\n    Write a Python function which checks whether a number is a perfect square or not.\n    '''\n    x = n**0.5\n    return x == int(x)\n    \ndef is_perfect_square(n) :\n    '''\n    Write a Python function to check whether a number is a perfect square or not.\n    '''\n    x = n**0.5\n    return x*x == n\n    \ndef simple_interest(principle, rate, time) :\n    '''\n    Write a Python function to calculate the simple interest.\n    '''\n    return principle*rate*time/100\n    \ndef area_of_triangle(base, height) :\n    '''\n    Write a Python function to calculate the area of a triangle\n    '''\n    return 0.5*base*height\n    \ndef is_it_even(n) :\n    '''\n    Write a Python function to check whether a number is even or not.\n    '''\n    return n%2 == 0\n    \ndef find_in_list(lst, value):\n    '''\n    Write a Python function to check whether a given value is in a list or not.\n    '''\n    return value in lst\n",
        "test": "assert     difference(0) == 0",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if (A[i]^A[j]&1) == 1 : \n                count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair([1,1,2],3) == 2",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.lower() if x.isupper() else x.upper(), list(string)))\n",
        "test": "assert     toggle_string('1') == '1'",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 10 and n2 < 10:\n        return abs(n1 - n2)\n    elif n1 < 100 and n2 < 100:\n        n1_digit_1 = n1 % 10\n        n1_digit_2 = (n1 % 100) // 10\n        n2_digit_1 = n2 % 10\n        n2_digit_2 = (n2 % 100) // 10\n        return abs(n1_digit_1 - n2_digit_1) + abs(n1_digit_2 - n2_digit_2)\n    elif n1 < 1000 and n2 < 1000:\n        n1_digit_1 = n1 % 10\n        n1_digit_2 = (n1 % 100) // 10\n        n1_digit_3 = (n1 % 1000) // 100\n        n2_digit_1 = n2 % 10\n        n2_digit_2 = (n2 % 100) // 10\n        n2_digit_3 = (n2 % 1000) // 100\n        return abs(n1_digit_1 - n2_digit_1) + abs(n1_digit_2 - n2_digit_2) + abs(n1_digit_3 - n2_digit_3)\n    else:\n        print('The numbers cannot be more than 3 digits long.')\n",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 1440,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    curr_sum = max_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([1, 2, 3], 3) == 6",
        "num_ids": 1104,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
        "test": "assert     (sorted(union_elements((1,2,3), (4,5,6))) == [1,2,3,4,5,6]), 'incorrect'",
        "num_ids": 1557,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0 \n    for i in lst: \n        if type(i) is list: \n            if len(i) > max_len: \n                max_len = len(i) \n    return max_len \n",
        "test": "assert     Find_Max_Length([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1]]) == 4, \"Incorrect\"",
        "num_ids": 3378,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"[^\"]+\"|\\'[^\\']+\\'|\\S+', text)\n",
        "test": "assert     extract_values(\"It's raining cats and cats\")",
        "num_ids": 3093,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    s = set()\n    for i in arr:\n        s.add(i)\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i!= j and (j,i) not in s:\n                count += 1\n    return count",
        "test": "assert     count_Pairs([1,2,3],3) == 6",
        "num_ids": 2965,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return (n % 10) + sum_digits(int(n / 10))\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(issort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n",
        "test": "assert     not issort_list([1,2,4,3])",
        "num_ids": 830,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n",
        "test": "assert     empty_list(2) == [{}, {}], \"empty_list(2) does not return [{}, {}]\"",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n",
        "test": "assert ",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for x in nums:\n        if x not in new_list:\n            new_list.append(x)\n    return new_list\n",
        "test": "assert     two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"one\"",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for item in set(list_data):\n        result *= item\n    return result\n",
        "test": "assert unique_product([1, 1, 2, 2, 3, 3, 3, 4, 4]) == 24",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    \n",
        "test": "assert     surfacearea_cylinder(0,2) == 3.14*0**2 + 2*3.14*0*2",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    x=0\n    for i in range(0,len(A)):\n        if(A[i]==B[x]):\n            if(x==len(B)-1):\n                return True\n            x=x+1\n        else:\n            return False\n    return False\n",
        "test": "assert     is_Sub_Array([1,2,3,4,5],    [2,4,5,1,3]) == False",
        "num_ids": 1701,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact % 10\n    \ndef is_BST(root, left = None, right = None):\n    if root:\n        return is_BST(root.left, left, root) and is_BST(root.right, root, right)\n        if left and right:\n            return left.data < root.data < right.data\n        else:\n            return left.data < root.data < right.data\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for t in zip(list1,list2,list3) for item in t]\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(set(test_tup1) ^ set(test_tup2))\n",
        "test": "assert     find_dissimilar((1,2,3,4,5,6), (1,2,3,4,5,6)) == ()",
        "num_ids": 1750,
        "indeed": true
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = [i if even_fnc(i) else None for i in test_tuple]\n    return tuple(i for i in test_list if i)\n",
        "test": "assert     (even_ele(test_tuple, lambda x: x % 2!= 0)) == (1, 3, 5, 7, 9)",
        "num_ids": 3791,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * b) + (b * b * s)\n    \ndef volume_of_a_sphere(r):\n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    return (4/3) * 3.14 * (r ** 3)\n    \ndef volume_of_a_cube(a):\n    '''\n    Write a python function to find the volume of a cube with a given side.\n    '''\n    return a ** 3\n",
        "test": "assert     surface_Area(0,0) == 0, 'Error! The surface area of a pyramid with base edge 0 is 0.'",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    return True\n",
        "test": "assert     my_dict({}) ==     True, 'Test #1: Check if a empty dictionary is True'",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    result = [0]*(num+1)\n    result[0], result[1] = 1, 1\n    for i in range(2, num+1):\n        result[i] = 0\n        for j in range(i):\n            result[i] += result[j] * result[i-j-1]\n    return result[num]\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'(\\w+)ly')\n    match = pattern.finditer(text)\n    adverbs = [m.group() for m in match]\n    return adverbs\n",
        "test": "assert     find_adverbs('') == []",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,(-item[1],item[0]))\n        elif item[1] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(-item[1],item[0]))\n    return [item[1] for item in heap]\n",
        "test": "assert     expensive_items(items = [['a',100],['b',90],['c',80],['d',70]], n = 1) == ['d']",
        "num_ids": 1631,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "test": "assert     split_Arr([1, 2, 3, 4], 2) == [1, 2, 3, 4]",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     (1, 2) == list_tuple([1, 2])",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    big = nums[len(nums)-1]\n    small = nums[0]\n    diff = big - small\n    return diff\n    \ndef fizzbuzz(n):\n    '''\n    Write a python function to print fizz buzz if a number is divisible by 3 or 5 or both.\n    '''\n    if n % 3 == 0 and n % 5 == 0:\n        return 'fizzbuzz'\n    elif n % 3 == 0:\n        return 'fizz'\n    elif n % 5 == 0:\n        return 'buzz'\n    else:\n        return n\n    \ndef find_maximum(nums):\n    '''\n    Write a python function to return the maximum element of a given list of numbers.\n    '''\n    max = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n    return max\n    \ndef find_minimum(nums):\n    '''\n    Write a python function to return the minimum element of a given list of numbers.\n    '''\n    min = nums[0]\n    for i in nums:\n        if i < min:\n            min = i\n    return min\n    \ndef find_range(nums):\n    '''\n    Write a python function to return range of elements in a given list of numbers.\n    '''\n    return max(nums) - min(nums)\n    \ndef generate_random_num():\n    '''\n    Write a python function to generate and return a random number from the range 1 to 10.\n    '''\n    import random\n    return random.randint(1,10)\n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return s[::-1]\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if s == reverse_string(s):\n        return True\n    else:\n        return False\n        \ndef check_double_letters(s):\n    '''\n    Write a python function to check whether a given string contains double letters or not.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n    if count >= 2:\n        return True\n    else:\n        return False\n    \ndef sum_even_numbers(nums):\n    '''\n    Write a python function to sum all the even numbers in a given list of numbers.\n    '''\n    even_sum = 0\n    for i in nums:\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n < 0:\n        return 'Factorial does not exist for negative numbers'\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "test": "assert     big_diff([1,2,3,4,5]) == 4, \"Wrong Answer\"",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x for x in range(a,b+1) if x**0.5 == int(x**0.5)]\n",
        "test": "assert     perfect_squares(1,1) == [1]",
        "num_ids": 2845,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2+y**2)**0.5\n    theta = cmath.phase(complex(x,y))\n    #r=complex(x,y).rect()\n    #print(r,theta)\n    return (r,theta)\n    \ndef polar_rect_demo():\n    x = 3\n    y = 4\n    print(polar_rect(x,y))\n    \n",
        "test": "assert     polar_rect(1, 0) == (1, 0)",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    return [newList[-1]] + newList[1:-1] + [newList[0]]\n",
        "test": "assert     swap_List(['a', 'b', 'c']) == ['c', 'b', 'a'], 'incorrect output for swap_List'",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k))\n",
        "test": "assert     binomial_Coeff(1, 1) == 1 ",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '.' in ip:\n        ip_list = ip.split('.')\n        for num in range(len(ip_list)):\n            if ip_list[num] == '0':\n                ip_list[num] = ''\n            else:\n                break\n        return '.'.join(ip_list)\n    else:\n        return '.'.join(ip.split('/'))\n",
        "test": "assert     removezero_ip('1.2.3.4') == '1.2.3.4', \"removezero_ip should be 1.2.3.4\"",
        "num_ids": 1934,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    sum_even=0\n    sum_odd=0\n    for i in range(len(list1)):\n        if i%2==0:\n            sum_even+=list1[i]\n        else:\n            sum_odd+=list1[i]\n    return sum_even-sum_odd\n",
        "test": "assert     diff_even_odd([1,2,3,4,6]) == 4, \"Check the first even and first odd number of a given list.\"",
        "num_ids": 3125,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=list(str1)\n    str2=list(str2)\n    swaps=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            str1[i],str2[i]=str2[i],str1[i]\n            swaps+=1\n    return swaps\n",
        "test": "assert     min_Swaps('1011', '1101') == 2, 'check failed'",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    result = 0\n    for i in range(0,len(tuple_list)):\n        result += sys.getsizeof(tuple_list[i])\n    return result\n",
        "test": "assert     tuple_size((1,)) ==     sys.getsizeof(1),     'Error in tuple_size'",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    if n == 0 or m == 0:\n        return None\n    i, j = 0, 0\n    \n    while True:\n        if i == n:\n            return arr2[j + k - 1]\n        elif j == m:\n            return arr1[i + k - 1]\n        elif k == 1:\n            return min(arr1[i], arr2[j])\n        \n        if arr1[i + k // 2 - 1] < arr2[j + k // 2 - 1]:\n            i = i + k // 2\n        else:\n            j = j + k // 2\n        k = k // 2\n    \ndef find_kth_optimized(arr1, arr2, k):\n    '''\n    Optimized version of the above function.\n    '''\n    n = len(arr1)\n    m = len(arr2)\n    if n == 0 or m == 0:\n        return None\n    \n    i, j = 0, 0\n    while True:\n        if i == n:\n            return arr2[j + k - 1]\n        elif j == m:\n            return arr1[i + k - 1]\n        elif k == 1:\n            return min(arr1[i], arr2[j])\n        \n        if (n + m) % 2 == 0:\n            if arr1[i + k // 2 - 1] < arr2[j + k // 2 - 1]:\n                i = i + k // 2\n            else:\n                j = j + k // 2\n            k = k // 2\n        else:\n            if i + k // 2 < n and j + k // 2 < m:\n                if arr1[i + k // 2] < arr2[j + k // 2]:\n                    i = i + k // 2\n                else:\n                    j = j + k // 2\n                k = k // 2\n            elif j + k // 2 >= m:\n                i = i + k // 2\n            elif i + k // 2 >= n:\n                j = j + k // 2\n",
        "test": "assert     find_kth([1,2,3,4,5], [1,2,3,4,5], 1) == 1",
        "num_ids": 1678,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in str(number):\n        sum += pow(int(i), len(str(number)))\n    return sum == number\n",
        "test": "assert     armstrong_number(154) == False, '154 is not armstrong'",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number+1):\n        sum = sum+i\n    return(sum)\n",
        "test": "assert     sum_average(5) ==         (5 * (1 + 2 + 3 + 4 + 5)) / 5, 'Test Failed'",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "test": "assert     is_Even(2) == True",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # my code here\n    str1 = str(str1).lower()\n    d = {}\n    for i in str1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n            break\n    for key, val in d.items():\n        if val > 1:\n            return key\n",
        "test": "assert     first_repeated_char(str1 = \"pythontest\") == 't', \"t is expected, but returned {}\".format(first_repeated_char(str1 = \"pythontest\"))",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    for i in range(1, n+1):\n        if i == sum([int(j) for j in list(str(i))]):\n            res.append(i)\n    return res\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 2940,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "test": "assert     reverse_words(\"the sky is blue\") == \"blue is sky the\"",
        "num_ids": 1209,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     not prime_num(6)",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n",
        "test": "assert     (radian_degree(90) - math.pi/2) < 0.001",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text = re.search(pattern, text)\n    if text:\n        text = text.group(0)\n        start = text.index(pattern)\n        end = start + len(pattern)\n    else:\n        text = 'no match'\n        start = -1\n        end = -1\n    return text, start, end\n",
        "test": "assert     find_literals(\"cat bat mat rat\", \"cat\") == (\"cat\", 0, 3)",
        "num_ids": 2079,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=1\n    for i in range(n):\n        bell*=(n-i)/float(i+1)\n    return bell\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(list1)\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5], \"Should be [1, 2, 3, 4, 5]\"",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n",
        "test": "assert     max_of_nth([[2,5,3],[1,2,1],[1,2,1]],1) == 5",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    i = 0\n    while i < len(lst):\n        x = lst[i]\n        j = i+1\n        while j < len(lst):\n            y = lst[j]\n            if x[0] > y[0]:\n                lst[i] = y\n                lst[j] = x\n            elif x[0] == y[0]:\n                if x[1] > y[1]:\n                    lst[i] = y\n                    lst[j] = x\n                elif x[1] == y[1]:\n                    lst[i] = x\n                    lst[j] = y\n                else:\n                    lst[i] = x\n                    lst[j] = y\n            else:\n                lst[i] = x\n                lst[j] = y\n            j += 1\n        i += 1\n    return lst\n",
        "test": "assert     merge([[1,1], [2,2], [3,3], [4,4], [5,5], [6,6]]) == [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6]]",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum_of_list = []\n    sum_of_list = 0\n    for i in test_list:\n        sum_of_list += i\n        cumulative_sum_of_list.append(sum_of_list)\n    return cumulative_sum_of_list\n",
        "test": "assert     cummulative_sum(tuple([5, 10, 15, 20])) == [5, 15, 30, 50]",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums[i]) / len(nums[i]) for i in range(len(nums))]\n",
        "test": "assert     (average_tuple(((1,5,9),(7,9,10))),[3,8])",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1, 2, 3, 4), (1, 2, 3, 4)) == (0, 0, 0, 0)",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Jump required is equivalent to the number of steps required from origin to (d,0).\n    # If we perform a step, in any direction, we can go to any point. So we just need to check for the number of steps required to go from (0, 0) to (d, 0).\n    # The following steps are required to find the number of steps required to go to (d,0)\n    # 1) Calculate the distance from (0, 0) to (d, 0) using the formula:\n    #      distance_to_d = (d**2 + d**2)**0.5\n    # 2) Now find the number of steps required to go to (d,0) by dividing distance_to_d by the number of steps allowed by d.\n    # 3) The number of steps required is the floor of the output.\n    if steps <= 0:\n        return 0\n    elif steps == 1:\n        return 1\n    else:\n        distance_to_d = (d**2 + d**2)**0.5\n        return math.floor(distance_to_d / steps)\n",
        "test": "assert     min_Jumps(0, 10) == 0",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div=[]\n    for i in range(len(nums1)):\n        div.append(nums1[i]/nums2[i])\n    return div\ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    mul=[]\n    for i in range(len(nums1)):\n        mul.append(nums1[i]*nums2[i])\n    return mul\ndef dev_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    dev=[]\n    for i in range(len(nums1)):\n        dev.append(nums1[i]-nums2[i])\n    return dev\ndef sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    sub=[]\n    for i in range(len(nums1)):\n        sub.append(nums1[i]-nums2[i])\n    return sub\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    add=[]\n    for i in range(len(nums1)):\n        add.append(nums1[i]+nums2[i])\n    return add\ndef exp_list(nums1,nums2):\n    '''\n    Write a function to exponentiate two lists element wise.\n    '''\n    exp=[]\n    for i in range(len(nums1)):\n        exp.append(nums1[i]**nums2[i])\n    return exp\ndef expm1_list(nums1,nums2):\n    '''\n    Write a function to calculate e^x - 1 for lists element wise.\n    '''\n    expm1=[]\n    for i in range(len(nums1)):\n        expm1.append(nums1[i]**nums2[i]-1)\n    return expm1\n",
        "test": "assert     div_list([0,0,0], [1,1,1]) == [0,0,0]",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join([i for i in test_str if i.isdigit()])\n",
        "test": "assert     move_num('123abc')     == 'abc123'",
        "num_ids": 1042,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0: return 0\n    if len(a) == 1: return 1\n    # recursive version\n    #print(\"\\n\", a, \"\\n\")\n    if len(a) % 2 == 0:\n        a1 = largest_subset(a[:len(a) // 2])\n        a2 = largest_subset(a[len(a) // 2:])\n    else:\n        a1 = largest_subset(a[:len(a) // 2])\n        a2 = largest_subset(a[len(a) // 2 + 1:])\n    #print(\"a1:\", a1, \"a2:\", a2)\n    return max([a1, a2])\n    #print(\"a1+a2:\", a1+a2, \"\\n\")\n",
        "test": "assert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1, \"Incorrect output for largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\"",
        "num_ids": 1428,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n = len(arr1)\n    if n % 2 == 0:\n        mid_1 = (arr1[n//2] + arr1[(n//2) - 1])/2\n        mid_2 = (arr2[n//2] + arr2[(n//2) - 1])/2\n        median = (mid_1 + mid_2)/2\n    else:\n        median = (arr1[n//2] + arr2[n//2])/2\n    return median\n",
        "test": "assert     get_median([1, 2], [3, 4], 2) == 2.5",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "test": "assert     nth_nums([1, 2, 3, 4, 5], 3) == [1, 8, 27, 64, 125]",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "test": "assert     is_upper('this is not upper') == False",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList:\n        temp=newList[0]\n        newList[0]=newList[-1]\n        newList[-1]=temp\n    return newList\n",
        "test": "assert     swap_List([5,3,2,1,4]) == [4,3,2,1,5], 'incorrect'",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14\n    return pi*(r**2)\n",
        "test": "assert     (triangle_area(0) == 0)",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    i = start\n    while i < end:\n        if array[i]!= i+1:\n            return i+1\n        i += 1\n    return i+1\n",
        "test": "assert     find_First_Missing([8, 9, 10, 11, 12, 13, 14]) == 1",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split())\n    \ndef split_and_join(line):\n    '''\n    Write a function to split and join an input string into individual characters.\n    '''\n    return '-'.join(line.split(' '))\n",
        "test": "assert     replace_spaces('Dwight%20Schrute') == 'Dwight%20Schrute'",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    # for i in range(0,len(list)):\n    #     if list[i] % 2 == 0:\n    #         print(list[i])\n    return [i for i in list if i % 2 == 0]\n",
        "test": "assert     Split([1,2,3,4,5,6,7]) == [2,4,6], 'incorrect'",
        "num_ids": 1202,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # adjacency_list is the list of adjacency indices\n    adjacency_list = []\n    \n    # prev_distance is the sum of all the distances to the previous points\n    prev_distance = 0\n    \n    # prev_coordinate is the coordinate tuple of the last point in the adjacency list\n    prev_coordinate = None\n    \n    # prev_direction is the direction of the last point in the adjacency list\n    prev_direction = None\n    \n    for i, elem in enumerate(sub):\n        if i == 0:\n            adjacency_list.append(elem)\n            prev_distance += distance(elem, ele)\n            prev_coordinate = elem\n            prev_direction = None\n            \n        else:\n            if prev_direction is None:\n                adjacency_list.append(elem)\n                prev_distance += distance(elem, ele)\n                prev_coordinate = elem\n                prev_direction = None\n            \n            elif prev_direction is not None:\n                direction = direction_calc(elem, prev_coordinate)\n                \n                if direction == 'forward':\n                    adjacency_list.append(elem)\n                    prev_distance += distance(elem, ele)\n                    prev_coordinate = elem\n                    \n                elif direction == 'backward':\n                    if distance(elem, prev_coordinate) > prev_distance:\n                        adjacency_list.append(elem)\n                        prev_distance += distance(elem, ele)\n                        prev_coordinate = elem\n                        \n                elif direction == 'left':\n                    adjacency_list.append(elem)\n                    prev_distance += distance(elem, ele)\n                    prev_coordinate = elem\n                    \n                    if prev_direction == 'forward':\n                        prev_direction = 'left'\n                    elif prev_direction == 'backward':\n                        prev_direction = 'right'\n                    \n                elif direction == 'right':\n                    adjacency_list.append(elem)\n                    prev_distance += distance(elem, ele)\n                    prev_coordinate = elem\n                    \n                    if prev_direction == 'forward':\n                        prev_direction = 'right'\n                    elif prev_direction == 'backward':\n                        prev_direction = 'left'\n                        \n    return adjacency_list\n",
        "test": "assert ",
        "num_ids": 3022,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text.count(\" \") > 0:\n        return text.replace(\" \", \"_\")\n    else:\n        return text.replace(\"_\", \" \")\n",
        "test": "assert     replace_spaces('a') == 'a','replace_spaces(\"a\") == \"a\" failed'",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    temp = []\n    for i in num_list:\n        if i!=0:\n            temp.append(i)\n    temp.extend([0] * num_list.count(0))\n    return temp\n",
        "test": "assert     move_zero([1,0,0,0,0,0,0,0,0]) == [1,0,0,0,0,0,0,0,0]",
        "num_ids": 1386,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0 \n    for i in range(n) : \n        for j in range(i+1,n) : \n            result = result ^ arr[i] ^ arr[j]\n    return result\n",
        "test": "assert     pair_xor_Sum([1,2,4,5],4) == 2",
        "num_ids": 1156,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for element in iterable:\n        hq.heappush(h, element)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     heap_sort([]) == [], \"incorrect\"",
        "num_ids": 1244,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_amount = actual_cost + sale_amount\n    if total_amount > actual_cost:\n        return True\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(3,-1) == False ",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    WCI=13.12 + 0.6215*t - 11.37 * math.pow(v,0.16) + 0.3965 * t * math.pow(v,0.16)\n    return round(WCI)\nprint(wind_chill(10,15))\n",
        "test": "assert     wind_chill(22,22) == 22, \"22, 22 should be 22\"",
        "num_ids": 1308,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(i) for i in sample_names if not i[0].islower()])\n",
        "test": "assert     sample_nam(['Sam', 'john','mathew', 'lennon', 'jack', 'Harry', 'Tina','michael']) == 12",
        "num_ids": 971,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i, item in enumerate(items):\n        if item == '(' or item == ')':\n            items = items.replace(item, '', 1)\n    return items\n",
        "test": "assert     remove_parenthesis('') == ''",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word = text.split(\" \")\n    print(word)\n    print(text)\n    for i in range(len(word)):\n        if word[i] == \"z\" and (i == 0 or word[i-1] == \" \"):\n            return False\n    return True\n",
        "test": "assert     text_match_wordz_middle('zzz')",
        "num_ids": 4128,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reversed_list = list()\n    for index, val in enumerate(input):\n        if index < k:\n            reversed_list.append(input[index])\n        else:\n            reversed_list.append(input[index-k])\n    return reversed_list\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 10) == [1,2,3,4,5,6,7,8,9,10], \"Somthing went wrong\"",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # test_tup = ('abc', 1, 2, 3, 4)\n    # test_dict = {'e': 4, 'a': 2, 'd': 1, 'b': 3}\n    return tuple(test_tup) + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple((1, 2, 3), {'a': 3, 'b': 4}) == (1, 2, 3, {'a': 3, 'b': 4})",
        "num_ids": 1286,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return max(dp[N-1]) / (N * N)\n",
        "test": "assert     maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.5",
        "num_ids": 2430,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0]>=h and v[1]>=w}\n",
        "test": "assert     filter_data({'Andreas':(1.7,72.3)}, 1.7, 72.3) == {'Andreas':(1.7,72.3)}",
        "num_ids": 1301,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,2,3], [2,2,3]) == 2",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    base = int(base)\n    power = int(power)\n    sum = 0\n    for i in str(base):\n        sum += int(i) ** power\n    return sum\n    \nprint(power_base_sum(3, 2))",
        "test": "assert     power_base_sum(2, 3) ==     8",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regx = re.compile('\"(.*?)\"')\n    match = regx.findall(text1)\n    return match\n",
        "test": "assert     extract_quotation('\"Ciao\"')==['Ciao']",
        "num_ids": 1219,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return [test_tup[i] * test_tup[i+1] for i in range(0, len(test_tup)-1)]\n",
        "test": "assert     multiply_elements((1, 2, 3, 4, 5)) == (2, 6, 12, 20, 30)",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if lst1 == [] and lst2 == []:\n        return []\n    if lst1 == []:\n        return lst2\n    if lst2 == []:\n        return lst1\n    else:\n        return [sum(x) for x in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Without using itertools or groupby\n    def remove_duplicates(nums):\n        result = []\n        last = None\n        for num in nums:\n            if num!= last:\n                result.append(num)\n                last = num\n        return result\n    # Or using itertools\n    def remove_duplicates_iter(nums):\n        result = []\n        for key, group in groupby(nums):\n            result.append(key)\n        return result\n    # Or using groupby\n    def remove_duplicates_groupby(nums):\n        return [key for key, group in groupby(nums)]\n    # Using set\n    def remove_duplicates_set(nums):\n        return list(set(nums))\n    # With sorted\n    def remove_duplicates_sorted(nums):\n        nums = sorted(nums)\n        result = [nums[0]]\n        last = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i]!= last:\n                result.append(nums[i])\n                last = nums[i]\n        return result\n    # Without using any builtin functions\n    def remove_duplicates_no_builtins(nums):\n        result = []\n        for num in nums:\n            if num not in result:\n                result.append(num)\n        return result\n    # Without using any builtin functions or set\n    def remove_duplicates_no_builtins_no_set(nums):\n        result = []\n        for num in nums:\n            if num not in result:\n                result.append(num)\n        return result\n    # Without using any builtin functions or set\n    def remove_duplicates_no_builtins_no_sorted(nums):\n        result = []\n        num_set = set()\n        for num in nums:\n            if num not in num_set:\n                result.append(num)\n                num_set.add(num)\n        return result\n    return remove_duplicates_no_builtins_no_sorted(nums)\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 2006,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = (math.pi*r**2)*h\n    return(surface_area)\n",
        "test": "assert     lateralsurface_cone(1,1)     == 3.141592653589793",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n",
        "test": "assert     replace_specialchar('hi. there') == 'hi::there'",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        if x < A[mid]:\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            if mid - 1 < 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n    ",
        "test": "assert     find_first_occurrence([2, 3, 3, 4, 5, 6, 7], 3) == 1",
        "num_ids": 1444,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    arr.sort()\n    s=set()\n    for i in range(0, n):\n        for j in range(i, n):\n            s.add(arr[i:j + 1])\n",
        "test": "assert ",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(\"Initial number is\",bin(n))\n    n = n & 0xFFFE\n    print(\"After applying mask the number becomes\",bin(n))\n    return n\n",
        "test": "assert     set_middle_bits(0) == 0",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)-1\n    while lo <= hi:\n        mid = lo + ((hi-lo)>>1)\n        if a[mid] > x:\n            hi = mid - 1\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            if mid == 0 or x < a[mid-1]:\n                return mid\n            else:\n                hi = mid - 1\n    return hi + 1\n",
        "test": "assert     left_insertion([1, 3, 4, 6, 10, 11, 15], 2) == 1",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n",
        "test": "assert     ( check_str('this is string') == False )",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 2510,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = 0\n    while (int(math.pow(10, k)) <= int(n)): \n        k += 1\n    k = k - 1\n    return int(math.pow(10, k)) \n",
        "test": "assert     find_Index(1) == 1, \"find_Index(1) should be 1\"",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0,len(test_tup),2)}\n",
        "test": "assert     tuple_to_dict(('hello','python')) ==     {'hello': 'python'}",
        "num_ids": 736,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i == \" \" :\n            continue\n        if i!= s[0] :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('a') == True",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (3*(side**2))/4\n",
        "test": "assert     area_tetrahedron(4) == 12",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list = list[-m:] + list[:-m]\n    return list\n",
        "test": "assert     rotate_right([1,2,3], 0) == [1,2,3]",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(isinstance(i, type(None)) for i in test_tup)\n",
        "test": "assert     check_none((1,2,3,4,None))==True",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    startnum = 2345\n    endnum = 74321\n    digits = [1,2,3,4,5,6,7,8,9]\n    \n    print(\"Numbers divisible by all digits:\")\n    for i in range(startnum, endnum+1):\n        if all(i%digit==0 for digit in digits):\n            print(i)\n",
        "test": "assert ",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return round(math.pi*(r**2)*(a/360),2)\n    else:\n        return None\n",
        "test": "assert     sector_area(0,0) == 0, 'wrong output'",
        "num_ids": 2720,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "test": "assert ",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('(?<=\\w)([A-Z])', r' \\1', str1)\n",
        "test": "assert     capital_words_spaces(\"\") == \"\"",
        "num_ids": 1177,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "test": "assert     sort_numeric_strings([\"1\", \"2\", \"3\", \"9\", \"5\"]) == ['1', '2', '3', '5', '9']",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6], 'incorrect output'",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    for i in range(2, i):\n        if arr[i] < arr[i//2]:\n            return False\n    return True\n",
        "test": "assert     check_min_heap_helper([2, 4, 5, 8, 6], 0)",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if(n==0): return 0\n    else:\n        return 2*jacobsthal_num(n-1)+1\n",
        "test": "assert     1 == jacobsthal_num(1)",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # first sort based on second value of tuple\n    test_list.sort(key=lambda x: x[1])\n    #print(test_list)\n",
        "test": "assert ",
        "num_ids": 1768,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list to get the smallest and the second smallest number\n    numbers.sort()\n    return(numbers[1])\n",
        "test": "assert     second_smallest([3,2,1]) == 2",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.search(r\"a.+b\",text))\n",
        "test": "assert     text_match_zero_one(\"cat\") == False, \"Match a single character not present\"",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if len(test_list) == 0:\n        return 0\n    if len(test_list) == 1:\n        return 0\n    if len(test_list) == 2:\n        if test_list[0] == test_list[1][::-1]:\n            return 1\n        else:\n            return 0\n    pairs = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pairs += 1\n            \n    return pairs\n",
        "test": "assert     count_reverse_pairs(['at','','abc','aba','zca','aa','','']) == 3",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for sublist in list1:\n        sub_tuple = tuple(sublist)\n        d[sub_tuple] = d.get(sub_tuple, 0) + 1\n    return d\n",
        "test": "assert     unique_sublists([[1,2,3,4],[1,2,3,4],[2,1,3,4]]) == {(1,2,3,4):2, (2,1,3,4):1}, 'incorrect'",
        "num_ids": 3702,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n",
        "test": "assert     is_decimal(\"12.00\") == True, \"should be True\"",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return arr.count(arr[0]) == len(arr)\n",
        "test": "assert     unique_Element([1,1,1,2,2,2,3,3,3,3,3,3,3]) == False, 'not passed'",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(2)     == True",
        "num_ids": 1570,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = arr[1] - arr[0]\n    for i in range(len(arr)):\n        j = i + 1\n        if j == len(arr):\n            break\n        diff = min(diff, arr[j] - arr[i])\n    return diff\n",
        "test": "assert     find_min_diff([4,2,1,3],4) == 1",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for i in str:\n        if i.isdigit():\n            digits += 1\n    return digits\n",
        "test": "assert     number_ctr(\"123\")         == 3",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Base Case \n    if (n < 2): \n        return n \n    # Else\n    return (n * (n + 1)) / 2 \n",
        "test": "assert     is_polite(0) == 0",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # if not l1:\n    #     return None\n    # if len(l1) < 2:\n    #     return None\n    # if len(l1) == 2:\n    #     return [(l1[0],l1[1])]\n    # for i in range(len(l1)):\n    #     for j in range(i+1,len(l1)):\n    #         return [(l1[i],l1[j])]\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    lst = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                lst.append((arr[i], arr[j]))\n    return len(lst)\n",
        "test": "assert     get_pairs_count([1,2,3,4,5,6], 9) == 2, \"get_pairs_count(.., 9) failed\"",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n",
        "test": "assert     Diff(list(range(5)),list(range(5))) == []",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num_list = []\n    for i in range(1,n+1):\n        if (i % 2!= 0) :\n            num_list.append(i*i*i*i)\n    return sum(num_list)\n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_paren = set('({[')\n    close_paren = set(')}]')\n    open_par_deque = deque()\n    for char in exp:\n        if char in open_paren:\n            open_par_deque.append(char)\n        elif char in close_paren:\n            if not open_par_deque:\n                return False\n            if (char == ')' and open_par_deque.pop()!= '(') or (char == '}' and open_par_deque.pop()!= '{') or (char == ']' and open_par_deque.pop()!= '['):\n                return False\n    if not open_par_deque:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression(\"()\")==True, \"Should be True\"",
        "num_ids": 1590,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    print(test_str)\n    test_str = test_str.split()\n    print(test_str)\n    len_words = 0\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            len_words += 1\n    print(len_words)\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            test_str.pop(i)\n    print(test_str)\n    return \" \".join(test_str)\n",
        "test": "assert     remove_length('The quick brown fox jumps over the lazy dog', 10) == 'The quick brown fox jumps over the lazy dog', \"failed\"",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    list_of_words=[]\n    indices_list=[]\n    for word in text.split():\n        if pattern in word:\n            list_of_words.append(word)\n            indices_list.append(word.index(pattern))\n    if len(list_of_words)==0:\n        return None\n    else:\n        return list_of_words,indices_list\n    \nprint(occurance_substring('this is an apple','apple'))\n",
        "test": "assert     occurance_substring('abcabcabcabc','abc') == 'Yes: 3, 9, 18, 27'",
        "num_ids": 3158,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1,2,3,5,6]) == False",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_counter = 0\n    \n    for char in test_str:\n        if char in vowels:\n            if test_str[test_str.index(char)-1] in vowels or test_str[test_str.index(char)+1] in vowels:\n                vowel_counter += 1\n    \n    return vowel_counter\n    \ndef count_vowels_v2(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_counter = 0\n    \n    for i, char in enumerate(test_str):\n        if char in vowels:\n            #print(i, char, test_str[i-1], test_str[i+1])\n            if test_str[i-1] in vowels or test_str[i+1] in vowels:\n                vowel_counter += 1\n    \n    return vowel_counter\n    \nif __name__ == '__main__':\n    #print(count_vowels('uuu'))\n    print(count_vowels_v2('uuu'))\n    ",
        "test": "assert     count_vowels('') == 0, \"Empty String\"",
        "num_ids": 2200,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)): \n        if arr[abs(arr[i])] >= 0: \n            arr[abs(arr[i])] = -arr[abs(arr[i])] \n        else: \n            sum += abs(arr[i]) \n    return sum \n  \n",
        "test": "assert     find_sum([1, 2, 3, 4, 1]) == 1",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] in dict1:\n            dict1[list1[i]].append(i)\n        else:\n            dict1[list1[i]] = [i]\n    \n    list2 = []\n    for i in dict1:\n        list2.append(dict1[i])\n    \n    return list2\n    \ndef get_numbers_from_string(str1):\n    '''\n    Write a function to get all the numbers from a string.\n    '''\n    list1 = []\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            list1.append(str1[i])\n    return list1\n    \ndef reverse_a_string(str1):\n    '''\n    Write a function to get the reverse of a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_words(str1):\n    '''\n    Write a function to reverse each word in a string.\n    '''\n    str1 = str1.split(' ')\n    str1 = reversed(str1)\n    return''.join(str1)\n    \ndef get_factors_of_a_number(num1):\n    '''\n    Write a function to get the factors of a number.\n    '''\n    list1 = []\n    for i in range(1, num1+1):\n        if num1%i == 0:\n            list1.append(i)\n    return list1\n    \ndef check_if_number_is_perfect(num1):\n    '''\n    Write a function to check if a number is perfect.\n    '''\n    list1 = get_factors_of_a_number(num1)\n    sum1 = 0\n    for i in list1:\n        sum1 += i\n    if sum1 == num1:\n        return True\n    else:\n        return False\n    \ndef sum_of_all_odd_and_even_numbers(list1):\n    '''\n    Write a function to find the sum of all the even and odd numbers from a given list.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in list1:\n        if i%2 == 0:\n            sum1 += i\n        else:\n            sum2 += i\n    return [sum1, sum2]\n    \ndef print_a_number_in_words(num1):\n    '''\n    Write a function to print a number in words.\n    '''\n    if num1 == 0:\n        return 'zero'\n    elif num1 == 1:\n        return 'one'\n    elif num1 == 2:\n        return 'two'\n    elif num1 == 3:\n        return 'three'\n    elif num1 == 4:\n        return 'four'\n    elif num1 == 5:\n        return 'five'\n    elif num1 == 6:\n        return'six'\n    elif num1 == 7:\n        return'seven'\n    elif num1 == 8:\n        return 'eight'\n    elif num1 == 9:\n        return 'nine'\n    \ndef replace_char_in_string(str1, char1, char2):\n    '''\n    Write a function to replace all occurrences of a character in a string with another character.\n    '''\n    return str1.replace(char1, char2)\n    \ndef convert_a_string_into_a_list(str1):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    return list(str1)\n    \ndef remove_duplicates_from_list(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(list1))\n    \ndef get_odd_numbers_from_list(list1):\n    '''\n    Write a function to get the odd numbers from a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i%2 == 1:\n            list2.append(i)\n    return list2\n    \ndef add_element_to_list_if_not_present(list1, element):\n    '''\n    Write a function to add an element to the list, if it is not already present.\n    '''\n    if element not in list1:\n        list1.append(element)\n    return list1\n    \ndef find_all_pairs_of_numbers_with_sum_k(list1, k):\n    '''\n    Write a function to get all the pairs from a list with sum k.\n    '''\n    dict1 = {}\n    list2 = []\n    for i in list1:\n        if i in dict1:\n            dict1[i].append(i)\n        else:\n            dict1[i] = [i]\n    for i in dict1:\n        if k-i in dict1:\n            list2.append([i, k-i])\n    return list2\n    \ndef get_number_of_unique_characters_from_a_string(str1):\n    '''\n    Write a function to get the number of unique characters from a string.\n    '''\n    return len(set(str1))\n    \ndef get_number_of_words_with_first_letter_capitalized_in_a_sentence(str1):\n    '''\n    Write a function to get the number of words with first letter capitalized in a sentence.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.istitle() == True]\n    return len(str1)\n    \ndef get_number_of_words_with_all_letters_capitalized_in_a_sentence(str1):\n    '''\n    Write a function to get the number of words with all letters capitalized in a sentence.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.isupper() == True]\n    return len(str1)\n    \ndef get_number_of_words_with_first_letter_capitalized_and_all_other_letters_lower_case_in_a_sentence(str1):\n    '''\n    Write a function to get the number of words with first letter capitalized and all other letters lower case in a sentence.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.istitle() == True]\n    str1 = [i for i in str1 if i.isupper() == False]\n    return len(str1)\n    \ndef get_number_of_capital_words_in_a_sentence(str1):\n    '''\n    Write a function to get the number of capital words in a sentence.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.istitle() == True]\n    return len(str1)\n    \ndef get_list_of_capitals_in_a_sentence(str1):\n    '''\n    Write a function to get the list of capitals in a sentence.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.istitle() == True]\n    return str1\n    \ndef get_number_of_words_in_a_sentence_with_first_letter_capitalized(str1):\n    '''\n    Write a function to get the number of words in a sentence with first letter capitalized.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.istitle() == True]\n    return len(str1)\n    \ndef get_number_of_words_in_a_sentence_with_all_letters_capitalized(str1):\n    '''\n    Write a function to get the number of words in a sentence with all letters capitalized.\n    '''\n    str1 = str1.split(' ')\n    str1 = [i for i in str1 if i.isupper() == True]\n    return len(str1)\n    \ndef get_number_of_words",
        "test": "assert     [ [1, 2], [3], [4], [5, 6] ] == pack_consecutive_duplicates( [1, 2, 3, 4, 5, 6] )",
        "num_ids": 3483,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_tuple = {}\n    if len(list1) > 0:\n        for l in list1:\n            list_tuple[tuple(l)] = list_tuple.get(tuple(l),0) + 1\n    return list_tuple\n",
        "test": "assert     unique_sublists([[1, 2, 3], [4, 5], [6, 7, 8], [9]]) == {(1, 2, 3): 1, (4, 5): 1, (6, 7, 8): 1, (9,): 1}",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [combination for combination in combinations(test_list, 2) if sum(combination) == 2020]\n",
        "test": "assert     find_combinations(((1,2), (3,4), (5,6), (7,8), (9,10))) == \\",
        "num_ids": 5031,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) : \n        return 1\n    if (n == 2) : \n        return 1\n    if (n % 2 == 0) : \n        return 2\n    if (n % 2!= 0) : \n        return (2*((n+1)//2) + 1)\n    return n\n",
        "test": "assert     count_divisors(1) == 1 ",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            sum+=arr[i:j+1]\n    return sum\ndef euqal_sum_subarray(arr):\n    '''\n    Write a python function to find the maximum length of subarray with equal sum. https://www.geeksforgeeks.org/maximum-length-subarray-with-equal-sum/\n    '''\n    sum=arr[0]\n    l=0\n    m=0\n    for i in range(len(arr)):\n        sum+=arr[i]\n        if sum==0:\n            m=i+1\n        elif sum==0:\n            m=i\n        if sum==0:\n            l=i\n    return m,l\ndef common_element_between_two_sorted_arrays(arr1,arr2):\n    '''\n    Write a python function to find the common elements in two sorted arrays. https://www.geeksforgeeks.org/common-elements-in-two-sorted-arrays/\n    '''\n    i=0\n    j=0\n    a=[]\n    while i<len(arr1) and j<len(arr2):\n        if arr1[i]==arr2[j]:\n            a.append(arr1[i])\n            i+=1\n            j+=1\n        elif arr1[i]>arr2[j]:\n            j+=1\n        elif arr1[i]<arr2[j]:\n            i+=1\n    return a\ndef find_substrings(str):\n    '''\n    Write a python function to find all the substrings of a string. https://www.geeksforgeeks.org/python-program-to-print-all-the-substrings-of-a-given-string/\n    '''\n    sub=[]\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            sub.append(str[i:j+1])\n    return sub\ndef rotate_string(str,d):\n    '''\n    Write a python function to rotate a string. https://www.geeksforgeeks.org/python-program-for-left-rotation-of-a-string/\n    '''\n    s=''\n    for i in range(d):\n        s=s+str[i]\n    return s+str[d:]\ndef remove_duplicates_from_sorted_array(arr):\n    '''\n    Write a python function to remove duplicates from sorted array. https://www.geeksforgeeks.org/python-program-to-remove-duplicates-from-sorted-array/\n    '''\n    i=0\n    j=1\n    while j<len(arr):\n        if arr[j]==arr[i]:\n            j+=1\n        else:\n            i+=1\n            arr[i]=arr[j]\n            j+=1\n    return i+1,arr[:i+1]\ndef create_linked_list(arr):\n    '''\n    Write a python function to create a linked list. https://www.geeksforgeeks.org/python-program-for-linked-list/\n    '''\n    head=None\n    for i in range(len(arr)):\n        if i==0:\n            head=Node(arr[i])\n            tmp=head\n        else:\n            tmp.next=Node(arr[i])\n            tmp=tmp.next\n    return head\ndef reverse_linked_list(head):\n    '''\n    Write a python function to reverse a linked list. https://www.geeksforgeeks.org/python-program-for-linked-list-in-reverse/\n    '''\n    head=None\n    while head.next:\n        head=head.next\n    i=head\n    j=i.next\n    while j:\n        i.next=j.next\n        j.next=head\n        head=j\n        j=i.next\n    return head\ndef delete_node(head,value):\n    '''\n    Write a python function to delete a node from linked list. https://www.geeksforgeeks.org/python-program-to-delete-a-node-from-linked-list/\n    '''\n    if head is None:\n        return head\n    if head.value==value:\n        return head.next\n    prev=head\n    curr=head.next\n    while curr:\n        if curr.value==value:\n            prev.next=curr.next\n            curr.next=None\n        prev=curr\n        curr=curr.next\n    return head\ndef sorted_merge(arr1,arr2):\n    '''\n    Write a python function to merge two sorted linked list. https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/\n    '''\n    if len(arr1)==0 or len(arr2)==0:\n        return arr1+arr2\n    else:\n        if arr1[0]>arr2[0]:\n            return sorted_merge(arr2,arr1)\n        else:\n            head=arr1[0]\n            arr1=arr1[1:]\n            tmp=Node(arr2[0])\n            tmp.next=head\n            head=tmp\n            arr2=arr2[1:]\n            return sorted_merge(arr1,arr2)\ndef find_intersection_point_of_two_linked_lists(head1,head2):\n    '''\n    Write a python function to find intersection point of two sorted linked list. https://www.geeksforgeeks.org/find-intersection-point-of-two-sorted-linked-lists/\n    '''\n    i=head1\n    j=head2\n    l=0\n    while i or j:\n        if i==j:\n            l=i\n            break\n        if i.next or j.next:\n            if not i.next:\n                i=head2\n            if not j.next:\n                j=head1\n            i=i.next\n            j=j.next\n        else:\n            break\n    return l\ndef reverse_nodes_in_k_groups(head,k):\n    '''\n    Write a python function to reverse all nodes in k-groups. https://www.geeksforgeeks.org/reverse-nodes-in-k-groups/\n    '''\n    i=head\n    j=k\n    head1=head\n    head2=head\n    while j:\n        i=head1\n        j=j-1\n        k=k-1\n        while k:\n            next=i.next\n            i.next=None\n            i.next=next\n            i=i.next\n            k=k-1\n        head1=i\n    return head\ndef find_mid_element_in_linked_list(head):\n    '''\n    Write a python function to find mid element in linked list. https://www.geeksforgeeks.org/find-middle-element-in-a-linked-list/\n    '''\n    i=head\n    if not head or not head.next:\n        return head\n    while i.next.next:\n        i=i.next\n    return i\ndef reverse_linked_list_iterative(head):\n    '''\n    Write a python function to reverse a linked list iteratively. https://www.geeksforgeeks.org/reverse-a-linked-list/\n    '''\n    prev=None\n    curr=head\n    while curr:\n        next=curr.next\n        curr.next=prev\n        prev=curr\n        curr=next\n    return prev\ndef reverse_linked_list_recursive(head):\n    '''\n    Write a python function to reverse a linked list recursively. https://www.geeksforgeeks.org/reverse-a-linked-list-iteratively-and-recursively/\n    '''\n    if head==None or head.next==None:\n        return head\n    p=reverse_linked_list_recursive(head.next)\n    head.next.next=head\n    head.next=None\n    return p\ndef sum_of_linked_list(head):\n    '''\n    Write a python functio",
        "test": "assert     odd_length_sum([1, 3, 5]) == 0, \"Check the input array\"",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import numpy as np\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "test": "assert ",
        "num_ids": 2220,
        "indeed": true
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    mul_even_odd = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            mul_even_odd.append(list1[i])\n        else:\n            pass\n    prod = 1\n    for j in range(len(mul_even_odd)):\n        prod *= mul_even_odd[j]\n    print(prod)\n",
        "test": "assert     mul_even_odd([1,3,5,7]) == None, 'Odd number not found'",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str[1:-1].split(',')))\n",
        "test": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3), 'Incorrect'",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
        "test": "assert     right_insertion([1, 3, 4], 2) == 1",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}\")\n    result = pattern.search(text)\n    return result!= None\n",
        "test": "assert     text_match_three(\"tea match three\") == False, \"test 2 Failed\"",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n",
        "test": "assert     new_tuple(['a', 'b', 'c'], 'test')!= (('t', 'e','s', 't'), ('a', 'b'))",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     even_position([1,3,5,7,9]) == False, 'incorrect output'",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_list.append(i)\n        else:\n            pass\n    return tuple(new_list)\n",
        "test": "assert     remove_nested(('a', ('bb', 'ccc'), 'd', 'e')) == ('a', 'd', 'e'), 'incorrect result'",
        "num_ids": 1052,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "test": "assert     count_list([[]]) == 1, 'Single empty list'",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if x not in arr:\n        return n\n    else:\n        return last(arr[:n-1],x)\n    \n",
        "test": "assert     last([1, 2, 3, 3, 4, 5], 1) == 0",
        "num_ids": 1229,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return bool(re.search(r\"a.*?b\", text))\n",
        "test": "assert     text_starta_endb(\"b\") == False",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({1:1, 2:2, 3:3}) == 6, 'incorrect'",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 1:\n            sum = sum + i\n    return sum\n",
        "test": "assert     sum_odd(2) == 1",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1,2,3])     == 6",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if (d == 0):\n        return n\n    n = n << d\n    n = n | (n >> 32-d)\n    return n\n",
        "test": "assert     left_rotate(0b11111111111111111111111111111110, 0) == 0b11111111111111111111111111111110",
        "num_ids": 2727,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n",
        "test": "assert     '' == remove_all_spaces('')",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x == y:\n        counter += 1\n    if x == z:\n        counter += 1\n    if y == z:\n        counter += 1\n    return counter\n",
        "test": "assert     test_three_equal(1,2,3) == 0, 'Wrong answer for the example inputs. Check the order of the numbers.'",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    i=0\n    while i<n-1:\n        if arr[i]>arr[i+1]:\n            break\n        i+=1\n    if i==n-1:\n        return 0\n    else:\n        return n-i-1\n",
        "test": "assert count_rotation([13, 18, 20, 30, 35, 39, 42]) == 0",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(math.sqrt(n))\n    return s*s == n\n",
        "test": "assert     is_perfect_square(4) == True",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for x in arr:\n        if x%2!= 0:\n            return False\n    return True\n",
        "test": "assert     is_product_even([1,3,5,7,9]) == False",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list=[]\n    for i in lists:\n        sum_list.append(sum(i))\n    for x in range(0,len(sum_list)-1):\n        for y in range(x+1,len(sum_list)):\n            if(sum_list[x]>sum_list[y]):\n                sum_list[x],sum_list[y]=sum_list[y],sum_list[x]\n    return(lists[sum_list.index(max(sum_list))])\n",
        "test": "assert     max_sum_list([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]",
        "num_ids": 1403,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    str_list = list(test_str)\n    max_len = 0\n    for i in str_list:\n        if i.isupper():\n            max_len += 1\n        else:\n            max_len = 0\n    return max_len\n",
        "test": "assert     max_run_uppercase('') == 0, 'Wrong answer for max_run_uppercase('')'",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return None\n",
        "test": "assert first_odd([1,2,3,4,5]) == 1, \"Wrong output for first_odd([1,2,3,4,5])\"",
        "num_ids": 877,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    i = 0\n    while i < len(test_tup):\n        if test_tup[i] == K:\n            return True\n        i += 1\n    return False\n",
        "test": "assert     check_K(((0, 1, 2), (3, 4, 5)), 7) == False",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Initialize a boolean flag to check that every element in tup2 is smaller than corresponding element in tup1\n    smaller_flag = True\n    # Iterate through each element in the second tuple, check if it is smaller than the corresponding element in the first tuple\n    for num1, num2 in zip(test_tup1, test_tup2):\n        if num2 > num1:\n            # If so, set the flag to False\n            smaller_flag = False\n            break\n    return smaller_flag\n",
        "test": "assert     check_smaller((0,5,2),(0,3,5)) == False",
        "num_ids": 1141,
        "indeed": true
    }
]