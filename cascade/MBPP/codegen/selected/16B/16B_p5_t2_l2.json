[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return (list(set(test_tup1) & set(test_tup2)))\n",
        "test": "assert     similar_elements([2,3,4,5,6,7], [2,4,5,6,7,8]) == [2,4,5,6,7], \"incorrect\"",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n==1):\n        return False\n    elif (n==2):\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if (n%i==0):\n                return False\n    return True\n",
        "test": "assert     is_not_prime(1) == False",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #create an empty list\n    heap=[]\n    #using max heap, we can just insert the negative of the numbers\n    for i in nums:\n        hq.heappush(heap,-i)\n    #use list comprehension to get n largest elements from a list\n    result= [-x for x in heap[0:n]]\n    return result\n    \n",
        "test": "assert     heap_queue_largest([],0) == []",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Power_Of_Two(3) == False",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\b\\w{4,}\\b', text)\n    return result\n    \ndef find_non_repeating_char(text):\n    '''\n    Write a function to find the first character that is repeated a single time in a given string\n    '''\n    counter = {}\n    result = re.findall(r'\\b[a-zA-Z]{1}\\b', text)\n    for i in result:\n        if i in counter.keys():\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    for i in counter.keys():\n        if counter[i] == 1:\n            return i\n    \ndef find_sub_string_word(text):\n    '''\n    Write a function to find the first repeated word in a given string\n    '''\n    result = re.findall(r'\\b\\w+\\b', text)\n    return result\n",
        "test": "assert     re.findall(r'\\w{4,}', '1234') == ['1234']",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n",
        "test": "assert     square_nums([1,2,3,4,5]) == [1, 4, 9, 16, 25], \"Not quite.\"",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    no_rotations = 0\n    for i in range(len(str) - 1):\n        if (str[i]!= str[i + 1]):\n            no_rotations += 1\n",
        "test": "assert     find_Rotations(\"cde\") == find_Rotations(\"edc\")",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    print(s)\n    s = s.replace(ch, \"\")\n    print(s)\n    return s\n",
        "test": "assert     remove_Occ('Python', 'o') == 'Pythn', 'Remove first and last occurrence of a given character from the string'",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=lambda x: sum(x))\n",
        "test": "assert     sort_matrix([[2, 3, 6], [1, 1, 1], [7, 8, 1]]) == [[1, 1, 1], [2, 3, 6], [7, 8, 1]]",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print (l*b*h)\n    return (l*b*h)\n",
        "test": "assert     (find_Volume(5,5,5) == 125)",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(re.findall('_+', text))>0:\n        return True\n    return False\n",
        "test": "assert     text_lowercase_underscore('_a_b_') == True, \"Wrong answer\"",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "test": "assert     square_perimeter(5) == 20",
        "num_ids": 97,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # time complexity: O(n^2)\n    # space complexity: O(1)\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n",
        "test": "assert     test_duplicate([1,2,3,4,5]) == False, \"Wrong output\"",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 5 == 0\n",
        "test": "assert     is_woodall(7) == False, \"Wrong output\"",
        "num_ids": 2371,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num1=str(num)\n    num2=str(num)[::-1]\n    num1=int(num1)\n    num2=int(num2)\n    if (num1-num2)==0:\n        return True\n    return False\n",
        "test": "assert     rev(1534) == False",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest = 0\n    arr = list(set(arr))\n    for i in arr : \n        if i > largest : \n            largest = i\n    return largest\n",
        "test": "assert     find_Max_Num([0,0,0,0,0]) == 0, 'find_Max_Num returned wrong value'",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\nopposite_Signs(-2,4)\nopposite_Signs(3,5)\n",
        "test": "assert     opposite_Signs(1,1) == False",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 2)\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub = []\n    subs = set()\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub.append(s[i:j + 1])\n    for i in sub:\n        if sum(list(map(int, i))) == len(i):\n            subs.add(i)\n    return len(subs)\n",
        "test": "assert     count_Substrings(\"\") == 0, \"Invalid\"",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n",
        "test": "assert     smallest_num([1, 3, 6, 2, 4, 5, 6, -1, 0]) == -1",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # test_list = [\n    #     (1, 4), (2, 3), (3, 4), (3, 6), (1, 2), (2, 5), (3, 8)\n    # ]\n    max_diff = None\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            difference = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if not max_diff or difference > max_diff:\n                max_diff = difference\n    return max_diff\n",
        "test": "assert     max_difference([(1, 2), (3, 4), (1, 5)]) == 4, 'incorrect'",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks, key=lambda x: x[1], reverse=True))\n",
        "test": "assert ",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if data_list == []:\n        return 0\n    \n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \ndef recursive_list_sum_test(data_list):\n    \n    return recursive_list_sum(data_list)\n    \n    \ndef main():\n    print(\"TESTING RECURSIVE LIST SUM\")\n    test_1 = [1,2,3,4]\n    test_2 = [[1,2,3], [4,5,6], [7,8,9]]\n    \n    assert recursive_list_sum_test(test_1) == sum(test_1), f\"recursive_list_sum_test failed on {test_1}\"\n    \n    assert recursive_list_sum_test(test_2) == sum(test_2[0]) + sum(test_2[1]) + sum(test_2[2]), f\"recursive_list_sum_test failed on {test_2}\"\n    \n    print(\"ALL TEST PASSED\")\n    \n    \nif __name__ == '__main__':\n    main()",
        "test": "assert     recursive_list_sum([1, [2, [3], 4], [[[5]]]]) == 15",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count=count+1\n    return count\n",
        "test": "assert     pos_count([]) == 0, 'incorrect'",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = {0:1}\n    for i in range(1,n+1):\n        bell[i] = bell[i-1] * bell[i-1]\n    return bell[n]\n",
        "test": "assert     bell_number(1) == 1 ",
        "num_ids": 2472,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "test": "assert     is_Monotonic([1,2,3,4,5]) == True ",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    s_length = len(s)\n    l_length = len(l)\n    for i in range(l_length):\n        if l[i:i+s_length] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1,2,3,4], [1,2,3,4]) == True",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    res = []\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9, 10, 11)]    ) == False",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert [1, 2, 3, 4, 5, 6, 7] == comb_sort([1, 2, 3, 4, 5, 6, 7])",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i*i + j*j) == n:\n                print(i, j)\n                return 1\n    print(0)\n    return 0\n",
        "test": "assert     dif_Square(1) == False, \"Incorrect\"",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    colors = [x for x in colors if x!= 'None']\n    colors.sort()\n    colors = ''.join(colors)\n    m = len(patterns)\n    count = 0\n    for i in range(m-1):\n        start = patterns[i]\n        end = patterns[i+1]\n        count += colors.count(start)\n        colors = colors.replace(start, 'None')\n        if count > n:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     is_samepatterns(['yellow', 'black'], ['yellow', 'black', 'black']) == True, 'error1'",
        "num_ids": 4397,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tup in test_list:\n        if all([x%K for x in tup]):\n            tuples.append(tup)\n    return tuples\n",
        "test": "assert     find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == [(4, 8, 12), (7, 8, 9)]",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    #pass\n    return n % 11 == 0\n",
        "test": "assert     is_Diff(11) == True,     \"Your answer is correct.\"",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "test": "assert     word_len(\"mahmoud\") == True, \"False\"",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2)\n",
        "test": "assert     tetrahedral_number(0) == 0, \"wrong\"",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "test": "assert     volume_sphere(5) == (4/3) * math.pi * 5**3 ",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x = 0\n    for i in strr:\n        x += ord(i)\n    return x%26\n",
        "test": "assert     get_Char(\"abcdabcd\") == 'b', 'Error in get_Char'",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # add the starting numbers\n    l = [0,1]\n    # all of the odd terms\n    for i in range(3, 2*n, 2):\n        l.append(l[i-2] + l[i-1])\n    return l[n]\n",
        "test": "assert ",
        "num_ids": 2248,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "test": "assert     surfacearea_sphere(2) == 94, 'incorrect output'",
        "num_ids": 188,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (2 * n - 1)\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict(dict1, **dict2)\n    for key, value in dict3.items():\n        if key in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n",
        "test": "assert     merge_dictionaries_three(dict(a=1,b=2,c=3),dict(b=1,c=2), dict(a=1,b=2,c=3)) ==     {'a':1,'b':2,'c':3}",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return {i:list1.count(i) for i in list1}\n",
        "test": "assert     freq_count([1,2,3,4,5,2,3,4,5]) == {1:1,2:2,3:2,4:2,5:2}",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    count = 0\n    smallest = None\n    for i in range(N, -1, -1):\n        if count == 0:\n            smallest = i\n        if i - 1 >= 0:\n            if abs(i - N) < abs(i - (i - 1)):\n                count += 1\n            else:\n                count -= 1\n    return smallest\n",
        "test": "assert     closest_num(16) == 14",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_len = 0\n    for i in list1:\n        if len(i) > longest_len:\n            longest_len = len(i)\n    print(f'The longest word has {longest_len} letters')\n    return longest_len\n",
        "test": "assert     len_log(['abc', 'de', 'ef']) == 3",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring(\"a\", [\"a\", \"b\", \"a\", \"z\", \"a\", \"a\"]) == True",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_undulating(12) == False",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(2,3) == 8, \"Power of 2 to 3\"",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n",
        "test": "assert     index_minimum([(1, 5), (2, 7), (3, 10), (4, 11)]) == 1, \"Test 1 Failed\"",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #lengths = [len(i) for i in lst]\n    #return min(lengths)\n    return len(min(lst,key=len))\n",
        "test": "assert     Find_Min_Length([[1, 2], [2, 3], [1, 2, 3]]) == 2, \"Test 1 Failed\"",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count\n",
        "test": "assert     divisor(2) ==     2",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize empty dictionary to store the counts\n    frequency_dict = {}\n",
        "test": "assert     frequency_lists([[1,2,3,4,5], [2,3,4,5,6]]) == {1:1,2:2,3:2,4:2,5:2,6:1}",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for num in numbers:\n        sum = sum * num\n    return sum/len(numbers)\n",
        "test": "assert     multiply_num([1,2,3,0]) == 0",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    num = int(str(num)[::-1])\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num\n",
        "test": "assert     next_smallest_palindrome(1) == 2",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    import random\n    l = len(arr)\n    i = random.randint(0,l-1)\n    arr.sort()\n    print(arr)\n    print(arr[k-1])\n    return arr[k-1]\n    \n",
        "test": "assert     kth_element([2, 3, 6, 7, 9], 3) ==     6",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_word = word.split('_')[0]\n    for letter in word.split('_')[1:]:\n        first_word += letter.capitalize()\n    return first_word\n",
        "test": "assert     snake_to_camel('snake_case') =='snakeCase', 'incorrect'",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = 0\n    for i in range(m):\n        num += (n - i) * i\n    return num\n",
        "test": "assert     eulerian_num(2, 4) == 0",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(item) for item in input_list]\n",
        "test": "assert     sort_sublists([['A','B','C'],['D','E','F']]) == [['A','B','C'],['D','E','F']]",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code goes here\n    return len([ele for ele in lst if ele])\n",
        "test": "assert     count([True, False, True, True]) == 3",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_lists([1,2,3], (1,2,3)) == [1,2,3,(1,2,3)]",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = list()\n    while len(num1)>0 and len(num2)>0 and len(num3)>0:\n        if num1[0]<num2[0]<num3[0]:\n            new_list.append(num1.pop(0))\n        elif num2[0]<num1[0]<num3[0]:\n            new_list.append(num2.pop(0))\n        else:\n            new_list.append(num3.pop(0))\n    if len(num1)>0:\n        new_list += num1\n    if len(num2)>0:\n        new_list += num2\n    if len(num3)>0:\n        new_list += num3\n    return new_list\n",
        "test": "assert     merge_sorted_list([0,0,0], [], [1]) == [0,0,0,1]",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s)\n    count = 0\n    for i in range(0,n):\n        if s[i] == '0':\n            s[i] = '1'\n        else:\n            s[i] = '0'\n        if s[i] == '1':\n            count += 1\n    return count\n    \n    \n    \n    \ndef OddNumOfRotations(a): \n    '''\n    Write a python program to find number of times a binary string can be rotated by taking input of a string. \n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == '0':\n            a[i] = '1'\n        else:\n            a[i] = '0'\n        if a[i] == '1':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    s = s.lower()\n    for i in range(0,len(s)):\n        if s[i] == 'a':\n            count += 1\n    return count\n    \n    \n    \n    \ndef odd_count_case_insensitive(s): \n    '''\n    Write a python function to find the number of occurrences of the letter A in a string that is case sensitive. \n    '''\n    count = 0\n    ",
        "test": "assert     odd_Equivalent(\"01010\", 1) == 1",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    mylist = []\n    for i in range(len(nestedlist)):\n        if isinstance(nestedlist[i], list):\n            mylist = mylist + common_in_nested_lists(nestedlist[i])\n        elif nestedlist[i] not in mylist:\n            mylist.append(nestedlist[i])\n    return mylist\n",
        "test": "assert     set(common_in_nested_lists([[1,2,3],[1,2,3],[1,2,3]])) == set([1,2,3]), 'incorrect'",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"4\") == True, \"Wrong output for check_integer('4')\"",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Your code here\n    for i in range(len(list1)):\n        if bool(list1[i])==True:\n            return False\n    return True\n",
        "test": "assert     empty_dit([]),     \"empty_dit should return True when given an empty list\"",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] * 10 + nums[1]\n    else:\n        a = nums[0] * 100\n        b = nums[1] * 10\n        c = nums[2]\n        return a + b + c\n",
        "test": "assert     tuple_to_int((1,2,3)) == 123",
        "num_ids": 2383,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for el in test_list:\n        return_list.append([float(i) for i in el])\n    return return_list\n",
        "test": "assert     list_to_float([[1,2],[3.0,4.5],[5,6],[7.0,8.0],[9,10.0]]) == [[1,2.0],[3.0,4.5],[5,6.0],[7.0,8.0],[9,10.0]], \"incorrect\"",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"a b c d\") == ['a', 'b', 'c', 'd']",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        middle = (left + right) // 2\n        \n        if arr[middle] == arr[middle + 1]:\n            left = middle + 1\n        elif arr[middle] == arr[middle - 1]:\n            right = middle - 1\n        else:\n            return arr[middle]\n    return arr[left]\n",
        "test": "assert     search([1,1,2,3,3,4,4,8,8]) == 1",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return -1\n    max_product = -1\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert     max_product_tuple([(-1, -2), (3, 4), (10, -12), (0, 0)]) == 24",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def divisors(num):\n        divisors_list = []\n        for i in range(1,num//2+1):\n            if num % i == 0:\n                divisors_list.append(i)\n        return divisors_list\n",
        "test": "assert ",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #a+bi\n    c = a+b*1j\n    #print(c)\n    return cmath.phase(c)\n",
        "test": "assert     angle_complex(1,0) == 0.0",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0 \n    count = 0\n    for i in range(len(string)): \n        if string[i] == '1': \n            count += 1\n        elif string[i] == '0': \n            count = 0\n        if count > max_length: \n            max_length = count\n    return max_length\n",
        "test": "assert     find_length(\"\") == 0",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    return math.gcd(a,b)\n",
        "test": "assert     sum(2,5)     == 1, \"function sum failed\"",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     (multiply_int(1, 3) == 3)",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str.split() if len(w)>n]\n",
        "test": "assert ",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 3:\n        return False\n    elif len(my_matrix) == 3:\n        total = sum(my_matrix[0])\n        for row in my_matrix:\n            if sum(row)!= total:\n                return False\n            elif sum(row) == total:\n                return True\n",
        "test": "assert     magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True, 'Test 1'",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(lambda: 0)\n    for n in nums:\n        dict[n] += 1\n    max_freq = 0\n    for i in dict:\n        if dict[i] > max_freq:\n            max_freq = dict[i]\n    for i in dict:\n        if dict[i] == max_freq:\n            return i\n            \ndef sum_of_digits(n):\n    '''\n    Write a function to sum all the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_of_digits(n//10)\n",
        "test": "assert     max_occurrences([3, 4, 4, 5, 3, 3]) == 3",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    str2 = list(str1)\n    i = 0\n    j = len(str2) - 1\n    while i < j:\n        if str2[i] not in vowels:\n            i += 1\n        elif str2[j] not in vowels:\n            j -= 1\n        else:\n            str2[i], str2[j] = str2[j], str2[i]\n            i += 1\n            j -= 1\n    return ''.join(str2)\n",
        "test": "assert     reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\nprint(tup_string(('a', 'b', 'c', 'd', 'e')))\n",
        "test": "assert     tup_string(('hello',)) == 'hello'",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negativenum += nums[i]\n    return negativenum\n",
        "test": "assert     sum_negativenum([1,2,3,4,5])==0",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "test": "assert     hexagonal_num(0) == 0, \"Incorrect for hexagonal_num(0)\"",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    num_zeroes = 0\n    for i in nums:\n        if i == 0:\n            num_zeroes += 1\n    return num_zeroes/len(nums)\n",
        "test": "assert     (zero_count([]) == 0)",
        "num_ids": 2394,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n:\n        if n & 1 == 0:\n            n >>= 1\n        else:\n            break\n    if n == 1:\n        return True\n    return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 3026,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(1) == 6.283185307179586",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n    #return set([item for sublist in test_list for item in sublist])\n",
        "test": "assert     extract_singly([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        j = 0\n        max = 0\n        while j < len(nums) - i:\n            if nums[j] > nums[max]:\n                max = j\n            j += 1\n        if max!= len(nums) - 1 - i:\n            nums = swap(nums, max, len(nums) - 1 - i)\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # if list1 is not None and list2 is not None and list3 is not None:\n    #     if list1 == list2:\n    #         if list1 == list3:\n    #             return len(list1)\n    #         else:\n    #             return count_samepair(list1,list3)\n    #     else:\n    #         if list1 == list3:\n    #             return count_samepair(list2,list1)\n    #         elif list2 == list3:\n    #             return count_samepair(list1,list2)\n    #         else:\n    #             return 0\n    # else:\n    #     return 0\n",
        "test": "assert     count_samepair([1,2,3],[1,2,3],[1,2,3])==6",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Abs_Diff=list()\n    Abs_Diff.append(arr[0])\n    Abs_Diff.append(arr[1])\n    Abs_Diff.append(abs(arr[0]-arr[1]))\n    for x in range(len(arr)):\n        for y in range(x+1,len(arr)):\n            if abs(arr[x]-arr[y])>Abs_Diff[2]:\n                Abs_Diff.pop()\n                Abs_Diff.pop()\n                Abs_Diff.append(abs(arr[x]-arr[y]))\n                Abs_Diff.append(arr[x])\n                Abs_Diff.append(arr[y])\n    return Abs_Diff[2]\n",
        "test": "assert     max_Abs_Diff([1, 1, 1, 1]) == 0, \"wrong answer, should be 0\"",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # we will have at most one solution\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return (x, y)\n",
        "test": "assert     find_solution(1, 2, 5) == (1, 2)",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "test": "assert     (remove_elements([1,2,3,4,5,6], [1,2,3,4,5,6]) == [])",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n):\n        s += n - 2 * i\n    return s\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    if l < 3:\n        print('Given length of a polygon has to be greater than 3. Not possible to calculate.')\n        return\n    a = (l * l) / (4 * tan(pi / l))\n    return a\n",
        "test": "assert     (area_polygon(3, 3) == 12 and",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Initialize sum and initialize sum1 and sum2 to zero \n    sum = 0\n    sum1 = 0\n    sum2 = 0\n    # If n is equal to 0, then return -1 \n    if n == 0: \n        return -1\n    # Find all divisors of n \n    for i in range(1, (n // 2) + 1): \n        if n % i == 0: \n            sum += i \n    # If the sum of all divisors of n equals to n, then the function returns True \n    if sum == n: \n        return True\n    # Find all divisors of n \n    for i in range(1, (n // 2) + 1): \n        if n % i == 0: \n            sum1 += i \n    # If the sum of all divisors of n equals to n, then the function returns True \n    if sum1 == n: \n        return True\n    # Find all divisors of n \n    for i in range(1, (n // 2) + 1): \n        if n % i == 0: \n            sum2 += i \n    # If the sum of all divisors of n equals to n, then the function returns True \n    if sum2 == n: \n        return True\n    # If the sum of all divisors of n doesn't equal to n, then the function returns False \n    return False\n",
        "test": "assert not div_sum(5) == [3, 6, 15], 'incorrect'",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_pos = []\n    for c in str1.lower():\n        if c in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n            char_pos.append(c)\n    return len(char_pos)\n",
        "test": "assert     count_char_position('a') == 1",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 1: return 0\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) & 1 == 0: return 2\n    return 0\n",
        "test": "assert     find_even_pair([1, 2, 3, 4, 5, 6]) == 2",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return (1 << (n-1).bit_length())\n",
        "test": "assert     next_power_of_2(2) == 2",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in a:\n        if i==x:\n            c+=1\n    return c\nprint(frequency([2,4,4,4,5,5,5],4))\n",
        "test": "assert     frequency([],'a') == 0",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1, 2, 3], 0, 2) == 7, \"Test failed\"",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "test": "assert     perimeter_pentagon(10) == 50",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('hello') == 0",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n",
        "test": "assert not check_type(['CSE-A', 'CSE-B', 'CSE-C', 1])",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # first and last elements\n    first = 0\n    last = n-1\n    while first < last:\n        mid = (first+last)//2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            last = mid\n        else:\n            first = mid + 1\n    if first!= n and arr[first] == x:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_majority([1, 2, 3, 4, 5, 5, 5, 5], 8, 6) == False, \"Check your function is_majority\"",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = bin(n)\n    s = s[2:]\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(1)     == 1",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    x = ''\n    for i in range(0,len(str)):\n        if i%2==0:\n            x += str[i]\n    return x\nprint(odd_values_string('python'))\n",
        "test": "assert     odd_values_string('python') == 'pto'",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #start writing your code here\n    n=bin(n)\n    l=bin(l)\n    r=bin(r)\n    return all(n[i]!=l[i] and n[i]!=r[i] for i in range(len(n)))\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(1, 1, 1) == False",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    def isNegative(x):\n        return x < 0\n    \n    return sorted(arr, key=isNegative)\n",
        "test": "assert     re_arrange_array([], 3) == []",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = \"\"\n    for letter in str1:\n        if letter == \" \":\n            result = result + char\n        else:\n            result = result + letter\n    return result\n",
        "test": "assert     replace_blank('  ','!') == '!!', 'incorrect'",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n",
        "test": "assert     larg_nnum([], 0) == []",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h\n",
        "test": "assert     lateralsuface_cylinder(0,0)==0",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert     volume_cube(1) == 1,     'volume_cube(1)'",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n&0xAAAAAAAA\n",
        "test": "assert     even_bit_set_number(0) == 0, \"Wrong result for even_bit_set_number(0)\"",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output_dict = {}\n",
        "test": "assert     {('a', 1), ('b', 2), ('c', 1), ('d', 1), ('e', 3), ('f', 1), ('g', 1), ('h', 3), ('i', 1), ('j', 1), ('k', 1), ('l', 1), ('m', 1), ('n', 1), ('o', 1), ('p', 1), ('q', 1), ('r', 1), ('s', 1), ('t', 1), ('u', 1), ('v', 1), ('w', 1), ('x', 1), ('y', 1), ('z', 1), ('A', 1), ('B', 2), ('C', 1)} == check_occurences([('a', 1), ('b', 2), ('c', 1), ('d', 1), ('e', 3), ('f', 1), ('g', 1), ('h', 3), ('i', 1), ('j', 1), ('k', 1), ('l', 1), ('m', 1), ('n', 1), ('o', 1), ('p', 1), ('q', 1), ('r', 1), ('s', 1), ('t', 1), ('u', 1), ('v', 1), ('w', 1), ('x', 1), ('y', 1), ('z', 1), ('A', 1), ('B', 2), ('C', 1)]), 'check_occurences'",
        "num_ids": 5056,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # count = 0\n    # for i in range(len(str)):\n    #     for j in range(i, len(str)):\n    #         if (str[i:j+1]):\n    #             count += 1\n    # return count\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if (str[i:j+1]):\n                count += 1\n    return count\n",
        "test": "assert     number_of_substrings(\"a\") == 1",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def search(sequence, start, end, m):\n        if end == n:\n            print(sequence)\n            return 1\n        elif start > m:\n            return 0\n        else:\n            return search(sequence + str(start), start + 1, end, m) + search(sequence, start + 1, end, m)\n",
        "test": "assert     get_total_number_of_sequences(8, 7) == 11, \"Wrong result for m=8 and n=7\"",
        "num_ids": 2328,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #list1.pop()\n    #list2.reverse()\n    #list1[-1:] = list2\n    #return list1\n    #use extend to concatenate two lists\n    list1[-1:] = list2\n    print(list1)\n    return list1\nreplace_list([1,2,3], [4,5,6])\n",
        "test": "assert     replace_list([1,2,3,4], [0,1,2,3]) == [1,2,3,0,1,2,3]",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n",
        "test": "assert     count_charac(\"abcdefg\") == 7, \"wrong result\"",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Import math module \n    # Return the next perfect square \n    \n    return int(math.sqrt(N))**2\n    ",
        "test": "assert     next_Perfect_Square(41) == 42",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    current_sum = 0\n    max_sum = 0\n    max_current_sum = 0\n    for i in range(0, len(arr)-1):\n        current_sum += arr[i]\n        max_current_sum = max(max_current_sum, current_sum)\n        if(i < len(arr)-1):\n            if(arr[i] < arr[i+1]):\n                current_sum = 0\n        if(max_current_sum > max_sum):\n            max_sum = max_current_sum\n    return max_sum\n",
        "test": "assert     max_sum([10, 70, 20, 30, 50, 11, 30]) == 90",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    guess = number / 2\n    difference = guess**2 - number\n    while difference!= 0:\n        guess = (guess + number/guess)/2\n        difference = guess**2 - number\n    return guess\n    \nif __name__ == \"__main__\":\n    print(\"The square root of 36 is\", babylonian_squareroot(36))\n    print(\"The square root of 25 is\", babylonian_squareroot(25))\n    print(\"The square root of 16 is\", babylonian_squareroot(16))\n    \n'''\nThe output is:\nThe square root of 36 is 6.0\nThe square root of 25 is 3.0\nThe square root of 16 is 2.0\n'''",
        "test": "assert ",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    table = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n):\n        table[i][i] = 1\n    for start in range(n-1, -1, -1):\n        for end in range(start+1, n):\n            if str[start] == str[end]:\n                table[start][end] = 2 + table[start+1][end-1]\n            else:\n                table[start][end] = max(table[start+1][end], table[start][end-1])\n    return table[0][n-1]\n",
        "test": "assert     lps('abdbc') == 3",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += 1/i\n    return sum\n",
        "test": "assert ",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    pointer1 = 0\n    pointer2 = 0\n    intersection_array = []\n    while(pointer1<len(array_nums1) and pointer2<len(array_nums2)):\n        if(array_nums1[pointer1] == array_nums2[pointer2]):\n            intersection_array.append(array_nums1[pointer1])\n            pointer1 +=1\n            pointer2 +=1\n        elif(array_nums1[pointer1] > array_nums2[pointer2]):\n            pointer2 +=1\n        elif(array_nums1[pointer1] < array_nums2[pointer2]):\n            pointer1 +=1\n    return intersection_array\n",
        "test": "assert     intersection_array([1,2,2,1], [2,2]) == [2,2], 'incorrect'",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X((1, 'X', 2, 'Y', 3, 'X', 'X', 'X'), 'X') == 4",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    \n    return [list[0]] + insert_element(list[1:],element)\n",
        "test": "assert     insert_element([], 4) == [4], \"insert_element([], 4) should be [4]\"",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = numbers.real\n    imag = numbers.imag\n    r = ((real ** 2) + (imag ** 2)) ** 0.5\n    t = cmath.phase(numbers)\n    return r, t\n    \nprint(convert(complex(-1.0, 3.0)))\nprint(convert(complex(-1.0, -3.0)))\nprint(convert(complex(2.0, 3.0)))\nprint(convert(complex(-4.0, -5.0)))\nprint(convert(complex(4.0, -5.0)))\nprint(convert(complex(0.0, -3.0)))\nprint(convert(complex(-0.0, 3.0)))\nprint(convert(complex(-0.0, 0.0)))\nprint(convert(complex(0.0, 0.0)))\n",
        "test": "assert     (convert(0j) == (0.0, 0.0)), 'incorrect'",
        "num_ids": 2698,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "test": "assert     count_integer([1.1, 2.2, 3.3, 4.4, 5.5]) == 0, 'Test failed!'",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    if len(l) < n:\n        print(\"Error: length of list must be equal to or larger than the length of the combination.\")\n        return\n    \n    for comb in combinations_with_replacement(l, n):\n        print(comb)\n",
        "test": "assert     combinations_colors(['r', 'g', 'b'], 3) == [('r', 'r', 'r'), ('r', 'r', 'g'), ('r', 'r', 'b'), ('r', 'g', 'r'), ('r', 'g', 'g'), ('r', 'g', 'b'), ('r', 'b', 'r'), ('r', 'b', 'g'), ('r', 'b', 'b'), ('g', 'r', 'r'), ('g', 'r', 'g'), ('g', 'r', 'b'), ('g', 'g', 'r'), ('g', 'g', 'b'), ('g', 'b', 'r'), ('g', 'b', 'g'), ('g', 'b', 'b'), ('b', 'r', 'r'), ('b', 'r', 'g'), ('b', 'r', 'b'), ('b', 'g', 'r'), ('b', 'g', 'g'), ('b', 'g', 'b'), ('b', 'r', 'r'), ('b', 'r', 'g'), ('b', 'r', 'b'), ('b', 'g', 'r'), ('b', 'g', 'g'), ('b', 'g', 'b')]",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    else:\n        nums = []\n        for i in range(n):\n            if i == 2:\n                nums.append(2)\n            if i!= 2 and i % 2!= 0:\n                nums.append(i)\n        return len(nums)\n",
        "test": "assert     count_Primes_nums(5) == 3",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(1, 2) == (2, 1)",
        "num_ids": 207,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if(test_tup1[0] > test_tup2[0]):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert     maximize_elements((1,2,3), (4,5,6,7)) == (4,5,6,7)",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    if n < 3:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return 2\n    else:\n        ans = n\n        # Find s and t such that the equation\n        # (n^2 - 1) / 2n is a quadratic polynomial\n        s = 1\n        t = n % 6\n        if t == 1 or t == 5:\n            s = -1\n        elif t == 2:\n            s = 0\n        elif t == 3:\n            s = 1\n        # Solve the quadratic equation\n        t0 = (-1 + (1 + 8 * n) ** 0.5) / 2\n        t = t0 - s * (((1 + t0 ** 2) / 2) ** 0.5 - 1) / 2\n        ans += s * (((1 + t ** 2) / 2) ** 0.5 - 1) / 2\n        ans += t\n    return int(ans)\n    \n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i]/test_tup2[i] for i in range(len(test_tup1)))\n",
        "test": "assert     division_elements((1, 1), (2, 2)) == (0.5, 0.5)",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return list1, []\n    elif len(list1) > L:\n        first_part, second_part = list1[:L], list1[L:]\n        return first_part, second_part\n    else:\n        return list1, []\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 3) == ([1, 2, 3], [4, 5, 6, 7, 8]) ",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age <= 2:\n        age_in_d_y = h_age * 10.5\n    else:\n        age_in_d_y = 21 + (h_age - 2) * 4\n        \n    return age_in_d_y\n    \n    \ndef cat_age(m_age):\n    '''\n    Write a function to calculate a cat's age in cat's years.\n    '''\n    \n    if m_age <= 2:\n        age_in_c_y = m_age * 12.0\n    else:\n        age_in_c_y = (m_age - 2) * 8 + 21\n        \n    return age_in_c_y\n    \n    \ndef get_age_in_human_years(pet):\n    '''\n    Write a function that converts the age of a pet from dog years to human years.\n    '''\n    \n    if pet.species == 'dog':\n        age_in_h_y = dog_age(pet.age)\n    elif pet.species == 'cat':\n        age_in_h_y = cat_age(pet.age)\n    else:\n        raise ValueError('Invalid species.')\n        \n    return age_in_h_y\n    \n    \ndef get_age_in_dog_years(pet):\n    '''\n    Write a function that converts the age of a pet from human years to dog years.\n    '''\n    \n    if pet.species == 'dog':\n        age_in_d_y = pet.age\n    elif pet.species == 'cat':\n        age_in_d_y = cat_age(pet.age)\n    else:\n        raise ValueError('Invalid species.')\n        \n    return age_in_d_y\n    \n    \ndef get_age_in_cat_years(pet):\n    '''\n    Write a function that converts the age of a pet from human years to cat years.\n    '''\n    \n    if pet.species == 'dog':\n        age_in_c_y = dog_age(pet.age)\n    elif pet.species == 'cat':\n        age_in_c_y = pet.age\n    else:\n        raise ValueError('Invalid species.')\n        \n    return age_in_c_y\n    \n",
        "test": "assert ",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    i = 0\n    while i < len(S):\n        L.append(S[i:i+step])\n        i += step\n    return L\n",
        "test": "assert     list_split([1, 2, 3, 4], 2) == [[1, 2], [3, 4]], \"Test 1 failed\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n    return total\n",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return 3 * find_star_num(n - 1) + 1\n",
        "test": "assert     find_star_num(1) == 1, \"The 1st star number is 1\"",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_numbers += arr[i]\n",
        "test": "assert ",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # print(n)\n    return sum([i**5 for i in range(1,n+1) if i%2==0])",
        "test": "assert     even_Power_Sum(1) == 0, \"Incorrect\"",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output_list = []\n    for element in test_list:\n        output_list.append(element[1])\n    return output_list\n",
        "test": "assert     rear_extract([(1, 2), (3, 4), (5, 6), (7, 8)]) == [2, 4, 6, 8], \"Not a valid result\"",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtracted_list = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(0, len(test_tup1)):\n            subtracted_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(subtracted_list)\n",
        "test": "assert ",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    #the sum of binomial coefficients of (2k)\n    k = math.floor(n/2)\n    sum = 0\n    for i in range(0,k+1):\n        sum = sum + math.factorial(n)/(math.factorial(n-2*i)*math.factorial(i))\n    \n    return sum\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume = pi*r**2*h\n    return volume\n",
        "test": "assert     volume_cylinder(1,2) == volume_cylinder(1,2)",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "test": "assert     dict_filter({},0) == {}",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    new_list = list(test_tup)\n    print(new_list)\n    count = 0\n    for i in new_list:\n        if i == 1:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements((0,0,0,1)) == 1",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialise count\n    count = 0\n    \n    # calculate nth decagonal\n    nth = 0\n    while count < n:\n        nth += 1\n        count += 10\n    \n    return nth\n",
        "test": "assert     is_num_decagonal(0) == 0",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    position = -1\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            found = True\n            position = index\n            break\n    return (found, position)\n",
        "test": "assert     sequential_search([1,2,3,4,5], 6) == (False, -1)",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_list = test_list[:]\n    temp_list.sort()\n    for i in range(1,len(temp_list)):\n        if temp_list[i] == temp_list[i-1]:\n            return False\n    return True\n",
        "test": "assert     all_unique([1,1,2,3,4,5]) == False",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n",
        "test": "assert     sub_list([], []) == []",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in str(n):\n        if int(i) > int(n):\n            return False\n    return True\n",
        "test": "assert     validate(1234) == True",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([i==element for i in list])\n",
        "test": "assert     check_element([1,1,1,1], 1) == True, \"Wrong output for [1,1,1,1], 1\"",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"ab{2}|ab{3}\"\n    if re.search(pattern,text):\n        return True\n    return False\n",
        "test": "assert     text_match_two_three(\"b\") == False, \"Wrong answer\"",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_array = [0]*n\n    for i in range(n):\n        sum_array[i] = a[i]\n        if (i-k+1 >= 0):\n            sum_array[i] += sum_array[i-k+1]\n    max_sum = sum_array[0]\n    for i in range(n):\n        if (sum_array[i] > max_sum):\n            max_sum = sum_array[i]\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([2, 2, 2, 2, 2], 5, 2) == 10",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if n<0:\n        return \"Invalid Input\"\n    else:\n        sum_sq = 0\n        for i in range(2,n+1):\n            if i%2 == 0:\n                sum_sq = sum_sq + i*i\n            else:\n                pass\n        return sum_sq\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        length = 0\n        for j in list1[i]:\n            length += 1\n        if length > max_len:\n            max_len = length\n            max_list = list1[i]\n    return max_list\n",
        "test": "assert ",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # number of ways to paint the fence\n    ways = [0] * (k + 1) \n    # ways[0] is for no color, ways[1] is for 1 color, ways[2] is for 2 colors\n    ways[0], ways[1], ways[2] = 1, k, k * (k - 1)\n    # start from 3rd color since the first and last colors are not included in the problem\n    # ways[i] will be ways[i - 1] + ways[i - 2] - ways[i - 3]\n    for i in range(3, n + 1): \n        ways[i] = ways[i - 1] + ways[i - 2] - ways[i - 3]\n    return ways[n] \n    \ndef count_no_of_ways_tab(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # number of ways to paint the fence\n    ways = [0] * (k + 1) \n    # ways[0] is for no color, ways[1] is for 1 color, ways[2] is for 2 colors\n    ways[0], ways[1], ways[2] = 1, k, k * (k - 1)\n    # start from 3rd color since the first and last colors are not included in the problem\n    # ways[i] will be ways[i - 1] + ways[i - 2] - ways[i - 3]\n    for i in range(3, n + 1): \n        ways[i] = ways[i - 1] + ways[i - 2] - ways[i - 3]\n    return ways[n] \n    \ndef count_no_of_ways_mem(n, k, cache): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # number of ways to paint the fence\n    if n in cache:\n        return cache[n]\n    ways = 0\n    if n == 0:\n        ways = 1\n    elif n == 1:\n        ways = k\n    elif n == 2:\n        ways = k * (k - 1)\n    else:\n        ways = count_no_of_ways_mem(n - 1, k, cache) + count_no_of_ways_mem(n - 2, k, cache) - count_no_of_ways_mem(n - 3, k, cache)\n    cache[n] = ways\n    return ways\n    \ndef count_no_of_ways_tab_mem(n, k, cache): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # number of ways to paint the fence\n    if n in cache:\n        return cache[n]\n    ways = [0] * (k + 1) \n    # ways[0] is for no color, ways[1] is for 1 color, ways[2] is for 2 colors\n    ways[0], ways[1], ways[2] = 1, k, k * (k - 1)\n    # start from 3rd color since the first and last colors are not included in the problem\n    # ways[i] will be ways[i - 1] + ways[i - 2] - ways[i - 3]\n    for i in range(3, n + 1): \n        ways[i] = ways[i - 1] + ways[i - 2] - ways[i - 3]\n    cache[n] = ways[n]\n    return ways[n] \n",
        "test": "assert     count_no_of_ways(2, 2)         == 2",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "test": "assert     find(1,1) == 1, 'incorrect'",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # w=4\n    # h=5\n    # h=math.sqrt(w**2+h**2)\n    h=w**2+h**2\n    h=h**0.5\n    return h\n",
        "test": "assert     otherside_rightangle(3,4) == 5, \"incorrect\"",
        "num_ids": 2171,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the variable to store the max value\n    max_val = 0\n    # Get the max value of the list\n    for i in range(len(listval)):\n        if type(listval[i]) == list:\n            if max_val < max_val(listval[i]):\n                max_val = max_val(listval[i])\n        else:\n            if max_val < listval[i]:\n                max_val = listval[i]\n    # Return the max value\n    return max_val\n",
        "test": "assert     max_val([1,2,3]) == 3",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number + 1):\n        if (number % i == 0):\n            result += i\n    return result\n",
        "test": "assert     sum_div(1) == 1",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    def merge(arr, start, mid, end): \n        left = arr[start:mid]\n        right = arr[mid:end]\n        k = start\n        i = 0\n        j = 0\n        inversions = 0\n        while(i < len(left) and j < len(right)): \n            if(left[i] <= right[j]): \n                arr[k] = left[i] \n                i += 1\n            else: \n                arr[k] = right[j] \n                j += 1\n                inversions += (mid - start) \n                k += 1\n        while(i < len(left)): \n            arr[k] = left[i] \n            i += 1\n            k += 1\n        while(j < len(right)): \n            arr[k] = right[j] \n            j += 1\n            k += 1\n        return inversions \n    \n    def merge_sort(arr, start, end): \n        if(start < end): \n            mid = int((start + end) / 2)\n            inversions = merge_sort(arr, start, mid) \n            inversions += merge_sort(arr, mid + 1, end) \n            inversions += merge(arr, start, mid + 1, end) \n            return inversions \n        return 0\n    \n    return merge_sort(arr, 0, len(arr))\n    \narr = [3, 4, 2, 1]\nprint(get_Inv_Count(arr))\n",
        "test": "assert     get_Inv_Count([1, 2, 3, 4, 5, 6, 7]) == 0",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
        "test": "assert     flatten_list([[1,2,3], [4, [5, 6]]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sum = 0\n    for x in stdata:\n        sum = x[1] + sum\n    return sum\n",
        "test": "assert     max_aggregate([(1, 5), (2, 1), (3, 3), (4, 9), (5, 4)]) == (9, 1)",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return count_binary_seq(n-1)+count_binary_seq(n-1)\n",
        "test": "assert     count_binary_seq(1)             == 1",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        depth = 0\n        for key in d:\n            if type(d[key]) is dict:\n                depth += dict_depth(d[key])\n            else:\n                depth += 1\n        return depth\n    else:\n        return 1\n",
        "test": "assert     dict_depth({\"a\": 1}) == 1",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index > len(ranges) :\n        print(\"Invalid Index\")\n    else :\n        num_rotations = 0\n        while(True) :\n            if (arr[ranges[index]] == 0 and ranges[index] == index) :\n                return num_rotations\n            num_rotations = num_rotations + 1\n            ranges[index] = ranges[index] + num_rotations\n            if ranges[index] == len(arr) :\n                ranges[index] = 0\n            if arr[ranges[index]] == 0 :\n                ranges[index] = index\n",
        "test": "assert     find_Element([1,2,3,4,5,6],3,2,4) == 5, 'Test 2'",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for word in words:\n        if word[0] == \"p\" or word[0] == \"P\":\n            p.append(word)\n    return p",
        "test": "assert     start_withp(['python', 'pig', 'cow', 'duck', 'chicken']) == ['python', 'pig']",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    max_sum = 0\n    for i in range(1, n+1):\n        if i > k:\n            break\n        if a[i-1] < a[n-i+index+1]:\n            temp = max_sum_increasing_subseq(a, n-i, index, k)\n            if temp >= max_sum:\n                max_sum = temp\n    if k <= index:\n        temp = max_sum_increasing_subseq(a, n-1, index+1, k)\n        if temp >= max_sum:\n            max_sum = temp\n    return max_sum\n",
        "test": "assert ",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_length = len(tuplex)\n    new_tuplex = []\n    for i in range(tuplex_length):\n        new_tuplex.append(tuplex[i][0:m])\n    for i in range(m+n,m*n):\n        new_tuplex.append(tuplex[i][0:n])\n    return new_tuplex\n",
        "test": "assert     colon_tuplex(((1,2,3),(4,5,6)),2,1) ",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N < 0:\n        return None\n    else:\n        a, b = [], []\n        for i in range(N):\n            a.append(nums1[i])\n            b.append(nums2[i])\n",
        "test": "assert     large_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(1,2) == 2",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('Python') == ('P', 'y', 't', 'h', 'o', 'n'), 'Not a tuple'",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # create a mask to flip the right most unset bit\n    mask = 1 << n\n    # perform an XOR with the mask\n    return mask ^ n\n",
        "test": "assert     set_left_most_unset_bit(0) == 1, \"error in set_left_most_unset_bit\"",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Your code here\n    import math\n    volume = 1/3*math.pi*r**2*h\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #Your code here\n    import math\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Your code here\n    import math\n    volume = 4/3*math.pi*r**3\n    return volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    #Your code here\n    import math\n    volume = l**3\n    return volume\ndef area_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    #Your code here\n    import math\n    area = l**2\n    return area\ndef area_rectangle(l,w):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #Your code here\n    import math\n    area = l*w\n    return area\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    #Your code here\n    import math\n    area = 1/2*b*h\n    return area\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    #Your code here\n    import math\n    area = b*h\n    return area\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    #Your code here\n    import math\n    area = 1/2*(a+b)*h\n    return area\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    #Your code here\n    import math\n    area = math.pi*r**2\n    return area\ndef area_ellipse(r,h):\n    '''\n    Write a function to find the area of a ellipse.\n    '''\n    #Your code here\n    import math\n    area = math.pi*r*h\n    return area\ndef area_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    #Your code here\n    import math\n    area = 1/2*a*b\n    return area\ndef area_kite(a,b):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    #Your code here\n    import math\n    area = 1/2*a*b\n    return area\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    #Your code here\n    import math\n    area = 1/2*a**2*math.sqrt(3)\n    return area\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a heptagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(5)\n    return area\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    #Your code here\n    import math\n    area = 1/3*a**2*math.sqrt(8)\n    return area\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a nonagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(9)\n    return area\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a decagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(10)\n    return area\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a nonagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(9)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    #Your code here\n    import math\n    area = 1/3*a**2*math.sqrt(8)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2*math.sqrt(11)\n    return area\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a dodecagon.\n    '''\n    #Your code here\n    import math\n    area = 1/4*a**2*math.sqrt(12)\n    return area\ndef area_icosagon(a):\n    '''\n    Write a function to find the area of a icosagon.\n    '''\n    #Your code here\n    import math\n    area = 1/6*a**2",
        "test": "assert     volume_cone(2,3) == math.pi*(2**2)*(3/3)",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(n)\n    if n==1:\n        return 1\n    elif n>=0:\n        max_power = n.bit_length()\n        return max_power\n    else:\n        return \"The number is not positive\"\n",
        "test": "assert     highest_Power_of_2(12) == 4, \"Error\"",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(2) == 3",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "test": "assert     add_string([\"a\",\"b\",\"c\"], \"Hello\") == ['Hello', 'Hello', 'Hello']",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = dict(zip(l1, zip(l2,l3)))\n    return my_dict\n",
        "test": "assert     convert_list_dictionary([], [], []) == {}, 'Empty list should return empty dict'",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a = [0,1]\n    i = 2\n    while i <= n:\n        a.append(max(((a[i//2] + a[i//3] + a[i//4] + a[i//5])), i))\n        i = i + 1\n    return a[n]\n",
        "test": "assert     get_max_sum(0) == 0 ",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = []\n    for x in input_list:\n        length.append(len(x))\n    return input_list[length.index(max(length))]\n",
        "test": "assert     max_length_list([]) == []",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # print(set(test_tup))\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert     (check_distinct((1,2,3,4)) == True)",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n",
        "test": "assert ",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex,string))\n    \nprint(check_char(\"aa\")) # True\nprint(check_char(\"ab\")) # False\nprint(check_char(\"a\")) # True\nprint(check_char(\"abba\")) # True\nprint(check_char(\"baaa\")) # False\n",
        "test": "assert     check_char(\"aa\") == True",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    if (numbers[1] - numbers[0]) % 2 == 0:\n        return (numbers[1] - numbers[0]) / 2 + numbers[0]\n    else:\n        return (numbers[1] - numbers[0]) / 2 + numbers[0] + 1/2\n",
        "test": "assert     median_numbers(1,2,2) == 2.0, 'incorrect implementation'",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in nums:\n        sum_of_digits += sum([int(j) for j in str(i)])\n    return sum_of_digits\n",
        "test": "assert     sum_of_digits([]) == 0, 'Error on case, empty list.'",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((3, 4), (1, 2)) == (1, 4),'reverse'",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n    \ntest_list = [(1, 1), (1, 1), (2, 2), (2, 2), (2, 2)]\nprint(extract_freq(test_list))",
        "test": "assert     extract_freq([(1, 2), (2, 3), (3, 3), (1, 1), (3, 2), (1, 2), (3, 3), (3, 2), (1, 3), (2, 1)]), 2",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([sum(x) for x in zip(test_tup1, test_tup2)])\n",
        "test": "assert ",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(3,6) == 3",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if set(tuplex).intersection(tuple1):\n        return True\n    else:\n        return False\n    # Function to check whether an element exists in a tuple.\n    # tuplex = tuple\n    # tuple1 = tuple\n",
        "test": "assert     check_tuplex((\"1\",\"2\",\"3\",\"4\"),(\"1\",\"2\",\"3\",\"4\")) == True",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    return True\n",
        "test": "assert     find_Parity(1) == 1",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    for i in str(n):\n        digits.append(int(i))\n    digits.sort()\n    digits.reverse()\n    new_digits = []\n    for i in digits:\n        new_digits.append(str(i))\n    num = int(''.join(new_digits))\n    return num\n",
        "test": "assert     rearrange_bigger(12) == 21",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) > len(nums2):\n        temp = nums1\n        nums1 = nums2\n        nums2 = temp\n    nums1.sort()\n    nums2.sort()\n    result = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(result) < k:\n                result.append([nums1[i], nums2[j]])\n            elif nums1[i] + nums2[j] < result[0][0] + result[0][1]:\n                heapq.heapreplace(result, [nums1[i], nums2[j]])\n    return result\n",
        "test": "assert     k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([element[0]*element[1] for element in list1])\n",
        "test": "assert     min_product_tuple([(1, 2), (2, 3), (3, 4), (4, 5)]) == 2",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for i in listval:\n        if i < val:\n            val = i\n    return val\n",
        "test": "assert     min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'(_\\w)', lambda x:x.group(1)[1].upper(), word)\n    return word\n",
        "test": "assert     snake_to_camel('the_stealth_warrior') == 'theStealthWarrior'",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l)==0:\n        return []\n    else:\n        if l[0] % 2 == 0:\n            return [l[0]] + remove_odd(l[1:])\n        else:\n            return remove_odd(l[1:])\n",
        "test": "assert     remove_odd([4, 1, 2, 3, 5]) == [4, 2, 3], \"remove_odd test 2 failed\"",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 0) == (1, 2)",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1,2,3],[1,2,3]) == True",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # initialize the result\n    highest_product = -1\n    # iterate through the array\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > highest_product:\n                highest_product = product\n    return highest_product\n",
        "test": "assert     max_Product([3,-1,4,6]) == 24",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = dict() \n    for item in Input: \n        if item[0] in d.keys(): \n            d[item[0]] += 1\n        else: \n            d[item[0]] = 1\n    return max(d, key = lambda key: d[key])\n",
        "test": "assert     group_tuples( [('a', 'b'),('a', 'b'),('c', 'd'),('e', 'f')] ) == 'a'",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i)>max:\n            max = len(i)\n            max_str = i\n    return max_str\n",
        "test": "assert     Find_Max(['a', 'a']) == 'a', \"Find_Max(['a', 'a']) failed\"",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    sum_rounded = 0\n    \n    for i in list1:\n        sum_rounded += round(i)\n    \n    return sum_rounded*len(list1)\n    \nprint(round_and_sum([1.2, 2.4, 3.7]))\nprint(round_and_sum([5.2, 4.9, 3.4, 3.1, 3.8]))\nprint(round_and_sum([2.2, 4.5, 3.9, 1.7, 4.3, 2.1, 2.9]))\n",
        "test": "assert     round_and_sum([]) == 0",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #n = 10\n    return(n**3)\n",
        "test": "assert     cube_Sum(2) == 8",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return(delimiter.join(test_tup))\n",
        "test": "assert     concatenate_tuple(('1', '2', '3'))         == '1,2,3'",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #p = 1\n    #Sum = 0\n    #for i in range(n):\n    #    p = p*(i+1)\n    #    Sum = Sum + p\n    #print(Sum)\n    #Average = Sum/n\n    #print(Average)\n    #return(Average)\n    print(sum(i**3 for i in range(1,n+1)))\n    return(sum(i**3 for i in range(1,n+1)))\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear(('I', 'am', 'a', 'boy')) == 'boy'",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count = count + 1\n    return count\n    ",
        "test": "assert     count_element_in_list([[1,2], [2,1], [1,2,1,2,1]], 3) == 0, 'fails'",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if type(nums)!= list:\n        return 'Please pass a list of integers.'\n    return [i for i in nums if i % 2!= 0]\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4]) == [1, 3]",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    # dt = list(map(int,dt))\n    return dt[2]+'-'+dt[1]+'-'+dt[0]\n",
        "test": "assert     change_date_format('1999-12-30') == '30-12-1999'",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 0:\n        return []\n",
        "test": "assert ",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x & y, test_tup1, test_tup2))\n",
        "test": "assert     and_tuples((0, 0), (0, 0)) == (0, 0)",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4 * a * c\n    if disc < 0: \n        return (0,0)\n    else:\n        return (b - disc**0.5) / (2 * a), (b + disc**0.5) / (2 * a)\n",
        "test": "assert     parabola_directrix(1, 2, 1) == (1, 1)",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2))!= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     common_element([1, 2, 3], [2, 4]) == True, 'error1'",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2)*height\n",
        "test": "assert     median_trapezium(1,1,1) == 1.0, \"Wrong result\"",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in arr:\n        if i > number:\n            flag = True\n            return flag\n    return flag\n",
        "test": "assert     (check_greater([1, 2, 3, 4, 5], 7) == False)",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.findall(text)\n    return result\n",
        "test": "assert not text_match_one(\"aacdbcdbbdcb\")",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = -n\n    return (n%10)\n",
        "test": "assert     last_Digit(39) == 9",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "test": "assert     neg_nos([1,2,3,-4,-5]) == [-4,-5], 'neg_nos test 2'",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #start writing your code here\n    l=[]\n    for i in str1:\n        if i not in l:\n            l.append(i)\n    str1=\"\".join(l)\n    return str1\n",
        "test": "assert     remove_odd('') == ''",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = 0\n    for elem in test_list:\n        if (elem[0], elem[1]) in test_list:\n            bidirectional += 1\n    return bidirectional\n",
        "test": "assert     count_bidirectional(((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (1, 10))) == 6",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # Hint: You can use the'sum' function to find the sum of the list of numbers.\n    \n    # Need to use some kind of for loop.\n    \n    if not L:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    \n    else:\n        return multiple_to_single(L[:-1]) * 10 + L[-1]\n",
        "test": "assert     multiple_to_single([]) == 0",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    if not type(text) == str:\n        return None\n    # text = text.lower()\n    # text = re.sub(r'[^\\w\\s]', '', text)\n    for i, word in enumerate(text.split()):\n        if re.match(r'^[a-z]*(?=[A-Z])', word):\n            return i, text.split()[i]\n",
        "test": "assert     find_adverb_position('I cannot go anywhere.') == (0, 16)",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert     surfacearea_cube(3) == 54, \"Test failed: surfacearea_cube(3)\"",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert     positive_count([1,2,3,4,5]) == 1",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = list1[0]\n    for i in range(0,len(list1)):\n        if(list1[i] < max):\n            max = list1[i]\n    return max\n",
        "test": "assert     largest_neg([1, 2, 3, 0, -2]) == -2, 'incorrect'",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(tuple(i[:K]))\n    return new_list\n",
        "test": "assert     trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 3) == [(1, 2, 3), (5, 6, 7), (9, 10, 11)]",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if(len(test_tup1)!= len(test_tup2)):\n        return \"Tuple not of equal length\"\n    else:\n        result = tuple(i*j for i,j in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert     index_multiplication(tuple1, tuple2) == tuple(map(lambda x, y: x * y, tuple1, tuple2))",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) \n    for k, v in tup.items(): \n        if k in c:\n            print(k, \" : \", v*c[k]) \n        else:\n            print(k, \" : \", 0) \n",
        "test": "assert     count_Occurrence([1,2,3], (1,2,3,4)) == (3, 1, 1)",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes_list = [num ** 3 for num in nums]\n    return cubes_list\n",
        "test": "assert     cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 2)\n",
        "test": "assert     cal_sum(3) == 4",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    length = len(str)\n    while length > l:\n        str.pop(0)\n        length = len(str)\n    return str\n",
        "test": "assert     extract_string(['12345', 'asd'], 0) == []",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = ''.join(text1.split())\n    return text1\n",
        "test": "assert     remove_whitespaces('Hi ') == 'Hi'",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(40,40)     ==     0",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            factors.append(i)\n    sumoffactors = 0\n    for i in factors : \n        if i % 2 == 0 : \n            sumoffactors += i\n    return sumoffactors\n",
        "test": "assert     sumofFactors(0)     == 0,    'function is incorrect'",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)):\n        if re.search('[z]', text[i]):\n            return True\n    return False\n",
        "test": "assert     text_match_wordz('the quick zebra') == True",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(0) == False     #monthnumber cannot be 0",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_stringlist = list()\n    for string in stringlist:\n        new_stringlist.append(string[::-1])\n    return new_stringlist\n",
        "test": "assert     reverse_string_list([\"abc\", \"def\", \"ghi\"]) == [\"cba\", \"fed\", \"ihg\"]",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if(len(lst) == 0):\n        return []\n    elif(len(lst) == 1):\n        return lst\n    elif(len(lst) == 2):\n        if(lst[0] <= lst[1]):\n            return lst\n        else:\n            return lst[::-1]\n    else:\n        lst1 = lst[:len(lst)//2]\n        lst2 = lst[len(lst)//2:]\n        lst1 = Find_Min(lst1)\n        lst2 = Find_Min(lst2)\n        return Find_Merge(lst1,lst2)\ndef Find_Merge(lst1,lst2):\n    '''\n    Write a python function to find a sublist with minimum length from two sublists.\n    '''\n    if(len(lst1) == 0):\n        return lst2\n    elif(len(lst2) == 0):\n        return lst1\n    elif(lst1[-1] <= lst2[-1]):\n        return lst1 + [lst2[-1]] + Find_Merge(lst1,lst2[:-1])\n    else:\n        return lst2 + [lst1[-1]] + Find_Merge(lst1[:-1],lst2)",
        "test": "assert     Find_Min([ [3,1,5],[2,6,8],[9,7,1],4]) == 4",
        "num_ids": 2808,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(4,3)         == 12, \"Error\"",
        "num_ids": 161,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n",
        "test": "assert     (remove_uppercase('hello world') =='hello world')",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "test": "assert     Extract([[1, 2], [3], [4, 5, 6]]) == [1, 3, 4]",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr('abcdefg') == 0",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(len(list1) + 1):\n        for j in itertools.combinations(list1, i):\n            comb_list.append(j)\n    return comb_list\n",
        "test": "assert     combinations_list([1, 2]) == [[1, 2]], \"Not a valid solution\"",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    max_prod = max(arr[0], arr[1])\n    min_prod = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        if arr[i] < 0:\n            max_prod = max(arr[i], max_prod)\n            min_prod = min(arr[i], min_prod)\n        else:\n            temp_max = max(arr[i], max_prod*arr[i], min_prod*arr[i])\n            temp_min = min(arr[i], min_prod*arr[i], max_prod*arr[i])\n            max_prod = temp_max\n            min_prod = temp_min\n    return max_prod\n",
        "test": "assert     max_subarray_product([2, -5, -2, -4, 3]) == 6",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == len(set(dict.values())):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_value({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 5) == True, \"Wrong output\"",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x: y for x, y in dict1.items() if y!= ''}\n",
        "test": "assert     {} == drop_empty({})",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 1:\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n",
        "test": "assert     max_product([7,2,3,9,1]) == None, \"a list of positive numbers\"",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    return sum(test_tup[0:length-1]) + sum(test_tup[1:length])\n",
        "test": "assert     add_pairwise((5, 2, 3, 1, 4, 7, 8, 9, 10)) == ([6, 4, 8, 10], 30)",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr: \n        result = result*i % n\n    return result \n",
        "test": "assert     find_remainder([1, 1], 2) == 1",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l),max(l)+1))\n",
        "test": "assert     check_Consecutive([1,2,3,4,5,6])==True",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for test in test_list1:\n        if test in test_list2:\n            intersection.append(test)\n    return intersection\n",
        "test": "assert ",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char(\"Hello world\",'1','1') == \"Hello world\"",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(),key=lambda x: x[1],reverse=True))\n",
        "test": "assert     sort_counter({2:5, 1:3, 0:1, -1:1, -2:1, -3:1}) == {-3:1, -2:1, -1:1, 0:1, 1:3, 2:5}",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_sum = 0\n    for i in nums:\n        num_sum += i\n    return num_sum\n",
        "test": "assert     big_sum([]) == 0, \"empty array\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('HELLO') == 'hello'",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1)==1:\n        return 'Not a string'\n    else:\n        str_arr = str1.split(' ')\n        final_str = ''\n        for i in str_arr:\n            if len(i)>1:\n                for j in i:\n                    if not j.islower():\n                        final_str += j\n                if final_str!= '':\n                    final_str +=''\n        return final_str\n",
        "test": "assert     remove_lowercase('') == ''",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for n in list:\n        if n % 2!= 0:\n            odds.append(n)\n    return odds\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    a = 0\n    b = 0\n    for i in range(n+1) :\n        a += i ** 3\n        b += i\n    return (a - b * b)\n",
        "test": "assert     difference(1)     == 0,    \"Wrong answer for difference(1)\"",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    d = dict()\n    for i in range(0,N) :\n        d[A[i]] = d.get(A[i],0) + 1\n    \n    # print(d)\n    \n    # for key in d :\n    #     if key%2!=0 :\n    #         print(d[key])\n    \n    \n    l = []\n    for key in d :\n        if key%2!=0 :\n            l.append(d[key])\n    \n    return (len(l)*(len(l)-1))/2\n",
        "test": "assert     find_Odd_Pair([5, 2, 2, 3, 4, 5], 5) == 1, \"Incorrect\"",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(c.upper() if c.islower() else c.lower() for c in string)\n",
        "test": "assert     toggle_string(\"A\") == \"a\"",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i,j in zip(str(n1), str(n2))])\n",
        "test": "assert     digit_distance_nums(5, 6) == 1",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = 0\n    for i in range(0, size):\n        curr_sum = curr_sum + a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7) == 7, 'Check failed!'",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = test_tup1 + test_tup2\n    union_list = sorted(set(union_list))\n    return tuple(union_list)\n    \n",
        "test": "assert     union_elements((1, 2, 3), (2, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = len(lst)\n    max_length = 0\n    for i in range(l):\n        for j in range(i, l):\n            if len(lst[i:j + 1]) > max_length:\n                max_length = len(lst[i:j + 1])\n    return max_length\n",
        "test": "assert     Find_Max_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3, \"Check the Input List\"",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\\"(.+?)\\\"', text)\n",
        "test": "assert     extract_values('\"Hello\" World') == [\"Hello\"]",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #print (arr)\n    #arr.sort()\n    #print (arr)\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n",
        "test": "assert     count_Pairs([1,1,2,2],4)==4, 'error'",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = int(n / 10)\n    return sum(digits)\n",
        "test": "assert     sum_digits(37) == 10, \"Wrong sum_digits\"",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif len(list1) == 1:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            list1 = list1[1:]\n            return issort_list(list1)\n        else:\n            return False\n",
        "test": "assert     issort_list([1,2,3,4]) == True",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_ = []\n    for x in range(length):\n        dict_ = {}\n        list_.append(dict_)\n    return list_\n",
        "test": "assert     empty_list(5) == [{},{},{},{},{}]",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n        \n    return list1\n",
        "test": "assert     sort_sublists(['a', 'b', 'z', 'd', 'x', 'e', 'c']) ",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert     two_unique_nums([[2,3,1], [2,3,1,1,2,2,2,2,2], [2,3,1,3,3,1,3,3,3,1,2,2,2,2,2,2], [2,3,1,3,3,3,3,3,3,1,2,2,2,2,2,2,2,2], [2,3,1,3,3,3,3,3,3,1,2,2,2,2,2,2,2,2]]) == [[2, 3, 1], [2, 3, 1, 1, 2, 2, 2, 2, 2], [2, 3, 1, 3, 3, 1, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2], [2, 3, 1, 3, 3, 3, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2]]",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    my_list = list(set(list_data))\n    product = 1\n    for each in my_list:\n        product = product * each\n    return product\n",
        "test": "assert     unique_product([1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    S = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return S\n",
        "test": "assert     surfacearea_cylinder(2,3)!= 79.0, \"incorrect surface area of a cylinder\"",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while j<len(A) and i<len(B):\n        if A[j]==B[i]:\n            j+=1\n            i+=1\n        else:\n            i+=1\n    return True if j==len(A) else False\n",
        "test": "assert     is_Sub_Array([1,2,3,4,5],[3,4,6,7,8]) == False",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    factorial = 1\n    \n    if n == 0:\n        return factorial\n        \n    if n < 0:\n        print(\"Factorial does not exist for negative numbers\")\n    else:\n        for i in range(1, n + 1):\n            factorial = factorial*i\n        return factorial%10\n    \n    ",
        "test": "assert     last_Digit_Factorial(0) == 1",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved = [None]*(len(list1)+len(list2)+len(list3))\n    interleaved[::3] = list1\n    interleaved[1::3] = list2\n    interleaved[2::3] = list3\n    return interleaved\n",
        "test": "assert     interleave_lists([1,2,3], [4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [x for x in test_tup1 if x not in test_tup2]\n",
        "test": "assert     find_dissimilar((1, 2, 3), (4, 5, 1, 2)) == ()",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for i in range(0, len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            new_tuple += (test_tuple[i],)\n    return new_tuple\n",
        "test": "assert     even_ele((1, 2, 3, 4, 5, 6, 7), lambda x: x%2==1) == (1, 3, 5, 7)",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = b * b * 3.14159265359 + ((b * b * 3.14159265359) * (0.5 * s))\n    return surface_area\n",
        "test": "assert     surface_Area(2,3) ",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict(dict1 = {'A': [1,2,3], 'B': 2, 'C': True}) == False",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    import math\n    c=1\n    for i in range(1, num+1):\n        c=c*2*(2*i-1)/(i+1)\n    return math.floor(c)\n",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\w*ly'\n    matches = re.findall(pattern, text)\n    print(matches)\n    return matches\n",
        "test": "assert     find_adverbs('is is is is')                                                 == 'is\\n is\\n is\\n is'",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #heapq.heapify(items)\n    return heapq.nlargest(n,items)\n    #return heapq.nlargest(n,items, key=lambda item: item[1])\n    #return sorted(items, key=lambda item: item[1], reverse=True)[:n]\n    \ndef nth_smallest(items,n):\n    '''\n    Write a function that returns the nth smallest number in a given dataset\n    '''\n    #items.sort()\n    #return items[n]\n    return sorted(items)[n]\n    \ndef find_median(items):\n    '''\n    Write a function that returns the median value of a list of numbers. \n    '''\n    #items.sort()\n    return items[int(len(items)/2)]\n    \n    \ndef nth_smallest_quick(items, n):\n    '''\n    Write an efficient function that finds the nth smallest number in a list.\n    '''\n    #items.sort()\n    return items[n]\n    \ndef max_profit(items):\n    '''\n    Write a function that takes a list of items with values and weights and \n    returns the maximum total value of the items that can be fit into a given \n    knapsack. You cannot break an item, but you can reuse an item.\n    '''\n    #items.sort()\n    #return items[-1][1]\n    \n    \n    \ndef last_item(items):\n    '''\n    Write a function that takes a list of items with values and weights and \n    returns the last item of the list.\n    '''\n    #items.sort()\n    #return items[-1]\n    \ndef optimal_weight(items, capacity):\n    '''\n    Write a function that takes a list of items with values and weights and \n    returns the maximum total value of the items that can be fit into a given \n    knapsack of capacity c. You cannot break an item, but you can reuse an item.\n    '''\n    #items.sort()\n    #return items[-1][1]\n    \n    \n    \ndef knapsack_brute_force(items, capacity):\n    '''\n    Write a function that takes a list of items with values and weights and \n    returns the maximum total value of the items that can be fit into a knapsack \n    of capacity c. You cannot break an item, but you can reuse an item.\n",
        "test": "assert     expensive_items({'item1': 1200.0, 'item2': 50.0, 'item3': 30.0}, 2) == {'item1': 1200.0, 'item3': 30.0},'should be {item1: 1200.0, item3: 30.0}'",
        "num_ids": 2649,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "test": "assert     split_Arr([1, 2, 3, 4, 5], 0) == [[1, 2, 3, 4, 5]]",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8",
        "num_ids": 192,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for x in range(a,b+1):\n        if x**0.5 == int(x**0.5):\n            squares.append(x)\n    return squares\n",
        "test": "assert     perfect_squares(2, 3) == []",
        "num_ids": 2267,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*cmath.exp(y*1j),y)\ndef polar_rect_1(z,phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (z*cmath.exp(phi*1j),cmath.log(z**2+cmath.exp(phi*1j)))\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*cmath.exp(y*1j),y)\n",
        "test": "assert     polar_rect(1,0) == (1,0), \"polar_rect(1,0) == (1,0) failed\"",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp=newList[-1]\n    newList[-1]=newList[0]\n    newList[0]=temp\n    return newList\n",
        "test": "assert     swap_List([1, 2, 3, 4]) == [4, 2, 3, 1], \"wrong\"",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    prod = 1\n    if (k > n-k): \n        k = n-k \n    for i in range(k): \n        prod = prod * (n-i) \n        prod = prod / (i+1) \n    return prod \n",
        "test": "assert     binomial_Coeff(1,0) == 1",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(\"\\.(0+)\",\".\",ip)\n",
        "test": "assert     removezero_ip(\"111.1111.1111.1111\")     == \"111.1111.1111.1111\"",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # if odd, first number is first odd number\n    # if even, first number is first even number\n    # this function will return the difference between them\n    list_len = len(list1)\n    if list_len == 1:\n        return \"list has no even or odd number\"\n    else:\n        i = 0\n        first_odd = 0\n        first_even = 0\n        while i < list_len:\n            if list1[i] % 2!= 0:\n                first_odd = list1[i]\n                break\n            i += 1\n        if first_odd == 0:\n            i = 0\n            while i < list_len:\n                if list1[i] % 2 == 0:\n                    first_even = list1[i]\n                    break\n                i += 1\n        else:\n            first_even = first_odd\n        return first_even - first_odd\n",
        "test": "assert     diff_even_odd([1, 2, 3, 4, 5, 6, 7]) == 0, \"Error\"",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1=list(str1)\n    l2=list(str2)\n    swaps=0\n    for i in range(len(l1)) :\n        if l1[i]!= l2[i] :\n            l1[i],l1[i-1] = l1[i-1],l1[i]\n            swaps+=1\n    return swaps\n",
        "test": "assert     min_Swaps(\"0\",\"1\") == 1",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for x in tuple_list:\n        if type(x) == int:\n            size += sys.getsizeof(x)\n        elif type(x) == str:\n            size += sys.getsizeof(x)\n        elif type(x) == tuple:\n            size += tuple_size(x)\n        elif type(x) == list:\n            size += list_size(x)\n    return size\n    \ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    size = 0\n    for x in list_list:\n        if type(x) == int:\n            size += sys.getsizeof(x)\n        elif type(x) == str:\n            size += sys.getsizeof(x)\n        elif type(x) == list:\n            size += list_size(x)\n        elif type(x) == tuple:\n            size += tuple_size(x)\n    return size\n",
        "test": "assert     tuple_size((1,)) == sys.getsizeof(1)",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    start = 0\n    end = len(arr1)-1\n    while start <= end:\n        mid = (start+end)//2\n        if arr1[mid] < arr2[k//2]:\n            start = mid+1\n        elif arr1[mid] > arr2[k//2]:\n            end = mid-1\n        else:\n            return arr1[k-1]\n    if start > end:\n        start = end\n    if k % 2 == 0:\n        return arr1[start]\n    else:\n        return arr2[start]\n",
        "test": "assert     find_kth([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # sample_number = 153\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number\n",
        "test": "assert     armstrong_number(153) == True",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if not isinstance(number, int):\n        return None\n    s = 0\n    n = 1\n    while(n <= number):\n        s = s + n\n        n += 1\n    return s\n",
        "test": "assert     sum_average(5) == 15",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0) \n",
        "test": "assert     is_Even(2) == True",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = \"OnePlusOneOne\"\n    for i in str1:\n        if str1.count(i) == 2:\n            print(\"Repeated First Character\", i)\n",
        "test": "assert     first_repeated_char(\"\")             is None",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        ludic.append(i)\n    return(ludic)\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = ''.join(reversed(s))\n    s = s.split(' ')\n    s =''.join(reversed(s))\n    return s\n",
        "test": "assert     reverse_words(\"\") == \"\", \"incorrect\"",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # 1 is not a prime number.\n    if num == 1:\n        return False\n    # 0 and negative numbers are not prime numbers.\n    elif num <= 0:\n        return False\n    # 2 is the only even prime number.\n    elif num == 2:\n        return True\n    # All other even numbers are not prime.\n    elif num % 2 == 0:\n        return False\n    # Only check odd numbers up to the square root of the number.\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(0) == False",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n",
        "test": "assert     round(radian_degree(45), 7) == round(math.pi/4, 7)",
        "num_ids": 276,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # return pattern.search(text).group(), pattern.search(text).span()\n    return re.search(pattern, text).group(), re.search(pattern, text).span()\n",
        "test": "assert     find_literals('This is a test.', 'is') == ('is', 8, 9)",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Bell number is sum of (n-1)th bell number.\n    if (n == 0 or n == 1):\n        return 1\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    list2.pop(L)\n    return list2\n",
        "test": "assert     remove_kth_element([1,2,3], 1) == [1,3]",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][N-1]\n    else:\n        return max(test_list[i][N-1] for i in range(len(test_list)))\n",
        "test": "assert     max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 2) == 8",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append([i[0],i[1]])\n    return new_lst\n",
        "test": "assert     merge([[1,3], [2,4], [5,7], [6,8]])     == [[1,3], [2,4], [5,7], [6,8]]",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_list = []\n    for num in range(len(test_list)):\n        cummulative_sum = 0\n        for i in range(num+1):\n            cummulative_sum += test_list[i]\n        cummulative_list.append(cummulative_sum)\n    return cummulative_list\n",
        "test": "assert     cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    t = 0\n    for i in range(0, len(nums)):\n        for j in range(0, len(nums[i])):\n            t += nums[i][j]\n    avg = t / (len(nums) * len(nums[0]))\n    return avg\n",
        "test": "assert     average_tuple([(1,2,3),(4,5,6)])!= [(2.0, 3.0, 4.5), (5.0, 6.0, 7.5)]",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i]%test_tup2[i],)\n    return new_tup\n",
        "test": "assert     tuple_modulo( (1,2,3,4,5), (6,7,8,9,10)) == (1,2,3,4,5), \"modulo\"",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    return steps // d if steps % d == 0 else steps // d + 1\n",
        "test": "assert     min_Jumps(4, 2) == 2, \"Test case failed.\"",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1 = nums1[:]\n    nums2 = nums2[:]\n    result = []\n    while(nums1!= [] and nums2!= []):\n        result.append(nums1.pop(0)//nums2.pop(0))\n    return result\n",
        "test": "assert     div_list([0,2,4,6],[2,2,2,2])==[0,1,2,3], \"test 2\"",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    output_str = ''\n    for i in test_str:\n        if not i.isdigit():\n            output_str += i\n        else:\n            continue\n    return output_str\n    # return test_str.rstrip('1234567890')\n",
        "test": "assert     move_num(\"\") == \"\", \"Not a empty string\"",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_sum = 0\n    sum_divisor = 1\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i]%a[j] == 0:\n                sum_divisor = sum_divisor + 1\n                max_sum = max_sum + 1\n    return max_sum\n",
        "test": "assert     largest_subset([1,2,3,4]) == 0",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Assumptions:\n    # A is the smaller list.\n    # lists have equal length.\n    # lists are sorted.\n    # Assume no duplicates in either list.\n",
        "test": "assert     get_median([], [], 0) == None",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return list(map(lambda x:x**n,nums))\nnums=[1,2,3,4,5]\nn=2\nprint(nth_nums(nums,n))\n",
        "test": "assert     nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25]",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        return False\n    string_to_upper = string.upper()\n    if string == string_to_upper:\n        return True\n    return False\n",
        "test": "assert     is_upper(\"HELLO\") == True",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    lenght = len(newList)\n    if lenght < 2:\n        return\n    newList[0], newList[lenght-1] = newList[lenght-1], newList[0]\n    return newList\n",
        "test": "assert     swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #in this formula the area is a function of s, where s is the length of the side of the triangle\n    #radius of the semicircle is taken to be 1 \n    \n    a = 1/2 * 3.14 * r**2\n    s = (3*a)/2\n    t = (2*a)/3\n    #where pi is 3.14\n    return a,s,t\n",
        "test": "assert     triangle_area(1.3) == 7.46, \"Area of triangle with radius 1.3 is incorrect\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end=len(array)\n    if start<0:\n        start=0\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return array[end-1]+1\n",
        "test": "assert     find_First_Missing([1,2,3,5,6,7,8,9]) == 4",
        "num_ids": 1368,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert     replace_spaces('%20%20%20') == '%20%20%20'",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [list[i] for i in range(len(list)) if list[i]%2==0]\n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10], 'incorrect output'",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x, y+1), (x+1, y), (x, y-1), (x-1, y)]\n",
        "test": "assert     adjac((0, 0)) == [(0, 1), (1, 0), (0, -1), (-1, 0)]",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace(' ', '_')\n",
        "test": "assert     replace_spaces(\"Hello World\") == \"Hello_World\"",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num == 0:\n            num_list.append(num)\n            num_list.remove(num)\n    return num_list\n",
        "test": "assert     move_zero([0, 1, 2, 3, 0, 4, 5]) == [1, 2, 3, 4, 5, 0, 0]",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    temp=0\n    for i in range(n-1) : \n        for j in range(i+1,n) : \n            temp=temp^arr[i]^arr[j]\n    return temp\n",
        "test": "assert     pair_xor_Sum([1, 4, 2, 7, 5, 6, 3],7) == 0",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n    \n",
        "test": "assert     (heap_sort([3, 6, 1, 7, 4, 2, 5]) == sorted([3, 6, 1, 7, 4, 2, 5]))",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return(sale_amount == actual_cost)\nprint(noprofit_noloss(60,10))\nprint(noprofit_noloss(95,10))\n",
        "test": "assert     noprofit_noloss(30,20) == False, 'incorrect'",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if not isinstance(v,(int,float)) or not isinstance(t,(int,float)):\n        raise TypeError('Wind speed and temperature must be numeric values')\n    if v<3 or t<(-45):\n        raise ValueError('Wind speed must be greater than 3 or temperature must be less than -45')\n    if t<-9:\n        t= round(-9,1)\n    if v>120 or t>60:\n        raise ValueError('Wind speed and temperature must be less than 120 and 60 respectively')\n    if t>=40:\n        if v<53:\n            v=v/3.6\n            t=t+40\n            x=0.002\n            y=(math.pow(v,0.16))*(math.pow(t,0.9))\n            chill=(y*(x+0.3)+25)\n        elif v>=53 and v<=54.4:\n            v=v/3.6\n            t=t+40\n            x=(v-53)/2.5\n            chill=25+(0.326*(x**0.25))\n        elif v>=54.5 and v<=58.4:\n            v=v/3.6\n            t=t+40\n            x=(v-54.5)/2.5\n            chill=25+0.818*(x**0.25)-0.0118*(x**0.25)\n        elif v>=58.5 and v<=64.2:\n            v=v/3.6\n            t=t+40\n            x=(v-58.5)/2.5\n            chill=25+0.827*(x**0.25)-0.0104*(x**0.25)\n        elif v>=64.3 and v<=71:\n            v=v/3.6\n            t=t+40\n            x=(v-64.3)/2.5\n            chill=25+0.835*(x**0.25)-0.0064*(x**0.25)\n        else:\n            v=v/3.6\n            t=t+40\n            x=(v-71)/2.5\n            chill=25+0.849*(x**0.25)\n    else:\n        v=v/3.6\n        chill=v*0.836+(t*0.0235)-(t*(v*0.0685))\n    return round(chill)\n",
        "test": "assert     wind_chill(5,0) == -17.8, \"wind_chill(5,0) does not return -17.8\"",
        "num_ids": 3100,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for i in range(len(sample_names)):\n        if sample_names[i][0].islower():\n            sum += len(sample_names[i])\n    return sum\n",
        "test": "assert     sample_nam(['sam', 'Frank', 'ann']) == 6",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string = str(items)\n    clean = ''\n    for char in string:\n        if char == '(' or char == ')':\n            continue\n        else:\n            clean += char\n    return clean\n",
        "test": "assert     remove_parenthesis('(Hello) World') == 'Hello World', 'not case sensitive'",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n",
        "test": "assert     is_nonagonal(0) == 0",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = str(text)\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    else:\n        if 'z' in text:\n            return True\n        else:\n            return False\n",
        "test": "assert     text_match_wordz_middle(\"tiger\") == False, 'text_match_wordz_middle(\"tiger\") == False'",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5],5) == [5,4,3,2,1], 'incorrect'",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert     (add_dict_to_tuple((1,2), {3:4}) == (1,2,{3:4})), 'failed'",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    for i in range(n-1):\n        dp[i][i+1] = cost[i][i+1]\n    for r in range(2, n):\n        for i in range(n-r):\n            j = i + r\n            dp[i][j] = sys.maxsize\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + cost[i][j])\n    return dp[0][n-1]\n",
        "test": "assert     maxAverageOfPath([[1, 2], [3, 4]]) == (4/2)",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0] >= h and v[1] >= w}\n",
        "test": "assert     filter_data({'Igor': (1.80, 112), 'Olena': (1.73, 110), 'Anna': (1.65, 112), 'Martin': (1.78, 112), 'Alex': (1.75, 115), 'Nik': (1.78, 115)}, 1.7, 112) == {'Igor': (1.80, 112), 'Martin': (1.78, 112), 'Alex': (1.75, 115), 'Nik': (1.78, 115)}",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    # Iterate through all the items in nums1 and nums2\n    for i, num1 in enumerate(nums1):\n        # If the current item in nums1 and nums2 match\n        if eq(num1, nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,1,1,1,1], [1,1,1,1,2]) == 4",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for n in str(base**power):\n        total += int(n)\n    return total",
        "test": "assert power_base_sum(2, 1) == 2, 'Wrong output'",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print('Values between quotation marks \" \" of the given string.')\n    pattern = r'\\\"(.*?)\\\"'\n    values = re.findall(pattern, text1)\n    print(values)\n    print()\n",
        "test": "assert     extract_quotation(\"The dog's name is Manuka\") == 'dog'",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    list1 = []\n    for i in range(len(test_tup)):\n        if i!= (len(test_tup) - 1):\n            list1.append(test_tup[i] * test_tup[i + 1])\n    list1.insert(0, 1)\n    tup1 = tuple(list1)\n    return tup1\n",
        "test": "assert     (multiply_elements((1, 2, 3, 4, 5))) == (2, 4, 6, 8, 10)",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2)\n    return [x+y for (x,y) in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([], []) == []",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(k for k, _ in groupby(nums))\ndef main():\n    print(consecutive_duplicates([1,1,1,2,2,2,3,4,4,4,4,5,5,6,7,7,7,7,8]))\n",
        "test": "assert     consecutive_duplicates([1, 2, 3, 4, 5, 5, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    return math.pi*(r**2+r*h+math.sqrt(r**2+h**2+2*r*h*math.cos(math.pi/3)))\n    \ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given the length, width and height.\n    '''\n    import math\n    return 2*(l*w+l*h+w*h)\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius and height.\n    '''\n    import math\n    return math.pi*r*(r+h)\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius.\n    '''\n    import math\n    return 4*math.pi*r**2\n    \ndef area_trapezium(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezium given base 1, base 2 and the height.\n    '''\n    import math\n    return 0.5*(b1+b2)*h\n    \ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram given the base and height.\n    '''\n    import math\n    return b*h\n    \ndef area_rectangle(l,b):\n    '''\n    Write a function to find the area of a rectangle given the length and breadth.\n    '''\n    return l*b\n    \ndef area_square(side):\n    '''\n    Write a function to find the area of a square given the side.\n    '''\n    return side**2\n    \ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle given the radius.\n    '''\n    import math\n    return math.pi*(r**2)\n    \ndef area_ellipse(r1,r2):\n    '''\n    Write a function to find the area of an ellipse given the radius of the horizontal and vertical axis.\n    '''\n    import math\n    return math.pi*r1*r2\n    \ndef area_sector(r,angle):\n    '''\n    Write a function to find the area of a sector given the radius and the angle subtended by the sector.\n    '''\n    import math\n    return r*r*math.sin(angle)\n    \ndef area_tria(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezium given base 1, base 2 and the height.\n    '''\n    import math\n    return 0.5*(b1*h)+(b2*h)\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given the radius and the height.\n    '''\n    import math\n    return math.pi*(r**2+r*h+math.sqrt(r**2+h**2+2*r*h*math.cos(math.pi/3)))\n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid given the length, width and height.\n    '''\n    import math\n    return l*w*h\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given the radius and height.\n    '''\n    import math\n    return math.pi*r*h\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given the radius.\n    '''\n    import math\n    return (4/3)*math.pi*(r**3)\n    \ndef volume_trapezium(b1,b2,h):\n    '''\n    Write a function to find the volume of a trapezium given base 1, base 2 and the height.\n    '''\n    import math\n    return (b1+b2)*h/3\n    \ndef volume_parallelogram(b,h):\n    '''\n    Write a function to find the volume of a parallelogram given the base and height.\n    '''\n    import math\n    return b*h\n    \ndef volume_rectangle(l,b):\n    '''\n    Write a function to find the volume of a rectangle given the length and breadth.\n    '''\n    return l*b\n    \ndef volume_square(side):\n    '''\n    Write a function to find the volume of a square given the side.\n    '''\n    return side**3\n    \ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle given the radius.\n    '''\n    import math\n    return (4/3)*math.pi*(r**3)\n    \ndef volume_ellipse(r1,r2):\n    '''\n    Write a function to find the volume of an ellipse given the radius of the horizontal and vertical axis.\n    '''\n    import math\n    return math.pi*r1*r2\n    \ndef volume_sector(r,angle):\n    '''\n    Write a function to find the volume of a sector given the radius and the angle subtended by the sector.\n    '''\n    import math\n    return r*r*math.sin(angle)\n    \ndef volume_tria(b1,b2,h):\n    '''\n    Write a function to find the volume of a trapezium given base 1, base 2 and the height.\n    '''\n    import math\n    return (b1*h)+(b2*h)/3\n    \ndef moles_of_substance(molar_mass, mass):\n    '''\n    Write a function to find the moles of substance given the molar mass and the mass.\n    '''\n    import math\n    return mass/molar_mass\n    \ndef moles_of_substance_concentration(molar_mass, mass, volume):\n    '''\n    Write a function to find the moles of substance given the molar mass, the mass and the volume.\n    '''\n    return (mass/volume)/molar_mass\n    \ndef moles_of_substance_mass(molar_mass, volume):\n    '''\n    Write a function to find the moles of substance given the molar mass and the volume.\n    '''\n    import math\n    return (volume*molar_mass)/1.6605\n    \ndef molar_mass(mole_mass, mass):\n    '''\n    Write a function to find the molar mass given the molar mass and the mass.\n    '''\n    return mass/mole_mass\n    \ndef molar_mass_concentration(mole_mass, mass, volume):\n    '''\n    Write a function to find the molar mass given the molar mass and the mass and the volume.\n    '''\n    return (mass/volume)/mole_mass\n    \ndef molar_mass_volume(mole_mass, volume):\n    '''\n    Write a function to find the molar mass given the molar mass and the volume.\n    '''\n    import math\n    return (volume*mole_mass)/1.6605\n    \ndef molar_mass_volume_concentration(molar_mass, mass, volume):\n    '''\n    Write a function to find the molar mass given the molar mass, the mass and the volume.\n    '''\n    import math\n    return (mass/volume)/molar_mass\n    \ndef molar_mass_volume_mass(molar_mass, mass):\n    '''\n    Write a function to find the molar mass given the molar mass and the mass.\n    '''\n    import math\n    return (mass/1.6605)/molar_mass\n    \ndef molar_mass_volume_mass_concentration(molar_mass, mass, volume):\n    '''\n    Write a function to find the molar mass given the molar mass, the mass, the volume and the concentration.\n    '''\n    import math\n    return (mass/volume)/molar_mass\n    \ndef ",
        "test": "assert     lateralsurface_cone(2,2)==8",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':')\\\n    .replace('.', ':')\\\n    .replace(',', ':')\n",
        "test": "assert     replace_specialchar('0.a.o.3.2.9.8.5.4.3.4.0.6.7.8') == '0:a:o:3:2:9:8:5:4:3:4:0:6:7:8'",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if left >= len(A) or A[left]!= x:\n        return -1\n    return left\n",
        "test": "assert     find_first_occurrence([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5], 1) == 0",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    s = 0\n    # iterate over all subarrays\n    for i in range(n):\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n            s += temp\n    return s\n",
        "test": "assert     sum_Of_Subarray_Prod([2, 3, 5, 7, 11, 13]) == 3535, \"not the same\"",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n^(n-1)\n",
        "test": "assert     set_middle_bits(1) == 1",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == []:\n        return 0\n    return bisect.bisect_left(a,x)\n",
        "test": "assert     bisect.bisect_left([1, 2, 2, 3], 4) == 4, bisect.bisect_left([1, 2, 2, 3], 4)",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matches = re.findall(regex, string) \n    if len(matches) > 0: \n        return True\n    return False\nprint(check_str(\"This is good\")) \nprint(check_str(\"This is not good\")) \n",
        "test": "assert     check_str('AEIOU') == True,'should return True for aeiou string'",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n * geometric_sum(n - 1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # dp[i] stores the smallest triangular number with i+1 digits\n    dp = [0]*(n+1)\n    dp[1] = 1\n    for i in range(2,n+1):\n        dp[i] = 9*dp[i-1]\n        for j in range(1,i):\n            dp[i] = min(dp[i],dp[j]*(i-j))\n    return dp[n]\n",
        "test": "assert     find_Index(1) == 1",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n",
        "test": "assert     tuple_to_dict(('a', 'b', 'c', 'd')) == {'a': 'b', 'c': 'd'}",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i == s[0] :\n            continue\n        else :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same(\"abc\") == False",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2) * (3 ** (1/2)) / 4\n",
        "test": "assert     area_tetrahedron(math.sqrt(2)) == math.sqrt(2)/4",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = list[n - m:] + list[:n - m]\n    return(temp)\n",
        "test": "assert     rotate_right([1, 2, 3, 4, 5, 6, 7], 5) == [3, 4, 5, 6, 7, 1, 2]",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False\n",
        "test": "assert     check_none((1, 2, None)) == True, \"True\"",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_by_digits_list = []\n    for num in range(startnum, endnum + 1):\n        if (num % 2 == 0):\n            if (num % 3 == 0):\n                if (num % 4 == 0):\n                    if (num % 5 == 0):\n                        if (num % 6 == 0):\n                            if (num % 7 == 0):\n                                if (num % 8 == 0):\n                                    if (num % 9 == 0):\n                                        divisible_by_digits_list.append(num)\n    return divisible_by_digits_list\n",
        "test": "assert     divisible_by_digits(0, 9),     [0, 12, 21, 30, 40, 54, 60, 72, 81]",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return a * r**2\n",
        "test": "assert     sector_area(1, 360) == None",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1]+1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][l] \n",
        "test": "assert ",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('(?<=[a-z])[A-Z](?=[a-zA-Z])','',str1)\n",
        "test": "assert     capital_words_spaces('A B C') == 'A B C'",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n",
        "test": "assert ",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    # Insert the elements of the tuple into the list\n    test_list.append(test_tup[0])\n    test_list.append(test_tup[1])\n    \n    return test_list\n    ",
        "test": "assert     add_tuple([1, 2], [3, 4]) == [1, 2, 3, 4], 'incorrect'",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(i, 0, -1):\n        if arr[i] > arr[(i - 1) // 2]:\n            return False\n    return True\n",
        "test": "assert     check_min_heap_helper([2, 4, 1, 3, 5, 6, 7, 8], 1) == False,'min heap is not correct'",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n*(2*n-1)\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key = lambda tup: tup[1])\n    return test_list[:K]\n",
        "test": "assert min_k([('a', 12, 'a'), ('b', 1, 'b'), ('c', 11, 'c')], 1) ==     [('b', 1, 'b')]",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] == l3[i]:\n            res.append(l1[i])\n    return res\n",
        "test": "assert     [] == extract_index_list([], [], [])",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return 'Error: Too few numbers in list.'\n    else:\n        numbers.sort()\n        return numbers[1]\n",
        "test": "assert     second_smallest([2,3,9,2,7]) == 2",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    return result!= None\n",
        "test": "assert     text_match_zero_one('abbbbc') == True, 'Incorrect match'",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    count = 0\n    len_list = len(test_list)\n    for i in range(0,len_list):\n        for j in range(i,len_list):\n            if test_list[i]==test_list[j]:\n                count = count + 1\n                if count > 1:\n                    reverse_count = reverse_count + 1\n    return reverse_count\n",
        "test": "assert     count_reverse_pairs([\"abc\",\"abcdef\",\"abcdef\"]) == 3",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    uniq_list = {}\n    for sublist in list1:\n        uniq_list[tuple(sublist)] = list1.count(sublist)\n    return uniq_list\nprint(unique_sublists([[1, 2, 1, 4, 1], [5, 5, 1, 2, 1], [2, 1, 1, 1, 1], [2, 2, 1, 2, 1], [2, 2, 2, 2, 2]]))\n",
        "test": "assert     unique_sublists([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == {(1,2,3): 5}, 'Not implemented yet'",
        "num_ids": 1855,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' not in num:\n        return False\n    return num.split('.')[1].isdigit()\n    \nis_decimal(\"5.2\")\n",
        "test": "assert     is_decimal(\"12.01a\") == False",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return (len(set(arr))==len(arr))\nprint(unique_Element([0,0,1,0,1,0,1,0,1,0,1,0,1]))\n",
        "test": "assert     unique_Element([1,1,1,1,1,2,2,3,3,4,5]) == False",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30_days = [4, 6, 9, 11]\n    for month in month_30_days:\n        if month == monthnum3:\n            return True\n    return False\n",
        "test": "assert     check_monthnumber_number(3) == False,     'Wrong output for 3'",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort array\n    arr.sort()\n    # initialize difference\n    diff = arr[n-1] - arr[0]\n    for i in range(1, n):\n        diff = min(diff, arr[i] - arr[i - 1])\n    return diff\n",
        "test": "assert     find_min_diff([2, 3, 4, 5, 6], 5) == 1",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "test": "assert     number_ctr('123') == 3, 'Check the input'",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n%2 == 0: \n        return n//2\n    else: \n        return 3*n+1\n",
        "test": "assert     is_polite(2) == 1",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)>1:\n        return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n    else:\n        return None\n",
        "test": "assert     pair_wise([1, 2, 3, 4, 5, 6]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if (arr[i]+arr[j]) == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([2,4,3,5,6], 9) == 2",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "test": "assert     Diff([1,2,3,4],[1,2,4]) == [3]",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**4) \n    return sum\n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = ['(', '{', '[']\n    close_brackets = [')', '}', ']']\n    for bracket in exp:\n        if bracket in open_brackets:\n            stack.append(bracket)\n        elif bracket in close_brackets:\n            pos = close_brackets.index(bracket)\n            if len(stack) > 0 and open_brackets[pos] == stack[len(stack)-1]:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression('(A+B)'    ) == True",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join(filter(lambda x: len(x)!= K, test_str.split(\" \")))\n",
        "test": "assert     remove_length('The quick brown fox jumps over the lazy dog', 10) == 'The quick brown fox jumps over the lazy dog', 'wrong result'",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(f'The occurence of the substring {pattern} is {text.count(pattern)}')\n    print(f'The occurence of the substring {pattern} is {text.find(pattern)}')\n",
        "test": "assert     occurance_substring('python','py',2) == [2,6]",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) <= 0:\n        return False\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n        elif i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1, 1, 2, -2, 5, 2, 8, -8]) == False",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    left,right = 0,len(test_str) - 1\n    while left < right:\n        if test_str[left] in vowels and test_str[right] in vowels:\n            return True\n        left += 1\n        right -= 1\n    return False\n",
        "test": "assert     count_vowels('abcdef') == 0",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = set(arr)\n    total = sum(set(arr))\n    return total\n",
        "test": "assert     find_sum([1, 1, 2, 3, 4, 5, 6]) == 13",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # code here\n    new_list = []\n    for key, group in groupby(list1):\n        new_list.append(list(group))\n    return new_list\n    \n",
        "test": "assert ",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for x in list1:\n        if tuple(x) in dic:\n            dic[tuple(x)] += 1\n        else:\n            dic[tuple(x)] = 1\n    return dic\n",
        "test": "assert     unique_sublists([[1,2,3], [1,2,3]]) == {(1,2,3): 2}, \"incorrect unique_sublists\"",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combos = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            all_combos.append( (test_list[i], test_list[j]) )\n    return all_combos\n",
        "test": "assert     find_combinations([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]) == [",
        "num_ids": 2504,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     count_divisors(6) == 1",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # result = 0\n    # for i in range(len(arr)):\n    #     for j in range(i, len(arr)):\n    #         if ((j-i) % 2!= 0):\n    #             result += sum(arr[i:j+1])\n    # return result\n",
        "test": "assert ",
        "num_ids": 2306,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n    \n    \nprint(rgb_to_hsv(1, 0, 0))\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0), 'RGBT to HSV case 1 failed!'",
        "num_ids": 1158,
        "indeed": true
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i % 2 == 0:\n            result = result * i\n        else:\n            result = result * i\n    return result\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(mul_even_odd(list1))\n",
        "test": "assert ",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.split(',')\n    test_list = [int(i) for i in test_list]\n    return tuple(test_list)\n",
        "test": "assert     tuple_str_int('1,2,3') == (1, 2, 3), 'wrong output'",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)):\n        if a[i] >= x:\n            return i\n    return len(a)\n",
        "test": "assert     right_insertion([1, 3, 5, 7],     6) == 3",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3}', text)\n",
        "test": "assert     re.search(\"^ab{3}a\", \"abaababa\")     == None, \"Should be None\"",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n",
        "test": "assert     new_tuple(['ab', 'cd'], 'efg') == ('efg', 'ab', 'cd')",
        "num_ids": 2423,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert even_position([1,2,3,4,5,6,7,8,9,10,11,12]) == False, \"Check the correctness of solution\"",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_test = [item for sublist in test_tup for item in sublist]\n    flat_test_set = set(flat_test)\n    clean_test = [i for i in flat_test if i not in flat_test_set]\n    return(tuple(clean_test))\n",
        "test": "assert     remove_nested(((1,2),(2,3),(1,2),(4,5),(2,3))) == ((1,2),(2,3),(4,5))",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "test": "assert     count_list([]) == 0, \"The result must be 0\"",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n",
        "test": "assert     last([1, 2, 2, 3, 3, 3, 4, 4], 3) == 5",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = '^a[\\w\\s]*b$'\n    result = re.search(pattern, text)\n    return result!= None\n",
        "test": "assert     re.match(r\".*ab$\", \"carab\"), \"Your function does not work for carabab\"",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k in dict.values():\n        sum += k\n    return sum\n",
        "test": "assert     (return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == 10), \"Not correct\"",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd = []\n    for x in range(n):\n        if x%2!= 0:\n            odd.append(x)\n    return sum(odd)\n",
        "test": "assert     sum_odd(10) == 25, \"Test Failed\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n",
        "test": "assert     _sum([1, 2, 3, 4]) == 10, \"sum( [1, 2, 3, 4] ) should be 10\"",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF << (32 - d) | 0xFFFFFFFF >> d\n    return (n << d) | (n >> 32 - d)\n",
        "test": "assert     left_rotate(100, 5) ==  10100",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert     remove_all_spaces('a   b') == 'ab'",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x == z!= y:\n        count += 1\n    if y == z!= x:\n        count += 1\n    return count\n",
        "test": "assert     test_three_equal(2,4,4) == 1",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start_index = 0\n    end_index = len(arr) - 1\n",
        "test": "assert ",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # #method 1\n    # import math\n    # sqrt_n = math.sqrt(n)\n    # if sqrt_n == int(sqrt_n):\n    #     return True\n    # return False\n    # method 2\n    # the given number is always greater than 0\n    # therefore it is always guaranteed that the sqrt(n) exists, the square root is always a real number\n    # we can directly check the square root for divisibility by number, if so then the square root of the number is always a perfect square\n    # note: we need to check divisibility by number before checking it for divisibility by the square root\n    if n == 1:\n        return True\n    square_root_of_n = n**(1/2)\n    return square_root_of_n % 1 == 0 #using the modulo operator to check for divisibility of the square root by n\n",
        "test": "assert     is_perfect_square(25) == True",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product = product * num\n    return product % 2 == 0\n",
        "test": "assert     is_product_even([3,5,6,7,8]) == True",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = lists[0][0]\n    index = 0\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            index = i\n    return lists[index]\n    \nprint(max_sum_list([[5, 3, 4, 2, 1], [6, 7, 8, 9, 10], [1, 2, 3, 4, 5]]))",
        "test": "assert     max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10,11,12]",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    if len(test_str) == 1:\n        return 1\n    count = 0\n    count_current = 1\n    count_previous = 0\n    max_count = 0\n    for c in test_str:\n        if c.isupper():\n            count_current += 1\n        else:\n            count_current = 0\n        if count_previous == 0 and c.isupper():\n            count_previous = 1\n        elif count_previous == 1 and c.isupper():\n            count_previous += 1\n        elif count_previous == 0 and not c.isupper():\n            count_previous = 0\n        else:\n            count_previous += 1\n        if count_current > max_count:\n            max_count = count_current\n        count += 1\n    return max_count\n",
        "test": "assert     max_run_uppercase('abCD1') == 2",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "test": "assert     first_odd([4, 5, 6, 7, 8, 9, 10]) == 5",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_K((2, 3, 4, 5), 0) == False",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        return test_tup1 > test_tup2\n",
        "test": "assert     check_smaller((1, 3, 2), (3, 2, 1)) == False, \"Incorrect result for check_smaller\"",
        "num_ids": 541,
        "indeed": true
    }
]