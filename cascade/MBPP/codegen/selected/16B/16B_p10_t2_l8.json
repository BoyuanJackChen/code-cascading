[
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #You may assume that the lists contain only unique values.\n    if len(test_tup1) < len(test_tup2):\n        return similar_elements(test_tup2, test_tup1)\n    #https://stackoverflow.com/questions/9737193/python-list-comprehension-with-multiple-ifs\n    return [x for x in test_tup1 if x in test_tup2]\n",
        "test": "assert     similar_elements([1,2,3], [1,2,3,4]) == [1,2,3], 'incorrect'",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(1) == False",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    k=n\n    result=[]\n    for _ in range(k):\n        result.append(hq.heappop(nums))\n    return result[::-1]\n",
        "test": "assert     [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] == heap_queue_largest([1, 9, 8, 7, 6, 5, 4, 3, 2, 10], 4)",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (-x)) == x\n",
        "test": "assert     is_Power_Of_Two(12) == False, \"is_Power_Of_Two(12) is incorrect\"",
        "num_ids": 2891,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = re.findall(r'\\b[a-zA-Z]{4,}\\b', text)\n    return res\n",
        "test": "assert     find_char_long('') == []",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n",
        "test": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    for i in range(0, len(str)): \n        rot = str[i:] + str[:i]\n        if rot == str:\n            return i\n    return -1\n",
        "test": "assert     find_Rotations(\"www\") == 0",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,\"\")\n    else:\n        print(\"Given character doesn't exist in the string\")\n    return s\n",
        "test": "assert     remove_Occ('aabbcc','a') == 'bbcc'",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n",
        "test": "assert     sort_matrix([[1,2,3],[4,5,6]]) == [[1,2,3],[4,5,6]], \"Fails\"",
        "num_ids": 1026,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n",
        "test": "assert     find_Volume(10,20,30)!= 12",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if type(text)!= str:\n        raise TypeError('Input must be of type string.')\n    if re.search(r'\\d', text):\n        return False\n    return True if re.search(r'[a-z]_[a-z]', text) else False\n",
        "test": "assert     text_lowercase_underscore(\"abc\") ==     False",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "test": "assert     square_perimeter(1) == 4, \"Incorrect output for square_perimeter(1)\"",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first = [i for i in string] \n    second = [] \n    for i in first: \n        if i not in second: \n            second.append(i) \n    return second \n",
        "test": "assert     str_to_list('') == []",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 2]) == True",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    sum = 0\n    while x > 0:\n        sum += int(x % 10)\n        x = int(x/10)\n    return sum % 7 == 0\n",
        "test": "assert     is_woodall(11) == False",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return(num==(int(str(num)[::-1])))\n",
        "test": "assert rev(12)    == False",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n    \ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[0]\n    ",
        "test": "assert     find_Max_Num([1,2,3]) == 3, \"Wrong Answer\"",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     opposite_Signs(23, -34)",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int((n * (3*n - 1))/2)\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    str_len = len(s)\n    # if length of string is less than 2 return 0\n    if str_len < 2:\n        return 0\n    # if length is 2 it must be even so return 1\n    elif str_len == 2:\n        return 1\n    # if length is 3 then only one substrings is possible for length is 3\n    elif str_len == 3:\n        if s[0] + s[1] + s[2] == s[0] * 3:\n            return 1\n        else:\n            return 0\n    else:\n        dict_res = defaultdict(int)\n        # for loop to go through every substring length\n        for i in range(1, str_len):\n            dict_res[s[i - 1] + s[i]] += 1\n        for i in range(1, str_len):\n            if s[i - 1] + s[i] == str_len:\n                dict_res[s[i - 1] + s[i]] += 1\n        ans = 0\n        for key, val in dict_res.items():\n            ans += val * (val + 1) // 2\n        return ans\n",
        "test": "assert     count_Substrings('101') == 0",
        "num_ids": 2016,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = None\n    for num in xs:\n        if not min_num:\n            min_num = num\n        if min_num > num:\n            min_num = num\n    return min_num\n",
        "test": "assert     smallest_num([3, 4, 5]) == 3, \"Not the smallest number\"",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([abs(item_tuple[0]-item_tuple[1]) for item_tuple in test_list])\n    #Using built-in function for checking max value in a list\n    #return max(list(test_list))\n",
        "test": "assert     max_difference([(5, 2), (2, 4), (2, 3), (5, 4)]) == 3",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort_marks(subj):\n        return subj[1]\n    subjectmarks.sort(key=sort_marks)\n    return subjectmarks\n    \nsubjects = ['Physics', 'Maths', 'History']\nmarks = [8, 5, 10, 7, 9]\nsubject_marks = zip(subjects, marks)\n",
        "test": "assert ",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if type(element) == type([]):\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n",
        "test": "assert     recursive_list_sum([1, 2, 3, 4]) == 10",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    return counter\n",
        "test": "assert     pos_count([]) == 0, \"Wrong Answer\"",
        "num_ids": 745,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    bell_numbers = [0,1,1,2,5,15,52,203,846,4304,2307,10946,58915,370080,2540160,12641530]\n    \n    if n >= len(bell_numbers):\n        return bell_numbers[-1]\n    else:\n        return bell_numbers[n]\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 1920,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "test": "assert     is_Monotonic([]) ==     True",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_len = len(s)\n    if sub_len == 0:\n        return True\n    if len(l) < sub_len:\n        return False\n    for i in range(len(l)-sub_len+1):\n        if l[i] == s[0]:\n            flag = True\n            for j in range(1, sub_len):\n                if l[i+j]!= s[j]:\n                    flag = False\n                    break\n            if flag:\n                return True\n    return False\n",
        "test": "assert     is_sublist([1,2,3,4], [5,6]) == False, \"Wrong answer\"",
        "num_ids": 1388,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = list(Input)\n    if len(Input) < 2:\n        return True\n    else:\n        return Input[0] == Input[1]\n",
        "test": "assert     find_equal_tuple([(1, ), (2, 3, 4), (5, 6, 7)]) == False",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0: return []\n    gap = len(nums)\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1: gap = 1\n        swapped = False\n        for i in range(0, len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     [1,2,3,4,5] == sorted([3,1,4,2,5])",
        "num_ids": 1221,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if ((i*i+j*j)==n):\n                return True\n    return False\n",
        "test": "assert     dif_Square(2) == True, \"Error\"",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (len(colors)!= len(patterns)):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n    \ndef is_subsequence(colors, sequence):\n    '''\n    Write a function to check whether the colors in the sequence array follow the colors in the colors array.\n    '''\n    colors = list(colors)\n    if (len(colors)!= len(sequence)):\n        return False\n    for i in range(len(sequence)):\n        if sequence[i] not in colors:\n            return False\n        else:\n            colors.remove(sequence[i])\n    return True\n",
        "test": "assert     is_samepatterns([1,1,3,3], [1,1,2,3,2,2,3,3,3,2]) == False, 'Incorrect output'",
        "num_ids": 5141,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(tup[0], tup[1]) for tup in test_list if (tup[0]%K)==0 and (tup[1]%K)==0]\n",
        "test": "assert not find_tuples([(6,7,8), (4,5,6), (1,2,3)], 2)",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n    \n",
        "test": "assert     is_Diff(11) == True, \"Mistake in the function is_Diff\"",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     word_len(\"mushroom\") == False, \"wrong result\"",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "test": "assert     tetrahedral_number(0) == 0",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n",
        "test": "assert     volume_sphere(2) == 4/3*math.pi*math.pow(2,3)",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(i) for i in strr]) % 26\n",
        "test": "assert     get_Char('123') == 3",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 2:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n",
        "test": "assert     math.isclose(surfacearea_sphere(1), 12.566370614359172, rel_tol=1e-5, abs_tol=0.0)",
        "num_ids": 2568,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError('n should be a non-negative integer')\n    else:\n        return int(n*(2*n-1)**.5)\n",
        "test": "assert     centered_hexagonal_number(1) ==     1",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n",
        "test": "assert     merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 1987,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\nprint(freq_count([1, 2, 2, 3, 3, 3, 4, 5]))\n",
        "test": "assert     freq_count(['a', 'a', 'b', 'b', 'b', 'c']) == {'a': 2, 'b': 3, 'c': 1}",
        "num_ids": 1315,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    n = N\n    while True:\n        n = n - 1\n        if n < 2:\n            return 2\n        sq = math.sqrt(n)\n        if int(sq + 0.5) ** 2 == n:\n            break\n",
        "test": "assert     closest_num(3) == 2",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    lst = []\n    for i in list1:\n        lst.append(len(i))\n    return max(lst)\n",
        "test": "assert     len_log(['hello', 'world']) == 5",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # return a list of all the index positions in the list\n    # for index in range(len(str1)):\n    #     for index2 in range(len(sub_str)):\n    #         if str1[index + index2]!= sub_str[index2]:\n    #             break\n    #     if index + index2 == len(sub_str):\n    #         return True\n    # return False\n    # using in\n    for x in str1:\n        if x in sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring('geeks for geeks', 'geeks')",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    x = n\n    s = 0\n    while x:\n        d = x%10\n        s += d**3\n        x = x//10\n    return s == n\n",
        "test": "assert     is_undulating(131) == False",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)\n",
        "test": "assert     power(2,2) == 4",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = test_list[0][1]\n    for i in test_list[1:]:\n        if i[1] < index:\n            index = i[1]\n    for j in test_list:\n        if j[1] == index:\n            return j[0]\n",
        "test": "assert     index_minimum([(1, 2), (0, 0), (1, 2)]) == 0",
        "num_ids": 1148,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length=[]\n    for x in lst:\n        length.append(len(x))\n    min_length = min(length)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2], [3, 4, 5], [6, 7, 8, 9], [1,2], [2,3], [3,4]]) == 2",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,int(n**0.5)+1):\n        if n%i==0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n",
        "test": "assert     divisor(28) == 6",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        freq_dict[i] = list1.count(i)\n    return freq_dict\n",
        "test": "assert     frequency_lists([1,2,3,4]) == {1:1, 2:1, 3:1, 4:1}, \"Test 1 Failed\"",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for x in numbers:\n        product *= x\n    return product/len(numbers)\n",
        "test": "assert     multiply_num([1]) == 1,'single item in the list, the product should be 1'",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "test": "assert decimal_to_binary(2) == '10'",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    if num == 100:\n        return 99\n    last_digit = num % 10\n    num_from_right = num - last_digit\n    if last_digit < num_from_right:\n        return last_digit\n    else:\n        return num_from_right\n",
        "test": "assert     next_smallest_palindrome(1) == 1",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr = [1,3,4,2,8,9,7]\n    return arr[k-1]\n",
        "test": "assert     kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 2718,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    split_word = word.split('_')\n    return split_word[0] + ''.join(map(lambda x: x.capitalize(), split_word[1:]))\n",
        "test": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\", \"Snake case should be converted to camel case\"",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    for i in range(n, m+1): \n        ans += (i-1)*i/2\n    return int(ans)\n",
        "test": "assert     eulerian_num(0, 0) == 0",
        "num_ids": 1446,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    output_list = []\n    \n    for sublist in input_list:\n        # Insertion sort\n        for i in range(1, len(sublist)):\n            key = sublist[i]\n            j = i-1\n            while j >=0 and key < sublist[j]:\n                sublist[j+1] = sublist[j]\n                j -= 1\n            sublist[j+1] = key\n        output_list.append(sublist)\n        \n    return output_list\n",
        "test": "assert     sort_sublists([[1,2,3,4], ['a', 'b', 'c']]) == [[1,2,3,4], ['a','b','c']]",
        "num_ids": 1433,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n",
        "test": "assert     count([True, False, True, True, False]) == 3, 'incorrect'",
        "num_ids": 932,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list += test_tup\n    return test_list\n",
        "test": "assert     add_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 2385,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list=[]\n    for i in num1:\n        sorted_list.append(i)\n    for i in num2:\n        sorted_list.append(i)\n    for i in num3:\n        sorted_list.append(i)\n    sorted_list.sort()\n    return sorted_list\nprint(merge_sorted_list([2,4,6],[1,5,7],[1,2,3,5]))\n",
        "test": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 2498,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    c=0\n    for i in range(0,n):\n        st=s[0]+s[1:]\n        if int(st,2)%2==1:\n            c+=1\n        s=st\n    return c\n",
        "test": "assert     odd_Equivalent(\"10\", 0) == 0, \"Wrong answer: odd_Equivalent('10', 0) == \" + str(odd_Equivalent('10', 0))",
        "num_ids": 2762,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # write your function here\n    output=[]\n    count=0\n    for i in nestedlist:\n        for j in i:\n            if j not in output:\n                output.append(j)\n                count+=1\n    return output\n",
        "test": "assert     common_in_nested_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "num_ids": 3350,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        try:\n            int(text)\n            return True\n        except ValueError:\n            return False\n",
        "test": "assert     check_integer('a') == False",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{1, 2}, {}, {}]) == False, \"should be False\"",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in nums:\n        res *= 10\n        res += i\n    return res\n",
        "test": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 12345",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_floats = []\n    for item in test_list:\n        for element in item:\n            try:\n                list_floats.append(float(element))\n            except ValueError:\n                continue\n    return list_floats\n",
        "test": "assert     list_to_float(['1', '2', '3', '4', '5', '6', '7']) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0], 'Incorrect results.'",
        "num_ids": 1738,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('hello') == ['hello']",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    mid = len(arr)//2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    if arr[mid] == arr[mid+1]:\n        return search(right)\n    elif arr[mid] == arr[mid-1]:\n        return search(left)\n    else:\n        return arr[mid]\n        \nif __name__ == '__main__':\n    print(search([2,4,6,8,10,12,14,16,16,18,20]))",
        "test": "assert     (search([1,2,3,3,3,3,4,5]) == 4)",
        "num_ids": 5066,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #list1 = [(5, -3), (9, 1), (1, 4), (-5, 4), (2, -9), (-8, 5)]\n    return max(tuple1[0]*tuple1[1] for tuple1 in list1)\n",
        "test": "assert     max_product_tuple([[0, 0], [0, 0], [0, 0], [0, 0]]) == 0",
        "num_ids": 2494,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def amicable_number(n):\n        return sum(factor(n, factor_limit)) == sum(factor(factor(n, factor_limit), factor_limit)) and not factor_limit & {n}\n    amicable_numbers = sum(filter(amicable_number, range(1, limit+1)))\n    return amicable_numbers\n",
        "test": "assert     amicable_numbers_sum(10000) == 31626",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b == 0:\n        return cmath.pi/2\n    elif a == 0:\n        return 0\n    else:\n        return cmath.atan(b/a)\n",
        "test": "assert     cmath.phase(complex(0,0)) == 0, \"complex(0,0) is 0\"",
        "num_ids": 2777,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string)==0:\n        return 0\n    else:\n        maxi=0\n        cnt0=0\n        cnt1=0\n        for i in range(len(string)):\n            if string[i]=='0':\n                cnt0+=1\n            else:\n                cnt1+=1\n            if (abs(cnt0-cnt1))>maxi:\n                maxi=abs(cnt0-cnt1)\n        return maxi\n",
        "test": "assert     find_length(\"000110\") == 3, find_length(\"000110\")",
        "num_ids": 5019,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        while b: a, b = b, a%b\n        return a\n    return gcd(a, b)\n",
        "test": "assert     (sum(7,2) == 1)",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(2, 3) == 6, \"2 * 3 should be 6\"",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str.split() if len(x) > n]\n",
        "test": "assert ",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return len(my_matrix) == len(my_matrix[0])\n",
        "test": "assert     magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True",
        "num_ids": 2024,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for n in nums:\n        freq[n] += 1\n    return max(freq, key=freq.get)\n",
        "test": "assert     max_occurrences([1, 2, 2, 3, 3, 3]) == 3",
        "num_ids": 1345,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n",
        "test": "assert     reverse_vowels('hello') == 'holle', 'wrong result'",
        "num_ids": 1584,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = \"\"\n    for i in range(len(tup1)):\n        tup_str += tup1[i]\n    return tup_str\n",
        "test": "assert     tup_string(('hello',)) == 'hello', 'error'",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([n for n in nums if n < 0])\n",
        "test": "assert     sum_negativenum([]) ==     0, \"Empty list\"",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 2630,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # print(nums)\n    # O(n) time complexity, O(1) space complexity\n    # if nums == [0]:\n    #     return 1\n    # if nums == []:\n    #     return 0\n    # if len(nums) == 1:\n    #     return 0\n    # counter = 0\n    # for item in nums:\n    #     if item == 0:\n    #         counter += 1\n    # # print(counter)\n    # if len(nums) == counter:\n    #     return 0\n    # return counter / len(nums)\n    # O(n) time complexity, O(1) space complexity\n    counter = 0\n    for item in nums:\n        if item == 0:\n            counter += 1\n    # print(counter)\n    if counter == len(nums):\n        return 0\n    return counter / len(nums)\n",
        "test": "assert     zero_count([1,2,3]) == 0",
        "num_ids": 5041,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    else:\n        s = 0\n        while n:\n            r = n % 2\n            n = n // 2\n            if r == 1:\n                s += 1\n        return s == 1\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(125) == False",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result_list = []\n    for sublist in test_list:\n        result_list.extend(sublist)\n    \n    return result_list\n    \ndef extract_doubly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result_list = []\n    for sublist in test_list:\n        for element in sublist:\n            result_list.append(element)\n    \n    return result_list\n    \ndef extract_triply(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result_list = []\n    for sublist in test_list:\n        for element in sublist:\n            for item in element:\n                result_list.append(item)\n    \n    return result_list\n    \nif __name__ == \"__main__\":\n    \n    '''\n    Given:\n    \n    singly_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    doubly_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    triply_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    \n    Expected output:\n    \n    singly_list = [1, 2, 3, 4, 5, 6, 7]\n    doubly_list = [1, 2, 3, 4, 5, 6, 7]\n    triply_list = [1, 2, 3, 4, 5, 6, 7]\n    \n    '''\n    \n    singly_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    doubly_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    triply_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    \n    print('Singly nested list:\\t', extract_singly(singly_nested_list))\n    print('Doubly nested list:\\t', extract_doubly(doubly_nested_list))\n    print('Triply nested list:\\t', extract_triply(triply_nested_list))\n    ",
        "test": "assert     extract_singly([[1, 2], [3, 4], [5, 6, 7]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = len(nums) - 1\n    while i >= 0:\n        j = 0\n        while j < i:\n            if nums[j] > nums[i]:\n                nums = switch(nums, j, i)\n            j += 1\n        i -= 1\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 3491,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            n+=1\n    return n\n",
        "test": "assert     count_samepair([1,2],[1,2,3],[1,2]) == 2",
        "num_ids": 1196,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = [str(x) for x in Input]\n    Input = \"\".join(Input)\n    count = 0\n    while True:\n        if Input.find(\"(\") == -1:\n            return count\n        else:\n            Input = Input[Input.find(\"(\")+1:]\n            count += 1\n",
        "test": "assert     find_lists(()) == 0, 'wrong result for ()'",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            max_diff = max(max_diff, abs(arr[i]-arr[j]))\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([0, -1]) == 1",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if ((a * x) + b) == n:\n            return (x, n - x)\n    return None\n",
        "test": "assert     find_solution(1, 3, 4) == (1, 3)",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for ele in list1:\n        if ele not in list2:\n            result.append(ele)\n    return result\n",
        "test": "assert     remove_elements([], [1, 4, 5]) == []",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    assert n >= 0, 'n must be a non-negative integer'\n    \n    sum_n = 0\n    i = 0\n    while (i <= n // 2):\n        if (n - 2*i) < 0:\n            break\n        sum_n = sum_n + (n - 2*i)\n        i += 1\n    return sum_n\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2 * (tan(pi/l) + 1))/2\n",
        "test": "assert     area_polygon(4,4) == 16.0",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                sum1 += i \n            else: \n                sum1 += i + n / i \n    for j in range(1, int(math.sqrt(n)) + 1): \n        if (n % j == 0): \n            if (n / j == j): \n                sum2 += j \n            else: \n                sum2 += j + n / j \n    if (sum1 == sum2): \n        return 1 \n    return 0\n",
        "test": "assert     div_sum(13) ==     True, div_sum(13) ",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    n = len(str1)\n    num = 0\n    for i in range(n):\n        if str1[i].lower() in \"abcdefghijklmnopqrstuvwxyz\":\n            num += 1\n    return num\n",
        "test": "assert     count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26, 'wrong result'",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_xor = 0\n    for i in A:\n        for j in A:\n            if i ^ j == 0:\n                even_xor += 1\n    return even_xor // 2\n",
        "test": "assert     find_even_pair([1,2,3]) == 1, 'Wrong output'",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pow_2 = 1\n    while pow_2<n:\n        pow_2*=2\n    return pow_2\n",
        "test": "assert     next_power_of_2(5) == 8",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count+=1\n    return count\n",
        "test": "assert     frequency([1, 2, 3, 3, 3],3) == 3",
        "num_ids": 2738,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for num in list1:\n        if num >= m and num <= n:\n            total += num\n    return total\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 3)     == sum([1, 2, 3]), \"sum_range_list([1, 2, 3, 4, 5, 6], 0, 3) == sum([1, 2, 3])\"",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Expected: 36.0\n    #a = math.sqrt(25 - (math.sqrt(5) - 1)**2)\n    return(5*a)\n",
        "test": "assert     perimeter_pentagon(10) == 50, \"Incorrect answer\"",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('absstst') == 0, 'Wrong'",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return type(test_tuple[0]) == type(test_tuple[1])\n",
        "test": "assert     check_type((10, 20, 30, 40)) == True, 'Wrong'",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    else:\n        mid = n // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            return is_majority(arr[mid + 1:], n - mid - 1, x)\n        else:\n            return is_majority(arr[:mid], mid, x)\n",
        "test": "assert     is_majority([1], 1, 5) == False",
        "num_ids": 3013,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num_of_set_bits = 0; \n    while (n): \n        num_of_set_bits += n & 1; \n        n >>= 1; \n    return num_of_set_bits; \n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 4557,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n",
        "test": "assert     odd_values_string('') == '', \"Expected odd_values_string('') to be ''\"",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\nprint(min_of_three(7,8,9))\n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n-1)&(~(2**l-1))\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(18,0,3)!= 0,     'Incorrect output'",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        if arr[low] < 0 and arr[high] >= 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] >= 0 and arr[high] < 0:\n            low += 1\n        else:\n            high -= 1\n    return arr\n",
        "test": "assert     re_arrange_array(arr = [6, 5, -2, -3, -1, 1, 5, 7], n = 3) == [6, 5, -2, -3, -1, 1, 5, 7], 'error'",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert     replace_blank(\" \", '!') == \"!\", \"replace_blank(\\\"\\\", '!')\"",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest_n = []\n    list1 = sorted(list1)\n    for i in range(n):\n        largest_n.append(list1[-i-1])\n    return largest_n\n",
        "test": "assert     larg_nnum([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1]",
        "num_ids": 1389,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    import numpy as np\n    \n    a = 2*np.pi*r*h\n    return a\n",
        "test": "assert         lateralsuface_cylinder(1,2) ==     12.566370614359172",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(f\"The volume of a cube with side length {l} is {l ** 3} units.\")\n    return l ** 3\n",
        "test": "assert     volume_cube(5) == 125, \"Wrong answer for 5, expected 125\"",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_set = n & 0xAAAAAAAA\n    return even_set\n",
        "test": "assert     even_bit_set_number(0b101010)!= 0b10101010",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert     check_occurences([]) == {}",
        "num_ids": 3515,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if(str[i:j+1]!= ''): \n                count += 1\n    return count\n",
        "test": "assert     number_of_substrings('') == 0, 'Wrong answer'",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    I just solved this one by solving the equation 2^n >= m (2n >= m)\n    using the same logic as I did with the range() function\n    '''\n    return pow(2,n) >= m\n",
        "test": "assert     get_total_number_of_sequences(1,1) == 1, \"This should be 1\"",
        "num_ids": 2155,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n    \n",
        "test": "assert     replace_list([1,2,3,4,5], [6,7,8,9]) == [1,2,3,4,6,7,8,9]",
        "num_ids": 957,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) > 0:\n        return len(str1)\n    else:\n        return 0\n",
        "test": "assert     count_charac(\"abcdefghijklmnopqrstuvwxyz\") == 26",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    x = int(math.sqrt(N))\n    while (x * x <= N):\n        x = x + 1\n    return x * x\ndef check_perfect_square(n): \n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    s = int(math.sqrt(n)) \n    return (s*s == n)",
        "test": "assert     next_Perfect_Square(3) == 4, \"Incorrect output\"",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr_len = len(arr)\n    if(arr_len <= 2):\n        return max(sum(arr), sum(arr[::-1]))\n    arr_sum = arr[:]\n    arr_sum.insert(0, 0)\n    arr_sum.append(0)\n    for i in range(1, arr_len+1):\n        arr_sum[i] = max(arr_sum[i-1], arr_sum[i]) + arr[i-1]\n    max_sum = arr[0] + arr[1]\n    for i in range(1, arr_len+1):\n        max_sum = max(max_sum, arr_sum[i] - arr_sum[i-1])\n    return max_sum\n",
        "test": "assert     max_sum([1, 3, 2, 1]) == 4, \"Wrong answer\"",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    while True:\n        y = (x + number/x) / 2\n        if y == x:\n            break\n        x = y\n    return x\n",
        "test": "assert     abs(babylonian_squareroot(3) - math.sqrt(3)) <= 0.001",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n    return L[0][n-1] \n",
        "test": "assert     lps(\"MISSISSIPPI\") == 7",
        "num_ids": 1757,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + sum(1/num for num in range(1, n))\n",
        "test": "assert     harmonic_sum(1) == 1, f\"The harmonic sum of 1 is incorrect.\\nIt should be {1} but was {harmonic_sum(1)}.\"",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict_nums = {}\n    output = []\n    for num in array_nums1:\n        if num not in dict_nums:\n            dict_nums[num] = 1\n        else:\n            dict_nums[num] += 1\n    for num in array_nums2:\n        if num in dict_nums and dict_nums[num]>0:\n            output.append(num)\n            dict_nums[num] -= 1\n    return output\n",
        "test": "assert     set(intersection_array([1,2,2,1],[2,2]))         == set([2])",
        "num_ids": 1339,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #return len([n for n in tup if n == x])\n    return tup.count(x)\n",
        "test": "assert     count_X((\"cat\", \"dog\", \"mouse\", \"cat\", \"mouse\", \"dog\"), \"cat\") == 2",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list = list[:]\n    list.insert(0,element)\n    return list\n",
        "test": "assert     insert_element([],5) == [5], 'incorrect'",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real_part = numbers.real\n    imaginary_part = numbers.imag\n    polar_coordinates = complex(real_part, imaginary_part)\n    return cmath.polar(polar_coordinates)\nprint(convert(complex(1,2)))\n",
        "test": "assert     convert((0+0j)) == (0.0, 0.0)",
        "num_ids": 1380,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i,int)])\nprint(count_integer([1,2,3,4,1.0]))\n",
        "test": "assert     count_integer([1,2,3]) == 3, \"count_integer is returning the wrong value.\"",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create a combination of l of length n\n    comb = combinations_with_replacement(l, n)\n    # print(type(comb))\n    # for c in comb:\n    #     print(c)\n    # return comb\n    return [x for x in comb]\n",
        "test": "assert     combinations_colors([1, 2, 3, 4], 1) == [ (1,), (2,), (3,), (4,) ]",
        "num_ids": 3532,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [2]\n    i = 3\n    #sqrt(n)\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    # https://stackoverflow.com/questions/19189779/sieve-of-eratosthenes-in-python\n    # using Sieve of Eratosthenes\n    sieve = [True] * (n+1)\n    for p in primes:\n        for i in range(p*p, n+1, p):\n            sieve[i] = False\n    return len([i for i in range(3, n+1, 2) if sieve[i] == True])\n    # using the Sieve of Eratosthenes\n    # for i in range(3, n+1, 2):\n    #     if sieve[i] == True:\n    #         primes.append(i)\n    #         for j in range(i*i, n+1, i):\n    #             sieve[j] = False\n    # return len(primes)\n",
        "test": "assert     count_Primes_nums(0) == 0, f\"The output for 0 should be 0. The output was {count_Primes_nums(0)}\"",
        "num_ids": 1259,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "test": "assert     swap_numbers(1, 2) == (2, 1)",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) >= len(test_tup2):\n        return max(test_tup1, test_tup2)\n    else:\n        return max(test_tup1, test_tup2)\n    \n    ",
        "test": "assert     (maximize_elements((1,2), (2,4)) == (2,4)), \"Incorrect output\"",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # a = (n**2 + 1) % (2**(n-1))\n    # b = n\n    # for j in range(n):\n    #     if a * (2*j-1) % (2**j) == b:\n    #         return 2*j-1\n    #     a = a * (2*j+1) % (2**(j+1))\n    #     b = b * (2*j+1) % (2**(j+1))\n    # return 2**j + 1\n    return 2**n + 1 - 2**(n-1)\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n",
        "test": "assert     division_elements((1, 2, 3), (1, 2, 3)) == (1, 1, 1)",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create a list of the list1 with length of L\n    # set a variable total_length to the length of the list1\n    # split the list1 into two parts with the length of L\n    # return the result\n    return (list1[0:L], list1[L:])\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6]) ",
        "num_ids": 1130,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # The dog's age in dog's years is equal to the difference between the current year and the birth year\n    # plus the difference between the current year and the start year, times the dog's age in human years.\n    # h_age = int(input('Enter the dog\\'s age in human years: '))\n    return h_age * 7\n",
        "test": "assert     dog_age(2) == 10",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = [S[i:i+step] for i in range(0, len(S), step)]\n    return result\n",
        "test": "assert     list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 1273,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if type(l)!= int or l < 0:\n        raise ValueError(\"Please enter a positive integer for side length.\")\n    \n    surface = 6 * l ** 2\n    return surface\n",
        "test": "assert     lateralsurface_cube(3) == 54",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    if n < 1:\n        return sum\n    else:\n        for i in range(n):\n            sum += (i+1)**2\n    return sum\n    \nprint(square_Sum(8))\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 0:\n        return 1\n    else:\n        return n * find_star_num(n-1)\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for num in arr:\n        if num % 2 == 0 and arr.index(num) % 2 == 0:\n            sum += num\n    return sum\nprint(sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n",
        "test": "assert     sum_even_and_even_index([2,3,4,5,6,7,8,9,10]) == 30",
        "num_ids": 1127,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum = sum + (i**5)\n        return sum\nprint(even_Power_Sum(100))\n",
        "test": "assert     even_Power_Sum(0) == 0, \"even_Power_Sum(0) should be 0\"",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list\n",
        "test": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(elem1 - elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n",
        "test": "assert     (substract_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (-4, -4, -4, -4)), 'incorrect output'",
        "num_ids": 1005,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    res = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            res += math.comb(n, i)\n    return res \n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159265359*(r**2)*h\n",
        "test": "assert     volume_cylinder(0, 10) == 0",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {k: v for (k, v) in dict.items() if v >= n}\n    return new_dict\n",
        "test": "assert     {1:3, 2:3, 3:3, 4:4, 5:3} == dict_filter({1:3, 2:3, 3:3, 4:4, 5:3}, 3)",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #Code Here\n    lst=[]\n    lst_tup=[]\n    for i in test_tup:\n        lst_tup.append(i)\n    lst.append(lst_tup)\n    temp = []\n    for i in lst:\n        for j in i:\n            if j not in temp:\n                temp.append(j)\n    #print(len(temp))\n    return len(temp)\n",
        "test": "assert     count_first_elements((5,3,3,2,5,1,2)) == 4",
        "num_ids": 3533,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(10*n-1)//9\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     (sequential_search(['A', 'B', 'C'], 'B') == (True, 1)), \"incorrect\"",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    # return len(set(test_list)) == len(test_list)\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1, 1, 2, 3, 4, 4]) == False",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for (n1,n2) in zip(nums1,nums2)]\n",
        "test": "assert     sub_list([1,2,3,4], [1,2,3,4]) == [0,0,0,0]",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in str(n):\n        if i in ['0','1','2','3','4','5','6','7','8','9']:\n            count += 1\n        elif i in ['1','3','5','7','9']:\n            count += 2\n        elif i in ['2','4','6','8']:\n            count += 3\n        elif i in ['0','1']:\n            count += 4\n        else:\n            return False\n    return True if count <= 9 else False\n",
        "test": "assert     validate(1234) == True",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\nprint(check_element([3,3,3],3))\nprint(check_element([3,2,3],3))\nprint(check_element([1,1,1],1))\nprint(check_element([1,2,3],2))\n",
        "test": "assert     check_element([1,1,1,1,1,1],1)",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.search(r'a.{2,3}b', text)\n    return x!= None\n",
        "test": "assert     text_match_two_three('a') == False",
        "num_ids": 1024,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max = 0\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n        if sum < 0:\n            sum = 0\n        if sum % k == 0 and sum > max:\n            max = sum\n    return max\n",
        "test": "assert     max_sub_array_sum_repeated([1, -1, 1, 1], 4, 1) == 2, 'Test 2 Failed'",
        "num_ids": 2042,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #code here\n    sqr_sum = 0\n    for i in range(2,n+1):\n        if i%2==0:\n            sqr_sum+=i**2\n    return sqr_sum\n",
        "test": "assert     square_Sum(1) == 0",
        "num_ids": 4161,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n",
        "test": "assert     max_length([[], [], []]) == 0",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = 1\n            elif j == 1:\n                dp[i][j] = i\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    return dp[n][k]\n",
        "test": "assert     count_no_of_ways(2,2) == 2, \"check the corner case for the function count_no_of_ways\"",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    x = n // m\n    return x\n",
        "test": "assert     find(10,5) == 2",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2+h**2)\n    return a\n",
        "test": "assert     otherside_rightangle(3,4) ==     5",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for num in listval:\n        if num > max:\n            max = num\n    return max\n",
        "test": "assert     max_val([1, 2, 3, 4, 5]) == 5, 'Test Failed'",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 1\n    for i in range(2, number//2 + 1):\n        if number % i == 0:\n            total += i\n    return total\n",
        "test": "assert     sum_div(6) == 6,    'Error on sum_div(6)'",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "test": "assert     get_Inv_Count([]) == 0",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list += flatten_list(i)\n        else:\n            flat_list.append(i)\n    return flat_list\n    ",
        "test": "assert     flatten_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1209,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(map(lambda x:sum(x),stdata))\n",
        "test": "assert     max_aggregate([(1,0,0), (2,1,0), (3,0,0)]) == 3",
        "num_ids": 1431,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        if ((i >> n) << n == i):\n            count += 1\n    return count\n    \n    \ndef count_binary_seq_efficient(n):\n    return 2**(2*n)\n    \n    \ndef count_binary_seq_count(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = [0 for i in range(n+1)]\n    count[0] = 1\n    for i in range(1,n+1):\n        count[i] += count[i-1]\n        if (i >= 2):\n            count[i] += count[i-2]\n    return count[n]\n    \n    \ndef count_binary_seq_memoization(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    memo = {}\n    def count_binary_seq(n):\n        if (n in memo):\n            return memo[n]\n        if (n == 0):\n            return 1\n        elif (n == 1):\n            return 2\n        else:\n            memo[n] = count_binary_seq(n-1) + count_binary_seq(n-2)\n            return memo[n]\n    return count_binary_seq(n)\n    \n    \ndef count_binary_seq_tabulation(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    tab = [0 for i in range(n+1)]\n    tab[0] = 1\n    tab[1] = 2\n    for i in range(2,n+1):\n        tab[i] = tab[i-1] + tab[i-2]\n    return tab[n]\n    \n    \ndef count_binary_seq_dp(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    dp[1] = 2\n    for i in range(2,n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n    \n    \nprint(count_binary_seq_dp(5))\nprint(count_binary_seq_dp(6))\nprint(count_binary_seq_dp(7))\nprint(count_binary_seq_dp(8))\nprint(count_binary_seq_dp(9))\nprint(count_binary_seq_dp(10))\nprint(count_binary_seq_dp(11))\nprint(count_binary_seq_dp(12))\nprint(count_binary_seq_dp(13))\nprint(count_binary_seq_dp(14))\nprint(count_binary_seq_dp(15))\nprint(count_binary_seq_dp(16))\nprint(count_binary_seq_dp(17))\nprint(count_binary_seq_dp(18))\nprint(count_binary_seq_dp(19))\nprint(count_binary_seq_dp(20))\n",
        "test": "assert     count_binary_seq(1) == 2",
        "num_ids": 2987,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n",
        "test": "assert     dict_depth({'a': 1, 'b': {'x': 2, 'y': {'z': 3}}}) == 3",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    \n    for i in range(ranges) :\n        count += rotations[index]\n        index += 1\n        if count > len(arr) :\n            count = count - len(arr)\n    return arr[count]\n",
        "test": "assert     find_Element([1,2,3,4,5],3,[1,2,3,4,5],2) == 3, \"Not working for find_Element\"",
        "num_ids": 2578,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words==[]:\n        return []\n    elif words[0][0]=='p':\n        return [words[0],words[1]]\n    else:\n        return start_withp(words[1:])\n",
        "test": "assert     start_withp(['python', 'is', 'awesome']) == ['python', 'is']",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        if k == 0:\n            return a[0]\n        else:\n            return 0\n    max_sum = 0\n    max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k))\n    if k == index + 1:\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    return max_sum\n",
        "test": "assert     max_sum_increasing_subseq([10, 20, 30, 40, 50, 60, 70, 80, 90], 7, 1, 7) == 70",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return tuplex[0]\n    if m == n:\n        return tuplex[n-1]\n    return (tuplex[m-1],tuplex[n-1])\ndef colon_listx(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    if m == 0:\n        return listx[0]\n    if m == n:\n        return listx[n-1]\n    return [listx[m-1],listx[n-1]]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return tuplex[0]\n    if m == n:\n        return tuplex[n-1]\n    return (tuplex[m-1],tuplex[n-1])\ndef colon_list(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    if m == 0:\n        return listx[0]\n    if m == n:\n        return listx[n-1]\n    return [listx[m-1],listx[n-1]]\ndef colon_set(setx,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    if m == 0:\n        return setx[0]\n    if m == n:\n        return setx[n-1]\n    return (setx[m-1],setx[n-1])\ndef colon_dict(dictx,m,n):\n    '''\n    Write a function to get a colon of a dict.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == n:\n        return dictx[n-1]\n    return (dictx[m-1],dictx[n-1])\ndef colon_tuple_n1(tuplex,m):\n    '''\n    Write a function to get a colon of a tuple with n-1 items.\n    '''\n    if m == 0:\n        return tuplex[0]\n    if m == len(tuplex)-1:\n        return tuplex[len(tuplex)-2]\n    return (tuplex[m-1],tuplex[len(tuplex)-2])\ndef colon_list_n1(listx,m):\n    '''\n    Write a function to get a colon of a list with n-1 items.\n    '''\n    if m == 0:\n        return listx[0]\n    if m == len(listx)-1:\n        return listx[len(listx)-2]\n    return [listx[m-1],listx[len(listx)-2]]\ndef colon_tuple_n2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple with n-2 items.\n    '''\n    if m == 0:\n        return tuplex[0]\n    if m == 1:\n        return tuplex[1]\n    if m == len(tuplex)-2:\n        return tuplex[len(tuplex)-1]\n    return (tuplex[m-1],tuplex[n-1])\ndef colon_list_n2(listx,m,n):\n    '''\n    Write a function to get a colon of a list with n-2 items.\n    '''\n    if m == 0:\n        return listx[0]\n    if m == 1:\n        return listx[1]\n    if m == len(listx)-2:\n        return listx[len(listx)-1]\n    return [listx[m-1],listx[n-1]]\ndef colon_set_n1(setx,m):\n    '''\n    Write a function to get a colon of a set with n-1 items.\n    '''\n    if m == 0:\n        return setx[0]\n    if m == len(setx)-1:\n        return setx[len(setx)-2]\n    return (setx[m-1],setx[len(setx)-2])\ndef colon_dict_n1(dictx,m):\n    '''\n    Write a function to get a colon of a dict with n-1 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == len(dictx)-1:\n        return dictx[len(dictx)-2]\n    return (dictx[m-1],dictx[len(dictx)-2])\ndef colon_dict_n2(dictx,m,n):\n    '''\n    Write a function to get a colon of a dict with n-2 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1])\ndef colon_dict_n3(dictx,m,n,p):\n    '''\n    Write a function to get a colon of a dict with n-3 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1],dictx[p-1])\ndef colon_dict_n4(dictx,m,n,p,q):\n    '''\n    Write a function to get a colon of a dict with n-4 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1],dictx[p-1],dictx[q-1])\ndef colon_dict_n5(dictx,m,n,p,q,r):\n    '''\n    Write a function to get a colon of a dict with n-5 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1],dictx[p-1],dictx[q-1],dictx[r-1])\ndef colon_dict_n6(dictx,m,n,p,q,r,s):\n    '''\n    Write a function to get a colon of a dict with n-6 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1],dictx[p-1],dictx[q-1],dictx[r-1],dictx[s-1])\ndef colon_dict_n7(dictx,m,n,p,q,r,s,t):\n    '''\n    Write a function to get a colon of a dict with n-7 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1],dictx[p-1],dictx[q-1],dictx[r-1],dictx[s-1],dictx[t-1])\ndef colon_dict_n8(dictx,m,n,p,q,r,s,t,u):\n    '''\n    Write a function to get a colon of a dict with n-",
        "test": "assert     colon_tuplex((1, 2, 3), 3, 4) == ((1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6))",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    nums1.sort()\n    nums2.sort()\n    for i in range(0, N):\n        products.append(nums1[i]*nums2[N-1-i])\n    return products\n",
        "test": "assert     large_product([1, 2, 3], [2, 3, 6], 3) == [6, 6, 6]",
        "num_ids": 1816,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n",
        "test": "assert     maximum(1,5) == 5, \"maximum(1,5) is not 5\"",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple(\"\") == (), \"Error\"",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ((n & -n) << 1)\n",
        "test": "assert     set_left_most_unset_bit(0) == 0",
        "num_ids": 2785,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol_cone = 1/3 * math.pi * r * r * h\n    return vol_cone\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol_cylinder = math.pi * r * r * h\n    return vol_cylinder\ndef volume_cuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    vol_cuboid = l * b * h\n    return vol_cuboid\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area_triangle = b * h/2\n    return area_triangle\ndef area_square(b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area_square = b * b\n    return area_square\ndef area_rectangle(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area_rectangle = l * b\n    return area_rectangle\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area_circle = math.pi * r * r\n    return area_circle\ndef area_parallelogram(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area_parallelogram = l * b\n    return area_parallelogram\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    area_trapezium = (a + b) / 2 * h\n    return area_trapezium\ndef area_kite(r1,r2):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    area_kite = 1/2 * math.pi * r1 * r2\n    return area_kite\ndef volume_kite(r1,r2,h):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    vol_kite = 1/3 * math.pi * r1 * r2 * h\n    return vol_kite\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol_sphere = (4/3) * math.pi * r * r * r\n    return vol_sphere\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    vol_cube = l * l * l\n    return vol_cube\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    vol_pyramid = 1/3 * b * h * h\n    return vol_pyramid\ndef volume_rectangular_prism(l,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    vol_rectangular_prism = l * b * h\n    return vol_rectangular_prism\ndef volume_circular_prism(r,h):\n    '''\n    Write a function to find the volume of a circular prism.\n    '''\n    vol_circular_prism = 1/3 * math.pi * r * r * h\n    return vol_circular_prism\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area_cone = 1/3 * math.pi * r * r + 1/2 * math.pi * r * h\n    return surface_area_cone\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area_cylinder = 2 * math.pi * r * (r + h)\n    return surface_area_cylinder\ndef surface_area_cuboid(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    surface_area_cuboid = 2 * (l * b + b * h + l * h)\n    return surface_area_cuboid\ndef surface_area_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surface_area_rectangle = 2 * (l * b)\n    return surface_area_rectangle\ndef surface_area_square(b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    surface_area_square = 4 * b\n    return surface_area_square\ndef surface_area_kite(r1,r2):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    surface_area_kite = 1/2 * math.pi * (r1 * r1 + r2 * r2)\n    return surface_area_kite\ndef surface_area_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    surface_area_circle = 2 * math.pi * r\n    return surface_area_circle\ndef surface_area_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surface_area_triangle = 1/2 * b * h\n    return surface_area_triangle\ndef surface_area_parallelogram(l,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    surface_area_parallelogram = 2 * l * b\n    return surface_area_parallelogram\ndef surface_area_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    surface_area_trapezium = ((a + b) / 2) * h\n    return surface_area_trapezium\ndef volume_and_surface_area(shape,*args):\n    '''\n    Write a function to find the volume and surface area of a shape.\n    The shape can be either 'cube', 'cylinder', 'cone', 'kite','rectangular prism', 'circular prism','square', 'triangle', 'parallelogram', 'trapezium', 'kite'.\n    You can enter the dimensions for any shape as many times as you want separated by a comma.\n    You can enter as many dimensions as you want for any shape separated by a comma.\n    You can enter as many dimensions as you want separated by a space.\n    The inputs for the volume and surface area of each shape are:\n    For a cube, you enter the length, breadth and height.\n    For a cone, you enter the radius of the base, the height and the slant height.\n    For a cylinder, you enter the radius and the height.\n    For a kite, you enter the two radii of the two sides.\n    For a rectangular prism, you enter the length, breadth and height.\n    For a circular prism, you enter the radius and the height.\n    For a square, you enter the side length.\n    For a triangle, you enter the base and the height.\n    For a parallelogram, you enter the length and the breadth.\n    For a trapezium, you enter the length of the shorter side, the length of the longer side, and the height.\n    The return value for each shape is a tuple of the volume and surface area for that shape.\n    For example, if you enter:\n    volume_and_surface_area('cube', 4, 4, 4)\n    You will get the return value (64, 256) for the cube.\n    '''\n    if shape == 'cube':\n        l,b,h = args\n        vol_cube = l * b * h\n        surface_area_cube = 6 * l * b\n        return (vol_cube, surface_area_cube)\n    if shape == 'cylinder':\n        r,h = args\n        vol_cylinder = math.pi * r * r * h\n        surface_area_cylinder = 2 * math.pi * r ",
        "test": "assert     volume_cone(3,0)==0",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    for i in range(n):\n        if 2**i <= n:\n            max_power = i\n    return max_power\n",
        "test": "assert     highest_Power_of_2(2) == 1",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #base case\n    if n == 0: \n        return 2\n    #recursive call \n    elif n == 1: \n        return 1\n    #recursive call \n    else: \n        return find_lucas(n-2) + find_lucas(n-1)\n",
        "test": "assert     find_lucas(3) == 4",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string % element)\n",
        "test": "assert ",
        "num_ids": 2707,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i] for i in range(len(l3))} for i in range(len(l1))}\n",
        "test": "assert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], [True, False, False]) == {1: {'a': True, 'b': False, 'c': False}, 2: {'a': True, 'b': False, 'c': False}, 3: {'a': True, 'b': False, 'c': False}}",
        "num_ids": 1704,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 5 == 0:\n        return get_max_sum(n/5) + n/5\n    elif n % 3 == 0:\n        return get_max_sum(n/3) + n/3\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + n/2\n    else:\n        return n\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 3578,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    count = 0\n    max = 0\n    for i in input_list:\n        if type(i) == list:\n            count += max_length_list(i)\n        else:\n            count += 1\n            if count > max:\n                max = count\n    return max\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert     check_distinct((1,2,3,1)) == False, 'Test case 1 failed'",
        "num_ids": 1091,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n",
        "test": "assert     first_non_repeating_character('a') == 'a'",
        "num_ids": 2879,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pass \n    if re.match(r'^[a-z]$|^([a-z]).*\\1$',string):\n        return True\n    else:\n        return False ",
        "test": "assert     re.match(regex, \"abc\" * 4) == None, \"should fail\"",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        elif a<c:\n            return c\n        else:\n            return a\n    elif b<a:\n        if a<c:\n            return a\n        elif b<c:\n            return c\n        else:\n            return b\n    else:\n        return a\n",
        "test": "assert     median_numbers(1,2,2) == 2, \"case: two values\"",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n",
        "test": "assert     sum_of_digits([]) == 0, 'Empty list'",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x,y:x^y, test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((1, 0, 1, 1), (0, 1, 1, 1)) == (1, 1, 0, 0), \"bitwise_xor test case 1 failed\"",
        "num_ids": 986,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "test": "assert     extract_freq([(1, 1, 1, 1), (1, 2, 3, 4), (1, 3, 5, 7), (1, 5, 7, 9), (1, 3, 5, 7)]) == 4",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n",
        "test": "assert     (add_nested_tuples(('apple', 'banana'), ('mango', 'kiwi')) == ('applemango', 'bananakiwi')), 'Incorrect output'",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        min = a\n    else:\n        min = b\n    return min\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        max = a\n    else:\n        max = b\n    return max\n    \ndef minimum_of_three(a,b,c):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    min = minimum(a,b)\n    min = minimum(min,c)\n    return min\n    \ndef maximum_of_three(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    max = maximum(a,b)\n    max = maximum(max,c)\n    return max\n    \ndef minimum_of_four(a,b,c,d):\n    '''\n    Write a python function to find the minimum of four numbers.\n    '''\n    min = minimum(a,b)\n    min = minimum(min,c)\n    min = minimum(min,d)\n    return min\n    \ndef maximum_of_four(a,b,c,d):\n    '''\n    Write a python function to find the maximum of four numbers.\n    '''\n    max = maximum(a,b)\n    max = maximum(max,c)\n    max = maximum(max,d)\n    return max\n    \ndef minimum_of_five(a,b,c,d,e):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    min = minimum(a,b)\n    min = minimum(min,c)\n    min = minimum(min,d)\n    min = minimum(min,e)\n    return min\n    \ndef maximum_of_five(a,b,c,d,e):\n    '''\n    Write a python function to find the maximum of five numbers.\n    '''\n    max = maximum(a,b)\n    max = maximum(max,c)\n    max = maximum(max,d)\n    max = maximum(max,e)\n    return max\n    \ndef swap(a,b):\n    '''\n    Write a python function to swap two numbers.\n    '''\n    a = b\n    b = a\n    return a,b\n    \ndef swap_minimum_and_maximum(a,b,c):\n    '''\n    Write a python function to swap the minimum and maximum of three numbers.\n    '''\n    min = minimum(a,b)\n    max = maximum(a,b)\n    a = max\n    b = min\n    min = minimum(a,b)\n    max = maximum(a,b)\n    \n    c = minimum_of_three(a,b,c)\n    d = maximum_of_three(a,b,c)\n    a = c\n    b = d\n    c = minimum_of_three(a,b,c)\n    d = maximum_of_three(a,b,c)\n    \n    return a,b,c,d\n    \ndef minimum_of_n_numbers(a,b,c,d):\n    '''\n    Write a python function to find the minimum of n numbers.\n    '''\n    min = minimum(a,b)\n    min = minimum(min,c)\n    min = minimum(min,d)\n    return min\n    \ndef maximum_of_n_numbers(a,b,c,d):\n    '''\n    Write a python function to find the maximum of n numbers.\n    '''\n    max = maximum(a,b)\n    max = maximum(max,c)\n    max = maximum(max,d)\n    return max\n    \ndef swap_minimum_and_maximum_of_n_numbers(a,b,c,d):\n    '''\n    Write a python function to swap the minimum and maximum of n numbers.\n    '''\n    min = minimum_of_n_numbers(a,b,c,d)\n    max = maximum_of_n_numbers(a,b,c,d)\n    a = max\n    b = min\n    min = minimum_of_n_numbers(a,b,c,d)\n    max = maximum_of_n_numbers(a,b,c,d)\n    \n    return a,b,min,max\n    \ndef program_1():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    \n    print(\"Minimum of the two numbers: \", minimum(a,b))\n    print(\"Maximum of the two numbers: \", maximum(a,b))\n    \ndef program_2():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    \n    print(\"Minimum of the three numbers: \", minimum_of_three(a,b,c))\n    print(\"Maximum of the three numbers: \", maximum_of_three(a,b,c))\n    \ndef program_3():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    d = int(input(\"Enter the fourth number: \"))\n    \n    print(\"Minimum of the four numbers: \", minimum_of_four(a,b,c,d))\n    print(\"Maximum of the four numbers: \", maximum_of_four(a,b,c,d))\n    \ndef program_4():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    d = int(input(\"Enter the fourth number: \"))\n    e = int(input(\"Enter the fifth number: \"))\n    \n    print(\"Minimum of the five numbers: \", minimum_of_five(a,b,c,d,e))\n    print(\"Maximum of the five numbers: \", maximum_of_five(a,b,c,d,e))\n    \ndef program_5():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    d = int(input(\"Enter the fourth number: \"))\n    e = int(input(\"Enter the fifth number: \"))\n    \n    print(\"Minimum of the five numbers: \", minimum_of_five(a,b,c,d,e))\n    print(\"Maximum of the five numbers: \", maximum_of_five(a,b,c,d,e))\n    \n    a,b,c,d = swap_minimum_and_maximum(a,b,c)\n    print(\"Minimum of the five numbers after swapping: \", minimum_of_five(a,b,c,d,e))\n    print(\"Maximum of the five numbers after swapping: \", maximum_of_five(a,b,c,d,e))\n    \ndef program_6():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    \n    print(\"Minimum of the three numbers: \", minimum_of_three(a,b,c))\n    print(\"Maximum of the three numbers: \", maximum_of_three(a,b,c))\n    \n    a,b,c,d = swap_minimum_and_maximum(a,b,c)\n    print(\"Minimum of the three numbers after swapping: \", minimum_of_three(a,b,c))\n    print(\"Maximum of the three numbers after swapping: \", maximum_of_three(a,b,c))\n    \ndef program_7():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    \n    print(\"Minimum of the four numbers: \", minimum_of_four(a,b,c,d))\n    print(\"Maximum of the four numbers: \", maximum_of_four(a,b,c,d))\n    \n    a,b,c,d = swap_minimum_an",
        "test": "assert     minimum(2,3) == 2",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False\n",
        "test": "assert     check_tuplex([0, 1, 2, 3, 4], (5, 6)) == False",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n",
        "test": "assert     find_Parity(13) ==     1, \"Incorrect output for find_Parity(13)\"",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(str(n), reverse=True)))\n",
        "test": "assert         rearrange_bigger(513) == 531",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    assert len(nums1)==len(nums2)\n    n = len(nums1)\n    pairs = []\n    h = []\n    for i in range(n):\n        for j in range(nums2[i]):\n            heapq.heappush(h,(nums1[i]+nums2[j],i,j))\n    for i in range(k):\n        pairs.append([nums1[heapq.heappop(h)[1]],nums2[heapq.heappop(h)[2]]])\n    return pairs\n",
        "test": "assert k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]",
        "num_ids": 3603,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 0\n    min_list = []\n    for item in list1:\n        if isinstance(item, tuple):\n            min_prod = item[0]*item[1]\n            min_list.append(min_prod)\n    min_list.sort()\n    return min_list[0]\n",
        "test": "assert     min_product_tuple([(1,2), (3,4)]) == 2, \"Error\"",
        "num_ids": 1265,
        "indeed": true
    },
    {
        "number": 410,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n",
        "test": "assert     min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #list_words = word.split(\"_\")\n    #print(list_words)\n    #print(word)\n    \n    #return ''.join(map(str.capitalize, list_words))\n    #return \"\".join(w.capitalize() for w in word.split(\"_\"))\n    #return \"\".join(map(str.capitalize, word.split(\"_\")))\n    return re.sub(r'(_\\w)',lambda x:x.group(1)[1].upper(), word)\n",
        "test": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [n for n in l if n % 2 == 0]\n",
        "test": "assert     remove_odd([3,4,5,6,7,8,9,10]) == [4,6,8,10], 'Wrong answer'",
        "num_ids": 994,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "test": "assert     extract_nth_element([(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5)],2) == (1,2,3,4,5)",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(element in list2 for element in list1) \nprint(overlapping([1,2,3,4,5],[2,3,4,5,6,7]))\nprint(overlapping([1,2,3,4,5],[2,3,4,5,6,7,8]))\nprint(overlapping([1,2,3,4,5],[2,3,4,5,6,7,9]))\n",
        "test": "assert     overlapping([1,2,3,4,5], [1,2,3,4]) == True",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[len(arr) - 1] * arr[len(arr) - 2]\n",
        "test": "assert     max_Product([0, -2, 3, 0]) == 0",
        "num_ids": 1329,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Input : \n    #list_of_tuple = [(2, 4, 1), (2, 4, 7), (3, 4, 1), (3, 4, 2)]\n    #Output : 2\n    #Explanation : The common first element in the given list of tuple is 2.\n    \n    list_of_tuple = Input\n    if list_of_tuple == []:\n        return \"Empty list\"\n    else:\n        list_of_tuple = set(list_of_tuple)\n        list_of_tuple = list(list_of_tuple)\n        list_of_tuple.sort()\n        if len(list_of_tuple) == 1:\n            return list_of_tuple[0]\n        else:\n            for i in range(0,len(list_of_tuple)-1):\n                if list_of_tuple[i] == list_of_tuple[i+1]:\n                    return list_of_tuple[i]\n                else:\n                    return list_of_tuple[i]\n",
        "test": "assert     group_tuples([('1', '2', '3'), ('4', '5', '6'), ('7', '8', '9'), ('1', '2', '3')]) ",
        "num_ids": 1896,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort(key=len)\n    return lst[-1]\n",
        "test": "assert     Find_Max([[1], [2], [1, 2]]) == [1, 2], \"Check the examples\"",
        "num_ids": 987,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if not list1:\n        return 0\n    total = 0\n    for x in list1:\n        total += round(x)\n    return total * len(list1)\n",
        "test": "assert ",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    # return the sum of the cube of all the even numbers upto n.\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum\n",
        "test": "assert     cube_Sum(1) == 0",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ':'.join(test_tup)\n",
        "test": "assert     concatenate_tuple(('hello',)) == 'hello', 'wrong result'",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        lst.append(i**3)\n    return sum(lst)/n\n",
        "test": "assert     find_Average_Of_Cube(1)     == 1,     \"Error\"",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear((\"e\", \"e\", \"d\", \"e\", \"i\", \"n\", \"e\")) == \"e\"",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1: \n        if x in i: \n            count += 1\n    return count\n    \nprint(count_element_in_list([[], [1], [2, 3, 4, 4, 5], [3], [3, 7, 8, 9], [3, 7, 8, 9], [5]], 3))",
        "test": "assert     count_element_in_list([[1,2,3], [1,2,3], [1,2,3]], 3) == 3",
        "num_ids": 1208,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    res = []\n    for i in nums:\n        if i % 2!= 0:\n            res.append(i)\n    return res\n",
        "test": "assert     filter_oddnumbers([0, 2, 4, 6, 8]) == [], \"Wrong result\"",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = dt[::-1]\n    dt = '-'.join(dt)\n    return dt\n",
        "test": "assert     change_date_format('2020-10-14') == '14-10-2020'",
        "num_ids": 1189,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    import math\n    gap = len(my_list) // 2\n    while gap > 0:\n        for index in range(gap, len(my_list)):\n            current_value = my_list[index]\n            current_position = index\n            while current_position >= gap and my_list[current_position-gap] > current_value:\n                my_list[current_position] = my_list[current_position-gap]\n                current_position -= gap\n            my_list[current_position] = current_value\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([4,3,2,1]) == [1,2,3,4], \"Check\"",
        "num_ids": 1083,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n",
        "test": "assert     and_tuples((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 2, 3, 4), 'Failed'",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b - math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n",
        "test": "assert     parabola_directrix(1, 0, 0) == 0",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([1,2,3,4], [3,2,1,0]) == True, \"Wrong output for common_element([1,2,3,4], [3,2,1,0])\"",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2\n",
        "test": "assert     median_trapezium(1,1,1) == 1.0",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return all(number >= i for i in arr)\n",
        "test": "assert     check_greater([1,2,3,4,5],3) == False",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '[a-zA-Z]*b[a-zA-Z]*'\n    result = re.search(pattern, text)\n    return result!= None\n",
        "test": "assert     text_match_one('') == False, 'wrong result'",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Your code goes here\n    if n < 0 :\n        n = n * -1\n    return int(str(n)[-1])\n",
        "test": "assert     last_Digit(12345) == 5",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = list()\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n",
        "test": "assert     neg_nos([1,2,3,4,5]) == [], 'incorrect'",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2=\"\"\n    for i in str1:\n        if i in [str(j) for j in range(1,10)]:\n            str2+=i\n    return str2\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    x = len(test_list)\n    count = 0\n    for i in range(x):\n        for j in range(i + 1, x):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert     count_bidirectional([]) == 0, 'Empty input'",
        "num_ids": 1354,
        "indeed": true
    },
    {
        "number": 439,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    #print(L)\n    i=0\n    x=0\n    L=list(reversed(L))\n    #print(L)\n    while i<len(L):\n        x=x+L[i]*(10**i)\n        i+=1\n    return x\n",
        "test": "assert     multiple_to_single([1]) == 1, \"Single element.\"",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Write a regex to search for adverbial pattern:\n    pattern = r\"\\b((s(tud)|(do)|(rud)|(tsk)|(tik)|(tum)|(tsk)|(tok)|(tum))(\\'s)*)\\b\"\n    # Find the pattern in the text:\n    result = re.search(pattern, text)\n    # Print the result\n    print(result)\n",
        "test": "assert     find_adverb_position('') == None",
        "num_ids": 3551,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6 * l * l)\n",
        "test": "assert     surfacearea_cube(1) == 6",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return count/len(nums)\n",
        "test": "assert     positive_count([1,2,3,4]) == 1",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max([i for i in list1 if i < 0]) \n",
        "test": "assert     largest_neg([0, 1, 2, 3, 4, -5]) == -5",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K > len(test_list):\n        return test_list\n    else:\n        return test_list[0:K]\n",
        "test": "assert     ((1, 2, 3), 2) == trim_tuple(((1, 2, 3), 2), 2)",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(tup1*tup2 for tup1,tup2 in zip(test_tup1,test_tup2))\n",
        "test": "assert     index_multiplication((1,2,3), (4,5,6)) == (4, 10, 18), 'incorrect output for index_multiplication((1,2,3), (4,5,6))'",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for element in lst: \n        if(element in tup): \n            count += 1\n    return count \n    \nprint(count_Occurrence((1,2,3,2,3,4,1,1,3,3,1,1), [1,2,3,2,3,4]))\n",
        "test": "assert     count_Occurrence((1,3,5),(1,3,5,7)) == 3, \"testing failed\"",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return 2*cal_sum(n-1) - cal_sum(n-2)\n",
        "test": "assert     cal_sum(1) ==     1",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output_list = []\n    for i in range(l):\n        output_list.append(str[i])\n    return output_list\n",
        "test": "assert     extract_string(['python', 'is', 'best', 'programming'], 2) == ['python', 'is']",
        "num_ids": 3073,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = ''.join(text1.split())\n    return text\n",
        "test": "assert     remove_whitespaces('abc') == 'abc'",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(100,100)==0",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    i = 1\n    while(i < n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                factors.append(i)\n        i += 1\n    return sum(factors)\n",
        "test": "assert     sumofFactors(0) == 0, \"Test failed\"",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('[a-z]*z[a-z]*', text) is not None\n",
        "test": "assert     text_match_wordz('The quick brown fox jumps over the lazy dog') == True",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum=[]\n    for i in range(1,13):\n        monthnum.append(i)\n    if monthnum2 in monthnum:\n        return True\n    return False\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    returnlist = []\n    for i in range(len(stringlist)):\n        returnlist.append(stringlist[i][::-1])\n    return returnlist\n",
        "test": "assert     reverse_string_list([\"abc\", \"def\", \"ghi\"]) == [\"cba\", \"fed\", \"ihg\"]",
        "num_ids": 948,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    return lst[0:1]\n",
        "test": "assert Find_Min([1,1,1,1,1,1]) == [1]",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert     rectangle_area(2,3) == 6, \"Wrong area\"",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    l = ['q', 'Q']\n    for i in str1:\n        if i in l:\n            str1 = str1.replace(i, '')\n    return str1\n",
        "test": "assert     remove_uppercase('test') == 'test'",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x: x[0], lst)) \n",
        "test": "assert     Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])     == [1, 4, 6], 'Check'",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr(\"\") == 0",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        comb = []\n        for i in range(len(list1)):\n            temp = list1[i]\n            rem = list1[:i] + list1[i+1:]\n            for x in combinations_list(rem):\n                comb.append([temp] + x)\n        return comb\n",
        "test": "assert     combinations_list([1,2,3]) ==     [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]",
        "num_ids": 1272,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(2)] for j in range(n)]\n    max_product = float('-inf')\n    dp[0][0] = arr[0]\n    dp[0][1] = arr[0]\n    for i in range(1, n):\n        dp[i][0] = max(arr[i], dp[i-1][0]*arr[i], dp[i-1][1]*arr[i])\n        dp[i][1] = min(arr[i], dp[i-1][0]*arr[i], dp[i-1][1]*arr[i])\n        max_product = max(max_product, dp[i][0])\n    return max_product\n",
        "test": "assert     max_subarray_product([2,3,-2,4]) == 6",
        "num_ids": 1450,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1 and dict[n]!= n:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_value({0:1, 1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1}, 1) == True",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}\n",
        "test": "assert     drop_empty({}) == {}, \"Wrong output for drop_empty\"",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    dp = [0]*len(arr)\n    dp[0] = arr[0]\n    for i in range(1, len(arr)):\n        dp[i] = max(arr[i], dp[i-1]*arr[i])\n    return max(dp)\n",
        "test": "assert     max_product([1, 2, 3, 4, 5, 6]) == 720",
        "num_ids": 1916,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return ((test_tup[0]+test_tup[1]),(test_tup[1]+test_tup[2]),(test_tup[0]+test_tup[2]))\n",
        "test": "assert     add_pairwise((1, 1, 1)) == (2, 2, 2)",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # If len(arr) < 2, the product of \n    # all the elements of the array will be 1. \n    if len(arr) < 2: \n        return 1\n    else: \n        # Else initialize product \n        # as arr[0]. \n        product = arr[0] \n        \n        # Calculate the product of \n        # all the elements of arr[1] \n        # and so on. \n        for i in range(1, len(arr)): \n            product = product * arr[i] \n        \n        return product % n \n",
        "test": "assert     (((find_remainder([1, 2, 3, 4, 5], 5)) % 5) == 0), \"Wrong answer!\"",
        "num_ids": 987,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    try:\n        if sorted(l)==list(range(min(l),max(l)+1)):\n            return True\n        return False\n    except:\n        return False\n",
        "test": "assert     check_Consecutive([1, 3, 5, 7, 10]) == False, 'check_Consecutive([1, 3, 5, 7, 10])!= False'",
        "num_ids": 3391,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [i for i in test_list1 if i in test_list2]\n",
        "test": "assert     tuple_intersection([(1,2),(2,3),(3,4)], [(1,2),(2,3),(3,4)]) == [(1,2),(2,3),(3,4)] ",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 = str2 + newch\n        else:\n            str2 = str2 + str1[i]\n    return str2\n",
        "test": "assert     replace_char('mjm','m','n') == 'njn'",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Set max to -1 to start with, since there's no higher value\n    # than -1 in a dictionary.\n    max_key = -1\n    # Iterate through the dictionary and set the current value\n    # of max to the current max if the max value is greater than\n    # the current value.\n    for key, value in dict1.items():\n        if value > max_key:\n            max_key = value\n    # Use a list of lists to store the key, value pairs.\n    # The key of the current list will be the current value,\n    # and the value of the current list will be the current key.\n    list_of_pairs = []\n    for key, value in dict1.items():\n        pair = [value, key]\n        list_of_pairs.append(pair)\n    # Sort the list_of_pairs, then iterate through and add the\n    # key to the new dictionary.\n    list_of_pairs.sort()\n    new_dict = {}\n    for pair in list_of_pairs:\n        new_dict[pair[1]] = pair[0]\n    return new_dict\n",
        "test": "assert     sort_counter({\"A\": 3, \"C\": 1, \"F\": 2}) ==     {\"A\": 3, \"C\": 1, \"F\": 2}",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums, reverse = True)[:2])\n    \ndef bigger_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(sum(sorted(nums)[:-2]), sum(sorted(nums)[1:3]))\n    \ndef birthday_ranges(birthdays, ranges):\n    '''\n    Given two arrays, one of birthdays and one of ranges, determine how many people have valid birthdays within the given ranges.\n    '''\n    return sum([1 for bday in birthdays if bday in ranges])\n    \ndef reverse_pair(l):\n    '''\n    Write a python function to find the pair in an array that sum up to a given number.\n    '''\n    from collections import defaultdict\n    dict_ = defaultdict(list)\n    s = set()\n    for i,v in enumerate(l):\n        dict_[v].append(i)\n    for i,v in enumerate(l):\n        if len(dict_[v*2]) > 0:\n            j = dict_[v*2][0]\n            if j!= i:\n                s.add(v)\n                return tuple(sorted([v,l[j]]))\n    return None\n",
        "test": "assert     big_sum([1,2,3,4,5]) == 9, 'incorrect'",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower(\"python\") == \"python\"",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(\"abcdefghijklmnopqrstuvwxyz\", \"\")\n",
        "test": "assert     remove_lowercase(\"abcdefghijklmnopqrstuvwxyz\") == \"\"",
        "num_ids": 2775,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n :\n        return n % 10\n        n = n // 10\n    return n\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [] \n    for i in list:\n        if i % 2 == 1:\n            odd_list.append(i)\n    return odd_list\n",
        "test": "assert     Split([1,3,5,7,9]) == [1,3,5,7,9]",
        "num_ids": 1517,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1, n+1)]) - sum([x for x in range(1, n+1)])\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Your code goes here\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if((A[i]^A[j]) & 1) :\n                count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair([],1) == 0, 'incorrect output'",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(ch.upper() if ch.islower() else ch.lower() if ch.isupper() else ch for ch in string)\n",
        "test": "assert     toggle_string('') == ''",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def digit_distance(n1, n2):\n        n1 = str(n1)\n        n2 = str(n2)\n        return sum(abs(ord(n1[i]) - ord(n2[i])) for i in range(len(n1)))\n    return digit_distance(n1, n2)\n",
        "test": "assert     digit_distance_nums(12345, 12345) == 0",
        "num_ids": 1235,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([5, -1, 2, -1, 2, 3, 6, 2, -1, 2, 2], 8) == 12, \"test 2 failed\"",
        "num_ids": 3235,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # e.g. (1, 2, 3), (4, 5, 6) ==> (1, 2, 3, 4, 5, 6)\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n",
        "test": "assert     (sorted(union_elements((1,2,3), (3,2,1))) == [1, 2, 3])",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i)>max_len:\n            max_len = len(i)\n    return max_len\n    \ndef remove_from_list(lst, value):\n    '''\n    Write a python function to remove the first occurance of value from the list\n    '''\n    lst.remove(value)\n    return lst\n    \ndef Max_Min_Sum(lst):\n    '''\n    Write a python function to find the max, min, and sum of the list\n    '''\n    max_num = 0\n    min_num = 100\n    sum_num = 0\n    for i in lst:\n        if i>max_num:\n            max_num = i\n        if i<min_num:\n            min_num = i\n        sum_num += i\n    return (max_num,min_num,sum_num)\n",
        "test": "assert     Find_Max_Length([[1, 2], [3, 4]]) == 2, \"Check your output\"",
        "num_ids": 1314,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    extracted = re.findall('\"([^\"]*)\"',text)\n    if len(extracted) > 0:\n        return extracted[0]\n    else:\n        return None\n",
        "test": "assert     extract_values('a \"Hello World\"') == 'Hello World'",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs\n",
        "test": "assert     count_Pairs([-1,-3,-5,7], 4)     == 6",
        "num_ids": 1566,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the variable\n    total = 0\n    # Add each digit\n    for digit in str(n):\n        total += int(digit)\n    # Return the sum\n    return total\n",
        "test": "assert     sum_digits(0) == 0, \"sum_digits(0) returns wrong value\"",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #return sorted(list1) == list1 # time complexity O(n)\n    for i in range(len(list1)-1):\n        if(list1[i] > list1[i+1]):\n            return False\n    return True\n",
        "test": "assert     issort_list([1]) == True, 'is_sorted([1])'",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if type(length) is int and length > 0:\n        return [{}] * length\n    else:\n        return None\n",
        "test": "assert     empty_list(2) ==     [{}, {}]",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n",
        "test": "assert     sort_sublists([[], [], []]) == [[], [], []]",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) < 2:\n        return nums\n    result = []\n    for n in nums:\n        if n not in result:\n            result.append(n)\n    return result\n",
        "test": "assert     two_unique_nums([1, 2, 3, 2, 3, 6, 6]) == [1, 2, 3, 6], \"wrong result\"",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    result = 1\n    for num in unique_list:\n        result *= num\n    return result\n",
        "test": "assert unique_product([1,1,1,1,1]) == 1",
        "num_ids": 2932,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r > 0 and h > 0:\n        return (2*3.14*r*h)+2*3.14*r**2\n    else:\n        return 'Invalid radius and/or height'\n",
        "test": "assert ",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m = len(A)\n    n = len(B)\n    # check if A is sublist of B\n    i = 0\n    j = 0\n    while i < m and j < n:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    if i == m:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([2, 4, 6, 7, 8, 9], [4, 6, 7, 8, 9, 0]) == False",
        "num_ids": 1412,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n>=0):\n        fact = 1\n        for i in range(1, n+1):\n            fact = fact*i\n        fact = str(fact)\n        last_digit = int(fact[len(fact)-1])\n        return last_digit\n    else:\n        return \"Factorial should not be negative\"\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    for num in range(len(list1)):\n        final_list.append(list1[num])\n        final_list.append(list2[num])\n        final_list.append(list3[num])\n    return final_list\n",
        "test": "assert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) ^ set(test_tup2))\n",
        "test": "assert     find_dissimilar((\"f\", \"d\", \"a\", \"s\"), (\"f\", \"d\", \"a\", \"s\")) == []",
        "num_ids": 1608,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    #To remove odd elements from a nested tuple\n    def odd_ele(test_tuple, odd_fnc):\n        '''\n        Write a function to remove even elements in the nested mixed tuple.\n        '''\n        #Test-1\n        '''\n        Input-  mixed tuple- (10, 2, 3, 4, 5, 6, 7, 8, 'a', 1)\n        Output- (2, 4, 6, 8, 1)\n        '''\n        \n        test_list = list(test_tuple) \n        for i in range(0, len(test_list)):\n            if type(test_list[i]) == tuple:\n                for j in range(0, len(test_list[i])):\n                    if type(test_list[i][j]) == tuple:\n                        for k in range(0, len(test_list[i][j])):\n                            if type(test_list[i][j][k]) == tuple:\n                                for l in range(0, len(test_list[i][j][k])):\n                                    if type(test_list[i][j][k][l]) == tuple:\n                                        for m in range(0, len(test_list[i][j][k][l])):\n                                            if type(test_list[i][j][k][l][m]) == tuple:\n                                                for n in range(0, len(test_list[i][j][k][l][m])):\n                                                    if type(test_list[i][j][k][l][m][n]) == tuple:\n                                                        for o in range(0, len(test_list[i][j][k][l][m][n])):\n                                                            if type(test_list[i][j][k][l][m][n][o]) == tuple:\n                                                                for p in range(0, len(test_list[i][j][k][l][m][n][o])):\n                                                                    if type(test_list[i][j][k][l][m][n][o][p]) == tuple:\n                                                                        for q in range(0, len(test_list[i][j][k][l][m][n][o][p])):\n                                                                            if type(test_list[i][j][k][l][m][n][o][p][q]) == tuple:\n                                                                                for r in range(0, len(test_list[i][j][k][l][m][n][o][p][q])):\n                                                                                    if type(test_list[i][j][k][l][m][n][o][p][q][r]) == tuple:\n                                                                                        for s in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r])):\n                                                                                            if type(test_list[i][j][k][l][m][n][o][p][q][r][s]) == tuple:\n                                                                                                for t in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s])):\n                                                                                                    if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t]) == tuple:\n                                                                                                        for u in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t])):\n                                                                                                            if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u]) == tuple:\n                                                                                                                for v in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u])):\n                                                                                                                    if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v]) == tuple:\n                                                                                                                        for w in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v])):\n                                                                                                                            if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w]) == tuple:\n                                                                                                                                for x in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w])):\n                                                                                                                                    if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x]) == tuple:\n                                                                                                                                        for y in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x])):\n                                                                                                                                            if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y]) == tuple:\n                                                                                                                                                for z in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y])):\n                                                                                                                                                    if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z]) == tuple:\n                                                                                                                                                        if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o]) == tuple:\n                                                                                                                                                            print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                            break\n                                                                                                                                                                if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o][p]) == tuple:\n                                                                                                                                                                print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                                break\n                                                                                                                                                            else:\n                                                                                                                                                                pass\n                                                                                                                                                                \n                                                                                                                                                                if len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o])!= 0:\n                                                                                                                                                                print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                                break\n                                                                                                                                                            \n                                                                                                                                                        \n                                                                                                                                                        if len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o][p])!= 0:\n                                                                                                                                                            print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                            break\n                                                                                                                                                        else:\n                                                                                                                                                            pass\n                                                                                                                                                    \n                                                                                                                                                    if len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o][p][q])!= 0:\n                                                                                                                                                            print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                            break\n                                                                                                                                                        \n                                                                                                                                                        if len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o][p][q][r])!= 0:\n                                                                                                                                                            print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                            break\n                                                                                                                                                            \n                                                                                                                                                            if len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o][p][q][r][s])!= 0:\n                                                                                                                                                                print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                                break\n                                                                                                                                                            else:",
        "test": "assert     (even_ele(((1,2,3,4),(1,2,3),(1,2,3,4,5,6,7)), even_fnc)) == ((1,2,3,4),(2,4,6,7))",
        "num_ids": 3401,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n",
        "test": "assert     surface_Area(10,10) == 100",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if dict1[key] == 0:\n            return True\n    return False\n",
        "test": "assert     my_dict({'a':1, 'b':2}) == False",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 583,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan_calc(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return (n*(2*n-1)*catalan_calc(n-1))//(n+1)\n    return catalan_calc(num)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'ly\\b', text)\n",
        "test": "assert     find_adverbs(\"It's raining cats and cats\") == \"cats\"",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.nlargest(n, items)\n",
        "test": "assert     expensive_items([1, 2, 3, 4], 1) == [4]",
        "num_ids": 1672,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "test": "assert     split_Arr([], 3) == []",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    sorted_nums = sorted(nums)\n    return sorted_nums[-1]-sorted_nums[0]\n    #return max(nums) - min(nums)\n",
        "test": "assert     big_diff([1, 1, 1, 1]) == 0",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = 0\n    squares = []\n    for i in range(a, b+1):\n        x = i ** 2\n        if x <= b:\n            squares.append(x)\n    return squares\n",
        "test": "assert     perfect_squares(1, 3) == [1]",
        "num_ids": 2770,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=int(x)\n    theta=int(y)\n    x_rect=r*cmath.cos(theta*cmath.pi/180)\n    y_rect=r*cmath.sin(theta*cmath.pi/180)\n    return (x_rect,y_rect)\nprint(polar_rect(5,100))\n",
        "test": "assert     polar_rect(1,0) == (1,0)",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length == 0:\n        return []\n    elif length == 1:\n        return newList\n    else:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return newList\n",
        "test": "assert     swap_List([1,2,3,4,5,6,7,8,9,10]) == [10,2,3,4,5,6,7,8,9,1]",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k):\n        result = result * (n-i)//(i+1) \n    return result\n",
        "test": "assert     binomial_Coeff(1,0) == 1, 'Binomial coefficient for 1,0 is not 1'",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #ip = input(\"Enter the IP Address: \")\n    ip = ip.split('.')\n    for i in range(len(ip)):\n        if int(ip[i]) == 0:\n            ip[i] = \"0\"\n    return '.'.join(ip)\n",
        "test": "assert     removezero_ip(\"192.168.0.098\") == \"192.168.0.098\"",
        "num_ids": 2904,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for item in list1:\n        if item % 2 == 0:\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    return abs(even_list[0] - odd_list[0])\n",
        "test": "assert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 1, 'Check code'",
        "num_ids": 1288,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    if (n1!= n2) :\n        return -1\n    n = n1\n    m = 0\n    for i in range(0,n):\n        if (str1[i]!= str2[i]) :\n            m += 1\n    return m \n",
        "test": "assert     min_Swaps('1110111', '1110111') == 0, 'incorrect result'",
        "num_ids": 1547,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_size=0\n    for item in tuple_list:\n        byte_size=byte_size+sys.getsizeof(item)\n    return byte_size\n",
        "test": "assert     tuple_size((1,2)) ==     sys.getsizeof(1)+sys.getsizeof(2)",
        "num_ids": 2775,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2 or len(arr1) < len(arr2):\n        return None\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if i + 1 == k:\n                return arr1[i]\n            i += 1\n            j += 1\n    return None\n",
        "test": "assert     find_kth([1,2,3,4,5], [1,2,3,4,5], 1) == 1",
        "num_ids": 2387,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    s = 0\n    l = len(str(n))\n    m = n\n    while n > 0:\n        c = n % 10\n        s += c ** l\n        n = n // 10\n    return s == m\n",
        "test": "assert     armstrong_number(123) == False",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum,average = 0,0\n    for i in range(number+1):\n        sum = sum + i\n    average = sum / number\n    return(sum,average)\n",
        "test": "assert     sum_average(1) == (1, 1)",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_Even(3) == False",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    for key in d.keys():\n        if d[key] >= 2:\n            print(f'first repeated char: {key}')\n            return key\n    print('no repeated char')\n    return None\n",
        "test": "assert first_repeated_char('abca') == 'a', 'Test Failed'",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2,n+1):\n        if i == 2:\n            ludic.append(i)\n        else:\n            for j in ludic:\n                if j*j - 1 > i:\n                    ludic.append(i)\n                    break\n                elif i % j == 0:\n                    break\n            else:\n                ludic.append(i)\n    return ludic\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 3051,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "test": "assert     reverse_words('') == ''",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, int(num**0.5)+1):\n            if (num % i) == 0:\n                return False\n        return True\n    return False\n",
        "test": "assert     prime_num(12) == False",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n",
        "test": "assert     math.degrees(math.pi) == 180, \"Fail!\"",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m is None:\n        return None\n    else:\n        return m.group(0)\n",
        "test": "assert     re.findall('(a|b)', 'ab') == ['a', 'b']",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L]\n    return list1\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5, 6], 2) == [1, 2, 4, 5, 6]",
        "num_ids": 1011,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Get the maximum element from the list\n    for i in test_list:\n        i.sort(reverse=True)\n        \n    # Find the max element from the list\n    max_of_nth = max(test_list[N-1])\n    return max_of_nth\n",
        "test": "assert     max_of_nth([[1,2,3,4], [2,3,4,5], [3,4,5,6], [4,5,6,7]], 1) == 4",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result\n",
        "test": "assert     merge([['A', 1], ['C', 2], ['D', 3]]) == [ ['A', 1], ['C', 2], ['D', 3] ], 'incorrect'",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n",
        "test": "assert     cummulative_sum([1, 2, 3, 4, 5, 6]) == [1, 3, 6, 10, 15, 21]",
        "num_ids": 2876,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num)/len(num) for num in zip(*nums)]\n",
        "test": "assert     average_tuple(((1, 1), (2, 2), (3, 3))) == [2, 2], \"check your code\"",
        "num_ids": 1151,
        "indeed": true
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #Your Code Here\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(map(lambda x: x[0] % x[1], zip(test_tup1, test_tup2)))\n",
        "test": "assert     (1,2) % (2,4) == (0,2)",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d == 0): \n        return 0\n    if (steps < d): \n        return -1\n    else: \n        return 1 + min_Jumps(steps - d, d) \n",
        "test": "assert     min_Jumps(7, 7) == 0, 'Wrong result'",
        "num_ids": 3215,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1 = nums1[:]\n    nums2 = nums2[:]\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1\n",
        "test": "assert     div_list(    [5,5,5,5],     [1,1,1,1] ) == [5,5,5,5]",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isnumeric()]) + ''.join([i for i in test_str if i.isnumeric()])\n",
        "test": "assert     move_num('2') == '2'",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    d = {}\n    count = 0\n    for i in a:\n        if i % 2 == 0:\n            count += 1\n        d[i] = count\n    return max(d.values())\n",
        "test": "assert     largest_subset([20,10,5,4,3]) == 3, 'failed'",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    median = 0\n    while(k < n and i < n and j < n):\n        if(arr1[i] < arr2[j]):\n            i = i + 1\n            median = arr1[i - 1]\n        else:\n            j = j + 1\n            median = arr2[j - 1]\n        k = k + 1\n    return median\n",
        "test": "assert     get_median([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5) == 3",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result\n",
        "test": "assert     nth_nums([1,2,3,4],2) == [1,4,9,16]",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        raise TypeError('Expected a string')\n    for letter in string:\n        if not isinstance(letter, str):\n            raise TypeError('Expected a string')\n    return string.upper()\n",
        "test": "assert     is_upper(\"A\") == \"A\"",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "test": "assert     swap_List([1, 2, 3, 4, 5]) ",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    from math import pi\n    r = float(r)\n    a = r*2\n    s = math.pi*(r**2)\n    Area = (s*(3**0.5)/4)\n    return Area\n",
        "test": "assert     triangle_area(0) == 0, \"Wrong answer\"",
        "num_ids": 4402,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start == end:\n        return array[start]\n    if start > end:\n        return 0\n    if array[start]!= start:\n        return start\n    if array[end]!= end:\n        return end+1\n    mid = int((start + end) / 2)\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    return find_First_Missing(array,mid+1,end)\n",
        "test": "assert     find_First_Missing([4, 1, 2, 3]) == 0",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    even = []\n    while(i < len(list)):\n        if (list[i] % 2 == 0):\n            even.append(list[i])\n        i += 1\n    return even\n    \ndef Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    even = []\n    while(i < len(list)):\n        if (list[i] % 2 == 0):\n            even.append(list[i])\n        i += 1\n    return even\n",
        "test": "assert     Split([1,2,3,4,5,6]) == [2,4,6] ",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if ele == (0,0):\n        return sub\n",
        "test": "assert     adjac((0,0), [(0,0), (0,1), (0,-1), (1,0), (-1,0)]) == [(0,0), (0,1), (0,-1), (1,0), (-1,0)]",
        "num_ids": 2549,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n",
        "test": "assert     replace_spaces('') == ''",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result = []\n    for x in num_list:\n        if x!=0:\n            result.append(x)\n    for x in range(len(num_list)):\n        if num_list[x]==0:\n            result.append(num_list[x])\n    return result\n",
        "test": "assert     move_zero([0]) == [0]",
        "num_ids": 1339,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(0,n) : \n        for j in range(i+1,n):\n            xor ^= arr[i] ^ arr[j]\n    return xor\n",
        "test": "assert     pair_xor_Sum([1, 2, 3], 2) == 3",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for data in iterable:\n        hq.heappush(h, data)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     heap_sort([]) == [], \"Not correct!\"",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount :\n        return True\n    else :\n        return False\n",
        "test": "assert not noprofit_noloss(0,10)",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215*t) - (11.37*math.pow(v,0.16)) + (0.3965*t*math.pow(v,0.16))\n    return math.ceil(wci)\n",
        "test": "assert     wind_chill(4, 23) == 25, 'wrong'",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for sample_name in sample_names:\n        if sample_name[0] == 'r':\n            sample_names.remove(sample_name)\n    return sum(len(sample_name) for sample_name in sample_names)\n",
        "test": "assert     (sample_nam([]) == 0) ",
        "num_ids": 3051,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(','')\n    items = items.replace(')','')\n    items = items.replace('{','')\n    items = items.replace('}','')\n    items = items.replace('[','')\n    items = items.replace(']','')\n    return items\n",
        "test": "assert     remove_parenthesis(re.compile(r'[\\(\\)]').sub('', '2 * (4 + (3 - 2))')) == '2 * 4 + 3 - 2', 'wrong answer'",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #base case: n=0\n    if n==0:\n        return 0\n    #base case: n=1\n    if n==1:\n        return 1\n    else:\n        return n*is_nonagonal(n-1) + is_nonagonal(n-2)\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    r1=re.compile(r'\\bz\\b')\n    for word in re.findall(r1,text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle(\"Theze quick zebra jumps over the lazy dog.\") == False, \"z at the end should fail\"",
        "num_ids": 3014,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    new_input = []\n    for i in range(k):\n        new_input.append(input[i])\n    new_input.reverse()\n    for i in range(k, len(input)):\n        new_input.append(input[i])\n    return new_input\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 5) == [5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11, 12], \"Not reversed correctly\"",
        "num_ids": 1679,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #TODO: write code here\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('a', 1, 2, 3, 4), {'a': 1, 'b': 2}) == ('a', 1, 2, 3, 4, {'a': 1, 'b': 2})",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    cost = [[0 for i in range(cols)] for j in range(rows)]\n    # dp[i][j] is the max average of path ending at [i][j]\n",
        "test": "assert ",
        "num_ids": 3743,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = {k: v for k, v in students.items() if v[0] >= h and v[1] >= w}\n    return students\n",
        "test": "assert     filter_data({'Harry':(1.80,45)},1.70,40) == {'Harry':(1.80,45)} ",
        "num_ids": 1342,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,2,3], [4,5,6]) == 0",
        "num_ids": 1000,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(map(int, str(base**power)))\n",
        "test": "assert     power_base_sum(3, 2) == 9, \"Sum of digits of 3 to the power of 2 is incorrect\"",
        "num_ids": 2748,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    def return_quotation(text1):\n        '''\n        This function extracts values between quotation marks \" \" of the given string and returns a list of all the values.\n        '''\n        string = text1\n        text = re.findall('[^\"]*\"', string)\n        return text\n    text = return_quotation(text1)\n    #print(text)\n    return text\n",
        "test": "assert     extract_quotation(\"How are you\") == []",
        "num_ids": 2888,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i + 1],)\n    result_tup += (test_tup[-1],)\n    return result_tup\n",
        "test": "assert     multiply_elements( (1, 2, 0, 4, 5) ) == (1, 0, 0, 20, 0)",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i] += lst2[i]\n    return lst1\n",
        "test": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    dups = set()\n    for k, g in groupby(nums):\n        if k in dups:\n            continue\n        else:\n            dups.add(k)\n    return list(dups)\n",
        "test": "assert consecutive_duplicates([]) == [], \"Wrong Answer\"",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Define a function to calculate the lateral surface area of a cone\n    def lateral_surface_area(r,h):\n        # Find the surface area of the lateral base\n        lateral_base_surface_area = math.pi * (r**2)\n        # Find the lateral surface area of the cone\n        lateral_surface_area = lateral_base_surface_area + 2 * math.pi * r * (h/3)\n        # Return the lateral surface area of the cone\n        return lateral_surface_area\n    return lateral_surface_area(r,h)\nlateral_surface_area = lateralsurface_cone(3,5)\nprint(lateral_surface_area)\n",
        "test": "assert     lateralsurface_cone(0,0) == 0",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return(re.sub(r\"[,|.|\\s| ]\", \":\", text))\n",
        "test": "assert     replace_specialchar('hello') == 'hello'",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n    first_occurrence = -1\n    while low <= high:\n        mid = (low+high)//2\n        if x < A[mid]:\n            high = mid-1\n        elif x > A[mid]:\n            low = mid+1\n        else:\n            first_occurrence = mid\n            high = mid-1\n    return first_occurrence\n",
        "test": "assert     find_first_occurrence([1, 2, 3, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10], 10) == 12",
        "num_ids": 1297,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #Brute Force Solution: \n    #For every element in the array, we calculate sum of every possible sublist till now and check if they are divisible by k.\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        sum_so_far = 0\n        for j in range(i, n):\n            sum_so_far += arr[j]\n            if sum_so_far % k == 0:\n                res += sum_so_far\n    return res\n",
        "test": "assert ",
        "num_ids": 1256,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first = n & ~(1<<(len(bin(n))-2))\n    last = n & ~(1<<(len(bin(n))-3))\n    print (first, last)\n    return n & ~(1<<(len(bin(n))-2)) | last\n",
        "test": "assert     set_middle_bits(0b101010) == 0b101010",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    return bisect.bisect_left(a, x)\n",
        "test": "assert     bisect.bisect_left([1,2,3,4,5], 5) == 4",
        "num_ids": 886,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # function to check whether a string is starting with a vowel or not \n    if re.search(regex,string): \n        return True\n    else: \n        return False\n    # driver function \nstr = \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\"\nprint(check_str(str)) \nstr = \"Hello\"\nprint(check_str(str)) \n",
        "test": "assert     check_str('AnyString') == True",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n * geometric_sum(n - 1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    sq = int(math.sqrt(n)) \n    for i in range(1, sq + 1): \n        j = i * (i + 1) // 2\n        if (n >= j): \n            return j \n",
        "test": "assert     find_Index(1) == 1",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d={}\n    for i in range(0,len(test_tup)-1):\n        d[test_tup[i]]=test_tup[i+1]\n    return d\n",
        "test": "assert     tuple_to_dict(('a', 'b', 'c')) == {'a': 'b', 'b': 'c'}",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s=s.lower()\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same(\"All characters different\") == False",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side\n",
        "test": "assert     area_tetrahedron(1.0) == 1.0, 1.0",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Move all items of the list\n    # into the temporary list 'temp'.\n    temp = []\n    for i in range(len(list) - m, len(list)):\n        temp.append(list[i])\n    # Move items of 'list'\n    # into the temporary list 'temp'.\n    for i in range(0, len(list) - m):\n        temp.append(list[i])\n    # Copy the temporary list to 'list'.\n    for i in range(0, len(list)):\n        list[i] = temp[i]\n    return list\n",
        "test": "assert     rotate_right([1,2,3,4,5,6,7,8,9], 3) ",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value == None:\n            return True\n    return False\n    \ndef check_int(test_list):\n    '''\n    Write a function that takes a list of integers and returns the smallest integer in the list.\n    '''\n    # return the lowest integer in the list\n    return min(test_list)\n",
        "test": "assert     not check_none((1, 2, 3, 4, 0))",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    \n    for i in range(startnum, endnum+1):\n        divisible_by_2 = True\n        divisible_by_3 = True\n        divisible_by_5 = True\n        divisible_by_7 = True\n        divisible_by_all = True\n        \n        for j in str(i):\n            if int(j) % 2!= 0:\n                divisible_by_2 = False\n            if int(j) % 3!= 0:\n                divisible_by_3 = False\n            if int(j) % 5!= 0:\n                divisible_by_5 = False\n            if int(j) % 7!= 0:\n                divisible_by_7 = False\n        \n        if divisible_by_2:\n            if divisible_by_3:\n                if divisible_by_5:\n                    if divisible_by_7:\n                        result.append(i)\n    \n    return result\n    \nprint(divisible_by_digits(1,1000)",
        "test": "assert ",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 360:\n        area = math.pi * r**2\n    else:\n        print(\"Sector area is undefined for angle > 360.\")\n        area = None\n    return area\n",
        "test": "assert     sector_area(0, 360) == None, \"sector_area(0, 360) has the wrong output\"",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n",
        "test": "assert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGGTAB\") == \"AGGTAB\"",
        "num_ids": 1744,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result=[]\n    for i in range(len(str1)):\n        if str1[i]==\" \" and str1[i-1]!=str1[i-1].lower():\n            result.append(\" \")\n        result.append(str1[i])\n    return \"\".join(result)\n",
        "test": "assert     capital_words_spaces(\"\") == \"\"",
        "num_ids": 3254,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 110,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(i) if i.isdigit() else float(\"inf\") for i in x.split()])\n",
        "test": "assert     sort_numeric_strings(['0', '1', '10', '1', '2']) == ['0', '1', '1', '2', '10']",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3, 4], (1, 2)) == [1, 2, 3, 4, (1, 2)]",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for j in range(i):\n        if arr[j] > arr[(j+1)//2-1]:\n            return False\n    return True\n",
        "test": "assert     check_min_heap_helper([3,4,5,2,1,4,6,7,8,9], 4) == False",
        "num_ids": 1049,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n",
        "test": "assert     [(7, 7.7, 'R'), (8, 8.8, 'R')] == min_k([(7, 7.7, 'R'), (8, 8.8, 'R')], 2)",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for i, x in enumerate(l1) if x in l2 and x in l3 if i == l2.index(x) and i == l3.index(x)]\n",
        "test": "assert     extract_index_list([1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]) == []",
        "num_ids": 1628,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert     second_smallest([1, 2, 3, 4]) == 2",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r\"(\\s?[ab]+)+\", text):\n        return True\n    else:\n        return False\n",
        "test": "assert     re.match(r'ab*', 'ab') is not None",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    len_test_list = len(test_list)\n    count_pairs = 0\n    for i in range(0, len_test_list):\n        for j in range(i+1, len_test_list):\n            if test_list[i][::-1] == test_list[j]:\n                count_pairs += 1\n    return count_pairs\n",
        "test": "assert     count_reverse_pairs([]) == 0, \"Wrong Answer!\"",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for item in list1:\n        key = tuple(item)\n        if key in result:\n            result[key] += 1\n        else:\n            result[key] = 1\n    return result\n",
        "test": "assert     unique_sublists([[1,2,3],[4,5,6],[7,8,9,10]]) == { (1,2,3): 1, (4,5,6): 1, (7,8,9,10): 1}, \"Test 1 failed\"",
        "num_ids": 2004,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not num:\n        return False\n    num = num.replace('.', '', 1)\n    if not num:\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n",
        "test": "assert     is_decimal('0') == True",
        "num_ids": 1083,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for x in arr:\n        if arr.count(x)>1:\n            return False\n    return True\n",
        "test": "assert     unique_Element([1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5]) == False",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber_number=1,2,3,4,5,6,7,8,9,10,11,12\n    month=1,2,3,4,5,6,7,8,9,10,11,12\n    if monthnum3 in monthnumber_number:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(2) == True, \"month number 2 has 30 days\"",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[j] - arr[i] < min_diff:\n                min_diff = arr[j] - arr[i]\n    return min_diff\n",
        "test": "assert     find_min_diff([10, 30, 40, 90], 4) == 10, 'Wrong minimum diff'",
        "num_ids": 1152,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n",
        "test": "assert     number_ctr('123') == 3",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 2: \n        return 1 \n",
        "test": "assert     is_polite(1) == 1,     '# Error: is_polite(1)'",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1)]\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([1,2,3], 3) == 1",
        "num_ids": 1302,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "test": "assert     Diff([1,2,3], [1,2,3]) == [], \"Difference of the two lists should be []\"",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if(i%2!= 0) :\n            sum += i**4\n    return sum\n",
        "test": "assert     odd_num_sum(1)     == 1**4, 'Wrong output for input 1'",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in '(':\n            stack.append(i)\n        elif i in ')':\n            if len(stack)==0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression('(a + b') == False, 'Invalid'",
        "num_ids": 3381,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)\n",
        "test": "assert     ('The quick brown fox jumps over the lazy dog', '12') == ('The quick brown fox jumps over the lazy dog', '12')",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        print('The pattern {} is present in the string {}'.format(pattern,text))\n        print('The pattern {} is present in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)",
        "test": "assert occurance_substring(\"This is a string\",\"not a\") == None",
        "num_ids": 3385,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True\n",
        "test": "assert     odd_position([3,5,8,9,6,7,4,2]) == False, \"Wrong result\"",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_found = 0\n    for index in range(len(test_str) - 1):\n        if test_str[index] in 'aeiouAEIOU' and test_str[index + 1] in 'aeiouAEIOU':\n            vowels_found += 1\n    return vowels_found\n",
        "test": "assert     count_vowels(\"a\") == 0, 'wrong result for \"a\"'",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert     find_sum([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]) == 45",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    i = 0\n    j = 0\n    sublist = []\n    while i < len(list1):\n        if j == len(list1)-1:\n            sublist.append(list1[j])\n            break\n        if list1[j] == list1[j+1]:\n            sublist.append(list1[j])\n            j = j + 1\n        else:\n            if len(sublist)!= 0:\n                sublist.append(list1[j])\n                j = j + 1\n                i = j\n            else:\n                sublist.append(list1[j])\n                j = j + 1\n    return sublist\n    \nprint(pack_consecutive_duplicates([1,1,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5]))\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 1526,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    import collections\n    list_unique = []\n    for sublist in list1:\n        t = tuple(sublist)\n        if t not in list_unique:\n            list_unique.append(t)\n    return collections.Counter(list_unique)\n",
        "test": "assert     unique_sublists([[1,2,3], [4,5,6], [3,2], [1,1], [1,2,3]]) == {(1,2,3):1, (4,5,6):1, (3,2):1, (1,1):1}",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_tuples = []\n    for i in range(1, len(test_list)):\n        sum_tuples.extend(list(combinations(test_list,i)))\n    sum_tuples = list(sum_tuples)\n    print(sum_tuples)\n    return sum_tuples\n",
        "test": "assert     find_combinations(list(combinations([4, 4, 3, 2, 1], 4))) == [",
        "num_ids": 3489,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if (n % i == 0):\n            if (n / i == i): \n                cnt = cnt + 1\n            else: \n                cnt = cnt + 2\n    return cnt\nprint(count_divisors(15))\nprint(count_divisors(36))\n",
        "test": "assert     count_divisors(1) ==    1",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if(j-i+1)%2!= 0:\n                sum += arr[j]\n    return sum\n",
        "test": "assert     odd_length_sum([1, 2])             ==     3",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = int(h)\n    s = int(s)\n    v = int(v)\n    return h, s, v\n",
        "test": "assert     (rgb_to_hsv(0,0,0) == (0.0, 0.0, 0.0))",
        "num_ids": 2312,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if list1.index(i) % 2 == 0:\n            product = product*i\n        else:\n            pass\n    print(product)\nmul_even_odd([1,2,3,4,5,6,7,8,9])\n",
        "test": "assert ",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    lst = test_str.split(',')\n    return tuple([int(i) for i in lst])\n",
        "test": "assert tuple_str_int('0,1,2') == tuple_str_int('0, 1, 2')",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if x > a[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n",
        "test": "assert     right_insertion([1, 2, 3, 5], 4) == 3",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '[ab]{3}'\n    result = re.search(pattern, text)\n    return result!= None\n",
        "test": "assert     text_match_three('cdbcdb') == False",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_str = tuple(test_str)\n    new_tuple = tuple(test_list)\n    return new_tuple\n    #Expected Output:\n    #('orange', 'apple', 'lemon')\n    #('1234', '4567', '8910')\n",
        "test": "assert     new_tuple(['1', '2', '3'], '123') ==     ('1', '2', '3')",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 7, 6, 9, 2, 3, 1]) == False, \"Wrong output\"",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = []\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            res.append(elem)\n        else:\n            pass\n    return tuple(res)\n",
        "test": "assert     remove_nested(('1', (1, 2), '3')) == ('1', '3')",
        "num_ids": 1304,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Time complexity O(n), n being the number of lists.\n    # Space complexity O(1)\n    count = 0\n    for elem in input_list:\n        if type(elem) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([1, [2, 3, [4, [5, 6]]], 7, 8, 9]) == 1",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lower = 0\n    upper = len(arr)-1\n    while(lower<=upper):\n        mid = (lower+upper)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            lower = mid+1\n        elif arr[mid] < x:\n            lower = mid+1\n        else:\n            upper = mid-1\n    return -1\n",
        "test": "assert     last([0,1,2,3,4,5,6,7,8],8)==8, \"incorrect\"",
        "num_ids": 1240,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile('a.*?b')\n    mo = regex.search(text)\n    if mo == None:\n        return False\n    else:\n        return True\n        ",
        "test": "assert     text_starta_endb(\"banana\") == False, \"Incorrect output for banana\"",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n",
        "test": "assert     return_sum({'a':1, 'b':2, 'c':3}) == 6, 'incorrect'",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n * (n+1) / 2\n",
        "test": "assert     sum_odd(0) == 0, '0 is not an odd number'",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum+=num\n    return sum\n",
        "test": "assert     _sum([1, 2, 3, 4]) == 10",
        "num_ids": 2069,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    binary = bin(n)[2:]\n    n = len(binary)\n    if n < d:\n        d %= n\n    d = n - d\n    return int(binary[d:] + binary[:d], 2)\n",
        "test": "assert     left_rotate(0, 3) == 0, \"wrong result\"",
        "num_ids": 2604,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expressions\n    # remove whitespace characters\n    # re.sub(pattern,replacement,string)\n    # pattern: characters to remove\n    # replacement: character to replace with\n    # string: string to be processed\n    # return the cleaned up string\n    return re.sub(\"\\s+\",' ',text).strip()\n",
        "test": "assert     remove_all_spaces('abc') == 'abc'",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x == y:\n        counter += 1\n    if x == z:\n        counter += 1\n    if y == z:\n        counter += 1\n    return counter\n",
        "test": "assert     test_three_equal(1,2,3) == test_three_equal(3,2,1)",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return 0\n",
        "test": "assert     count_rotation([10, 20, 30, 40, 50]) == 0, \"This is not a sorted array\"",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    s = int(math.sqrt(n))\n    return s*s == n\n",
        "test": "assert     is_perfect_square(4) == True",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    return False\n",
        "test": "assert     is_product_even([2, 3, 4]) == True, \"Test 1 Failed\"",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Check if lists is empty\n    if len(lists) == 0:\n        return lists\n    # Check if lists only has 1 element\n    if len(lists) == 1:\n        return lists[0]\n    # Create sum_list list\n    sum_list = []\n    # Loop through lists\n    for list in lists:\n        # Get sum of list\n        sum_list.append(sum(list))\n    # Return list with highest sum\n    return lists[sum_list.index(max(sum_list))]\n",
        "test": "assert     max_sum_list([[1,2,3],[4,5],[1,2,3,4]]) == [1,2,3,4], 'incorrect'",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    else:\n        count = 1\n        temp = 1\n        for i in range(1,len(test_str)):\n            if test_str[i] >= test_str[i-1]:\n                temp += 1\n            else:\n                temp = 1\n            if temp >= count:\n                count = temp\n        return count\n    \ndef min_run_uppercase(test_str):\n    '''\n    Write a function to find minimum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    else:\n        count = 1\n        temp = 1\n        for i in range(1,len(test_str)):\n            if test_str[i] >= test_str[i-1]:\n                temp += 1\n            else:\n                temp = 1\n            if temp <= count:\n                count = temp\n        return count\n",
        "test": "assert     max_run_uppercase(\"\") == 0",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n",
        "test": "assert     first_odd([1,3,5,7,9]) == 1",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[1] == K:\n        return True\n    return False\n",
        "test": "assert     check_K(('aa', 'bb', 'cc'), 0) == False",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_smaller((\"a\", \"b\", \"c\"), (\"c\", \"d\", \"e\")) == True, \"tuple1 is smaller than tuple2\"",
        "num_ids": 853,
        "indeed": false
    }
]