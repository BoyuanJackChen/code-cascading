[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the test tuple to sets and compare\n    return list(set(test_tup1).intersection(set(test_tup2)))\n",
        "test": "assert     similar_elements([1, 2, 3], [2, 3]) == [2, 3]",
        "num_ids": 753,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n",
        "test": "assert     is_not_prime(2) is False",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return []\n    \n    # Create a min heap\n    min_heap = []\n    for i in nums:\n        if len(min_heap) < n:\n            hq.heappush(min_heap,i)\n        else:\n            if i > min_heap[0]:\n                hq.heappop(min_heap)\n                hq.heappush(min_heap,i)\n    \n    # Return the heap\n    return min_heap\n",
        "test": "assert     heap_queue_largest([], 0) == []",
        "num_ids": 1314,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    num = x\n    while x!=0:\n        if x & 1!= num & 1:\n            return False\n        x >>= 1\n        num >>= 1\n    return True\n",
        "test": "assert     is_Power_Of_Two(2**16) == True ",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    results = []\n    for word in text.split():\n        if len(word) >= 4:\n            results.append(word)\n    return results\n",
        "test": "assert     find_char_long('abcd') == ['abcd']",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n",
        "test": "assert     [0,1,4,9,16] == square_nums([0,1,2,3,4])",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_length = len(str)\n    for i in range(0, str_length): \n        if str[i:] + str[:i] == str: \n            return i \n    return -1\n",
        "test": "assert     find_Rotations('abc') == 0, \"find_Rotations('abc') is wrong!\"",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = ch.lower()\n    s = s.lower()\n    l = len(s)\n    if ch in s:\n        s = s[:s.find(ch)] + s[s.find(ch)+1:]\n        print(s[:s.find(ch)] + s[s.find(ch)+1:])\n    else:\n        print(\"Occurrences not found\")\n    return s\n",
        "test": "assert     remove_Occ(\"hello\",'e') == \"hllo\"",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n",
        "test": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[7,8,9],[4,5,6],[1,2,3]]",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n",
        "test": "assert     find_Volume(3,4,5)     == 60.0, \"incorrect\"",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'\\w+(_\\w+)+', text) is not None\n",
        "test": "assert     text_lowercase_underscore('the_tail_is_wagging') == True",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 4 * a\n    return p\n",
        "test": "assert     square_perimeter(1) == 4",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = [c for c in string]\n    for i in string:\n        for j in list_str:\n            if(i == j):\n                list_str.remove(j)\n                break\n    return list_str\n    \ndef find_missing_string(str1, str2): \n    list1 = str_to_list(str1)\n    list2 = str_to_list(str2)\n    #print(list1)\n    #print(list2)\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return(list2)\n    \nprint(find_missing_string(\"ABCDEFGHIJK\", \"CDEFGHIJK\"))",
        "test": "assert     str_to_list(\"pramod\") == [  ]",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return True if len(set(arraynums)) < len(arraynums) else False\n",
        "test": "assert     test_duplicate([0,1,3,4,5,6,0]) == True",
        "num_ids": 877,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    def is_positive_int(x):\n        if x>=0:\n            return True\n        else:\n            return False\n    def is_square(x):\n        a = x**0.5\n        if int(a)==a:\n            return True\n        else:\n            return False\n    if is_positive_int(x)==True and is_square(x)==True:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(123) == False",
        "num_ids": 2762,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = (rev*10) + num % 10\n        num = int(num / 10)\n    return rev\n",
        "test": "assert not rev(12) == 22",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr) \n    arr.sort(reverse = True) \n    # Sort the array in the descending order \n    print(arr) \n    max_num = int(\"\".join(map(str, arr))) \n    # Join the array to form the number \n    return max_num \n",
        "test": "assert     find_Max_Num([9, 9]) ==         99",
        "num_ids": 5070,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    if x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(-9,9) == True",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_sub(s):\n        count = 0\n        n = len(s)\n        for i in range(n):\n            for j in range(i, n):\n                sub = s[i:j+1]\n                sub_sum = sum([int(x) for x in sub])\n                if sub_sum == len(sub):\n                    count += 1\n        return count\n    return count_sub(s)\ndef count_Substrings_DP(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    DP approch.\n    '''\n    n = len(s)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i==j:\n                dp[i][j] = 1\n            elif j==i+1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = s[i-1]==s[j-1] and dp[i-1][j-1]\n            if dp[i][j]:\n                count+=1\n    return count\ndef count_Substrings_DP_Opt(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    DP approch with optimization.\n    '''\n    n = len(s)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    dp[0][0] = 1\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            if s[j]==s[i-1] and dp[j+1][i-1]==1:\n                dp[j][i]=1\n                count+=1\n    return count\n",
        "test": "assert     count_Substrings(\"101\") == 2, 'Error'",
        "num_ids": 3173,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    return min(xs)\n",
        "test": "assert     smallest_num([2, 5, 3, 1, -1]) == -1",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        if len(i) > 1:\n            new_list.append(i)\n    if len(new_list) >= 2:\n        min_diff = abs(new_list[0][0] - new_list[0][1])\n        for i in range(0, len(new_list) - 1):\n            if abs(new_list[i][0] - new_list[i + 1][1]) < min_diff:\n                min_diff = abs(new_list[i][0] - new_list[i + 1][1])\n        return min_diff\n    else:\n        return \"Error\"\n",
        "test": "assert     max_difference([(1, 2), (2, 3), (3, 4)]) == 1",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1], reverse=True)\n    return subjectmarks\n",
        "test": "assert     subject_marks([(90, 92), (100, 80), (92, 90), (85, 90)]) ==     [(100, 80), (90, 92), (85, 90), (92, 90)]",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n",
        "test": "assert recursive_list_sum([]) == 0, 'Check the empty list'",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    total = 0\n    for i in range(1, n):\n        total += bell_number(i) * bell_number(n-i)\n    return total\n",
        "test": "assert     bell_number(0) == 1",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\nA = [6, 5, 4, 4] \nprint(is_Monotonic(A)) \n  \nA = [1, 1, 1] \nprint(is_Monotonic(A)) \n  \nA = [1, 3, 2] \nprint(is_Monotonic(A)) \n  \nA = [2, 3, 4, 5] \nprint(is_Monotonic(A)) \n  \nA = [1, 1, 2, 3, 4, 5] \nprint(is_Monotonic(A)) \n  \nA = [1, 1, 1, 1] \nprint(is_Monotonic(A)) ",
        "test": "assert     is_Monotonic([1,2,1,2,1]) == False",
        "num_ids": 3536,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if len(l) < len(s):\n        return False\n    if len(l) == len(s) and l!= s:\n        return False\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    if j == len(s):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_sublist(['a', 'b', 'c'], ['a', 'b', 'd']) == False",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,2,3),(4,5),(6,7,8),(1,2,3,4,5),(6,7,8,9,10)]) == False",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap!=1 or swapped == True:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        gap = int(gap)\n        swapped = False\n        for i in range(len(nums)-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([])                 ==    []",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0, n):\n        for j in range(0, n):\n            if i*i + j*j == n:\n                return True\n    return False\n    \nif __name__ == \"__main__\":\n    print(dif_Square(121))",
        "test": "assert     dif_Square(12) == False",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_pattern_map = {}\n    for idx,color in enumerate(colors):\n        if color in color_pattern_map:\n            if color_pattern_map[color]!= patterns[idx]:\n                return False\n        else:\n            color_pattern_map[color] = patterns[idx]\n    return True\n",
        "test": "assert     is_samepatterns(['red','red', 'yellow', 'green', 'blue', 'blue'], ['R', 'B', 'G', 'G', 'R', 'B']) == False",
        "num_ids": 3764,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(i%K==0 for i in t)]\n",
        "test": "assert     find_tuples([(1, 2, 3), (1, 4, 5), (1, 6, 7)], 1) == [(1, 2, 3), (1, 4, 5), (1, 6, 7)]",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n",
        "test": "assert     is_Diff(11) == True",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n",
        "test": "assert     word_len('hello') == False, \"The length of the word hello is odd\"",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==1:\n        return n\n    if n==2:\n        return 3\n    if n==3:\n        return 6\n    return n*(n+1)//2 + 1\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n",
        "test": "assert     volume_sphere(10) == 4188.790204786391",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return sum%26\n    \ndef main():\n    strr = input(\"Enter a string: \")\n    print(\"The char of the given string is: \", get_Char(strr))\n",
        "test": "assert     get_Char('abcdef') == 'b'",
        "num_ids": 916,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #initialize sequence array\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    if n < len(sequence):\n        return sequence[n]\n    else:\n        for i in range(len(sequence), n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence[n-1]\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return sa\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa=2*math.pi*r*h+2*math.pi*r**2\n    return sa\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa=math.pi*r**2+math.pi*r*h\n    return sa\ndef surfacearea_prism(l,w,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    sa=2*l*w+2*l*h+2*w*h\n    return sa\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    sa=6*s**2\n    return sa\ndef surfacearea_tetrahedron(s):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    sa=4*math.sqrt(3)*s**2\n    return sa\ndef surfacearea_hexagon(s):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    sa=6*math.sqrt(3)*s**2/2\n    return sa\ndef surfacearea_rectangle(s,l):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    sa=2*s*l\n    return sa\ndef surfacearea_triangle(s,b):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    sa=s*b/2\n    return sa\ndef surfacearea_rhombus(s,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    sa=s*b\n    return sa\ndef surfacearea_squarepyramid(s,b):\n    '''\n    Write a function to find the surface area of a square pyramid.\n    '''\n    sa=2*(s*b+s**2)**(1/2)\n    return sa\ndef surfacearea_parallelogram(s,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    sa=s*b\n    return sa\ndef surfacearea_triangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    sa=(s*b**2+s*h**2)**(1/2)\n    return sa\ndef surfacearea_rectangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    sa=2*(s*b+s*h)\n    return sa\ndef surfacearea_spheretriangularprism(r,h):\n    '''\n    Write a function to find the surface area of a sphere triangular prism.\n    '''\n    sa=2*(math.pi*r**2*h)\n    return sa\ndef surfacearea_cubictriangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a cube triangular prism.\n    '''\n    sa=3*(s*b**2+s*h**2)\n    return sa\ndef surfacearea_cubehexagonalprism(s,h):\n    '''\n    Write a function to find the surface area of a cube hexagonal prism.\n    '''\n    sa=6*s*h\n    return sa\ndef surfacearea_pyramidalhexagonalprism(s,h):\n    '''\n    Write a function to find the surface area of a pyramidal hexagonal prism.\n    '''\n    sa=2*s*(math.sqrt(2)*h+h/math.sqrt(6))\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*r**3\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r**2*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=1/3*math.pi*r**2*h\n    return v\ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    v=l*w*h\n    return v\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v=s**3\n    return v\ndef volume_tetrahedron(s):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    v=1/4*math.sqrt(3)*s**3\n    return v\ndef volume_hexagon(s):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    v=1/2*math.sqrt(3)*s**2\n    return v\ndef volume_rectangle(s,l):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    v=s*l\n    return v\ndef volume_triangle(s,b):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v=s/2*b\n    return v\ndef volume_rhombus(s,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    v=s*b/2\n    return v\ndef volume_squarepyramid(s,b):\n    '''\n    Write a function to find the volume of a square pyramid.\n    '''\n    v=s*b**2/3\n    return v\ndef volume_parallelogram(s,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    v=s*b\n    return v\ndef volume_triangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    v=s*b*h/3\n    return v\ndef volume_rectangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    v=s*b*h\n    return v\ndef volume_spheretriangularprism(r,h):\n    '''\n    Write a function to find the volume of a sphere triangular prism.\n    '''\n    v=1/3*math.pi*r**2*h\n    return v\ndef volume_cubictriangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a cube triangular prism.\n    '''\n    v=s*b**2*h/3\n    return v\ndef volume_cubehexagonalprism(s,h):\n    '''\n    Write a function to find the volume of a cube hexagonal prism.\n    '''\n    v=s*h**3/3\n    return v\ndef volume_pyramidalhexagonalprism(s,h):\n    '''\n    Write a function to find the volume of a pyramidal hexagonal prism.\n    '''\n    v=s*(math.sqrt(2)*h**2+h/math.sqrt(6))\n    return v\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi, \"incorrect\"",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def f(n, m):\n        if n == 0:\n            return 1\n        return m * f(n - 1, m + 1)\n    if n == 0:\n        return 1\n    return f(n, 1)\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1,**dict2,**dict3)\n",
        "test": "assert     merge_dictionaries_three({},{}, {}) == {}, \"Empty dictionaries should return an empty dict!\"",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = dict()\n    for x in list1:\n        freq_dict[x] = list1.count(x)\n    return freq_dict\n",
        "test": "assert     collections.Counter([1, 2, 3, 1, 1, 2, 3, 2]) == freq_count([1, 2, 3, 1, 1, 2, 3, 2])",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = len(str(N))\n    output = 10**(l-1)\n    for i in range(l-2, -1, -1):\n        if (N//(10**i))%10 >= N%10:\n            output = N//(10**i) + 10**i\n            break\n        elif (N//(10**i))%10 < N%10:\n            output = N//(10**i)\n            break\n    return output\n",
        "test": "assert     closest_num(2) == 1",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length_list = []\n    for i in list1:\n        length_list.append(len(i))\n    return max(length_list)\n",
        "test": "assert     len_log([\"Balloonicorn\", \"Hackbright\"]) == 12, \"wrong output\"",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1_len = len(str1)\n    sub_str_len = len(sub_str)\n    if(str1_len < sub_str_len):\n        return False\n    str1_list = list(str1)\n    sub_str_list = list(sub_str)\n    for i in range(str1_len - sub_str_len + 1):\n        if (str1_list[i: i + sub_str_len] == sub_str_list):\n            return True\n    return False\n",
        "test": "assert     find_substring(['skillfactory','testing','blackbox','tdd'], 'ddd') == False",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def check(s, n):\n        if s[0] == '1' and s[n - 1] == '1':\n            return True\n        elif s[0] == '0' and s[n - 1] == '0':\n            return True\n        else:\n            return False\n        return s\n    if n < 2:\n        return False\n    else:\n        s = str(n)\n        if check(s, len(s)):\n            return True\n        else:\n            return False\n",
        "test": "assert     is_undulating(121818) == False",
        "num_ids": 4550,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b>0:\n        return power(a,b-1)*a\n    if b<0:\n        return power(a,b+1)/a\n",
        "test": "assert     power(2,0) == 1, 'Error in power'",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key = itemgetter(1))[1]\n    for item in test_list:\n        if item[1] == min_value:\n            return item[0]\n",
        "test": "assert     index_minimum([(2, 3), (1, 2), (4, 5)]) == 1",
        "num_ids": 982,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_len = len(lst[0])\n    for i in lst:\n        if len(i) < smallest_len:\n            smallest_len = len(i)\n    return smallest_len\n",
        "test": "assert     Find_Min_Length([[1,2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5]]) == 2",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 110,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisor_count += 1\n    return divisor_count\n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = {}\n    for item in list1:\n        if item in my_dict:\n            my_dict[item] = my_dict[item] + 1\n        else:\n            my_dict[item] = 1\n    return my_dict\n",
        "test": "assert     frequency_lists([]) == {}",
        "num_ids": 3140,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    s = 1\n    for i in numbers:\n        s *= i\n    return s/len(numbers)\n",
        "test": "assert     (multiply_num([1, 2, 0, 4]) == 0)",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "test": "assert     decimal_to_binary(100) == '1100100'",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    length = len(num_str)\n    is_palindrome = False\n    while not is_palindrome:\n        for i in range(0,length):\n            if num_str[i]!= num_str[length-1-i]:\n                if num_str[i] > num_str[length-1-i]:\n                    num_str = num_str[:i]+num_str[i]+num_str[i]+num_str[i+1:]\n                else:\n                    num_str = num_str[:length-1-i]+num_str[length-1-i]+num_str[length-1-i]+num_str[length-1-i-1]\n                break\n        else:\n            is_palindrome = True\n    return int(num_str)\n",
        "test": "assert     next_smallest_palindrome(1) == 1",
        "num_ids": 1687,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1:\n        raise ValueError('Value of k must be >= 1')\n    \n    # Find the middle element\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n",
        "test": "assert     kth_element([1,2,3,4,5,6,7,8,9,10], 1) == 1",
        "num_ids": 1865,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    a = word.split('_')\n    return a[0] + ''.join(i.capitalize() for i in a[1:])\n",
        "test": "assert     snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = 0\n    for i in range(1, n + 1): \n        res += i * m\n    return res\n",
        "test": "assert     eulerian_num(1, 1) == 1",
        "num_ids": 2836,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        new_list.append(sorted_sublist)\n    return new_list\n",
        "test": "assert     sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g']]) == [['a', 'b', 'c'], ['d', 'e'], ['f', 'g']]",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    total = 0\n    for x in lst:\n        if bool(x) == True:\n            total += 1\n    return total\n",
        "test": "assert     count([True, False, False, True, False]) == 2, \"Case 1\"",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return list(test_list) + list(test_tup)\n",
        "test": "assert     add_lists([1, 2, 3], [(3, 4, 5), (6, 7, 8)]) ",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    i = j = k = 0\n    while(i < len(num1) and j < len(num2) and k < len(num3)):\n        if(num1[i] < num2[j] and num1[i] < num3[k]):\n            new_list.append(num1[i])\n            i += 1\n        elif(num2[j] < num3[k]):\n            new_list.append(num2[j])\n            j += 1\n        else:\n            new_list.append(num3[k])\n            k += 1\n    while(i < len(num1)):\n        new_list.append(num1[i])\n        i += 1\n    while(j < len(num2)):\n        new_list.append(num2[j])\n        j += 1\n    while(k < len(num3)):\n        new_list.append(num3[k])\n        k += 1\n    return new_list\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 2506,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    num=0\n    for i in range(n):\n        a=str(s[i:]+s[:i])\n        for j in a:\n            if int(j)%2!=0:\n                num=num+1\n    return num\n",
        "test": "assert     odd_Equivalent('010',2) == 2, 'error'",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return_list = []\n    for i in nestedlist:\n        for j in i:\n            return_list.append(j)\n    return_list = list(set(return_list))\n    return return_list\n",
        "test": "assert     common_in_nested_lists([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 1904,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"1\") == True, \"check_integer('1') failed\"",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_check = []\n    for dict1 in list1:\n        if len(dict1) == 0:\n            empty_check.append(True)\n        else:\n            empty_check.append(False)\n    if False in empty_check:\n        return False\n    else:\n        return True\n",
        "test": "assert     empty_dit([{},{},{}]), True",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = ''\n    for num in nums:\n        num_str += str(num)\n    num_str = num_str.lstrip('0')\n    return int(num_str) if num_str else 0\n",
        "test": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 12345",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list\n",
        "test": "assert     list_to_float([[1,2,3], [4,5,6], [7,8,9], [10]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0]]",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('hello world') == ['hello','world']",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # The unique elements will occur only once.\n    unique_elements = []\n    # For each element, if it is already in the unique_elements list, then it is repeated.\n    # So, remove it from the unique_elements list.\n    # We will be left with only the unique elements.\n    for i in range(len(arr)):\n        if arr[i] in unique_elements:\n            unique_elements.remove(arr[i])\n        else:\n            unique_elements.append(arr[i])\n    return unique_elements[0]\n",
        "test": "assert     search([1, 1, 2, 3, 3, 4, 4, 8, 8]) == 2",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    elif len(list1) == 2:\n        return list1[0][0]*list1[1][0]\n    else:\n        max_tuple = []\n        for i in range(0,len(list1) - 1):\n            for j in range(i + 1, len(list1)):\n                if i!= j:\n                    max_tuple.append(list1[i][0]*list1[j][0])\n        return max(max_tuple)\n",
        "test": "assert     max_product_tuple([(1,2,3), (4,5), (6,7,8,9), (1,2)]) == 24",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1,limit):\n        if i == sum_of_proper_divisors(sum_of_proper_divisors(i)) and i!= sum_of_proper_divisors(i):\n            total += i\n    return total\n",
        "test": "assert ",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0 and b == 0:\n        return(0)\n    else:\n        return(cmath.phase(complex(a,b)))\n",
        "test": "assert     cmath.phase(complex(1,0)) == cmath.phase(complex(1,0))",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    maxdiff = 0\n    for i in string:\n        if i == \"0\":\n            count0 += 1\n        elif i == \"1\":\n            count1 += 1\n        if count0 == count1:\n            if maxdiff < count0 - count1:\n                maxdiff = count0 - count1\n        elif count0 > count1:\n            if maxdiff < count0 - count1:\n                maxdiff = count0 - count1\n        elif count1 > count0:\n            if maxdiff < count1 - count0:\n                maxdiff = count1 - count0\n    return maxdiff\n",
        "test": "assert     find_length(\"\") == 0",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(1, min(a, b)+1):\n        if a%i==0 and b%i==0:\n            s=i\n    return s\n",
        "test": "assert     sum(7,5) == 1",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(5, 3) == 15",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for word in str:\n        if len(word) > n:\n            output.append(word)\n    return output\n",
        "test": "assert     long_words(2, ['a', 'b', 'c', 'python']) == ['python'], \"Test Failed\"",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    assert isinstance(my_matrix, list)\n    length = len(my_matrix)\n    for row in my_matrix:\n        assert isinstance(row, list)\n        assert len(row) == length\n        for element in row:\n            assert isinstance(element, int)\n    \n    sums = [0, 0, 0, 0, 0, 0]\n    diagonal_sums = [0, 0]\n    for i in range(length):\n        for j in range(length):\n            # Check row sums\n            sums[i] += my_matrix[i][j]\n            # Check column sums\n            sums[j] += my_matrix[i][j]\n            # Check diagonal sums\n            diagonal_sums[0] += my_matrix[i][j]\n            diagonal_sums[1] += my_matrix[-i-1][j]\n    \n    # Check sums\n    for index in range(len(sums)):\n        if sum(sums)!= sum(diagonal_sums):\n            return False\n    return True\n",
        "test": "assert     magic_square_test([[2,7,6],[9,5,1],[4,3,8]])==True",
        "num_ids": 2004,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = None\n    freq = defaultdict(int)\n    for i in nums:\n        freq[i] += 1\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_item = i\n    return max_item\n",
        "test": "assert     max_occurrences([1, 2, 2, 3]) == 2",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #str1 = input('Enter a string: ')\n    vowels = 'aeiou'\n    str1 = list(str1)\n    n = len(str1)\n    i = 0\n    j = n-1\n    while(i<j):\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i] not in vowels and str1[j] not in vowels:\n            i += 1\n            j -= 1\n        elif str1[i] in vowels and str1[j] not in vowels:\n            j -= 1\n        elif str1[i] not in vowels and str1[j] in vowels:\n            i += 1\n    return ''.join(str1)\n",
        "test": "assert     reverse_vowels(\"hello\") == \"holle\", \"Should be holle\"",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i)\n        string +=''\n    return string\n",
        "test": "assert     tup_string(()) == ''",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    for num in nums:\n        # check if the current number is negative and add it to the sum if it is\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 2658,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if nums is None or len(nums) == 0:\n        return 0\n    \n    z = 0\n    nz = 0\n    for num in nums:\n        if num == 0:\n            z += 1\n        else:\n            nz += 1\n    return z / nz\n",
        "test": "assert     zero_count([1]) == 0",
        "num_ids": 6890,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    elif n==1 or n==2:\n        return True\n    while(n!=1):\n        if n%2==0:\n            n/=2\n        else:\n            return False\n    return True\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(12) == False",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n",
        "test": "assert     extract_singly([[1,2], [3], [], [4,5,6]]) == [1,2,3,4,5,6]",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted = False\n    i = len(nums) - 1\n    while not sorted:\n        sorted = True\n        for j in range(i):\n            if nums[j] > nums[j + 1]:\n                sorted = False\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                # print(nums)\n        i = i - 1\n    return nums\n",
        "test": "assert     pancake_sort([3, 2, 4, 1]) == [1, 2, 3, 4]",
        "num_ids": 1502,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_list = [i for i in list1 if i in list2 and i in list3]\n    return len(same_list)\n",
        "test": "assert     count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3, 'incorrect'",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count\n",
        "test": "assert     find_lists(()) == 0, \"should be 0\"",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initializing max value to the first element of the input array \n    max_value = arr[0] \n    # Initializing max absolute difference to the difference between first and last element \n    max_abs_diff = arr[0] - arr[1] \n    # Initializing current absolute difference to 0 \n    current_abs_diff = 0\n    for i in range(1, len(arr) - 1): \n        current_abs_diff = abs(arr[i] - arr[i + 1]) \n        # Updating the max_absolute difference if required \n        if current_abs_diff > max_abs_diff: \n            max_abs_diff = current_abs_diff\n            max_value = arr[i] \n    return max_value\n",
        "test": "assert max_Abs_Diff([9, 1, 8, 2, 7, 3, 4, 5, 6]) == 9, \"Wrong answer\"",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def gcd(a, b):\n        '''\n        Compute the greatest common divisor of a and b.\n        Euclid\u2019s algorithm uses subtraction to keep track of the greatest common divisor of two integers.\n        '''\n        if a == b:\n            return a\n        elif a > b:\n            return gcd(a - b, b)\n        else:\n            return gcd(a, b - a)\n",
        "test": "assert     find_solution(1, 0, 2) == None",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n    \n    \n    \n    \n    \n    \ndef remove_elements2(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = [i for i in list1 if i not in list2]\n    return list3\n    \n    \n    \n    \n    \n    \ndef remove_elements3(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     remove_elements([1,2,3,4,5], [1,2,3,4,5]) == []",
        "num_ids": 2742,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = (n + 1) // 2\n    return n\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2/4*(l-2))/(tan(pi/l))\n",
        "test": "assert     area_polygon(10, 4) == 250.0000000000",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n): \n        if n % i == 0: \n            sum_of_divisors += i \n    if sum_of_divisors == n: \n        return True \n    elif sum_of_divisors > n: \n        return True\n    else: \n        return False\n",
        "test": "assert     div_sum(10) == False",
        "num_ids": 4819,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == 'a' or str1[i] == 'A':\n            count += 1\n    return count\n",
        "test": "assert     count_char_position(\"a\") == 1",
        "num_ids": 4889,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 2 or A[i] ^ A[j] == -2:\n                count += 1\n                break\n    return count\n",
        "test": "assert     find_even_pair([1,2,3,4]) == 1",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        n = -n\n    return 1 if n < 1 else 2 if n == 1 else 2**((n-1).bit_length())\n",
        "test": "assert     next_power_of_2(2) == 2",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "test": "assert     frequency([1, 2, 1, 1, 2, 1], 1) == 4",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return None\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1,2,3,4,5,6,7,8,9,10], 6, 4) == 0, \"Test failed.\"",
        "num_ids": 5568,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "test": "assert     perimeter_pentagon(5) == 5*5, 'perimeter_pentagon'",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not s:\n        return 0\n    # O(n) time\n    # O(n) space\n    return s.count('std')\n",
        "test": "assert count_occurance(\"the dog is lazy\") == 0",
        "num_ids": 2697,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = []\n    for i in test_tuple:\n        test_list.append(type(i))\n    if len(set(test_list)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_type((1, 2, 3, 4))",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if x == arr[0]:\n        return True\n    if x == arr[n - 1]:\n        return True\n    i, j = 0, n - 1\n    while i < j:\n        mid = int(i + (j - i) / 2)\n        if arr[mid] == x:\n            return True\n        if arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid\n    return False\n",
        "test": "assert     is_majority([1], 1, 1) == True, \"1 element, majority\"",
        "num_ids": 3070,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        n &= (n-1)\n        count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = [ele for ele in str if not (str.index(ele) % 2)]\n    return ''.join(res)\n",
        "test": "assert     odd_values_string('python') == 'pto', \"Test Failed\"",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n",
        "test": "assert     min_of_three(1,1,1) == 1",
        "num_ids": 932,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bin_n = bin(n)[2:]\n    if n>r:\n        return False\n    if l==0:\n        return True\n    if n==r or n<l:\n        return True\n    for i in bin_n:\n        if i=='0':\n            return False\n    return True\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(10,1,5) == False",
        "num_ids": 1668,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = len(arr) - 1\n    i = 0\n    while i <= high:\n        if arr[i] < 0 and arr[low] < 0:\n            arr[i], arr[low] = arr[low], arr[i]\n            i += 1\n            low += 1\n        elif arr[i] < 0:\n            i += 1\n        elif arr[low] < 0:\n            low += 1\n        elif arr[high] > 0:\n            high -= 1\n        else:\n            arr[i], arr[high] = arr[high], arr[i]\n            i += 1\n            high -= 1\n    return arr\n",
        "test": "assert ",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "test": "assert     replace_blank('', '') == '','replace_blank raises error when the string is empty'",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "test": "assert     larg_nnum([1,3,5,6,7,8,2,4],0) == [] ",
        "num_ids": 1300,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*np.pi*r*h + 2*np.pi*r**2\n    return surface_area\n",
        "test": "assert     lateralsuface_cylinder(1,2) == 12",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert     volume_cube(1) == 1, 'Error in volume_cube(1)'",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "test": "assert     (even_bit_set_number(0) == 0)",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_of_tuple = dict(Counter(test_list))\n    return count_of_tuple\n",
        "test": "assert     check_occurences([(1, 2, 3), (1, 2, 3), (1, 2, 3), (3, 4, 5)]) == {(1, 2, 3): 3, (3, 4, 5): 1}",
        "num_ids": 1932,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    return length - length // 2\n",
        "test": "assert     number_of_substrings('') == 0",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables\n    nth_sequence_count = 0\n    i = 2\n    nth_sequence_count = nth_sequence_count + m\n    while n > 1:\n        i = i + 1\n        nth_sequence_count = nth_sequence_count + m\n        n = n - 1\n    return nth_sequence_count\n",
        "test": "assert     get_total_number_of_sequences(1,1) == 1",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        list1.pop()\n        for i in list2:\n            list1.append(i)\n        return list1\n        \ndef replace_last(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1]+list2\n",
        "test": "assert     replace_list([1,2,3,4], [4,5,6,7]) == [1,2,3,4,5,6,7], 'incorrect'",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_charac = 0\n    for x in str1:\n        num_charac = num_charac + 1\n    return num_charac\n",
        "test": "assert     count_charac('abc') == 3, 'wrong'",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N)) \n    return (x+1)**2\ndef next_Perfect_Square_1(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    while x >= 0:\n        if (x**2 < N):\n            return x**2 + x + 1\n        x -= 1\n    return None\ndef next_Perfect_Square_2(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    while x >= 0:\n        if (x**2 < N):\n            return x**2 + x + 1\n        x -= 1\n    return None\n",
        "test": "assert     next_Perfect_Square(3) == 4",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def maxSumIncreasingSubsequence(array): \n        #initialize array with values 0\n        sub_seq_sum_array = [0] * len(array)\n        \n        for i in range(len(array)):\n            current_max = 0\n            for j in range(i):\n                if array[i] > array[j] and sub_seq_sum_array[j] > current_max:\n                    current_max = sub_seq_sum_array[j]\n            sub_seq_sum_array[i] = current_max + array[i]\n        \n        max_value = 0\n        for element in sub_seq_sum_array:\n            if element > max_value:\n                max_value = element\n        return max_value\n    return maxSumIncreasingSubsequence(arr)\n",
        "test": "assert     max_sum([]) == 0, 'Empty array'",
        "num_ids": 2021,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + number // x) // 2\n    return y\n",
        "test": "assert ",
        "num_ids": 2584,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    m = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        m[i][i] = 1\n    for i in range(n-1): \n        if(str[i] == str[i+1]): \n            m[i][i+1] = 2\n    for j in range(2,n): \n        for i in range(0,n-j): \n            k = i+j \n            if(str[i] == str[k] and str[i+1] == str[k-1]): \n                m[i][k] = m[i+1][k-1] + 2\n            else: \n                m[i][k] = max(m[i][k-1],m[i+1][k]) \n    return m[0][n-1]\n",
        "test": "assert     lps('cbbd') == 2",
        "num_ids": 3262,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Approach 1\n    '''\n    # Get all numbers up to n\n    sum = 0\n    for i in range(1, n+1):\n        # Get the sum of all numbers up to i\n        sum += 1/i\n    return sum\n    '''\n    \n    # Approach 2\n    return sum(1/i for i in range(1, n+1))\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersected_nums = []\n    for i in range(0,len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersected_nums.append(array_nums1[i])\n    return intersected_nums\n",
        "test": "assert     intersection_array([1,2], [2]) == [2], 'wrong result'",
        "num_ids": 1223,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(0,len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X(('a', 'b', 'b', 'a', 'c', 'a'), 'b') == 2",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "test": "assert     insert_element([], 4) == [4], \"insert_element([], 4) is not working as intended.\"",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x,y=numbers\n    r=math.sqrt((x**2)+(y**2))\n    t=math.atan(y/x)\n    return (r,t)\n",
        "test": "assert     convert((1, 0)) == (1.0, 0.0)",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for x in list1:\n        if type(x)==int:\n            count+=1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5, \"Test 2 Failed\"",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [i for i in combinations_with_replacement(l, n)]\n",
        "test": "assert     combinations_colors([1, 2, 3], 3) == [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 2), (1, 2, 3), (1, 3, 3), (2, 2, 2), (2, 2, 3), (2, 3, 3), (3, 3, 3)]",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    prime_num = [2]\n    for i in range(3, n):\n        for j in prime_num:\n            if i % j == 0:\n                break\n        else:\n            prime_num.append(i)\n    return len(prime_num)\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 1100,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return test_tup1\n        else:\n            return test_tup2\n",
        "test": "assert     maximize_elements((1, 2), (2, 3)) == (2, 3)",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return 'Error: input is less than 1.'\n    elif n == 1:\n        return 2\n    else:\n        p = [2, 3]\n        i = 1\n        while len(p) < n:\n            x = p[i - 1] + 2 * p[i]\n            if x > 2 * p[i - 1]:\n                p.append(x)\n            else:\n                i += 1\n                x = p[i - 1] + 2 * p[i]\n                p.append(x)\n        return p[n - 1]\n",
        "test": "assert     newman_prime(2) == 3",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] / test_tup2[i]),)\n    return result_tup\n",
        "test": "assert     (division_elements((0,), (3,)) == (0,))",
        "num_ids": 1478,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    def split(list1, L):\n        if L == len(list1):\n            return list1\n        elif L > len(list1):\n            return list1, []\n        else:\n            return list1[:L], list1[L:]\n    return split(list1, L)\n",
        "test": "assert     split_two_parts([0, 1, 2, 3, 4, 5], 3) == ([0, 1, 2], [3, 4, 5])",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert     dog_age(2) == 5",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "test": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # l=int(input(\"Enter the side length of the cube:\"))\n    import math\n    def lateral_surface_area(l):\n        return 6 * (l ** 2)\n    return lateral_surface_area(l)",
        "test": "assert     lateralsurface_cube(0) == 0",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i**2\n    return s\n",
        "test": "assert     (square_Sum(1) == 1)",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 2 ** (n - 1)\n",
        "test": "assert     find_star_num(1)     ==     1",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 276,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for x in arr:\n        if (x%2 == 0) and (arr.index(x)%2 == 0):\n            sum += x\n    return sum\n",
        "test": "assert     sum_even_and_even_index([1, 2, 3, 4]) == 0",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += (i**5)\n    return s\nprint(even_Power_Sum(10))\n",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[-1])\n    return new_list\n",
        "test": "assert     rear_extract([(1,2),(3,4),(5,6),(7,8),(9,10)]) == [2,4,6,8,10]",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x,y: x-y, test_tup1, test_tup2))\n",
        "test": "assert     substract_elements((1,2), (3, 4)) == (-2, -2)",
        "num_ids": 1284,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (n*(n-1))//2\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r**2 * h)\n    return volume\n",
        "test": "assert     volume_cylinder(0,1) == 0, \"Wrong Volume\"",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5},3) == {'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    l = len(test_tup)\n    count = 0\n    for i in range(0,l):\n        if i!= 0 and test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements(((1, 2, 3), ('a', 'b', 'c'), ('d', 'e', 'f'), (1, 2, 3))) == 3",
        "num_ids": 3672,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n",
        "test": "assert     is_num_decagonal(0)     == 0",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Iterate over each element in the list\n    for index, element in enumerate(dlist):\n        # Check if the item in the element is the one we're looking for\n        if item == element:\n            # If so, return the boolean and the index\n            return (True, index)\n    # If we get here, then the element was not found\n    return (False, -1)\n",
        "test": "assert     sequential_search([1, 2, 3, 4, 5], 6) == (False, -1)",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list=[]\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list)==len(test_list):\n        return True\n    return False\n",
        "test": "assert     all_unique([1, 2, 3, 4, 5]) == True, \"all_unique failed\"",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] - nums2[i])\n    return new_list\n",
        "test": "assert     sub_list([1, 2, 3], [1, 2, 3]) == [0, 0, 0]",
        "num_ids": 1047,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_dict = {}\n    for i in str(n):\n        digit_dict[i] = digit_dict.get(i,0) + 1\n    return all(v <= int(k) for k,v in digit_dict.items())\n",
        "test": "assert     validate(123) == True",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check if element in list\n    return element in list\n",
        "test": "assert     check_element([0,1,2],3) == False",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #pattern = re.compile(r'a.{2,3}b')\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('aab') == False",
        "num_ids": 2877,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # if k is less than n, we need atleast n+k+1 elements to form a subarray with k as the number of times\n    # the array is repeated. So there is no point in repeating the array again.\n    if k >= n:\n        return max_sub_array_sum(a, n)\n    # If k is equal to 1, we need atleast n+k+1 elements to form a subarray with k as the number of times\n    # the array is repeated.\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    # If k is equal to n, we need atleast 2*n+1 elements to form a subarray with k as the number of times\n    # the array is repeated.\n    if k == n:\n        return max_sub_array_sum(a, n)\n    # If k is more than n, we need atleast 2n+1 elements to form a subarray with k as the number of times\n    # the array is repeated.\n    if k > n:\n        return max_sub_array_sum(a, n)\n    # If k is less than 1, there is no point in repeating the array again.\n    if k < 1:\n        return max_sub_array_sum(a, n)\n",
        "test": "assert     max_sub_array_sum_repeated([-1, -2, -3], 3, 2) == None",
        "num_ids": 2059,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum=sum+i*i\n    return sum\n",
        "test": "assert     square_Sum(1)== 0, 'Incorrect'",
        "num_ids": 2721,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return(len(max(list1,key=len)))\n",
        "test": "assert     max_length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 5",
        "num_ids": 3317,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0 or k==0 or n==1:\n        return 0\n    if k==1:\n        return n\n    result = [[0 for _ in range(n)] for _ in range(k)]\n    result[0][0] = 1\n    result[1][0] = 1\n    result[0][1] = 1\n    result[1][1] = 1\n    for i in range(2, n):\n        result[0][i] = result[0][i-1] + result[1][i-1]\n        result[1][i] = result[0][i-2] + result[1][i-2]\n    print(result)\n    return result[0][n-1] + result[1][n-1]\n",
        "test": "assert     count_no_of_ways(2, 2) == 2, 'testcase failed'",
        "num_ids": 2643,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "test": "assert     find(1,1) == 1",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        thirdside=h\n    else:\n        thirdside=math.sqrt(h**2+w**2)\n    return thirdside\n",
        "test": "assert     otherside_rightangle(3, 4) == 5",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in listval:\n        if type(i) == int or type(i) == float:\n            if i > max_val:\n                max_val = i\n        elif type(i) == str:\n            if len(i) > max_val:\n                max_val = len(i)\n    return max_val\n",
        "test": "assert     max_val([1, 2, 3]) == 3,     'Incorrect output'",
        "num_ids": 2826,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        return number + sum_div(number-1)\n",
        "test": "assert     sum_div(1) == 1",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr)\n    inv_count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inv_count+=1\n    return inv_count\n",
        "test": "assert     get_Inv_Count([1, 3, 5, 2, 4, 6]) == 3",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return [list1[0]] + flatten_list(list1[1:])\n",
        "test": "assert     flatten_list([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #stdata=[(1,1,1),(2,2,2),(1,1,1),(2,3,2),(3,3,3),(4,4,4),(5,5,5),(6,6,6)]\n    dict_stdata=defaultdict(int)\n    for num in stdata:\n        dict_stdata[num[0]]+=num[1]\n    #print(dict_stdata)\n    max_val=max(dict_stdata.values())\n    #print(max_val)\n    #print(sorted(dict_stdata.items(), key=lambda x: x[1], reverse=True))\n    for k,v in sorted(dict_stdata.items(), key=lambda x: x[1], reverse=True):\n        if v == max_val:\n            return k\n",
        "test": "assert     max_aggregate([('a', 1), ('a', 2), ('a', 3), ('a', 4)]) == 'a'",
        "num_ids": 1411,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base case: \n    if n == 0: \n        return 1 \n    # Recursion: \n    else: \n        return (count_binary_seq(n - 1) + count_binary_seq(n - 1)) \n",
        "test": "assert     count_binary_seq(1) == 2",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n",
        "test": "assert     dict_depth({'a': 'a', 'b': {'x': 'x', 'y': {'z': 'z'}}}), 2",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while(low <= high):\n        mid = (low + high) // 2\n        if arr[mid] == ranges[index]:\n            return arr[mid]\n        if arr[mid] > ranges[index]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return arr[low]\n",
        "test": "assert     find_Element([1,2,3,4,5],    [0,1,2,3,4],    1,    0) == 1, \"Fails\"",
        "num_ids": 1637,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    mylist=[]\n    for word in words:\n        if word.startswith(\"p\"):\n            mylist.append(word)\n    return mylist[0:2]\n",
        "test": "assert     start_withp(['python', 'is', 'an', 'easy', 'to', 'learn', 'programming', 'language']) == ['python', 'programming']",
        "num_ids": 1075,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #max_sum = 0\n    #max_sum_list = []\n    #max_sum_list.append(0)\n    #for i in range(n):\n    #    max_sum_list.append(0)\n    #for i in range(n):\n    #    max_sum_list[i] = max(max_sum_list[i], a[i])\n    #for j in range(k, n):\n    #    for i in range(k - 1, j):\n    #        max_sum_list[j] = max(max_sum_list[j], max_sum_list[i] + a[j])\n    #return max_sum_list[n - 1]\n    dp = [0 for _ in range(n)]\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], a[i] + dp[i - k] if i >= k - 1 else 0)\n    return dp[n - 1]\n",
        "test": "assert     max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 6, 2, 3) == 101",
        "num_ids": 1651,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuple(tuplex)\n    colon=tuplex[0:m]+tuplex[m:n]+tuplex[n:]\n    return colon\n",
        "test": "assert     colon_tuplex((1,2),2,3) == (1,2), 'a'",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    results = []\n    if nums1 and nums2:\n        for i in range(N):\n            results.append(nums1[i] * nums2[i])\n        return sorted(results, reverse=True)[:N]\n    elif nums1 and not nums2:\n        for num in nums1:\n            results.append(num)\n        return sorted(results, reverse=True)[:N]\n    elif not nums1 and nums2:\n        for num in nums2:\n            results.append(num)\n        return sorted(results, reverse=True)[:N]\n    else:\n        return []\n",
        "test": "assert     large_product([1, 2, 3, 4], [2, 4, 6, 8], 0) == []",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(5,7) == 7, maximum(5,7)",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = list(str1)\n    return tuple(list1)\n",
        "test": "assert     string_to_tuple('abcd') == ('a','b','c','d')",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while (n & 1 == 0 and n!= 0): \n        count += 1\n        n = n >> 1\n    return count \n",
        "test": "assert     set_left_most_unset_bit(1) == 0",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * (h/3)\n    return volume\n",
        "test": "assert     volume_cone(1,2) == 2 * math.pi / 3",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while(1 << i <= n): \n        i += 1\n    return 1 << (i - 1)\n",
        "test": "assert     highest_Power_of_2(64) == 64",
        "num_ids": 3285,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n >= 3:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "test": "assert     add_string([\"a\"], \"a\") == [\"a\"]",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict = {}\n    for i in range(len(l1)):\n        dict[l1[i]] = [l2[i], l3[i]]\n    return dict\n",
        "test": "assert     convert_list_dictionary(['a', 'b', 'c'], [1, 2, 3], ['d', 'e', 'f']) == {'a': [1, 'd'], 'b': [2, 'e'], 'c': [3, 'f']}",
        "num_ids": 1699,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    return max ( f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_list = [i]\n        elif len(i) == max_length:\n            max_length_list.append(i)\n    return max_length_list\n",
        "test": "assert ",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    if test_tup:\n        test_set = set(test_tup)\n        return len(test_tup) == len(test_set)\n    return True\n",
        "test": "assert     check_distinct((1,2,1)) == False",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1=str1.lower()\n    l1=[]\n    for i in str1:\n        if i in l1:\n            pass\n        else:\n            l1.append(i)\n    return l1[0]\n",
        "test": "assert     first_non_repeating_character(\"google\") == 'g', 'incorrect!'",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip()\n    if len(string) < 1:\n        return False\n    return re.match(regex, string) is not None\n",
        "test": "assert     check_char('hello') == False",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    elif a>c:\n        return a\n    elif b>c:\n        return c\n    else:\n        return b\n",
        "test": "assert     median_numbers(1,2,2) == 2",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_ = 0\n    for num in nums:\n        sum_ += sum_of_digits(num)\n    return sum_\n",
        "test": "assert     sum_of_digits([10, 20, 30]) == [1, 2, 3]",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x,y: x ^ y, test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((1, 1), (0, 1)) == (1, 0), \"bitwise_xor((1, 1), (0, 1)) == (1, 0) failed\"",
        "num_ids": 1142,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    counter = 0\n    for element in test_list:\n        if type(element) is tuple:\n            counter += 1\n    return counter\n",
        "test": "assert     (extract_freq([]) == 0), \"Wrong output for empty list\"",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tup = ()\n    for index in range(len(test_tup1)):\n        if type(test_tup1[index]) == tuple:\n            nested_tup += (add_nested_tuples(test_tup1[index], test_tup2[index]),)\n        else:\n            nested_tup += (test_tup1[index] + test_tup2[index],)\n    return nested_tup\n",
        "test": "assert     add_nested_tuples((1,2,3,4),(5,6,7,8)) == (6,8,10,12)",
        "num_ids": 1666,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    else:\n        return a\n",
        "test": "assert     minimum(3,6) == 3",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = list(tuplex)\n    tuple1 = list(tuple1)\n    tuplex.sort()\n    tuple1.sort()\n    if tuple1 == tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex((1, 2, 3, 4, 5), (1, 2, 3, 6)) == False",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n",
        "test": "assert     find_Parity(7) == 1",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    num_list = [int(x) for x in num_str]\n    \n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            \n            return int(''.join([str(x) for x in num_list]))\n        \n    return -1\n",
        "test": "assert     rearrange_bigger(12) == 21",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #check if k is smaller than 0\n    if k < 0 or k > len(nums1) * len(nums2):\n        raise Exception(\"Invalid input\")\n    #initialize a heap\n    heap = []\n    #iterate through nums1\n    for num1 in nums1:\n        #iterate through nums2\n        for num2 in nums2:\n            #calculate the absolute value of the difference between the two numbers\n            absDiff = abs(num1 - num2)\n            #append the tuple to the heap\n            heapq.heappush(heap, (absDiff, num1, num2))\n    #return the k smallest elements\n    return [heapq.heappop(heap)[1:] for _ in range(k)]\n",
        "test": "assert     k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [(1, 1), (1, 1)]",
        "num_ids": 2261,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    return list1[0][0] * list1[0][1]\n",
        "test": "assert     min_product_tuple([(3,4),(5,6),(4,5)]) == 12",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "test": "assert     min_val([1, 3, 4]) == 1",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "test": "assert     snake_to_camel('some_string') == 'SomeString'",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for n in l:\n        if n % 2 == 0:\n            new_list.append(n)\n    return new_list\n",
        "test": "assert     remove_odd([])     ==     []",
        "num_ids": 941,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # return list1[n]\n    # Solution1\n    return list1[n - 1]\n    # Solution2\n    return list1[n][1]\n    # Solution3\n    return list1[n][0]\n    # Solution4\n    return list1[n][0][1]\n",
        "test": "assert     extract_nth_element([(1,2),(3,4),(5,6)], 1) == (1,2)",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len([x for x in list1 if x in list2]) > 0\n",
        "test": "assert     overlapping([1,2,3], [1,5,6,4]) == True",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    highest_product = arr[0] * arr[1]\n    left, right = 0, len(arr) - 1\n    while left < right:\n        current_product = arr[left] * arr[right]\n        highest_product = max(highest_product, current_product)\n        if current_product < 0:\n            left += 1\n        else:\n            right -= 1\n    return highest_product\n",
        "test": "assert     max_Product([3,-2,5])==15, \"Wrong answer\"",
        "num_ids": 1433,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #unzip the tuple and sort the list\n    Input = sorted(list(zip(*Input))) \n    #Initialize the first tuple and increment the second tuple\n    first = Input[0][0]\n    second = Input[0][0]\n    #Loop through the list\n    for i in range(len(Input)):\n        if first == Input[i][0]:\n            continue\n        else:\n            second = Input[i][0]\n            break\n    #Return the common first element\n    return first\n",
        "test": "assert     group_tuples(    [('a', 'apple'), ('b', 'banana'), ('c', 'cherry'), ('a', 'apple')]) == 'a'",
        "num_ids": 1743,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    return lst[-1]\n",
        "test": "assert     Find_Max([\"hello\",\"good\",\"morning\"]) == \"morning\"",
        "num_ids": 866,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    def round_num(n):\n        '''\n        Write a function to round a given number to two decimal places.\n        '''\n        if n == int(n):\n            return int(n)\n        return float(n)\n    \n    return round_num(sum(list(map(round_num,list1))))*len(list1)\n    \nprint(round_and_sum([1.2, 5, 7.7, 3.4]))\n",
        "test": "assert     round_and_sum([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]) == round(1.1 + 2.2 + 3.3 + 4.4 + 5.5 + 6.6 + 7.7 + 8.8 + 9.9, 1) * 9",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(2, n+1, 2)])\n    # return sum([i**3 for i in range(1, n+1, 2)])\n    # return sum([i**3 for i in range(0, n+1, 2)])\n",
        "test": "assert     cube_Sum(2) == 8",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = ''\n    for i in test_tup:\n        output = output + i + '-'\n    return output[:-1]\n",
        "test": "assert     concatenate_tuple(('abc', 'def', 'ghi'))!= 'abcde'",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if type(n)!= int or n < 1:\n        return \"Enter a positive integer only\"\n    else:\n        return n ** 3 / n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1, \"Wrong output for find_Average_Of_Cube(1)\"",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear(('smile', 'universe')) == 'universe'",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if isinstance(list1[i], list): \n            count += count_element_in_list(list1[i], x) \n        if list1[i] == x: \n            count += 1\n    return count \n",
        "test": "assert     count_element_in_list([[1,2,3], [4,5,6], [7,8,9], [1,2,3]], 0) == 0",
        "num_ids": 1262,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num % 2 == 1:\n            new_list.append(num)\n    return new_list\n",
        "test": "assert     [1, 3, 5] == filter_oddnumbers([1, 2, 3, 4, 5, 6])",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    new_date = date[2]+'-'+date[1]+'-'+date[0]\n    return new_date\n",
        "test": "assert     change_date_format(\"2017-01-01\") == \"01-01-2017\"",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([2,5,3,1,4,6]) == [1,2,3,4,5,6]",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n",
        "test": "assert     and_tuples((True, True), (True, True)) == (True, True), 'Boolean and'",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = symbols('x')\n    # ax^2 + bx + c = 0\n    eq = (x*(a*x**2 + b*x + c))\n    # Find the discriminant\n    D = b**2 - 4*a*c\n    if D < 0:\n        print('The parabola has no real roots.')\n    elif D == 0:\n        print('The parabola has one real root.')\n        print('The root is:', sqrt(b/2*a))\n    else:\n        print('The parabola has two real roots.')\n        print('The roots are:')\n        print(sqrt(b/2*a), '+', sqrt(b/2*a))\n        print(sqrt(b/2*a), '-', sqrt(b/2*a))\n",
        "test": "assert     parabola_directrix(a=0, b=0, c=1) == 1.0",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "test": "assert     common_element(['a', 'b', 'c'], ['d', 'e', 'f']) == False",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # TODO: Fill in the missing code\n    return 0\n",
        "test": "assert     median_trapezium(1,3,5)==2.0, \"Wrong answer\"",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in arr:\n        if(i < number):\n            flag = True\n    return flag\n",
        "test": "assert     check_greater([1,2,3,4,5], 3) == True",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'[a]+b+')\n    #mo = pattern.search(text)\n    #return mo is not None\n    return len(re.findall(r'[a]+b+',text)) > 0\n",
        "test": "assert     text_match_one('abbbbbbb') == True, 'abbbbbbb'",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\nprint(last_Digit(12))\nprint(last_Digit(10))\nprint(last_Digit(72))\n",
        "test": "assert     last_Digit(9) == 9",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: x < 0, list1))\n    # return [i for i in list1 if i < 0]\n",
        "test": "assert     neg_nos([1, -2, 3, -4, 5]) == [-2, -4]",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    print('Removing ODD characters from a string: {}'.format(str1))\n    result = []\n    for i in str1:\n        if i not in result:\n            if i not in [str(x) for x in range(0,10)]:\n                result.append(i)\n    result = ''.join(result)\n    return result\n",
        "test": "assert     remove_odd(\"\") == \"\", \"Not a valid answer\"",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0,len(test_list)-1):\n        if (test_list[i][0]==test_list[i+1][1] and test_list[i][1]==test_list[i+1][0]):\n            count = count+1\n    return count\n",
        "test": "assert     count_bidirectional([]) == 0, 'incorrect'",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n",
        "test": "assert     multiple_to_single([1, 2, 3, 4, 5]) == 12345, 'error'",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # -1 to remove the word \"the\" from the text\n    for i in range(-1, len(text)):\n        # Find the position of the first \"the\" in the text\n        if text[i] == \"the\":\n            return i\n",
        "test": "assert find_adverb_position(\"I have one book\") == [2, 5, 8]",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "test": "assert     surfacearea_cube(1) == 6, \"Wrong value\"",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    numbers_positive=0\n    for number in nums:\n        if number >= 0:\n            numbers_positive += 1\n    return numbers_positive/len(nums)\n",
        "test": "assert     positive_count([0, 0, 0, 0, 1]) == 1",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #print(list1)\n    list1.sort()\n    list1.reverse()\n    \n    for i in range(len(list1)):\n        if(list1[i] < 0):\n            #print(list1[i])\n            return list1[i]\n        else:\n            continue\n    #print(max(list1))\n    return None\n        \n",
        "test": "assert largest_neg([-1,0,-2]) == -1",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return([i[:K] for i in test_list])\n",
        "test": "assert     trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)], 4) == [(1, 2, 3, 4), (6, 7, 8, 9)]",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mult_list = []\n    for i in range(len(test_tup1)):\n        mult_list.append(test_tup1[i] * test_tup2[i])\n    return tuple(mult_list)\n    \n    ",
        "test": "assert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 12, 21, 32), 'Test 1 incorrect'",
        "num_ids": 2953,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence_dict = dict(Counter(lst)) \n    for key, value in occurence_dict.items(): \n        occurence_dict[key] = tup.count(key) \n    return occurence_dict \n",
        "test": "assert     count_Occurrence(('a','a','a','b','b'),['a','b']) ",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 8, 27, 64, 125, 216, 343, 512, 729]",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n",
        "test": "assert     cal_sum(100) == 5050",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if (len(str) >= l):\n        return str[0:l]\n    else:\n        return str + \"-\" * (l - len(str))\n",
        "test": "assert     extract_string([\"Tiger\",\"Puma\",\"Bear\"],2) == [\"Tiger\",\"Puma\"]",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text1)\n",
        "test": "assert     remove_whitespaces('Hello') == 'Hello', 'Wrong!'",
        "num_ids": 2773,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        loss_amount=actual_cost-sale_amount\n        return loss_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(1000, 1000)     == 0",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1,n) if n%i==0 and i%2==0])\n    # return n*(n+1)/2\n",
        "test": "assert     sumofFactors(1) == 0",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if 'z' in text:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz('the slow fox') == False, 'wrong result'",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Return True if number of days is 31\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        return True\n    # Return True if number of days is 30\n    if monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11:\n        return True\n    return False\n",
        "test": "assert     check_monthnumb_number(3) == True",
        "num_ids": 3262,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n",
        "test": "assert     reverse_string_list([\"a\", \"b\", \"c\"]) == ['c', 'b', 'a']",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lengths = [len(x) for x in lst] \n    min_len = min(lengths)\n    return [lst[i] for i, x in enumerate(lengths) if x == min_len] \n",
        "test": "assert     Find_Min([[1, 2, 3], [2, 3, 4], [4, 5, 6, 7, 8], [9, 10]]) == [[9, 10]]",
        "num_ids": 1285,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert     rectangle_area(10, 5) == 50",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    s1 = re.findall('[A-Z][a-z]*',str1)\n    s2 = ''\n    for i in s1:\n        s2+=i\n    return s2\n",
        "test": "assert     remove_uppercase(\"\") == \"\"",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "test": "assert     Extract([[1,2], [3,4], [5,6], [7,8], [9,10]]) == [1,3,5,7,9], \"Extract first of list elements failed\"",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr('') == 0, 'Invalid Input'",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            result += combinations_list(list1[i+1:])\n    return result\n",
        "test": "assert ",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return arr[0]\n    max_so_far = 1\n    max_ending_here = 1\n    for i in range(n):\n        max_ending_here = max(arr[i], arr[i]*max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert     max_subarray_product([6, -3, -1, 0, -2]) == 6, 'testcase 2 failed'",
        "num_ids": 2140,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = None\n    for key in dict:\n        if val == None:\n            val = dict[key]\n        else:\n            if val!= dict[key]:\n                return False\n    return True\n",
        "test": "assert     check_value({1: 1, 2: 1, 3: 1}, 1) == True",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    while '' in dict1:\n        dict1.pop('')\n    return dict1\n",
        "test": "assert     {} ==     drop_empty({})",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return arr[0] if len(arr) == 1 else -1\n    \n    max_product = 1\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i,len(arr)):\n            temp *= arr[j]\n            max_product = max(temp, max_product)\n    return max_product\n",
        "test": "assert     max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    if len(test_tup) % 2 == 1:\n        i = 0\n        while i < len(test_tup) - 1:\n            sum += test_tup[i] + test_tup[i + 1]\n            i += 2\n        return sum\n    else:\n        i = 0\n        while i < len(test_tup) - 1:\n            sum += test_tup[i] + test_tup[i + 1]\n            i += 2\n        return sum\n",
        "test": "assert     add_pairwise((1, 2, 3, 4, 5)) == (2, 4, 6, 8, 10), 'incorrect'",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result *= i \n        result %= n\n    return result\n",
        "test": "assert     find_remainder([1, 2, 3], 10) == 6, \"find_remainder([1, 2, 3], 10)!= 6\"",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    a = sorted(l)\n    for i in range(len(a)-1):\n        if a[i] + 1 == a[i+1]:\n            return True\n    return False\n",
        "test": "assert     check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = set(test_list1)\n    list2 = set(test_list2)\n    return list(list1.intersection(list2))\n",
        "test": "assert     (tuple_intersection([(1,2), (3,4), (5,6)], [(1,2), (3,4), (5,6)]) == [(1,2), (3,4), (5,6)])",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    i=0\n    new=''\n    for char in str1:\n        if char == ch:\n            new+=newch\n        else:\n            new+=char\n        i+=1\n    return new\n    \n",
        "test": "assert     replace_char('hello','l','x') == 'hexxo'",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n",
        "test": "assert     sort_counter({1: 1, 2: 3, 3: 2}) == {1: 1, 2: 3, 3: 2}",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #Sums the largest and smallest values in the array and returns them.\n    return sum(sorted(nums)[::-1])\n",
        "test": "assert     big_sum([1, 2, 3]) == 6, \"big_sum('random_array') is not working properly\"",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower(\"String\") == \"string\", \"Check is_lower 1\"",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r\"\\b[a-z]\\b\", \"\", str1, flags=re.IGNORECASE)\n    \nprint(\"\\nremove_lowercase example:\")\nprint(remove_lowercase(\"test case\"))\nprint(remove_lowercase(\"THIS SHOULD ALL BE LOWERCASE!\"))\nprint(remove_lowercase(\"Remove ALL lowercase substrings from this sentence. But NOT these words: Here\"))\nprint(remove_lowercase(\"Remove ALL lowercase substrings from this sentence. But NOT these words: Here But Not Here Either\"))\n",
        "test": "assert     remove_lowercase('') == ''",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return int(str(n)[0])\n",
        "test": "assert     first_Digit(0) == 0, 'error'",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2==1]\n    \n    \n    \n    \ndef Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2==1]\n    \n",
        "test": "assert     Split([1,2,3,4,5,6,7]) ",
        "num_ids": 1692,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1,n+1):\n        sum_of_nums += i\n        sum_of_cubes += i**3\n    return abs(sum_of_nums**2 - sum_of_cubes)\n",
        "test": "assert     difference(1) == 0, \"Wrong Answer\"",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if (A[i] ^ A[j]) & 1 : \n                count+=1\n    return count \n",
        "test": "assert     find_Odd_Pair([1,2,3],3) == 2",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i].isupper():\n            string[i] = string[i].lower()\n        else:\n            string[i] = string[i].upper()\n    return ''.join(string)\n",
        "test": "assert     toggle_string('12345') == '12345'",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n",
        "test": "assert     digit_distance_nums(123, 123) == 0",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -float('inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum = current_sum + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([4,2,3,4],4) == 13",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    sorted_list = list(set(test_tup1).union(set(test_tup2)))\n    sorted_list.sort()\n    return tuple(sorted_list)\n",
        "test": "assert     set(union_elements((3,2,4), (5,6,7,8))) == set([2, 3, 4, 5, 6, 7, 8]), \"wrong union_elements() function\"",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lenlst = len(lst)\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    lst4 = []\n    lst5 = []\n    lst6 = []\n    lst7 = []\n    for i in range(lenlst):\n        if type(lst[i]) == list:\n            lst1.append(len(lst[i]))\n        if type(lst[i]) == tuple:\n            lst2.append(len(lst[i]))\n        if type(lst[i]) == set:\n            lst3.append(len(lst[i]))\n        if type(lst[i]) == str:\n            lst4.append(len(lst[i]))\n        if type(lst[i]) == dict:\n            lst5.append(len(lst[i]))\n        if type(lst[i]) == range:\n            lst6.append(len(lst[i]))\n        if type(lst[i]) == frozenset:\n            lst7.append(len(lst[i]))\n    if len(lst1)!= 0:\n        return(max(lst1))\n    if len(lst2)!= 0:\n        return(max(lst2))\n    if len(lst3)!= 0:\n        return(max(lst3))\n    if len(lst4)!= 0:\n        return(max(lst4))\n    if len(lst5)!= 0:\n        return(max(lst5))\n    if len(lst6)!= 0:\n        return(max(lst6))\n    if len(lst7)!= 0:\n        return(max(lst7))\n",
        "test": "assert     Find_Max_Length([[1, 2, 3], [4, 5], [7, 8, 9]]) == 3",
        "num_ids": 1652,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    value = pattern.findall(text)\n    return value\n",
        "test": "assert     extract_values(\"This is a string with no values\") == []",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dicti = {}\n    for i in range(n):\n        if arr[i] in dicti:\n            dicti[arr[i]] += 1\n        else:\n            dicti[arr[i]] = 1\n    sum = 0\n    for key, value in dicti.items():\n        sum += (value*(value-1))/2\n    return int(sum)\n    \ndef all_substrings(s):\n    '''\n    Write a python function which takes a string and returns all possible substrings of that string in the form of a list.\n    '''\n    arr = []\n    arr.append(s)\n    for i in range(1,len(s)):\n        arr.append(s[i:])\n    return arr\n",
        "test": "assert     count_Pairs([1,2,3,4,5],0) == 0",
        "num_ids": 3118,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n    \ndef join(char_list):\n    '''\n    Write a python function to join a list of characters.\n    '''\n    return ''.join(char_list)\n",
        "test": "assert     split('hello') == ['h','e','l','l','o']",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return 0 if n == 0 else n % 10 + sum_digits(n // 10)\n",
        "test": "assert     sum_digits(1234) == 10",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    if len(list1) == 1:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    return issort_list(list1[1:])\n",
        "test": "assert     issort_list([1,2,3]) == True",
        "num_ids": 640,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert     empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = str.lower)\n",
        "test": "assert     sort_sublists(['a', 'a', 'a']) == ['a', 'a', 'a']",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    a = set(nums)\n    a = list(a)\n    return a\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 4976,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return np.prod(list(set(list_data)))\n",
        "test": "assert     unique_product([1, 2, 3, 1, 2, 1]) ==     6,         \"Check the code\"",
        "num_ids": 4700,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    SA= 2*pi*r*h + 2*pi*r**2\n    return SA\n",
        "test": "assert ",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_2(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_3(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_4(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_5(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)]==B:\n            return True\n    return False\ndef is_Sub_Array_6(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)]==B:\n            return True\n    return False\ndef is_Sub_Array_7(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_8(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_9(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_10(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_11(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_12(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_13(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_14(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_15(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:len(B)+i]==B:\n            return True\n    return False\ndef is_Sub_Array_16(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_17(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_18(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_19(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_20(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_21(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_22(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_23(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    len_b=len(B)\n    for i in range(len(A)-len_b+1):\n        if A[i:i+len_b]==B:\n            return True\n    return False\ndef is_Sub_Array_24(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    le",
        "test": "assert     is_Sub_Array([1,2,3,4,5,6], [1,2,3,4,6,7]) == False, \"Check Failed\"",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    import math \n    res = math.factorial(n)\n    last_digit = res % 10\n    print(f\"Last Digit Factorial of {n} is {last_digit}.\")\n    return last_digit\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #TODO: implement this\n    return [x for t in zip(list1,list2,list3) for x in t]\n    \n    \ndef shuffle(l):\n    '''\n    Write a function to shuffle a list.\n    '''\n    #TODO: implement this\n    shuffled_list = []\n    for i in range(len(l)):\n        index = random.randint(0,len(l)-1)\n        shuffled_list.append(l[index])\n        l.pop(index)\n    return shuffled_list\n    \n    \ndef reverse(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    #TODO: implement this\n    reversed_list = []\n    for i in range(len(l)-1,-1,-1):\n        reversed_list.append(l[i])\n    return reversed_list\n",
        "test": "assert     interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [i for i in test_tup1 if i not in test_tup2]\n",
        "test": "assert     find_dissimilar((1,2,3,4,5,6),(3,4,5,6,7,8,9)) == (1,2) or (2,1), 'Check your solution'",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n    # pass\n",
        "test": "assert     even_ele(((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), ('a', 'b', 'c', 'd'), [1, 2, 3, 4, 5], (1, 2, 3, 4, 5)),     \\",
        "num_ids": 1975,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = ((b*s)/2)*b\n    return A\n",
        "test": "assert     surface_Area(0, 0) == 0, \"Should be 0\"",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n",
        "test": "assert     my_dict({'a': 1}) == False",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Base case\n    if num == 0 or num == 1:\n        return 1\n    # Recursive case\n    return catalan_number(num - 1) * (4 * catalan_number(num - 1) - 2 * (num - 1))\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r\"ly\\b\", text, flags = re.I)\n",
        "test": "assert     find_adverbs('''It was a dark and stormy night. I was staying at home by myself, for I loved to play with my toys.",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq._heapify_max(items)\n    return [heapq._heappop_max(items) for i in range(n)]\n    \n",
        "test": "assert     expensive_items([('item1', 5), ('item2', 10), ('item3', 4)], 2) == [('item3', 4), ('item2', 10)]",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    a.extend(b)\n    return a\n",
        "test": "assert     split_Arr([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4] + [5], 'incorrect'",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     tuple([1, 2, 3]) == list_tuple([1, 2, 3])",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest\n",
        "test": "assert     big_diff([1, 2, -1]) == 3, \"testcase #2\"",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n",
        "test": "assert     perfect_squares(1, 2) == [1], \"Wrong result for perfect_squares(1, 2)\"",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*cmath.exp(complex(0,y)),y)\n",
        "test": "assert     polar_rect(1,0) == (1.0, 0.0)",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    listLen = len(newList)\n    temp = newList[0]\n    newList[0] = newList[listLen-1]\n    newList[listLen-1] = temp\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1], 'incorrect swap'",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k > n):\n        return 0\n    elif(k == 0 or k == n):\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n",
        "test": "assert     binomial_Coeff(1,1) == 1",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    my_ip = ip\n    #replace all zeroes with a single zero\n    new_ip = re.sub('(\\.0{3,})', '', my_ip)\n    return new_ip\n",
        "test": "assert     removezero_ip(\"1111\") == \"1111\"",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    for x in list1:\n        if i%2 == 0:\n            return x\n            break\n        else:\n            i += 1\n",
        "test": "assert     diff_even_odd([1, 2, 3, 4, 5, 6]) == 1, 'diff_even_odd([1, 2, 3, 4, 5, 6]) == 1 failed'",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    if n1 < n2:\n        return min_Swaps(str2,str1)\n    \n    n = min(n1, n2)\n    \n    dp = [0 for i in range(n+1)]\n    \n    for i in range(1,n+1):\n        \n        if str1[i-1]!= str2[i-1]:\n            if str1[i-1] == '1' and str2[i-1] == '0':\n                dp[i] = 1 + dp[i-1]\n            else:\n                dp[i] = min(dp[i-1] + 1, dp[i])\n        else:\n            dp[i] = dp[i-1]\n    \n    print(dp)\n    return dp[n]\n",
        "test": "assert     min_Swaps('1100','1101')     == 0, 'incorrect result'",
        "num_ids": 1904,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for elem in tuple_list:\n        if type(elem) == int:\n            size = size + sys.getsizeof(elem)\n        elif type(elem) == list:\n            size = size + tuple_size(elem)\n        elif type(elem) == tuple:\n            size = size + tuple_size(elem)\n    return size\ndef tuple_max(tuple_list):\n    '''\n    Write a function to find the maximum value in the tuple.\n    '''\n    max_val = tuple_list[0]\n    for elem in tuple_list:\n        if elem > max_val:\n            max_val = elem\n    return max_val\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse the tuple.\n    '''\n    reverse_list = []\n    for elem in tuple_list:\n        reverse_list.append(elem)\n    reverse_list.reverse()\n    return tuple(reverse_list)\ndef tuple_sorted(tuple_list):\n    '''\n    Write a function to sort the tuple.\n    '''\n    sorted_list = []\n    for elem in tuple_list:\n        sorted_list.append(elem)\n    sorted_list.sort()\n    return tuple(sorted_list)\ndef tuple_count(tuple_list, elem):\n    '''\n    Write a function to count the number of occurrences of the given element in the tuple.\n    '''\n    count = 0\n    for elem in tuple_list:\n        if elem == elem:\n            count += 1\n    return count\ndef tuple_mul(tuple_list, num):\n    '''\n    Write a function to multiply all the values in the tuple by the given number and return a tuple.\n    '''\n    mult_list = []\n    for elem in tuple_list:\n        mult_list.append(elem * num)\n    return tuple(mult_list)\ndef tuple_div(tuple_list, num):\n    '''\n    Write a function to divide all the values in the tuple by the given number and return a tuple.\n    '''\n    div_list = []\n    for elem in tuple_list:\n        div_list.append(elem / num)\n    return tuple(div_list)\ndef tuple_index(tuple_list, elem):\n    '''\n    Write a function that takes a tuple as a parameter, and return the index of the given element.\n    '''\n    count = 0\n    for elem in tuple_list:\n        if elem == elem:\n            return count\n        count += 1\ndef tuple_index_list(tuple_list, index_list):\n    '''\n    Write a function that takes a tuple as a parameter, and return the value of the tuple elements at the given index numbers.\n    '''\n    tuple_index_list = []\n    for elem in index_list:\n        tuple_index_list.append(tuple_list[elem])\n    return tuple(tuple_index_list)\ndef tuple_remove(tuple_list, elem):\n    '''\n    Write a function to remove all the occurrences of the given element in the tuple.\n    '''\n    new_list = []\n    for elem in tuple_list:\n        if elem!= elem:\n            new_list.append(elem)\n    return tuple(new_list)\ndef tuple_pop(tuple_list):\n    '''\n    Write a function to remove the last element of the tuple and return the tuple.\n    '''\n    tuple_list.pop()\n    return tuple(tuple_list)\ndef tuple_insert(tuple_list, index_list, new_elem):\n    '''\n    Write a function that inserts the given element at the given index numbers in the tuple.\n    '''\n    for elem in index_list:\n        tuple_list.insert(elem, new_elem)\n    return tuple(tuple_list)\ndef tuple_copy(tuple_list):\n    '''\n    Write a function to copy the tuple.\n    '''\n    return tuple(tuple_list)\ndef tuple_join(tuple_list, sep):\n    '''\n    Write a function to join all the elements of the tuple into a string, and return a string.\n    '''\n    return sep.join(tuple_list)\ndef tuple_map(tuple_list, map_fn):\n    '''\n    Write a function to map the given function to each element in the tuple.\n    '''\n    map_list = []\n    for elem in tuple_list:\n        map_list.append(map_fn(elem))\n    return tuple(map_list)\ndef tuple_reduce(tuple_list, reduce_fn):\n    '''\n    Write a function to reduce the given function to a single value in the tuple.\n    '''\n    reduce_list = []\n    for elem in tuple_list:\n        reduce_list.append(reduce_fn(elem))\n    return tuple(reduce_list)\ndef tuple_filter(tuple_list, filter_fn):\n    '''\n    Write a function to filter the given function from the tuple.\n    '''\n    filter_list = []\n    for elem in tuple_list:\n        if filter_fn(elem):\n            filter_list.append(elem)\n    return tuple(filter_list)\ndef get_tuple_list_str(tuple_list):\n    '''\n    Write a function to convert the given tuple into a string.\n    '''\n    str_list = []\n    for elem in tuple_list:\n        str_list.append(str(elem))\n    return''.join(str_list)\ndef test_tuple_size():\n    assert sys.getsizeof(tuple_size((1, 2, 3))) == sys.getsizeof(1)\n    assert sys.getsizeof(tuple_size((1,))) == sys.getsizeof(1) * tuple_size(())\n    assert sys.getsizeof(tuple_size(('a', 'b', 'c'))) == sys.getsizeof('a') * sys.getsizeof('b') * sys.getsizeof('c')\ndef test_tuple_max():\n    assert tuple_max((1, 2, 3)) == 3\n    assert tuple_max((1, 2, 3, 4)) == 4\n    assert tuple_max((1,)) == 1\ndef test_tuple_reverse():\n    assert tuple_reverse((1, 2, 3, 4, 5)) == (5, 4, 3, 2, 1)\ndef test_tuple_sorted():\n    assert tuple_sorted((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n    assert tuple_sorted((1, 2, 3, 5, 4)) == (1, 2, 3, 4, 5)\n    assert tuple_sorted((5, 3, 2, 1, 4)) == (1, 2, 3, 4, 5)\n    assert tuple_sorted((1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11)) == (1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11)\ndef test_tuple_count():\n    assert tuple_count((1, 2, 3, 1), 1) == 2\n    assert tuple_count((1, 2, 3, 1, 1), 1) == 3\n    assert tuple_count((1, 2, 3, 1, 1), 2) == 0\ndef test_tuple_mul():\n    assert tuple_mul((1, 2, 3, 4), 3) == (1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)\n    assert tuple_mul((1, 2, 3, 4), 2) == (1, 2, 3, 4, 1, 2, 3, 4)\ndef test_tuple_div():\n    assert tuple_div((2, 4, 6, 8), 2) == (1, 2, 3, 4)\n    assert tuple_div((2, 4, 6, 8), 3) == (1, 2, 3, 4)\n    assert tupl",
        "test": "assert     tuple_size((1, 2,)) == sys.getsizeof(1) + sys.getsizeof(2), f\"wrong size of tuple(1, 2) {tuple_size((1, 2))}\"",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[k-1] < arr2[k-1]:\n        return arr1[k-1]\n    elif arr1[k-1] > arr2[k-1]:\n        return arr2[k-1]\n    else:\n        return arr1[k-1]\n",
        "test": "assert     find_kth([2,5,8,9], [1,3,4,7], 3) == 4",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum(int(i)**len(str(number)) for i in str(number)) == number\n",
        "test": "assert     armstrong_number(200) == False",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    for i in range(number + 1):\n        s += i\n    return s, s / number\n",
        "test": "assert     sum_average(1) == (1, 1)",
        "num_ids": 918,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    for i in range(2,n//2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     (is_Even(15) == False)",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #method 1\n    dict1 = {}\n    for x in str1:\n        if x in dict1:\n            return x\n        else:\n            dict1[x] = 1\n",
        "test": "assert     first_repeated_char(\"abbcdefg\") == 'b'",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    return ludic\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 4932,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    a = s.split()\n    a.reverse()\n    return \" \".join(a)\n",
        "test": "assert     reverse_words(\"the sky is blue\") == \"blue is sky the\"",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for x in range(2, num):\n        if num % x == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(11) == True",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n",
        "test": "assert     radian_degree(90) == math.pi/2",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return text[start:end], start, end\n    else:\n        return None, None, None\n",
        "test": "assert     find_literals('1234567890', '1234567890') == ( '1234567890', 0, 10)",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    if(n == 0):\n        return bell[0]\n    else:\n        for i in range(1, n+1):\n            bell.append(i*bell[i-1])\n        return bell[n]\n",
        "test": "assert     bell_Number(1) == 1, \"It's wrong!\"",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in list1:\n        if i!= L:\n            new_list.append(i)\n    return new_list\n",
        "test": "assert     remove_kth_element([], 0) == []",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in test_list:\n        max_list.append(max(i))\n    return max_list[N-1]\n",
        "test": "assert     max_of_nth([[1, 2, 3], [4, 5, 6]], 1) == 3",
        "num_ids": 969,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    newlst = []\n    for sublst in lst:\n        newlst.append([sublst[0], sublst[1]])\n    return newlst\n",
        "test": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    sum = 0\n    for num in test_list:\n        sum += num\n        cum_sum.append(sum)\n    print(cum_sum)\n    return cum_sum\n",
        "test": "assert     cummulative_sum([1,2,3,4,5,6,7,8,9]) == [1,3,6,10,15,21,28,36,45], 'incorrect'",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Need to loop over the tuples to get the average for each tuple\n    avgs = []\n    # index variable to get values in tuple\n    for i in range(len(nums[0])):\n        # sum for each tuple\n        total = 0\n        for tup in nums:\n            total += tup[i]\n        # divide by the number of tuples\n        avgs.append(total / len(nums))\n    return avgs\n",
        "test": "assert     average_tuple([(1,1,1,1),(2,2,2,2)]) == [1.5, 1.5, 1.5, 1.5]",
        "num_ids": 3216,
        "indeed": true
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1,2,3), (4,5,6)) == (1,2,3)",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Compute the max number of steps that can be taken before reaching the destination\n    # we will need to count steps from current position\n    # We can either move to next position or we can just jump at max\n    # There are only 2 ways to get to destination\n    # The idea is to start from the destination, we are only allowed to move to right and down\n    # Calculate the max number of steps we can take\n    \n    # Approach 1:\n    # Let us start from destination\n    # Let us assume that we can take one step at a time\n    # We will be taking 1 step at a time.\n    # The max possible number of steps is the number of steps we can take to reach the origin\n    # As we are taking 1 step at a time, we can reach the origin in max'steps' steps.\n    # Let us then store this value in a variable\n    # Now let us start from destination and the we can take steps from destination\n    # If we have reached the destination then we will reach the origin in max'steps'\n    # Steps taken to reach origin is (2*steps)\n    # If we have not reached the origin then we will again take steps from destination\n    # If we reach the origin, then we will return the value of the variable\n    \n    # Approach 2:\n    # We can take 'd' steps at a time.\n    # Let us check if we can jump to destination\n    # If we can jump to destination then we will again take 'd' steps at a time\n    # If we can not jump to destination then we will take 1 step at a time\n    \n    # Lets consider the worst case\n    # If we take d steps at a time then we will reach the destination\n    # This is not the case and we will have to take at least d steps \n    # Let us consider the steps which we have to take to reach the destination\n    # d + 2(d-1) + 3(d-2) +..... + d(d-1) + d\n    # 2d^2 - 2d + 1\n    # If the number of steps is a perfect square then we can jump to the destination \n    # but if it is not a perfect square then we will have to take at least d steps to reach the destination\n    \n    # Approach 3:\n    # We can take 'd' steps at a time.\n    # Let us check if we can jump to destination\n    # If we can jump to destination then we will again take 'd' steps at a time\n    # If we can not jump to destination then we will take 1 step at a time\n    \n    # We can have two cases\n    # If steps is less than d then we can jump to the destination in max steps\n    # If steps is greater than d then we have to take at least d steps\n    # We will have to return the min of the two cases\n    \n    # We can reduce the steps to a single step\n    # If we take d steps at a time then we will have to take d steps at a time if we can jump to the destination\n    # If we cannot jump to the destination then we will have to take at least d steps\n    \n    # We can take steps = 2^x for x >= 0\n    # Then if we have to take at least d steps then we will take at least (2^d - 1) steps\n    # Now if we have to take at least d steps then we will have to take at least'steps' steps to reach the destination\n    \n    # We can do binary search\n    # We can check if the steps is less than d or not\n    # If the steps is less than d then we can take d steps\n    # If the steps is greater than d then we can take at least d steps\n    # We will use binary search to find the min steps required\n    \n    # Time complexity of this solution is O(log(steps))\n    # Space complexity is O(1)\n    \n    max_steps = int((2**(d-1)) - 1)\n    print(\"Max Steps\", max_steps)\n    if steps > max_steps:\n        steps = max_steps\n    steps = int(steps)\n    if steps == 0:\n        return 0\n    elif steps == 1:\n        return 1\n    \n    if steps < d:\n        return steps\n    \n    # We will use binary search to find the min steps required\n    low = 0\n    high = steps\n    mid = (low + high) // 2\n    while low < high:\n        if mid < d - 1:\n            low = mid\n        elif mid > d - 1:\n            high = mid\n        else:\n            return mid\n        mid = (low + high) // 2\n    \n    return low\n    \n    # Let us look at the approach 2\n    # We can take 'd' steps at a time.\n    # Let us check if we can jump to destination\n    # If we can jump to destination then we will again take 'd' steps at a time\n    # If we can not jump to destination then we will take 1 step at a time\n    \n    # Steps taken to reach destination is (2*steps)\n    # If we have not reached the origin then we will again take steps from destination\n    # If we reach the origin then we will return the value of the variable\n    \n    # Approach 4:\n    # We can take 'd' steps at a time.\n    # Let us check if we can jump to destination\n    # If we can jump to destination then we will again take 'd' steps at a time\n    # If we can not jump to destination then we will take 1 step at a time\n    \n    # We can have two cases\n    # If steps is less than d then we can jump to the destination in max steps\n    # If steps is greater than d then we have to take at least d steps\n    # We will have to return the min of the two cases\n    \n    # We can reduce the steps to a single step\n    # If we take d steps at a time then we will have to take d steps at a time if we can jump to the destination\n    # If we cannot jump to the destination then we will have to take at least d steps\n    \n    # We can take steps = 2^x for x >= 0\n    # Then if we have to take at least d steps then we will take at least (2^d - 1) steps\n    # Now if we have to take at least d steps then we will have to take at least'steps' steps to reach the destination\n    \n    # We can do binary search\n    # We can check if the steps is less than d or not\n    # If the steps is less than d then we can take d steps\n    # If the steps is greater than d then we can take at least d steps\n    # We will use binary search to find the min steps required\n    \n    # Time complexity of this solution is O(log(steps))\n    # Space complexity is O(1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     min_Jumps(1, 0) == 0, \"Test Failed\"",
        "num_ids": 3169,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1//num2 for num1,num2 in zip(nums1,nums2)]\n",
        "test": "assert     div_list([1,2,3,4], [1,2,3,4]) == [1, 1, 1, 1], 'incorrect'",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in range(0, len(test_str)):\n        if test_str[i].isdigit():\n            new_str += test_str[i]\n    return new_str + test_str\n",
        "test": "assert     move_num('hi') == 'hi', 'Not a valid string'",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_count = 0\n    for i in range(len(a)):\n        count = 0\n        for j in range(i, len(a)):\n            if (a[j] % a[i] == 0):\n                count += 1\n        if (count > max_count):\n            max_count = count\n    return max_count\n",
        "test": "assert     largest_subset([1, 1, 1]) == 3",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    \n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2 - 1]) / 2\n    else:\n        return arr1[n//2]\n",
        "test": "assert     get_median([1, 2, 3], [2, 3, 4], 3) == 2",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n",
        "test": "assert     (nth_nums([1,2,3,4],3) == [1,8,27,64]), 'incorrect output'",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #if string.isupper():\n    #    return True\n    #else:\n    #    return False\n    return string.upper() == string\n",
        "test": "assert     is_upper('hello') == False",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "test": "assert     swap_List([1,2,3,4]) == [4,2,3,1]",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = 2 * r * math.sin(math.pi / 3)\n    return(a)\n",
        "test": "assert     abs(triangle_area(0) - 0.0) < 0.001, \"Wrong Answer. Try again!\"",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    array.sort()\n    if end == None:\n        end = len(array)\n    else:\n        end = end\n    for i in range(start,end):\n        if array[i]!= i:\n            return i\n    return len(array)\n",
        "test": "assert     find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 0",
        "num_ids": 1281,
        "indeed": true
    },
    {
        "number": 628,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return(string.replace(\" \", \"%20\"))\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = [] \n    for i in list: \n        if i%2 == 0: \n            even_num.append(i) \n    return even_num\n",
        "test": "assert     (Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10])",
        "num_ids": 993,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 2:\n        return [[sub[0]+1, sub[1]], [sub[0]-1, sub[1]], [sub[0], sub[1]+1], [sub[0], sub[1]-1]]\n    for coord in sub:\n        new = adjac(ele, sub = sub+[coord])\n        sub = new[:]\n    return sub\n",
        "test": "assert     adjac( (0,0) ) == []",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_')\n",
        "test": "assert     replace_spaces('test') == 'test'",
        "num_ids": 1075,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    for zero in num_list:\n        if zero == 0:\n            new_list.append(zero)\n    return new_list\n",
        "test": "assert     move_zero([2,0,0,0,0,0,0,0]) == [2,0,0,0,0,0,0,0]",
        "num_ids": 1207,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n",
        "test": "assert     pair_xor_Sum([1,2,3],3) == 0",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for x in iterable:\n        hq.heappush(h,x)\n    return [hq.heappop(h) for _ in range(len(h))]\n",
        "test": "assert     heap_sort([5,4,3,2,1]) == [1,2,3,4,5], \"Not sorted correctly\"",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        return 1\n    return 0\n",
        "test": "assert     noprofit_noloss(1000,200) == False     # this is wrong",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 3:\n        return 0\n    elif t < 11:\n        return 0\n    elif v < 13:\n        return round(35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16),0)\n    elif v < 18:\n        return round(35.75 + 0.4275*t*(v**0.16) - 35.75*(v**0.16),0)\n    else:\n        return round(35.75 + 0.4275*t*(v**0.16),0)\n",
        "test": "assert not     math.isclose(16.6, wind_chill(7.5, 8), abs_tol=0.01)",
        "num_ids": 2986,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list = []\n    for i in sample_names:\n        if i[0].isupper():\n            new_list.append(i)\n    return len(new_list)\n",
        "test": "assert     sample_nam([\"Ani\", \"Jaha\", \"Abu\", \"Hola\", \"Aditi\", \"Saikat\", \"Xin\"]) == 7, \"Wrong result\"",
        "num_ids": 1272,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(','').replace(')','').replace('(',' ').replace(')',' ').replace(',','').strip()\n    return items\n",
        "test": "assert     remove_parenthesis(\"example()example\") == \"exampleexample\"",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n*(n+1)/2)\n",
        "test": "assert     is_nonagonal(0) == 0",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) == 0:\n        return False\n    #Check the first and last character to see if they are letters\n    if len(text) == 1:\n        return False\n    #check first letter\n    if text[0] == 'z':\n        return False\n    #check last letter\n    if text[-1] == 'z':\n        return False\n    #Check if letter is not the start or end of the word\n    if text[0]!= 'z' and text[-1]!= 'z':\n        return True\n    return False\n",
        "test": "assert     text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\") == True",
        "num_ids": 1561,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    if (l == 1):\n        return input\n    else:\n        if(k<l):\n            input[0:k] = reversed(input[0:k])\n            return input\n        else:\n            return input\n            \n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1791,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('a', 'b', 'c'), {'d': 1, 'e': 2, 'f': 3}) == ('a', 'b', 'c', {'d': 1, 'e': 2, 'f': 3}) ",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def solve(cost, m, n):\n        # print(cost, m, n)\n        res = [[0 for i in range(n)] for j in range(m)]\n",
        "test": "assert     maxAverageOfPath([[1,2,3],",
        "num_ids": 1863,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print(students)\n    #check for minimal height\n    filtered_students = {}\n    for key in students:\n        height = students[key][0]\n        weight = students[key][1]\n        if height >= h and weight >= w:\n            filtered_students[key] = (height,weight)\n    print(filtered_students)\n    return filtered_students\n",
        "test": "assert     filter_data({'Alex':(36, 40)}, 25, 25) == {'Alex':(36, 40)}",
        "num_ids": 1926,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,1,2,2,1,2], [1,2,1,2,1,2]) == 4, 'wrong result'",
        "num_ids": 1287,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    if power <= 0:\n        raise ValueError('The power must be positive integer')\n    elif type(base)!= str:\n        raise ValueError('The base must be a positive integer')\n    elif int(base) <= 0:\n        raise ValueError('The base must be a positive integer')\n    else:\n        power = int(power)\n    sum_of_digits = 0\n    for i in base:\n        sum_of_digits += int(i) ** power\n    return sum_of_digits\n",
        "test": "assert     power_base_sum(2, 3)     == 8, 'Wrong output'",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\".+?\"', text1)\n",
        "test": "assert     extract_quotation('\"double quotes are good\"') == 'double quotes are good'",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            new_tuple = new_tuple + (test_tup[i],)\n        else:\n            new_tuple = new_tuple + (test_tup[i]*test_tup[i+1],)\n    return new_tuple\n",
        "test": "assert     multiply_elements((1,0,0,0)) == (0,0,0,0)",
        "num_ids": 3016,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(x) for x in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    return [key for key, group in groupby(nums)]\n",
        "test": "assert     (consecutive_duplicates([1,2,2,3,3,3,4,4,4,4]) == [1,2,3,4])",
        "num_ids": 3092,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r + math.pi*r*r*h\n    #return (math.pi*r*r+math.pi*r*r*h)/2\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 2*math.pi*r*h + 2*math.pi*r*r\n    #return (2*math.pi*r*h+2*math.pi*r*r)/2\n    \ndef lateralsurface_circular_cone(r):\n    '''\n    Write a function to find the lateral surface area of a circular cone given radius r.\n    '''\n    return math.pi*r*r + math.pi*r*r\n    #return (math.pi*r*r+math.pi*r*r)/2\n    \ndef lateralsurface_rectangular_prism(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given its length, width and height.\n    '''\n    return 2*l*w+2*l*h+2*w*h\n    #return (2*l*w+2*l*h+2*w*h)/2\n    \ndef lateralsurface_rectangular_pyramid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular pyramid given its length, width and height.\n    '''\n    return l*w+l*h+w*h\n    #return (l*w+l*h+w*h)/2\n",
        "test": "assert     lateralsurface_cone(0.0,0.0) == 0.0",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\"\\.\", \":\", text)\n    text = re.sub(r\",\", \":\", text)\n    return text\n",
        "test": "assert     re.sub(\"[,.]\", \":\", \"\") == \"\", \"Empty string\"",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            if mid == 0 or x!= A[mid - 1]:\n                return mid\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 3, 3, 3, 6, 7], 2) == -1",
        "num_ids": 1439,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_subarray_prod = 0\n    for i in range(len(arr)):\n        left = i\n        right = i\n        left_prod = 1\n        right_prod = 1\n        while(left>=0 and right<len(arr)):\n            left_prod = left_prod * arr[left]\n            right_prod = right_prod * arr[right]\n            sum_of_subarray_prod = sum_of_subarray_prod + left_prod * right_prod\n            left = left - 1\n            right = right + 1\n    return sum_of_subarray_prod\n",
        "test": "assert     sum_Of_Subarray_Prod([2, -3, -1]) == 0, 'Incorrect result'",
        "num_ids": 3521,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Start writing your code here\n    # n = 3\n    n |= n >> 1\n    n &= ~(1 << 0)\n    n |= n >> 1\n    n &= ~(1 << 63)\n    return n\n    \ndef get_list_of_bits(n):\n    '''\n    Write a python function to get the list of bits for a number.\n    '''\n    # Start writing your code here\n    # n = 16\n    # List of bits for the number n is stored in bits[]\n    bits = []\n    for i in range(0,64):\n        if n & (1 << i):\n            bits.append(1)\n        else:\n            bits.append(0)\n    return bits\n",
        "test": "assert     set_middle_bits(2) == 3",
        "num_ids": 4402,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert     (left_insertion([1, 2, 3], 3)) == 2,     'check left_insertion: base case'",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matcher = re.fullmatch(regex,string)\n    if matcher:\n        return True\n    return False\n",
        "test": "assert     re.search(regex, 'Afghijk') ",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = []\n    i = 1\n    while True:\n        triangular_number.append(i * (i + 1) // 2)\n        i += 1\n        if len(str(triangular_number[-1])) == n:\n            break\n    return triangular_number[-1]\n",
        "test": "assert     find_Index(1) == 1",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = dict()\n    for i in range(len(test_tup)-1):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict\n",
        "test": "assert     tuple_to_dict((1,2)) == {1:2}, 'Failed test case for tuple_to_dict'",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0,len(s)-1):\n        if s[i]!=s[i+1]:\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same(['abc','abc','abc']) == True",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * side) * (math.sqrt(2) / 2)\n",
        "test": "assert     math.isclose(area_tetrahedron(2), 12), \"Incorrect value of area\"",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1,2,3,4,5,6], 0) == [1,2,3,4,5,6], \"rotate_right_test1\"",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(type(ele) is not None for ele in test_tup)\n",
        "test": "assert     check_none(()) == True",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    mylist = []\n    for num in range(startnum, endnum+1):\n        # print(num)\n        if num == 0:\n            continue\n        else:\n            for digit in str(num):\n                if num % int(digit)!= 0:\n                    break\n                else:\n                    if num % int(digit) == 0:\n                        mylist.append(num)\n    return mylist\n",
        "test": "assert ",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n",
        "test": "assert     sector_area(5, 360) == None",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    # Create a table to store the longest common \n    # subsequence of three strings \n    L = [[[] for x in range(n + 1)] for y in range(m + 1)] \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                \n                # If current character of all strings are equal \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j].append(0) \n                \n                # If the current character of all strings are not equal \n                elif X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    L[i][j].append(L[i - 1][j - 1][k - 1] + 1) \n                \n                # If the current character of all strings are not equal \n                else: \n                    L[i][j].append(max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])) \n    return L[m][n][l] \n",
        "test": "assert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGGTAB\") == 4",
        "num_ids": 2547,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    #input1 = str1\n    #input2 = input1.title()\n    \n    #return input2\n    #print(input2)\n    input1 = str1\n    input2 = re.sub(r'(?<=\\w)([A-Z])', r' \\1', input1)\n    \n    return input2\n",
        "test": "assert     capital_words_spaces('') == ''",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Method 1\n    # nums_str.sort(key=lambda x: x.lstrip('0').lstrip('-'))\n    \n    # Method 2\n    # nums = [int(i) for i in nums_str]\n    # nums.sort(reverse=True)\n    # nums_str = [str(i) for i in nums]\n    # nums_str.sort()\n    \n    # Method 3\n    nums_str.sort(key=lambda x: list(map(int, x.split('.'))))\n    return nums_str\n    \n    \ndef sort_numeric_strings_v2(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        for j in i.split('.'):\n            if j.isdigit():\n                nums.append(float(j))\n    nums.sort(reverse=True)\n    nums_str = [str(i) for i in nums]\n    nums_str.sort()\n    return nums_str\n    \n    \nif __name__ == '__main__':\n    print(sort_numeric_strings_v2(['11.11', '1.0', '10.10.10.10', '2', '0.5555', '7.7.7.7', '1']))\n    \n",
        "test": "assert     sort_numeric_strings(['1', '7', '8', '4']) == ['1', '4', '7', '8']",
        "num_ids": 1190,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1,2,3], (1,2)) == [1,2,3,(1,2)]",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Returns true if a binary tree is a min heap\n    # false otherwise\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left >= len(arr):\n        return True\n    if right >= len(arr):\n        if arr[i] < arr[left]:\n            return False\n    else:\n        if arr[i] < arr[left] or arr[i] < arr[right]:\n            return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "test": "assert     True     == check_min_heap_helper([3, 2, 3, 1, 2], 2)",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def sum_digits(num):\n        '''\n        Write a function to sum all the digits of a number. \n        '''\n        result = 0\n        for digit in str(num):\n            result += int(digit)\n        return result\n    \n    # check for n == 0\n    if n == 0:\n        return 0\n    \n    # check for n == 1\n    if n == 1:\n        return 1\n    \n    # otherwise we want the sum of the digits of (2^n - 1)\n    return 2**n - 1 - sum_digits(2**n - 1)\n",
        "test": "assert     jacobsthal_num(0) == 0, \"jacobsthal_num(0) is wrong\"",
        "num_ids": 2663,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    i = 0\n    k = K\n    test_list.sort()\n    return test_list[i:k]\n",
        "test": "assert     min_k([(1, 1), (2, 2), (3, 3), (4, 4)], 2) == [(1, 1), (2, 2)]",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #list_x = []\n    #for i in range(min(l1,l2,l3)):\n    #    if l1[i] == l2[i] == l3[i]:\n    #        list_x.append(l1[i])\n    #return list_x\n    \n    \n    return [i for i in l1 if i in l2 and i in l3]\n",
        "test": "assert     [] == extract_index_list([], [], [])",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return(numbers[1])\n",
        "test": "assert     second_smallest([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1",
        "num_ids": 2667,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p=re.compile(r'ab+')\n    if p.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one(\"appleab\")",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if test_list == []:\n        return 0\n    reverse_list = []\n    for i in range(len(test_list)):\n        reverse_list.append(test_list[i][::-1])\n    return len(set(test_list) & set(reverse_list))\n",
        "test": "assert     count_reverse_pairs(['1','2','3','4']) == 4",
        "num_ids": 1332,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = dict()\n    for sublist in list1:\n        count[tuple(sublist)] = count.get(tuple(sublist), 0) + 1\n    return count\n",
        "test": "assert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {(1, 2, 3): 6}, \"Test 1 Failed\"",
        "num_ids": 1315,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert not     is_decimal('3.12d')",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_dict = {}\n    for i in arr:\n        if i in arr_dict:\n            arr_dict[i] += 1\n        else:\n            arr_dict[i] = 1\n    # print(arr_dict)\n    # print(len(arr_dict.values()))\n    if len(arr_dict.values()) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element([1,1,2,3,3,4,4,5,5,6,7,7,8,9,9]) == False",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in (4, 6, 9, 11):\n        return 30\n    else:\n        return 31\n",
        "test": "assert ",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    print(arr)\n    diff = abs(arr[0] - arr[1]) \n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if (abs(arr[i] - arr[j]) < diff): \n                diff = abs(arr[i] - arr[j]) \n    return(diff) \n",
        "test": "assert     find_min_diff([1,2,3,4,5], 3) == 1, \"Wrong output for the given input\"",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "test": "assert     number_ctr('23') == 2",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=3:\n        return n\n    else:\n        if (n%2 == 0):\n            return n//2\n        else:\n            return ((n//2)+1)\n",
        "test": "assert     is_polite(1) == 1 ",
        "num_ids": 1926,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i+1 <= len(l1)-1:\n            l2.append((l1[i], l1[i+1]))\n    return l2\n",
        "test": "assert     pair_wise([1,2,3,4,5]) == [(1,2),(2,3),(3,4),(4,5)]",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Write your code here\n    arr.sort()\n    i = 0\n    j = len(arr)-1\n    count = 0\n    while i < j:\n        if arr[i] + arr[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    return count\n",
        "test": "assert     get_pairs_count([1,2,3,4,5,6,7,8,9,10], 0) == 0",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 110,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n    pass\n",
        "test": "assert     Diff([1,2,3,4],[1,2,3,4]) == []",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    num = 1\n    sum = 0\n    while (num <= n) : \n        if (num % 2!= 0) : \n            sum += num ** 4\n        num += 1\n    return sum\n",
        "test": "assert     odd_num_sum(1) == 1, \"Sum of first odd natural numbers should be 1\"",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    par_map = {'}':'{', ']':'[',')':'('}\n    open_brackets = '({['\n    queue = deque()\n    for char in exp:\n        if char in open_brackets:\n            queue.append(char)\n        elif char in par_map:\n            if not queue or queue[-1]!= par_map[char]:\n                return False\n            queue.pop()\n    return not queue\n",
        "test": "assert     check_expression('')     == True",
        "num_ids": 1521,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for k in range(K):\n        test_str = test_str.replace(test_str[k*K:k*K+K], '')\n    return test_str\n",
        "test": "assert     remove_length('I am a runner', 0) == 'I am a runner'",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # return index of the pattern occurence in the text \n    if text.find(pattern)!= -1:\n        return [1,text.find(pattern)]\n    else:\n        return [0,0]\n",
        "test": "assert     occurance_substring('O=C1CCCC1', 'C=O') == [1, 5]",
        "num_ids": 916,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums)+1):\n        if i % 2!= 0 and nums[i-1] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1,2,3,4,5,6,7,8,9,10,11]) == False",
        "num_ids": 2817,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    count = 0\n    for i in range(0, len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count = count + 1\n    return count\n",
        "test": "assert     count_vowels(\"xyz\") == 0",
        "num_ids": 2068,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    seen = set()\n    for x in arr:\n        if x not in seen:\n            result += x\n            seen.add(x)\n    return result\n",
        "test": "assert     find_sum([1,1,1,1,1,1,1,1,1,1]) ==     1, 'incorrect'",
        "num_ids": 1235,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n",
        "test": "assert     pack_consecutive_duplicates([1]) == [[1]]",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        result[tuple(sublist)] = list1.count(sublist)\n    return result\n",
        "test": "assert     unique_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {(1, 2, 3): 1, (4, 5, 6): 1, (7, 8, 9): 1}",
        "num_ids": 2226,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [sum(t) for t in combinations(test_list, 2) if sum(t) == 2020]\n",
        "test": "assert ",
        "num_ids": 2615,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            divisors_count += 1\n    if (divisors_count % 2 == 0) : \n        return True\n    else : \n        return False\ndef is_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if (n <= 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for i in range(3, 1 + max_divisor, 2) : \n        if (n % i == 0) : \n            return False\n    return True\ndef is_perfect(n) : \n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors == n) : \n        return True\n    else : \n        return False\ndef is_abundant(n) : \n    '''\n    Write a python function to check whether the number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors > n) : \n        return True\n    else : \n        return False\ndef is_super_abundant(n) : \n    '''\n    Write a python function to check whether the number is super abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors > n) : \n        return True\n    if (is_abundant(n)) : \n        return False\n    else : \n        return True\ndef is_deficient(n) : \n    '''\n    Write a python function to check whether the number is deficient or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors < n) : \n        return True\n    else : \n        return False\ndef is_transient(n) : \n    '''\n    Write a python function to check whether the number is transient or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (is_perfect(n)) : \n        return False\n    if (is_deficient(n)) : \n        return False\n    if (sum_of_divisors > n) : \n        return True\n    else : \n        return False\ndef is_twin_transient(n) : \n    '''\n    Write a python function to check whether the number is twin_transient or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (is_transient(n)) : \n        return False\n    if (is_transient(sum_of_divisors)) : \n        return True\n    else : \n        return False\ndef is_triangular(n) : \n    '''\n    Write a python function to check whether the number is triangular or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if ((sum_of_divisors * 2) == n) : \n            return True\n        else : \n            return False\ndef is_pentagonal(n) : \n    '''\n    Write a python function to check whether the number is pentagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if (((24 * sum_of_divisors) + 1) == n) : \n            return True\n        else : \n            return False\ndef is_hexagonal(n) : \n    '''\n    Write a python function to check whether the number is hexagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if (((8 * sum_of_divisors) + 1) == n) : \n            return True\n        else : \n            return False\ndef is_heptagonal(n) : \n    '''\n    Write a python function to check whether the number is heptagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if (((55 * sum_of_divisors) + 1) == n) : \n            return True\n        else : \n            return False\ndef is_octagonal(n) : \n    '''\n    Write a python function to check whether the number is octagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divi",
        "test": "assert     count_divisors(15) ==     True",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # arr = [1, 2, 2, 3, 5, 5, 6]\n    # expected_output = [9, 9, 11, 11, 13, 13, 16, 16, 18, 18]\n    # arr = [1,2,3,4,5,6]\n    # expected_output = [15, 15, 15, 15, 15, 15]\n    # arr = [1,2,3,4,5]\n    # expected_output = [11, 11, 11, 11, 11]\n    # arr = [1,2,3]\n    # expected_output = [9, 9, 9]\n    # arr = [1, 2, 3]\n    # expected_output = [9, 9]\n    # arr = [1, 1, 1]\n    # expected_output = [9, 9]\n",
        "test": "assert ",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 2336,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n    return product\n",
        "test": "assert     mul_even_odd([0,1,2,3,4,5,6]) == 0",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, str):\n        return None\n    return tuple(int(item) for item in test_str[1:-1].split(','))\n",
        "test": "assert     (tuple_str_int('(1, 2, 3)'), (1, 2, 3))",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    for i in range(l):\n        if x <= a[i]:\n            return i\n    return l\n",
        "test": "assert     (right_insertion([1, 3, 5, 6], 0) == 0)",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n",
        "test": "assert     text_match_three('abb') == False",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)\n",
        "test": "assert     new_tuple([\"tuple\", \"is\", \"a\", \"collection\", \"of\", \"heterogeneous\", \"data\"], \"is tuple a collection of heterogeneous data\")",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "test": "assert     even_position([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]) == True",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            new_tup = new_tup + (tup,)\n        else:\n            new_tup = new_tup + remove_nested(tup)\n    return new_tup\n",
        "test": "assert     remove_nested(('3', 4, 5)) == ('3', 4, 5), \"Checking remove_nested\"",
        "num_ids": 1301,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([1, 2, 3]) == 0",
        "num_ids": 2798,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]<x:\n            low=mid+1\n        elif arr[mid]>x:\n            high=mid-1\n        else:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                low=mid+1\n    return -1\n",
        "test": "assert     last([1,2,3,4,5],5) == 4",
        "num_ids": 3536,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return text.startswith('a') and text.endswith('b')\n",
        "test": "assert not text_starta_endb('zzbobobegghakl') == 'a', 'wrong output'",
        "num_ids": 1093,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k,v in dict.items():\n        total = total + v\n    return total\n",
        "test": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(n) if x % 2 == 1])\n",
        "test": "assert     sum_odd(0) == 0,     \"Wrong answer for sum_odd(0)\"",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n    \ndef _product(arr):\n    '''\n    Write a python function to find the product of an array.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product\n",
        "test": "assert     _sum([1,2,3]) == 6, \"check #1\"",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32-d)))&0xffffffff\n",
        "test": "assert     left_rotate(0x0000,2) == 0x0000, 'Error, %x should be 0x0000'",
        "num_ids": 2709,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \", \"\")\n    return text\n",
        "test": "assert     remove_all_spaces(\"   \") == \"\"",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or z == x:\n        count = 2\n    elif (x == y and z!= x) or (y == z and x!= y) or (z == x and y!= z):\n        count = 1\n    else:\n        count = 0\n    return count\n",
        "test": "assert     test_three_equal(1,2,3) == 0",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    cnt = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            cnt += 1\n    return cnt\n",
        "test": "assert     count_rotation([1, 2, 3, 4, 5, 6, 7]) == 0, \"should be 0\"",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;  \n    y = int(math.sqrt(n)) \n    if (y * y == x) : \n        return True\n    else : \n        return False\n",
        "test": "assert     (is_perfect_square(18) == False)",
        "num_ids": 956,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for num in arr:\n        prod *= num\n    return prod % 2 == 0\n",
        "test": "assert     is_product_even([2,3,4]) == True",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return None\n    else:\n        return max(lists, key = lambda x: sum(x))\n",
        "test": "assert     max_sum_list([[1, 2, 3], [3, 4, 5], [7, 8, 9]]) == [7, 8, 9], \"Oops! max_sum_list([[1, 2, 3], [3, 4, 5], [7, 8, 9]]) is not [7, 8, 9].\"",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n    #return max([len([i for i in test_str if i.isupper()])])\n",
        "test": "assert     max_run_uppercase('AB') == 2",
        "num_ids": 1218,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n",
        "test": "assert     first_odd([2, 4, 6, 7, 8]) == 7, \"Check the even number\"",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n",
        "test": "assert     check_K(((1,3),(1,5),(1,7),(2,3)),3) == False",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # todo\n    #print(test_tup1)\n    #print(test_tup2)\n    #print(len(test_tup1))\n    #print(len(test_tup2))\n    for index in range(len(test_tup1)):\n        #print(test_tup2[index])\n        if test_tup2[index]>test_tup1[index]:\n            return False\n    return True\n",
        "test": "assert     check_smaller(('apple', 'banana', 'orange'), ('grapes', 'orange', 'banana', 'pear')) == False",
        "num_ids": 1209,
        "indeed": true
    }
]