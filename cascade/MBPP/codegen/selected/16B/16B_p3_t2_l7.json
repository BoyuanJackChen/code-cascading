[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return(shared_elements)\n",
        "test": "assert     similar_elements([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4], 'incorrect'",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(3) == False",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    maxheap=[]\n    for i in range(n):\n        hq.heappush(maxheap,(-nums[i],nums[i]))\n    print(maxheap)\n    return [hq.heappop(maxheap)[1] for i in range(n)]\nnums=[2,3,5,4,6]\nn=3\nprint(heap_queue_largest(nums,n))\n",
        "test": "assert     heap_queue_largest([25,20,15,10,5],2) == [25,20]",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    import math\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Power_Of_Two(2) == True",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    result = pattern.findall(text)\n    return result\n",
        "test": "assert     find_char_long('Hello World') == [], 'error'",
        "num_ids": 249,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #new_list = []\n    #for i in nums:\n    #    new_list.append(i**2)\n    #return new_list\n    return [num**2 for num in nums]\n",
        "test": "assert     [1, 4, 9] == square_nums([1, 4, 9])",
        "num_ids": 147,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    string=list(str)\n    n=len(string)\n    count=0\n    for i in range(1,n):\n        if(string[i]==string[0]):\n            continue\n        else:\n            j=0\n            while(string[i]!=string[j]):\n                j+=1\n            if(j==i):\n                continue\n            else:\n                count+=1\n    return count\n",
        "test": "assert     find_Rotations('a') == 0",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        s=s.replace(ch, \"\") \n        s=s.replace(ch, \"\") \n    return s\ns = input(\"Enter the string :\")\nch = input(\"Enter the character to remove: \")\nprint(remove_Occ(s, ch)) \n'''\nOutput:\nEnter the string :hello\nEnter the character to remove: e\nhel\n'''\n",
        "test": "assert     remove_Occ('111122', '2') == '11112'",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    total_sum = []\n    for x in M:\n        total_sum.append(sum(x))\n    \n    M.sort(key=lambda x: sum(x))\n    return M\n    \ndef find_zeros(M):\n    '''\n    Write a function to find the zero elements in a given matrix. An element is considered to be zero if it's value is 0.\n    '''\n    zero_elements = []\n    for x in range(len(M)):\n        for y in range(len(M[0])):\n            if M[x][y] == 0:\n                zero_elements.append([x,y])\n    \n    return zero_elements\n",
        "test": "assert     sort_matrix([[1, 2, 3], [3, 4, 5], [9, 8, 7]]) ==     [[1, 2, 3], [3, 4, 5], [9, 8, 7]]",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\n",
        "test": "assert     find_Volume(5,4,3) == 60",
        "num_ids": 169,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('_\\w+_', text))\n",
        "test": "assert     text_lowercase_underscore(\"cat\") == False",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     square_perimeter(3) == 12",
        "num_ids": 95,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = list(string)\n    for i in l:\n        if i in string:\n            l.remove(i)\n    return ''.join(l)\nprint(str_to_list(\"Oops!!!\"))\n",
        "test": "assert str_to_list('acdcb', 'c') == 'acdcb'",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # return bool([item for item in arraynums if arraynums.count(item) > 1])\n    return len(set(arraynums)) < len(arraynums)\n",
        "test": "assert     test_duplicate([1,2,3,1]) == True",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    i = 1\n    while (i ** 2) <= x:\n        if x % i == 0:\n            if (i ** 2 == x):\n                return True\n            return False\n        i += 1\n        \ndef prime_factors(x):\n    '''\n    Write a function that returns all prime factors of the number x.\n    '''\n    prime_factors = []\n    i = 2\n    while i <= x:\n        if x % i == 0:\n            prime_factors.append(i)\n            x = x/i\n        else:\n            i += 1\n    return prime_factors\n",
        "test": "assert     is_woodall(3) == False, f'Failed test for 2'",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # We will be taking reverse of num.\n    reverse_num = 0\n    # Converting a number into a string.\n    str_num = str(num)\n    # The for loop will iterate over the string and will reverse it.\n    for i in range(len(str_num)-1, -1, -1):\n        reverse_num = reverse_num*10 + int(str_num[i])\n    # Now we will multiply the reverse of num by 2 and \n    # convert it into an int.\n    rev_num = int(str(reverse_num*2))\n    # Now we will compare the num with rev_num\n    if num == rev_num:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")\n",
        "test": "assert     rev(101010) == True",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n",
        "test": "assert     find_Max_Num([1,2,3,4,5,6,7,8,9,0]) == 9",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(1,-1) == True, \"opposite_Signs(1,-1) failed\"",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # return n * (3*n - 1) / 2\n    return n * (3*n - 1)\n",
        "test": "assert     is_octagonal(1) == 2",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    total = 0\n    for i in range(0, len(s)):\n        j = i + 1\n        while j <= len(s):\n            sum_s = sum([int(k) for k in s[i:j]])\n            if sum_s == len(s[i:j]):\n                total += 1\n            j += 1\n    return total\n",
        "test": "assert     count_Substrings(\"12345\") == 1",
        "num_ids": 2388,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert     smallest_num([3,2,5,-1,4,5]) == -1",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    tuple_list = sorted(test_list, key=lambda x: x[1])\n    print(tuple_list)\n    maximum = 0\n    for i in range(len(tuple_list)-1):\n        dif = tuple_list[i+1][0] - tuple_list[i][1]\n        if dif >= maximum:\n            maximum = dif\n    return maximum\n",
        "test": "assert     max_difference([(1, 3), (5, 5), (4, 10), (20, 25)]) == 6, 'Wrong result for input [(1, 3), (5, 5), (4, 10), (20, 25)].'",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks, key = lambda x: x[1]))\n",
        "test": "assert     sorted(subject_marks([])) == []",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return_val = 0\n    if not isinstance(data_list, list):\n        return_val = data_list\n    else:\n        for sublist in data_list:\n            if isinstance(sublist, list):\n                return_val += recursive_list_sum(sublist)\n            else:\n                return_val += sublist\n    return return_val",
        "test": "assert     recursive_list_sum([[1, 2, 3], [4, [5, 6]], [7], 8, 9]) == \\",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n",
        "test": "assert     pos_count([1,2,3,4,5]) == 5",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(1, i+1):\n            bell[i] = bell[i] + bell[i-j] * bell[j-1]\n    return bell[n]\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([1,1,2,3,4])== True",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i+len(s)] == s for i in range(len(l)))\n",
        "test": "assert     is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(Input))!= len(Input):\n        return False\n    else:\n        return True\n",
        "test": "assert     find_equal_tuple([(1, 2, 3), (4, 5, 6)])",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n",
        "test": "assert     comb_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if ((x*x+y*y) == n):\n                return True\n    return False\n",
        "test": "assert     dif_Square(36)==True",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    dict={}\n    for i,c in enumerate(colors):\n        dict[c]=i\n",
        "test": "assert     is_samepatterns([(0,1,2), (2,3,4), (0,1,0)], [(0,1,2), (2,3,4), (1,2,0)]) == False",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for sub_tuple in test_list:\n        if all([element % K == 0 for element in sub_tuple]):\n            tuples.append(sub_tuple)\n    return tuples\n",
        "test": "assert     find_tuples([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8)], 4) ==     [(4, 4), (8, 8)]",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    return False\n",
        "test": "assert     is_Diff(11) == True, 'Incorrect'",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "test": "assert     word_len(\"\") == False, \"False\"",
        "num_ids": 154,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # base cases \n    if n < 0: \n        return None \n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1 \n    if n == 2: \n        return 2 \n    if n == 3: \n        return 3 \n    \n    # get the sum of the tetrahedral numbers \n    tetrahedral_sum = 0 \n    for i in range(n): \n        tetrahedral_sum += tetrahedral_number(i) \n    \n    # return the sum \n    return tetrahedral_sum\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n",
        "test": "assert     volume_sphere(1) == 4.0/3*math.pi",
        "num_ids": 181,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\nprint(get_Char(\"hello\"))\n",
        "test": "assert     (get_Char('shanmugam') == 'u')",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 7\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "test": "assert ",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4*pi*(r**2)\n    return surface_area\n",
        "test": "assert     surfacearea_sphere(3) == 113.09733552923255, surfacearea_sphere(3)",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    for i in range(1, n):\n        a = 3*a + 2\n    return a\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        result[key] = value\n    for key, value in dict2.items():\n        result[key] = value\n    for key, value in dict3.items():\n        result[key] = value\n    return result\n",
        "test": "assert ",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict_1 = collections.Counter(list1)\n    return dict_1\n",
        "test": "assert     freq_count([1, 2, 3, 4, 4, 4, 5, 5]) == {1:1, 2:1, 3:1, 4:3, 5:2}",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # get the closest lower integer:\n    closest = N - 1\n    while closest > N/2:\n        closest = closest - 1\n    return closest\n",
        "test": "assert     closest_num(6) == 3, 'closest_num(6) == 3 failed'",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = []\n    for word in list1:\n        len_list.append(len(word))\n    return max(len_list)\n",
        "test": "assert     len_log(['abc', 'def', 'ghi']) == 3",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if(str1[i:i+len(sub_str)] == sub_str):\n            return True\n    return False\n",
        "test": "assert not (find_substring('ab', ['a', 'ab', 'abc']))",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n    \n    \ndef nth_triangle_number(n):\n    '''\n    Write a function to calculate the nth triangle number.\n    '''\n    pass\n    \n    \ndef kaprekar_routine(n):\n    '''\n    Write a function to calculate the Kaprekar routine of a number n.\n    '''\n    pass\n    \n    \ndef kaprekar_numbers(n):\n    '''\n    Write a function to determine the first n Kaprekar numbers.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine(n):\n    '''\n    Write a function to calculate the Kaprekar routine of a number n.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers(n):\n    '''\n    Write a function to determine the first n Kaprekar numbers.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_for_nth_triangle_number(n):\n    '''\n    Write a function to determine the first n Kaprekar numbers for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_for_nth_triangle_number(n):\n    '''\n    Write a function to calculate the Kaprekar routine of a number n for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_for_n_digits(n):\n    '''\n    Write a function to determine the first n Kaprekar numbers for n digits.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_for_n_digits(n):\n    '''\n    Write a function to calculate the Kaprekar routine of a number n for n digits.\n    '''\n    pass\n    \n    \ndef get_nth_triangle_number(n):\n    '''\n    Write a function to calculate the nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_for_n_digits_with_n_terms(n, m):\n    '''\n    Write a function to determine the first n Kaprekar numbers for n digits with n terms.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_for_n_digits_with_n_terms_in_routine(n, m):\n    '''\n    Write a function to calculate the first n Kaprekar numbers for n digits with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_nth_triangle_number_with_n_terms_in_routine(n, m):\n    '''\n    Write a function to calculate the nth triangle number with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_with_n_terms_in_routine(n, m):\n    '''\n    Write a function to calculate the first n Kaprekar numbers with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_nth_triangle_number_with_n_terms_in_routine_for_n_digits(n, m):\n    '''\n    Write a function to calculate the nth triangle number with n terms in routine for n digits.\n    '''\n    pass\n    \n    \ndef get_nth_triangle_number_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine(n, m, n_terms):\n    '''\n    Write a function to calculate the nth triangle number with n terms in routine for n digits with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_with_n_terms_in_routine_for_n_digits(n, m):\n    '''\n    Write a function to calculate the Kaprekar routine with n terms in routine for n digits.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine(n, m, n_terms):\n    '''\n    Write a function to calculate the first n Kaprekar numbers with n terms in routine for n digits with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine(n, m, n_terms):\n    '''\n    Write a function to calculate the Kaprekar routine with n terms in routine for n digits with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number(n, m, n_terms, n_terms_triangle):\n    '''\n    Write a function to calculate the first n Kaprekar numbers with n terms in routine for n digits with n terms in routine for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number(n, m, n_terms, n_terms_triangle):\n    '''\n    Write a function to calculate the Kaprekar routine with n terms in routine for n digits with n terms in routine for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number_with_n_terms_in_routine_for_nth_triangle_number(n, m, n_terms, n_terms_triangle, n_terms_triangle):\n    '''\n    Write a function to calculate the first n Kaprekar numbers with n terms in routine for n digits with n terms in routine for nth triangle number with n terms in routine for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number_with_n_terms_in_routine_for_nth_triangle_number(n, m, n_terms, n_terms_triangle, n_terms_triangle):\n    '''\n    Write a function to calculate the Kaprekar routine with n terms in routine for n digits with n terms in routine for nth triangle number with n terms in routine for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number_with_n_terms_in_routine_for_nth_triangle_number_with_n_terms_in_routine_for_nth_triangle_number(n, m, n_terms, n_terms_triangle, n_terms_triangle, n_terms_triangle):\n    '''\n    Write a function to calculate the first n Kaprekar numbers with n terms in routine for n digits with n terms in routine for nth triangle number with n terms in routine for nth triangle number with n terms in routine for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number_with_n_terms_in_routine_for_nth_triangle_number_with_n_terms_in_routine_for_nth_triangle_number(n, m, n_terms, n_terms_triangle, n_terms_triangle, n_terms_triangle):\n    '''\n    Write a function to calculate the Kapr",
        "test": "assert     is_undulating(3) == False",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a*power(a, b-1)\n    else:\n        return 1/power(a, -b)\n",
        "test": "assert     power(2, 3) == 8, 'power(2,3) is {}'.format(power(2, 3))",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert     index_minimum([(1, 2), (3, 2), (3, 1)]) == 3, 'index_minimum failed'",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < smallest_length:\n            smallest_length = len(lst[i])\n    return smallest_length\n",
        "test": "assert     Find_Min_Length([[1,2,3,4], [1,2,3,4,5], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]]) == 4, 'error'",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    a=math.floor(math.sqrt(n))\n    count=0\n    for i in range(1,a+1):\n        if n%i==0:\n            count+=1\n    return count*2\n",
        "test": "assert     divisor(2) == 2",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for elem in list1:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    return counts\n",
        "test": "assert ",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for i in numbers:\n        num *= i\n    return int(num/len(numbers))\n",
        "test": "assert ",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<=0:\n        return \"0\"\n    else:\n        res=\"\"\n        while n>0:\n            res=str(n%2)+res\n            n=n//2\n        return res\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    num_str = str(num)\n    for i in range(len(num_str)):\n        if (len(num_str)%2 == 0):\n            # even number of digits\n            # check if the middle digit is the biggest/smallest digit\n            if (num_str[i]!= num_str[(i+len(num_str)//2)%len(num_str)]):\n                # if not, then the middle digit should be the next smallest/largest digit\n                if (num_str[i] > num_str[(i+len(num_str)//2)%len(num_str)]):\n                    return int(num_str[:(i+len(num_str)//2)+1] + num_str[i] + num_str[:(i+len(num_str)//2)+1][::-1])\n                elif (num_str[i] < num_str[(i+len(num_str)//2)%len(num_str)]):\n                    return int(num_str[:i+1] + num_str[i] + num_str[:i+1][::-1])\n            else:\n                # if the middle digit is the biggest/smallest digit, then the next smallest/largest digit is the digit before or after it\n                if (num_str[i] == num_str[(i+len(num_str)//2)%len(num_str)]):\n                    if (i == 0):\n                        return int(num_str + num_str[i+1:])\n                    elif (i == len(num_str)-1):\n                        return int(num_str[:(i-1)] + num_str[i])\n                    else:\n                        if (num_str[i+1] > num_str[i-1]):\n                            return int(num_str[:i] + num_str[i+1] + num_str[i:])\n                        elif (num_str[i+1] < num_str[i-1]):\n                            return int(num_str[:i] + num_str[i] + num_str[i+1:])\n                else:\n                    if (num_str[i] > num_str[(i+len(num_str)//2)%len(num_str)]):\n                        return int(num_str[:(i+len(num_str)//2)] + num_str[i+1] + num_str[:(i+len(num_str)//2)][::-1])\n                    elif (num_str[i] < num_str[(i+len(num_str)//2)%len(num_str)]):\n                        return int(num_str[:i+1] + num_str[i] + num_str[:i+1][::-1])\n        else:\n            # odd number of digits\n            # if middle digit is not the biggest/smallest digit, then the middle digit should be the next smallest/largest digit\n            if (num_str[i]!= num_str[(i+len(num_str)//2)%len(num_str)]):\n                if (num_str[i] > num_str[(i+len(num_str)//2)%len(num_str)]):\n                    return int(num_str[:(i+len(num_str)//2)+1] + num_str[i] + num_str[:(i+len(num_str)//2)+1][::-1])\n                elif (num_str[i] < num_str[(i+len(num_str)//2)%len(num_str)]):\n                    return int(num_str[:i+1] + num_str[i] + num_str[:i+1][::-1])\n            else:\n                if (num_str[i] == num_str[(i+len(num_str)//2)%len(num_str)]):\n                    if (i == 0):\n                        return int(num_str + num_str[i+1:])\n                    elif (i == len(num_str)-1):\n                        return int(num_str[:(i-1)] + num_str[i])\n                    else:\n                        if (num_str[i+1] > num_str[i-1]):\n                            return int(num_str[:i] + num_str[i+1] + num_str[i:])\n                        elif (num_str[i+1] < num_str[i-1]):\n                            return int(num_str[:i] + num_str[i] + num_str[i+1:])\n",
        "test": "assert ",
        "num_ids": 1374,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n",
        "test": "assert     kth_element([1, 2, 3, 4, 5], 2) == 2",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join([word.title() for word in word.split('_')])\n",
        "test": "assert ",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n**m\n",
        "test": "assert     eulerian_num(0, 0) == 1",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted([sorted(sublist) for sublist in input_list])\n",
        "test": "assert     sort_sublists([['a', 'd'], ['b', 'c']]) == [['a', 'd'], ['b', 'c']]",
        "num_ids": 164,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i==True])\n",
        "test": "assert     count([False, False, False, False, False]) == 0",
        "num_ids": 89,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + list(test_tup)\n",
        "test": "assert     add_lists([1,2,3], (4,5,6)) == [1,2,3,4,5,6], \"Fails\"",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result=[]\n    result+=num1\n    result+=num2\n    result+=num3\n    result=sorted(result)\n    return result\n",
        "test": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i=0\n    for x in s:\n        if i==0:\n            if x=='1':\n                n=n%2\n            else:\n                n=n%2+1\n        else:\n            if x=='1':\n                n=n%2\n            else:\n                n=n%2+1\n        i=i+1\n    return n\n",
        "test": "assert     odd_Equivalent(\"101\", 2) == 1, \"error\"",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common(lst1, lst2):\n        return list(set(lst1) & set(lst2))\n    \n    return [common(lst1, lst2) for lst1 in nestedlist for lst2 in nestedlist if len(lst1)==len(lst2) and lst1!=lst2]\n",
        "test": "assert     common_in_nested_lists([[1, 2, 3, 4], [2, 3, 4], [3, 4]]) == [], \"Check common_in_nested_lists2\"",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    # Number will be positive or negative\n    # Can contain leading zeros\n    # Floats will be rejected\n    # Case insensitive\n    \n    try:\n        # Attempt to convert the string into an int\n        int(text)\n        return True\n    except ValueError:\n        return False\n        \ndef palindrome(text):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    \n    # Palindrome\n    # Starts with the last char\n    # Ends with the first char\n    # All other chars must be the same\n    \n    # Remove all non alphanumerics\n    for char in text:\n        if char.isalnum() == False:\n            text = text.replace(char, '')\n            \n    if text == text[::-1]:\n        return True\n    else:\n        return False\n        \ndef check_vowels(text):\n    '''\n    Write a function to check how many vowels are in a string.\n    '''\n    \n    # Count the number of vowels\n    # All the vowels must be in lower case\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for char in text.lower():\n        if char in vowels:\n            count += 1\n            \n    return count\n    \ndef unique(text):\n    '''\n    Write a function to check if all the characters in a string is unique.\n    '''\n    \n    # Unique\n    # No two chars can be the same\n    # Does not allow space\n    \n    chars = {}\n    \n    for char in text:\n        if char not in chars and char!='':\n            chars[char] = 1\n        elif char in chars:\n            return False\n    return True\n    \ndef check_pwd(text):\n    '''\n    Write a function to check if a string is a valid password or not.\n    '''\n    \n    # Password\n    # Must be between 6 and 20 chars\n    # Must contain at least one uppercase\n    # Must contain at least one lowercase\n    # Must contain at least one digit\n    # Must contain at least one special character\n    \n    special_chars = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '~', '`', '|', ';', ':', '\"', \"'\", '[', ']', '{', '}', ',', '<', '.', '>', '?', '/']\n    \n    if len(text) < 6 or len(text) > 20:\n        return False\n        \n    chars = []\n    for char in text:\n        if char.isalnum() == False:\n            return False\n        else:\n            chars.append(char)\n            \n    upper_count = 0\n    lower_count = 0\n    digit_count = 0\n    special_count = 0\n    \n    for char in chars:\n        if char.isupper():\n            upper_count += 1\n        elif char.islower():\n            lower_count += 1\n        elif char.isdigit():\n            digit_count += 1\n            \n    for char in special_chars:\n        if char in chars:\n            special_count += 1\n            \n    if upper_count > 0 and lower_count > 0 and digit_count > 0 and special_count > 0:\n        return True\n    else:\n        return False\n    \ndef check_md5(text):\n    '''\n    Write a function to check if a string is a valid md5 hash or not.\n    '''\n    \n    # Hash\n    # 32 chars\n    # Must contain only [a-f] and [0-9]\n    \n    chars = []\n    \n    for char in text:\n        if char.isalnum():\n            chars.append(char)\n    \n    if len(chars)!= 32:\n        return False\n        \n    for char in chars:\n        if char not in 'abcdef0123456789':\n            return False\n    \n    return True\n    \ndef check_sha1(text):\n    '''\n    Write a function to check if a string is a valid sha1 hash or not.\n    '''\n    \n    # Hash\n    # 40 chars\n    # Must contain only [a-f] and [0-9]\n    \n    chars = []\n    \n    for char in text:\n        if char.isalnum():\n            chars.append(char)\n            \n    if len(chars)!= 40:\n        return False\n        \n    for char in chars:\n        if char not in 'abcdef0123456789':\n            return False\n            \n    return True\n    \ndef check_sha256(text):\n    '''\n    Write a function to check if a string is a valid sha256 hash or not.\n    '''\n    \n    # Hash\n    # 64 chars\n    # Must contain only [a-f] and [0-9]\n    \n    chars = []\n    \n    for char in text:\n        if char.isalnum():\n            chars.append(char)\n            \n    if len(chars)!= 64:\n        return False\n        \n    for char in chars:\n        if char not in 'abcdef0123456789':\n            return False\n    \n    return True\n",
        "test": "assert     check_integer('123')     == True ",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #write your code here\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if len(i)!= 0:\n                return False\n    return True\n",
        "test": "assert     empty_dit([{},{}])",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(n) for n in nums))\n",
        "test": "assert     tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_float = []\n    for i in test_list:\n        list_float.append(float(i))\n    return list_float\n",
        "test": "assert     list_to_float([[1], [2], [3], ['a']]) == [[1.0], [2.0], [3.0], [1.0]], \"Test 2 failed\"",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "test": "assert     string_to_list(\"hello\") == ['hello']",
        "num_ids": 69,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left, right = 0, len(arr)-1\n",
        "test": "assert ",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for tup in list1:\n        if tup[0]*tup[1] > max_product:\n            max_product = tup[0]*tup[1]\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2),(3,4),(1,2),(3,4)]) ==         12",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef complex_formatting(a,b):\n    '''\n    Write a function to format a complex number like this:\n    (x,y) ==> x+yi (positive i imaginary)\n    '''\n    return '({},{})'.format(a,b)\n",
        "test": "assert     cmath.phase(1+1j)==    angle_complex(1,1), 'The angle of 1+1j is: '+str(cmath.phase(1+1j))",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0: return 0\n    maxlen = 0\n    count = 0\n    for i in string:\n        if i == '1': count += 1\n        else: count = 0\n        if count > maxlen: maxlen = count\n    return maxlen\n",
        "test": "assert     find_length('01110') == 3, find_length('01110')",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    res=0\n    while a>0:\n        a,b=b%a,a\n    return b\ndef add(a,b):\n    '''\n    Write a python function to add two numbers without using the '+' operator.\n    '''\n    return a^b\ndef multiply(a,b):\n    '''\n    Write a python function to multiply two numbers without using the '*' operator.\n    '''\n    res=0\n    while b>0:\n        res+=a\n        b-=1\n    return res\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a number without using the math.factorial() function.\n    '''\n    res=1\n    for i in range(n,1,-1):\n        res=res*i\n    return res\ndef fibonacci(n):\n    '''\n    Write a python function to calculate the fibonacci sequence to n number without using the 'fibonacci' function of the math module.\n    '''\n    a=0\n    b=1\n    for i in range(n):\n        a,b=b,a+b\n    return a\ndef exp(a,b):\n    '''\n    Write a python function to calculate the exponent without using the 'exp' operator.\n    '''\n    res=1\n    for i in range(b):\n        res*=a\n    return res\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor without using the 'gcd' function of the math module.\n    '''\n    while b>0:\n        a,b=b,a%b\n    return a\ndef isPrime(n):\n    '''\n    Write a python function to check if a number is prime without using the 'isPrime' function of the math module.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef getPrimes(n):\n    '''\n    Write a python function to print the prime numbers up to n.\n    '''\n    prime=[True]*(n+1)\n    for i in range(2,int(math.sqrt(n))+1):\n        if prime[i]:\n            for j in range(i*i,n+1,i):\n                prime[j]=False\n    for i in range(2,n+1):\n        if prime[i]:\n            print(i)\ndef decimalToBinary(n):\n    '''\n    Write a python function to convert a decimal number to binary.\n    '''\n    binary=\"\"\n    while n>=1:\n        binary=str(n%2)+binary\n        n=n//2\n    return binary\ndef binaryToDecimal(n):\n    '''\n    Write a python function to convert a binary number to decimal.\n    '''\n    return int(n,2)\ndef decimalToOctal(n):\n    '''\n    Write a python function to convert a decimal number to octal.\n    '''\n    octal=\"\"\n    while n>=1:\n        octal=str(n%8)+octal\n        n=n//8\n    return octal\ndef octalToDecimal(n):\n    '''\n    Write a python function to convert a octal number to decimal.\n    '''\n    return int(n,8)\ndef decimalToHexadecimal(n):\n    '''\n    Write a python function to convert a decimal number to hexadecimal.\n    '''\n    hexa=['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n    res=\"0x\"\n    while n>=16:\n        res+=hexa[n%16]\n        n=n//16\n    return res+hexa[n]\ndef hexadecimalToDecimal(n):\n    '''\n    Write a python function to convert a hexadecimal number to decimal.\n    '''\n    res=0\n    n=n[2:]\n    for i in range(len(n)):\n        res=res*16+hexa.index(n[i])\n    return res\ndef numberToWords(n):\n    '''\n    Write a python function to convert a number into words.\n    '''\n    units=['','one','two','three','four','five','six','seven','eight','nine']\n    tens=['','','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety']\n    res=\"\"\n    if n//10000000==1:\n        res+='billion'\n        n-=10000000\n    if n//1000000==1:\n        res+='million'\n        n-=1000000\n    if n//1000==1:\n        res+='thousand'\n        n-=1000\n    if n>=100:\n        res+=units[n//100]\n        n-=n//100*100\n    if n>=20:\n        res+=tens[(n//10)-2]\n        n-=n//10*10\n    if n>0 and n<=19:\n        res+=units[n]\n    return res\ndef sumOfSquaresOfDigits(n):\n    '''\n    Write a python function to get the sum of squares of digits of a given number.\n    '''\n    return sum([int(i)**2 for i in str(n)])\ndef isArmstrong(n):\n    '''\n    Write a python function to check if a number is armstrong.\n    '''\n    res=0\n    for i in str(n):\n        res+=int(i)**3\n    return res==n\ndef isPalindrome(n):\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    return str(n)==str(n)[::-1]\ndef isFibonacci(n):\n    '''\n    Write a python function to check if a number is fibonacci.\n    '''\n    a,b=0,1\n    while b<n:\n        a,b=b,a+b\n    return a==n\ndef printPairs(l,n):\n    '''\n    Write a python function to print all pairs of elements whose sum is equal to a given number.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]+l[j]==n:\n                print(l[i],l[j])\ndef printTriplets(l,n):\n    '''\n    Write a python function to print all triplets of elements whose sum is equal to a given number.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1,len(l)):\n                if l[i]+l[j]+l[k]==n:\n                    print(l[i],l[j],l[k])\ndef printTriplets(l,n):\n    '''\n    Write a python function to print all triplets of elements whose sum is equal to a given number.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1,len(l)):\n                if l[i]+l[j]+l[k]==n:\n                    print(l[i],l[j],l[k])\ndef printTriplets(l,n):\n    '''\n    Write a python function to print all triplets of elements whose sum is equal to a given number.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1,len(l)):\n                if l[i]+l[j]+l[k]==n:\n                    print(l[i],l[j],l[k])\ndef printTriplets(l,n):\n    '''\n    Write a python function to print all triplets of elements whose sum is equal to a given number.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(",
        "test": "assert ",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(2, 3) == 6, \"multiply_int(2, 3) == 6 failed\"",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(\" \") if len(word) > n]\n",
        "test": "assert ",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = 0\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n",
        "test": "assert ",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    max_freq = max(d.values())\n    result = []\n    for k, v in d.items():\n        if v == max_freq:\n            result.append(k)\n    return result\n",
        "test": "assert     max_occurrences([3,9,4,5,3,6,2]) == [3]",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"AEIOUaeiou\"\n    str1 = list(str1)\n    i,j = 0, len(str1)-1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n",
        "test": "assert     reverse_vowels(\"Hello\") == \"Holle\"",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(tup1)\n",
        "test": "assert ",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = sum(x for x in nums if x < 0)\n    return result\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert     hexagonal_num(0) == 0, \"wrong\"",
        "num_ids": 129,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n",
        "test": "assert     zero_count([0, 0, 0, 0, 0]) == 0.0",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_n=0\n    while(n!=0):\n        if n%2==1:\n            sum_n=sum_n+1\n        n=n/2\n    if sum_n==1:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(32) == True, \"Wrong\"",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(3) == 18.84955592153876",
        "num_ids": 131,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result += extract_singly(item)\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert     extract_singly([[1], [2], [3], [4], [5]]) == [1, 2, 3, 4, 5], \"Test Failed\"",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(i, j, nums):\n        #flip i<-j\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n    n = len(nums)\n    cur = n - 1 #current position\n    while cur > 0:\n        i = cur #first element in the current slice\n        while i >= 0:\n            if nums[i] > nums[cur]:\n                #flip i and cur\n                flip(i, cur, nums)\n                #now flip the whole slice\n                flip(0, cur, nums)\n                #now cur is at the right position\n                return cur + 1\n            i -= 1\n        cur -= 1\n    return 0\n",
        "test": "assert ",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            samepair += 1\n    return samepair\n",
        "test": "assert     count_samepair([1,2,1,3,2,1], [1,2,1,3,2,1], [1,3,2,1,3,2]) == 6, 'error2'",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for x in Input:\n        if type(x) == type([]):\n            lists.append(x)\n    print(lists)\n    print(\"Total number of lists are:\", len(lists))\n    return len(lists)\n",
        "test": "assert     find_lists([])         == 0",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(i-j) for i,j in zip(arr,arr[1:]))\n",
        "test": "assert     max_Abs_Diff([7, 5, 12, 3]) ==     9, 'Wrong output'",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n):\n        for y in range(0, n):\n            if (a * x + b * y) == n:\n                return (x, y)\n",
        "test": "assert     find_solution(1, 1, 1) == None",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n",
        "test": "assert     remove_elements([1, 2, 3, 4], [1, 2]) == [3, 4]",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([(n - 2 * i) for i in range(n // 2 + 1)])\n",
        "test": "assert     sum_series(2) == 2, \"check the first example in the instructions\"",
        "num_ids": 185,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # Unpack the arguments.\n    n = l\n    side = s\n",
        "test": "assert     area_polygon(4, 4) == 16, 'wrong area'",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #Prime number is a number that is only divisible by itself and 1.\n    #E.G. if the input was 13, the output would be False because 13 is not a prime number\n    if n % 2 == 0:\n        return False\n    else:\n        sum = 1\n        for i in range(1, (n//2) + 1): \n            if (n % i == 0): \n                sum = sum + i \n        return sum\n",
        "test": "assert     div_sum(12) == False",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([x for x in list(str1) if x.lower() == x])\n",
        "test": "assert     count_char_position('abc') == 'a=1, b=1, c=1'",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_sum = 0\n    for i in A:\n        xor_sum = xor_sum ^ i\n    xor_sum = xor_sum & -xor_sum\n    count = 0\n    for i in range(0, len(A)):\n        if xor_sum ^ A[i] == 0:\n            count += 1\n    return count\n",
        "test": "assert     find_even_pair([0,1,2,3,4]) == 1",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while 2**i < n:\n        i+=1\n    return 2**i\n",
        "test": "assert     next_power_of_2(8) == 8, \"next_power_of_2 should return the smallest power of 2 greater than or equal to 8\"",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a:\n        if i == x: \n            count = count + 1\n    return count\n",
        "test": "assert     frequency([1, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 9], 1) == 1",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return 0\n    elif m < n:\n        return list1[m] + sum_range_list(list1, m+1, n)\n    else:\n        return sum_range_list(list1, m, n-1)\n",
        "test": "assert     sum_range_list([1,2,3,4,5,6,7,8,9,10], 0, 10) == 55, \"Test failed\"",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    result = 5 * a\n    return result\n",
        "test": "assert     perimeter_pentagon(1) == 5.0, \"Wrong answer: perimeter_pentagon(1)=\"+str(perimeter_pentagon(1))",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance(\"std\") == 1, 'Wrong answer'",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    lst = []\n    for i in test_tuple:\n        if not isinstance(i, tuple):\n            lst.append(str(i))\n    if len(lst) == 0:\n        return True\n    return False\n    \ndef check_length(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same length or not.\n    '''\n    lst = []\n    for i in test_tuple:\n        if not isinstance(i, tuple):\n            lst.append(str(i))\n    if len(lst) == 0:\n        return True\n    return False\n",
        "test": "assert     check_type(('a', 1, 2.0, False)) == False",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n % 2 == 0:\n        return arr[n//2] == x\n    else:\n        return arr[n//2 + 1] == x\n",
        "test": "assert     is_majority([1,2,2,3,4,4,4,5],     len([1,2,2,3,4,4,4,5]),     4) == True",
        "num_ids": 2164,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "test": "assert     count_Set_Bits(0) == 0, \"Test case 1 failed.\"",
        "num_ids": 172,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            lst.append(str[i])\n    return \"\".join(lst)\n",
        "test": "assert     odd_values_string('') == ''",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return(a)\n        else:\n            return(c)\n    else:\n        if a < c:\n            return(b)\n        else:\n            return(c)\n",
        "test": "assert     min_of_three(4,8,12) == 4",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # code here\n    count = 0\n    for i in range(2**n):\n        for j in range(n):\n            if (i & (2**j)) == (2**j):\n                count = count + 1\n    \n    if l <= count and count <= r:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(0,0,4) == True, \"Test2\"",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize indexes of the beginning and end of the partition\n    start = 0\n    end = len(arr) - 1\n    # loop through the entire array\n    while start <= end:\n        # if the current element is negative\n        if arr[start] < 0:\n            # swap it with the first positive element\n            arr[start], arr[end] = arr[end], arr[start]\n            # move the start index to the next element\n            start += 1\n            # swap the current element with the end index element\n        end -= 1\n    return arr\n",
        "test": "assert ",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"%\")\n    return str1\n",
        "test": "assert     replace_blank(\"hello\",'') == \"hello\"",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result = []\n    for i in range(n):\n        result.append(max(list1))\n        list1.remove(max(list1))\n    return result\n",
        "test": "assert     larg_nnum([1, 2, 3, 4, 5], 2) == [5, 4]",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    side_area = 2*math.pi*r*h\n    return side_area\n",
        "test": "assert     lateralsuface_cylinder(2,5)==(20*2+2*math.pi*r**2*h), \"The lateral surface area of a cylinder is incorrect.\"",
        "num_ids": 279,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return round(l**3, 2)\n",
        "test": "assert     volume_cube(3) == 27, 'Volume of cube is wrong'",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return ((n & ~(1 << 0)) | (1 << 0))\n",
        "test": "assert     even_bit_set_number(4)     ==    4",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for item in test_list:\n        if item in test_dict:\n            test_dict[item] += 1\n        else:\n            test_dict[item] = 1\n    return test_dict\n",
        "test": "assert     check_occurences([(1, 2, 3), (1, 2, 3), (1, 2, 3)]) == {(1, 2, 3): 3}",
        "num_ids": 2359,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    i = 0\n    for j in range(len(str)):\n        for k in range(j, len(str)):\n            if(str[j:k+1]!= '' and str[j:k+1].isspace() == False):\n                count += 1\n    return count\n",
        "test": "assert     number_of_substrings('a') == 1",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    elif n == 2:\n        return m * (m+1) / 2\n    else:\n        return m * (m+1) / 2 - get_total_number_of_sequences(m,n-1)\n",
        "test": "assert     get_total_number_of_sequences(4,1) == 4, \"should be 4\"",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n",
        "test": "assert     replace_list([], [5,6]) == [5,6]",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac('abc') == 3, 'error'",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    ##Your code here\n    ##You can check the input is a positive integer.\n    if(isinstance(N,int)==False or N<1):\n        return -1\n    i=0\n    while(True):\n        i=i+1\n        x=i*i\n        if(x>N):\n            return x\n    \ndef nth_Perfect_Square(N): \n    '''\n    Write a python function to find the Nth perfect square greater than a given number.\n    '''\n    ##Your code here\n    ##You can check the input is a positive integer.\n    if(isinstance(N,int)==False or N<1):\n        return -1\n    i=0\n    while(True):\n        i=i+1\n        x=i*i\n        if(x>N):\n            return i\n        \ndef is_Perfect_Square(N): \n    '''\n    Write a python function to check if a given number is a perfect square. \n    '''\n    ##Your code here\n    ##You can check the input is a positive integer.\n    if(isinstance(N,int)==False or N<1):\n        return -1\n    x=math.sqrt(N)\n    if x-int(x) == 0:\n        return True\n    return False\n",
        "test": "assert     next_Perfect_Square(121) == 144 ",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr = sorted(arr)\n    i = 0\n    max_sum = arr[0] + arr[1]\n    while i <= (len(arr) - 1):\n        if i == len(arr) - 1:\n            max_sum = max(max_sum, arr[i])\n        else:\n            if arr[i] + arr[i + 1] > arr[i] + arr[i + 1]:\n                max_sum = max(max_sum, arr[i] + arr[i + 1])\n            else:\n                max_sum = max(max_sum, arr[i] + arr[i + 1] + arr[i + 2])\n        i += 1\n    return max_sum\n",
        "test": "assert     max_sum([10, -5, 1, 4, 8, 12]) ==     21",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approximation = number\n    while True:\n        better = (approximation + number / approximation) / 2\n        if better == approximation:\n            return better\n        approximation = better\n",
        "test": "assert     babylonian_squareroot(4) == 2",
        "num_ids": 1001,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    table = [[0 for x in range(n)] for x in range(n)] \n    length = 1\n    for i in range(n): \n        table[i][i] = 1\n    for startIndex in range(n-1, -1, -1): \n        for endIndex in range(startIndex + 1, n): \n            if str[startIndex] == str[endIndex]: \n                if endIndex - startIndex == 1 or table[startIndex + 1][endIndex - 1] == 1: \n                    table[startIndex][endIndex] = 1\n                    if length < endIndex - startIndex + 1: \n                        length = endIndex - startIndex + 1\n            else: \n                table[startIndex][endIndex] = 0\n    return length \n",
        "test": "assert     lps('cbbd') == 2, 'lps(\"cbbd\") == 2'",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1/n + harmonic_sum(n-1)\n    return sum\n",
        "test": "assert ",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for x in array_nums1:\n        if x in array_nums2 and x not in intersection:\n            intersection.append(x)\n    return intersection\n",
        "test": "assert     intersection_array([4,9,5], [9,4,9,8,4]) == [4,9], 'incorrect'",
        "num_ids": 2279,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occur_count = 0\n    for i in tup:\n        if i == x:\n            occur_count += 1\n    return occur_count\n",
        "test": "assert     count_X((1,2,3,4,4,2,1,3,1), 2) == 2",
        "num_ids": 279,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "test": "assert     insert_element(['a', 'b', 'c'], 'd') == ['d', 'a', 'b', 'c']",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def complex_to_polar(complex_number):\n        '''\n        Return the polar coordinates of the complex number.\n        '''\n        r = float(complex_number.real)\n        i = complex_number.imag\n        if r >= 0:\n            if i >= 0:\n                return (r, i)\n            else:\n                return (r, cmath.pi * 2 - i)\n        else:\n            if i >= 0:\n                return (r, -i)\n            else:\n                return (r, cmath.pi * 2 - i)\n",
        "test": "assert     convert([1+1j, 0+2j, 1+1j])     ==    [(1.414213562373095+0.785398163397448j), (1.5707963267948966+1.5707963267948966j), (1.5707963267948966+0.785398163397448j)]",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([e for e in list1 if isinstance(e, int)])\n",
        "test": "assert     count_integer([1, 2, 3, 4, 5, 6, 7]) == 7, \"Test 1 Failed\"",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_com = list(combinations_with_replacement(l, n))\n    return list_com\n",
        "test": "assert     combinations_colors([\"a\",\"b\",\"c\",\"d\",\"e\"],2) == [(\"a\",\"a\"), (\"a\",\"b\"), (\"a\",\"c\"), (\"a\",\"d\"), (\"a\",\"e\"), (\"b\",\"b\"), (\"b\",\"c\"), (\"b\",\"d\"), (\"b\",\"e\"), (\"c\",\"c\"), (\"c\",\"d\"), (\"c\",\"e\"), (\"d\",\"d\"), (\"d\",\"e\"), (\"e\",\"e\")]",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<2:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return count_Primes_nums(n-1)-count_Primes_nums(n-2)\n",
        "test": "assert     count_Primes_nums(1) == 0, \"Error in count_Primes_nums(1)\"",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "test": "assert     swap_numbers(1, 2) == (2, 1)",
        "num_ids": 70,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    result = ()\n    \n    if test_tup1[0] > test_tup2[0]:\n        result = test_tup1\n    else:\n        result = test_tup2\n    \n    return result\n    \ndef test_maximize_elements():\n    assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\n    assert maximize_elements((6, 5, 4), (1, 2, 3)) == (6, 5, 4)\n    assert maximize_elements((4, 5, 6), (1, 2, 3)) == (4, 5, 6)\n    \ntest_maximize_elements()\n",
        "test": "assert     maximize_elements((1,2,3),(1,2,4)) == (1,2,4), \"Not working\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n == 1):\n        return 2\n    elif (n == 2):\n        return 3\n    elif (n == 3):\n        return 5\n    elif (n == 4):\n        return 7\n    elif (n == 5):\n        return 11\n    elif (n == 6):\n        return 13\n    else:\n        return next_prime(newman_prime(n-1))\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TO-DO: Complete the division function\n",
        "test": "assert     division_elements(tuple1 = (1,2,3,4,5), tuple2 = (1,1,1,1,1)) == (0.2, 0.4, 0.6, 0.8, 1.0), \\",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 3) == ([1, 2, 3], [4, 5, 6, 7])",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #dog age = dog years * 7, human age = human years * 10\n    age_in_dog_years = h_age * 7\n    return age_in_dog_years\n    #return h_age * 10\nprint(\"\\nHello and welcome to the dog age calculator. Please enter in the following...\\n\")\n",
        "test": "assert ",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     list_split([1,2,3,4,5,6], 2) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 2209,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n",
        "test": "assert     lateralsurface_cube(1)     == 6, \"Test 1 failed\"",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your code here\n    return sum([i*i for i in range(1, n+1, 2)])\n",
        "test": "assert     square_Sum(1) == 1, \"Incorrect\"",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = [0]*n\n    star[0] = 1\n    for i in range(1, n):\n        temp = [1]\n        for j in range(1, i):\n            temp.append(star[j-1]+star[j])\n        temp.append(1)\n        star = temp\n    return star[n-1]\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value(chr(0x41)) == ascii_value('A') == 0x41",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    if len(arr) == 0:\n        return 0\n    else:\n        for i in arr:\n            if arr.index(i) % 2 == 0:\n                if i % 2 == 0:\n                    sum_even = sum_even + i\n                else:\n                    pass\n            else:\n                pass\n        return sum_even\n",
        "test": "assert     sum_even_and_even_index([-1,-2,-3,-4,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 40",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans += i**5\n    return ans\n",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for x in test_list:\n        rear_list.append(x[1])\n    return rear_list\n    ",
        "test": "assert     rear_extract([(1, 2), (2, 3), (3, 2), (4, 5), (5, 6), (7, 2)]) == [2, 3, 2, 5, 6, 2]",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n",
        "test": "assert     substract_elements((5, 6, 7), (1, 2, 3)) == (4, 5, 5)",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return 0\n    ans = [0]*(n+1)\n    ans[0] = 0\n    ans[1] = 1\n    for i in range(2, n+1):\n        ans[i] = ans[i-1] + ans[i-2]\n    return sum([ans[i] for i in range(0, n, 2)])\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0, \"Input is 0\"",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265\n    v = (pi * r**2 * h)\n    return v\n    \nprint(volume_cylinder(4,5))\n",
        "test": "assert     volume_cylinder(0,2) == 0, \"Incorrect\"",
        "num_ids": 229,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    res = {}\n    for key in dict:\n        if dict[key] >= n:\n            res[key] = dict[key]\n    return res\n",
        "test": "assert     dict_filter({1:2,3:4,5:6,7:8}, 2) == {1:2,5:6}",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(1)\n",
        "test": "assert     count_first_elements((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) == {1: 0, 2: 12, 3: 24, 4: 36, 5: 48, 6: 60, 7: 72, 8: 84, 9: 96, 10: 108, 11: 120}",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n+1) * n // 2\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    found = False\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    if found:\n        return (found, pos)\n    else:\n        return (found, pos)\n",
        "test": "assert     sequential_search([1,2,3,4,5], 1) == (True, 0), \"sequential_search returns wrong tuple\"",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "test": "assert     all_unique([1,1,1,2,3,2,3]) == False",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sum_list=[]\n    for i in range(len(nums1)):\n        sum_list.append(nums1[i]-nums2[i])\n    return sum_list\n",
        "test": "assert ",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1:\n        return True\n    freq = {}\n    for i in str(n):\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] > int(i):\n            return False\n    return True\n",
        "test": "assert     validate(1234) == True",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check = False\n    for x in list:\n        if x == element:\n            check = True\n    return check\n",
        "test": "assert     check_element([1, 1, 1, 1], 1) == True",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    string = re.compile(r'\\b[ab]{2,3}a\\b')\n    matches = string.findall(text)\n    if len(matches)>0:\n        return(True)\n    else:\n        return(False)\n",
        "test": "assert     text_match_two_three(\"abbc\") == False, \"WRONG\"",
        "num_ids": 2203,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    temp = 0\n    for i in range(k):\n        for j in range(n):\n            temp += a[j]\n        max_sum = max(temp, max_sum)\n        temp = 0\n    for i in range(n):\n        temp += a[i]\n    max_sum = max(temp, max_sum)\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([1,2,3,4], 4, 1) == 10",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum\n",
        "test": "assert     square_Sum(10) == 385",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max_len:\n            max_list = i\n            max_len = len(i)\n    print(\"Maximum length is: {}\".format(max_len))\n    return max_list\n",
        "test": "assert     max_length([[1,2,3], [4,5,6]]) == [1,2,3]",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1:\n        return k\n    if n==2:\n        return k**2\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n    dp[1][0] = 1\n    dp[2][0] = 1\n    dp[2][1] = 2\n    for i in range(3, n+1):\n        for j in range(k):\n            if j==0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j-1]+dp[i-1][j]\n    return dp[-1][-1]\n",
        "test": "assert     count_no_of_ways(2,2) == 3",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        if (n>m):\n            q=n/m\n            return round(q)\n        else:\n            q=m/n\n            return round(q)\n    except ZeroDivisionError:\n        return \"Error\"\n",
        "test": "assert     find(4,8) == 2, 'Test 1 failed'",
        "num_ids": 218,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "test": "assert     math.isclose(otherside_rightangle(1,1), math.sqrt(2))",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return max(listval)\n    \n    \ndef remove_values_from_list(listval, val):\n    '''\n    Write a function to remove a particular value from a list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval.remove(val)\n    \n    \ndef return_head(listval):\n    '''\n    Write a function to return the first element of a given list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval[0]\n    \n    \ndef last_element(listval):\n    '''\n    Write a function to return the last element of a given list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval[-1]\n    \n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return min(listval)\n    \n    \ndef reverse_list(listval):\n    '''\n    Write a function to reverse a given list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval[::-1]\n    \n    \ndef check_anagram(string1, string2):\n    '''\n    Write a function to check if two given strings are anagrams or not.\n    '''\n    print(\"The two strings are : \")\n    print(string1, string2)\n    return sorted(string1) == sorted(string2)\n    \n    \ndef return_count(listval, val):\n    '''\n    Write a function to return the number of occurrences of a particular value in a list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval.count(val)\n    \n    \ndef check_pallindrome(string1):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    print(\"The string is : \")\n    print(string1)\n    return string1 == string1[::-1]\n    \n    \ndef return_index(listval, val):\n    '''\n    Write a function to return the index of the first occurrence of a particular value in a list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval.index(val)\n    \n    \ndef return_slice(listval, start, end):\n    '''\n    Write a function to return the sublist of a given list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval[start:end]\n    \n    \ndef check_membership(listval, val):\n    '''\n    Write a function to check if a given value is a member of a given list or not.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return val in listval\n    \n    \ndef common_elements(listval1, listval2):\n    '''\n    Write a function to return a list that contains only the common elements of two given lists.\n    '''\n    print(\"The first list val is : \")\n    print(listval1)\n    print(\"The second list val is : \")\n    print(listval2)\n    listval1.sort()\n    listval2.sort()\n    for num1, num2 in zip(listval1, listval2):\n        if num1 == num2:\n            print(num1)\n    return listval1\n    \n    \ndef reverse_list_in_place(listval):\n    '''\n    Write a function to reverse the order of the elements in the list in place.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    for i in range(len(listval)//2):\n        listval[i], listval[len(listval) - 1 - i] = listval[len(listval) - 1 - i], listval[i]\n    return listval\n    \n    \ndef return_sorted_list(listval):\n    '''\n    Write a function to return a list that has been sorted in ascending order.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return sorted(listval)\n    \n    \ndef return_copy_of_list(listval):\n    '''\n    Write a function to return a copy of the given list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval[:]\n    \n    \ndef find_common_element_in_list(listval1, listval2):\n    '''\n    Write a function to find a common element in two given lists.\n    '''\n    print(\"The first list val is : \")\n    print(listval1)\n    print(\"The second list val is : \")\n    print(listval2)\n    listval1.sort()\n    listval2.sort()\n    for num1, num2 in zip(listval1, listval2):\n        if num1 == num2:\n            return num1\n            break\n        \n        \ndef move_element_to_end(listval, val):\n    '''\n    Write a function to move the specified element to the end of the list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval.append(listval.pop(listval.index(val)))\n    \n    \ndef remove_duplicates(listval):\n    '''\n    Write a function to remove all the duplicate values from a list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return sorted(list(set(listval)))\n    \n    \ndef check_alternate_values(listval):\n    '''\n    Write a function to check if a given list contains any duplicates.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return len(listval) == len(set(listval))\n    \n    \ndef flatten_list(listval):\n    '''\n    Write a function to flatten a given multidimensional list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    listval = [element for sublist in listval for element in sublist]\n    return listval\n    \n    \ndef remove_empty_strings(listval):\n    '''\n    Write a function to remove empty strings from a list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return [element for element in listval if element]\n    \n    \ndef list_element_swap(listval, index1, index2):\n    '''\n    Write a function to swap the specified element of a list with the element at the specified position.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    listval[index1], listval[index2] = listval[index2], listval[index1]\n    return listval\n    \n    \ndef merge_two_sorted_lists(listval1, listval2):\n    '''\n    Write a function to merge two sorted lists into one sorted list.\n    '''\n    print(\"The two list val are : \")\n    print(listval1)\n    print(listval2)\n    new_list = listval1 + listval2\n    return sorted(new_list)\n    \n    \ndef add_two_values(val1, val2):\n    '''\n    Write a function to add two values.\n    '''\n    return val1 + val2\n    \n    \ndef return_min_max_without_math_functions(listval):\n    '''\n    Write a function to return the minimum and the maximum values of a given list without using the built-in min() and max() functions.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    minval, maxval = listval[0], listval[",
        "test": "assert     max_val([1,2,'hello', 3.5]) == 3.5, \"Your function is not working correctly. Try again!\"",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for x in range(1, number + 1):\n        if number % x == 0:\n            sum += x\n    return sum\n",
        "test": "assert     sum_div(5) ==     1",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                count += 1\n    return count\n",
        "test": "assert     get_Inv_Count([3,1,4,2]) == 2",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return list1\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
        "test": "assert     flatten_list([1,2,3, [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for i in stdata:\n        if i[1] > max_agg:\n            max_agg = i[1]\n    return max_agg\n",
        "test": "assert     max_aggregate([('d', 10), ('d', 30), ('e', 10), ('e', 20)]) == 30, \"max_aggregate([('d', 10), ('d', 30), ('e', 10), ('e', 20)]) is not correct\"",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0] * (2*n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(2*n+1):\n            if j >= i:\n                dp[i][j] = dp[i-1][j-i] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][2*n]\n",
        "test": "assert     count_binary_seq(1) == 0",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    depths = []\n    for k, v in d.items():\n        depths.append(dict_depth(v))\n    return 1 + (max(depths) if len(depths) > 0 else 0)\n",
        "test": "assert     dict_depth({'a': 1, 'b': 2, 'c': {'d': 3, 'e': {'f': 4}}}) == 3",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = arr[rotations:] + arr[:rotations]\n    if index>=0 :\n        return arr[index]\n    else :\n        index = len(arr) + index\n        return arr[index]\n",
        "test": "assert     find_Element([1,2,3,4,5], [1,2,3,4,5], 0, 0) == 1",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_words = words.split(\" \")\n    for i in list_words:\n        if re.match(\"^p.*\", i):\n            print(i)\n",
        "test": "assert     start_withp(['cartoon', 'comics','movies', 'programming', 'python']) == ['cartoon', 'comics']",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    m = [0] * n\n    m[0] = a[0]\n    for i in range(1, n):\n        m[i] = max(m[i - 1], m[i - 1] + a[i] + 1)\n        if i == k - 1:\n            return m[i]\n    for i in range(k - 1, n):\n        m[i] = max(m[i - 1], m[i - 1] + a[i] + 1)\n    return m[n - 1]\n",
        "test": "assert     max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 6, 1, 3) == 106",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a=tuplex[0:m]\n    b=tuplex[m:n]\n    return a+b\n",
        "test": "assert     colon_tuplex(('hello', 'world', 1, 2, 3, 4), 5, 6) ==     ('hello', 'world', 1, 2, 3, 4)",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Runtime: O(n log n)\n    # Space Complexity: O(n)\n",
        "test": "assert     large_product([5, 1, 2, 3, 4], [1, 2, 3, 4, 5], 3) ",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(2,3) ",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('#') == ('#',)",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    res = n&(~(n+1))\n    return res\n    \n",
        "test": "assert     set_left_most_unset_bit(3) == 7",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*(h)\n    return volume\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area = (1/3)*math.pi*(r**2)*(h) + math.pi*r**2\n    return surface_area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = (1/2)*math.pi*r**2 + 2*math.pi*r*h\n    return surface_area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\ndef volume_parallel_prism(l,w,h):\n    '''\n    Write a function to find the volume of a parallel prism.\n    '''\n    volume = (1/2)*l*w*h\n    return volume\ndef surface_area_parallel_prism(l,w,h):\n    '''\n    Write a function to find the surface area of a parallel prism.\n    '''\n    surface_area = 2*l*w + 2*w*h + 2*l*h\n    return surface_area\ndef volume_triangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    volume = 1/2*a*b*c\n    return volume\ndef surface_area_triangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    surface_area = a + b + c\n    return surface_area\ndef volume_rectangular_prism(w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume = w*h\n    return volume\ndef surface_area_rectangular_prism(w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    surface_area = 2*w*h\n    return surface_area\ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = 1/3*a*h**2\n    return volume\ndef surface_area_pyramid(a,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surface_area = 2*(1/2)*a*h + (1/2)*math.sqrt((a**2)+(h**2))\n    return surface_area\ndef volume_ellipsoid(r1,r2,r3):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    volume = (4/3)*math.pi*r1*r2*r3\n    return volume\ndef surface_area_ellipsoid(r1,r2,r3):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    surface_area = 4*math.pi*(r1*r2 + r1*r3 + r2*r3)\n    return surface_area\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = a**3\n    return volume\ndef surface_area_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surface_area = 6*a**2\n    return surface_area\ndef volume_hemisphere(a):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    volume = 1/2*a**2*math.pi\n    return volume\ndef surface_area_hemisphere(a):\n    '''\n    Write a function to find the surface area of a hemisphere.\n    '''\n    surface_area = 2*math.pi*(a**2)\n    return surface_area\ndef volume_cone_section(r,h):\n    '''\n    Write a function to find the volume of a cone section.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\ndef surface_area_cone_section(r,h):\n    '''\n    Write a function to find the surface area of a cone section.\n    '''\n    surface_area = (1/3)*math.pi*(r**2)*(h) + math.pi*r**2\n    return surface_area\ndef volume_cylinder_section(r,h):\n    '''\n    Write a function to find the volume of a cylinder section.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\ndef surface_area_cylinder_section(r,h):\n    '''\n    Write a function to find the surface area of a cylinder section.\n    '''\n    surface_area = (1/2)*math.pi*r**2 + 2*math.pi*r*h\n    return surface_area\ndef volume_sphere_section(r):\n    '''\n    Write a function to find the volume of a sphere section.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\ndef surface_area_sphere_section(r):\n    '''\n    Write a function to find the surface area of a sphere section.\n    '''\n    surface_area = 4*math.pi*(r**2)\n    return surface_area\ndef volume_parallel_extrusion(w,l,h):\n    '''\n    Write a function to find the volume of a parallel extrusion.\n    '''\n    volume = w*l*h\n    return volume\ndef surface_area_parallel_extrusion(w,l,h):\n    '''\n    Write a function to find the surface area of a parallel extrusion.\n    '''\n    surface_area = 2*w*l + 2*l*h\n    return surface_area\ndef volume_triangular_extrusion(a,b,c):\n    '''\n    Write a function to find the volume of a triangular extrusion.\n    '''\n    volume = 1/2*a*b*c\n    return volume\ndef surface_area_triangular_extrusion(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular extrusion.\n    '''\n    surface_area = 2*a*b + 2*b*c + 2*c*a\n    return surface_area\ndef volume_rectangular_extrusion(w,h):\n    '''\n    Write a function to find the volume of a rectangular extrusion.\n    '''\n    volume = w*h\n    return volume\ndef surface_area_rectangular_extrusion(w,h):\n    '''\n    Write a function to find the surface area of a rectangular extrusion.\n    '''\n    surface_area = 2*w*h\n    return surface_area\ndef volume_pyramid_extrusion(a,h):\n    '''\n    Write a function to find the volume of a pyramid extrusion.\n    '''\n    volume = (1/3)*a**2*h\n    return volume\ndef surface_area_pyramid_extrusion(a,h):\n    '''\n    Write a function to find the surface area of a pyramid extrusion.\n    '''\n    surface_area = 2*(1/2)*a*h + (1/2)*math.sqrt((a**2)+(h**2))\n    return surface_area\ndef volume_ellipsoid_section",
        "test": "assert     volume_cone(3,4) == math.pi*(4/3)*3**4",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        print(\"n must be greater than or equal to 1\")\n    else:\n        max_power = 0\n        while n >= 2:\n            n //= 2\n            max_power += 1\n        return max_power\n",
        "test": "assert     highest_Power_of_2(7) == 2, \"ERROR\"",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Using the formula\n    # 2*n lucas number = n^2 + n + 2\n    return n**2 + n + 2\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(string.format(i))\n    return new_list\n",
        "test": "assert ",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2)!= len(l3):\n        return None\n    res = {}\n    for i in range(len(l1)):\n        res[l1[i]] = {l2[i]: l3[i]}\n    return res\n",
        "test": "assert     {'a': {'a': 1, 'b': 2}, 'b': {'a': 2, 'b': 3}, 'c': {'a': 3, 'b': 4}} == convert_list_dictionary(['a', ['a', 1], 'b', [2, 3]], ['b', ['a', 2], 'c', ['a', 3]], ['c', [3, 4]])",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    dp = [0]*(n+1)\n    max_sum = 0\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1], dp[i//2] + i, dp[i//3] + i, dp[i//4] + i, dp[i//5] + i)\n        if max_sum < dp[i]:\n            max_sum = dp[i]\n    return max_sum\n",
        "test": "assert     get_max_sum(5)     == 8",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n            max_list = i\n    return max_list\n",
        "test": "assert     max_length_list([]) == []",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "test": "assert     check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1_dict = {}\n    for char in str1:\n        if char not in str1_dict:\n            str1_dict[char] = 1\n        else:\n            str1_dict[char] += 1\n    for char in str1:\n        if str1_dict[char] == 1:\n            return char\n    return None\n",
        "test": "assert ",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex,string)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char('a') == True, 'wrong result'",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        return b\n    elif b < a < c:\n        return a\n    elif b < c < a:\n        return c\n    elif c < b < a:\n        return b\n    elif c < a < b:\n        return a\n    elif a < c < b:\n        return c\n",
        "test": "assert     median_numbers(1,5,3) == 3",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += sum([int(d) for d in str(num)])\n    return s\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(x) for x in test_list))\n",
        "test": "assert     extract_freq([(2,3), (1,2), (1,3), (2,3), (2,3), (3,2), (3,2)]), 3",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = ()\n    tup2 = ()\n    tup = ()\n    for i in range(0, len(test_tup1)):\n        tup1 += (test_tup1[i],)\n    for i in range(0, len(test_tup2)):\n        tup2 += (test_tup2[i],)\n    for i in range(0, len(test_tup1)):\n        tup += ((tup1[i] + tup2[i]),)\n    return tup\n",
        "test": "assert     (add_nested_tuples(((1, 2), (3, 4), (5, 6)), ((1, 2), (3, 4), (5, 6))), ((2, 4), (6, 8), (10, 12)))",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(3,5) == 3",
        "num_ids": 115,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\nprint(check_tuplex((1,2,3,4),(1,2,3,4,5)))\n",
        "test": "assert     check_tuplex((1,2,3,4,5,6,7,8,9,10),(1,2,3)) == True",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    res = 0\n    while x:\n        res = res ^ x & 1\n        x >>= 1\n    return res \n",
        "test": "assert     find_Parity(7) ==     True",
        "num_ids": 172,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    bigger = []\n    nums = [int(i) for i in str(n)]\n    nums = sorted(nums,reverse=True)\n    for i in nums:\n        bigger.append(i)\n    return int(''.join(str(i) for i in bigger))\n",
        "test": "assert     rearrange_bigger(1234) == 4321, 'Failed rearrange_bigger with 1234'",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        return k_smallest_pairs_helper(nums2, nums1, k)\n    elif len(nums2) == 0 or len(nums1) == 0:\n        return []\n    elif len(nums1) == 1 and len(nums2) == 1:\n        return [[nums1[0], nums2[0]]] if nums1[0] < nums2[0] else []\n",
        "test": "assert     k_smallest_pairs([1, 7, 11], [2, 4, 6], 5) == [1, 2], \"case2\"",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    new_list = list()\n    for i in list1:\n        for j in i:\n            new_list.append(j)\n    new_list.sort()\n    a = 0\n    b = 1\n    result = list()\n    for i in range(len(new_list)):\n        if i == 0:\n            result.append(new_list[i] * new_list[i+1])\n            continue\n        elif i == len(new_list) - 1:\n            result.append(new_list[i] * new_list[i-1])\n            continue\n        else:\n            result.append(new_list[i] * new_list[i+1] * new_list[i-1])\n            continue\n    result.sort()\n    return result[0]\n",
        "test": "assert     min_product_tuple([((2,3,5),(6,8,9))]),     12",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    if len(listval) == 0:\n        return None\n    if len(listval) == 2:\n        return min(listval[0],listval[1])\n    if len(listval) == 3:\n        return min(listval[0],listval[1],listval[2])\n    return min_val([min_val(listval[:3]),min_val(listval[1:4])])\n",
        "test": "assert     min_val([1,2,3]) == 1",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if isinstance(word, str):\n        new_word = re.sub(r'(_\\w)', lambda m: m.group(1)[1].upper(), word)\n        return new_word[0].lower() + new_word[1:]\n    else:\n        print(\"Invalid Input\")\n        return None\n",
        "test": "assert     snake_to_camel('ab_c') == 'abC'",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    nums = []\n    for i in l:\n        if i % 2 == 0:\n            nums.append(i)\n    return nums\n",
        "test": "assert     remove_odd([1, 3, 5]) == [], 'Check if the list is empty'",
        "num_ids": 171,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    # list1 = [('a', 3),('b', 6),('c', 9),('d', 12),('e', 15),('f', 18),('g', 21),('h', 24),('i', 27),('j', 30),('k', 33),('l', 36),('m', 39),('n', 42)]\n    # n = 5\n    return sorted(list1, key=lambda tup: tup[1])[n-1]\n    \ndef extract_nth_element_2(list1, n):\n    return sorted(list1, key=lambda tup: tup[1])[n-1]\n    ",
        "test": "assert     extract_nth_element([(1,2), (3,4), (5,6)], 1) == (1,2), 'incorrect'",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len(set(list1).intersection(list2))>0\n    \nprint(overlapping([1,2,3,4,5], [1,2,5,6]))\nprint(overlapping([1,2,3,4,5], [1,2,4,6]))\n",
        "test": "assert     overlapping([1,2,3,4],[1,2,3,4,5,6]) is True ",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr:\n        return 0\n    min1 = max(arr)\n    max1 = max(arr)\n    for i in arr:\n        if i < min1:\n            min1 = i\n        if i > max1:\n            max1 = i\n    return min1*max1\ndef find_pair(arr, n):\n    '''\n    Write a python function to find a pair with given sum in a given array of integers.\n    '''\n    if not arr:\n        return 0\n    sum = n\n    s = set()\n    for i in arr:\n        if sum - i in s:\n            return (sum - i, i)\n        s.add(i)\n    return (0,0)\n",
        "test": "assert     max_Product([-1,2,3]) == -2, \"Please check your code\"",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for a,b in Input:\n        for c,d in Input:\n            if a == c:\n                Output.append((a,b,c,d))\n    return Output\n",
        "test": "assert     [('a', 'b'), ('a', 'd'), ('b', 'd')] == group_tuples([('a', 'b'), ('a', 'd'), ('b', 'd')])",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if(len(lst) == 0):\n        return\n    elif(len(lst) == 1):\n        return lst[0]\n    else:\n        lst.sort(reverse=True)\n        return lst[0]\n",
        "test": "assert     Find_Max(['abc','dfg','abc','fgdf','dfgdfg','dfg','dfgdf','dfgdfgdfgdfgdfgdf']) == 'fgdf', 'Failed test #1'",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s = sum(round(num, 2) for num in list1)\n    print(s * len(list1))\n",
        "test": "assert ",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i * i * i)\n    return sum\n",
        "test": "assert     cube_Sum(20) == 151200",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "test": "assert     concatenate_tuple(('abcd','efgh')) == 'abcd-efgh'",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes=0\n    for i in range(1,n+1):\n        sum_of_cubes=sum_of_cubes+(i**3)\n    print(\"The sum of cubes of first\", n, \"natural numbers is :\", sum_of_cubes)\n    return sum_of_cubes\n",
        "test": "assert     find_Average_Of_Cube(5) == 6, \"Not Passed\"",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear(('I', 'am', 'a', 'test', 'tuple')) == 'tuple'",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([[1,1,2],[2,2],[3,3,3],[1,1,1]], 2) == 2",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "test": "assert     [1, 3, 5] == filter_oddnumbers([1, 2, 3, 4, 5, 6])",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10] + '-' + dt[5:7] + '-' + dt[:4]\n",
        "test": "assert     change_date_format(\"2014-01-01\") == \"01-01-2014\"",
        "num_ids": 279,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 0:\n        return\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n",
        "test": "assert     shell_sort([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))\n",
        "test": "assert     and_tuples((1,2), (1,2,3)) == (1,2)",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return 2*a*c/(a**2 + b**2)\n",
        "test": "assert     parabola_directrix(1, -1, 0) == 0",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        for i in list1:\n            if i in list2:\n                return True\n        return False\n",
        "test": "assert     common_element([1,2,3,4],[2,3,4,5]) == True",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2)/2\n    print(\"The median length of the trapezium is:\",median_length)\n    return median_length\n",
        "test": "assert     median_trapezium(5,4,1) == 4.5, \"combination of small and large\"",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in arr:\n        if number > i:\n            flag = True\n        else:\n            flag = False\n            break\n    return flag\n",
        "test": "assert     check_greater([0], 0) == False, 'Array of one element, not greater than 0'",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a.*b+$\", text):\n        print(\"Matching text:\", text)\n    else:\n        print(\"No Match\")\n",
        "test": "assert     text_match_one('abbbbccc') == True, 'Incorrect match'",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Even_Last_Odd(n) :\n    '''\n    Write a python function to print out the first even and last odd digits of a number.\n    '''\n    return first_Digit(n), last_Digit(n)\n",
        "test": "assert     last_Digit(last_Digit(8)) == 8",
        "num_ids": 141,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for x in list1:\n        if x < 0:\n            list2.append(x)\n    return list2\n",
        "test": "assert     neg_nos([1,2,-3,4,-5]) == [-3,-5]",
        "num_ids": 198,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = \"\"\n    for ch in str1:\n        if ch not in odd_chars:\n            res += ch\n    return res\n",
        "test": "assert     remove_odd(\"I'm a little teapot\")     == \"Im litt etoapot\"",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # to start we need to check if the list has pairs\n    if len(test_list) % 2!= 0:\n        # if not we'll return 0\n        return 0\n    # if it does, we'll need to set up the return value\n    else:\n        return_list = []\n        # we'll need to loop through the list\n        for index in range(len(test_list)):\n            # now, for every index we'll want to check to see if it is a forward and backward index\n            # so first we'll need to set up the variables\n            current_index = index\n            current_item = test_list[index]\n            forward_index = index + 1\n            forward_item = test_list[forward_index]\n            # then we'll check the forward index\n            while current_index >= 0 and current_item == forward_item:\n                # if it's true, we'll append our tuple\n                return_list.append((current_item, forward_item))\n                # and then we'll decrement our index to the next one\n                current_index -= 1\n                # and then we'll check the next forward index\n                forward_index += 1\n                forward_item = test_list[forward_index]\n            # then we'll check the backward index\n            current_index = index - 1\n            current_item = test_list[current_index]\n            backward_index = index - 1\n            backward_item = test_list[backward_index]\n            while backward_index >= 0 and current_item == backward_item:\n                return_list.append((current_item, backward_item))\n                current_index -= 1\n                backward_index -= 1\n                backward_item = test_list[backward_index]\n        # if we get here then we should have all the pairs\n        return return_list\n",
        "test": "assert     count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 1), (3, 5)]) == 0",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # for i in L:\n    #     if i > 9:\n    #         L.append(str(i))\n    #     else:\n    #         pass\n    # return ''.join(L)\n    return int(\"\".join([str(i) for i in L]))\n",
        "test": "assert     multiple_to_single([1, 2, 3, 4, 5]) == 12345",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # text = input(\"Enter your text here: \")\n    # find adverb in the text\n    # r'(?<![A-Z])(?=[A-Z])'\n    # r'[A-Z]+(?=[A-Z])'\n    # r'[A-Z]{2,}'\n    # r'[A-Z]+[a-z]+[A-Z]+(?=[A-Z])'\n    # r'(?<![A-Z])[A-Z]+(?=[A-Z])'\n    # r'[A-Z]+[A-Z]+(?=[A-Z])'\n    # r'[A-Z]{2,}(?=[A-Z])'\n    # r'(?<=\\s)a(?=\\s)'\n    # r'(?<=\\s)the(?=\\s)'\n    # r'(?<=\\s)an(?=\\s)'\n    # r'(?<=\\s)[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[A-Z]+[A-Z]+(?=\\s)'\n    # r'(?<=\\s)the[A-Z]+(?=\\s)'\n    # r'(?<=\\s)the[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)the[A-Z]+[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]+[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]+[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]+[A-Z]+[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]+[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A",
        "test": "assert     find_adverb_position(\"She was the picture of a dog.\").get('a')==[(1,4)]",
        "num_ids": 2399,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l*l)\n",
        "test": "assert     surfacearea_cube(3) == 54",
        "num_ids": 127,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    length = len(nums)\n    pos_count = 0\n    for i in range(length):\n        if nums[i] > 0:\n            pos_count += 1\n    return pos_count / length\n",
        "test": "assert     positive_count([-1,-2,-3,-4,-5]) == 0",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    else:\n        list2 = list1[:]\n        list2.sort()\n        if list2[0] < 0:\n            return list2[0]\n        else:\n            return -1\n    return list1\n    ",
        "test": "assert     largest_neg([1,2,3,4,5,6,7,8,9,10,11,-100]) == -100",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    elif K <= 0:\n        return test_list\n    else:\n        for i in range(0, len(test_list)):\n            if len(test_list[i]) <= K:\n                test_list[i] = tuple(test_list[i])\n        return test_list\n",
        "test": "assert     trim_tuple([(10, 5), (2, 3, 4, 5), (6, 7, 8, 9, 10)], 4) == [(10, 5), (2, 3, 4, 5), (6, 7, 8, 9, 10)]",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n",
        "test": "assert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8))     == (5, 12, 21, 32), 'incorrect'",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [tup.count(x) for x in lst]\n",
        "test": "assert     count_Occurrence((\"aaa\", \"bb\", \"cc\"), [1, 2, 3, 3, 4, 5, 5]) == Counter({'a': 2, 'b': 1, 'c': 2, 1: 1, 2: 1, 3: 2, 4: 1, 5: 2}), \"WRONG\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\nprint(cube_nums([1,2,3,4,5,6]))\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125], 'incorrect output'",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-1) + cal_sum(n-2)\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    lst = []\n    for i in range(l):\n        start = i*(len(str)//l)\n        end = (i+1)*(len(str)//l)\n        lst.append(str[start:end])\n    return lst\n",
        "test": "assert extract_string(['123', '456', '789'], 4) == ['123', '456', '789'], '4 characters should be extracted'",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n",
        "test": "assert     remove_whitespaces(\" \") == \"\", \"Wrong result for remove_whitespaces(' ')\"",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss=0\n    if actual_cost<sale_amount:\n        loss=sale_amount-actual_cost\n    return loss\n",
        "test": "assert     loss_amount(20,20) == 0",
        "num_ids": 172,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    if (n == 0 or n == 1):\n        result = 0\n    else:\n        for i in range(1, n):\n            if (n % i == 0):\n                if (i % 2 == 0):\n                    result += i \n                else:\n                    result += 0 \n    return result \n",
        "test": "assert     sumofFactors(4) == 2",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # if 'z' in text:\n    #     return True\n    # else:\n    #     return False\n    return 'z' in text\n",
        "test": "assert     text_match_wordz('') == False, '''Empty strings does not contain any word with z'''",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb_list = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in monthnumb_list:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n",
        "test": "assert     reverse_string_list([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"e\", \"d\", \"c\", \"b\", \"a\"], \"Test Failed: reverse_string_list(['a', 'b', 'c', 'd', 'e'])!= ['e', 'd', 'c', 'b', 'a']\"",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sub_lst = i\n    return min_sub_lst\n",
        "test": "assert     Find_Min([5])         == [5]",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(3,6) == 18",
        "num_ids": 101,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase(\"hello, HELLO!\") == 'hello, hello!'",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n",
        "test": "assert     Extract([[1, 2, 3], [4, 5, 6]]) == [1, 4]",
        "num_ids": 138,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr('AbcDE') == 0",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    #base case\n    if len(list1)==1:\n        return [list1]\n    \n    #recursive case\n    first=list1[0]\n    rem=list1[1:]\n    rem_comb=combinations_list(rem)\n    res=[]\n    for comb in rem_comb:\n        res.append([first]+comb)\n    return res\n    \ndef permutations_list(list1):\n    '''\n    Write a function to find all possible permutations of the elements of a given list.\n    '''\n    \n    #base case\n    if len(list1)==1:\n        return [list1]\n    \n    #recursive case\n    first=list1[0]\n    rem=list1[1:]\n    rem_perm=permutations_list(rem)\n    res=[]\n    for perm in rem_perm:\n        for i in range(len(perm)+1):\n            res.append(perm[:i]+[first]+perm[i:])\n    return res\n    \ndef permutations_list_with_duplicates(list1):\n    '''\n    Write a function to find all possible permutations of the elements of a given list that\n    does not contain duplicate values.\n    '''\n    \n    #base case\n    if len(list1)==1:\n        return [list1]\n    \n    #recursive case\n    first=list1[0]\n    rem=list1[1:]\n    rem_perm=permutations_list_with_duplicates(rem)\n    res=[]\n    for perm in rem_perm:\n        res.append([first]+perm)\n    for perm in rem_perm:\n        res.append(perm+[first])\n    return res\n    \ndef test_combinations_list():\n    list1=['a', 'b', 'c', 'd']\n    assert(combinations_list(list1)==[['a', 'b', 'c', 'd'], ['a', 'b', 'd', 'c'], ['a', 'c', 'b', 'd'], ['a', 'c', 'd', 'b'], ['a', 'd', 'b', 'c'], ['a', 'd', 'c', 'b'], ['b', 'a', 'c', 'd'], ['b', 'a', 'd', 'c'], ['b', 'c', 'a', 'd'], ['b', 'c', 'd', 'a'], ['b', 'd', 'a', 'c'], ['b', 'd', 'c', 'a'], ['c', 'a', 'b', 'd'], ['c', 'a', 'd', 'b'], ['c', 'b', 'a', 'd'], ['c', 'b', 'd', 'a'], ['c', 'd', 'a', 'b'], ['c', 'd', 'b', 'a'], ['d', 'a', 'b', 'c'], ['d', 'a', 'c', 'b'], ['d', 'b', 'a', 'c'], ['d', 'b', 'c', 'a'], ['d', 'c', 'a', 'b'], ['d', 'c', 'b', 'a']])\n    \ndef test_permutations_list():\n    list1=['a', 'b', 'c', 'd']\n    assert(permutations_list(list1)==[['a', 'b', 'c', 'd'], ['a', 'b', 'd', 'c'], ['a', 'c', 'b', 'd'], ['a', 'c', 'd', 'b'], ['a', 'd', 'b', 'c'], ['a', 'd', 'c', 'b'], ['b', 'a', 'c', 'd'], ['b', 'a', 'd', 'c'], ['b', 'c', 'a', 'd'], ['b', 'c', 'd', 'a'], ['b', 'd', 'a', 'c'], ['b', 'd', 'c', 'a'], ['c', 'a', 'b', 'd'], ['c', 'a', 'd', 'b'], ['c', 'b', 'a', 'd'], ['c', 'b', 'd', 'a'], ['c', 'd', 'a', 'b'], ['c', 'd', 'b', 'a'], ['d', 'a', 'b', 'c'], ['d', 'a', 'c', 'b'], ['d', 'b', 'a', 'c'], ['d', 'b', 'c', 'a'], ['d', 'c', 'a', 'b'], ['d', 'c', 'b', 'a']])\n    \ndef test_permutations_list_with_duplicates():\n    list1=['a', 'b', 'c', 'd']\n    assert(permutations_list_with_duplicates(list1)==[['a', 'b', 'c', 'd'], ['a', 'b', 'd', 'c'], ['a', 'c', 'b', 'd'], ['a', 'c', 'd', 'b'], ['a', 'd', 'b', 'c'], ['a', 'd', 'c', 'b'], ['b', 'a', 'c', 'd'], ['b', 'a', 'd', 'c'], ['b', 'c', 'a', 'd'], ['b', 'c', 'd', 'a'], ['b', 'd', 'a', 'c'], ['b', 'd', 'c', 'a'], ['c', 'a', 'b', 'd'], ['c', 'a', 'd', 'b'], ['c', 'b', 'a', 'd'], ['c', 'b', 'd', 'a'], ['c', 'd', 'a', 'b'], ['c', 'd', 'b', 'a'], ['d', 'a', 'b', 'c'], ['d', 'a', 'c', 'b'], ['d', 'b', 'a', 'c'], ['d', 'b', 'c', 'a'], ['d', 'c', 'a', 'b'], ['d', 'c', 'b', 'a']])\n    \n    \ndef test_all():\n    test_combinations_list()\n    test_permutations_list()\n    test_permutations_list_with_duplicates()\n    print(\"All tests passed\")\n",
        "test": "assert     [['a'], ['a', 'b'], ['a', 'b', 'c']] == combinations_list(['a', 'b', 'c'])",
        "num_ids": 1543,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far, max_ending_here = 1, 1\n    min_so_far, min_ending_here = 1, 1\n    start_index, end_index = 0, 0\n    for i in range(0, len(arr)):\n        max_ending_here = max_ending_here * arr[i]\n        min_ending_here = min(min_ending_here * arr[i], 1)\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n        if max_ending_here < 0:\n            max_ending_here = 1\n            min_ending_here = 1\n            start_index = i + 1\n        elif min_ending_here == 1:\n            start_index = i + 1\n    return max_so_far\n",
        "test": "assert ",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(True)\n    else:\n        print(False)\n",
        "test": "assert ",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.pop('')\n",
        "test": "assert ",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    result = 1\n    max_endhere = 1\n    for i in range(n):\n        result = result * arr[i]\n        max_endhere = max(max_endhere * arr[i], arr[i])\n        result = max(result, max_endhere)\n    return result\n",
        "test": "assert     max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 362880, 'incorrect'",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    i = 0\n    new_tup = []\n    while(i < len(test_tup)-1):\n        new_tup.append(test_tup[i] + test_tup[i+1])\n        i += 1\n    return tuple(new_tup)\n",
        "test": "assert     add_pairwise(tuple(range(5, 10))) == [5, 6, 7, 8, 9]",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for ele in arr:\n        product = product * ele % n\n    return product % n\n",
        "test": "assert     find_remainder([10, 1, 2, 3], -5) == -4",
        "num_ids": 186,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return max(l)-min(l)==len(l)-1\nl1=[1,3,5,7,9]\nl2=[1,3,5,7,11]\nl3=[1,2,3,4,5]\nl4=[1,2,3,4,7,8]\nl5=[1,2,3,4,5,6,7]\nprint(check_Consecutive(l1))\nprint(check_Consecutive(l2))\nprint(check_Consecutive(l3))\nprint(check_Consecutive(l4))\nprint(check_Consecutive(l5))\n",
        "test": "assert     check_Consecutive([1, 3, 2, 6]) == False",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for elem in test_list1:\n        if elem in test_list2:\n            result.append(elem)\n    return result\n",
        "test": "assert     tuple_intersection([(1, 2, 3), (4, 5, 6), (7, 8, 9)], [(9, 8, 7), (6, 5, 4), (3, 2, 1)], [], []) == [(9, 8, 7), (6, 5, 4), (3, 2, 1)]",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('hello','e','1') == 'h1llo'",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    def key(x):\n        return x[1]\n",
        "test": "assert     sort_counter({1: 3, 2: 2, 3: 1})     == {1: 3, 2: 2, 3: 1}",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    def sum_of_largest_and_smallest(nums):\n        return sum(sorted(nums)[:2])\n    return sum_of_largest_and_smallest(nums)\n",
        "test": "assert ",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('big') == 'big'",
        "num_ids": 142,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result=re.sub('[a-z]','',str1,re.I)\n    return result\n",
        "test": "assert ",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n<0) : \n        n=-n \n    if(n < 10) : \n        return(n)\n    else : \n        return(first_Digit(n//10))\n    \n    \ndef palindrome(n) :\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if(n<0) : \n        return(False)\n    else : \n        return(first_Digit(n)==n%10)\n    \n    \ndef gcd(a,b) :\n    '''\n    Write a python function to find the greatest common divisor (GCD) of two numbers.\n    '''\n    if(b==0) : \n        return(a)\n    else : \n        return(gcd(b,a%b))\n",
        "test": "assert     first_Digit(234) == 2",
        "num_ids": 157,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0] \n",
        "test": "assert     Split([1, 2, 3]) == [1, 3]",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n + 1) :\n        sum_of_numbers += i\n        sum_of_cubes += i ** 3\n",
        "test": "assert     difference(3) == 2",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    A.sort()\n    pairs = 0\n    for i in range(0, N, 2):\n        if i!= N - 1:\n            if A[i] ^ A[i + 1] & 1:\n                pairs += 1\n        else:\n            if A[i] ^ A[0] & 1:\n                pairs += 1\n    return pairs\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     find_Odd_Pair([1,1,2,2,4],5) == 2",
        "num_ids": 2318,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('abc') == 'ABC'",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2))])\n",
        "test": "assert     digit_distance_nums(123, 123) == 0, 'Incorrect result for digit_distance_nums'",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([5, 4, -3, 7, 8], 4) == 13",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if test_tup1 == () or test_tup2 == ():\n        return ()\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))\n",
        "test": "assert     sorted(union_elements((1, 2, 3, 4), (4, 5, 6, 7))) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # your code here\n    dic = {}\n    max_length = 0\n    for i in range(len(lst)):\n        if lst[i] in dic:\n            dic[lst[i]].append(i)\n            if len(dic[lst[i]])>max_length:\n                max_length = len(dic[lst[i]])\n        else:\n            dic[lst[i]] = [i]\n    return max_length\n",
        "test": "assert     Find_Max_Length([[1, 2], [3], [4, 5]]) == 3",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"(.*?)\"', text)\n",
        "test": "assert     extract_values('This is \"one\", \"two\", \"three\"') == ['one', 'two', 'three']",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initializing result \n    result = 0\n    # Initializing sum for sum of\n    # square of all array elements \n    sum = 0\n    # Calculating sum of squares \n    for i in range(n): \n        sum += arr[i] * arr[i] \n    # Using formula to calculate result \n    result = ((n * (n - 1)) / 2) - (((n - 1) * (n - 1)) / 2) - sum\n    print(result) \n",
        "test": "assert     count_Pairs([1,2,3,4,5,6,7], 7) == 6",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split(\"abcd\") == ['a', 'b', 'c', 'd'], 'wrong'",
        "num_ids": 210,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # isinstance(object, type) returns True if the object is of the specified type, otherwise False\n    # isinstance(object, tuple)\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The input must be a non-negative integer!\")\n    return sum([int(i) for i in str(n)])\n",
        "test": "assert     sum_digits(123) == 6",
        "num_ids": 175,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i]<list1[i+1] for i in range(len(list1)-1))\n",
        "test": "assert     issort_list([1,2,3,4])",
        "num_ids": 185,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert     empty_list(1) == [{}], \"Not returning an empty list\"",
        "num_ids": 116,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    list2 = []\n    while list1!= []:\n        list2.append(list1[0])\n        list1.pop(0)\n        list1.sort()\n    return list2\n    \ndef sort_by_order(list1):\n    '''\n    Write a function to sort each sublist by order of importance.\n    '''\n    for i in range(0,len(list1)):\n        list1[i].sort()\n        list1[i].reverse()\n    return list1\n",
        "test": "assert     sort_sublists([['d', 'e'], ['b', 'd', 'e'], ['d', 'e', 'a'], ['d', 'e', 'a', 'c']]) == [['a', 'c'], ['d', 'd', 'e', 'e'], ['e', 'b', 'd']]",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = []\n    unique = []\n    for n in nums:\n        if n not in seen:\n            unique.append(n)\n            seen.append(n)\n    return unique\n",
        "test": "assert     two_unique_nums([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    numbers = list(set(list_data))\n    product = 1\n    for i in numbers:\n        product = product*i\n    return product\n",
        "test": "assert     unique_product([1, 1, 1, 1, 1, 1, 1]) == 1, \"Wrong answer\"",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=2*3.14*r*h+2*3.14*r*r\n    return surfacearea\n",
        "test": "assert ",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m=len(A)\n    n=len(B)\n    i=0\n    j=0\n    count=0\n    while i<m and j<n:\n        if A[i]==B[j]:\n            count+=1\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if count==n:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([1,2,3],[1,2,3]) == True, \"WRONG!!!\"",
        "num_ids": 2188,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # base case \n    if n == 0: \n        return 1\n    # recursive case \n    else: \n        return n * last_Digit_Factorial(n-1)\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    print('\\n')\n    print('Interleaving the 3 lists of the same length into a flat list')\n    print('\\n')\n    list3 = list(zip(list1, list2, list3))\n    list3.sort()\n    print(list3)\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8]) == [1,4,7,2,5,8]",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) ^ set(test_tup2))\n",
        "test": "assert     find_dissimilar((1, 2, 3), (1, 2, 3)) == []",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(element for index, element in enumerate(test_tuple) if even_fnc(index))\n",
        "test": "assert     even_ele((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), lambda x: x % 2 == 1) == (1, 3, 5, 7, 9, 11)",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = b * s * 0.5\n    print(surfaceArea)\n",
        "test": "assert     surface_Area(15,10) ==    250, \"Wrong Answer!\"",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not dict1\n",
        "test": "assert     my_dict( {'x':1} ) == False",
        "num_ids": 133,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num==0:\n        return 1\n    res=0\n    for i in range(num):\n        res+=catalan_number(i)*catalan_number(num-i-1)\n    return res",
        "test": "assert",
        "num_ids": 133,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Split the text into words\n    words = text.split()\n    \n    # Extract the adverbs\n    adverbs = [word for word in words if re.search(r\"ly$\", word)]\n    \n    # For each adverb, find the first match and return the position\n    for adverb in adverbs:\n        first_match = re.search(r\"ly$\", adverb)\n        if first_match:\n            return(text.index(adverb, first_match.start()))\n",
        "test": "assert     find_adverbs(\"She is a fast runner.\") == [[], []]",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items,key=lambda x:x[1],reverse=True)[:n]\n",
        "test": "assert     expensive_items([('milk', 5.0), ('cacao', 10.0), ('bread', 4.5)], 1) == [('cacao', 10.0)]",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "test": "assert     split_Arr([1,2,3,4,5], 3) == [1,2,3,4,5]",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if type(listx) == list:\n        return tuple(listx)\n    else:\n        return listx\n",
        "test": "assert     list_tuple([1, 2, 3]) ==     (1, 2, 3)",
        "num_ids": 186,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    return (nums[-1]-nums[0])\n    \ndef avg(nums):\n    '''\n    Write a Python function to find the average value in a list.\n    '''\n    nums = sum(nums)/len(nums)\n    return nums\n",
        "test": "assert     big_diff([1, 2, 3, 4, 5, 6]) == 5",
        "num_ids": 177,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if math.sqrt(i) == int(math.sqrt(i)):\n            perfect_squares.append(i)\n    return perfect_squares\n",
        "test": "assert     perfect_squares(4, 5) == [4], 'Fail'",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\n",
        "test": "assert     polar_rect(0, 0) == (0, 0), \"Polar coordinates to rectangular coordinates: input (0,0), expected output (0,0), computed output \" + str(polar_rect(0, 0))",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef list_Swap(newList): \n    '''\n    Write a python function to convert a list of characters into a string.\n    '''\n    string = \"\"\n    for item in newList:\n        string += item\n    return string\n",
        "test": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0: \n        return 1\n    elif k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "test": "assert     binomial_Coeff(10,5) == 252",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    if ip[0] == \"0\":\n        ip = ip[1:]\n        return removezero_ip(ip)\n    else:\n        return ip\n",
        "test": "assert     removezero_ip(\"192.168.0.1\") == \"192.168.0.1\"",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    try:\n        if list1[0] % 2 == 0:\n            return list1[1]-list1[0]\n        elif list1[0] % 2!= 0:\n            return list1[0]-list1[1]\n    except:\n        pass\n",
        "test": "assert     diff_even_odd([3,4,2,5,7,9,6,2]) == 2",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    table = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if str1[i-1] == str2[j-1] :\n                table[i][j] = table[i-1][j-1]\n            else:\n                table[i][j] = 1 + min(table[i-1][j-1], table[i-1][j],table[i][j-1])\n    return table[n][m]\n",
        "test": "assert     min_Swaps('111000', '111000') == 0, 'Incorrect output. For binary strings \"111000\", and \"111000\", the output should be 0, but the current output is {}'.format(min_Swaps('111000', '111000'))",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return(sys.getsizeof(tuple_list))\n",
        "test": "assert ",
        "num_ids": 115,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 < n2:\n        return find_kth(arr2, arr1, k)\n    if n1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k // 2, n1)\n    j = min(k // 2, n2)\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)\n",
        "test": "assert     find_kth([1, 2, 3, 4, 5], [0, 1, 2, 3, 4], 4) == 4",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_value = 0\n    for digit in str(number):\n        digit_value += int(digit) ** len(str(number))\n    return digit_value == number\n",
        "test": "assert     armstrong_number(153) == True, \"Wrong\"",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #number = int(input(\"Please enter a number\"))\n    sum = 0\n    for i in range(1,number+1):\n        sum = sum + i\n    return sum,sum/number\ndef main():\n    '''\n    Main function to call other functions\n    '''\n    print(\"Sum and average of first n natural numbers is:\",sum_average(10))\nif __name__ == '__main__':\n    main()",
        "test": "assert ",
        "num_ids": 155,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_Even(2) == True",
        "num_ids": 130,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) >= 2:\n            return i\n",
        "test": "assert     first_repeated_char(\"xyzxyzxyz\") == 'x'",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 10:\n        return [n]\n    return [i for i in range(1, n)] + [int(''.join(j)) for j in itertools.product(['1', '2', '3', '4', '5', '6', '7', '8', '9'], repeat=len(str(n))-1)]\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert the string into a list\n    s = s.split(\" \")\n    # Revert the list\n    s = s[::-1]\n    # Join the list elements into one string\n    return \" \".join(s)\n",
        "test": "assert     reverse_words('') == ''",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert     prime_num(2) == True, 'is_prime: 2'",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree*math.pi)/180\n",
        "test": "assert     0.017453292519943295 == radian_degree(1)",
        "num_ids": 2139,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    return [match.group(0) for match in matches]\n",
        "test": "assert     find_literals('42 is the answer', r'[0-9]+') == ('42', 0, 4), find_literals('42 is the answer', r'[0-9]+')",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2,n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for item in list1:\n        if list1.index(item)!= L:\n            list2.append(item)\n    return list2\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5, 6, 7], 3) == [1, 2, 3, 5, 6, 7], \"remove_kth_element(a,3) fail\"",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = int(test_list[i][j])\n    #print(test_list)\n    \n    res = []\n    for i in range(len(test_list)):\n        res.append(max(test_list[i]))\n    print(res[N-1])\n",
        "test": "assert ",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]\n",
        "test": "assert ",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return test_list\n    else:\n        return [sum(test_list[:i]) for i in range(1,len(test_list)+1)]\n",
        "test": "assert     (cummulative_sum([1,2,3,4]) == [1,3,6,10])",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = list(nums)\n    new_list = []\n    for tup in tuple_list:\n        for number in tup:\n            new_list.append(number)\n    return sum(new_list) / len(new_list)\n",
        "test": "assert ",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(e1 % e2 for e1, e2 in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo( (1,2), (3,4)) == (1, 2), 'incorrect'",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 0 or d <= 0:\n        return -1\n    if steps == 0:\n        return 0\n    if d == steps:\n        return 1\n    if d > steps:\n        return -1\n    return min_Jumps(steps - 1, d) + min_Jumps(steps - 2, d - 1) + min_Jumps(steps - 3, d - 2)\n",
        "test": "assert     min_Jumps(3, 3) == 1, \"WA. Wrong result\"",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n = len(nums1)\n    result = []\n    for i in range(n):\n        result.append(nums1[i]/nums2[i])\n    return result\n    ",
        "test": "assert     div_list([1,2,3], [2,2,2]) == [0.5, 1, 1.5], 'incorrect'",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + \\\n           ''.join([i for i in test_str if i.isdigit()])\n",
        "test": "assert     move_num('abc') == 'abc'",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n",
        "test": "assert     largest_subset([100, 200, 300, 400]) == 1",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    mid = n // 2\n    if n % 2:\n        return arr2[mid]\n    else:\n        return (arr2[mid - 1] + arr2[mid]) / 2\n",
        "test": "assert     get_median([1, 2], [3, 4], 2) == 3.5",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n",
        "test": "assert     nth_nums([1,2,3,4,5],0) == [1,1,1,1,1]",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    #pass\n",
        "test": "assert ",
        "num_ids": 63,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0] \n    return newList\n",
        "test": "assert     (swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1])",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # import math\n    # return math.pi*r**2/2\n",
        "test": "assert ",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for number in range(start,end):\n        if array[number]!= number + start:\n            return number + start\n    return -1\n",
        "test": "assert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101]) == 2",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces(\"\") == \"\", 'Empty string.'",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for num in list:\n        if num % 2 == 0:\n            even_num.append(num)\n    return even_num\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global path\n    if ele not in sub:\n        sub.append(ele)\n        \n        #for each element in sub, find its neighbours\n        for neighbour in [(ele[0]-1,ele[1]), (ele[0]+1,ele[1]), (ele[0],ele[1]-1), (ele[0],ele[1]+1)]:\n            adjac(neighbour, sub)\n    return sub\n        \n",
        "test": "assert     adjac((2,3)) == [(2,2),(2,1),(2,0),(1,3),(0,3),(1,2),(0,2)]",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_'.join(text.split(' '))\n",
        "test": "assert     replace_spaces('Hello World') == 'Hello_World', \"Wrong Answer\"",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    for i in new_list:\n        num_list.remove(i)\n    for i in range(num_list.count(0)):\n        num_list.append(0)\n    return num_list\n",
        "test": "assert     move_zero([0, 1, 2, 3, 4, 0, 6, 7, 0, 8, 9, 10, 11, 12, 0, 13, 14, 15, 16, 17, 0, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Code :\n    '''\n    def sum_xor(arr,n) : \n        x = 0\n        for i in range(n) : \n            for j in range(i+1, n) : \n                x = x^arr[i]^arr[j]\n        return x\n    return sum_xor(arr,n)\n",
        "test": "assert     pair_xor_Sum([5,2,3,4,5],5) == 0, 'Something wrong with your code'",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     heap_sort([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit >= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(0, 0) == True",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    import math\n    wind_chill= 35.74 + 0.6215*t - 35.75*math.pow(v,0.16) + 0.4275*t*math.pow(v,0.16)\n    return round(wind_chill)\n    \ndef get_num_legs(animal):\n    '''\n    Write a function that returns the number of legs an animal has, when given the animal's name.\n    '''\n    if animal.lower() == \"dog\":\n        return 4\n    elif animal.lower() == \"cat\":\n        return 4\n    elif animal.lower() == \"bird\":\n        return 2\n    else:\n        return None\ndef get_name(first_name, last_name):\n    '''\n    Write a function that returns the full name, neatly formatted.\n    '''\n    return f\"{first_name} {last_name}\"\ndef longest_word(w1,w2,w3):\n    '''\n    Write a function that returns the longest word out of three words given by user.\n    '''\n    if len(w1) > len(w2) and len(w1) > len(w3):\n        return w1\n    elif len(w2) > len(w3):\n        return w2\n    else:\n        return w3\ndef has_three_consecutive_duplicates(s):\n    '''\n    Write a function that returns True if the given string contains three consecutive duplicates, otherwise return False.\n    '''\n    if len(s) < 3:\n        return False\n    elif s.count(s[0]) == 3:\n        return True\n    else:\n        return has_three_consecutive_duplicates(s[1:])\ndef is_alternating_case(s):\n    '''\n    Write a function that returns True if every letter in the given string is alternating between lower and upper case, otherwise return False.\n    '''\n    if len(s) < 2:\n        return False\n    else:\n        if s[0].isupper() and s[1].islower():\n            return is_alternating_case(s[1:])\n        elif s[0].islower() and s[1].isupper():\n            return is_alternating_case(s[1:])\n        else:\n            return False\ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the given string is a palindrome, otherwise return False.\n    '''\n    if len(s) < 2:\n        return False\n    else:\n        if s[0]!= s[-1]:\n            return False\n        else:\n            return is_palindrome(s[1:-1])\ndef extract_full_name(s):\n    '''\n    Write a function that returns the first and last names given a string containing a first and last name seperated by a space.\n    '''\n    return s.split(\" \")[0], s.split(\" \")[1]\ndef find_missing_letter(chars):\n    '''\n    Write a function that returns the missing letter in the given string.\n    '''\n    if len(chars) < 2:\n        return None\n    else:\n        if len(chars) == 2:\n            if chars[0] == chars[1].lower():\n                return None\n            elif chars[0].lower() == chars[1]:\n                return chars[0].lower()\n            else:\n                return chars[0]\n        else:\n            if chars[0].lower() == chars[1].lower():\n                return find_missing_letter(chars[2:])\n            elif chars[0].lower() == chars[2]:\n                return chars[1]\n            else:\n                return chars[0]\n",
        "test": "assert     wind_chill(53, 10) == 47",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['Josias', 'Lucius', 'Luscious', 'Lusitania', 'Jhosias', 'Lucifer', 'J. D.', 'J. K.', 'J. C. D.', 'J. C. B.', 'J. C. B.', 'J. J. D.']\n    \n    return [name for name in sample_names if name[0].islower() == False]\n",
        "test": "assert     sample_nam(['Bob', 'Aaron', 'Sue', 'Chris', 'Jane', 'Emily', 'Molly', 'Mary']) == 19",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('\\([^)]*\\)', '', items)\n",
        "test": "assert     remove_parenthesis(\"do not remove parenthesis from this string\") == \"do not remove parenthesis from this string\", 'Incorrect'",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    pattern = re.compile(r'^.*z.*$')\n    result = re.findall(pattern, text)\n    print(result)\n    return bool(result)\n",
        "test": "assert     text_match_wordz_middle('arizona') == True, 'arizona should return True'",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    output = [0 for i in range(input_length)]\n    for i in range(input_length):\n        if i < k:\n            output[i] = input[i]\n        else:\n            output[i-k] = input[i]\n    return output\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4], 4) == [1,2,3,4]",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "test": "assert     (add_dict_to_tuple(('a', 'b', 'c'), {'a': 1, 'b': 2, 'c': 3}) == ('a', 'b', 'c', {'a': 1, 'b': 2, 'c': 3}))",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    maxi = [[0 for i in range(n)] for j in range(n)]\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == 1 and j == 1:\n                maxi[i][j] = cost[i][j]\n            elif i == 1 and j!= 1:\n                maxi[i][j] = max(cost[i][j] + maxi[i][j - 1], maxi[i - 1][j])\n            elif i!= 1 and j == 1:\n                maxi[i][j] = max(cost[i][j] + maxi[i - 1][j], maxi[i][j - 1])\n            else:\n                maxi[i][j] = max(cost[i][j] + maxi[i][j - 1], cost[i][j] + maxi[i - 1][j], maxi[i - 1][j - 1])\n    return int(maxi[n - 1][n - 1] / (n - 1 + 1))\n",
        "test": "assert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 5, \"Incorrect output\"",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # for i in students:\n    #     if students[i][0] > h and students[i][1] > w:\n    #         print(i)\n    #         students[i] = i\n    students = {i : (students[i][0],students[i][1]) for i in students if students[i][0] > h and students[i][1] > w}\n    return students\n",
        "test": "assert     {'Bibian': (1.62, 76), 'Teofil': (1.69, 90), 'Katya': (1.68, 80), 'Dani': (1.64, 84), 'Iryna': (1.69, 96)} == filter_data(student_data,1.64,84)",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # counter = 0\n    # for i in range(len(nums1)):\n    #     if(nums1[i] == nums2[i]):\n    #         counter += 1\n    # return counter\n",
        "test": "assert     count_same_pair([1, 2, 3, 4, 5], [5, 5, 1, 1, 5]) == 2",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit)**power for digit in str(base))\n",
        "test": "assert     power_base_sum(2, 5) == 32",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    for x in text1:\n        if x.find('\\\"')!= -1:\n            text1.remove(x)\n            text1.insert(text1.index(x), re.sub(r'\\\".*\\\"', \"\", x))\n    return text1\n",
        "test": "assert     extract_quotation('\"The story of \"Burbank\" is very short') == 'Burbank'",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i*j for i,j in zip(test_tup,test_tup[1:])])\n",
        "test": "assert     (1, 2, 6) == multiply_elements((2, 4, 6))",
        "num_ids": 207,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res = []\n    for i in range(len(lst1)):\n        res.append(lst1[i] + lst2[i])\n    return res\n",
        "test": "assert     sum_list([1,2,3,4],[1,2,3,4]) == [2,4,6,8]",
        "num_ids": 279,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    print(list(groupby(nums)))\n    return [x for x, y in groupby(nums)]\n",
        "test": "assert     consecutive_duplicates([0,0,1,2,2,3,3,4,4,4,5,5,6,7,7,8,8,8]) == [0,1,2,3,4,5,6,7,8]",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r**2 * (h/3)\n    return lateral_surface_area\n",
        "test": "assert     lateralsurface_cone(0,0) == 0",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    return text\n",
        "test": "assert     replace_specialchar('') == '','replace_specialchar should be \" \"'",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 3, 5, 5, 5, 7, 9, 9, 9, 15], 1) == 0",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #sort the list\n    #arr.sort()\n    #print(arr)\n",
        "test": "assert ",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #  x = n\n    #  t = 1\n    #  while n:\n    #      t = t<<1\n    #      n = n & (n - 1)\n    #      # t = t << 1\n    #      # n = n & (n - 1)\n    #  return (t - 1)\n    #  return (n ^ (1 << (size - 2)))\n",
        "test": "assert     set_middle_bits(10) == 6",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    print(i)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n",
        "test": "assert     left_insertion([1, 3, 5, 7], 5) == 2",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string) \n    \ndef main():\n    string = input('Enter string: ')\n    if check_str(string):\n        print('String starts with a vowel')\n    else:\n        print('String does not starts with a vowel')\n",
        "test": "assert     check_str('ae') == True, 'Wrong result for \"ae\"'",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/2)*(2*(n-1)+1)*geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) ==     1",
        "num_ids": 119,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangle = [] \n    \n    for i in range(1, 100): \n        triangle.append(i * (i + 1) // 2) \n    \n    for i in range(1, 100): \n        if n < 10: \n            if triangle[i] >= n: \n                return i \n        else: \n            if triangle[i] >= n: \n                if int(math.log10(n) + 1) - math.log10(triangle[i]) > int(math.log10(n) + 1) - math.log10(triangle[i - 1]): \n                    return i \n            else: \n                if int(math.log10(n) + 1) - math.log10(triangle[i]) < int(math.log10(n) + 1) - math.log10(triangle[i - 1]): \n                    return i - 1\n",
        "test": "assert     (find_Index(2) == 1)",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    return test_dict\n",
        "test": "assert     tuple_to_dict(('Geeks', 'for', 1, 'Geeks')) == {'Geeks':'for',1: 'Geeks'}, 'Incorrect'",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[0]!= s[i] :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('python') == False, 'all_Characters_Same should return False for string with more than one character.'",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3) / 4) * side ** 2\n",
        "test": "assert     area_tetrahedron(1) == 4.0",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_size = len(list)\n    n = list_size - m\n    temp_list = list[n:]\n    for item in list[:n]:\n        temp_list.append(item)\n    list[:] = temp_list[:]\n    return list\n",
        "test": "assert     rotate_right([3, 2, 1, 4], 2) == [4, 3, 2, 1]",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(not i for i in test_tup)\n",
        "test": "assert     check_none((1, 2, 3)) == False, \"check_none((1, 2, 3)) == False\"",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(map(lambda x: num%int(x)==0, str(num))):\n            result.append(num)\n    return result\n",
        "test": "assert ",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<=360:\n        s=(r**2)*(math.sin(math.radians(a))**2)\n        return s\n    else:\n        return None\n",
        "test": "assert ",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m=len(X) \n    n=len(Y) \n    l=len(Z) \n    L=[[[0 for i in range(l+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i==0 or j==0 or k==0: \n                    L[i][j][k] = 0\n                elif X[i-1]==Y[j-1]==Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n    lcs = \"\" \n    i = m \n    j = n \n    k = l \n    while i>0 and j>0 and k>0: \n        if X[i-1]==Y[j-1]==Z[k-1]: \n            lcs = X[i-1] + lcs \n            i-=1\n            j-=1\n            k-=1\n        else: \n            if L[i-1][j][k]>=L[i][j-1][k] and L[i-1][j][k]>=L[i][j][k-1] and L[i-1][j][k]>=L[i][j][k]: \n                i-=1\n            elif L[i][j-1][k]>=L[i-1][j][k] and L[i][j-1][k]>=L[i][j][k-1] and L[i][j-1][k]>=L[i][j][k]: \n                j-=1\n            elif L[i][j][k-1]>=L[i-1][j][k] and L[i][j][k-1]>=L[i][j-1][k] and L[i][j][k-1]>=L[i][j][k]: \n                k-=1\n    return lcs \n",
        "test": "assert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGGTAXB\") == 4",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital_words = r\"\\b[A-Z][a-z]*\\b\"\n    pattern = re.compile(capital_words)\n    return \" \".join(pattern.findall(str1))\n",
        "test": "assert     capital_words_spaces('') == ''",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: list(map(int, filter(lambda y: y.isdigit(), x))))\n",
        "test": "assert     sort_numeric_strings(['5', '3', '1', '2', '4']) == ['1', '2', '3', '4', '5']",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3, 4], (2, 4, 6, 8)) == [1, 2, 3, 4, (2, 4, 6, 8)]",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    if l<len(arr) and arr[i]>arr[l]:\n        return False\n    if r<len(arr) and arr[i]>arr[r]:\n        return False\n    if l<len(arr) and arr[i]>arr[l]:\n        return False\n    if r<len(arr) and arr[i]>arr[r]:\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([0, 8, 5, 1, 7, 6, 3, 2, 4], 1) == False, \"Incorrect\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    jacobsthal_nums = [0, 1, 1]\n    for i in range(3, n+1):\n        #print(i)\n        jacobsthal_nums.append((jacobsthal_nums[i-1]+jacobsthal_nums[i-2])%(10**9+7))\n    return jacobsthal_nums[n]\n",
        "test": "assert ",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    res = []\n    for i in range(len(test_list)):\n        k = test_list[i][0]\n        if k <= K:\n            res.append(test_list[i])\n    return res\n",
        "test": "assert     min_k(((2,2,2),(1,1,1)), 0) == []",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            result.append(l1[i])\n    return result\n",
        "test": "assert     extract_index_list([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], [\"a\", \"b\", \"e\", \"f\", \"g\"], [\"a\", \"b\", \"e\", \"f\", \"g\", \"h\"]) == [1, 3, 5]",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    list_numbers = sorted(numbers)\n    if len(list_numbers) < 2:\n        return None\n    else:\n        return list_numbers[1]\n",
        "test": "assert     second_smallest([10, 4, 2, 5, 6]) == 4",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r\"a\\b+?\", text)\n    return result\n",
        "test": "assert     text_match_zero_one(\"abb\") == True",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum([int(s1[::-1] in s2) for s1 in test_list for s2 in test_list])\n",
        "test": "assert     count_reverse_pairs([\"abcd\"]) == 0, \"Incorrect\"",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) is list:\n            list2.append(tuple(i))\n        else:\n            list2.append(i)\n    dict = {i:list2.count(i) for i in set(list2)}\n    return dict\n",
        "test": "assert     unique_sublists([1,2,3,1,[1,1,1],[1,1,2]]) == {(1, 1): 2, (1, 2): 1, (1, 3): 1, (2, 1): 1, (3, 1): 1}",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if num.find('.')!= -1 and len(num) >= 3 else False\n",
        "test": "assert     is_decimal('123.14') == True, 'Check your input'",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_element = set(arr)\n    if len(unique_element) == 1:\n        return True\n    return False\n    \ndef unique_Element_without_using_set(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_unique_element_map = {}\n    for num in arr:\n        arr_unique_element_map[num] = arr_unique_element_map.get(num, 0) + 1\n    for num in arr_unique_element_map:\n        if arr_unique_element_map[num] == 1:\n            return True\n    return False\n",
        "test": "assert     unique_Element([1, 2, 3, 4]) == False",
        "num_ids": 2334,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print('The number {} contains 30 days.'.format(monthnum3))\n    else:\n        print('The number {} does not contain 30 days.'.format(monthnum3))\n",
        "test": "assert     check_monthnumber_number(4) == True, 'The month number is correct'",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #Sort the array\n    arr.sort()\n    #Initialize the min difference as infinite\n    minimum_diff = arr[1]-arr[0]\n    #Start from the 2nd element\n    for i in range(1,n):\n        #Check if the ith element - (i+1)th element is less than the minimum difference\n        if arr[i]-(i+1) < minimum_diff:\n            #Update the minimum difference\n            minimum_diff = arr[i]-(i+1)\n    return minimum_diff\n",
        "test": "assert     find_min_diff([2, 3, 4, 5, 6], 5) == 1",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in str:\n        if i.isdigit():\n            number += 1\n    return number\n",
        "test": "assert     number_ctr('1234567890') == 10",
        "num_ids": 185,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # variable to store nth polite number \n    k = 1\n    #variable to store the number of factorials \n    factorial = 1\n    # variable to store the number of 5s in the factorials \n    five = 0\n    # variable to store the number of 5k in the factorials \n    five_k = 0\n",
        "test": "assert     is_polite(2) == 19, 'Wrong answer'",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 168,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = set()\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs.add((arr[i], arr[j]))\n    return len(pairs)\n",
        "test": "assert     get_pairs_count([1,2,3,4,5], 5) == 2 ",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "test": "assert ",
        "num_ids": 92,
        "indeed": true
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n+1):\n        if (x % 2!= 0):\n            sum += x**4\n    return sum\n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(' or char == '[' or char == '{':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        elif char == '}':\n            if len(stack) > 0 and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n    \n",
        "test": "assert     check_expression('(3^2 + 8)*(5/2))/(2+6)') == False, \"check_expression test case 2 failed\"",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = [i for i in test_str.split(' ') if len(i)!= K]\n    return''.join(result)\n",
        "test": "assert     ('hello', 2)         == remove_length('hello there', 1)",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return [match.span()[0],match.span()[1]]\n    else:\n        return None\n",
        "test": "assert     occurance_substring('haaaahhaaaaaa', 'haa') == [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1, 2, 3, 4, 6]) == False, \"Wrong result!\"",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum(1 for char in test_str if char in 'aeiou' or test_str[test_str.find(char) + 1] in 'aeiou')\n",
        "test": "assert     count_vowels('') == 0, 'check #1'",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_rep = []\n    for i in range(len(arr)):\n        if arr.count(arr[i])==1:\n            non_rep.append(arr[i])\n    return sum(non_rep)\n    \n    \n    \n    \n",
        "test": "assert     find_sum([1,2,3,4,5,6])     == 21",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    newlist = []\n    for key, group in groupby(list1):\n        group_list = list(group)\n        newlist.append(group_list)\n    return newlist\n",
        "test": "assert     pack_consecutive_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]) == [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7]]",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    sub_list = []\n    for sub_list in list1:\n        if sub_list not in unique_list:\n            unique_list.append(sub_list)\n    unique_list_tuple = []\n    for sub_list in unique_list:\n        unique_list_tuple.append(tuple(sub_list))\n    unique_list_dict = dict(zip(unique_list_tuple, [0]*len(unique_list)))\n    for sub_list in list1:\n        for i in range(len(unique_list_tuple)):\n            if sub_list == list(unique_list_tuple[i]):\n                unique_list_dict[unique_list_tuple[i]] += 1\n    return unique_list_dict\n",
        "test": "assert     unique_sublists([[1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8, 9], [9, 10, 11], [11, 12, 13]]) == {(1, 2, 3): 1, (3, 4, 5): 1, (5, 6, 7): 1, (7, 8, 9): 1, (9, 10, 11): 1, (11, 12, 13): 1}, \"unique_sublists test 1\"",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for i in range(1,len(test_list)+1):\n        temp_list = combinations(test_list,i)\n        for j in temp_list:\n            if sum(j) == 10:\n                final_list.append(list(j))\n    return final_list\n",
        "test": "assert     find_combinations([(1,1,2), (1,2,3), (1,3,4), (1,4,5), (1,5,6), (1,6,7)]) == [(1, 1, 2, 3), (1, 1, 2, 4), (1, 1, 2, 5), (1, 1, 2, 6), (1, 1, 3, 4), (1, 1, 3, 5), (1, 1, 3, 6), (1, 1, 4, 5), (1, 1, 4, 6), (1, 1, 5, 6), (1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 3, 6), (1, 2, 4, 5), (1, 2, 4, 6), (1, 2, 5, 6), (1, 3, 4, 5), (1, 3, 4, 6), (1, 3, 5, 6), (1, 4, 5, 6), (1, 5, 6, 7), (2, 1, 2, 3), (2, 1, 2, 4), (2, 1, 2, 5), (2, 1, 2, 6), (2, 1, 3, 4), (2, 1, 3, 5), (2, 1, 3, 6), (2, 1, 4, 5), (2, 1, 4, 6), (2, 1, 5, 6), (2, 2, 3, 4), (2, 2, 3, 5), (2, 2, 3, 6), (2, 2, 4, 5), (2, 2, 4, 6), (2, 2, 5, 6), (2, 3, 4, 5), (2, 3, 4, 6), (2, 3, 5, 6), (2, 4, 5, 6), (2, 5, 6, 7), (3, 1, 2, 3, 4), (3, 1, 2, 3, 5), (3, 1, 2, 3, 6), (3, 1, 2, 4, 5), (3, 1, 2, 4, 6), (3, 1, 2, 5, 6), (3, 1, 3, 4, 5), (3, 1, 3, 4, 6), (3, 1, 3, 5, 6), (3, 1, 4, 5, 6), (3, 2, 3, 4, 5), (3, 2, 3, 4, 6), (3, 2, 3, 5, 6), (3, 2, 4, 5, 6), (3, 3, 4, 5, 6), (3, 4, 5, 6, 7), (4, 1, 2, 3, 4, 5), (4, 1, 2, 3, 4, 6), (4, 1, 2, 3, 5, 6), (4, 1, 2, 4, 5, 6), (4, 1, 3, 4, 5, 6), (4, 2, 3, 4, 5, 6), (4, 3, 4, 5, 6, 7), (5, 1, 2, 3, 4, 5, 6), (5, 1, 2, 3, 5, 6, 7), (5, 1, 2, 4, 5, 6, 7), (5, 2, 3, 4, 5, 6, 7), (6, 1, 2, 3, 4, 5, 6), (6, 1, 2, 3, 5, 6, 7), (6, 1, 2, 4, 5, 6, 7), (6, 2, 3, 4, 5, 6, 7)]",
        "num_ids": 2119,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    ctr=0\n    for i in range(1,n//2+1):\n        if (n%i == 0):\n            ctr+=1\n    if(ctr%2==0):\n        return True\n    else:\n        return False\n",
        "test": "assert     count_divisors(4) == True ",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_list = []\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if len(arr[i:j+1]) % 2 == 0:\n                break\n            else:\n                if len(arr[i:j+1]) % 2 == 1:\n                    odd_list.append(sum(arr[i:j+1]))\n    return sum(odd_list)\n",
        "test": "assert ",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / (max_value - min_value))\n    elif max_value == g:\n        h = 60 * ((b - r) / (max_value - min_value)) + 120\n    elif max_value == b:\n        h = 60 * ((r - g) / (max_value - min_value)) + 240\n    \n    if max_value == 0:\n        s = 0\n    else:\n        s = 1 - (min_value / max_value)\n    \n    v = max_value\n    \n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return -1\n    else:\n        product = 1\n        for i in list1:\n            if i%2 == 0:\n                product *= i\n            else:\n                continue\n    return product\n    \n    ",
        "test": "assert ",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = test_str.split(',')\n    test_tuple = tuple(test_tuple)\n    test_tuple = int(test_tuple)\n    return test_tuple\n",
        "test": "assert     tuple_str_int('[1,2,3]') == (1,2,3)",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    l, r = 0, n-1\n    while l <= r:\n        m = (l+r)//2\n        if a[m] >= x:\n            r = m-1\n        else:\n            l = m+1\n    return l\n",
        "test": "assert     right_insertion([1,2,3,4,4], 4) == 3",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search('ab{3}', text)\n    return match!= None\n",
        "test": "assert     text_match_three('cdbbd') == False",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_new = tuple(test_str)\n    tuple_list = tuple(test_list)\n    return tuple_list, tuple_new\n",
        "test": "assert ",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert even_position([1,3,5]) == False, 'Fails'",
        "num_ids": 150,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #tup_list = [test_tup]\n    # for tup in test_tup:\n    #     if type(tup) == tuple:\n    #         tup_list.append(tup)\n    # return tup_list\n    return [tup for tup in test_tup if type(tup)!= tuple]\n",
        "test": "assert     remove_nested(test_tup2) ==     [1, 4, 5, 6, 7, 8]",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []:\n        return 0\n    elif not isinstance(input_list[0], list):\n        return 1\n    else:\n        return 1 + count_list(input_list[0])\n",
        "test": "assert ",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    l = 0\n    r = n-1\n    while(l<r):\n        mid = (r+l)//2\n        if x>arr[mid]:\n            l = mid+1\n        else:\n            r = mid\n    if arr[l] == x:\n        return l\n    return -1\n",
        "test": "assert     last([1, 2, 3, 4, 4, 5, 6, 7, 9], 1) == 0",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return True if text[0] == 'a' and text.endswith('b') else False\n",
        "test": "assert     text_starta_endb('aa') == False, 'aa does not contain the substring \"a$\" or \"a$b\"'",
        "num_ids": 218,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict:\n        sum += dict[x]\n    return sum\n",
        "test": "assert     return_sum({1:100, 2:200, 3:300}) == 600, \"Not working for sum.\"",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l,r = 0,0\n    while l < n:\n        if l % 2!= 0:\n            r += l\n        l += 1\n    return r\n",
        "test": "assert     sum_odd(1) == 0",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #return sum(arr)\n    \n    #using list comprehension to find sum\n    return sum([x for x in arr])\n",
        "test": "assert     _sum([1, 2, 3]) == 6",
        "num_ids": 120,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    else:\n        return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n",
        "test": "assert     left_rotate(0,0) == 0",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", '', text)\n",
        "test": "assert     remove_all_spaces('No whitespaces here.') == 'Nowhitespaceshere.'",
        "num_ids": 193,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(1,2,3) == 0, \"Check\"",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    for i in range(len(arr)-1):\n        if arr[i+1] < arr[i]:\n            rotations += 1\n    return rotations\n",
        "test": "assert     count_rotation([1,2,3]) == 0, \"Incorrect count of rotations\"",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 2) :\n        return False\n    x = 1\n    while (x * x <= n) :\n        x = x + 1\n    if (x * x == n) :\n        return True\n    return False\n",
        "test": "assert     is_perfect_square(36) == False, \"the input number must be a perfect square\"",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for n in arr:\n        product *= n\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([2, 4, 6, 8, 10]) == True",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=lambda x: sum(x))\n",
        "test": "assert     max_sum_list([[1, 2, 3], [1, 2, 3]]) == [1, 2, 3]",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n",
        "test": "assert     max_run_uppercase(\"HAPPY\") == 5",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums[0]\n",
        "test": "assert     first_odd([1,2,3,4]) == 1",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     check_K(('K12', 4, 5), 'K12') == True",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for element in range(0,len(test_tup1)):\n            if test_tup1[element] > test_tup2[element]:\n                return False\n    return True\n",
        "test": "assert     check_smaller(('a', 'd', 'z'), ('A', 'D', 'z')) == False",
        "num_ids": 469,
        "indeed": false
    }
]