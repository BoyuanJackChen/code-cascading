[
    {
        "number": 2,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "test": "assert     similar_elements([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4], 'incorrect'",
        "num_ids": 1497,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(3) == False",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]>heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n        \ndef heap_queue_nlargest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]<heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n        \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]<heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n        \ndef heap_queue_nsmallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]>heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n",
        "test": "assert     heap_queue_largest([1],1) == [1]",
        "num_ids": 1885,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    powOfTwo = 0\n    while (x): \n        powOfTwo += 1\n        x &= x-1\n    if (powOfTwo == 1): \n        return True\n    else: \n        return False\n",
        "test": "assert     is_Power_Of_Two (5) == False, 'Wrong answer for is_Power_Of_Two (5)'",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regx = r'\\b[a-zA-Z]{4,}\\b'\n    return re.findall(regx, text)\n",
        "test": "assert     find_char_long('I want') == ['want'], 'error'",
        "num_ids": 3110,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n",
        "test": "assert     (square_nums([1, 2, 3]) == [1, 4, 9]), \"Not Equal\"",
        "num_ids": 951,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    string=list(str)\n    n=len(string)\n    count=0\n    for i in range(1,n):\n        if(string[i]==string[0]):\n            continue\n        else:\n            j=0\n            while(string[i]!=string[j]):\n                j+=1\n            if(j==i):\n                continue\n            else:\n                count+=1\n    return count\n",
        "test": "assert     find_Rotations('a') == 0",
        "num_ids": 1637,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',-1)\n",
        "test": "assert     remove_Occ('1234', '4') == '123'",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    total_sum = []\n    for x in M:\n        total_sum.append(sum(x))\n    \n    M.sort(key=lambda x: sum(x))\n    return M\n    \ndef find_zeros(M):\n    '''\n    Write a function to find the zero elements in a given matrix. An element is considered to be zero if it's value is 0.\n    '''\n    zero_elements = []\n    for x in range(len(M)):\n        for y in range(len(M[0])):\n            if M[x][y] == 0:\n                zero_elements.append([x,y])\n    \n    return zero_elements\n",
        "test": "assert     sort_matrix([[1, 2, 3], [3, 4, 5], [9, 8, 7]]) ==     [[1, 2, 3], [3, 4, 5], [9, 8, 7]]",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\n",
        "test": "assert     find_Volume(5,4,3) == 60",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(\"_\",text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore(\"cat\") == False",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     square_perimeter(3) == 12",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in range(0, NO_OF_CHARS): \n        dict[string[i]] = 0\n    for i in range(0, len(string)): \n        dict[string[i]] += 1\n    return dict\n",
        "test": "assert ",
        "num_ids": 3139,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # return bool([item for item in arraynums if arraynums.count(item) > 1])\n    return len(set(arraynums)) < len(arraynums)\n",
        "test": "assert     test_duplicate([1,2,3,1]) == True",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    x = int(x) \n    y = x % 10 \n    z = x % 100 \n    if (x>=1000 and x<=9999) or (x>=10000 and x<=99999) or (x>=100000 and x<=999999) or (x>=10000000 and x<=9999999) or (x>=100000000 and x<=99999999) :\n        return False\n    elif ((y == 1 or y == 2 or y == 3 or y == 4 or y == 5 or y == 6 or y == 7 or y == 8 or y == 9) and (z == 0 or z == 1 or z == 2 or z == 3 or z == 4 or z == 5 or z == 6 or z == 7 or z == 8 or z == 9)) or ((z == 0 or z == 1 or z == 2 or z == 3 or z == 4 or z == 5 or z == 6 or z == 7 or z == 8 or z == 9) and (y == 0 or y == 1 or y == 2 or y == 3 or y == 4 or y == 5 or y == 6 or y == 7 or y == 8 or y == 9)): \n        return True\n    else: \n        return False\n",
        "test": "assert     is_woodall(422) == False, 'Wrong!'",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = str(num)[::-1]\n    return int(rev) * 2 == num\n",
        "test": "assert not rev(12345) == 54321",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n",
        "test": "assert     find_Max_Num([0, 0, 0, 0]) == 0",
        "num_ids": 3329,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0)^(y<0)\n",
        "test": "assert opposite_Signs(0,42) == False",
        "num_ids": 1363,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3*n - 2)\n",
        "test": "assert     is_octagonal(1)     == 1, 'error' ",
        "num_ids": 753,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    total = 0\n    for i in range(0, len(s)):\n        j = i + 1\n        while j <= len(s):\n            sum_s = sum([int(k) for k in s[i:j]])\n            if sum_s == len(s[i:j]):\n                total += 1\n            j += 1\n    return total\n",
        "test": "assert     count_Substrings(\"1\") == 1",
        "num_ids": 3757,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert     smallest_num([1,2,3,4,0]) == 0, \"Fails to handle the zero case\"",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for x in range(len(test_list)-1):\n        for y in range(x+1,len(test_list)):\n            if (test_list[y] - test_list[x]) > max_diff:\n                max_diff = test_list[y] - test_list[x]\n    return max_diff\n",
        "test": "assert     max_difference([1, 4, 3, 2, 5]) == 4, \"Case 1: incorrect output\"",
        "num_ids": 2622,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks, key = lambda x: x[1]))\n",
        "test": "assert     sorted(subject_marks([])) == []",
        "num_ids": 1704,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([]) == 0, \"incorrect recursive_list_sum\"",
        "num_ids": 1173,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n",
        "test": "assert     pos_count([1,2,3,4,5]) == 5",
        "num_ids": 1449,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(1, i+1):\n            bell[i] = bell[i] + bell[i-j] * bell[j-1]\n    return bell[n]\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 1173,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "test": "assert     is_Monotonic([1,1,2,3,4])== True",
        "num_ids": 1663,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # O(n) where n is the length of l\n    # O(n)\n    if len(l) < len(s):\n        return False\n    s1 = sorted(s)\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    if j == len(s):\n        return True\n    else:\n        return False\n",
        "test": "assert     not is_sublist([1, 2, 3], [2, 4])",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set([len(i) for i in Input])) == 1\n    # return len(set([len(tuple(sorted(i))) for i in Input])) == 1\n    \nprint(find_equal_tuple([(1, 2), (2, 3), (4, 4), (4, 5)]))\nprint(find_equal_tuple([(1, 2), (1, 2, 3), (4, 5), (4, 5, 6)]))\nprint(find_equal_tuple([(1, 2, 3), (1, 2), (4, 5, 6)]))\nprint(find_equal_tuple([(1, 2, 3), (1, 2, 3), (4, 5, 6)]))\nprint(find_equal_tuple([(1, 2, 3, 4), (1, 2, 3, 4), (4, 5, 6)]))\nprint(find_equal_tuple([(1, 2, 3, 4), (1, 2, 3, 4), (4, 5, 6, 7)]))\nprint(find_equal_tuple([(1, 2, 3, 4), (4, 5, 6, 7)]))\n",
        "test": "assert     find_equal_tuple([(1, 2, 3), (4, 5, 6)])",
        "num_ids": 2245,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([1]) == [1]",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    for i in range(n+1):\n        for j in range(n+1):\n            if (i*i + j*j == n):\n                print (\"The number is {}\".format(n))\n                print(\"{} = {} + {}\".format(n, i, j))\n                return True\n    return False\n",
        "test": "assert     dif_Square(36)==True",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns==[]:\n        return True\n    i = 0\n    while i<len(colors):\n        if i==len(patterns):\n            break\n        if colors[i]==patterns[i]:\n            i+=1\n        else:\n            break\n    if i==len(patterns):\n        return True\n    return False\n",
        "test": "assert not is_samepatterns(['a', 'b'], ['ab', 'ba'])",
        "num_ids": 1882,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    assert isinstance(K, int)\n    if K==0:\n        return []\n    else:\n        ret_list = []\n        for tup in test_list:\n            if len(tup) == K:\n                count = 0\n                for element in tup:\n                    if element%K == 0:\n                        count +=1\n                if count == len(tup):\n                    ret_list.append(tup)\n        return ret_list\n",
        "test": "assert     find_tuples([(11, 12), (21, 22), (31, 32)], 3) == []",
        "num_ids": 2117,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    return False\n",
        "test": "assert     is_Diff(11) == True, 'Incorrect'",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "test": "assert     word_len(\"\") == False, \"False\"",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # base cases \n    if n < 0: \n        return None \n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1 \n    if n == 2: \n        return 2 \n    if n == 3: \n        return 3 \n    \n    # get the sum of the tetrahedral numbers \n    tetrahedral_sum = 0 \n    for i in range(n): \n        tetrahedral_sum += tetrahedral_number(i) \n    \n    # return the sum \n    return tetrahedral_sum\n",
        "test": "assert     tetrahedral_number(0) == 0",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n",
        "test": "assert     volume_sphere(0) == 0",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    cnt=0\n    for i in strr:\n        cnt+=ord(i)\n    cnt%=26\n    return string.printable[cnt]\n",
        "test": "assert     get_Char('AB') == '1'",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    for i in range(n-1):\n        a,b = b,a+b\n    return b\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 2684,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4*pi*(r**2)\n    return surface_area\n",
        "test": "assert     surfacearea_sphere(3) == 113.09733552923255, surfacearea_sphere(3)",
        "num_ids": 1247,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(3*n - 1)//2\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict = {**dict1, **dict2, **dict3}\n    return dict\n",
        "test": "assert     merge_dictionaries_three({'a':1,'b':2}, {'c':3}, {'d':4,'e':5})== {'a':1,'b':2,'c':3,'d':4,'e':5}, \"Wrong result for test case 1\"",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict_1 = collections.Counter(list1)\n    return dict_1\n",
        "test": "assert     freq_count([1, 2, 3, 4, 4, 4, 5, 5]) == {1:1, 2:1, 3:1, 4:3, 5:2}",
        "num_ids": 1691,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    s = sorted(list(str(N)))\n    #print(s)\n    #print(int(s[0]) - 1)\n    return int(s[0]) - 1\n",
        "test": "assert     closest_num(2) == 1",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = []\n    for word in list1:\n        len_list.append(len(word))\n    return max(len_list)\n",
        "test": "assert     len_log(['abc', 'def', 'ghi']) == 3",
        "num_ids": 1309,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if(str1[i:i+len(sub_str)] == sub_str):\n            return True\n    return False\n",
        "test": "assert     find_substring(\"this is a test\", \"was\") == False",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    l = str(n)\n    \n    for i in range(1,len(l)):\n        if (int(l[i-1]) == int(l[i])):\n            return False\n        if (int(l[i-1]) < int(l[i])):\n            return False\n    return True\n",
        "test": "assert     is_undulating(22) == False",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a*power(a, b-1)\n    else:\n        return 1/power(a, -b)\n",
        "test": "assert     power(2, 3) == 8, 'power(2,3) is {}'.format(power(2, 3))",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert     index_minimum([(1, 2), (3, 2), (3, 1)]) == 3, 'index_minimum failed'",
        "num_ids": 1505,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < smallest_length:\n            smallest_length = len(lst[i])\n    return smallest_length\n",
        "test": "assert Find_Min_Length([[]]) == 0, 'incorrect output'",
        "num_ids": 2088,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n % 2 == 0:\n        return 2\n    else:\n        count = 1\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                count += 2\n        return count\n",
        "test": "assert     divisor(2) == 2",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] = dict1[i]+1\n        else:\n            dict1[i] = 1\n    return dict1\n",
        "test": "assert     frequency_lists([]) == {}, 'incorrect'",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert     multiply_num([2]) == 2",
        "num_ids": 932,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<=0:\n        return \"0\"\n    else:\n        res=\"\"\n        while n>0:\n            res=str(n%2)+res\n            n=n//2\n        return res\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_list = list(str(num))\n    for i in range(len(num_list)):\n        if num_list[i]!= '9':\n            num_list[i] = str(int(num_list[i]) + 1)\n            break\n        else:\n            num_list[i] = '0'\n    num_list.reverse()\n    return int(''.join(num_list))\n",
        "test": "assert     next_smallest_palindrome(6) == 7",
        "num_ids": 2549,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n",
        "test": "assert     kth_element([1, 2, 3, 4, 5], 2) == 2",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_split = word.split(\"_\")\n    for idx, word_split_item in enumerate(word_split):\n        word_split[idx] = word_split_item.capitalize()\n    return ''.join(word_split)\n",
        "test": "assert     snake_to_camel('snake_to_camel') == 'SnakeToCamel'",
        "num_ids": 1324,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n**m\n",
        "test": "assert     eulerian_num(0, 0) == 1",
        "num_ids": 2249,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted([sorted(sublist) for sublist in input_list])\n",
        "test": "assert     sort_sublists([['a', 'd'], ['b', 'c']]) == [['a', 'd'], ['b', 'c']]",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for item in lst:\n        if item:\n            counter += 1\n    return counter\n",
        "test": "assert     count([False, False, False, False, False]) == 0",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + list(test_tup)\n",
        "test": "assert     (add_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6])",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result=[]\n    result+=num1\n    result+=num2\n    result+=num3\n    result=sorted(result)\n    return result\n",
        "test": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 3696,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i=0\n    for x in s:\n        if i==0:\n            if x=='1':\n                n=n%2\n            else:\n                n=n%2+1\n        else:\n            if x=='1':\n                n=n%2\n            else:\n                n=n%2+1\n        i=i+1\n    return n\n",
        "test": "assert     odd_Equivalent(\"1010\", 1) == 1, \"error\"",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    '''\n    Input: [[9,1,5,7],5,7,[1,3],8,[1,6,2],3]\n    Output: [5,7]\n    '''\n    # nestedlist=[[9,1,5,7],5,7,[1,3],8,[1,6,2],3]\n    list1=[]\n    list2=[]\n    list3=[]\n    for i in nestedlist:\n        if type(i) is list:\n            list1.append(i)\n        elif type(i) is int:\n            list2.append(i)\n    for i in list1:\n        for j in i:\n            if j in list2:\n                list3.append(j)\n    return list3\n",
        "test": "assert     common_in_nested_lists([[1, 2, 3, 4], [2, 3, 4], [3, 4]]) == [], \"Check common_in_nested_lists2\"",
        "num_ids": 3073,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    # Number will be positive or negative\n    # Can contain leading zeros\n    # Floats will be rejected\n    # Case insensitive\n    \n    try:\n        # Attempt to convert the string into an int\n        int(text)\n        return True\n    except ValueError:\n        return False\n        \ndef palindrome(text):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    \n    # Palindrome\n    # Starts with the last char\n    # Ends with the first char\n    # All other chars must be the same\n    \n    # Remove all non alphanumerics\n    for char in text:\n        if char.isalnum() == False:\n            text = text.replace(char, '')\n            \n    if text == text[::-1]:\n        return True\n    else:\n        return False\n        \ndef check_vowels(text):\n    '''\n    Write a function to check how many vowels are in a string.\n    '''\n    \n    # Count the number of vowels\n    # All the vowels must be in lower case\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for char in text.lower():\n        if char in vowels:\n            count += 1\n            \n    return count\n    \ndef unique(text):\n    '''\n    Write a function to check if all the characters in a string is unique.\n    '''\n    \n    # Unique\n    # No two chars can be the same\n    # Does not allow space\n    \n    chars = {}\n    \n    for char in text:\n        if char not in chars and char!='':\n            chars[char] = 1\n        elif char in chars:\n            return False\n    return True\n    \ndef check_pwd(text):\n    '''\n    Write a function to check if a string is a valid password or not.\n    '''\n    \n    # Password\n    # Must be between 6 and 20 chars\n    # Must contain at least one uppercase\n    # Must contain at least one lowercase\n    # Must contain at least one digit\n    # Must contain at least one special character\n    \n    special_chars = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '~', '`', '|', ';', ':', '\"', \"'\", '[', ']', '{', '}', ',', '<', '.', '>', '?', '/']\n    \n    if len(text) < 6 or len(text) > 20:\n        return False\n        \n    chars = []\n    for char in text:\n        if char.isalnum() == False:\n            return False\n        else:\n            chars.append(char)\n            \n    upper_count = 0\n    lower_count = 0\n    digit_count = 0\n    special_count = 0\n    \n    for char in chars:\n        if char.isupper():\n            upper_count += 1\n        elif char.islower():\n            lower_count += 1\n        elif char.isdigit():\n            digit_count += 1\n            \n    for char in special_chars:\n        if char in chars:\n            special_count += 1\n            \n    if upper_count > 0 and lower_count > 0 and digit_count > 0 and special_count > 0:\n        return True\n    else:\n        return False\n    \ndef check_md5(text):\n    '''\n    Write a function to check if a string is a valid md5 hash or not.\n    '''\n    \n    # Hash\n    # 32 chars\n    # Must contain only [a-f] and [0-9]\n    \n    chars = []\n    \n    for char in text:\n        if char.isalnum():\n            chars.append(char)\n    \n    if len(chars)!= 32:\n        return False\n        \n    for char in chars:\n        if char not in 'abcdef0123456789':\n            return False\n    \n    return True\n    \ndef check_sha1(text):\n    '''\n    Write a function to check if a string is a valid sha1 hash or not.\n    '''\n    \n    # Hash\n    # 40 chars\n    # Must contain only [a-f] and [0-9]\n    \n    chars = []\n    \n    for char in text:\n        if char.isalnum():\n            chars.append(char)\n            \n    if len(chars)!= 40:\n        return False\n        \n    for char in chars:\n        if char not in 'abcdef0123456789':\n            return False\n            \n    return True\n    \ndef check_sha256(text):\n    '''\n    Write a function to check if a string is a valid sha256 hash or not.\n    '''\n    \n    # Hash\n    # 64 chars\n    # Must contain only [a-f] and [0-9]\n    \n    chars = []\n    \n    for char in text:\n        if char.isalnum():\n            chars.append(char)\n            \n    if len(chars)!= 64:\n        return False\n        \n    for char in chars:\n        if char not in 'abcdef0123456789':\n            return False\n    \n    return True\n",
        "test": "assert     check_integer('123')     == True ",
        "num_ids": 974,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #write your code here\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if len(i)!= 0:\n                return False\n    return True\n",
        "test": "assert     not empty_dit([{1,2},{},{}])",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    x = 0\n    for num in nums:\n        x = x * 10 + num\n    return x\n",
        "test": "assert     tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                continue\n    return test_list\n",
        "test": "assert     list_to_float([[1], [2], [3]]) == [[1.0], [2.0], [3.0]], \"Test 1 failed\"",
        "num_ids": 1815,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"hello\") == ['hello']",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    dict = {}\n    for i in range(len(arr)):\n        if arr[i] not in dict:\n            dict[arr[i]] = 1\n        else:\n            dict[arr[i]] += 1\n    for i in dict:\n        if dict[i] == 1:\n            return i\n    return \"No unique element in the list\"\n",
        "test": "assert     search([0]) == 0",
        "num_ids": 1341,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for tup in list1:\n        if tup[0]*tup[1] > max_product:\n            max_product = tup[0]*tup[1]\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2),(3,4),(1,2),(3,4)]) ==         12",
        "num_ids": 2395,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1,limit):\n        divisor = sum_of_factors(i)\n        if i == sum_of_factors(divisor) and i!= divisor:\n            amicable_sum += i\n    return amicable_sum\n",
        "test": "assert     amicable_numbers_sum(100000) == 31626",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef complex_formatting(a,b):\n    '''\n    Write a function to format a complex number like this:\n    (x,y) ==> x+yi (positive i imaginary)\n    '''\n    return '({},{})'.format(a,b)\n",
        "test": "assert     cmath.phase(1+1j) == cmath.pi/4",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)): \n        count0 = 0\n        count1 = 0\n        for j in range(i, len(string)): \n            if string[j] == '0': \n                count0 += 1\n            else: \n                count1 += 1\n            max_length = max(max_length, count0, count1)\n    return max_length\n",
        "test": "assert     find_length('01110') == 3, find_length('01110')",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    while(a%b!= 0): \n        c = a%b \n        a = b \n        b = c \n    return b \n",
        "test": "assert sum(1, 10) == 1",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(2, 3) == 6, \"multiply_int(2, 3) == 6 failed\"",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert     long_words(0, ['I', 'am', 'a', 'test', 'case', 'of','strings', 'for', 'your', 'function']) == ['I', 'am', 'a', 'test', 'case', 'of','strings', 'for', 'your', 'function']",
        "num_ids": 1563,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    check_1 = (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]) == (my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0])\n    check_2 = sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2])\n    check_3 = sum(my_matrix[0][i] for i in range(3)) == sum(my_matrix[1][i] for i in range(3)) == sum(my_matrix[2][i] for i in range(3))\n    if check_1 and check_2 and check_3:\n        return True\n    return False\n",
        "test": "assert     not magic_square_test([[1,2,3],[4,5,6],[7,8,9]])",
        "num_ids": 2834,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    my_dict = defaultdict(int)\n    for num in nums:\n        my_dict[num] += 1\n    return max(my_dict, key = my_dict.get)\n",
        "test": "assert     max_occurrences([1,2,3,4,5,6,7,8,9,10]) == 1, \"Testcase 3 failed\"",
        "num_ids": 2084,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"AEIOUaeiou\"\n    str1 = list(str1)\n    i,j = 0, len(str1)-1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n",
        "test": "assert     reverse_vowels(\"\") == \"\"",
        "num_ids": 1717,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(tup1)\n",
        "test": "assert     tup_string(('1',)) == '1'",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = sum(x for x in nums if x < 0)\n    return result\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 701,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def n_hexagonal(n):\n        n = n_hexagonal.base + n\n        return n\n    n_hexagonal.base = 0\n    return n_hexagonal(n)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    # need to count the total number of zeroes and then divide by the total number of non-zeroes.\n    # iterate through the list and do a conditional if \n    \n    # for loop\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes\n",
        "test": "assert     zero_count([1, 1, 1, 1, 1]) == 0.0",
        "num_ids": 6977,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n % 2 == 0): \n        n = n / 2\n    if n == 1: \n        return True\n    while (n > 3): \n        while (n % 2 == 0): \n            n = n / 2\n        if n == 1: \n            return True\n        n = 3 * n + 1\n    return False\n  \ndef isSumOfKEvenPow(n, k): \n    '''\n    Write a Python function to find out whether the given number is a power of two or not. Return true if the given number is a power of two; return false otherwise.\n    '''\n    # Use binary representation of number \n    i = 1\n    while (2**i < n): \n        i += 1\n    if (2**i == n): \n        return True\n    return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(32) == True, \"Wrong\"",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(3) == 18.84955592153876",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result += extract_singly(item)\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert     extract_singly([[1], [2], [3], [4], [5]]) == [1, 2, 3, 4, 5], \"Test Failed\"",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        lst.append(nums[i])\n    nums.clear()\n    for i in range(len(lst)):\n        nums.append(lst[len(lst)-1-i])\n    return nums\n",
        "test": "assert     [1,2,3,4] == pancake_sort([4,3,2,1])",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair=0\n    for i in range(0,3):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            samepair+=1\n    return samepair\n",
        "test": "assert     count_samepair([0,1,0,1,0],[1,2,3,4,5],[2,0,0,0,0]) == 0, \"Test 4 Failed\"",
        "num_ids": 2091,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n",
        "test": "assert     find_lists([])         == 0",
        "num_ids": 1540,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    print(\"The maximum absolute difference between the elements of the array is: \", end =\"\") \n    return max(arr)-min(arr) \n",
        "test": "assert     max_Abs_Diff([10, 10, 10, 10, 10]) == 0",
        "num_ids": 1600,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if (a * x) + b == n:\n            return x, n-x\n    return None\n",
        "test": "assert     find_solution(4, 2, 3) == None",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "test": "assert     remove_elements([1, 2, 3, 4], [1, 2, 3, 4]) == []",
        "num_ids": 1548,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 1:\n        return n\n    else:\n        return n + sum_series(n-2)\n",
        "test": "assert     sum_series(2) == 2, \"check the first example in the instructions\"",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l * (l - 2 * s)) / (4 * tan(pi/5))\n    return area\n",
        "test": "assert     area_polygon(0, 1) == 0, \"error in input\"",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return 0\n    else: \n        sum1 = 0 \n        for i in range(1, n + 1): \n            if n % i == 0: \n                sum1 += i \n        sum2 = 0 \n        for j in range(1, int(math.sqrt(n)) + 1): \n            if n % j == 0: \n                sum2 += j \n                if n / j == j: \n                    sum2 -= j \n        if sum1 == sum2: \n            return True \n        else: \n            return False \n        \nprint(div_sum(22))\nprint(div_sum(31))\nprint(div_sum(6))\nprint(div_sum(12))\nprint(div_sum(9))\nprint(div_sum(13))\nprint(div_sum(25))\nprint(div_sum(1))\nprint(div_sum(42))\nprint(div_sum(85))\nprint(div_sum(120))\nprint(div_sum(2))\nprint(div_sum(100))\nprint(div_sum(100))\nprint(div_sum(10000))\nprint(div_sum(17))\nprint(div_sum(0))\n",
        "test": "assert     div_sum(12) == False",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    count = 0\n    for x in str1.lower():\n        if dict1[x] == dict1[x.lower()]:\n            count += 1\n    return count\n",
        "test": "assert     count_char_position('a') == 1",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum([1 for x in A if (x ^ 2) % 2 == 0])\n",
        "test": "assert     find_even_pair([1, 3, 5]) == 0",
        "num_ids": 1820,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n) \n    return 1 if n == 0 else 2**(n-1).bit_length() \n",
        "test": "assert     next_power_of_2(8) == 8, \"next_power_of_2 should return the smallest power of 2 greater than or equal to 8\"",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a:\n        if i == x: \n            count = count + 1\n    return count\n",
        "test": "assert     frequency([1, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 8, 9], 1) == 1",
        "num_ids": 1230,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    #initialize the sum to 0                                                                                                                                                                                                                        \n    sum = 0\n    #iterate through the list                                                                                                                                                                                                                        \n    for i in range(len(list1)):\n        #check if the list item is within the range                                                                                                                                                                                                                        \n        if i >= m and i <= n:                                                                                                                                                                                                                        \n            #add the list item to the sum                                                                                                                                                                                                                        \n            sum += list1[i]\n    #return the sum                                                                                                                                                                                                                        \n    return sum\n    ",
        "test": "assert     sum_range_list([0, 0, 0], 0, 2) == 0",
        "num_ids": 1775,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    result = 5 * a\n    return result\n",
        "test": "assert     perimeter_pentagon(4) == 20, 'Wrong output'",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance(\"a\") == 0",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list=[]\n    for i in test_tuple:\n        if type(i)==list:\n            for j in i:\n                test_list.append(type(j))\n        else:\n            test_list.append(type(i))\n    print(test_list)\n    if len(set(test_list))>1:\n        return False\n    else:\n        return True\n",
        "test": "assert not check_type((1,2,'3',4,5))",
        "num_ids": 1321,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x > arr[n//2]:\n        return False\n    elif x < arr[n//2]:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_majority([1,2,3,4,5,6,7,8,9,10], 10, 11) == False",
        "num_ids": 3406,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "test": "assert     count_Set_Bits(0) == 0, \"Test case 1 failed.\"",
        "num_ids": 2944,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string = new_string + str[i]\n    return new_string\n",
        "test": "assert     odd_values_string('') == ''",
        "num_ids": 1001,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b: \n        if a < c: \n            return a \n        else: \n            return c \n    else: \n        if b < c: \n            return b \n        else: \n            return c \n",
        "test": "assert     min_of_three(-4,-8,-12) == -12",
        "num_ids": 1349,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    while n>0:\n        if n & 1 == 1:\n            count+=1\n        n = n >> 1\n    return (count >= l and count<=r)\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(0,0,4) == True, \"Test2\"",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while i < n:\n        if arr[i] < 0:\n            while j < n:\n                if arr[j] > 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                j += 1\n            i += 1\n        else:\n            i += 1\n    return arr\n",
        "test": "assert     re_arrange_array([], 0) == []",
        "num_ids": 1925,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    lst = list(str1)\n    for i in range(len(lst)):\n        if lst[i] == \" \":\n            lst[i] = char\n    str1 = \"\".join(lst)\n    return str1\n",
        "test": "assert     replace_blank('Apple tree', '*')!= 'Apple tree tree'",
        "num_ids": 1090,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n    # return sorted(list1,reverse=True)[:n]\n",
        "test": "assert     larg_nnum([1, 3, 4, 3, 2], 0) == []",
        "num_ids": 1600,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area=2*math.pi*r*h\n    return area\n",
        "test": "assert     lateralsuface_cylinder(4,1)         == 0, \"It should be 0\"",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return round(l**3, 2)\n",
        "test": "assert     volume_cube(3) == 27, 'Volume of cube is wrong'",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        n = n & 0xffffffff\n    return n & 0xaaaaaaaa\n",
        "test": "assert     (even_bit_set_number(int('101010', 2))!= int('101101', 2))",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for item in test_list:\n        if item in test_dict:\n            test_dict[item] += 1\n        else:\n            test_dict[item] = 1\n    return test_dict\n",
        "test": "assert     check_occurences([(1, 2, 3), (1, 2, 3), (1, 2, 3)]) == {(1, 2, 3): 3}",
        "num_ids": 4869,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    sub_str = str\n    index = 0\n    count = 0\n    while index < len(sub_str):\n        if sub_str[index] == '0':\n            start = index\n            index += 1\n            while index < length and sub_str[index] == '0':\n                index += 1\n            if index < length and sub_str[index] == '1':\n                while index < length and sub_str[index] == '1':\n                    index += 1\n                if index < length and sub_str[index] == '0':\n                    count += 1\n                elif index < length:\n                    count += 1\n            elif index < length:\n                count += 1\n        else:\n            start = index\n            while index < length and sub_str[index] == '1':\n                index += 1\n            if index < length:\n                while index < length and sub_str[index] == '0':\n                    index += 1\n                count += 1\n        index += 1\n    return count\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 1456,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n:\n        return 0\n    if m == n:\n        return 1\n    if n == 1:\n        return m\n    if n > 1:\n        return sum([get_total_number_of_sequences(m,i) for i in range(1,n)])\n",
        "test": "assert     get_total_number_of_sequences(1,1) == 1",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    elif len(list2) == 0:\n        return list1\n    else:\n        new_list = list1[:len(list1) - 1] + list2\n        return new_list\n",
        "test": "assert     replace_list([1,2,3,4], [5,6]) == [1,2,3,5,6]",
        "num_ids": 1700,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac('abc') == 3, 'error'",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    ##Your code here\n    ##You can check the input is a positive integer.\n    if(isinstance(N,int)==False or N<1):\n        return -1\n    i=0\n    while(True):\n        i=i+1\n        x=i*i\n        if(x>N):\n            return x\n    \ndef nth_Perfect_Square(N): \n    '''\n    Write a python function to find the Nth perfect square greater than a given number.\n    '''\n    ##Your code here\n    ##You can check the input is a positive integer.\n    if(isinstance(N,int)==False or N<1):\n        return -1\n    i=0\n    while(True):\n        i=i+1\n        x=i*i\n        if(x>N):\n            return i\n        \ndef is_Perfect_Square(N): \n    '''\n    Write a python function to check if a given number is a perfect square. \n    '''\n    ##Your code here\n    ##You can check the input is a positive integer.\n    if(isinstance(N,int)==False or N<1):\n        return -1\n    x=math.sqrt(N)\n    if x-int(x) == 0:\n        return True\n    return False\n",
        "test": "assert     next_Perfect_Square(121) == 144 ",
        "num_ids": 1418,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max([sum(arr[:x])+sum(arr[x:]) for x in range(len(arr))])\n",
        "test": "assert     max_sum([1, 2, 3]) == 6",
        "num_ids": 2139,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approximation = number\n    while True:\n        better = (approximation + number / approximation) / 2\n        if better == approximation:\n            return better\n        approximation = better\n",
        "test": "assert     babylonian_squareroot(9) == 3",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    if n <= 1: \n        return n \n    if str[0] == str[n - 1]: \n        return 2 + lps(str[1:n - 1]) \n    else: \n        return max(lps(str[1:n]), lps(str[0:n - 1])) \n  \ndef lps_dp(str):\n    n = len(str)\n    dp = [[0 for x in range(n + 1)] for y in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i!= j:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]\n",
        "test": "assert     lps('cbbd') == 2, 'lps(\"cbbd\") == 2'",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1/n + harmonic_sum(n-1)\n    return sum\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in array_nums1 if x in array_nums2]\n    \ndef intersection_hashtable(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for num in array_nums1:\n        dict1[num] = dict1.get(num, 0) + 1\n    for num in array_nums2:\n        dict2[num] = dict2.get(num, 0) + 1\n    return [key for key in dict1.keys() if key in dict2.keys()]\n    \ndef intersection_hashmap(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for num in array_nums1:\n        dict1[num] = dict1.get(num, 0) + 1\n    for num in array_nums2:\n        dict2[num] = dict2.get(num, 0) + 1\n    return [key for key in dict1.keys() if key in dict2.keys()]\n    \n    \ndef intersection_array_sort(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    idx1 = 0\n    idx2 = 0\n    intersection_nums = []\n    while idx1 < len(array_nums1) and idx2 < len(array_nums2):\n        if array_nums1[idx1] == array_nums2[idx2]:\n            intersection_nums.append(array_nums1[idx1])\n            idx1 += 1\n            idx2 += 1\n        elif array_nums1[idx1] < array_nums2[idx2]:\n            idx1 += 1\n        else:\n            idx2 += 1\n    return intersection_nums\n    \nif __name__ == \"__main__\":\n    array_nums1 = [1,2,2,1]\n    array_nums2 = [2,2]\n    print(intersection_array(array_nums1,array_nums2))\n    print(intersection_hashtable(array_nums1,array_nums2))\n    print(intersection_hashmap(array_nums1,array_nums2))\n    print(intersection_array_sort(array_nums1,array_nums2))\n    ",
        "test": "assert     set(intersection_array([1,2,2,1],[2,2])) == set([2])",
        "num_ids": 3908,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occur_count = 0\n    for i in tup:\n        if i == x:\n            occur_count += 1\n    return occur_count\n",
        "test": "assert count_X((1, 2, 3, 3, 3, 3), 4) == 0",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "test": "assert     insert_element([1], 0) == [0, 1], \"Failed\"",
        "num_ids": 1494,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\n",
        "test": "assert     convert(complex(3,0)) == (3.0, 0.0)",
        "num_ids": 1546,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([e for e in list1 if isinstance(e, int)])\n",
        "test": "assert     count_integer([1, 2, 3, 4, 5, 6, 7]) == 7, \"Test 1 Failed\"",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_com = list(combinations_with_replacement(l, n))\n    return list_com\n",
        "test": "assert     combinations_colors([\"a\",\"b\",\"c\",\"d\",\"e\"],2) == [(\"a\",\"a\"), (\"a\",\"b\"), (\"a\",\"c\"), (\"a\",\"d\"), (\"a\",\"e\"), (\"b\",\"b\"), (\"b\",\"c\"), (\"b\",\"d\"), (\"b\",\"e\"), (\"c\",\"c\"), (\"c\",\"d\"), (\"c\",\"e\"), (\"d\",\"d\"), (\"d\",\"e\"), (\"e\",\"e\")]",
        "num_ids": 2696,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<2:\n        return 0\n    count=0\n    for i in range(2,n):\n        is_prime = True\n        for j in range(2,i):\n            if i%j==0:\n                is_prime=False\n        if is_prime==True:\n            count+=1\n    return count\n",
        "test": "assert     count_Primes_nums(1) == 0, \"Error in count_Primes_nums(1)\"",
        "num_ids": 1208,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "test": "assert     swap_numbers(1, 2) == (2, 1)",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elements = ()\n    # get max values\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if tup1 > tup2:\n            max_elements += (tup1,)\n        elif tup2 > tup1:\n            max_elements += (tup2,)\n        else:\n            max_elements += (tup1,)\n    return max_elements\n",
        "test": "assert     maximize_elements((2,5), (2,5)) == (2,5)",
        "num_ids": 2069,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n == 1):\n        return 2\n    elif (n == 2):\n        return 3\n    elif (n == 3):\n        return 5\n    elif (n == 4):\n        return 7\n    elif (n == 5):\n        return 11\n    elif (n == 6):\n        return 13\n    else:\n        return next_prime(newman_prime(n-1))\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 2159,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #check if len of first tuple is equal to the len of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"The given tuples do not have the same length\")\n    else:\n        len_tup1 = len(test_tup1)\n    \n    #create an empty tuple to store the results\n    new_tup = ()\n    #iterate through each element in the tuple\n    for i in range(len_tup1):\n        #add the result to the new tuple\n        new_tup += (test_tup1[i] / test_tup2[i])\n    return new_tup\n",
        "test": "assert _____, _____",
        "num_ids": 1769,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 4) == ([1, 2, 3, 4], [5, 6, 7, 8])",
        "num_ids": 1943,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return (h_age - 2) * 4 + 21\n",
        "test": "assert     dog_age(2) == 21, 'dog_age(2) should be 21'",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 265,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     list_split([], 2) == []",
        "num_ids": 3279,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n",
        "test": "assert     lateralsurface_cube(1)     == 6, \"Test 1 failed\"",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum",
        "test": "assert     square_Sum(1) == 1, \"Incorrect\"",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * find_star_num(n - 1) + 1\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value(chr(0x41)) == ascii_value('A') == 0x41",
        "num_ids": 2752,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(list(filter(lambda x: x%2==0, arr)))\n",
        "test": "assert     sum_even_and_even_index([2,4,6,8,10,12])",
        "num_ids": 3236,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(1,n+1) if i % 2 == 0])\n    \nif __name__ == '__main__':\n    print(even_Power_Sum(10))\n    # >>> 479001600\n    print(even_Power_Sum(100))\n    # >>> 5040\n    print(even_Power_Sum(1000))\n    # >>> 6796600",
        "test": "assert     even_Power_Sum(0) == 0",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for x in test_list:\n        rear_list.append(x[1])\n    return rear_list\n    ",
        "test": "assert     rear_extract([(1, 2), (2, 3), (3, 2), (4, 5), (5, 6), (7, 2)]) == [2, 3, 2, 5, 6, 2]",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    for i in range(len(list1)):\n        list1[i] = list1[i] - list2[i]\n    return tuple(list1)\n",
        "test": "assert ",
        "num_ids": 1727,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([math.factorial(n)/(math.factorial(i)*math.factorial(n-i)) for i in range(0, n, 2)])\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 1491,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265\n    v = (pi * r**2 * h)\n    return v\n    \nprint(volume_cylinder(4,5))\n",
        "test": "assert     volume_cylinder(0,2) == 0, \"Incorrect\"",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n",
        "test": "assert     {1:2, 3:5, 4:10} == dict_filter(",
        "num_ids": 1309,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == ('b'):\n            break\n        count += 1\n    return count\n",
        "test": "assert count_first_elements(tuple([1])) == 1",
        "num_ids": 6387,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(0.5 * n * (3*n - 1))\n",
        "test": "assert     is_num_decagonal(0) == 0",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    found = False\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    if found:\n        return (found, pos)\n    else:\n        return (found, pos)\n",
        "test": "assert     sequential_search([1,2,3,4,5], 1) == (True, 0), \"sequential_search returns wrong tuple\"",
        "num_ids": 1444,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "test": "assert     all_unique([1,1,1,2,3,2,3]) == False",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y: x-y, nums1,nums2))\nprint(sub_list([1,2,3],[4,5,6]))\n",
        "test": "assert     sub_list([], []) == []",
        "num_ids": 1587,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) < 1:\n        return False\n    \n    return sum([int(i) for i in str(n)]) <= len(str(n))\n",
        "test": "assert     validate(1) == True, \"Wrong answer for 1\"",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check = False\n    for x in list:\n        if x == element:\n            check = True\n    return check\n",
        "test": "assert not check_element([1, 1, 1, 1], 2)",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    m = re.search(r'a.{2,3}b', text)\n    if m:\n        return True\n    else:\n        return False\n",
        "test": "assert     not text_match_two_three('bbbbbb')",
        "num_ids": 5012,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    temp = 0\n    for i in range(k):\n        for j in range(n):\n            temp += a[j]\n        max_sum = max(temp, max_sum)\n        temp = 0\n    for i in range(n):\n        temp += a[i]\n    max_sum = max(temp, max_sum)\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([0,0,0,0], 4, 2) == 0",
        "num_ids": 4327,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(2,n+1,2):\n        sum+=i*i\n    return sum",
        "test": "assert     (square_Sum(1) == 0)",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "test": "assert     max_length([[],[],[],[],[0]]) == 1, \"Check your code\"",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 390,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1:\n        return k\n    if n==2:\n        return k**2\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n    dp[1][0] = 1\n    dp[2][0] = 1\n    dp[2][1] = 2\n    for i in range(3, n+1):\n        for j in range(k):\n            if j==0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j-1]+dp[i-1][j]\n    return dp[-1][-1]\n",
        "test": "assert     count_no_of_ways(4, 3) == 5",
        "num_ids": 2176,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        if (n>m):\n            q=n/m\n            return round(q)\n        else:\n            q=m/n\n            return round(q)\n    except ZeroDivisionError:\n        return \"Error\"\n",
        "test": "assert     find(4,2) ==     2",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "test": "assert     otherside_rightangle(2,1) == math.sqrt(5), 'Should be math.sqrt(5)'",
        "num_ids": 1292,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = -1\n    if not listval:\n        return maxval\n    for item in listval:\n        if type(item) == int or type(item) == float:\n            if item > maxval:\n                maxval = item\n        else:\n            for el in item:\n                if type(el) == int or type(el) == float:\n                    if el > maxval:\n                        maxval = el\n    return maxval\n",
        "test": "assert     max_val([1, 4, -5]) == 4, 'Incorrect'",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, number):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_div(5) ==     1",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr, n):\n        count=0\n        if n <= 1:\n            return arr, count\n        else:\n            mid=n//2\n            L,LC=merge_sort(arr[:mid], len(arr[:mid]))\n            R,RC=merge_sort(arr[mid:], len(arr[mid:]))\n            S=[]\n            i=0\n            j=0\n            k=0\n            while i < len(L) and j < len(R):\n                if L[i] < R[j]:\n                    S.append(L[i])\n                    i+=1\n                else:\n                    S.append(R[j])\n                    j+=1\n                    count+=1\n            if i < len(L):\n                S.append(L[i])\n                i+=1\n            else:\n                S.append(R[j])\n                j+=1\n            return S, count+LC+RC\n    S,C=merge_sort(arr, len(arr))\n    return C\n",
        "test": "assert     get_Inv_Count([1, 2, 3, 4, 5]) ==     0",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return list1\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
        "test": "assert     flatten_list([[1,2,3],[4,5,6]])==[1,2,3,4,5,6]",
        "num_ids": 1510,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for i in stdata:\n        if i[1] > max_agg:\n            max_agg = i[1]\n    return max_agg\n",
        "test": "assert     max_aggregate([(1, 1), (2, 2), (1, 3), (2, 4), (2, 3)]) == 4",
        "num_ids": 2001,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # first binary number \n    #10 \n    # 2(10) + 2(10) = 10(010) + 10(010) \n    #n = 3\n    # 2(010) + 2(010) + 2(010) = 001100 + 001100 + 001100\n    #final = [001100, 001110, 111110, 111111, 111111]\n    #n = 4\n    # 2(110) + 2(110) + 2(110) + 2(110) = 1101010 + 1101010 + 1101010 + 1101010\n    # final = [1101010, 1101011, 1111110, 1111111, 1111111]\n    #n = 5\n    # 2(101) + 2(101) + 2(101) + 2(101) + 2(101) = 1011100 + 1011100 + 1011100 + 1011100 + 1011100\n    # final = [1011110, 1011111, 11110110, 11110111, 11110111]\n    #n = 6\n    # 2(1010) + 2(1010) + 2(1010) + 2(1010) + 2(1010) + 2(1010) = 1011010 + 1011010 + 1011010 + 1011010 + 1011010 + 1011010\n    # final = [1011010, 1011011, 11110110, 11110111, 11110111, 11110111]\n    #n = 7\n    # 2(10100) + 2(10100) + 2(10100) + 2(10100) + 2(10100) + 2(10100) + 2(10100) = 10110100 + 10110100 + 10110100 + 10110100 + 10110100 + 10110100 + 10110100\n    # final = [10110100, 10110101, 11110110, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111]\n    #n = 8\n    # 2(101000) + 2(101000) + 2(101000) + 2(101000) + 2(101000) + 2(101000) + 2(101000) + 2(101000) = 101101000 + 101101000 + 101101000 + 101101000 + 101101000 + 101101000 + 101101000 + 101101000\n    # final = [101101000, 101101001, 11110110, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111]\n    #n = 9\n    # 2(1010000) + 2(1010000) + 2(1010000) + 2(1010000) + 2(1010000) + 2(1010000) + 2(1010000) + 2(1010000) = 1011010000 + 1011010000 + 1011010000 + 1011010000 + 1011010000 + 1011010000 + 1011010000 + 1011010000\n    # final = [1011010000, 1011010001, 11110110, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111]\n    #n = 10\n    # 2(10100000) + 2(10100000) + 2(10100000) + 2(10100000) + 2(10100000) + 2(10100000) + 2(10100000) + 2(10100000) = 10110100000 + 10110100000 + 10110100000 + 10110100000 + 10110100000 + 10110100000 + 10110100000 + 10110100000\n    # final = [10110100000, 10110100001, 11110110, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111]\n    \n    #first binary number \n    #11 \n    # 2(11) + 2(11) = 11(110) + 11(110)\n    #n = 3\n    # 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110\n    #final = [1101110, 1101111, 1111110, 1111111, 1111111]\n    #n = 4\n    # 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111]\n    #n = 5\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111]\n    #n = 6\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111, 1111111]\n    #n = 7\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111, 1111111, 1111111]\n    #n = 8\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111, 1111111, 1111111, 1111111]\n    #n = 9\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111, 1111111, 1111111, 1111111, 1111111]\n    #n = 10\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111, 1111111, 1111111, 1111111, 1111111, 1111111]\n    \n    if n == 1:\n        return 2\n    else:\n        return (2 ** (n - 1)) * count_binary_seq(n - 1) + count_binary_seq(n - 1)\n",
        "test": "assert     count_binary_seq(1) == 2",
        "num_ids": 2980,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    dep = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            dep = max(dep, 1 + dict_depth(d[key]))\n        else:\n            dep = max(dep, 1)\n    return dep\n",
        "test": "assert     dict_depth({\"key1\":1})         == 1, \"Error\"",
        "num_ids": 1229,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] > 0 :\n        return arr[index]\n    if ranges[index] == 0 :\n        return arr[index]\n    i = index\n    while True :\n        if i + 1 < len(arr) :\n            i = i + 1\n        else :\n            i = i + 1\n        if i >= len(arr) :\n            break\n    i = i - len(arr)\n    arr_new = arr[i::] + arr[0:i]\n    if index + rotations < len(arr_new) :\n        return arr_new[index + rotations]\n    if index + rotations >= len(arr_new) :\n        return arr_new[(index + rotations) % len(arr_new)]\n    return 0\n",
        "test": "assert     find_Element([1,2,3,4,5], [1,2,3,4,5], 0, 0) == 1",
        "num_ids": 2470,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    list_words = words.split()\n    first_word = ''\n    second_word = ''\n    for word in list_words:\n        if word[0] == 'p':\n            if first_word == '':\n                first_word = word\n            else:\n                second_word = word\n                \n    if first_word!= '' and second_word!= '':\n        return first_word,second_word\n    else:\n        return 'not found'\n    \n",
        "test": "assert     start_withp(['python', 'coding', 'python', 'language','mathematics', 'programming', 'python','mathematics', 'is', 'fun']) == ['python', 'python']",
        "num_ids": 1678,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    m = [0] * n\n    m[0] = a[0]\n    for i in range(1, n):\n        m[i] = max(m[i - 1], m[i - 1] + a[i] + 1)\n        if i == k - 1:\n            return m[i]\n    for i in range(k - 1, n):\n        m[i] = max(m[i - 1], m[i - 1] + a[i] + 1)\n    return m[n - 1]\n",
        "test": "assert     max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 6, 1, 3) == 106",
        "num_ids": 1792,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_r = ()\n    for i in range(0,len(tuplex),2):\n        tuplex_r = tuplex_r + (tuplex[i:i+2])\n    return tuplex_r\n",
        "test": "assert     colon_tuplex((1,3,4),3,1) == (1,3,4), colon_tuplex((1,3,4),3,1)",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 300,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    \n    for i in range(N):\n        result.append(nums1[i] * nums2[i])\n    result.sort(reverse=True)\n    return result[:N]\n",
        "test": "assert     large_product([1, 2, 3, 4], [1, 2, 3, 4], 2) ",
        "num_ids": 1751,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(2,3) ",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('#') == ('#',)",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # 1. Create a mask with n bits set\n    # 2. Set the lowest unset bit in the mask\n    # 3. Return the masked number\n    \n    mask = n - 1\n    masked = n & mask\n    return masked\n    \nif __name__ == '__main__':\n    print(set_left_most_unset_bit(6))\n    print(set_left_most_unset_bit(10))\n    print(set_left_most_unset_bit(20))\n    print(set_left_most_unset_bit(25))\n    ",
        "test": "assert     set_left_most_unset_bit(0b11111111111111111111111111111111) == 0b11111111111111111111111111111110",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # r is the radius of the base\n    # h is the height\n    return math.pi*r**2*h/3\n",
        "test": "assert     round(volume_cone(1, 1), 3) == round(math.pi * 1 ** 2 / 3, 3)",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<1:\n        raise ValueError('n must be greater than 1')\n    i=0\n    p=1\n    while p<=n:\n        p=p<<i\n        i+=1\n    return p>>i-1\n",
        "test": "assert     highest_Power_of_2(15) == 8",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 28,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = string.replace('[','')\n    string = string.replace(']','')\n    string = string.replace('\"','')\n    string = string.replace(\"'\",'')\n    \n    list_ = string.split(',')\n    \n    return list_\n    \ndef new_list(list_1, list_2, list_3, list_4):\n    '''\n    Write a function to create a list of lists, each containing a string of four items, where each item is the name of a color. \n    For example: ['red', 'green', 'blue', 'yellow']\n    '''\n    list_ = []\n    for i in range(0, len(list_1)):\n        list_.append([list_1[i], list_2[i], list_3[i], list_4[i]])\n        \n    return list_\n    \ndef list_palindrome(string):\n    '''\n    Write a function to determine if a given string is a palindrome. \n    '''\n    list_ = []\n    \n    if len(string) == 0:\n        return False\n    elif len(string) == 1:\n        return True\n    else:\n        for i in range(0, len(string)):\n            list_.append(string[i])\n            \n    for j in range(0, int(len(list_)/2)):\n        if list_[j] == list_[len(list_) - 1 - j]:\n            continue\n        else:\n            return False\n            \n    return True\n    \ndef count_upper(string):\n    '''\n    Write a function to count the number of uppercase letters in a given string. \n    '''\n    count = 0\n    for i in range(0, len(string)):\n        if string[i].isupper():\n            count += 1\n            \n    return count\n    \ndef count_lower(string):\n    '''\n    Write a function to count the number of lowercase letters in a given string. \n    '''\n    count = 0\n    for i in range(0, len(string)):\n        if string[i].islower():\n            count += 1\n            \n    return count\n",
        "test": "assert     add_string([1, 2, 3, 4, 5, 6, 7], '{} {}') == '1 2 3 4 5 6 7'",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d\n    \nl1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nl2 = ['x', 'y', 'z', 'a', 'b', 'c', 'd', 'e']\nl3 = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(convert_list_dictionary(l1, l2, l3)",
        "test": "assert     convert_list_dictionary([1, 2], ['a', 'b'], [10, 11]) == {1: {'a': 10, 'b': 11}}, \"Error\"",
        "num_ids": 1562,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    dp = [0]*(n+1)\n    max_sum = 0\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1], dp[i//2] + i, dp[i//3] + i, dp[i//4] + i, dp[i//5] + i)\n        if max_sum < dp[i]:\n            max_sum = dp[i]\n    return max_sum\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 1293,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n            max_list = i\n    return max_list\n",
        "test": "assert     max_length_list([]) == []",
        "num_ids": 975,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "test": "assert     check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 1093,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1_dict = {}\n    for char in str1:\n        if char not in str1_dict:\n            str1_dict[char] = 1\n        else:\n            str1_dict[char] += 1\n    for char in str1:\n        if str1_dict[char] == 1:\n            return char\n    return None\n",
        "test": "assert     first_non_repeating_character(\"\") == None",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex,string)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char(\"abdcef\") == False",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a >= b and a <= c) or (a >= c and a <= b):\n        return a\n    elif (b >= a and b <= c) or (b >= c and b <= a):\n        return b\n    else:\n        return c\n",
        "test": "assert     median_numbers(1,2,3) == 2",
        "num_ids": 1177,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += sum([int(d) for d in str(num)])\n    return s\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x,y in zip(test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((1,0,1),(1,0,1)) == (0,0,0), \"bitwise_xor test 1 failed\"",
        "num_ids": 1292,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(x) for x in test_list))\n",
        "test": "assert     extract_freq([(2,3), (1,2), (1,3), (2,3), (2,3), (3,2), (3,2)]), 3",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            res_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            res_tup += (test_tup1[i] + test_tup2[i],)\n    return res_tup\n",
        "test": "assert     (add_nested_tuples(((1, 2), (3, 4), (5, 6)), ((1, 2), (3, 4), (5, 6))), ((2, 4), (6, 8), (10, 12)))",
        "num_ids": 2290,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(3,5) == 3",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\nprint(check_tuplex((1,2,3,4),(1,2,3,4,5)))\n",
        "test": "assert     check_tuplex((1,2,3,4,5),(6,7,8,9,10)) == False",
        "num_ids": 1631,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n",
        "test": "assert     find_Parity(24) == False",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    bigger = []\n    nums = [int(i) for i in str(n)]\n    nums = sorted(nums,reverse=True)\n    for i in nums:\n        bigger.append(i)\n    return int(''.join(str(i) for i in bigger))\n",
        "test": "assert     rearrange_bigger(12) == 21",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1)*len(nums2):\n        return []\n    \n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(min_heap, (nums1[i]+nums2[j], i,j))\n    res = []\n    for i in range(k):\n        _, i1, i2 = heapq.heappop(min_heap)\n        res.append([nums1[i1], nums2[i2]])\n    return res\n",
        "test": "assert     k_smallest_pairs([1,1,2], [1,2,3], 2) == [[1,1],[1,1]]",
        "num_ids": 3580,
        "indeed": true
    },
    {
        "number": 409,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    new_list = list()\n    for i in list1:\n        for j in i:\n            new_list.append(j)\n    new_list.sort()\n    a = 0\n    b = 1\n    result = list()\n    for i in range(len(new_list)):\n        if i == 0:\n            result.append(new_list[i] * new_list[i+1])\n            continue\n        elif i == len(new_list) - 1:\n            result.append(new_list[i] * new_list[i-1])\n            continue\n        else:\n            result.append(new_list[i] * new_list[i+1] * new_list[i-1])\n            continue\n    result.sort()\n    return result[0]\n",
        "test": "assert min_product_tuple([(1, 2), (3, 2), (5, 6)]) == 2",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert     min_val(['a', 'b', 'c', 'd']) == 'a', 'wrong result'",
        "num_ids": 2815,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if isinstance(word, str):\n        new_word = re.sub(r'(_\\w)', lambda m: m.group(1)[1].upper(), word)\n        return new_word[0].lower() + new_word[1:]\n    else:\n        print(\"Invalid Input\")\n        return None\n",
        "test": "assert     snake_to_camel('ab_c') == 'abC'",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    list_ = []\n    for n in l:\n        if n % 2!= 0:\n            list_.append(n)\n    return list_\n",
        "test": "assert     remove_odd([]) == [], 'Check if the list is empty'",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    # list1 = [('a', 3),('b', 6),('c', 9),('d', 12),('e', 15),('f', 18),('g', 21),('h', 24),('i', 27),('j', 30),('k', 33),('l', 36),('m', 39),('n', 42)]\n    # n = 5\n    return sorted(list1, key=lambda tup: tup[1])[n-1]\n    \ndef extract_nth_element_2(list1, n):\n    return sorted(list1, key=lambda tup: tup[1])[n-1]\n    ",
        "test": "assert     extract_nth_element([(1,2), (3,4), (5,6)], 1) == (1,2), 'incorrect'",
        "num_ids": 1542,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len(set(list1).intersection(list2))>0\n    \nprint(overlapping([1,2,3,4,5], [1,2,5,6]))\nprint(overlapping([1,2,3,4,5], [1,2,4,6]))\n",
        "test": "assert     overlapping([1,2,3,4],[1,2,3,4,5,6]) is True ",
        "num_ids": 1412,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr:\n        return 0\n    min1 = max(arr)\n    max1 = max(arr)\n    for i in arr:\n        if i < min1:\n            min1 = i\n        if i > max1:\n            max1 = i\n    return min1*max1\ndef find_pair(arr, n):\n    '''\n    Write a python function to find a pair with given sum in a given array of integers.\n    '''\n    if not arr:\n        return 0\n    sum = n\n    s = set()\n    for i in arr:\n        if sum - i in s:\n            return (sum - i, i)\n        s.add(i)\n    return (0,0)\n",
        "test": "assert     max_Product([-1, -2, 3, -4, 4]) == -16",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l = []\n    for i in Input:\n        for j in i:\n            if j not in l:\n                l.append(j)\n    return l\n",
        "test": "assert     [] == group_tuples([])",
        "num_ids": 4255,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if(len(lst) == 0):\n        return\n    elif(len(lst) == 1):\n        return lst[0]\n    else:\n        lst.sort(reverse=True)\n        return lst[0]\n",
        "test": "assert     Find_Max([\"python\", \"is\", \"good\"]) == 'python'",
        "num_ids": 5291,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(round(elem, 1) for elem in list1) * len(list1)\n",
        "test": "assert     round_and_sum([]) == 0",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(2,n+1,2))\n",
        "test": "assert     cube_Sum(1) == 0, \"cube_Sum(1) == 0 Failed\"",
        "num_ids": 2752,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n",
        "test": "assert     concatenate_tuple((\"z\",)) == \"z\", \"concatenate_tuple failed\"",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes=0\n    for i in range(1,n+1):\n        sum_of_cubes=sum_of_cubes+(i**3)\n    print(\"The sum of cubes of first\", n, \"natural numbers is :\", sum_of_cubes)\n    return sum_of_cubes\n",
        "test": "assert     find_Average_Of_Cube(1) == (1.0)",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear(('I', 'am', 'a', 'test', 'tuple')) == 'tuple'",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if type(list1[i]) == list: \n            if x in list1[i]: \n                count += 1\n        else: \n            if x == list1[i]: \n                count += 1\n    return count\n",
        "test": "assert     count_element_in_list([[1,1,2],[2,2],[3,3,3],[1,1,1]], 4) == 0",
        "num_ids": 1646,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "test": "assert     [] == filter_oddnumbers([])",
        "num_ids": 1274,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10] + '-' + dt[5:7] + '-' + dt[:4]\n",
        "test": "assert     change_date_format('2010-12-19') == '19-12-2010'",
        "num_ids": 1276,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1197,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #return tuple(list(map(lambda x,y: x and y, test_tup1, test_tup2)))\n    return tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n",
        "test": "assert     and_tuples((1,2), (1,2,3)) == (1,2)",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return (-b + delta**0.5)/2*a\n    else:\n        x1 = (-b + delta**0.5)/2*a\n        x2 = (-b - delta**0.5)/2*a\n        return (x1, x2)\n",
        "test": "assert     parabola_directrix(a=0, b=0, c=0) == 0, \"Wrong answer for parameter a=0\"",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        for i in list1:\n            if i in list2:\n                return True\n        return False\n",
        "test": "assert     common_element([1,2,3,4],[2,3,4,5]) == True",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2)/2\n    print(\"The median length of the trapezium is:\",median_length)\n    return median_length\n",
        "test": "assert     median_trapezium(5,4,1) == 4.5, \"combination of small and large\"",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in arr:\n        if number > i:\n            flag = True\n        else:\n            flag = False\n            break\n    return flag\n",
        "test": "assert     check_greater([1,2,3,4,5],4) is False",
        "num_ids": 967,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+', re.IGNORECASE)\n    result = pattern.search(text)\n    return result!= None\n",
        "test": "assert     text_match_one('abbbabababbb')",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Even_Last_Odd(n) :\n    '''\n    Write a python function to print out the first even and last odd digits of a number.\n    '''\n    return first_Digit(n), last_Digit(n)\n",
        "test": "assert     last_Digit(last_Digit(8)) == 8",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for x in list1:\n        if x < 0:\n            list2.append(x)\n    return list2\n",
        "test": "assert     neg_nos([1,2,-3,4,-5]) == [-3,-5]",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return remove_odd(str1[:i] + str1[i+1:])\n    return str1\n",
        "test": "assert     remove_odd('h') == 'h'",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for x in range(len(test_list) - 1):\n        if test_list[x][0] == test_list[x + 1][0]:\n            count += 1\n        elif test_list[x][1] == test_list[x + 1][1]:\n            count += 1\n        else:\n            pass\n    return count\n",
        "test": "assert     count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 1), (3, 5)]) == 0",
        "num_ids": 2526,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    n = 0\n    for i in L:\n        n = n*10 + i\n    return n\n",
        "test": "assert     multiple_to_single([0, 0, 0, 0]) == 0",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #text = 'The flight from JFK to LAX was delayed by weather'\n    #print(text)\n    adverb_position = []\n    for i in text.split():\n        if re.search('\\Wadverbs\\W', i):\n            adverb_position.append(text.index(i))\n    return adverb_position\n",
        "test": "assert     find_adverb_position(\"He runs quickly\") == []",
        "num_ids": 4435,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l*l)\n",
        "test": "assert     surfacearea_cube(0) == 0, \"Wrong output\"",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    length = len(nums)\n    pos_count = 0\n    for i in range(length):\n        if nums[i] > 0:\n            pos_count += 1\n    return pos_count / length\n",
        "test": "assert     positive_count([-1,-2,-3,-4,-5]) == 0",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    else:\n        list2 = list1[:]\n        list2.sort()\n        if list2[0] < 0:\n            return list2[0]\n        else:\n            return -1\n    return list1\n    ",
        "test": "assert     largest_neg([1,2,3,4,5,6,7,8,9,10,11,-100]) == -100",
        "num_ids": 1551,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    elif K <= 0:\n        return test_list\n    else:\n        for i in range(0, len(test_list)):\n            if len(test_list[i]) <= K:\n                test_list[i] = tuple(test_list[i])\n        return test_list\n",
        "test": "assert     trim_tuple([], 2) == []",
        "num_ids": 1642,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n",
        "test": "assert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8))     == (5, 12, 21, 32), 'incorrect'",
        "num_ids": 2743,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = 0\n    for ele in lst:\n        if ele in tup:\n            res += 1\n    return res \n",
        "test": "assert     count_Occurrence(('abcd', 'efgh'), 'zxc') == 0",
        "num_ids": 2780,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\nprint(cube_nums([1,2,3,4,5,6]))\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125], 'incorrect output'",
        "num_ids": 1124,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-1) + cal_sum(n-2)\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[0:l] for i in str]\n",
        "test": "assert     extract_string(['123', '456', '789'], 3) == ['123', '456', '789'], '3 characters should be extracted'",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if type(text1) == str:\n        return \"\".join(text1.split())\n    else:\n        return \"wrong input\"\n",
        "test": "assert     remove_whitespaces(\" \") == \"\", \"Wrong result for remove_whitespaces(' ')\"",
        "num_ids": 2157,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost-sale_amount\n    return loss_amount if loss_amount>0 else 0\n",
        "test": "assert     loss_amount(20,20) == 0",
        "num_ids": 917,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 0\n    # sum = 1\n    # for i in range(2, n // 2 + 1):\n    #     if n % i == 0:\n    #         sum += i\n    # return sum\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count = count + i\n    return count\n    # return sum\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef isPerfect(n):\n    if n < 1:\n        return False\n    sum = 1\n    i = 2\n    while i * i < n:\n        if n % i == 0:\n            sum = sum + i + n / i\n        i = i + 1\n    if n == sum:\n        return True\n    return False\n",
        "test": "assert     sumofFactors(0) == 0",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # if 'z' in text:\n    #     return True\n    # else:\n    #     return False\n    return 'z' in text\n",
        "test": "assert not text_match_wordz('the 2 quick brown foxes jumped over 2 lazy dsogs') == 'the 2 quick brown foxes jumped over 2 lazy dogs'",
        "num_ids": 1684,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 29,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        return True\n    elif monthnum2 == 4 or 6 or 9 or 11:\n        return False\n    else:\n        print(\"Incorrect Month Number\")\n        return False\n    \ndef month_number(month):\n    '''\n    Write a function to return the corresponding month number for a given month name.\n    '''\n    if month == \"January\":\n        monthnum = 1\n    elif month == \"February\":\n        monthnum = 2\n    elif month == \"March\":\n        monthnum = 3\n    elif month == \"April\":\n        monthnum = 4\n    elif month == \"May\":\n        monthnum = 5\n    elif month == \"June\":\n        monthnum = 6\n    elif month == \"July\":\n        monthnum = 7\n    elif month == \"August\":\n        monthnum = 8\n    elif month == \"September\":\n        monthnum = 9\n    elif month == \"October\":\n        monthnum = 10\n    elif month == \"November\":\n        monthnum = 11\n    elif month == \"December\":\n        monthnum = 12\n    else:\n        print(\"Incorrect Month Name\")\n        return None\n    return monthnum\n",
        "test": "assert     check_monthnumb_number(5) == True",
        "num_ids": 1568,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "test": "assert     reverse_string_list([]) == [], \"Empty list\"",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst is None or len(lst) == 0:\n        return None\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert     Find_Min([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]) == [1, 2, 3], 'WRONG!'",
        "num_ids": 2832,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(3,6) == 18",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase(\"looooove\") == \"looooove\"",
        "num_ids": 1809,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n",
        "test": "assert     Extract([]) == []",
        "num_ids": 1099,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count = count + 1\n    return count\n",
        "test": "assert     upper_ctr('12345') == 0",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combine_list(list1, start, end, list_of_combinations):\n        if start == end:\n            list_of_combinations.append(list1[:])\n        else:\n            for i in range(start, end+1):\n                list1[start], list1[i] = list1[i], list1[start]\n                combine_list(list1, start+1, end, list_of_combinations)\n                list1[start], list1[i] = list1[i], list1[start]\n    \n    list_of_combinations = []\n    combine_list(list1, 0, len(list1)-1, list_of_combinations)\n    return list_of_combinations\n",
        "test": "assert     [] == combinations_list([])",
        "num_ids": 2491,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr or len(arr) == 0:\n        return None\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        result.append(max(arr[i], arr[i]*result[-1]))\n    return max(result)\n",
        "test": "assert     max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 1585,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.values()) == n\n",
        "test": "assert     check_value({1: 1, 2: 2, 3: 1}, 3) == False, 'check_value failed'",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 1484,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr or len(arr) < 2:\n        return 0\n    max_product_so_far = 1\n    max_product_ending_here = 1\n    for i in range(len(arr)):\n        max_product_ending_here *= arr[i]\n        if arr[i] == 0:\n            max_product_ending_here = 0\n        if max_product_ending_here == 0:\n            max_product_ending_here = 1\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    return max_product_so_far\n",
        "test": "assert     max_product([1, 1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 1793,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    i = 0\n    new_tup = []\n    while(i < len(test_tup)-1):\n        new_tup.append(test_tup[i] + test_tup[i+1])\n        i += 1\n    return tuple(new_tup)\n",
        "test": "assert     (add_pairwise((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 3, 5, 7, 9, 11, 13, 15, 17, 19))",
        "num_ids": 1763,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    x = 0\n    for i in arr:\n        x = x * i % n\n    return x\n",
        "test": "assert     find_remainder([4, 5], 10) == 0",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l) + 1))\n    \ndef check_Monotonic(l): \n    '''\n    Write a python function to check whether the given list contains monotonic numbers or not.\n    '''\n    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or\n        all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n",
        "test": "assert     check_Consecutive([1, 3, 2, 6]) == False",
        "num_ids": 1583,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        if i in test_list2:\n            new_list.append(i)\n    return new_list\n",
        "test": "assert     tuple_intersection([(1, 2, 3), (4, 5, 6)], []) == []",
        "num_ids": 2244,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char(\"hello\",\"z\",'a') == \"hello\", \"replace_char (Simple)\"",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {key:value for key,value in sorted(dict1.items(),key=lambda item:item[1])}\n",
        "test": "assert     Counter({'a':3, 'b':2, 'c':1}) == Counter(dict(sort_counter({'a':3, 'b':2, 'c':1})))",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::2])\n",
        "test": "assert     big_sum([1]) == 1, 'big_sum error'",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('big') == 'big'",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if type(str1) == str:\n        if str1.islower():\n            return re.sub(r\"[a-z]\", \"\", str1)\n        else:\n            return str1\n    else:\n        return str1\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if type(str1) == str:\n        if str1.isupper():\n            return re.sub(r\"[A-Z]\", \"\", str1)\n        else:\n            return str1\n    else:\n        return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits substrings from a given string.\n    '''\n    if type(str1) == str:\n        return re.sub(r\"\\d\", \"\", str1)\n    else:\n        return str1\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove whitespace substrings from a given string.\n    '''\n    if type(str1) == str:\n        return re.sub(r\"\\s\", \"\", str1)\n    else:\n        return str1\ndef remove_chars(str1, chars):\n    '''\n    Write a function to remove all the characters in the given list from a given string.\n    '''\n    if type(str1) == str:\n        return re.sub(r\"|\".join(chars), \"\", str1)\n    else:\n        return str1\ndef remove_duplicate_chars(str1):\n    '''\n    Write a function to remove duplicate characters from a given string.\n    '''\n    if type(str1) == str:\n        return \"\".join(sorted(set(str1), key=str1.index))\n    else:\n        return str1\ndef swap_case(str1):\n    '''\n    Write a function to swap lowercase and uppercase substrings from a given string.\n    '''\n    if type(str1) == str:\n        return str1.swapcase()\n    else:\n        return str1\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    if type(str1) == str:\n        return str1[::-1]\n    else:\n        return str1\ndef reverse_words(str1):\n    '''\n    Write a function to reverse words of a given string.\n    '''\n    if type(str1) == str:\n        return \" \".join(reversed(str1.split()))\n    else:\n        return str1\ndef reverse_words_keep_reverse(str1):\n    '''\n    Write a function to reverse words of a given string keeping the order of the words.\n    '''\n    if type(str1) == str:\n        return \" \".join(reversed(str1.split()))\n    else:\n        return str1\ndef get_substring(str1, start, end):\n    '''\n    Write a function to get a substring of a given string starting from the first char and ending with the last char.\n    '''\n    if type(str1) == str:\n        return str1[start:end+1]\n    else:\n        return str1\ndef get_substring_after_first(str1, sep):\n    '''\n    Write a function to get a substring from a given string after the first occurrence of a given substring.\n    '''\n    if type(str1) == str:\n        return str1.split(sep, 1)[1]\n    else:\n        return str1\ndef get_substring_before_last(str1, sep):\n    '''\n    Write a function to get a substring from a given string before the last occurrence of a given substring.\n    '''\n    if type(str1) == str:\n        return str1.split(sep, -1)[0]\n    else:\n        return str1\ndef get_word_count(str1):\n    '''\n    Write a function to get the count of all the words in a given string.\n    '''\n    if type(str1) == str:\n        return len(str1.split())\n    else:\n        return str1\ndef get_word_count_with_case(str1):\n    '''\n    Write a function to get the count of all the words in a given string with the same case.\n    '''\n    if type(str1) == str:\n        return len(set([i.lower() for i in str1.split()]))\n    else:\n        return str1\ndef get_line_count(str1):\n    '''\n    Write a function to get the count of all the lines in a given string.\n    '''\n    if type(str1) == str:\n        return str1.count(\"\\n\")+1\n    else:\n        return str1\ndef get_line_count_with_case(str1):\n    '''\n    Write a function to get the count of all the lines in a given string with the same case.\n    '''\n    if type(str1) == str:\n        return len(set([i.lower() for i in str1.split(\"\\n\")]))\n    else:\n        return str1\ndef get_char_count(str1):\n    '''\n    Write a function to get the count of all the characters in a given string.\n    '''\n    if type(str1) == str:\n        return len(str1)\n    else:\n        return str1\ndef get_char_count_with_case(str1):\n    '''\n    Write a function to get the count of all the characters in a given string with the same case.\n    '''\n    if type(str1) == str:\n        return len(set([i for i in str1]))\n    else:\n        return str1\ndef find_common(str1, str2):\n    '''\n    Write a function to find the common substrings of two given strings.\n    '''\n    if type(str1) == str and type(str2) == str:\n        return \"\".join(list(set(str1.split()).intersection(str2.split())))\n    else:\n        return str1\ndef find_common_with_case(str1, str2):\n    '''\n    Write a function to find the common substrings of two given strings keeping the case of the characters.\n    '''\n    if type(str1) == str and type(str2) == str:\n        return \"\".join(list(set(str1.lower()).intersection(str2.lower())))\n    else:\n        return str1\ndef get_repeated_count(str1):\n    '''\n    Write a function to get the count of all the repeated characters in a given string.\n    '''\n    if type(str1) == str:\n        str1=str1.lower()\n        return len(re.findall(\"(.)\\\\1{1,}\", str1))\n    else:\n        return str1\ndef get_repeated_count_with_case(str1):\n    '''\n    Write a function to get the count of all the repeated characters in a given string keeping the case.\n    '''\n    if type(str1) == str:\n        return len(set([i.lower() for i in str1]))\n    else:\n        return str1\ndef get_shortest_string(str1, str2):\n    '''\n    Write a function to get the shortest of two given strings.\n    '''\n    if type(str1) == str and type(str2) == str:\n        if len(str1) < len(str2):\n            return str1\n        elif len(str1) > len(str2):\n            return str2\n        else:\n            return str1\n    else:\n        return str1\ndef get_longest_string(str1, str2):\n    '''\n    Write a function to get the longest of two given strings.\n    '''\n    if type(str1) == str and type(str2) == str:\n        if len(str1) < len(str2):\n            return str2\n        elif len(str1) > len(str2):\n            return str1\n        else:\n            return str1\n    else:\n        return st",
        "test": "assert     remove_lowercase(\"string\") == \"\"",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10**(len(str(n))-1))\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0] \n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0 \n    sum_of_numbers = 0\n    for i in range(1,n+1):\n        sum_of_numbers = sum_of_numbers + i\n        sum_of_cubes = sum_of_cubes + (i*i*i)\n    difference = (sum_of_numbers**3) - sum_of_cubes\n    return difference\n",
        "test": "assert     difference(0)==0",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    A.sort()\n    pairs = 0\n    for i in range(0, N, 2):\n        if i!= N - 1:\n            if A[i] ^ A[i + 1] & 1:\n                pairs += 1\n        else:\n            if A[i] ^ A[0] & 1:\n                pairs += 1\n    return pairs\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     find_Odd_Pair( [0, 3, 5, 4, 1], 3) == 2, find_Odd_Pair([0, 3, 5, 4, 1], 3)",
        "num_ids": 3738,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('abc') == 'ABC'",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2))])\n",
        "test": "assert     digit_distance_nums(123, 123) == 0, 'Incorrect result for digit_distance_nums'",
        "num_ids": 1312,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([5, 4, -3, 7, 8], 4) == 13",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1).union(test_tup2)))\n",
        "test": "assert     sorted(union_elements((1, 2, 3, 4), (4, 5, 6, 7))) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 1388,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = len(lst[0])\n    for i in lst:\n        max_length = max(max_length, len(i))\n    return max_length\n",
        "test": "assert     Find_Max_Length([[1], [2], [3]]) == 1, Find_Max_Length([[1], [2], [3]])",
        "num_ids": 1940,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"(.*?)\"', text)\n",
        "test": "assert     extract_values(\"Let's see what we have here.\") == []",
        "num_ids": 3369,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    arr.sort()\n    print(arr)\n    for i in range(len(arr)-1):\n        j = i+1\n        while j < len(arr):\n            if arr[i]!= arr[j]:\n                count += 1\n            j += 1\n    return count\n",
        "test": "assert     count_Pairs([1,2,3],3) == 3",
        "num_ids": 1645,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split(\"abcd\") == ['a', 'b', 'c', 'd'], 'wrong'",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # isinstance(object, type) returns True if the object is of the specified type, otherwise False\n    # isinstance(object, tuple)\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The input must be a non-negative integer!\")\n    return sum([int(i) for i in str(n)])\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list_len = len(list1)\n    for i in range(list_len-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([]) == True",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert     empty_list(1) == [{}], \"Not returning an empty list\"",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # for sublist in list1:\n    #     sublist.sort()\n    # return list1\n    list1.sort(key=lambda x: sorted(x))\n    return list1\n",
        "test": "assert     sort_sublists(['a','c','b','d']) == [['a','b','c','d'],",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = []\n    unique = []\n    for n in nums:\n        if n not in seen:\n            unique.append(n)\n            seen.append(n)\n    return unique\n",
        "test": "assert     two_unique_nums([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1866,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    numbers = list(set(list_data))\n    product = 1\n    for i in numbers:\n        product = product*i\n    return product\n",
        "test": "assert     unique_product([1, 1, 1, 1]) == 1, \"wrong result\"",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*3.14*r*(r + h)\n    return surfacearea\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    surfacearea = 3.14*r*r\n    return surfacearea\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * 3.14*r*r*r\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3 * 3.14*r*r*h\n    return volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = l*l*l\n    return volume\ndef volume_rectangular_prism(w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume = w*h*h\n    return volume\ndef volume_triangular_prism(w,h,t):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    volume = 1/2 * w*h*t\n    return volume\ndef volume_pyramid(w,h,t):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    volume = w*h*t/3\n    return volume\n",
        "test": "assert     surfacearea_cylinder(1,2) == 6.28*3, \"This is not correct.\"",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m=len(A)\n    n=len(B)\n    i=0\n    j=0\n    count=0\n    while i<m and j<n:\n        if A[i]==B[j]:\n            count+=1\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if count==n:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([1,2,3],[0,1,2]) == False, \"WRONG!!!\"",
        "num_ids": 3690,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    if (n < 0): \n        print(\"Invalid input\")\n    elif (n == 0): \n        return 1\n    else: \n        for i in range(1, n + 1): \n            fact = fact * i \n        return fact % 10\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for t in zip(list1,list2,list3) for item in t]\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] ",
        "num_ids": 1810,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1).difference(set(test_tup2)))\n",
        "test": "assert     find_dissimilar((1, 2, 3), (1, 2, 3)) == []",
        "num_ids": 2190,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = ()\n    for item in test_tuple:\n        if even_fnc(item):\n            result += (item,)\n    return result\n",
        "test": "assert     even_ele((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), lambda x: x % 2 == 0) == (2, 4, 6, 8, 10)",
        "num_ids": 3274,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*b)+(b*s)\n",
        "test": "assert     (surface_Area(1,2) == 3) == True",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not dict1\n",
        "test": "assert     my_dict( {'x':1} ) == False",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    import math\n    def binomial_coefficient(n, r):\n        '''\n        Returns binomial coefficient.\n        '''\n        return math.factorial(n) // (math.factorial(r) * math.factorial(n - r))\n    return binomial_coefficient(2*num, num)//(num+1)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'(\\w+)ly$',text)\n    return result\n",
        "test": "assert     find_adverbs('This is a sentence with no adverbs') == []",
        "num_ids": 1572,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items,key=lambda x:x[1],reverse=True)[:n]\n",
        "test": "assert     expensive_items([], 1) == []",
        "num_ids": 2324,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "test": "assert     split_Arr([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5], \"Wrong answer\"",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    try:\n        return tuple(listx)\n    except ValueError:\n        return tuple()\n",
        "test": "assert     list_tuple([1, 2, 3]) ==     (1, 2, 3)",
        "num_ids": 924,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    return (nums[-1]-nums[0])\n    \ndef avg(nums):\n    '''\n    Write a Python function to find the average value in a list.\n    '''\n    nums = sum(nums)/len(nums)\n    return nums\n",
        "test": "assert     big_diff([1, 2, 3, 4, 5, 6]) == 5",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if math.sqrt(i) == int(math.sqrt(i)):\n            perfect_squares.append(i)\n    return perfect_squares\n",
        "test": "assert     (perfect_squares(18, 20) == [])",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\n",
        "test": "assert     polar_rect(0, 0) == (0, 0), \"Polar coordinates to rectangular coordinates: input (0,0), expected output (0,0), computed output \" + str(polar_rect(0, 0))",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef list_Swap(newList): \n    '''\n    Write a python function to convert a list of characters into a string.\n    '''\n    string = \"\"\n    for item in newList:\n        string += item\n    return string\n",
        "test": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0: \n        return 1\n    elif k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "test": "assert     binomial_Coeff(3,2) == 3",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 24,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = list(map(int,ip.split('.')))\n    return str(ip[0]) + '.' + str(ip[1]) + '.' + str(ip[2]) + '.' + str(ip[3])\n",
        "test": "assert     removezero_ip('12.05.03.5') == '12.5.3.5'",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return abs(even[0] - odd[0])\n",
        "test": "assert     diff_even_odd([1, 2, 3, 4, 6]) == 1, \"Check the first even and first odd numbers.\"",
        "num_ids": 1501,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    table = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if str1[i-1] == str2[j-1] :\n                table[i][j] = table[i-1][j-1]\n            else:\n                table[i][j] = 1 + min(table[i-1][j-1], table[i-1][j],table[i][j-1])\n    return table[n][m]\n",
        "test": "assert     min_Swaps(\"1101010\",\"1101010\") == 0, \"test case 3 failed\"",
        "num_ids": 1998,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for i in tuple_list:\n        count += sys.getsizeof(i)\n    return count\n",
        "test": "assert     tuple_size((1,)) == sys.getsizeof(1)",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 < n2:\n        return find_kth(arr2, arr1, k)\n    if n1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k // 2, n1)\n    j = min(k // 2, n2)\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)\n",
        "test": "assert     find_kth([1, 2, 3, 5], [1, 2, 3, 4, 6], 3) == 2",
        "num_ids": 2005,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_value = 0\n    for digit in str(number):\n        digit_value += int(digit) ** len(str(number))\n    return digit_value == number\n",
        "test": "assert     armstrong_number(153) == True, \"Wrong\"",
        "num_ids": 971,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while number!= 0:\n        sum += number\n        count += 1\n        number -= 1\n    average = sum / count\n    return (sum, average)\n",
        "test": "assert     sum_average(10) ==     (55, 5.5)",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_Even(2) == True",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) >= 2:\n            return i\n",
        "test": "assert     first_repeated_char(\"xyzxyzxyz\") == 'x'",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n",
        "test": "assert     get_ludic(0) == [], 'test failed'",
        "num_ids": 4312,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert the string into a list\n    s = s.split(\" \")\n    # Revert the list\n    s = s[::-1]\n    # Join the list elements into one string\n    return \" \".join(s)\n",
        "test": "assert     reverse_words('') == ''",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert     prime_num(2) == True, 'is_prime: 2'",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree*math.pi)/180\n",
        "test": "assert     0.017453292519943295 == radian_degree(1)",
        "num_ids": 2874,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    reg = re.compile(pattern)\n    match = reg.search(text)\n    if match:\n        return match.group(0)\n    return None\n",
        "test": "assert     find_literals(\"abcdef\", \"defg\") == None, \"testing string: \\\"abcdef\\\", pattern: \\\"defg\\\", expected: None\"",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=1\n    for i in range(n):\n        bell=bell*(i+1)\n    return bell\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for item in list1:\n        if list1.index(item)!= L:\n            list2.append(item)\n    return list2\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], 1) == [1, 3, 4, 5], 'incorrect'",
        "num_ids": 1831,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([x[N-1] for x in test_list])\n",
        "test": "assert     max_of_nth([[1, 3, 1], [5, 1, 2], [4, 3, 1]], 1) == 5",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lista = []\n    for i in range(len(lst)):\n        lista.append([lst[i][0], lst[i][1]])\n    return lista\n",
        "test": "assert     merge([[1, 2], [2, 3]]) == [[1, 2], [2, 3]]",
        "num_ids": 1818,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return test_list\n    else:\n        return [sum(test_list[:i]) for i in range(1,len(test_list)+1)]\n",
        "test": "assert     (cummulative_sum([]) == [])",
        "num_ids": 2792,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(tup[0:1])+sum(tup[1:2])+sum(tup[2:3])) / 3 for tup in nums]\n    \n    \n    \n",
        "test": "assert     (average_tuple(((1, 2), (2, 3), (3, 4), (4, 5), (5, 6))) == [3, 4, 5, 6, 6.5])",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(e1 % e2 for e1, e2 in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo( (1,2), (3,4)) == (1, 2), 'incorrect'",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(steps):\n        if(i > 0):\n            if(abs(d - i) > abs(d - i - 1)):\n                jumps += 1\n        else:\n            jumps += 1\n    return jumps\n",
        "test": "assert     min_Jumps(3, 0) == 1, \"WA. Wrong result\"",
        "num_ids": 1456,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1,num2 in zip(nums1,nums2):\n        result.append(num1/num2)\n    return result\n",
        "test": "assert     div_list([1,2,3], [2,2,2]) == [0.5, 1, 1.5], 'incorrect'",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + \\\n           ''.join([i for i in test_str if i.isdigit()])\n",
        "test": "assert     move_num('abc') == 'abc'",
        "num_ids": 3776,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = []\n    start_idx = 0\n    while start_idx < len(a):\n        subsets.append([a[start_idx]])\n        start_idx += 1\n    \n    start_idx = 2\n    while start_idx < len(a):\n        for i in range(len(subsets)):\n            subsets[i].append(a[start_idx])\n            subsets[i] = sorted(subsets[i], reverse=True)\n            if subsets[i][0] % subsets[i][1] == 0 and subsets[i][0]!= subsets[i][1]:\n                subsets.append(subsets[i][1:])\n                subsets[i][0] = -1\n        start_idx += 1\n    \n    subsets = [subset for subset in subsets if subset[0]!= -1]\n    return max([len(subset) for subset in subsets])\n",
        "test": "assert     largest_subset([3, 6, 9, 12]) == 3, \"TEST FAILED: Check the correctness of largest_subset() function\"",
        "num_ids": 1977,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return max(arr1[0], arr2[0])\n    else:\n        if arr1[n//2] < arr2[n//2]:\n            return get_median(arr1[n//2:], arr2, n//2)\n        else:\n            return get_median(arr1, arr2[n//2:], n//2)\n",
        "test": "assert     get_median([0, 0, 0], [0, 0, 0], 3) == 0",
        "num_ids": 2709,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n",
        "test": "assert     nth_nums([1,2,3,4,5],0) == [1,1,1,1,1]",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "test": "assert     is_upper(\"CABBAGE\") == True, \"is_upper('CABBAGE') == True should be True\"",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0] \n    return newList\n",
        "test": "assert     swap_List([1]) == [1], \"swap_List should be [1]\"",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #The area of the triangle is found by using the general formula for area of a triangle,\n    #where the height and the base is used to find the area.\n    #The radius of the semicircle is also used to find the area of the triangle.\n    #r = radius of the semicircle\n    #Area = Sqrt(r^2 x (r^2 + (h/2)^2))\n    #Area = r^2 x (r^2 + (h/2)^2)^0.5\n    #r^2 + (h/2)^2) = h^2\n    #r^2 = h^2 - (h/2)^2\n    #Sqrt(r^2 x (r^2 + (h/2)^2)) = r^2 * (1 + (h/2)^2)^0.5\n    h = r * 2\n    return r**2 * (1 + (h/2)**2)**0.5\n",
        "test": "assert     (triangle_area(0.5) - 1.6094379124341003) < 0.000001",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i:\n            return i\n    return end\n",
        "test": "assert     find_First_Missing([0,1,2,3,4,6,7,9,10],start=5) == 5",
        "num_ids": 2631,
        "indeed": true
    },
    {
        "number": 628,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces(\"\") == \"\", 'Empty string.'",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for num in list:\n        if num % 2 == 0:\n            even_num.append(num)\n    return even_num\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]",
        "num_ids": 1628,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 240,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    add = [i for i in [abs(ele[0]-1), abs(ele[0]+1), abs(ele[1]-1), abs(ele[1]+1), abs(ele[2]-1), abs(ele[2]+1)] if i not in sub]\n    return add\n",
        "test": "assert     adjac((2,0)) == [(0,0), (0,1), (1,0), (1,1), (1,2), (2,1), (2,2)]",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_'.join(text.split(' '))\n",
        "test": "assert     replace_spaces('') == '', 'incorrect'",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    new_list.extend([0]*num_list.count(0))\n    return new_list\n",
        "test": "assert     move_zero([]) == [], \"error\"",
        "num_ids": 1525,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Code :\n    '''\n    def sum_xor(arr,n) : \n        x = 0\n        for i in range(n) : \n            for j in range(i+1, n) : \n                x = x^arr[i]^arr[j]\n        return x\n    return sum_xor(arr,n)\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5],0) == 0",
        "num_ids": 1404,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     [1, 2, 3] == [1, 2, 3]",
        "num_ids": 1763,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return sale_amount <= actual_cost\n    \ndef profit_withloss(actual_cost,sale_amount):\n    '''\n    Write a function to calculate the profit with loss\n    '''\n    loss = sale_amount - actual_cost\n    return loss\n    \ndef profiloss_message(sale_amount,actual_cost):\n    '''\n    Write a function to return the message in case of no profit and no loss\n    '''\n    if noprofit_noloss(actual_cost,sale_amount):\n        return 'The amount of sale is equal to or less than the actual cost of the product, Hence, no profit or loss'\n    elif noprofit_noloss(actual_cost,sale_amount):\n        return 'The amount of sale is equal to or less than the actual cost of the product, Hence, no profit or loss'\n    else:\n        return 'The amount of sale is more than the actual cost of the product, hence profit will be recorded'\n",
        "test": "assert     noprofit_noloss(1,1)",
        "num_ids": 3046,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215 * t) - (11.37 * (v ** 0.16)) + (0.3965 * t * (v ** 0.16))\n    return round(wci)\n    \ndef mean_sea_level_pressure(p, h):\n    '''\n    Write a function to calculate the mean sea level pressure in pascals given the pressure in pascals and the height in metres.\n    '''\n    mslp = p * ((1 - 0.0065 * h) ** 5.2561)\n    return mslp\n    \ndef wind_direction(u,v):\n    '''\n    Write a function to calculate the wind direction from u and v wind components in km/h.\n    '''\n    wind_direction = math.degrees(math.atan2(u,v))\n    return wind_direction\n    \ndef apparent_temperature(t, rh, v):\n    '''\n    Write a function to calculate the apparent temperature in celsius given the temperature in celsius, the relative humidity in percent and the wind velocity in km/h.\n    '''\n    a = 17.625 * t\n    b = 237.7 * (rh / 100)\n    c = 2.0 * v ** 0.16\n    apparent_temp = a + (b * c)\n    return apparent_temp\n    \ndef relative_humidity(t, p, a):\n    '''\n    Write a function to calculate the relative humidity in percent given the temperature in celsius, the pressure in hPa and the actual vapor pressure in hPa.\n    '''\n    temp_diff = t - a\n    e = 6.11 * (10 ** (7.5 * temp_diff / (237.7 + temp_diff)))\n    rh = (e * p) / (0.622 + e)\n    rh = round(rh, 3)\n    return rh\n    \ndef dew_point(t, rh):\n    '''\n    Write a function to calculate the dew point in celsius given the temperature in celsius and the relative humidity in percent.\n    '''\n    temp_diff = t - ((100 - rh) / 5)\n    dew_point = temp_diff - ((100 - rh) / 10)\n    return dew_point\n    \ndef vapor_pressure(t,rh):\n    '''\n    Write a function to calculate the vapor pressure in hPa given the temperature in celsius and the relative humidity in percent.\n    '''\n    temp_diff = t - (100 - rh)\n    e = 6.11 * (10 ** (7.5 * temp_diff / (237.7 + temp_diff)))\n    return e\n    \ndef wind_chill_index(t, v):\n    '''\n    Write a function to calculate the wind chill index given the temperature in celsius and the wind velocity in km/h.\n    '''\n    wci = 13.12 + (0.6215 * t) - (11.37 * (v ** 0.16)) + (0.3965 * t * (v ** 0.16))\n    return wci\n    \ndef heat_index(t,rh):\n    '''\n    Write a function to calculate the heat index given the temperature in celsius and the relative humidity in percent.\n    '''\n    a = -42.379\n    b = 2.04901523\n    c = 10.14333127\n    d = -0.22475541\n    e = -6.83783e-3\n    f = -5.481717e-2\n    g = 1.22874e-3\n    h = 8.5282e-4\n    i = -1.99e-6\n    j = 2.0e-7\n    k = 5.379e-2\n    l = -1.1e-3\n    m = -1.8e-5\n    n = -1.01e-7\n    temp_diff = t - (100 - rh)\n    heat_index = a + (b * temp_diff) + (c * (temp_diff ** 2)) + (d * (temp_diff ** 3)) + (e * (temp_diff ** 4)) + (f * (temp_diff ** 5)) + (g * (temp_diff ** 6)) + (h * (temp_diff ** 7)) + (i * (temp_diff ** 8)) + (j * (temp_diff ** 9)) + (k * (temp_diff ** 10)) + (l * (temp_diff ** 11)) + (m * (temp_diff ** 12)) + (n * (temp_diff ** 13))\n    return heat_index\n    \ndef dew_point_index(t, v):\n    '''\n    Write a function to calculate the dew point index given the temperature in celsius and the wind velocity in km/h.\n    '''\n    dew_point = t - ((100 - 0.01 * v) / 5)\n    return dew_point\n    \ndef wind_speed_to_gust(v):\n    '''\n    Write a function to calculate the wind gust speed given the wind speed in km/h.\n    '''\n    g = v ** 1.5\n    return g\n    \ndef max_wind_speed(u, v):\n    '''\n    Write a function to calculate the maximum wind speed in km/h given the u and v wind components in km/h.\n    '''\n    max_wind_speed = math.sqrt(u ** 2 + v ** 2)\n    return max_wind_speed\n    \ndef pressure_altitude(p, h):\n    '''\n    Write a function to calculate the pressure altitude in metres given the pressure in hPa and the height in metres.\n    '''\n    altitude = (p * (h ** -5.257))\n    return altitude\n    \ndef sea_level_pressure(p, h):\n    '''\n    Write a function to calculate the sea level pressure in hPa given the pressure in hPa and the height in metres.\n    '''\n    sea_level = p * ((1 - 0.0065 * h) ** 5.2561)\n    return sea_level\n",
        "test": "assert     wind_chill(12, 20) == 20.0",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name)-name.islower() for name in sample_names])\n",
        "test": "assert     sample_nam(['abc', 'abcde']) == 6",
        "num_ids": 3425,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while True:\n        if items.find(\"(\") == -1:\n            return items\n        else:\n            items = items.replace(\"(\",\"\",1).replace(\")\",\"\",1)\n",
        "test": "assert     remove_parenthesis(\"do not remove parenthesis from this string\") == \"do not remove parenthesis from this string\", 'Incorrect'",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    import math \n    return int(n*(n+1)/2)\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    pattern = re.compile(r'^.*z.*$')\n    result = re.findall(pattern, text)\n    print(result)\n    return bool(result)\n",
        "test": "assert     text_match_wordz_middle('arizona') == True, 'arizona should return True'",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # for i in range(k+1, len(input)):\n    #     input[k], input[i] = input[i], input[k]\n    # print(input)\n    input[k:len(input)] = reversed(input[k:len(input)])\n    return input\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4], 4) == [1,2,3,4]",
        "num_ids": 2213,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "test": "assert     (add_dict_to_tuple(('a', 'b', 'c'), {'a': 1, 'b': 2, 'c': 3}) == ('a', 'b', 'c', {'a': 1, 'b': 2, 'c': 3}))",
        "num_ids": 1987,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    memo = {}\n    def maxAverageOfPathRecursive(row, col, memo, cost):\n        if (row, col) in memo:\n            return memo[(row, col)]\n",
        "test": "assert     maxAverageOfPath([[10,20,30,40],",
        "num_ids": 4795,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # for i in students:\n    #     if students[i][0] > h and students[i][1] > w:\n    #         print(i)\n    #         students[i] = i\n    students = {i : (students[i][0],students[i][1]) for i in students if students[i][0] > h and students[i][1] > w}\n    return students\n",
        "test": "assert     filter_data({'Rolf': (1.8, 75.0), 'Bob': (1.85, 80.0), 'Charlie': (1.7, 70)}, 1.75, 75.0) == {'Bob': (1.85, 80.0)}",
        "num_ids": 3067,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([], []) == 0",
        "num_ids": 2070,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # import math\n    # base, power = [int(i) for i in input().split()]\n    # return sum([int(i) for i in str(math.pow(base, power))])\n    if power == 0:\n        return 1\n    elif power == 1:\n        return base\n    else:\n        return base * power_base_sum(base, power - 1)\n",
        "test": "assert     power_base_sum(base = 3, power = 2) == 9",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    text2=text1[text1.find('\"')+1:text1.rfind('\"')]\n    \n    return text2\n    \n    \ndef extract_para(text1):\n    '''\n    Write a function to extract values between parentheses () of the given string.\n    '''\n    \n    text2=text1[text1.find('(')+1:text1.rfind(')')]\n    \n    return text2\n",
        "test": "assert     extract_quotation(\"She said \\\"I am fine\\\"\") == \"I am fine\"",
        "num_ids": 2167,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_i * t_i_1 for t_i, t_i_1 in zip(test_tup,test_tup[1:]))\n",
        "test": "assert     (0, 0, 0) == multiply_elements((0, 0, 0, 0))",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res = []\n    for i in range(len(lst1)):\n        res.append(lst1[i] + lst2[i])\n    return res\n",
        "test": "assert     [0,0,0,0,0] == sum_list([0,0,0,0,0],[0,0,0,0,0])",
        "num_ids": 982,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 31,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    print(list(groupby(nums)))\n    return [x for x, y in groupby(nums)]\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 2197,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r**2 * (h/3)\n    return lateral_surface_area\n",
        "test": "assert     lateralsurface_cone(0,0) == 0",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    return text\n",
        "test": "assert     replace_specialchar('') == '','replace_specialchar should be \" \"'",
        "num_ids": 1321,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 3, 5, 5, 5, 7, 9, 9, 9, 15], 1) == 0",
        "num_ids": 1751,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 1608,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & ~0x55555555) ^ ((n & 0xAAAAAAAA) >> 1)) & 0xFFFFFFFF\n",
        "test": "assert     set_middle_bits(0) ==    0",
        "num_ids": 2602,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    a.sort()\n    return a.index(x)\n",
        "test": "assert     bisect.bisect_left([1,2,4,5], 3) == 2",
        "num_ids": 1563,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 25,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # return string[0] in ['a','e','i','o','u','A','E','I','O','U']\n    return bool(re.match(regex, string))\n",
        "test": "assert     check_str(\"apple\") == True, \"String should start with a vowel.\"",
        "num_ids": 3115,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n - 1)\n",
        "test": "assert     geometric_sum(1) ==     1",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangle = [] \n    \n    for i in range(1, 100): \n        triangle.append(i * (i + 1) // 2) \n    \n    for i in range(1, 100): \n        if n < 10: \n            if triangle[i] >= n: \n                return i \n        else: \n            if triangle[i] >= n: \n                if int(math.log10(n) + 1) - math.log10(triangle[i]) > int(math.log10(n) + 1) - math.log10(triangle[i - 1]): \n                    return i \n            else: \n                if int(math.log10(n) + 1) - math.log10(triangle[i]) < int(math.log10(n) + 1) - math.log10(triangle[i - 1]): \n                    return i - 1\n",
        "test": "assert     math.factorial(9) ==     362880",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    return test_dict\n",
        "test": "assert     tuple_to_dict(('Yektanet','Mikel','Joe','Carmen')) ",
        "num_ids": 1264,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[0]!= s[i] :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('python') == False, 'all_Characters_Same should return False for string with more than one character.'",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3)*side**2) / 4\n",
        "test": "assert     area_tetrahedron(0)==0",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # list = list(list)\n    list = list[m:] + list[:m]\n    return list\n",
        "test": "assert     rotate_right([1,2,3,4,5,6,7,8], 4) == [5,6,7,8,1,2,3,4] ",
        "num_ids": 1337,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup!= None:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_none((1, 2, 3)) == False, \"check_none((1, 2, 3)) == False\"",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return set(filter(lambda n: all([n % int(digit) == 0 for digit in str(n)]),range(startnum,endnum+1)))\n",
        "test": "assert     divisible_by_digits(1234, 1234) == [1234]",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    import math\n    if a < 360:\n        area = math.pi*(r**2)*(a/360)\n        return area\n    else:\n        return None\n",
        "test": "assert     sector_area(4,450) ==     None",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    \n    L = [[[0 for k in range(l + 1)] for i in range(n + 1)] for j in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    return L[m][n][l] \n",
        "test": "assert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGGTAXB\") == 4",
        "num_ids": 2792,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital_words = r\"\\b[A-Z][a-z]*\\b\"\n    pattern = re.compile(capital_words)\n    return \" \".join(pattern.findall(str1))\n",
        "test": "assert     capital_words_spaces('') == ''",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) for x in nums_str]\n    nums.sort()\n    return [str(x) for x in nums]\n",
        "test": "assert     sort_numeric_strings(['5', '3', '1', '2', '4']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)\n",
        "test": "assert     add_tuple([1, 2], (3, 4))!= [1, 2, 3]",
        "num_ids": 1300,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if (2*i+1 < len(arr) and arr[i] < arr[2*i+1]) or (2*i+2 < len(arr) and arr[i] < arr[2*i+2]):\n        return False\n    return check_min_heap_helper(arr, i-1)\n",
        "test": "assert     check_min_heap_helper([0, 8, 5, 1, 7, 6, 3, 2, 4], 2) == False, \"Incorrect\"",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # get nth jacobsthal number\n    return n * (n + 1) // 2 \n",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    res = []\n    for i in range(len(test_list)):\n        k = test_list[i][0]\n        if k <= K:\n            res.append(test_list[i])\n    return res\n",
        "test": "assert     min_k(((2,2,2),(1,1,1)), 0) == []",
        "num_ids": 2564,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n",
        "test": "assert     extract_index_list([], [], []) == [], \"test 3\"",
        "num_ids": 2119,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    list_numbers = sorted(numbers)\n    if len(list_numbers) < 2:\n        return None\n    else:\n        return list_numbers[1]\n",
        "test": "assert     second_smallest([5, 4, 3, 2, 1]) == 2",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.+b',text) is not None\n",
        "test": "assert     re.match(\"[ab]+\", \"a\")",
        "num_ids": 1183,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                total_pairs += 1\n    return total_pairs\n",
        "test": "assert     count_reverse_pairs([\"abcd\"]) == 0, \"Incorrect\"",
        "num_ids": 1319,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i) == list:\n            new_list.append(tuple(i))\n    set1 = set(new_list)\n    dic1 = {}\n    for i in set1:\n        dic1[i] = new_list.count(i)\n    return dic1\n",
        "test": "assert     unique_sublists([[1, 2], [2, 3], [2, 3], [2, 3]]) == {(1, 2): 1, (2, 3): 3}, 'Test 1: 2'",
        "num_ids": 1960,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 28,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if num.find('.')!= -1 and len(num) >= 3 else False\n",
        "test": "assert     is_decimal('1e1') == False, 'Check your input'",
        "num_ids": 1184,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # code here\n    # create an empty list for storing the unique elements\n    unique_list = []\n    # iterate through each element of the list and if it is not already in unique_list add it to unique_list\n    for i in range(len(arr)):\n        if arr[i] not in unique_list:\n            unique_list.append(arr[i])\n    # if the length of unique_list is less than 2, return False\n    if len(unique_list) < 2:\n        return False\n    # return True if the length of unique_list is 2\n    else:\n        return True\n        ",
        "test": "assert     unique_Element([1, 2, 3, 4, 5]) == True, \"Fails\"",
        "num_ids": 2964,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber_number = {1:31,\n                        2:28,\n                        3:31,\n                        4:30,\n                        5:31,\n                        6:30,\n                        7:31,\n                        8:31,\n                        9:30,\n                        10:31,\n                        11:30,\n                        12:31}\n    if monthnum3 in monthnumber_number:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(12) == True",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n < 3: return 0\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff\n",
        "test": "assert     find_min_diff([2, 3, 4, 5, 6], 5) == 1",
        "num_ids": 1440,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in str:\n        if i.isdigit():\n            number += 1\n    return number\n",
        "test": "assert     number_ctr('1234567890') == 10",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n<1): \n        return 0\n    if(n==1): \n        return 1\n    if(n==2): \n        return 2\n    if(n==3): \n        return 3\n    else: \n        return (2*n-3)*(n-1)//(n-2)\n",
        "test": "assert     is_polite(0) == 0",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "test": "assert pair_wise([]) == []",
        "num_ids": 1209,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Hash Map for storing the count\n    # Hash Map for fast look up\n    hash_map = {}\n    \n    for i in arr:\n        hash_map[i] = hash_map.get(i, 0) + 1\n    \n    \n    for i in arr:\n        if(sum - i) in hash_map:\n            return hash_map[i]*hash_map[sum-i]\n    return 0\n",
        "test": "assert     get_pairs_count([1,2,3,4,5], 0) == 0",
        "num_ids": 1269,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "test": "assert     Diff([1,2,3],[1,2]) == [3]",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n+1):\n        if (x % 2!= 0):\n            sum += x**4\n    return sum\n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(' or char == '[' or char == '{':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        elif char == '}':\n            if len(stack) > 0 and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n    \n",
        "test": "assert     check_expression('(3^2 + 8)*(5/2))/(2+6)') == False, \"check_expression test case 2 failed\"",
        "num_ids": 2182,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words_to_remove = set()\n    words = test_str.split()\n",
        "test": "assert     remove_length(",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = []\n    if pattern in text:\n        for i in range(len(text)):\n            if text[i:].startswith(pattern):\n                result.append(i+1)\n                result.append(i+len(pattern))\n    return result\n",
        "test": "assert     occurance_substring(\"FooBar\", \"oo\")!= {'F': [0], 'o': [1], 'b': [3], 'a': [6]}",
        "num_ids": 2027,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i%2==0 and nums[i]%2==0:\n            return False\n    return True\n    pass\n",
        "test": "assert     odd_position([1, 2, 3, 4, 6]) == False, \"Wrong result!\"",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert     count_vowels('') == 0, 'check #1'",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_rep = []\n    for i in range(len(arr)):\n        if arr.count(arr[i])==1:\n            non_rep.append(arr[i])\n    return sum(non_rep)\n    \n    \n    \n    \n",
        "test": "assert     find_sum([1,2,3,4,5,6])     == 21",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    newlist = []\n    for key, group in groupby(list1):\n        group_list = list(group)\n        newlist.append(group_list)\n    return newlist\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 2224,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    sub_list = []\n    for sub_list in list1:\n        if sub_list not in unique_list:\n            unique_list.append(sub_list)\n    unique_list_tuple = []\n    for sub_list in unique_list:\n        unique_list_tuple.append(tuple(sub_list))\n    unique_list_dict = dict(zip(unique_list_tuple, [0]*len(unique_list)))\n    for sub_list in list1:\n        for i in range(len(unique_list_tuple)):\n            if sub_list == list(unique_list_tuple[i]):\n                unique_list_dict[unique_list_tuple[i]] += 1\n    return unique_list_dict\n",
        "test": "assert     unique_sublists([[1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8, 9], [9, 10, 11], [11, 12, 13]]) == {(1, 2, 3): 1, (3, 4, 5): 1, (5, 6, 7): 1, (7, 8, 9): 1, (9, 10, 11): 1, (11, 12, 13): 1}, \"unique_sublists test 1\"",
        "num_ids": 2570,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for i in range(1, len(test_list)):\n        for x in combinations(test_list, i):\n            if sum(x) not in final_list:\n                final_list.append(sum(x))\n    return final_list\n",
        "test": "assert     (list(combinations([1,2,3,4],2))) == [(1, 2),(1, 3),(1, 4),(2, 3),(2, 4),(3, 4)]",
        "num_ids": 7319,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1): \n        if (n % i == 0): \n            \n            if (n / i == i): \n                count = count + 1\n            else: \n                count = count + 2\n    return count\n",
        "test": "assert     count_divisors(1)     ==    1",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(i) for i in arr if len(i) % 2!= 0])\n",
        "test": "assert ",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / (max_value - min_value))\n    elif max_value == g:\n        h = 60 * ((b - r) / (max_value - min_value)) + 120\n    elif max_value == b:\n        h = 60 * ((r - g) / (max_value - min_value)) + 240\n    \n    if max_value == 0:\n        s = 0\n    else:\n        s = 1 - (min_value / max_value)\n    \n    v = max_value\n    \n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)",
        "num_ids": 2738,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_index = []\n    odd_index = []\n    for index in range(len(list1)):\n        if list1[index] % 2 == 0:\n            even_index.append(index)\n        else:\n            odd_index.append(index)\n    product = 1\n    for i in even_index:\n        product = product * list1[i]\n    for j in odd_index:\n        product = product * list1[j]\n    return product\n",
        "test": "assert     mul_even_odd([0, 3, 4, 5]) == 0",
        "num_ids": 3219,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(\"(\",\"\")\n    test_str = test_str.replace(\")\",\"\")\n    test_str = test_str.split(\",\")\n    for i in range(0,len(test_str)):\n        test_str[i] = int(test_str[i])\n    return tuple(test_str)\n",
        "test": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)",
        "num_ids": 1428,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    return i\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a,x)\n    return i\ndef find(a, x):\n    '''\n    Write a function to locate a specified value in a sequence. \n    '''\n    i = bisect.bisect_left(a,x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n    \ndef binary_search(a, x):\n    '''\n    Write a function to find a specified value in a sorted sequence.\n    '''\n    i = bisect.bisect_left(a,x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n",
        "test": "assert     right_insertion([1,2,3,4,4], 0) == 0",
        "num_ids": 1178,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search('ab{3}', text)\n    return match!= None\n",
        "test": "assert     re.match('a.{3}b', 'abbbb')",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    #method 1\n    return tuple(test_list + [test_str])\n    \n    \n    #method 2\n    return tuple(test_list) + (test_str,)\n    \n    \n    #method 3\n    #use the existing tuple to find the index of test_str, then replace the value of that index with the new tuple\n    #add the new string at the end\n    \n    #method 4\n    #create a new list from the tuple and then add the string to it\n    #use the new list to create the new tuple\n    \n    \n    #method 5\n    #create a new tuple with a single element at the end\n    #use the index of that single element to replace the value at that index\n    #use the new tuple to create a new tuple with the old tuple with the new element at the end\n    \n    \n    #method 6\n    #return the tuple without changing it\n    \n    \n    \n    #method 7\n    #create a new tuple with the given string and then add the new tuple to the end of the tuple\n    #create a new tuple without the existing string and then add the new tuple to the end of the tuple\n    \n    \n    #method 8\n    #use a for loop to create the new tuple\n    \n    \n    #method 9\n    #use the built in function to create a new tuple\n    \n    \n    #method 10\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 11\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 12\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 13\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 14\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 15\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 16\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 17\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 18\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 19\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 20\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 21\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 22\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 23\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 24\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 25\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 26\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 27\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 28\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 29\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 30\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 31\n    ",
        "test": "assert     new_tuple(['a', 'b'], 'c') == ('a', 'b', 'c'), 'incorrect'",
        "num_ids": 3376,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2 == 0:\n                continue\n            else:\n                return False\n    return True\n",
        "test": "assert even_position([1,3,5]) == False, 'Fails'",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup\n",
        "test": "assert     remove_nested(()) == ()",
        "num_ids": 2037,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in input_list:\n        if type(i)==list:\n            count+=1\n    return count\n",
        "test": "assert     count_list([[1,2,3], [4,5,6], [7,8,9]]) ",
        "num_ids": 1292,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    l,r = 0,n-1\n    while l<=r:\n        mid = (l+r)//2\n        if arr[mid]>x:\n            r = mid-1\n        elif arr[mid]<x:\n            l = mid+1\n        else:\n            if mid==n-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                l = mid+1\n    return -1\n",
        "test": "assert     last([1, 2, 3, 4, 4, 5, 6, 7, 9], 1) == 0",
        "num_ids": 1811,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'a[\\w]+b')\n    mo = regex.search(text)\n    if mo is None:\n        print(\"-1\")\n    else:\n        print(mo.group())\n",
        "test": "assert     text_starta_endb('') == None",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict:\n        sum += dict[x]\n    return sum\n",
        "test": "assert     return_sum({1:100, 2:200, 3:300}) == 600, \"Not working for sum.\"",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n * (n + 1) / 2\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #return sum(arr)\n    \n    #using list comprehension to find sum\n    return sum([x for x in arr])\n",
        "test": "assert     _sum([1, 2, 3]) == 6",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #print(bin(n)[2:])\n    #print(bin(d)[2:])\n    n_bin = bin(n)[2:]\n    \n    if len(n_bin)<d:\n        d=d%len(n_bin)\n        n_bin='0'*(d-1)+n_bin\n    new_n_bin = n_bin[d:]+n_bin[:d]\n    #print(bin(int(new_n_bin,2))[2:])\n    return int(new_n_bin,2)\n",
        "test": "assert     left_rotate(0,0) == 0",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", '', text)\n",
        "test": "assert     remove_all_spaces(\"\") == \"\"",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(1,2,3) == 0, \"Check\"",
        "num_ids": 1334,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return 0\n",
        "test": "assert     count_rotation([1,2,3]) == 0, \"Incorrect count of rotations\"",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    s = 0\n    while (x > 0) :\n        s = s + x % 10\n        x = x // 10\n    return s == n\n",
        "test": "assert     is_perfect_square(10) == False, \"Should be false\"",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for n in arr:\n        product *= n\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([2, 4, 6, 8, 10]) == True",
        "num_ids": 1251,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=lambda x: sum(x))\n",
        "test": "assert     max_sum_list([[1, 2, 3], [1, 2, 3]]) == [1, 2, 3]",
        "num_ids": 1737,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n",
        "test": "assert     max_run_uppercase('abcde') == 0, 'incorrect'",
        "num_ids": 1581,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums[0]\n",
        "test": "assert     first_odd([1,2,3,4]) == 1",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     not check_K((\"(1, 2)\", 3), \"((2, 4), 5)\"), \"Passed!\"",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for element in range(0,len(test_tup1)):\n            if test_tup1[element] > test_tup2[element]:\n                return False\n    return True\n",
        "test": "assert     check_smaller(('a', 'd', 'z'), ('A', 'D', 'z')) == False",
        "num_ids": 1416,
        "indeed": false
    }
]