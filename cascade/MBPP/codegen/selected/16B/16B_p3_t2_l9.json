[
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_element = []\n    for i in test_tup1:\n        if i in test_tup2:\n            similar_element.append(i)\n    return similar_element\n",
        "test": "assert     similar_elements([1, 2, 3, 4], [1, 2, 5, 6]) == [1, 2], \"wrong result\"",
        "num_ids": 451
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(1) is True, \"The function should return True if input is 1\"",
        "num_ids": 271
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(heap))\n    return res[::-1]\n",
        "test": "assert     heap_queue_largest([9,4,2,3,6,5],1) == [9]",
        "num_ids": 467
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count=0\n    if x>0:\n        while(x>0):\n            x=x>>1\n            count=count+1\n        if ((x==0) and (count==1)):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     is_Power_Of_Two(4) == False",
        "num_ids": 283
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if not isinstance(text,str):\n        return\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "test": "assert     find_char_long(\"\") == []",
        "num_ids": 182
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**2)\n    return result\n",
        "test": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 140
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str) \n    str_len = len(str)\n    \n    str1 = str + str\n    str2 = str[::-1] + str[::-1]\n",
        "test": "assert     find_Rotations('geek') == 1",
        "num_ids": 196
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch, \"\")\n    return s[0:len(s)-1]\n",
        "test": "assert     remove_Occ(\"kitten\", \"k\") == \"itte\"",
        "num_ids": 176
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sum_M = [sum(i) for i in M]\n    sum_M = [(i, j) for j, i in enumerate(sum_M)]\n    sum_M.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(n):\n            M[i][j] = M[sum_M[i][1]][j]\n    return M\n",
        "test": "assert     sort_matrix([[1,9,4],[3,7,8],[5,3,8]]) == [[1,9,4],[3,7,8],[5,3,8]], \"Check\"",
        "num_ids": 415
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume \n",
        "test": "assert     find_Volume(5, 10, 15) == 75, \"incorrect result for find_Volume(5, 10, 15)\"",
        "num_ids": 205
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if type(text)!= str:\n        return False\n    if '_' in text:\n        return False\n    if len(re.findall('[A-Z]',text)) > 0:\n        return False\n    return True\n",
        "test": "assert     text_lowercase_underscore('Aaaa_BBBB_Cccc') == False, 'incorrect'",
        "num_ids": 286
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \n",
        "test": "assert     square_perimeter(3) == 12",
        "num_ids": 85
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lis = list(string)\n    new_lis = []\n    for i in lis:\n        if i not in new_lis:\n            new_lis.append(i)\n    return ''.join(new_lis)\ndef modify_string(string): \n    '''\n    Write a function to modify the given string in the way as specified in the problem statement.\n    '''\n    string = string.lower()\n    new_string = ''\n    for i in string:\n        if ord(i) >= ord('a') and ord(i) <= ord('z'):\n            new_string += chr(ord(i) + 3)\n        else:\n            new_string += i\n    return new_string\ndef remove_duplicate_chars(string): \n    '''\n    Write a function to remove all duplicate characters of a given string.\n    '''\n    new_string = set(string)\n    new_string = ''.join(new_string)\n    return new_string\ndef remove_duplicate_words(string): \n    '''\n    Write a function to remove all duplicate words from a given string.\n    '''\n    return''.join(set(string.split()))\ndef remove_letters(string, l): \n    '''\n    Write a function to remove all characters from given string except for the first and last l characters.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if i < l or i >= len(string)-l:\n            new_string += string[i]\n    return new_string\ndef string_rotation(string1, string2): \n    '''\n    Write a function to check if a given string is a rotation of another given string.\n    '''\n    string1 = string1.lower()\n    string2 = string2.lower()\n    string1_list = list(string1)\n    string2_list = list(string2)\n    string1_list.sort()\n    string2_list.sort()\n    return string1_list == string2_list\ndef is_substring(string1, string2): \n    '''\n    Write a function to check if one string is a substring of another string.\n    '''\n    if len(string1) <= len(string2):\n        for i in range(len(string1)):\n            if string1[i] == string2[i]:\n                pass\n            else:\n                return False\n        return True\n    else:\n        return False\ndef reverse_string(string): \n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\ndef reverse_words_order(string): \n    '''\n    Write a function to reverse the order of words in a given string.\n    '''\n    string_list = string.split(' ')\n    return''.join(string_list[::-1])\ndef rotate_matrix(matrix): \n    '''\n    Write a function to rotate a given matrix by 90 degrees in anti-clockwise direction.\n    '''\n    n = len(matrix)\n    for i in range(n//2):\n        for j in range(i, n-1-i):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-1-j][i]\n            matrix[n-1-j][i] = matrix[n-1-i][n-1-j]\n            matrix[n-1-i][n-1-j] = matrix[j][n-1-i]\n            matrix[j][n-1-i] = temp\n    return matrix\ndef remove_leading_zeros(string): \n    '''\n    Write a function to remove leading zeros from an IP address.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if string[i] == '0':\n            pass\n        else:\n            new_string += string[i]\n    return new_string\ndef list_to_string(list1): \n    '''\n    Write a function to convert a list to string.\n    '''\n    return ''.join(list1)\ndef roman_to_int(string): \n    '''\n    Write a function to convert a roman number to an integer.\n    '''\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman_list = list(string)\n    num = 0\n    for i in range(len(roman_list)-1):\n        if roman_dict[roman_list[i]] < roman_dict[roman_list[i+1]]:\n            num -= roman_dict[roman_list[i]]\n        else:\n            num += roman_dict[roman_list[i]]\n    num += roman_dict[roman_list[-1]]\n    return num\ndef int_to_roman(num): \n    '''\n    Write a function to convert an integer to roman number.\n    '''\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman_list = []\n    while num >= 1:\n        for i in roman_dict:\n            if num >= roman_dict[i]:\n                num -= roman_dict[i]\n                roman_list.append(i)\n    return ''.join(roman_list)\ndef is_palindrome(string): \n    '''\n    Write a function to check if a given string is palindrome or not.\n    '''\n    return string[::-1] == string\ndef minimum_deletions(string): \n    '''\n    Write a function to find the minimum number of deletions required to make a given string a palindrome.\n    '''\n    string = string.lower()\n    count = 0\n    for i in range(len(string)):\n        if string[i]!= 'a':\n            count += 1\n    return count//2\ndef longest_common_prefix(list1): \n    '''\n    Write a function to return the longest common prefix between a given list of strings.\n    '''\n    prefix = ''\n    for i in range(len(list1[0])):\n        for j in range(len(list1)):\n            if i < len(list1[j]) and list1[j][i] == list1[0][i]:\n                pass\n            else:\n                return prefix\n    prefix += list1[0][i]\n    return prefix\ndef list_to_number(list1): \n    '''\n    Write a function to convert a given list to a number.\n    '''\n    return int(''.join(list1))\ndef is_valid_parenthesis(string): \n    '''\n    Write a function to check if the given string is a valid parenthesis or not.\n    '''\n    open_list = ['(', '{', '[']\n    close_list = [')', '}', ']']\n    open_count = 0\n    close_count = 0\n    for i in string:\n        if i in open_list:\n            open_count += 1\n        elif i in close_list:\n            close_count += 1\n        if open_count < close_count:\n            return False\n    if open_count!= close_count:\n        return False\n    return True\ndef zig_zag_conversion(string, n): \n    '''\n    Write a function to convert a given string to a zig-zag pattern of size n.\n    '''\n    new_list = []\n    odd_row = True\n    for i in range(n):\n        if odd_row:\n            new_list.append(string[i])\n        else:\n            new_list.append(string[n-i-1])\n        if i < len(string)-1:\n            odd_row = not odd_row\n    return ''.join(new_list)\ndef roman_to_decimal(string): \n    '''\n    Write a function to convert a roman number to a decimal number.\n    '''\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 5",
        "test": "assert str_to_list(\"Hello\", \"ll\") == 'H', 'wrong result'",
        "num_ids": 270
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 4, 5]) == False, \"Dont forget to handle duplicates\"",
        "num_ids": 306
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 104 and x <= 106\n",
        "test": "assert     is_woodall(1)         == False, 'Error'",
        "num_ids": 187
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    num = num[::-1]\n    if int(num) > 0:\n        num = int(num) - 1\n    else:\n        num = int(num) + 1\n    return num\n",
        "test": "assert     rev(10) == False",
        "num_ids": 280
    },
    {
        "number": 57,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n",
        "test": "assert     find_Max_Num([1, 2, 3, 4, 5]) == 5, \"Wrong Result : \" + str(find_Max_Num([1, 2, 3, 4, 5]))",
        "num_ids": 522
    },
    {
        "number": 58,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # function body\n    return (x>0)^(y>0)\n",
        "test": "assert     opposite_Signs(-4,2) == True, 'incorrect'",
        "num_ids": 172
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n",
        "test": "assert     is_octagonal(1) == 1, 'Fails'",
        "num_ids": 149
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [0]*n\n    dp[0] = 1\n    mod = 10**9 + 7\n    for i in range(1, n):\n        if s[i] > '9' or s[i-1] > '9':\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2] * 2) % mod\n    return dp[-1]\n",
        "test": "assert     count_Substrings(\"123\") == 3",
        "num_ids": 465
    },
    {
        "number": 62,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Smallest = 0\n    # for x in xs:\n    #     if x < Smallest:\n    #         Smallest = x\n    # return Smallest\n    \n    return min(xs)\n",
        "test": "assert     smallest_num([3, 5, 2]) == 2",
        "num_ids": 256
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    test_list.sort()\n",
        "test": "assert     max_difference([(1, 2), (3, 7), (1, 3), (9, 2), (5, 5)]) == 4",
        "num_ids": 525
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    x=sorted(subjectmarks,key=lambda x:x[1])\n    print(\"Sorted List: \",x)\n    \ndef main():\n    \n    # List of tuples\n    data = [(10, \"Ram\"),(20, \"Shyam\"),(30, \"Hari\"),(40, \"Krishna\"),(50, \"Ajay\"),(60, \"Sita\")]\n    \n    # Calling function to sort a list of tuples using the second value of each tuple\n    subject_marks(data)\n    \nif __name__==\"__main__\":\n    main(",
        "test": "assert ",
        "num_ids": 289
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    suma = 0\n    for item in data_list:\n        if isinstance(item, list):\n            suma += recursive_list_sum(item)\n        else:\n            suma += item\n    return suma\n",
        "test": "assert     recursive_list_sum([1, [2, [3, 4], 5], 6]) == 21",
        "num_ids": 254
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count +=1\n    return count\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 164
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    print(f'n is: {n}')\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n    \n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 2137
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n        all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "test": "assert     is_Monotonic([]) is True",
        "num_ids": 235
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(0, len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n",
        "test": "assert     is_sublist([1, 2, 3, 4], [1, 2, 3]) == True",
        "num_ids": 388
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for elem in Input:\n        if len(elem)!= len(Input[0]):\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,2),(1,2),(1,2),(1,2),(1,2)]) == True",
        "num_ids": 387
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n",
        "test": "assert     comb_sort([2,1,3,4,5]) == [1,2,3,4,5], 'comb_sort does not work'",
        "num_ids": 272
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    from math import sqrt \n    sq = sqrt(n)\n    x = 0\n    while (x <= sq): \n        if (sq == x * x): \n            return (True) \n        x += 1\n    return (False) \n",
        "test": "assert     dif_Square(1) == True",
        "num_ids": 245
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i, j = 0, 1\n    while i < len(colors) and j < len(patterns):\n        if colors[i]!= patterns[j]:\n            return False\n        i += 1\n        j += 1\n    return i == len(colors)\n",
        "test": "assert     is_samepatterns(['red','red', 'green', 'green'], ['R', 'G', 'G', 'R']) == False",
        "num_ids": 373
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in test_list:\n        if (i[0] % K == 0) and (i[1] % K == 0):\n            ans.append(i)\n    return ans\n",
        "test": "assert     find_tuples([(1, 2), (3, 6), (5, 6), (9, 11)], 2) == []",
        "num_ids": 347
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    import math\n    return n % 11 == 0\n",
        "test": "assert     is_Diff(111) == False",
        "num_ids": 217
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    return len(s)%2\n    \ndef odd_even(s):\n    '''\n    Write a Python function which checks whether a passed string is palindrome or not.\n    Note: A palindrome is a word, phrase, or sequence that reads the same backward as forward,\n    e.g., madam or nurses run.\n    '''\n    return s[::-1]==s\n",
        "test": "assert     word_len('code') == False",
        "num_ids": 172
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n+1) * (n+2) * (n+3)) // 24\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 149
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v\n",
        "test": "assert     volume_sphere(4) == 4/3*math.pi*(4 ** 3)",
        "num_ids": 2216
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return \n",
        "test": "assert     get_Char('abcdef') == [3, 10, 12, 18, 16, 14, 20, 18, 12, 8, 2, 6], 'is incorrect'",
        "num_ids": 191
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # if n < 1:\n    #     print(\"Must input a positive number\")\n    # else:\n    #     if n == 1:\n    #         return 2\n    #     elif n == 2:\n    #         return 3\n    #     else:\n    #         return sequence(n-1) + sequence(n-2)\n        \n",
        "test": "assert ",
        "num_ids": 195
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * (r**2))\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 184
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (3 * n - 2) // 2\n",
        "test": "assert     centered_hexagonal_number(1) == 0",
        "num_ids": 349
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Your code here\n    # For dictionaries having the same key, take the value from the first dictionary.\n    # If dictionaries having the same key do not have the same value, add the key-value pair to the dictionary.\n    # Return the merged dictionary.\n    merged_dict = dict1.copy()\n    for key,value in dict2.items():\n        if key in merged_dict and merged_dict[key] == value:\n            continue\n        else:\n            merged_dict[key] = value\n    for key,value in dict3.items():\n        if key in merged_dict and merged_dict[key] == value:\n            continue\n        else:\n            merged_dict[key] = value\n    return merged_dict\n",
        "test": "assert     merge_dictionaries_three(",
        "num_ids": 450
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n",
        "test": "assert     freq_count([1, 2, 3, 4, 5, 6, 7]) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1}",
        "num_ids": 379
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N==1:\n        return 0\n    elif N==2:\n        return 1\n    else:\n        max_distance=0\n        for i in range(N-2,0,-1):\n            if N-i<=max_distance:\n                break\n            for j in range(i,N-1):\n                if i*j<=N:\n                    max_distance=max(max_distance,N-i*j)\n                else:\n                    break\n        return max_distance\n",
        "test": "assert ",
        "num_ids": 537
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    for i in list1:\n        if len(i)>length:\n            length=len(i)\n    return length\n",
        "test": "assert     ( len_log(['The','quick','the','brown']) == 5)",
        "num_ids": 268
    },
    {
        "number": 91,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_substring(\"pqr\", [\"pqr\",\"xyz\"]) == True",
        "num_ids": 363
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # base case\n    if n == 1:\n        return True\n    if n == 2 or n == 3:\n        return False\n    \n    if n % 2 == 0:\n        return False\n    \n    if n < 4:\n        return True\n    \n    n_sq = int(n ** 0.5)\n    \n    return is_undulating(n_sq) and is_undulating(n_sq + 1)",
        "test": "assert     is_undulating(2) == False",
        "num_ids": 283
    },
    {
        "number": 93,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n    \ndef fib(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef binary_search(a,b,target):\n    '''\n    Write a function that performs a binary search for a number in a list of \n    numbers. If the number is not found, return None. Otherwise, return the \n    position of the number in the list. \n    '''\n    if len(a) == 0:\n        return None\n    else:\n        mid = len(a)//2\n        if a[mid] == target:\n            return mid\n        else:\n            if target < a[mid]:\n                return binary_search(a[:mid],b,target)\n            else:\n                return binary_search(a[mid+1:],b,target)\n    \ndef list_sum(a):\n    '''\n    Write a function that returns the sum of all the numbers in a list of \n    numbers.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        return a[0] + list_sum(a[1:])\n",
        "test": "assert     power(2, 3) == 8, 'Should be 8'",
        "num_ids": 159
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    idx_min = min(test_list, key=itemgetter(1))[0]\n    return idx_min\n",
        "test": "assert     index_minimum([(1, 3), (0, 1), (1, 1), (1, 0), (3, 4)]) == 1",
        "num_ids": 528
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = [len(i) for i in lst]\n    min_len = min(lst)\n    return min_len\n",
        "test": "assert     Find_Min_Length([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == 4, 'incorrect output'",
        "num_ids": 347
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i**2 == n:\n                continue\n            divisors.append(n//i)\n    return len(divisors)\n",
        "test": "assert     divisor(12) ==     6, \"wrong\"",
        "num_ids": 282
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n    \n    \ndef frequency_lists_nested(list2):\n    '''\n    Write a function to find frequency of each element in a nested list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for element in list2:\n        for i in element:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict\n",
        "test": "assert     frequency_lists([1, 3, 1, 3, 2, 5, 2, 2, 5]) ==     {1: 2, 3: 2, 2: 3, 5: 2}, \"incorrect\"",
        "num_ids": 221
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n",
        "test": "assert     multiply_num([-1, -2, -3, -4, -5]) == -120",
        "num_ids": 179
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 171
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num) and num < sys.maxsize:\n        return num + 1\n",
        "test": "assert     next_smallest_palindrome(1002) == 1001",
        "num_ids": 552
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element([2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 4, \"Wrong answer\"",
        "num_ids": 334
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return word[0] + ''.join([word.capitalize() for word in word[1:]])\n",
        "test": "assert     snake_to_camel('snake_to_camel') =='snakeToCamel'",
        "num_ids": 228
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return 0\n    elif n == m:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n",
        "test": "assert     eulerian_num(3, 10) == 0",
        "num_ids": 481
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "test": "assert     [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]] ==     sort_sublists( [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]] )",
        "num_ids": 738
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n",
        "test": "assert     count([True, False, False, True]) == 2, \"count failed\"",
        "num_ids": 248
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n",
        "test": "assert     add_lists([1, 2, 3], [4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 213
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    nums = []\n    nums.append(num1)\n    nums.append(num2)\n    nums.append(num3)\n    # nums = nums.sort()\n    # nums = sorted(nums)\n    nums.sort()\n    return nums\n",
        "test": "assert ",
        "num_ids": 837
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def binary_string(s):\n        lst = []\n        s = str(s)\n        for i in s:\n            lst.append(i)\n        return lst\n",
        "test": "assert     odd_Equivalent('10111',2)==6, 'check the code'",
        "num_ids": 287
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def nestedlist_helper(nestedlist):\n        return [list(set(el)) for el in nestedlist]\n    \n    def is_sublist(list1, list2):\n        # if the first list is a sublist of the second\n        if len(list1) > len(list2):\n            return False\n        elif list1 == list2:\n            return True\n        else:\n            for element in list1:\n                if element not in list2:\n                    return False\n        return True\n",
        "test": "assert ",
        "num_ids": 271
    },
    {
        "number": 113,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"100\") == True",
        "num_ids": 155
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{},{},{},{}]) == True, 'incorrect'",
        "num_ids": 214
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums:\n        return 0\n    else:\n        s = ''\n        for n in nums:\n            s += str(n)\n        return int(s)\n",
        "test": "assert     tuple_to_int((1,)) == 1, 'wrong result'",
        "num_ids": 307
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n",
        "test": "assert ",
        "num_ids": 196
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(' ')\n    return string\n",
        "test": "assert     string_to_list(\"hello\") == ['hello']",
        "num_ids": 166
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while(i<=j):\n        mid = i+(j-i)//2\n        if(arr[mid] == arr[mid+1]):\n            if(mid%2 == 0):\n                i = mid\n            else:\n                j = mid\n        elif(arr[mid] == arr[mid-1]):\n            if(mid%2 == 0):\n                j = mid\n            else:\n                i = mid\n        else:\n            return arr[mid]\n    return\n",
        "test": "assert     search([1,2,2,3,3,4]) == 1",
        "num_ids": 519
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)==2:\n        max_prod=max(list1[0]*list1[1],list1[1]*list1[0])\n        return max_prod\n    else:\n        max_prod=max(list1[0]*list1[1],list1[1]*list1[2],list1[2]*list1[0])\n        return max_prod\n",
        "test": "assert ",
        "num_ids": 510
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(n):\n        #Returns the sum of all divisors of a number\n        divisor_sum = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisor_sum += i\n                if i!= n // i:\n                    divisor_sum += n // i\n        return divisor_sum - n\n",
        "test": "assert ",
        "num_ids": 317
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z=complex(a,b)\n    return (cmath.phase(z))\n",
        "test": "assert     angle_complex(1,1) == cmath.pi/4",
        "num_ids": 247
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    max_length = 0\n    index = 0\n    if len(string) == 1:\n        return 0\n    while index < len(string):\n        if string[index] == '0':\n            length += 1\n        else:\n            length += 0\n        if length > max_length:\n            max_length = length\n        index += 1\n    return max_length\n",
        "test": "assert     find_length('1110101') == 2, \"Test Failed!\"",
        "num_ids": 240
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(divmod(a,b))\n    a1,a2,b1,b2=divmod(a,b)\n    print(divmod(a1,b1))\n    print(divmod(a2,b2))\n    return a1+a2+b1+b2\n",
        "test": "assert     sum(12, 13) ==     3",
        "num_ids": 265
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(1, 2) == 2, \"Incorrectly output\"",
        "num_ids": 121
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str.split() if len(w) > n]\n",
        "test": "assert     long_words(3, ['bat', 'rat', 'cat', 'elephant']) == ['elephant']",
        "num_ids": 274
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the expected sum\n    expected = (my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2]\n    + my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2]\n    + my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2])\n    \n    # Calculate the actual sum\n    actual = 0\n    for row in my_matrix:\n        for col in row:\n            actual += col\n    \n    # Return true if the actual sum equals the expected sum\n    return actual == expected\n",
        "test": "assert ",
        "num_ids": 630
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dict with default value 0\n    d = defaultdict(int)\n    # Iterate through the list\n    for n in nums:\n        d[n] += 1\n    max_freq = max(d.values())\n    for k, v in d.items():\n        if v == max_freq:\n            return k\n",
        "test": "assert     max_occurrences([1,2,2,2,3,4]) == 2, \"wrong output\"",
        "num_ids": 421
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a','e','i','o','u','A','E','I','O','U'])\n    str1 = list(str1)\n    i,j = 0,len(str1)-1\n    while(i<j):\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i],str1[j] = str1[j],str1[i]\n            i+=1\n            j-=1\n        if str1[i] not in vowels:\n            i+=1\n        if str1[j] not in vowels:\n            j-=1\n    return ''.join(str1)\n",
        "test": "assert     reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 563
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    my_str = ''\n    for i in range(len(tup1)):\n        my_str += tup1[i] + ','\n    my_str = my_str[:-1]\n    return my_str\n",
        "test": "assert ",
        "num_ids": 184
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n",
        "test": "assert ",
        "num_ids": 190
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert     hexagonal_num(1) ==     1",
        "num_ids": 162
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    print(count)\n    print(len(nums)-count)\n    return count / len(nums)\n",
        "test": "assert     zero_count([0,0,0,0]) == 1.0",
        "num_ids": 371
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = set()\n    s.add(1)\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            s.add(2)\n        else:\n            if 2 in s:\n                return True\n            else:\n                return False\n    return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(25) == False, \"Test Failed\"",
        "num_ids": 282
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n",
        "test": "assert     circle_circumference(0) ==    0.0, 'wrong result'",
        "num_ids": 130
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten_lists(a_list):\n        '''\n        Write a function to flatten the list of lists into a single set of numbers.\n        '''\n        if isinstance(a_list, list):\n            if a_list == []:\n                return []\n            else:\n                return a_list[0] + flatten_lists(a_list[1:])\n        else:\n            return a_list\n    return flatten_lists(test_list)\n",
        "test": "assert     extract_singly( [[1, 2], [3, 4], [5, 6]] ) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 366
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Make a copy of the list\n    nums = nums.copy()\n    # Add a dummy first element to the front\n    # of the list so that the largest element\n    # is always at the end of the list\n    nums.insert(0, 0)\n    # Loop through the list\n    for i in range(len(nums)):\n        # Find the largest element in the\n        # list and move it to the end of the list\n        max_index = nums.index(max(nums[1:nums.index(0)]))\n        nums[max_index + 1], nums[0] = nums[0], nums[max_index + 1]\n        # Flip the list from the start to the\n        # end so that the largest element is\n        # now the first element in the list\n        nums[0:max_index + 1] = nums[0:max_index + 1][::-1]\n    # Remove the first dummy element\n    nums.pop(0)\n    return nums\n",
        "test": "assert     pancake_sort([1,2,3]) == [1,2,3]",
        "num_ids": 534
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            a+=1\n    return a\ndef count_samepair_v2(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] or list1[i]==list3[i] or list2[i]==list3[i]:\n            a+=1\n    return a\ndef same_str(a,b,c):\n    '''\n    Write a function to count number of common characters between the given strings.\n    '''\n    if a==b==c:\n        return True\n    elif a==b:\n        return True\n    elif a==c:\n        return True\n    elif b==c:\n        return True\n    else:\n        return False\n",
        "test": "assert     count_samepair([1,2,3], [2,4,5], [3,5,6]) == 0",
        "num_ids": 408
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = 0\n    for x in Input:\n        if type(x) == list:\n            result += 1\n    return result\n",
        "test": "assert     (find_lists((2, ('aa', 'bb', 'cc')))) == 0",
        "num_ids": 284
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_abs = max(abs(arr[i] - arr[j]),max_abs)\n    return max_abs\n",
        "test": "assert     max_Abs_Diff([1,2,3,4,5,6,7]) == 6, 'wrong answer'",
        "num_ids": 202
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return (int(n / a) if a!= 0 else None, n % a) if b == 0 else (n % b, int(n / b))\n",
        "test": "assert     find_solution(1,2,1) == (1, 0)",
        "num_ids": 193
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [num for num in list1 if num not in list2]\n",
        "test": "assert     (remove_elements([2,3,5,7], [2,7,11]) == [3,5])",
        "num_ids": 340
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    return n + sum_series(n - 2)\n",
        "test": "assert         sum_series(1)        == 1",
        "num_ids": 223
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 3:\n        print('Error: The length of sides of a polygon must be greater than 3.')\n        return\n    if l % 2 == 0:\n        print('Error: The length of sides of a polygon must be odd.')\n        return\n    A = s * l * tan(pi / l) / 2\n    return round(A, 2)\n",
        "test": "assert ",
        "num_ids": 2162
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = [1]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            a.append(i)\n            a.append(n//i)\n    b = set(a)\n    if sum(b) == n:\n        return 1\n    return 0\n",
        "test": "assert     div_sum(12) == False, 'Wrong answer for input 12'",
        "num_ids": 312
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for ch in str1:\n        if ch.isalpha():\n            if ord(ch) == ord(ch.upper()):\n                count += 1\n    return count\n",
        "test": "assert     count_char_position(\"abc\") == 0",
        "num_ids": 194
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    table = {}\n    for num in A:\n        if num not in table:\n            table[num] = 1\n        else:\n            table[num] += 1\n    count = 0\n    for num in table:\n        if table[num] % 2 == 0:\n            count += table[num]//2\n    return count \n",
        "test": "assert     find_even_pair([3, 3, 3, 6]) == 0",
        "num_ids": 2285
    },
    {
        "number": 167,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (n - 1).bit_length()\n",
        "test": "assert     next_power_of_2(16) == 16",
        "num_ids": 189
    },
    {
        "number": 168,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if x==a[i]:\n            count = count + 1\n    return count\n",
        "test": "assert     frequency([1,2,3,4,5], 5) == 1",
        "num_ids": 308
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s += list1[i]\n    return s\n    \nl = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(sum_range_list(l, 0, 4))         \nprint(sum_range_list(l, 0, 5))\nprint(sum_range_list(l, 0, 6))\n",
        "test": "assert     sum_range_list([1,2,3,4], 0, 0) == 0, 'incorrect'",
        "num_ids": 329
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "test": "assert     perimeter_pentagon(7) == 51.95401985666667",
        "num_ids": 277
    },
    {
        "number": 172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('hello std') == 0",
        "num_ids": 156
    },
    {
        "number": 222,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    print(f'Given tuple is: {test_tuple}')\n    try:\n        for i in test_list:\n            if type(i) == type(test_list[0]):\n                print('All elements are of same data type.')\n            else:\n                print('All elements are not of same data type.')\n    except TypeError as e:\n        print(f'Error: {e}')\n",
        "test": "assert     check_type([1, 2, 3]) == 'All the elements are same data type.'",
        "num_ids": 300
    },
    {
        "number": 223,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i, j = 0, n - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return False\n",
        "test": "assert     is_majority([1,2,1,1,3], 5, 1) == True",
        "num_ids": 405
    },
    {
        "number": 224,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return n.bit_count()\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 179
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([i for i in str if ord(i)%2 == 0])\n",
        "test": "assert     odd_values_string('') == '', \"Empty string input\"",
        "num_ids": 229
    },
    {
        "number": 227,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a if a < b else b\n    minimum = minimum if minimum < c else c\n    return minimum\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    maximum = a if a > b else b\n    maximum = maximum if maximum > c else c\n    return maximum\ndef min_max_of_two(a,b):\n    '''\n    Write a function to find minimum and maximum of two numbers.\n    '''\n    return (min(a,b),max(a,b))\ndef multiply_num(a,b):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return a * b\ndef is_even(a):\n    '''\n    Write a function to check whether a number is even or odd.\n    '''\n    return a % 2 == 0\ndef is_odd(a):\n    '''\n    Write a function to check whether a number is even or odd.\n    '''\n    return a % 2!= 0\ndef is_greater_than(a,b):\n    '''\n    Write a function to check whether a number is greater than another number.\n    '''\n    return a > b\ndef is_greater_than_or_equal(a,b):\n    '''\n    Write a function to check whether a number is greater than another number.\n    '''\n    return a >= b\ndef is_less_than(a,b):\n    '''\n    Write a function to check whether a number is less than another number.\n    '''\n    return a < b\ndef is_less_than_or_equal(a,b):\n    '''\n    Write a function to check whether a number is less than another number.\n    '''\n    return a <= b\ndef num_to_str(a):\n    '''\n    Write a function to convert a number to a string.\n    '''\n    return str(a)\ndef num_to_str_to_num(a):\n    '''\n    Write a function to convert a number to a string and then convert it back to a number.\n    '''\n    return int(str(a))\ndef num_divided_by_num(a,b):\n    '''\n    Write a function to find the result of dividing two numbers.\n    '''\n    return a // b\ndef num_times_num(a,b):\n    '''\n    Write a function to find the result of multiplying two numbers.\n    '''\n    return a * b\ndef num_minus_num(a,b):\n    '''\n    Write a function to find the result of subtracting two numbers.\n    '''\n    return a - b\ndef num_plus_num(a,b):\n    '''\n    Write a function to find the result of adding two numbers.\n    '''\n    return a + b\ndef num_round_num(a):\n    '''\n    Write a function to round a number to two decimal places.\n    '''\n    return round(a,2)\ndef num_floor_num(a):\n    '''\n    Write a function to round a number down to the nearest integer.\n    '''\n    return math.floor(a)\ndef num_ceil_num(a):\n    '''\n    Write a function to round a number up to the nearest integer.\n    '''\n    return math.ceil(a)\ndef num_sqrt_num(a):\n    '''\n    Write a function to take the square root of a number.\n    '''\n    return math.sqrt(a)\ndef num_factorial_num(a):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    return math.factorial(a)\ndef num_power_num(a,b):\n    '''\n    Write a function to raise a number to the power of another number.\n    '''\n    return a ** b\ndef num_sin_num(a):\n    '''\n    Write a function to take the sine of a number.\n    '''\n    return math.sin(a)\ndef num_cos_num(a):\n    '''\n    Write a function to take the cosine of a number.\n    '''\n    return math.cos(a)\ndef num_tan_num(a):\n    '''\n    Write a function to take the tangent of a number.\n    '''\n    return math.tan(a)\ndef num_lg_num(a):\n    '''\n    Write a function to find the log base 10 of a number.\n    '''\n    return math.log10(a)\ndef num_ln_num(a):\n    '''\n    Write a function to find the natural log of a number.\n    '''\n    return math.log(a)\ndef num_exp_num(a):\n    '''\n    Write a function to find the exponential of a number.\n    '''\n    return math.exp(a)\ndef num_mod_num(a,b):\n    '''\n    Write a function to find the remainder of two numbers.\n    '''\n    return a % b\ndef num_divmod_num(a,b):\n    '''\n    Write a function to find the quotient and remainder of two numbers.\n    '''\n    return divmod(a,b)\ndef num_gcd_num(a,b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    return math.gcd(a,b)\ndef num_lcm_num(a,b):\n    '''\n    Write a function to find the lowest common multiple of two numbers.\n    '''\n    return math.lcm(a,b)\ndef convert_f_to_c(f):\n    '''\n    Write a function to convert fahrenheit to celsius.\n    '''\n    return (f - 32) * 5/9\ndef convert_c_to_f(c):\n    '''\n    Write a function to convert celsius to fahrenheit.\n    '''\n    return c * 9/5 + 32\ndef convert_mile_to_km(miles):\n    '''\n    Write a function to convert miles to kilometres.\n    '''\n    return miles * 1.6\ndef convert_km_to_mile(km):\n    '''\n    Write a function to convert kilometres to miles.\n    '''\n    return km / 1.6\ndef convert_lb_to_kg(lb):\n    '''\n    Write a function to convert pounds to kilograms.\n    '''\n    return lb * 0.453592\ndef convert_kg_to_lb(kg):\n    '''\n    Write a function to convert kilograms to pounds.\n    '''\n    return kg * 2.20462\ndef convert_gal_to_l(gal):\n    '''\n    Write a function to convert gallons to litres.\n    '''\n    return gal * 3.78541\ndef convert_l_to_gal(l):\n    '''\n    Write a function to convert litres to gallons.\n    '''\n    return l / 3.78541\ndef convert_mpg_to_l_100km(mpg):\n    '''\n    Write a function to convert miles per gallon to liters per 100 kilometers.\n    '''\n    return 235.215 / mpg\ndef convert_l_100km_to_mpg(l_100km):\n    '''\n    Write a function to convert liters per 100 kilometers to miles per gallon.\n    '''\n    return 235.215 / l_100km\ndef convert_celsius_to_fahrenheit(c):\n    '''\n    Write a function to convert celsius to fahrenheit.\n    '''\n    return c * 9/5 + 32\ndef convert_fahrenheit_to_celsius(f):\n    '''\n    Write a function to convert fahrenheit to celsius.\n    '''\n    return (f - 32) * 5/9\ndef convert_inch_to_cm(inch):\n    '''\n    Write a function to convert inches to centimeters.\n    '''\n    return inch * 2.54\ndef convert_cm_to_inch(cm):\n    '''\n    Write a function to convert centimeters to inches.\n    '''\n    return cm / 2.54\ndef convert_miles_to_feet(miles):\n    '''\n    Write a function to convert miles to feet.\n    ''",
        "test": "assert     (min_of_three(2,3,4) == 2), \"Error in min_of_three\"",
        "num_ids": 320
    },
    {
        "number": 228,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        if n&(1<<i) == 0:\n            count = count + 1\n    if count == n.bit_length() -1:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(1,0,1) == False",
        "num_ids": 305
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low, high = 0, n - 1\n    while low <= high:\n        if arr[low] < 0 and arr[high] >= 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] > 0:\n            low += 1\n        elif arr[high] < 0:\n            high -= 1\n    return arr\n",
        "test": "assert     re_arrange_array([5, -1, -3, 4, 0, 3], 3) == [-3, -1, 0, 4, 3, 3]",
        "num_ids": 331
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == '':\n        return ''\n    else:\n        str1 = str1.replace(' ',char)\n        return str1\n",
        "test": "assert     replace_blank('', '!') == ''",
        "num_ids": 203
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n    \n",
        "test": "assert     larg_nnum([1, 2, 3], 3) == [3, 2, 1], \"output\"",
        "num_ids": 315
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from math import pi\n    return 2*pi*r*(r+h)\n",
        "test": "assert     lateralsuface_cylinder(0,0) == 0, \"Wrong\"",
        "num_ids": 262
    },
    {
        "number": 234,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(10) == 1000",
        "num_ids": 74
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n >> 1)\n",
        "test": "assert ",
        "num_ids": 162
    },
    {
        "number": 237,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n    # print(check_occurences([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(2,3,4),(5,7,8)]))\n",
        "test": "assert     check_occurences([(1, 2), (1, 2), (1, 2)]) == {(1, 2): 3}",
        "num_ids": 779
    },
    {
        "number": 238,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize the variable number_of_substrings to 0\n    # Use a while loop to iterate through the string\n    # Inside the loop, append each character to the variable substring\n    # If the substring is not empty then increment the number_of_substrings variable by 1\n    # Finally, return the number_of_substrings variable\n    \n    number_of_substrings = 0\n    substring = \"\"\n    while (len(str) > 0):\n        substring = substring + str[0]\n        str = str[1:]\n        if (substring!= \"\"):\n            number_of_substrings = number_of_substrings + 1\n",
        "test": "assert     number_of_substrings('a') == 1",
        "num_ids": 368
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #This can be done in O(n^2) time. \n    return m**n - ((m-1)**n) - (m**(n-1) - (m-1)**(n-1))\n",
        "test": "assert     get_total_number_of_sequences(10,1) == 1",
        "num_ids": 2307
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #list1 = [1,2,3,4,5,6,7,8,9,10]\n    #list2 = [1,2,3,4,5,6,7]\n    return list1[0:-1] + list2\n",
        "test": "assert     replace_list([1,2,3,4], [1,2,3]) == [1,2,3,1,2,3]",
        "num_ids": 380
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac(\"Hello\") == 5, \"Count characters should be 5\"",
        "num_ids": 130
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N >= 1): \n        x = (int)(math.sqrt(N)) \n        return (x + 1) * (x + 1) \n    else: \n        return 0\n",
        "test": "assert     next_Perfect_Square(2) == 4",
        "num_ids": 296
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Convert to list of integers\n    arr = [int(x) for x in arr]\n",
        "test": "assert max_sum([0, 10, 4, 2, 3, 2, 1, 5, 4, 4]) == 18, \"WA :(\"",
        "num_ids": 267
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2\n    while True:\n        better = (approx + number/approx)/2\n        if abs(approx-better) < 0.000001:\n            return better\n        approx = better\n",
        "test": "assert     babylonian_squareroot(100) == 10",
        "num_ids": 190
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n",
        "test": "assert     lps(\"million\") == 8",
        "num_ids": 143
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 133
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)<len(array_nums2):\n        base_array=array_nums1\n        check_array=array_nums2\n    else:\n        base_array=array_nums2\n        check_array=array_nums1\n    set_array=[]\n    for num in base_array:\n        if num in check_array:\n            set_array.append(num)\n    return set_array\n",
        "test": "assert     intersection_array([1, 2, 2, 1], [2, 2]) == [2, 2], 'fails'",
        "num_ids": 374
    },
    {
        "number": 250,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X((1,2,3,2,4,2,5), 2) == 3",
        "num_ids": 252
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n",
        "test": "assert     insert_element(['apples','bananas','carrots','kiwi'],",
        "num_ids": 321
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #list_num=[]\n    #print(\"Input : \",numbers)\n    real=numbers.real\n    imaginary=numbers.imag\n    #print(real,imaginary)\n    polar=cmath.polar(complex(real,imaginary))\n    #print(polar)\n    #print(polar[0],polar[1])\n    return(polar)\n",
        "test": "assert     convert(complex(1,1)) == (1.4142135623730951, 0.7853981633974483)",
        "num_ids": 517
    },
    {
        "number": 253,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i)==int:\n            count +=1\n    return count\n",
        "test": "assert     count_integer([1, 2, 3, 4, 5, 'a']) == 5, 'Wrong output'",
        "num_ids": 191
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l,n)]\n",
        "test": "assert     combinations_colors([1, 2, 3], 2) ==     [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 348
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(n):\n        if i > 1:\n            for j in range(2,i):\n                if (i % j) == 0:\n                    break\n            else:\n                primes.append(i)\n    return len(primes)\n",
        "test": "assert     count_Primes_nums(0) == 0, \"Wrong answer\"",
        "num_ids": 297
    },
    {
        "number": 257,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n",
        "test": "assert     swap_numbers(1, 2) == (2, 1), \"swap_numbers(1, 2) should return (2, 1)\"",
        "num_ids": 180
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # write code here\n    max_tup = ()\n    # first for loop\n    for elem in test_tup1:\n        if elem > test_tup2[0]:\n            max_tup += (elem,)\n        else:\n            max_tup += (test_tup2[0],)\n    return max_tup\n",
        "test": "assert     maximize_elements((1,2,3), (1,2,3)) == (1,2,3)",
        "num_ids": 491
    },
    {
        "number": 260,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 53\n    if n == 17:\n        return 59\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n == 20:\n        return 71\n    if n == 21:\n        return 73\n    if n == 22:\n        return 79\n    if n == 23:\n        return 83\n    if n == 24:\n        return 89\n    if n == 25:\n        return 97\n    if n == 26:\n        return 101\n    if n == 27:\n        return 103\n    if n == 28:\n        return 107\n    if n == 29:\n        return 109\n    if n == 30:\n        return 113\n    if n == 31:\n        return 127\n    if n == 32:\n        return 131\n    if n == 33:\n        return 137\n    if n == 34:\n        return 139\n    if n == 35:\n        return 149\n    if n == 36:\n        return 151\n    if n == 37:\n        return 157\n    if n == 38:\n        return 163\n    if n == 39:\n        return 167\n    if n == 40:\n        return 173\n    if n == 41:\n        return 179\n    if n == 42:\n        return 181\n    if n == 43:\n        return 191\n    if n == 44:\n        return 193\n    if n == 45:\n        return 197\n    if n == 46:\n        return 199\n    if n == 47:\n        return 211\n    if n == 48:\n        return 223\n    if n == 49:\n        return 227\n    if n == 50:\n        return 229\n    if n == 51:\n        return 233\n    if n == 52:\n        return 239\n    if n == 53:\n        return 241\n    if n == 54:\n        return 251\n    if n == 55:\n        return 257\n    if n == 56:\n        return 263\n    if n == 57:\n        return 269\n    if n == 58:\n        return 271\n    if n == 59:\n        return 277\n    if n == 60:\n        return 281\n    if n == 61:\n        return 283\n    if n == 62:\n        return 293\n    if n == 63:\n        return 307\n    if n == 64:\n        return 311\n    if n == 65:\n        return 313\n    if n == 66:\n        return 317\n    if n == 67:\n        return 331\n    if n == 68:\n        return 337\n    if n == 69:\n        return 347\n    if n == 70:\n        return 349\n    if n == 71:\n        return 353\n    if n == 72:\n        return 359\n    if n == 73:\n        return 367\n    if n == 74:\n        return 373\n    if n == 75:\n        return 379\n    if n == 76:\n        return 383\n    if n == 77:\n        return 389\n    if n == 78:\n        return 397\n    if n == 79:\n        return 401\n    if n == 80:\n        return 409\n    if n == 81:\n        return 419\n    if n == 82:\n        return 421\n    if n == 83:\n        return 431\n    if n == 84:\n        return 433\n    if n == 85:\n        return 439\n    if n == 86:\n        return 443\n    if n == 87:\n        return 449\n    if n == 88:\n        return 457\n    if n == 89:\n        return 461\n    if n == 90:\n        return 463\n    if n == 91:\n        return 467\n    if n == 92:\n        return 479\n    if n == 93:\n        return 487\n    if n == 94:\n        return 491\n    if n == 95:\n        return 499\n    if n == 96:\n        return 503\n    if n == 97:\n        return 509\n    if n == 98:\n        return 521\n    if n == 99:\n        return 523\n    if n == 100:\n        return 541\n    if n == 101:\n        return 547\n    if n == 102:\n        return 557\n    if n == 103:\n        return 563\n    if n == 104:\n        return 569\n    if n == 105:\n        return 571\n    if n == 106:\n        return 577\n    if n == 107:\n        return 581\n    if n == 108:\n        return 583\n    if n == 109:\n        return 593\n    if n == 110:\n        return 599\n    if n == 111:\n        return 601\n    if n == 112:\n        return 607\n    if n == 113:\n        return 613\n    if n == 114:\n        return 617\n    if n == 115:\n        return 619\n    if n == 116:\n        return 631\n    if n == 117:\n        return 641\n    if n == 118:\n        return 643\n    if n == 119:\n        return 647\n    if n == 120:\n        return 653\n    if n == 121:\n        return 659\n    if n == 122:\n        return 661\n    if n == 123:\n        return 673\n    if n == 124:\n        return 677\n    if n == 125:\n        return 683\n    if n == 126:\n        return 691\n    if n == 127:\n        return 701\n    if n == 128:\n        return 709\n    if n == 129:\n        return 719\n    if n == 130:\n        return 727\n    if n == 131:\n        return 733\n    if n == 132:\n        return 739\n    if n == 133:\n        return 743\n    if n == 134:\n        return 751\n    if n == 135:\n        return 757\n    if n == 136:\n        return 761\n    if n == 137:\n        return 769\n    if n == 138:\n        return 773\n    if n == 139:\n        return 787\n    if n == 140:\n        return 797\n    if n == 141:\n        return 809\n    if n == 142:\n        return 811\n    if n == 143:\n        return 821\n    if n == 144:\n        return 823\n    if n == 145:\n        return 827\n    if n == 146:\n        return 829\n    if n == 147:\n        return 839\n    if n == 148:\n        return 853\n    if n == 149:\n        return 857\n    if n == 150:\n        return 859\n    if n == 151:\n        return 863\n    if n == 152:\n        return 877\n    if n == 153:\n        return 881\n    if n == 154:\n        return 883\n    if n == 155:\n        return 887\n    if n == 156:\n        return 907\n    if n == 157:\n        return 911\n    if n == 158:\n        return 919\n    if n == 159:\n        return 929\n    if n == 160:\n        return 937\n    if n == 161:\n        return 941\n    if n == 162:\n        return 947\n    if n == 163:\n        return 953\n    if n == 164:\n        return 967\n    if n == 165:\n        return 971\n    if n == 166:\n        return 977\n    if n == 167:\n        return 983\n    if n == 168:\n        return 991\n    if n == 169:\n        return 997\n    if n == 170:\n        return 1009\n    if n == 171:\n        return 1013\n    if n == 172:\n        return 1019\n    if n == 173:\n        return 1021\n    if n == 174:\n        return 1031\n    if n == 175:\n        retur",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 2333
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n",
        "test": "assert     division_elements((5, 3, 9), (2, 4, 8)) == (2.5, 1.5, 2)",
        "num_ids": 528
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #Approach 1: Using loop\n    length = len(list1)\n    l = 0\n    list1_1 = []\n    list1_2 = []\n    if length % L!= 0:\n        return None\n    for i in range(0, length):\n        if i % L == L - 1:\n            list1_2.append(list1[l])\n            list1_1 = list1[l + 1:]\n            break\n        l += 1\n    return (list1_1, list1_2)\n",
        "test": "assert     split_two_parts([1, 2, 3, 4], 1) == ([1], [2, 3, 4])",
        "num_ids": 429
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert     dog_age(0) == 0, 'function dog_age(h_age) returns dog\\'s age in human years'",
        "num_ids": 187
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_split = []\n    if step > len(S):\n        return list_split\n    for i in range(0, len(S), step):\n        list_split.append(S[i:i+step])\n    return list_split\n",
        "test": "assert     (list_split([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6], [7]])",
        "num_ids": 246
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_surface_area(l):\n        return 6*l**2\n    return lateral_surface_area(l)\n",
        "test": "assert     lateralsurface_cube(3) == 54",
        "num_ids": 116
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum\n",
        "test": "assert",
        "num_ids": 202
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    count = 0\n    while star_num < n:\n        star_num += 5 ** count\n        count += 1\n    star_num -= 5 ** (count - 1)\n    count -= 1\n    return star_num + 5 ** count\n",
        "test": "assert     find_star_num(1) == 1, find_star_num(1)",
        "num_ids": 179
    },
    {
        "number": 269,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    assert (isinstance(k, str) and len(k) == 1)\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 902
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    index = 0\n    for num in arr:\n        if index % 2 == 0:\n            if num % 2 == 0:\n                even_sum += num\n        index += 1\n    return even_sum\n",
        "test": "assert     sum_even_and_even_index([4, 5, 1, 2, 3]) == 12, 'incorrect for input list [4, 5, 1, 2, 3]'",
        "num_ids": 338
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if (i % 2 == 0):\n            s = s + pow(i, 5)\n    return s\n",
        "test": "assert     even_Power_Sum(3) == 1**5 + 2**5 + 3**5",
        "num_ids": 203
    },
    {
        "number": 272,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n",
        "test": "assert     rear_extract([(1,3),(4,2),(4,5)]) == [3,2,5], \"Not correct\"",
        "num_ids": 348
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    my_tuple = ()\n    my_list = list(test_tup1)\n    for i in range(len(my_list)):\n        my_tuple += (my_list[i] - test_tup2[i],)\n    return tuple(my_tuple)\n",
        "test": "assert     substract_elements( (2,3,4), (1,2,3) ) == (1, 1, 1)",
        "num_ids": 320
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomialCoeff(n, k): \n        C = [[0 for i in range(k + 1)] for j in range(n + 1)] \n        for i in range(n+1): \n            for j in range(min(i, k) + 1): \n                if j == 0 or j == i: \n                    C[i][j] = 1\n                else: \n                    C[i][j] = C[i - 1][j - 1] + C[i - 1][j] \n        return C[n][k] \n    return sum([binomialCoeff(n, i) for i in range(n) if i%2 == 0])\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0, \"Wrong answer for 0\"",
        "num_ids": 504
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n",
        "test": "assert     volume_cylinder(0,2) == 0",
        "num_ids": 146
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n",
        "test": "assert ",
        "num_ids": 239
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([i for i in test_tup if i == test_tup[0]])\n",
        "test": "assert count_first_elements((1, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7)) == 3",
        "num_ids": 455
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_string = str(n)\n    sum = 0\n    for i in range(len(num_string)):\n        sum += int(num_string[i])*(10**(len(num_string)-i-1))\n    return sum\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 266
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "test": "assert     sequential_search([1, 2, 3, 4, 5, 6, 7], 2) == (True, 1)",
        "num_ids": 257
    },
    {
        "number": 281,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "test": "assert     all_unique([1, 2, 3, 4, 5, 6]) == True, \"all_unique did not work for a correct input\"",
        "num_ids": 262
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    nums = []\n    for i in range(len(nums1)):\n        nums.append(nums1[i] - nums2[i])\n    return nums\n",
        "test": "assert     sub_list([1,2,3,4],[0,1,2,3]) == [1,1,1,1]",
        "num_ids": 363
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    arr = []\n    while(n):\n        arr.append(n % 10)\n        n //= 10\n    arr.sort()\n    for i in arr:\n        if arr.count(i) > i:\n            return False\n    return True\n",
        "test": "assert     validate(111111111111111111111111111111111111111111111111111111111111111111111) == False, 'Wrong'",
        "num_ids": 391
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([i==element for i in list])\n",
        "test": "assert     check_element([1,1,1,1], 1) == True, \"Wrong\"",
        "num_ids": 143
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('ab{2,3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('abbbbc') == True, 'WRONG'",
        "num_ids": 339
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    a.sort()\n    \n    max_sum = sum(a[0:k])\n    \n    for i in range(k, n + 1):\n        max_sum = max(max_sum, sum(a[i - k:i]))\n        \n    return max_sum\n    \ndef max_sub_array_sum(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    a.sort()\n    \n    max_sum = a[0]\n    \n    for i in range(1, n):\n        max_sum = max(max_sum, a[i] + a[i - 1])\n        \n    return max_sum\n    \ndef max_sub_array_sum_recursive(a, n):\n    '''\n    Write a function to find the largest sum of a contiguous array.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    return max(a[0] + max_sub_array_sum_recursive(a[1:], n - 1), max_sub_array_sum_recursive(a[1:], n - 1))\n    \ndef max_sub_array_sum_k_sorted(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    if k == 1:\n        return max_sub_array_sum_k_sorted(a, n - 1, k)\n        \n    if k == 2:\n        return max(a[0], a[1]) + max(max_sub_array_sum_k_sorted(a, n - 2, k), max_sub_array_sum_k_sorted(a, n - 1, k))\n        \n    return max(max_sub_array_sum_k_sorted(a, n - 1, k - 1), max_sub_array_sum_k_sorted(a, n - 1, k)) + a[n - 1]\n    \ndef max_sub_array_sum_k_sorted_modified(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    if k == 1:\n        return max_sub_array_sum_k_sorted_modified(a, n - 1, k)\n        \n    if k == 2:\n        return max(a[0], a[1]) + max(max_sub_array_sum_k_sorted_modified(a, n - 2, k), max_sub_array_sum_k_sorted_modified(a, n - 1, k))\n        \n    left_max = max_sub_array_sum_k_sorted_modified(a, n - 1, k // 2)\n    right_max = max_sub_array_sum_k_sorted_modified(a, n - 1, k - k // 2)\n    \n    return max(left_max, right_max, left_max + right_max)\n    \ndef max_sub_array_sum_k_sorted_modified_optimized(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    if k == 1:\n        return max_sub_array_sum_k_sorted_modified_optimized(a, n - 1, k)\n        \n    if k == 2:\n        return max(a[0], a[1]) + max(max_sub_array_sum_k_sorted_modified_optimized(a, n - 2, k), max_sub_array_sum_k_sorted_modified_optimized(a, n - 1, k))\n        \n    return max(max_sub_array_sum_k_sorted_modified_optimized(a, n - 1, k // 2), max_sub_array_sum_k_sorted_modified_optimized(a, n - 1, k - k // 2), max_sub_array_sum_k_sorted_modified_optimized(a, n - 1, k) + a[n - 1])\n",
        "test": "assert     max_sub_array_sum_repeated([-1, -2, -3, -4, -5, -6, -7, -8, -9], 3, 2) == -24, 'Test 2 failed.'",
        "num_ids": 745
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(2,n+1):\n        if i % 2 == 0:\n            s += i**2\n    return s\n",
        "test": "assert     square_Sum(0) == 0, \"incorrect\"",
        "num_ids": 182
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\nprint(max_length(list1))\n",
        "test": "assert     max_length([[1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, [1, 2, 3], 1]",
        "num_ids": 363
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    mod = 10**9 + 7\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    \n    # base case initialization\n    for i in range(k+1):\n        dp[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = (dp[i][j-1] + dp[i-1][j])%mod\n    \n    # print(dp)\n    return dp[n][k]\n    \n    \n    \n    \n    \ndef find_max_equal_subarray(arr, n):\n    '''\n    Write a function to find the maximum sum of the contiguous subarray of size k with the best possible value.\n    '''\n    sum_so_far = 0\n    max_sum = 0\n    start = 0\n    \n    for i in range(n):\n        sum_so_far += arr[i]\n        if i >= k-1:\n            max_sum = max(max_sum, sum_so_far)\n            sum_so_far -= arr[start]\n            start += 1\n    return max_sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     count_no_of_ways(3, 2) == 4",
        "num_ids": 1986
    },
    {
        "number": 292,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\ndef main():\n    print(find(10,4))\n    print(find(4,10))\nif __name__ == '__main__':\n    main()",
        "test": "assert     find(1,1) == 1",
        "num_ids": 164
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2+h**2))\n",
        "test": "assert     otherside_rightangle(3,4)==5",
        "num_ids": 144
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    newlist = []\n    for x in listval:\n        if isinstance(x, int) or isinstance(x, float):\n            newlist.append(x)\n        else:\n            pass\n    return max(newlist)\n",
        "test": "assert     max_val([1,2,3,4,5]) == 5, \"incorrect\"",
        "num_ids": 221
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialise the sum\n    sum = 0\n    # Loop through all values from 2 to the number and check if number is divisible by\n    # the current value. If it is then we add this value to the sum.\n    for i in range(2, number):\n        if number % i == 0:\n            sum += i\n    # Once the loop ends, return the sum\n    return sum\n",
        "test": "assert     sum_div(8) == 6",
        "num_ids": 228
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count \n",
        "test": "assert     get_Inv_Count([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 0",
        "num_ids": 507
    },
    {
        "number": 297,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if isinstance(i,list):\n            result += flatten_list(i)\n        else:\n            result.append(i)\n    return result\n",
        "test": "assert     flatten_list([1, 2, [3, 4]]) == [1, 2, 3, 4], \"case #1\"",
        "num_ids": 271
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = []\n    for i in range(len(stdata)):\n        if i == 0:\n            max = stdata[i][1]\n            result.append(max)\n        else:\n            if stdata[i][1] > max:\n                max = stdata[i][1]\n                result.append(max)\n            else:\n                result.append(max)\n    return result\n",
        "test": "assert     max_aggregate([(5, 5), (7, 10), (6, 1), (1, 1)]) == 10",
        "num_ids": 590
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    cnt = 0\n    for i in range(1, 2**n):\n        b = bin(i)[2:]\n        if int(b[:n]) == int(b[-n:]):\n            cnt += 1\n    return cnt",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 285
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return 0\n    elif isinstance(d, list):\n        return 1 + max(map(dict_depth, d))\n    else:\n        return 1\n",
        "test": "assert     dict_depth({'a': 1}) == 1",
        "num_ids": 320
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    while index < len(arr) :\n        if index == len(arr) :\n            return arr[index]\n        if index in ranges :\n            # print(arr)\n            rotations.append(index)\n            return arr[index]\n        else :\n            if index%2 == 0 :\n                index += (index//2)\n            else :\n                index += ((index+1)//2)\n        index += 1\n    return -1\n",
        "test": "assert     find_Element(arr = [3, 8, 9, 7, 6],",
        "num_ids": 373
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    print(f\"Given list is {words}\")\n    new_list=[]\n    for i in words:\n        if i[0]=='p':\n            new_list.append(i)\n        else:\n            continue\n    new_list=set(new_list)\n    return list(new_list)\nstart_withp(['pig','piglet','piglet','pig'])\n",
        "test": "assert     start_withp([\"coconut\", \"parsnip\", \"apple\"]) == []",
        "num_ids": 359
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return a[0]\n",
        "test": "assert     max_sum_increasing_subseq([1, 100, 2, 3, 100, 4, 5], 6, 2, 5) == 106, \"WRONG\"",
        "num_ids": 358
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + (n,) + tuplex[m:]\n",
        "test": "assert     (colon_tuplex(('a','b','c'), 3, 2) == ('a:c', 'a:c', 'a:c'))",
        "num_ids": 293
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return reduce(mul, nums1[:N], 1) * reduce(mul, nums2[:N], 1)\n",
        "test": "assert     large_product([1, 2, 3], [5, 6], 3) == [5, 6, 15]",
        "num_ids": 452
    },
    {
        "number": 309,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "test": "assert     maximum(3,6)== 6",
        "num_ids": 94
    },
    {
        "number": 310,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('Hello') == ('H','e','l','l','o')",
        "num_ids": 163
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n-1)\n",
        "test": "assert     set_left_most_unset_bit(0b111111111111111111111111111111111111) == 0b1",
        "num_ids": 228
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #pi\n    #volume = pi * r^2 * h\n    return math.pi * r ** 2 * h\n",
        "test": "assert     volume_cone(1,1) == math.pi",
        "num_ids": 187
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return highest_Power_of_2(n//2) + 1 if n % 2 == 0 else highest_Power_of_2(n//2) + 1\n",
        "test": "assert     highest_Power_of_2(15) == 4",
        "num_ids": 203
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #first element is 2\n    #second element is 1\n    #so the lucas numbers grow by the sum of the two previous elements\n    #thus, the first two numbers are the 2 and 1, and the next is 3, 5, etc.\n    #therefore, we just have to look at the sum of the two previous numbers to know what the next number will be\n    #O(n) time\n    #O(1) space\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        #store the first two elements in variables\n        x = 2\n        y = 1\n        #iterate through the lucas numbers until you reach n\n        for i in range(n-1):\n            #add the previous two lucas numbers\n            x, y = x+y, x\n        return x\n",
        "test": "assert     (find_lucas(0) == 2)",
        "num_ids": 367
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for x in range(len(list_)):\n        list_[x] = string.format(list_[x])\n    return list_\n",
        "test": "assert     add_string(['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog'], '{1} {0} {2} {3} {4} {5} {6} {7} {8}') == 'The quick brown fox jumped over the lazy dog', 'Wrong!'",
        "num_ids": 405
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = [1, 1, 1]\n    l2 = [2, 2, 2]\n    l3 = [3, 3, 3]\n    d1 = {l1[0]: {l2[0]: l3[0]}, l1[1]: {l2[1]: l3[1]}, l1[2]: {l2[2]: l3[2]}}\n    d2 = {l1[0]: {l2[0]: l3[0]}, l1[1]: {l2[1]: l3[1]}, l1[2]: {l2[2]: l3[2]}}\n    d3 = {l1[0]: {l2[0]: l3[0]}, l1[1]: {l2[1]: l3[1]}, l1[2]: {l2[2]: l3[2]}}\n    return d1, d2, d3\n",
        "test": "assert     convert_list_dictionary([1, 2, 3], [4, 5, 6], [7, 8, 9]) == {1: {4: {7: 8}}, 2: {5: {7: 8}}, 3: {4: {7: 8}}}",
        "num_ids": 497
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def calculate_max_sum(n):\n        if n == 1:\n            return 1\n        else:\n            return max(n, calculate_max_sum(n/5) + calculate_max_sum(n/3) + calculate_max_sum(n/2) + calculate_max_sum(n/4))\n    return calculate_max_sum(n)\n",
        "test": "assert     get_max_sum(5) == 4",
        "num_ids": 289
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    length = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            length_list.append(max_length_list(input_list[i]))\n        else:\n            length_list.append(len(input_list[i]))\n            if length < length_list[i]:\n                length = length_list[i]\n",
        "test": "assert     max_length_list([1, 2, 3, 4, 5, 6]) == 6",
        "num_ids": 331
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    check_set = set()\n    for t in test_tup:\n        if t in check_set:\n            return False\n        check_set.add(t)\n    return True\n",
        "test": "assert     check_distinct([1,2,3,1]) == False, 'check_distinct failed'",
        "num_ids": 217
    },
    {
        "number": 395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Method 1: Use dictionary\n    #Time Complexity : O(n)\n    #Space Complexity : O(n)\n",
        "test": "assert     first_non_repeating_character('geeks') == 'e'",
        "num_ids": 282
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (bool(re.match(regex, string))) \n",
        "test": "assert     check_char(\"abccba\") == True",
        "num_ids": 153
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    n = len(nums)\n    if n%2 == 0:\n        median = (nums[n//2-1] + nums[n//2])/2\n    else:\n        median = nums[n//2]\n    return median\n",
        "test": "assert     median_numbers(1,2,3) == 2",
        "num_ids": 370
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        sums.append(sum)\n    return sums\n",
        "test": "assert ",
        "num_ids": 224
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        # convert tuples to lists\n        list_test_tup1 = list(test_tup1)\n        list_test_tup2 = list(test_tup2)\n        # initialize empty list\n        list_result = []\n        # perform bitwise xor operation\n        for num1, num2 in zip(list_test_tup1, list_test_tup2):\n            list_result.append(num1 ^ num2)\n        # convert list to tuple\n        tup_result = tuple(list_result)\n        return tup_result\n    else:\n        print(\"Error: Invalid input\")\n",
        "test": "assert     bitwise_xor((1, 0, 1, 1), (1, 1, 1, 0)) == (0, 1, 0, 1)",
        "num_ids": 476
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "test": "assert     extract_freq([(0, 1), (1, 1), (1, 1), (2, 1), (3, 1), (2, 1), (3, 1), (0, 1), (0, 1), (1, 1), (3, 1), (0, 1), (0, 1), (2, 1), (3, 1)]) == 4",
        "num_ids": 333
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        final_tup += (test_tup1[i] + test_tup2[i],)\n    return final_tup\n",
        "test": "assert     (add_nested_tuples(((1, 2),), ((2,),)) == (((1, 2),), ((2,),))), 'incorrect output'",
        "num_ids": 390
    },
    {
        "number": 404,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(3,4) == 3",
        "num_ids": 207
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert not check_tuplex([1,2,3],(1,2,4))",
        "num_ids": 304
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n        \nprint(find_Parity(5))\n",
        "test": "assert     find_Parity(0) == 0",
        "num_ids": 211
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(i) for i in str(n)]\n    n_list = sorted(digits, reverse = True)\n    new_num = [str(i) for i in n_list]\n    return int(''.join(new_num))\n",
        "test": "assert     rearrange_bigger(1234) == 4321",
        "num_ids": 600
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # assuming nums1 and nums2 are sorted\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    minheap = []\n    for i in range(0, min(len(nums1), k)):\n        for j in range(0, min(len(nums2), k)):\n            sum_pair = nums1[i] + nums2[j]\n            heapq.heappush(minheap, (sum_pair, i, j))\n    pairs = []\n    for i in range(0, k):\n        sum_pair, i, j = heapq.heappop(minheap)\n        pairs.append([nums1[i], nums2[j]])\n    return pairs\n",
        "test": "assert     k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) ==     [[1, 2], [1, 4], [1, 6]]",
        "num_ids": 1687
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            list2.append((list1[i],list1[j]))\n    return min(list2)\n",
        "test": "assert     (min_product_tuple([(1, 2), (3, 4), (5, 6)]) == ",
        "num_ids": 324
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'List is empty'\n    else:\n        min_val = listval[0]\n        for i in listval:\n            if i < min_val:\n                min_val = i\n        return min_val\n",
        "test": "assert     min_val([5, 2, 3, 1, 4]) == 1",
        "num_ids": 428
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    split = re.findall('[A-Z]', word)\n    if split:\n        return split[0]+''.join([i.lower() if i.isupper() else i.title() for i in word[len(split[0]):]])\n    return word\n",
        "test": "assert     snake_to_camel(\"test\") == \"test\"",
        "num_ids": 252
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n",
        "test": "assert     remove_odd([1, 3, 5, 7]) == [1, 3, 5, 7]",
        "num_ids": 351
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    temp = list1[n-1]\n    list1.remove(temp)\n    return temp\n",
        "test": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == (1, 2), \"Wrong result\"",
        "num_ids": 369
    },
    {
        "number": 414,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if(i==j):\n                return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4,5], [4,5,6,7,8]) == True",
        "num_ids": 231
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2, min1, min2 = arr[0], arr[0], arr[0], arr[0]\n    \n    for num in arr:\n        max1 = max(max1 * num, num, min1 * num)\n        min1 = min(min1 * num, num, max1 * num)\n        max2 = max(max2 * num, num)\n        min2 = min(min2 * num, num)\n    \n    return max(max2, min2)\n",
        "test": "assert ",
        "num_ids": 350
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element_list = []\n    for tup in Input:\n        first_element_list.append(tup[0])\n    print(first_element_list)\n    first_element_list = set(first_element_list)\n    print(first_element_list)\n    if len(first_element_list) > 0:\n        print(first_element_list.pop())\n        \n",
        "test": "assert     group_tuples([('abc','abcd'),('abc','abce'),('abc','abcf')]) == ['abc']",
        "num_ids": 525
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)>0:\n        max_len = len(lst[0])\n        for i in range(1,len(lst)):\n            if max_len < len(lst[i]):\n                max_len = len(lst[i])\n        return max_len\n    else:\n        return 0\n",
        "test": "assert     Find_Max([1,2,3,4,5,6,7,8,9,10]) == [10]",
        "num_ids": 459
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(round(sum(list1),2)*len(list1))\n    return sum(list1)*len(list1)\n",
        "test": "assert     round_and_sum([1, 2.5, 3.25, 4.75]) == 10",
        "num_ids": 269
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(i%2 == 0):\n            sum += i**3\n    return sum\n",
        "test": "assert     cube_Sum(1)                 == 0",
        "num_ids": 176
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return_str = ''\n    for i in range(len(test_tup)):\n        return_str += test_tup[i]\n        if i!= len(test_tup) - 1:\n            return_str += ', '\n    return return_str\n",
        "test": "assert     concatenate_tuple((\"hello\",)) == \"hello\"",
        "num_ids": 299
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    average = sum/n\n    return average\n",
        "test": "assert     find_Average_Of_Cube(1)==    1",
        "num_ids": 245
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear((\"run\", \"again\", \"!!\", \"!\")) == (\"again\", \"!!\")",
        "num_ids": 212
    },
    {
        "number": 425,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([[1,2,3], [2,3], [2,3], [4,5], [5,6], [7,8], [8,9]], 10) == 0",
        "num_ids": 364
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if num % 2!= 0:\n            oddnumbers.append(num)\n    return oddnumbers\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]",
        "num_ids": 268
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    d = dt[2]\n    m = dt[1]\n    y = dt[0]\n    \n    return '{}-{}-{}'.format(d,m,y)\n    \n",
        "test": "assert     change_date_format(\"2015-09-10\") == \"10-09-2015\"",
        "num_ids": 309
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) > 1:\n        gap = len(my_list)//2\n        while gap > 0:\n            for i in range(gap, len(my_list)):\n                temp = my_list[i]\n                j = i\n                while j >= gap and my_list[j-gap] > temp:\n                    my_list[j] = my_list[j-gap]\n                    j -= gap\n                my_list[j] = temp\n            gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort(list(range(5))) == [0, 1, 2, 3, 4]",
        "num_ids": 384
    },
    {
        "number": 429,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n",
        "test": "assert     and_tuples((1,2), (1,2)) == (1,2)",
        "num_ids": 263
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # print('a = ', a)\n    # print('b = ', b)\n    # print('c = ', c)\n    \n    # Determine the discriminant of the parabola:\n    discriminant = b**2 - 4*a*c\n    # print('discriminant = ', discriminant)\n    \n    # Determine the X-coordinate of the directrix:\n    x = ( -b + discriminant**0.5 ) / ( 2 * a )\n    # print('x = ', x)\n    \n    # Find the y-coordinate of the directrix:\n    y = a*( x**2 ) + b*x + c\n    # print('y = ', y)\n    \n    # Return the directrix:\n    return (x, y)\n",
        "test": "assert     parabola_directrix(0, 0, 2) == (0, 0)",
        "num_ids": 379
    },
    {
        "number": 431,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3, 4], [5, 6, 7, 8]) == False",
        "num_ids": 273
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2)*height\n",
        "test": "assert ",
        "num_ids": 90
    },
    {
        "number": 433,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i] >= number:\n            return True\n        i += 1\n    return False\n",
        "test": "assert     check_greater([1,2,3], 5) == False, 'Failed test 2'",
        "num_ids": 142
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab+\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n",
        "test": "assert     text_match_one(\"accbbbbb\") == None, \"Incorrect output for text_match_one('accbbbbb').\"",
        "num_ids": 262
    },
    {
        "number": 435,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Please add your code here\n    return int(str(n)[-1])\n",
        "test": "assert     last_Digit(987589) == 9",
        "num_ids": 151
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n",
        "test": "assert     neg_nos([1, 2, 3, -4, -3, -2]) == [ -4, -3, -2]",
        "num_ids": 168
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if i not in \"13579\":\n            result += i\n    return result\n",
        "test": "assert     remove_odd('h') == ''",
        "num_ids": 294
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n",
        "test": "assert     count_bidirectional(['A', 'A', 'B', 'A', 'C', 'B', 'B', 'A', 'A', 'A']) == 4",
        "num_ids": 341
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return \"\".join(map(str,L))\n",
        "test": "assert     multiple_to_single([1, 0, 3, 0]) == 31",
        "num_ids": 181
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos = re.compile('\\w+ly')\n    text_words = text.split(' ')\n    adverbs = []\n    for i in range(len(text_words)):\n        if pos.match(text_words[i]):\n            adverbs.append(text_words[i])\n    if len(adverbs) == 0:\n        print('No adverbs found!')\n    else:\n        print('{} adverbs found:'.format(len(adverbs)))\n        print(' '.join(adverbs))\n    return len(adverbs)\n",
        "test": "assert     find_adverb_position(\"She eats the food which is the last of the season.\") == ('last', 24)",
        "num_ids": 574
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # First create a variable to track the surface area.\n    sa = 0\n    # Then, use the formula given in the problem to solve for the surface area.\n    sa = 6 * (l ** 2)\n    # Return the surface area.\n    return sa\n",
        "test": "assert     surfacearea_cube(3) == 54",
        "num_ids": 139
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    length = len(nums)\n    positive_num = 0\n    for i in nums:\n        if i > 0:\n            positive_num += 1\n    return positive_num/length\n",
        "test": "assert     positive_count([1,1,1,1]) == 4/4",
        "num_ids": 302
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest_num:\n                largest_num = list1[i]\n    return largest_num\n",
        "test": "assert     largest_neg([1, 2, 3]) == -1, \"Wrong answer\"",
        "num_ids": 290
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = list()\n    for tup in test_list:\n        tup = tup[:K]\n        result.append(tup)\n    return result\n",
        "test": "assert     trim_tuple([(1, 2, 3), (1, 2, 3)], 4) == [(1, 2, 3), (1, 2, 3)], \"Trimming a tuple failed\"",
        "num_ids": 516
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(0, len(test_tup1)):\n        result = result + (test_tup1[i]*test_tup2[i],)\n    return result\n",
        "test": "assert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 12, 21, 32)",
        "num_ids": 443
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur_dict = Counter(tup) \n    lst = set(lst) \n    return [occur_dict[ele] for ele in lst] \n",
        "test": "assert     count_Occurrence(('a', 1), ['a', 2, 'b', 1]) == Counter({'a': 2, 'b': 1}) ",
        "num_ids": 401
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "test": "assert     cube_nums([1,2,3,4]) == [1,8,27,64]",
        "num_ids": 175
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n): \n        sum += i\n    return sum\n",
        "test": "assert     cal_sum(1) == 0",
        "num_ids": 169
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i for i in str if len(i) == l]\n",
        "test": "assert",
        "num_ids": 233
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n",
        "test": "assert     remove_whitespaces(\"  \\t\\t\\t  \\n\\r\") == \"\", \"check your code\"",
        "num_ids": 209
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(1000,1000) == 0",
        "num_ids": 159
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum+=i\n            else:\n                sum+=n/i\n    return sum\n",
        "test": "assert     sumofFactors(25) == 5",
        "num_ids": 278
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #pattern = re.compile(r'[^\\w\\s]z[^\\w\\s]')\n    #print(pattern.search(text).group())\n    \n    #return bool(re.search(r'[^\\w\\s]z[^\\w\\s]', text))\n    print('text_match_wordz: {}'.format(re.search(r'z.*z', text, re.IGNORECASE)))\n",
        "test": "assert     text_match_wordz('The best numbers are -2, -1, 0, 1, and 2.') ==     ['-2', '-1', '0', '1', '2']",
        "num_ids": 397
    },
    {
        "number": 455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n        \ndef check_monthnum_number(monthnum1):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum1 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n    \ndef check_leapyear_number(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if year % 400 == 0:\n        return True\n    elif year % 100 == 0:\n        return False\n    elif year % 4 == 0:\n        return True\n    else:\n        return False\n        \ndef check_leapyear_number_v2(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if year % 4 == 0 and year % 100!= 0 or year % 400 == 0:\n        return True\n    else:\n        return False\n        \ndef check_leapyear_number_v3(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 and year % 100!= 0 or year % 400 == 0\n    \ndef check_leapyear_number_v4(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 400 == 0 or year % 4 == 0 and year % 100!= 0\n    \ndef check_leapyear_number_v5(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if (year % 100 == 0 and year % 400 == 0) or year % 4 == 0:\n        return True\n    else:\n        return False\n        \ndef check_leapyear_number_v6(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n        return True\n    else:\n        return False\n    \ndef check_leapyear_number_v7(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n        return True\n    else:\n        return False\n    \ndef check_leapyear_number_v8(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 400 == 0 or year % 4 == 0 and year % 100!= 0\n    \ndef check_leapyear_number_v9(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 and year % 100!= 0 or year % 400 == 0\n    \ndef check_leapyear_number_v10(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or year % 100 == 0 and year % 400 == 0\n    \ndef check_leapyear_number_v11(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or (year % 100 == 0 and year % 400 == 0)\n    \ndef check_leapyear_number_v12(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or (year % 4 == 0 and year % 100!= 0)\n    \ndef check_leapyear_number_v13(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or (year % 4 == 0 and year % 100 == 0 and year % 400!= 0)\n    \ndef check_leapyear_number_v14(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100 == 0 and year % 400 == 0)\n    \ndef check_leapyear_number_v15(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 or year % 100 == 0 and year % 400 == 0)\n    \ndef check_leapyear_number_v16(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 or year % 100 == 0) and year % 400 == 0\n    \ndef check_leapyear_number_v17(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 400 == 0) or (year % 4 == 0 and year % 100!= 0)\n    \ndef check_leapyear_number_v18(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 400 == 0) or (year % 4 == 0 and year % 100 == 0)\n    \ndef check_leapyear_number_v19(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 and year % 100 == 0\n    \ndef check_leapyear_number_v20(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0\n    \ndef check_leapyear_number_v21(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 400 == 0) or (year % 4 == 0 and year % 100 == 0)\n    \ndef check_leapyear_number_v22(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100 == 0) or year % 400 == 0\n    \ndef check_leapyear_number_v23(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100 == 0) or (year % 400 == 0)\n    \ndef check_leapyear_number_v24(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or year % 100 == 0 and year % 400 == 0\n    \ndef check_leapyear_number_v25(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or year % 100 == 0 or year % 400 == 0\n    \ndef check_leapyear_number_v26(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return year % 4 == 0 or (year % 100 == 0 and year % 400 == 0)\n    \ndef check_leapyear_number_v27(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100 == 0) or (year % 400 == 0)\n    \ndef check_leapyear_number_v28(year):\n    '''\n    Write a function to check whether the given year number is a leap year or not.\n    '''\n    return (year % 4 == 0 and year % 100 == 0) or (year % 4 == 0 and yea",
        "test": "assert ",
        "num_ids": 308
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist\n",
        "test": "assert     reverse_string_list([\"test\"]) == [\"tset\"]",
        "num_ids": 211
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l = len(lst)\n    min_len = l\n    for i in range(l):\n        for j in range(i+1,l):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                first_index = i\n                last_index = j\n    return lst[first_index:last_index+1]\n",
        "test": "assert     Find_Min([[1,2,3],[3,4,5,6],[7,8,9],[2,1],[2,1,1,1],[2,2,1]]) == [[3,4,5,6], [2,1,1,1], [2,1]]",
        "num_ids": 410
    },
    {
        "number": 458,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert     rectangle_area(3,4) == 12",
        "num_ids": 163
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r\"[A-Z]\", \"\", str1)\n",
        "test": "assert     remove_uppercase(\"abRABc\") == \"abRABc\"",
        "num_ids": 560
    },
    {
        "number": 460,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst] \n",
        "test": "assert     Extract([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5] ",
        "num_ids": 280
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for char in str:\n        if char.isupper():\n            upper_ctr += 1\n    return upper_ctr\n",
        "test": "assert     upper_ctr(\"\") == 0, \"Empty string\"",
        "num_ids": 193
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return itertools.combinations(list1, 4)\n",
        "test": "assert ",
        "num_ids": 263
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    size = len(arr)\n    if size <= 1:\n        return arr[0]\n    elif size == 2:\n        return min(arr)\n    left_max = [None] * size\n    right_max = [None] * size\n    left_max[0] = 1\n    right_max[size-1] = 1\n    max_left_right = 1\n    max_right_left = 1\n    for i in range(1, size):\n        if arr[i-1] > 0:\n            left_max[i] = max(left_max[i-1]*arr[i-1], 1)\n        else:\n            left_max[i] = 1\n        if arr[size-i-1] > 0:\n            right_max[size-i-1] = max(right_max[size-i]*arr[size-i-1], 1)\n        else:\n            right_max[size-i-1] = 1\n        max_left_right = max(max_left_right, left_max[i]*right_max[size-i-1])\n    return max(left_max[0], right_max[0], max_left_right)\n",
        "test": "assert     max_subarray_product([-3, -1]) == -3",
        "num_ids": 397
    },
    {
        "number": 464,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i == n:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_value({1:1, 2:2, 3:1}, 1) == True",
        "num_ids": 265
    },
    {
        "number": 465,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}\n",
        "test": "assert     drop_empty({}) == {}, 'drop_empty({}) should be {{}}'",
        "num_ids": 241
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_so_far = 1\n    for i in range(0,len(arr)):\n        max_so_far = max_so_far * arr[i]\n    min_so_far = 1\n    for i in range(len(arr)-1,-1,-1):\n        min_so_far = min_so_far * arr[i]\n        if arr[i] == 0:\n            max_so_far = 0\n            break\n        max_so_far = max(max_so_far, min_so_far)\n        min_so_far = min_so_far * arr[i]\n    return max_so_far\n",
        "test": "assert     max_product([1, 5, 6, 4, 4]) == 120",
        "num_ids": 569
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(0, len(test_tup)):\n        try:\n            print(test_tup[i], test_tup[i+1], test_tup[i]+test_tup[i+1])\n        except IndexError:\n            break\n",
        "test": "assert     (2, 3, 6) == add_pairwise((2, 3, 5))",
        "num_ids": 311
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for num in arr:\n        mul = (mul * num) % n\n    return mul\n",
        "test": "assert     (find_remainder([2, 4, 5], 5) ==     2*4*5 % 5)",
        "num_ids": 148
    },
    {
        "number": 472,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i] == l[i+1] - 1 for i in range(len(l)-1))\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5]) == True, \"Wrong output\"",
        "num_ids": 316
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) < len(test_list2):\n        test_list1, test_list2 = test_list2, test_list1\n    return set(test_list1).intersection(test_list2)\n",
        "test": "assert     tuple_intersection(test_list1, test_list2) == [('a', 1, 1.0), ('a', 2, 2.0), ('a', 3, 3.0), ('b', 4, 4.0), ('b', 5, 5.0), ('c', 6, 6.0), ('c', 7, 7.0)]",
        "num_ids": 333
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newStr = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newStr = newStr + newch\n        else:\n            newStr = newStr + str1[i]\n    return newStr\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams or not. An anagram is\n    a word, phrase, or name formed by rearranging the letters of a different\n    word, phrase, or name.\n    '''\n    return sorted(str1) == sorted(str2)\n",
        "test": "assert     replace_char(\"abc\",'a', 'z') == \"zbc\"",
        "num_ids": 167
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    count = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n    return count\n",
        "test": "assert     sort_counter({1: 1, 3: 2, 2: 3, 4: 1}) == \\",
        "num_ids": 266
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n    \ndef multiply(nums):\n    '''\n    Write a python function to multiply the element in the array, if the element is less than 0 set it to 0.\n    '''\n    return functools.reduce(lambda x,y: x*y if y>0 else x,nums)\n    \ndef main():\n    #print('big_sum(nums):',big_sum(nums))\n    #print('multiply(nums):',multiply(nums))\n    \n    \n    \n    \nif __name__ == '__main__':\n    nums = [1, 2, 3, -4, -5, 6, 7, -8, 9]\n    main()\n    \n",
        "test": "assert     big_sum([10, 100, 32, 6, 20]) == 180",
        "num_ids": 210
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower(\"python\") == \"python\"",
        "num_ids": 113
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "test": "assert     remove_lowercase('abCDE') == 'CDE'",
        "num_ids": 231
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n / 10\n    return int(n)\n",
        "test": "assert     first_Digit(123) == 1",
        "num_ids": 121
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [element for element in list if element % 2 == 1]\n",
        "test": "assert     Split([1,2,3,4,5]) == [1,3,5], \"Split([1,2,3,4,5]) should be [1,3,5]\"",
        "num_ids": 273
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) :\n        '''\n        Function to find sum of cubes of first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1,n+1):\n            sum += (i*i*i)\n        return sum\n    return sum_of_cubes(n) - (n*(n+1)*(n+2))/6\n",
        "test": "assert     difference(10) == 55",
        "num_ids": 188
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    res = 0\n    for i in range(0,N) :\n        for j in range(0,N):\n            if ((A[i]^A[j])%2!= 0):\n                res += 1\n    return res\n",
        "test": "assert     find_Odd_Pair([2, 1, 3, 4], 4) == 2",
        "num_ids": 381
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(x.upper() if x.islower() else x.lower() for x in string)\n",
        "test": "assert     toggle_string('abc') == 'ABC'",
        "num_ids": 159
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if not n1 and not n2:\n        return 0\n    elif not n1:\n        return len(str(n2))\n    elif not n2:\n        return len(str(n1))\n    else:\n        return len(str(n1)) + len(str(n2))\n",
        "test": "assert     digit_distance_nums(12, 32) == 4",
        "num_ids": 328
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([1, 2, -1, -2, 3, 5, -3, 1], 8) == 8",
        "num_ids": 424
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1).union(test_tup2)\n    union = list(sorted(union))\n    return union\n",
        "test": "assert     sorted(union_elements((1,2,3,4), (0,5,6,7))) == [0,1,2,3,4,5,6,7]",
        "num_ids": 379
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    # print(len(lst))\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            sub_list = []\n            if i<=j:\n                sub_list.extend(lst[i:j+1])\n            if len(sub_list) > max_len:\n                max_len = len(sub_list)\n    return max_len\n",
        "test": "assert     Find_Max_Length([ [1], [2], [3], [4], [5], [6], [7], [8], [9], [10] ]) == 10",
        "num_ids": 348
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall('\"(\\w+)\"', text)\n    return result\n",
        "test": "assert     extract_values('In \"The Hitchhiker\\'s Guide\" to the Galaxy\"') == ['The Hitchhiker\\'s Guide to the Galaxy'], 'check the second example'",
        "num_ids": 277
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    print(count)\n",
        "test": "assert     count_Pairs([1,2,3,4,5], 4) ==     6",
        "num_ids": 278
    },
    {
        "number": 565,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o'] ",
        "num_ids": 117
    },
    {
        "number": 566,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n//10)\n",
        "test": "assert     sum_digits(11) == 2",
        "num_ids": 193
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([]) == True",
        "num_ids": 228
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(0,length)]\n",
        "test": "assert     [{}, {}] == empty_list(2), \"Fails\"",
        "num_ids": 143
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in list1]\n",
        "test": "assert     sort_sublists([['1','2','3'],['4','5','6'],['7','8','9']]) == [['1','2','3'],['4','5','6'],['7','8','9']]",
        "num_ids": 168
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n",
        "test": "assert     two_unique_nums([1, 2, 2, 3, 4, 4, 5]) == 5, \"Error\"",
        "num_ids": 267
    },
    {
        "number": 573,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    s = set(list_data)\n    product = 1\n    for num in s:\n        product = product * num\n    return product\n",
        "test": "assert     unique_product([0,0,0,0]) == 0",
        "num_ids": 283
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = (2 * 3.1415 * r * (r + h)) + (3.1415 * r ** 2)\n    return surfacearea\n",
        "test": "assert     surfacearea_cylinder(1,2) == 12",
        "num_ids": 164
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while(i<len(A) and j<len(B)):\n        if(A[i]==B[j]):\n            j=j+1\n        i=i+1\n    if(j==len(B)):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([],[[1]]) == False ",
        "num_ids": 378
    },
    {
        "number": 577,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def last_Digit(n):\n        if n==1:\n            return 1\n        else:\n            return n % 10\n    last_digit_of_n = last_Digit(n)\n    factorial_last_digit = last_Digit(last_digit_of_n)\n    return factorial_last_digit",
        "test": "assert     last_Digit_Factorial(4) == 4",
        "num_ids": 238
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for t in zip(list1,list2,list3) for x in t]\n    \ndef interleave_lists_dictionary(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    my_list=[]\n    for i in range(len(list1)):\n        my_list.append(list1[i])\n        my_list.append(list2[i])\n        my_list.append(list3[i])\n    return my_list\n    \n    \n    ",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 464
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = (0, 1, 2, 5, 6, 7, 9)\n    test_tup2 = (0, 1, 2, 3, 4, 5, 6)\n    # (0, 1, 2, 3, 4, 5, 6)\n    # (0, 1, 2, 5, 6, 7, 9)\n    # (0, 1, 2, 3, 4, 5, 6)\n",
        "test": "assert     find_dissimilar((1,2,3,4,5),(2,4,6,8)) == (1,3,5)",
        "num_ids": 408
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple) or len(test_tuple) == 0 or \\\n        not isinstance(test_tuple[0], tuple):\n        raise Exception('Input is not a tuple!')\n    elif not callable(even_fnc):\n        raise Exception('The even function is not a callable!')\n    new_tuple = []\n    for item in test_tuple:\n        if len(item) == 0:\n            raise Exception('The list is empty!')\n        if len(item) == 1:\n            new_tuple.append(item[0])\n        else:\n            for i in item:\n                if even_fnc(i):\n                    new_tuple.append(i)\n    return tuple(new_tuple)\n",
        "test": "assert ",
        "num_ids": 512
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    SA = b*(s**2 + s*((s-b)**2))\n    return SA\n",
        "test": "assert     surface_Area(4,5) == 50, \"check code\"",
        "num_ids": 159
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({})",
        "num_ids": 140
    },
    {
        "number": 583,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise Exception(\"Error, input cannot be negative.\")\n    elif num == 0:\n        return 1\n    else:\n        return sum([catalan_number(i)*catalan_number(num-1-i) for i in range(num)])\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 294
    },
    {
        "number": 584,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'ly\\b', text)\n",
        "test": "assert     find_adverbs('I am good.') == [], 'find_adverbs is incorrect. Read the instructions carefully.'",
        "num_ids": 359
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.nlargest(n,items)\n",
        "test": "assert     expensive_items([{'name': 'bread', 'price': 100},",
        "num_ids": 416
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = l[:n]\n    y = l[n:]\n    return x+y\n",
        "test": "assert     split_Arr([1, 2, 3, 4, 5], 3) == [1, 2, 3] + [4, 5]",
        "num_ids": 174
    },
    {
        "number": 587,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     tuple([1, 2, 3]) == list_tuple([1, 2, 3])",
        "num_ids": 149
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1]-nums[0]\n",
        "test": "assert     big_diff([1,2,3]) == 2",
        "num_ids": 188
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    num = a**2\n    sq_list = []\n    while num<b:\n        sq_list.append(num)\n        num = num + 1\n    return sq_list\n",
        "test": "assert     perfect_squares(3, 4) == [2, 3]",
        "num_ids": 242
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    t = cmath.atan(y/x)\n    return t,r\n",
        "test": "assert     polar_rect(0,1) == (0,1), \"polar_rect(0,1) is incorrect\"",
        "num_ids": 325
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List2(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList[::-1],newList)\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List3(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList,newList[::-1],sep=\"\\n\")\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List4(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList,newList[::-1],newList[::-1],sep=\"\\n\")\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List5(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList,newList[::-1],newList[::-1],sep=\"\\n\")\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "test": "assert     (swap_List([1,2,3]) == [3,2,1])",
        "num_ids": 274
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return 1 if (k==0 or k==n) else int(binomial_Coeff(n-1,k-1)) + int(binomial_Coeff(n-1,k))\n",
        "test": "assert     binomial_Coeff(5,2) == 10",
        "num_ids": 186
    },
    {
        "number": 593,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^\\d*\\.\\d*\\.\\d*\\.0\\.\", \"\", ip)\n",
        "test": "assert     removezero_ip('10.10.0.0') == '10.10.0.0'",
        "num_ids": 312
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    else:\n        result = []\n        for num in range(len(list1)):\n            if num % 2 == 0:\n                result.append(list1[num])\n            else:\n                result.append(list1[num])\n        return result\n",
        "test": "assert     diff_even_odd([1,3,5,7,9]) == 4",
        "num_ids": 368
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # we are gonna use the same idea as in Minimum number of insertions and deletion to solve this problem\n    \n    # creating a hash table to store number of occurences of 0 and 1\n    table = {\n        '0' : 0,\n        '1' : 0\n    }\n    \n    # here we will keep track of the number of 0s and 1s in str1\n    count_0 = 0\n    count_1 = 0\n    \n    for c in str1 :\n        table[c] += 1\n        \n        if c == '0' :\n            count_0 += 1\n        else :\n            count_1 += 1\n    \n    # we will create a hash table to store number of occurences of 0 and 1 in str2\n    table_2 = {\n        '0' : 0,\n        '1' : 0\n    }\n    \n    count_0_2 = 0\n    count_1_2 = 0\n    \n    for c in str2 :\n        table_2[c] += 1\n        \n        if c == '0' :\n            count_0_2 += 1\n        else :\n            count_1_2 += 1\n    \n    # we need to initialize a variable to store the number of swaps required\n    # to convert one string to another\n    num_swaps = 0\n    \n    # this will check the number of occurences of 0 in str1 and str2\n    # if the difference is greater than zero, it means we need to convert one of the strings\n    # from 0 to 1\n    if count_0 - count_0_2 > 0 :\n        num_swaps += count_0 - count_0_2\n    \n    if count_1 - count_1_2 > 0 :\n        num_swaps += count_1 - count_1_2\n    \n    # here we will check the occurences of 1 in str1 and str2\n    # if the difference is greater than zero, it means we need to convert one of the strings\n    # from 1 to 0\n    if count_0_2 - count_0 > 0 :\n        num_swaps += count_0_2 - count_0\n    \n    if count_1_2 - count_1 > 0 :\n        num_swaps += count_1_2 - count_1\n    \n    # we will return the number of swaps\n    return num_swaps\n    \n    \n",
        "test": "assert     min_Swaps('1101', '1010') == 2 ",
        "num_ids": 986
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert     tuple_size((1,2,3,4,5)) == sys.getsizeof((1,2,3,4,5))",
        "num_ids": 179
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > arr1[-1] + arr2[-1]:\n        return None\n    if k <= arr1[0]:\n        return arr1[0]\n    if k <= arr2[0]:\n        return arr2[0]\n    low = 0\n    high = len(arr1)\n    mid = low + (high - low) // 2\n    mid = arr1[mid]\n    low_second = 0\n    high_second = len(arr2)\n    while low < high:\n        mid = arr1[mid]\n        high = high - 1\n        low = low + 1\n        if k <= mid:\n            high = high_second\n            high_second = high_second - 1\n        else:\n            low = low_second\n            low_second = low_second + 1\n            k = k - mid\n    if low == 0:\n        return arr2[k - 1]\n    else:\n        return arr1[k - 1]\n        \n",
        "test": "assert     find_kth([1, 2, 3], [4, 5, 6], 1) == 1",
        "num_ids": 767
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    sum_ = 0\n    for i in number:\n        sum_ += int(i)**3\n    if sum_ == int(number):\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(153) == True, 'Armstrong number is 153'",
        "num_ids": 270
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n=0\n    avg_n=0\n    for i in range(1,number+1):\n        sum_n=sum_n+i\n    avg_n=sum_n/number\n    print(\"Sum of first\",number,\"natural numbers:\",sum_n)\n    print(\"Average of first\",number,\"natural numbers:\",avg_n)\n",
        "test": "assert ",
        "num_ids": 199
    },
    {
        "number": 600,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "test": "assert     is_Even(3) == False",
        "num_ids": 107
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    length = len(str1)\n    dict1 = dict()\n    for i in range(length):\n        if str1[i] in dict1:\n            return str1[i]\n        else:\n            dict1[str1[i]] = 1\n    return \"No repeated character\"\n",
        "test": "assert     first_repeated_char('abcdaa') == 'a', 'First repeated character is not a'",
        "num_ids": 366
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(n):\n        '''\n        Returns True if n is a lucid number\n        '''\n        d = 2\n        while d*d < n:\n            if n % d == 0:\n                return False\n            d += 1\n        return n > 1\n    ludic_list = [n]\n    while True:\n        n += 1\n        if is_ludic(n):\n            ludic_list.append(n)\n        if n >= n**2:\n            break\n    return ludic_list\n",
        "test": "assert",
        "num_ids": 222
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string\n    words = s.split(' ')\n    # reverse the list\n    words.reverse()\n    # Join the words\n    reversed_s =''.join(words)\n    return reversed_s\n",
        "test": "assert     reverse_words(\"Python Skills\") == \"Skills Python\"",
        "num_ids": 217
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 175
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180 * math.pi\n",
        "test": "assert     (radian_degree(90) - math.pi/2) < 0.0000001",
        "num_ids": 190
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #start = re.search(pattern, text)\n    #end = re.search(pattern, text[len(text) - 1])\n    #print(start, end)\n    start = text.find(pattern)\n    end = text.rfind(pattern)\n    return start, end\n",
        "test": "assert     find_literals(\"a-bcd-e\", r\"a-(b|e)e\") == (\"ae\", 4, 6)",
        "num_ids": 368
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0 for x in range(n+1)] for x in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1] \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 294
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n        \nprint(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 3))\nprint(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 4))\nprint(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 8))\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 3) == [1,2,3,5]",
        "num_ids": 366
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[i][N-1] for i in range(len(test_list))])\n",
        "test": "assert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9], [9, 0, 1]], 1) == 9",
        "num_ids": 390
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    a = []\n    b = []\n    c = []\n    for i in lst:\n        a.append(i[0])\n        b.append(i[1])\n    c = [a,b]\n    return(c)\n",
        "test": "assert     merge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]]",
        "num_ids": 376
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # If the list is empty, return 0\n    if not test_list:\n        return 0\n",
        "test": "assert ",
        "num_ids": 155
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(i)/len(i), 2) for i in nums]\n",
        "test": "assert     average_tuple(((0, 1, 1), (0, 1, 1), (0, 1, 1))) == [0.5, 0.5, 0.5]",
        "num_ids": 385
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1, 2), (3, 4)) == (1, 2), 'Test 1'",
        "num_ids": 154
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_position = 0\n    while current_position!= d:\n        if current_position < d:\n            jumps += 1\n            current_position += steps\n        else:\n            return -1\n    return jumps\n",
        "test": "assert not min_Jumps(2, 2)     == 2, \"This case should be False.\"",
        "num_ids": 329
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print([x/y for x,y in zip(nums1,nums2)])\n",
        "test": "assert ",
        "num_ids": 199
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    letters = []\n    numbers = []\n    for letter in test_str:\n        if letter.isalpha():\n            letters.append(letter)\n        elif letter.isnumeric():\n            numbers.append(letter)\n    return \"\".join(letters + numbers)\n",
        "test": "assert     move_num('abcx123') == 'abcx123'",
        "num_ids": 399
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # a = [1, 2, 4, 8]\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 2\n    # f(2, 4) = 1\n    # f(2, 8) = 1\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 2\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 1\n    # f(2, 2) = 2\n    # f(2, 4) = 1\n    # f(2, 8) = 2\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 2\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 2\n    # f(8, 4) = 2\n    # f(8, 8) = 3\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) = 2\n    # f(1, 2) = 3\n    # f(1, 4) = 2\n    # f(1, 8) = 2\n    \n    # f(2, 1) = 2\n    # f(2, 2) = 3\n    # f(2, 4) = 2\n    # f(2, 8) = 3\n    \n    # f(4, 1) = 2\n    # f(4, 2) = 3\n    # f(4, 4) = 2\n    # f(4, 8) = 3\n    \n    # f(8, 1) = 1\n    # f(8, 2) = 1\n    # f(8, 4) = 1\n    # f(8, 8) = 2\n    \n    # f(1, 1) ",
        "test": "assert     largest_subset([2, 4, 6, 8]) == 4, 'error on 2'",
        "num_ids": 2206
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n    #if one list is longer than the other\n    if n<=len(arr1):\n        x = len(arr1)\n        y = n\n    else:\n        x = n\n        y = len(arr2)\n    if x==1 and y==0:\n        return arr1[0]\n    if x==0 and y==1:\n        return arr2[0]\n    if x==1 and y==1:\n        if arr1[0] < arr2[0]:\n            return arr2[0]\n        elif arr1[0] > arr2[0]:\n            return arr1[0]\n        else:\n            return arr1[0]\n    median = 0\n    if n%2 == 0:\n        mid1 = n//2\n        mid2 = mid1 - 1\n        median = (arr1[mid1] + arr1[mid2])/2\n    else:\n        mid1 = n//2\n        median = arr1[mid1]\n    if y%2 == 0:\n        mid3 = y//2\n        mid4 = mid3 - 1\n        median = (median + arr2[mid4] + arr2[mid3])/2\n    else:\n        mid3 = y//2\n        median = (median + arr2[mid3])/2\n    return median\n    \ndef get_mean(arr1, arr2, n):\n    '''\n    Write a function to find the mean of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    mean = 0\n    if n%2 == 0:\n        mid1 = n//2\n        mid2 = mid1 - 1\n        mean = (arr1[mid1] + arr1[mid2])/2\n    else:\n        mid1 = n//2\n        mean = arr1[mid1]\n    if x%2 == 0:\n        mid3 = x//2\n        mid4 = mid3 - 1\n        mean = (mean + arr2[mid4] + arr2[mid3])/2\n    else:\n        mid3 = x//2\n        mean = (mean + arr2[mid3])/2\n    return mean\n    \ndef get_mode(arr1, arr2, n):\n    '''\n    Write a function to find the mode of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    count1 = dict()\n    count2 = dict()\n    #counts for each element in arr1\n    for i in range(len(arr1)):\n        if arr1[i] in count1:\n            count1[arr1[i]] += 1\n        else:\n            count1[arr1[i]] = 1\n    #counts for each element in arr2\n    for i in range(len(arr2)):\n        if arr2[i] in count2:\n            count2[arr2[i]] += 1\n        else:\n            count2[arr2[i]] = 1\n    #count of common elements\n    mode_count = 0\n    mode = 0\n    for i in count1:\n        if i in count2:\n            mode_count += min(count1[i], count2[i])\n    if mode_count > 0:\n        mode = min(arr1[0], arr2[0])\n    for i in count1:\n        if i in count2:\n            if count1[i] == count2[i] and count1[i] > mode_count:\n                mode = i\n    if mode_count == 0:\n        mode = None\n    return mode\n    \ndef get_variance(arr1, arr2, n):\n    '''\n    Write a function to find the variance of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    mean = get_mean(arr1, arr2, n)\n    variance = 0\n    #calculate the variance\n    for i in range(len(arr1)):\n        variance += ((arr1[i] - mean)**2)\n    for i in range(len(arr2)):\n        variance += ((arr2[i] - mean)**2)\n    variance = variance/(x-1)\n    return variance\n    \ndef get_std(arr1, arr2, n):\n    '''\n    Write a function to find the standard deviation of two sorted lists of same size.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    mean = get_mean(arr1, arr2, n)\n    std = 0\n    #calculate the standard deviation\n    for i in range(len(arr1)):\n        std += ((arr1[i] - mean)**2)\n    for i in range(len(arr2)):\n        std += ((arr2[i] - mean)**2)\n    std = sqrt(std/(x-1))\n    return std\n    \ndef get_median_2arr(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted arrays.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    median = 0\n    if n%2 == 0:\n        mid1 = n//2\n        mid2 = mid1 - 1\n        median = (arr1[mid1] + arr1[mid2])/2\n    else:\n        mid1 = n//2\n        median = arr1[mid1]\n    if x%2 == 0:\n        mid3 = x//2\n        mid4 = mid3 - 1\n        median = (median + arr2[mid4] + arr2[mid3])/2\n    else:\n        mid3 = x//2\n        median = (median + arr2[mid3])/2\n    return median\n    \ndef get_variance_2arr(arr1, arr2, n):\n    '''\n    Write a function to find the variance of two sorted arrays.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    mean = get_mean_2arr(arr1, arr2, n)\n    variance = 0\n    #calculate the variance\n    for i in range(len(arr1)):\n        variance += ((arr1[i] - mean)**2)\n    for i in range(len(arr2)):\n        variance += ((arr2[i] - mean)**2)\n    variance = variance/(x-1)\n    return variance\n    \ndef get_std_2arr(arr1, arr2, n):\n    '''\n    Write a function to find the standard deviation of two sorted arrays.\n    '''\n    if n==0:\n        return\n    if n<=len(arr1):\n        x = len(arr1)\n    else:\n        x = n\n    if x==1 and n==0:\n        return\n    mean = get_mean_2arr(arr1, arr2, n)\n    std = 0\n    #calculate the standard deviation\n    for i in range(len(arr1)):\n        std += ((arr1[i] - mean)**2)\n    for i in range(len(arr2)):\n        std += ((arr2[i] - mean)**2)\n    std = sqrt(std/(x-1)",
        "test": "assert     get_median([1, 3, 5], [2, 4], 2) == 3",
        "num_ids": 407
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_list = []\n    for num in nums:\n        power_list.append(num**n)\n    return power_list\n",
        "test": "assert     nth_nums([2,4,6], 3) == [8, 64, 216]",
        "num_ids": 224
    },
    {
        "number": 624,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "test": "assert     is_upper(\"\") == False, \"empty string\"",
        "num_ids": 138
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1], \"Swap_List error\"",
        "num_ids": 215
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3.14*(r**2))/2\n",
        "test": "assert     triangle_area(2) == pi/3*1.5",
        "num_ids": 144
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    i = start\n    while i <= end:\n        if array[i]!= i:\n            return i\n        i += 1\n    return i\n",
        "test": "assert     find_First_Missing([0,1,2,3,4,6,7,8,9,10]) == 5",
        "num_ids": 348
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n",
        "test": "assert     replace_spaces(\"Heralded to me by Lord Godalming\") == \"Heralded%20to%20me%20by%20Lord%20Godalming\"",
        "num_ids": 206
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 'error'",
        "num_ids": 479
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        for i in range(len(sub)):\n            if abs(ele[0] - sub[i][0]) == 1 and abs(ele[1] - sub[i][1]) == 0:\n                sub.append(ele)\n                adjac(ele, sub)\n            elif abs(ele[0] - sub[i][0]) == 0 and abs(ele[1] - sub[i][1]) == 1:\n                sub.append(ele)\n                adjac(ele, sub)\n    return sub\n",
        "test": "assert ",
        "num_ids": 429
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for i in text:\n        if i =='':\n            result += '_'\n        else:\n            result += i\n    return result\n",
        "test": "assert     replace_spaces('hello_world') == 'hello_world'",
        "num_ids": 259
    },
    {
        "number": 632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    num_list = new_list\n    print(\"Number list after moving all zeroes:\")\n    print(num_list)\n    print()\n",
        "test": "assert ",
        "num_ids": 444
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum^arr[i]^arr[j]\n    return sum\n",
        "test": "assert     pair_xor_Sum([1, 2, 3, 4], 4) ",
        "num_ids": 215
    },
    {
        "number": 635,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Make a list of elements to sort\n    # If the input is a tuple, make a list of the tuple\n    input_list = []\n    if type(iterable[0]) == tuple:\n        for i in range(len(iterable)):\n            input_list.append(iterable[i])\n    else:\n        input_list = list(iterable)\n    input_list.sort()\n    # Make the heap\n    heap = []\n    for i in input_list:\n        hq.heappush(heap, i)\n    # Extract elements from the heap in sorted order\n    sorted_list = []\n    for i in range(len(input_list)):\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n",
        "test": "assert     heap_sort([0,1,2,3,4,5,6,7,8,9]) == sorted([0,1,2,3,4,5,6,7,8,9]), 'heap_sort failed'",
        "num_ids": 519
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     noprofit_noloss(10,10) == True, 'Test 1 Fail'",
        "num_ids": 373
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #temperature in celsius\n    t_c = t\n    #temperature in fahrenheit\n    t_f = t*(9/5)+32\n    #wind speed in km/h\n    v_km = v\n    #wind speed in mph\n    v_mph = v*0.621371\n    #wind speed in m/s\n    v_m = v*0.621\n    #wind chill index\n    wci = 13.12 + (0.6215*t_f) - (11.37*math.pow(v_mph,0.16)) + (0.3965*t_c) + (0.16*t_f*math.pow(v_m,0.16))\n    return round(wci)\n",
        "test": "assert     wind_chill(8,    15) == 11.0",
        "num_ids": 2328
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_lowercase = [s for s in sample_names if s[0].islower()]\n    return len(sample_names_lowercase)\n",
        "test": "assert     sample_nam([]) == 0, \"Empty list returns zero\"",
        "num_ids": 354
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    return items\n",
        "test": "assert     remove_parenthesis('Remove (parentheses) and what is in between them from this string') == 'Remove parentheses and what is in between them from this string', \"Remove (parentheses) and what is in between them from this string\"",
        "num_ids": 343
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n < 1):\n        return 0\n    else:\n        return (n*(n+1))//2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 2118
    },
    {
        "number": 643,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.findall(r'[^z]+z[^z]', text)\n    return len(match) == 0\n",
        "test": "assert     text_match_wordz_middle(\"zzzzzzz \") == True",
        "num_ids": 2425
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if(k == 1):\n        return input[::-1]\n    else:\n        return reverse_Array_Upto_K(input[0:k], k-1) + input[k-1:len(input)]\n",
        "test": "assert     reverse_Array_Upto_K(input, 1) == [7, 6, 5, 4, 3, 2, 1]",
        "num_ids": 483
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('hello', 'world'), {'python': 'awesome'}) == ('hello', 'world', {'python': 'awesome'})",
        "num_ids": 157
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    for i in range(len(cost)):\n        cost[i][0] = cost[i][0] + cost[i-1][0]\n",
        "test": "assert     maxAverageOfPath([",
        "num_ids": 745
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = []\n    for student in students:\n        if students[student][0] >= h and students[student][1] >= w:\n            res.append(student)\n    return res\n",
        "test": "assert     filter_data({'Rolf': (1.7, 72), 'Bob': (1.78, 80), 'Jen': (1.69, 75)},1.75,75) == {'Rolf': (1.7, 72), 'Bob': (1.78, 80)}",
        "num_ids": 511
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2), 'The input lists must be the same length'\n    return sum(map(eq, nums1, nums2))\n",
        "test": "assert     count_same_pair([1, 1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5, 5]) == 2",
        "num_ids": 382
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n",
        "test": "assert ",
        "num_ids": 105
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"(.*)\"', text1)\n",
        "test": "assert     extract_quotation('\"Hello, world!\"')         == \"Hello, world!\"",
        "num_ids": 216
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output = ()\n    for index in range(len(test_tup) - 1):\n        output += (test_tup[index] * test_tup[index + 1],)\n    return output\n",
        "test": "assert     ((2, 3, 4, 5, 6, 7) == multiply_elements((2, 3, 4, 5)))",
        "num_ids": 326
    },
    {
        "number": 728,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2)\n    return [x + y for x,y in zip(lst1,lst2)]\n",
        "test": "assert     (sum_list([1,2,3],[1,2,3])==[2,4,6])",
        "num_ids": 231
    },
    {
        "number": 730,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n",
        "test": "assert     consecutive_duplicates([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]",
        "num_ids": 428
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Your code here\n",
        "test": "assert ",
        "num_ids": 158
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[., ]', ':', text)\n",
        "test": "assert     re.sub(r'[^:.,\\s]', '', 'hello world, I love Python. And I love Java') == 'hello world:I love Python.:And I love Java'",
        "num_ids": 245
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)-1\n    while left < right:\n        mid = (left + right)//2\n        if A[mid] == x:\n            if mid == 0 or x > A[mid-1]:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n",
        "test": "assert     find_first_occurrence([1,2,3,4,5,6,7,8,8,8,9], 9) == 8",
        "num_ids": 428
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    sop=0\n    for i in range(len(arr)):\n        sop+=sum_Of_Subarray_Prod_helper(arr,i)\n    return sop\n",
        "test": "assert     sum_Of_Subarray_Prod([2, 3, -2, 4, 5, -3]) == 116, \"Not right!\"",
        "num_ids": 391
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if (n == 0):\n        return n\n    else:\n        return (n & ~(-n))\n",
        "test": "assert     set_middle_bits(0) == 1, \"this should be 1\"",
        "num_ids": 222
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert     left_insertion([1, 3, 5, 6], 7) == 4",
        "num_ids": 239
    },
    {
        "number": 737,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)): \n        return \"String starts with vowel\"\n    else: \n        return \"String doesn't starts with vowel\"\n",
        "test": "assert     re.match(regex, 'aEg')",
        "num_ids": 340
    },
    {
        "number": 738,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n - 1) * n\n",
        "test": "assert     True == geometric_sum(1)",
        "num_ids": 151
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_index = int((math.pow(10,n)-1)/(math.pow(10,n-1)-1))\n    print(max_index)\n    return max_index \n",
        "test": "assert     find_Index(0) == 0",
        "num_ids": 329
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup)):\n        result[i] = test_tup[i]\n",
        "test": "assert     (",
        "num_ids": 207
    },
    {
        "number": 741,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    return False\n",
        "test": "assert     all_Characters_Same('aaaa') == True",
        "num_ids": 177
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * math.sqrt(2) * math.sqrt(side ** 2 * 6) / 6\n",
        "test": "assert     area_tetrahedron(2) == 2, \"Area of tetrahedron of side 2 should be 2.0\"",
        "num_ids": 275
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    count = 0\n    i = 0\n    while count < m:\n        j = 0\n        while j < len(list) - 1:\n            if j == len(list) - count - 1:\n                list[j] = list[j + 1]\n            else:\n                list[j] = list[j + 1]\n            j = j + 1\n        i = i + 1\n        count = count + 1\n    return list\n",
        "test": "assert     rotate_right([1, 2, 3, 4, 5, 6, 7], 3) == [3, 4, 5, 6, 7, 1, 2]",
        "num_ids": 231
    },
    {
        "number": 744,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n",
        "test": "assert     check_none((0, 1, 2)) == False, \"check_none((0, 1, 2)) == False is not False\"",
        "num_ids": 120
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    x = lambda startnum, endnum: [num for num in range(startnum, endnum+1) if num % int(str(num)[0]) == 0 and num % int(str(num)[1]) == 0 and num % int(str(num)[2]) == 0 and num % int(str(num)[3]) == 0]\n    print(x(startnum, endnum))\n",
        "test": "assert ",
        "num_ids": 228
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2)*(a/360)\n",
        "test": "assert     sector_area(2, 360) == 12.566370614359172, \"The area is incorrect.\"",
        "num_ids": 152
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs_helper(X, Y, Z, 0, 0, 0, {})\n",
        "test": "assert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGXGTXAYB\") == \"AGXGTXAYB\"",
        "num_ids": 468
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=\\w)([A-Z])',r' \\1',str1)\n",
        "test": "assert     capital_words_spaces('WelcomeToCapitalWords') == 'Welcome To Capital Words'",
        "num_ids": 290
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda nums: [int(s) if s.isdigit() else s for s in nums])\n",
        "test": "assert     sort_numeric_strings([\"0\", \"1\", \"1\", \"1.1\", \"2\"]) == ['0', '1', '1', '1.1', '2']",
        "num_ids": 288
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6], 'incorrect output'",
        "num_ids": 187
    },
    {
        "number": 751,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i == 1:\n        return True if arr[0] >= arr[1] else False\n    if arr[i] >= arr[(i-1)//2]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_min_heap_helper([1,2,3,4],0) == True, \"Incorrect output\"",
        "num_ids": 287
    },
    {
        "number": 752,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 2:\n        return n\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2)) % n\n",
        "test": "assert     jacobsthal_num(1) == 1 ",
        "num_ids": 166
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import heapq\n    l = []\n    for i in test_list:\n        heapq.heappush(l, (i[0], i[1]))\n        if len(l) > K:\n            heapq.heappop(l)\n    l.sort(key=lambda x: x[0])\n    return [x[1] for x in l]\n",
        "test": "assert ",
        "num_ids": 201
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [item for item in l1 if item in l2 and item in l3]\n",
        "test": "assert     extract_index_list([1, 2, 3, 4], [2, 3, 5, 6], [7, 8, 9, 10]) == []",
        "num_ids": 321
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = set(numbers)\n    if len(numbers) == 1:\n        return None\n    else:\n        min_value = min(numbers)\n        numbers.remove(min_value)\n        return min(numbers)\n",
        "test": "assert     second_smallest([1,2,3,4,5]) == 2",
        "num_ids": 181
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = re.compile(r'\\ba.+b\\b')\n    if regex.search(text):\n        return \"Match Found\"\n    else:\n        return \"No Match Found\"\n",
        "test": "assert     text_match_zero_one('ab') == True",
        "num_ids": 264
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs(['acbdd','adcbb','acddb','dccba']) == 0",
        "num_ids": 318
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = [1,2,3,4,2,2,3,4,5,4,5,6,7,8,8,9,4,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9,4",
        "test": "assert     unique_sublists([[1, 2, 3], [1, 2, 3, 4, 5], [2, 3, 4], [3, 4, 5, 6, 7, 8]]) == {(1, 2, 3): 1, (2, 3, 4): 2, (3, 4, 5, 6, 7, 8): 1}, 'Test 2 failed'",
        "num_ids": 2290
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal(\"0.14c\") == False, \"incorrect for not decimal 1\"",
        "num_ids": 196
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1\n",
        "test": "assert     unique_Element([1, 2, 2, 3]) == False, \"Check your solution\"",
        "num_ids": 128
    },
    {
        "number": 762,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in range(1, 3):\n        return False\n    elif monthnum3 in range(4, 6):\n        return True\n    elif monthnum3 in range(7, 9):\n        return False\n    elif monthnum3 in range(10, 12):\n        return True\n",
        "test": "assert     check_monthnumber_number(2) == True",
        "num_ids": 263
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array \n    arr.sort() \n    # initialize difference as infinite \n    diff = 10**20\n    # traverse the array for all pairs \n    for i in range(0, n-1): \n        # Find the difference between current pair \n        # and previous pair. \n        diff = min(diff, arr[i+1]-arr[i]) \n    return diff \n",
        "test": "assert     find_min_diff([4, 2, 1, 3], 4) == 1",
        "num_ids": 266
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr('123') == 3, \"Test failed\"",
        "num_ids": 221
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #base case\n    if(n == 1): \n        return 1\n    if(n == 2):\n        return 2\n    if(n > 2):\n        return n * (n - 1)\n",
        "test": "assert     is_polite(1) == 1",
        "num_ids": 4129
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list=[]\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i],l1[i+1]))\n    return pair_list\n",
        "test": "assert     pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 283
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n",
        "test": "assert     get_pairs_count([1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 7, 8, 8], 17) == 0",
        "num_ids": 277
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "test": "assert     Diff([1,3,5,7], []) == [1,3,5,7]",
        "num_ids": 179
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(4*i*(i+1) for i in range(1, n) if i%2!=0)\n",
        "test": "assert     odd_num_sum(1) == 0, 'incorrect output'",
        "num_ids": 315
    },
    {
        "number": 771,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch=='(':\n            stack.append(ch)\n        if ch==')':\n            if not stack or stack[-1]!='(':\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    return False\n",
        "test": "assert     check_expression(\"([{()}])\") == True, \"Test Failed\"",
        "num_ids": 435
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = test_str.split(' ')\n    count = 0\n    for x in new_str:\n        if len(x) == K:\n            new_str.remove(x)\n            count += 1\n    return f'The new string is { \" \".join(new_str)} with {count} words removed. '\n",
        "test": "assert ",
        "num_ids": 253
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    string = text\n    pattern = pattern\n    string = re.sub(pattern,\"****\",string)\n    print(string)\n",
        "test": "assert     occurance_substring(\"harry is a good boy\",\"girl\") == None",
        "num_ids": 355
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums)%2==0:\n        return False\n    for i in range(0,len(nums)-1,2):\n        if nums[i]%2!=0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1,2,3,4,5,6]) == False",
        "num_ids": 325
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    if len(test_str) >= 2:\n        for i in range(len(test_str)-1):\n            if test_str[i] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count\n",
        "test": "assert     count_vowels('abcd')         == 0",
        "num_ids": 578
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            x = x + i\n    return x\n",
        "test": "assert ",
        "num_ids": 263
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n    # list1 = list(list1)\n    # i = 0\n    # while i < len(list1):\n    #     if i < len(list1)-1 and list1[i] == list1[i+1]:\n    #         list1.pop(i)\n    #     else:\n    #         i += 1\n    # return list1\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 441
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def create_tuple(list1):\n        list_tup = []\n        for i in list1:\n            list_tup.append(tuple(i))\n        return list_tup\n    unique_tup = create_tuple(list1)\n    unique_tup = set(unique_tup)\n    unique_tup = list(unique_tup)\n    output_dict = {}\n    for i in unique_tup:\n        output_dict[i] = list1.count(i)\n    return output_dict\n",
        "test": "assert ",
        "num_ids": 652
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = combinations(test_list, 2)\n    comb_sums = [x for x in combs]\n    return comb_sums\ndef find_invalid_number(numbers, preamble_length):\n    '''\n    Write a function to find the invalid number in the list of numbers. https://www.geeksforgeeks.org/find-the-invalid-number/\n    '''\n    for i in range(len(numbers)):\n        if i <= preamble_length:\n            continue\n        else:\n            # print(numbers[i])\n            preamble = numbers[i-preamble_length:i]\n            # print(preamble)\n            combs = find_combinations(preamble)\n            for comb in combs:\n                # print(comb)\n                if comb[0] + comb[1] == numbers[i]:\n                    # print(f'{numbers[i]} is equal to {comb[0]} + {comb[1]}')\n                    pass\n                else:\n                    # print(f'{numbers[i]} is not equal to {comb[0]} + {comb[1]}')\n                    return numbers[i]\n",
        "test": "assert not (find_combinations([(1,1),(2,2),(3,3),(4,4),(5,5),(6,6)]) == [(3,3),(4,6),(4,9),(8,8)]),\"Wrong combinations\"",
        "num_ids": 671
    },
    {
        "number": 781,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n < 1): \n        return 0\n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                count = count + 1\n            else: \n                count = count + 2\n    if (count % 2 == 0): \n        return True\n    else: \n        return False\n",
        "test": "assert     count_divisors(0) == 0, \"Division by zero\"",
        "num_ids": 298
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 207
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    diff = max_val - min_val\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b)/diff) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r)/diff) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g)/diff) + 240) % 360\n    if max_val == 0:\n        s = 0\n    else:\n        s = (diff/max_val)*100\n    v = max_val*100\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(255,0,0) == (0, 0.5, 1.0)",
        "num_ids": 544
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1 = [x for x in list1 if x % 2!= 0]\n    list2 = [x for x in list1 if x % 2 == 0]\n    product = 1\n    for i in list2:\n        product *= i\n    for i in list1:\n        product *= i\n    print(product)\n",
        "test": "assert     mul_even_odd([3, 5, 7, 8]) == 100",
        "num_ids": 462
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.replace('(','').replace(')','').split(', '))\n",
        "test": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)",
        "num_ids": 307
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n",
        "test": "assert     right_insertion([],5) == 0",
        "num_ids": 195
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('ab{3}')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert     text_match_three(\"axxbxxyyb\") == False",
        "num_ids": 189
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = tuple(test_list)\n    tup = tup + (test_str,)\n    return tup\n    \n    \ndef new_list(tup):\n    '''\n    Write a function to create a new list from the given tuple.\n    '''\n    return list(tup)\n",
        "test": "assert ",
        "num_ids": 281
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n",
        "test": "assert     even_position([1,3,5]) == False",
        "num_ids": 201
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = []\n    for i in test_tup:\n        if type(i) == tuple:\n            test_list.append(i[0])\n        else:\n            test_list.append(i)\n    return tuple(test_list)\n",
        "test": "assert     remove_nested(('a', ('a', 'b', 'c'), 'd', ('a', 'b', 'c'), 'd')) == (('a', 'b', 'c'), 'd')",
        "num_ids": 388
    },
    {
        "number": 792,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list) \n",
        "test": "assert     count_list([1,2,3,4,[1,2,3,4],5]) == 3",
        "num_ids": 196
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        mid = (start+end)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                start = mid+1\n        elif arr[mid]>x:\n            end = mid-1\n        else:\n            start = mid+1\n    return -1\nprint(last([1,2,3,3,3,3,4,5],3))\n",
        "test": "assert     last([1,2,2,3,3,3,3,4,5], 9) == -1",
        "num_ids": 531
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a\\S*b')\n    print(pattern.search(text))\n",
        "test": "assert     text_starta_endb(\"aaaaaaaaaaaaab\") == True, \"No match\"",
        "num_ids": 2201
    },
    {
        "number": 796,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n    \ndef return_greatest_key(dictionary):\n    '''\n    Write function to find the key in a given dictionary with the highest value.\n    '''\n    greatest_key = None\n    greatest_value = 0\n    for key in dictionary:\n        if greatest_value < dictionary[key]:\n            greatest_value = dictionary[key]\n            greatest_key = key\n    return greatest_key\n    \ndef return_greatest_key_in_list(dictionary):\n    '''\n    Write function to return the key in a given dictionary with the highest value.\n    However, if there are multiple keys with the same highest value, return the\n    key with the smallest numerical value.\n    '''\n    greatest_value = 0\n    greatest_key = None\n    for key in dictionary:\n        if dictionary[key] > greatest_value:\n            greatest_value = dictionary[key]\n            greatest_key = key\n        elif dictionary[key] == greatest_value and key < greatest_key:\n            greatest_key = key\n    return greatest_key\n        \ndef list_of_dictionaries(list_of_lists, key):\n    '''\n    Write function to return a list of dictionaries that have the key set to\n    each element in the inner list.\n    '''\n    list_of_dicts = []\n    for row in list_of_lists:\n        row_dict = {}\n        for index in range(0, len(row)):\n            row_dict[row[index]] = row[0]\n        list_of_dicts.append(row_dict)\n    return list_of_dicts\n",
        "test": "assert     return_sum({'b':1, 'c':2, 'a':3}) == 6, \"Check the example\"",
        "num_ids": 215
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(n) if i % 2)\n",
        "test": "assert     sum_odd(0) == 0, \"incorrect output for sum_odd(0)\"",
        "num_ids": 252
    },
    {
        "number": 798,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1, 2, 3]) == 6",
        "num_ids": 94
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32 - d))) & 0xffffffff\n",
        "test": "assert     left_rotate(0b10111111111111111111111111111101, 5) == 0b1011110111111111111111111111111111",
        "num_ids": 271
    },
    {
        "number": 800,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "test": "assert     \"\" == remove_all_spaces(\"      \")",
        "num_ids": 209
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y:\n        if x == z:\n            return 3\n        else:\n            return 2\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(10,10,10) == 3, \"test_three_equal error\"",
        "num_ids": 290
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start = 0\n    end = n - 1\n",
        "test": "assert count_rotation([5,6,7,8,1,2,3,4]) == 2",
        "num_ids": 184
    },
    {
        "number": 803,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return sqrt == int(sqrt)\n",
        "test": "assert     is_perfect_square(1) == True, \"Wrong output\"",
        "num_ids": 133
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr is None: return False\n    if len(arr) < 2: return False\n    product = 1\n    for item in arr:\n        product *= item\n    return product % 2 == 0",
        "test": "assert     is_product_even([2,3,4,5]) == True",
        "num_ids": 273
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = 0\n    max_list = []\n    for i in lists:\n        sum = 0\n        for j in i:\n            sum += j\n        if sum > max:\n            max = sum\n            max_list = i\n    return max_list\n",
        "test": "assert ",
        "num_ids": 216
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_upper = 0\n    run_upper = 0\n    for ch in test_str:\n        if ch.isupper():\n            run_upper += 1\n        else:\n            if run_upper > max_run_upper:\n                max_run_upper = run_upper\n            run_upper = 0\n    if run_upper > max_run_upper:\n        max_run_upper = run_upper\n    return max_run_upper\n    \n    \ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    max_run_lower = 0\n    run_lower = 0\n    for ch in test_str:\n        if ch.islower():\n            run_lower += 1\n        else:\n            if run_lower > max_run_lower:\n                max_run_lower = run_lower\n            run_lower = 0\n    if run_lower > max_run_lower:\n        max_run_lower = run_lower\n    return max_run_lower\n    \n    \ndef max_run_digits(test_str):\n    '''\n    Write a function to find maximum run of digits in the given string.\n    '''\n    max_run_digit = 0\n    run_digit = 0\n    for ch in test_str:\n        if ch.isdigit():\n            run_digit += 1\n        else:\n            if run_digit > max_run_digit:\n                max_run_digit = run_digit\n            run_digit = 0\n    if run_digit > max_run_digit:\n        max_run_digit = run_digit\n    return max_run_digit\n    \n    \ndef max_run_special(test_str):\n    '''\n    Write a function to find maximum run of special characters in the given string.\n    '''\n    max_run_special = 0\n    run_special = 0\n    for ch in test_str:\n        if not ch.isalnum():\n            run_special += 1\n        else:\n            if run_special > max_run_special:\n                max_run_special = run_special\n            run_special = 0\n    if run_special > max_run_special:\n        max_run_special = run_special\n    return max_run_special\n    \n    \ndef max_run_letters(test_str):\n    '''\n    Write a function to find maximum run of letters in the given string.\n    '''\n    max_run_letters = 0\n    run_letters = 0\n    for ch in test_str:\n        if ch.isalpha():\n            run_letters += 1\n        else:\n            if run_letters > max_run_letters:\n                max_run_letters = run_letters\n            run_letters = 0\n    if run_letters > max_run_letters:\n        max_run_letters = run_letters\n    return max_run_letters\n    \n    \ndef remove_nth_occurences(test_str, n):\n    '''\n    Write a function that takes a string and an integer and removes the Nth occurrence of a letter from the string.\n    '''\n    str_list = list(test_str)\n    length = len(test_str)\n    for i in range(length):\n        if str_list[i] == n:\n            del str_list[i]\n            length -= 1\n            break\n    return ''.join(str_list)\n    \n    \ndef remove_nth_occurences_r(test_str, n):\n    '''\n    Write a function that takes a string and an integer and removes the Nth occurrence of a letter from the string in the reverse order.\n    '''\n    str_list = list(test_str)\n    length = len(test_str)\n    for i in range(length):\n        if str_list[i] == n:\n            del str_list[-i]\n            length -= 1\n            break\n    return ''.join(str_list)\n    \n    \ndef remove_nth_occurences_comp(test_str, n):\n    '''\n    Write a function that takes a string and an integer and removes the Nth occurrence of a letter from the string using comprehension.\n    '''\n    str_list = [ch for ch in test_str if ch!= n]\n    return ''.join(str_list)\n    \n    \ndef remove_nth_occurences_comp_r(test_str, n):\n    '''\n    Write a function that takes a string and an integer and removes the Nth occurrence of a letter from the string in the reverse order using comprehension.\n    '''\n    str_list = [ch for ch in test_str[::-1] if ch!= n]\n    return ''.join(str_list[::-1])\n    \n    \ndef rotate_word(test_str, n):\n    '''\n    Write a function that takes a string and an integer and returns a new string with all characters shifted by N positions in the alphabet.\n    '''\n    str_list = list(test_str)\n    temp_list = []\n    for ch in test_str:\n        if ord(ch) <= ord('z'):\n            ch = chr(ord(ch) + n)\n            if ord(ch) > ord('z'):\n                ch = chr(ord(ch) - 26)\n            temp_list.append(ch)\n        else:\n            temp_list.append(ch)\n    return ''.join(temp_list)\n    \n    \ndef rotate_word_comp(test_str, n):\n    '''\n    Write a function that takes a string and an integer and returns a new string with all characters shifted by N positions in the alphabet.\n    '''\n    temp_list = [chr((ord(ch) - ord('a') + n) % 26 + ord('a')) for ch in test_str]\n    return ''.join(temp_list)\n    \n    \ndef reverse_string(test_str):\n    '''\n    Write a function that takes a string and returns a new string with all characters reversed.\n    '''\n    return test_str[::-1]\n    \n    \ndef reverse_string_comp(test_str):\n    '''\n    Write a function that takes a string and returns a new string with all characters reversed using comprehension.\n    '''\n    return ''.join([ch for ch in test_str[::-1]])\n    \n    \ndef reverse_string_loop(test_str):\n    '''\n    Write a function that takes a string and returns a new string with all characters reversed using loops.\n    '''\n    str_list = list(test_str)\n    length = len(test_str)\n    for i in range(length//2):\n        temp = str_list[i]\n        str_list[i] = str_list[length - i - 1]\n        str_list[length - i - 1] = temp\n    return ''.join(str_list)\n    \n    \ndef rotate_sentence(test_str, n):\n    '''\n    Write a function that takes a sentence and an integer and returns a new sentence with all words shifted by N positions in the alphabet.\n    '''\n    sentence_list = test_str.split(' ')\n    temp_list = []\n    for word in sentence_list:\n        temp_list.append(rotate_word(word, n))\n    return''.join(temp_list)\n    \n    \ndef rotate_sentence_comp(test_str, n):\n    '''\n    Write a function that takes a sentence and an integer and returns a new sentence with all words shifted by N positions in the alphabet.\n    '''\n    return''.join([rotate_word(word, n) for word in test_str.split(' ')])\n    \n    \ndef rotate_sentence_loop(test_str, n):\n    '''\n    Write a function that takes a sentence and an integer and returns a new sentence with all words shifted by N positions in the alphabet.\n    '''\n    sentence_list = test_str.split(' ')\n    temp_list = []\n    for word in sentence_list:\n        temp_list.append(rotate_word(word, n))\n    return''.join(temp_list)\n    \n    \ndef rotate_sentence_comp_r(test_str, n):\n    '''\n    Write ",
        "test": "assert     max_run_uppercase('aBc') == 2, \"Incorrect max_run_uppercase(\\\"aBc\\\")\"",
        "num_ids": 269
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums:\n        if nums[0]%2 == 1:\n            return nums[0]\n        else:\n            return first_odd(nums[1:])\n    else:\n        return False\n",
        "test": "assert     first_odd([1, 3, 5, 6]) == 1",
        "num_ids": 247
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if test_tup[i]!= None:\n            return True\n    return False\n",
        "test": "assert     check_K((1,2,3,4,5,6), 4) == True",
        "num_ids": 210
    },
    {
        "number": 809,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[1] < test_tup2[1] and test_tup1[2] < test_tup2[2] and test_tup1[3] < test_tup2[3]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_smaller( (1,2,3,4,5,6,7,8), (8,7,6,5,4,3,2,1)) == True, \"ERROR\"",
        "num_ids": 369
    }
]