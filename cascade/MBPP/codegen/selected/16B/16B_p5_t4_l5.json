[
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "test": "assert     similar_elements([1,2,3,4,5], [1,2,3,4,5,6]) == [1,2,3,4,5]",
        "num_ids": 922
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n > 2 and n % 2 == 0:\n        return True\n    max_divisor = math.floor(math.sqrt(n))\n    for d in range(3, 1 + max_divisor, 2):\n        if n % d == 0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(3) == False, \"Wrong result\"",
        "num_ids": 2576
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    hq.heapify(nums)\n    return nums[0:n]\n",
        "test": "assert     heap_queue_largest([], 3) == []",
        "num_ids": 969
    },
    {
        "number": 6,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x > 0):\n        while (x & 1 == 0): \n            x = x >> 1\n        return x == 1\n    else:\n        return False\n    # return (x!=0) and (x & (x-1))\n",
        "test": "assert     is_Power_Of_Two (3) == False, \"is_Power_Of_Two (3) == False\"",
        "num_ids": 985
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n",
        "test": "assert     find_char_long('') == []",
        "num_ids": 832
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # return [num ** 2 for num in nums]\n    # return [num ** 2 for num in nums if num % 2 == 0]\n    return list(map(lambda num: num ** 2, nums))\n",
        "test": "assert     square_nums([1, 2, 3]) == [1, 4, 9]",
        "num_ids": 369
    },
    {
        "number": 9,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)):\n        if(str == str[i:]+str[:i]):\n            return i\n    return -1\n",
        "test": "assert     find_Rotations('a')==0, 'Incorrect find_Rotations output'",
        "num_ids": 683
    },
    {
        "number": 11,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = \"\"\n    for i in s: \n        if i not in ch: \n            s1 += i\n    return s1\ndef remove_Occ2(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\ndef remove_Occ3(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    lst=list(s)\n    lst.remove(ch)\n    return ''.join(lst)\ndef remove_Occ4(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1=s[:s.rfind(ch)] + s[s.rfind(ch)+1:]\n    return s1\ndef remove_Occ5(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1=s[:s.rfind(ch)] + s[s.rfind(ch)+1:]\n    return s1\n",
        "test": "assert     remove_Occ('', 'z') == '','remove_Occ failed'",
        "num_ids": 632
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = sum)\n",
        "test": "assert     (sort_matrix([[1,2,3],[3,4,6],[7,8,9]]) == [[1,2,3],[3,4,6],[7,8,9]])",
        "num_ids": 1268
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume \n",
        "test": "assert     find_Volume(5,2,3) == 30, \"Triangular prism area\"",
        "num_ids": 428
    },
    {
        "number": 16,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # If the string is empty, return false\n    if text == \"\":\n        return False\n    \n    # If the string doesn't start with an underscore, return false\n    elif re.match(\"^_\", text) == None:\n        return False\n        \n    # If the string starts with an underscore, return true\n    else:\n        return True\n",
        "test": "assert     text_lowercase_underscore('_this_is_a_test') == True, \"Wrong result for '_this_is_a_test'\"",
        "num_ids": 2788
    },
    {
        "number": 17,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \ndef rectangle_perimeter(a, b):\n    '''\n    Write a function that returns the perimeter of a rectangle given its side lengths as input.\n    '''\n    return (2*a)+b\n",
        "test": "assert     square_perimeter(3)             == 12, \"The perimeter of a square with side length 3 should be 12\"",
        "num_ids": 337
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str1 = []\n    list_str2 = []\n    for i in string:\n        list_str1.append(i)\n    for i in string:\n        list_str2.append(i)\n    for i in string:\n        list_str1.remove(i)\n    for i in string:\n        list_str2.remove(i)\n    str_to_list_int = []\n    for i in list_str1:\n        str_to_list_int.append(ord(i))\n    for i in list_str2:\n        str_to_list_int.append(ord(i))\n    return str_to_list_int\n",
        "test": "assert ",
        "num_ids": 661
    },
    {
        "number": 19,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums))!= len(arraynums)\n",
        "test": "assert     test_duplicate([1, 2, 3, 4, 5, 6, 7]) == False, 'Test 1 Failed'",
        "num_ids": 698
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x % 3 == 0) or (x % 5 == 0):\n        return True\n    return False\n    \ndef is_sum_of_any_pair(x):\n    '''\n    Write a function to check if the given number is a sum of any pair of the numbers 3, 4, 5 or 6.\n    '''\n    if x % 3 == 0 or x % 4 == 0 or x % 5 == 0 or x % 6 == 0:\n        return True\n    return False\n",
        "test": "assert     is_woodall(8) == False, 'Wrong output for is_woodall(8)'",
        "num_ids": 654
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    r = 0\n    while num!= 0:\n        r = r * 10 + num % 10\n        num = num // 10\n    return r\n",
        "test": "assert     rev(1234) == 4321",
        "num_ids": 397
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n) : \n        if arr[i] > max_num : \n            max_num = arr[i]\n    return max_num\n",
        "test": "assert     find_Max_Num([9, 9, 9, 9, 9]) == 9",
        "num_ids": 802
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(0,0)==False, 'opposite_Signs(0,0)==False'",
        "num_ids": 574
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 428
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            subs[s[i:j+1]] += 1\n    print(subs)\n    count = 0\n    for s in subs:\n        count += (subs[s] * (subs[s] - 1)) // 2\n    return count\n",
        "test": "assert count_Substrings('abc1111') == 5",
        "num_ids": 1073
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n",
        "test": "assert     smallest_num([1, 3, -2]) == -2",
        "num_ids": 414
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    def difference_max_min(data_list):\n        max_diff = []\n        for i in range(len(data_list)-1):\n            difference = data_list[i+1] - data_list[i]\n            max_diff.append(difference)\n        return max(max_diff)\n    return difference_max_min(test_list)\n",
        "test": "assert ",
        "num_ids": 747
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks\n",
        "test": "assert     subject_marks([(1,2),(1,3),(3,2),(3,1)]) == [(3,2),(3,1),(1,2),(1,3)]",
        "num_ids": 247
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if type(element) is list:\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n",
        "test": "assert     recursive_list_sum([1, 2, 3, 4]) == 10",
        "num_ids": 422
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([-1,2,3,4,5,6,7,8,9]) == 8",
        "num_ids": 404
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 4\n    if n == 4: return 7\n    if n == 5: return 42\n    \n    count = 0\n    for i in range(1, n):\n        count += bell_number(i) * bell_number(n-i)\n    return count\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 2900
    },
    {
        "number": 68,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or \n            all(A[i] >= A[i+1] for i in range(len(A)-1))) \n",
        "test": "assert     is_Monotonic([1, 2, 2, 3]) == True, \"Wrong Answer\"",
        "num_ids": 730
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1,2,3,4], []) == True",
        "num_ids": 767
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = True\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                Output = False\n    return Output\n",
        "test": "assert     (find_equal_tuple([(1, 2, 3), (1, 2, 3, 4)])) == False",
        "num_ids": 986
    },
    {
        "number": 71,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    gap = len(nums)\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums\n",
        "test": "assert     comb_sort([5, 3, 7, 2, 8, 1, 6]) == [1, 2, 3, 5, 6, 7, 8]",
        "num_ids": 2508
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(math.sqrt(n))\n    for i in range(1,sqrt_n+1):\n        x = n - i*i\n        sqrt_x = int(math.sqrt(x))\n        if sqrt_x*sqrt_x == x:\n            return True\n    return False\n",
        "test": "assert     dif_Square(15) == False",
        "num_ids": 671
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n",
        "test": "assert     not is_samepatterns([\"red\", \"green\", \"blue\"], [\"G\", \"R\", \"B\"])",
        "num_ids": 1032
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i, j in enumerate(test_list):\n        if len(j) == K and all(map(lambda x: x % K == 0, j)):\n            result.append(j)\n    return result\n",
        "test": "assert     find_tuples([(1,2,3,4,5), (2,4,5,7), (3,6,9,10)], 5) == []",
        "num_ids": 1080
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "test": "assert     is_Diff(11) == True,     \"Not divisible by 11\"",
        "num_ids": 374
    },
    {
        "number": 79,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     word_len('durga') == True",
        "num_ids": 329
    },
    {
        "number": 80,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([int(i) for i in str(n)])\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 554
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\n",
        "test": "assert     volume_sphere(2) == 4*math.pi*(2**3)/3",
        "num_ids": 294
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum = sum + ord(strr[i])\n    return(sum%26)\n",
        "test": "assert     get_Char('program') == '%'",
        "num_ids": 473
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "test": "assert     1 == sequence(1)",
        "num_ids": 369
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n",
        "test": "assert     surfacearea_sphere(5)== 4 * math.pi * 5 ** 2",
        "num_ids": 374
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((1 + 5**.5) / 2 * n - 3**.5 / 4 * n**2)\n",
        "test": "assert     centered_hexagonal_number(2) == 1",
        "num_ids": 367
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n",
        "test": "assert     {'c': 1, 'a': 1, 'b': 2, 'd': 3} == merge_dictionaries_three({\"c\": 1}, {\"a\": 1}, {\"b\": 2, \"d\": 3})",
        "num_ids": 2445
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n",
        "test": "assert     freq_count([1, 2, 2, 2, 2, 3, 4, 5]) == {1: 1, 2: 4, 3: 1, 4: 1, 5: 1}",
        "num_ids": 708
    },
    {
        "number": 89,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num_rec(n, closest_so_far=None):\n        if closest_so_far is None:\n            closest_so_far = n\n        if n - closest_so_far == 1:\n            return closest_so_far\n        return closest_num_rec(n, closest_so_far-1)\n    return closest_num_rec(N)\n",
        "test": "assert     closest_num(5) == 4",
        "num_ids": 641
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n",
        "test": "assert     len_log(['hello', 'world']) == 5",
        "num_ids": 448
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0,len(str1)-len(sub_str)+1):\n        if sub_str==str1[i:len(sub_str)+i]:\n            return True\n    return False\n",
        "test": "assert     find_substring([\"imxmy\", \"xnyx\", \"x\", \"imxmy\", \"xnyx\", \"x\"], \"imxy\") == False",
        "num_ids": 764
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n // 2 + 1): \n        if (n % i == 0): \n            return False\n    return True\n",
        "test": "assert     is_undulating(3) == True",
        "num_ids": 508
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        a, b = float(a), int(b)\n        return pow(a, b)\n    except:\n        return \"Error\"\n",
        "test": "assert     power(2,0) == 1, \"power(2,0) returns 1\"",
        "num_ids": 361
    },
    {
        "number": 94,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert     index_minimum([(1, 1), (1, 2)]) == 1",
        "num_ids": 606
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    small_len = 999999999\n    for lst_item in lst:\n        if small_len > len(lst_item):\n            small_len = len(lst_item)\n    return small_len\n",
        "test": "assert     Find_Min_Length([[1, 1, 1], [2, 2], [1, 3]]) == 2",
        "num_ids": 2491
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 1 + divisor(n//2)\n    else:\n        return 1 + divisor(n+1)\n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 440
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for value in list1:\n        if value in frequency:\n            frequency[value] += 1\n        else:\n            frequency[value] = 1\n    return frequency\n",
        "test": "assert     frequency_lists([]) == {}",
        "num_ids": 1492
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n    return total / len(numbers)\n",
        "test": "assert     (multiply_num([0, 2, 3]) == 0)",
        "num_ids": 600
    },
    {
        "number": 99,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "test": "assert     decimal_to_binary(10) == \"1010\"",
        "num_ids": 537
    },
    {
        "number": 100,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_rev = num_str[::-1]\n    num_rev_list = list(num_rev)\n    for i in range(0, len(num_rev_list)):\n        if num_rev_list[i]!= '9':\n            num_rev_list[i] = str(int(num_rev_list[i]) + 1)\n            break\n        else:\n            num_rev_list[i] = '0'\n    num_rev = ''.join(num_rev_list)\n    num_rev = int(num_rev)\n    return num_rev\n",
        "test": "assert     (next_smallest_palindrome(1) == 2), \"Expected 2, got {}\".format(next_smallest_palindrome(1))",
        "num_ids": 971
    },
    {
        "number": 101,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k - 1]\n",
        "test": "assert     kth_element([1,2,3,4,5], 3) == 3",
        "num_ids": 755
    },
    {
        "number": 102,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w if i == 0 else w.capitalize() for i, w in enumerate(word.split('_')))\n",
        "test": "assert     snake_to_camel('1234_snake') == '1234Snake'",
        "num_ids": 571
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = 0\n    for i in range(n):\n        for j in range(m):\n            if n*i + j == n*(i+1) - 1:\n                num += 1\n    return num\n",
        "test": "assert     eulerian_num(1, 1) == 1",
        "num_ids": 551
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "test": "assert     sort_sublists([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]) == [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]",
        "num_ids": 746
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count+=1\n    return count\n",
        "test": "assert     count([False, False, False, True]) == 1",
        "num_ids": 2341
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for test in test_tup:\n        print(\"Test 1\")\n        test_list.append(test)\n    return test_list\n    \ntest_list = []\ntest_tup = (\"a\", \"b\", \"c\", \"d\", \"e\")\nprint(add_lists(test_list, test_tup))",
        "test": "assert     add_lists([7, 8, 9], [1, 2, 3]) == [7, 8, 9, 1, 2, 3]",
        "num_ids": 673
    },
    {
        "number": 108,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a=num1+num2+num3\n    a.sort()\n    return a\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 919
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if s[0] == '1':\n            count += 1\n    return count\n",
        "test": "assert     (odd_Equivalent(\"11101\",0) == 0), \"wrong result\"",
        "num_ids": 886
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [x for x in nestedlist[0] if x in nestedlist[1] and x in nestedlist[2]]\n",
        "test": "assert     [] == common_in_nested_lists([[], []])",
        "num_ids": 1390
    },
    {
        "number": 113,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # for i in range(len(text)):\n    if text[0] in ('+', '-'):\n        text = text[1:]\n    return text.isdigit()\n    # return text.replace('.','',1).isdigit()\n",
        "test": "assert     check_integer('-3') == True, 'Wrong output'",
        "num_ids": 511
    },
    {
        "number": 115,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n",
        "test": "assert     empty_dit([]) == True, \"empty_dit is wrong\"",
        "num_ids": 469
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "test": "assert     tuple_to_int((0, 0, 0)) == 0",
        "num_ids": 2416
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if type(test_list[i]) is list:\n            new_list.append(list_to_float(test_list[i]))\n        else:\n            try:\n                new_list.append(float(test_list[i]))\n            except ValueError:\n                new_list.append(test_list[i])\n    return new_list\n",
        "test": "assert     list_to_float([[1,2,3],['4','5']]) == [[1.0,2.0,3.0],[4.0,5.0]], 'incorrect'",
        "num_ids": 1067
    },
    {
        "number": 118,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "test": "assert     string_to_list(\"Hello world\") == ['Hello', 'world'], 'Incorrect output'",
        "num_ids": 690
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    counter = 0\n    for element in arr:\n        counter ^= element\n    return counter\n",
        "test": "assert     search([1,1,2,2,3,3,4,4,8,8,8]) == 8",
        "num_ids": 514
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = list1[0][0] * list1[0][1]\n    for i in list1:\n        for j in list1:\n            if j[0] * j[1] > result:\n                result = j[0] * j[1]\n    return result\n",
        "test": "assert     max_product_tuple([(2, 2), (-2, -2)]) == 4",
        "num_ids": 977
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # numbers_to_check = [num for num in range(1, limit + 1)]\n    total = 0\n    for num in range(1, limit + 1):\n        if num == get_factors(num) + get_factors(get_factors(num)):\n            total += num\n    return total\n",
        "test": "assert ",
        "num_ids": 2305
    },
    {
        "number": 124,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(cmath.phase(complex(a,b)))\n",
        "test": "assert     (angle_complex(0,1) - cmath.pi/2 == 0)",
        "num_ids": 662
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in string:\n        if i == '0':\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max(max_length, current_length)\n",
        "test": "assert     find_length(\"010\") == 1",
        "num_ids": 2428
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = min(a,b)\n    for i in range(2,x+1):\n        if a%i==0 and b%i==0:\n            x = i\n    return x\n",
        "test": "assert     sum(12, 15) == 3,     \"Wrong Answer\"",
        "num_ids": 294
    },
    {
        "number": 127,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(1, 1) == 1, '1 * 1 is not 1'",
        "num_ids": 343
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w) > n]\n",
        "test": "assert     long_words(2, \"The party is jumping off the cliff.\") == []",
        "num_ids": 1043
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #Checking rows, columns, and diagonals\n    for i in range(len(my_matrix)):\n        sum_row = sum(my_matrix[i])\n        if sum_row!= 15:\n            return False\n        else:\n            sum_column = 0\n            for j in range(len(my_matrix)):\n                sum_column += my_matrix[j][i]\n            if sum_column!= 15:\n                return False\n    diag_1 = 0\n    diag_2 = 0\n    for i in range(len(my_matrix)):\n        diag_1 += my_matrix[i][i]\n        diag_2 += my_matrix[i][-i - 1]\n    if diag_1!= 15 or diag_2!= 15:\n        return False\n    return True\n",
        "test": "assert ",
        "num_ids": 3100
    },
    {
        "number": 130,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    num_dict = {}\n    for i in nums:\n        if i in num_dict:\n            num_dict[i]+=1\n        else:\n            num_dict[i]=1\n    print(num_dict)\n    max_key = max(num_dict, key=num_dict.get)\n    return max_key\n",
        "test": "assert     max_occurrences([1,2,3,3,3,2,4,4,4,4,4]) == 4",
        "num_ids": 1042
    },
    {
        "number": 131,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str1 = list(str1)\n    i,j = 0,len(str1) - 1\n    while(i < j):\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i],str1[j] = str1[j],str1[i]\n            i += 1\n            j -= 1\n        if str1[i] not in vowels:\n            i += 1\n        if str1[j] not in vowels:\n            j -= 1\n    return \"\".join(str1)\n",
        "test": "assert     reverse_vowels('h') == 'h', 'h'",
        "num_ids": 936
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string( (1, 2, 3) ) == '(1, 2, 3)'",
        "num_ids": 351
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    sum = 0\n    for i in range(0,len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n    \nprint(sum_negativenum([1, -2, 3, 4, -5]))\nprint(sum_negativenum([1, 2, -3, 4]))\nprint(sum_negativenum([-1, 2, 3, -4]))\nprint(sum_negativenum([-1]))\nprint(sum_negativenum([-2]))\nprint(sum_negativenum([-3]))\nprint(sum_negativenum([0]))\n",
        "test": "assert     sum_negativenum([]) == 0, \"should be 0\"",
        "num_ids": 591
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n-1)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 476
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert     zero_count([0]) == 1",
        "num_ids": 2543
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n!= 0):\n        p = 2\n        while (p <= n):\n            if (p == n):\n                return 1\n            p = p * 2\n        n = n - 1\n    return 0\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 785
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r\n    return c\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 212
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = [num for sublist in test_list for num in sublist]\n    return new_list\n",
        "test": "assert     (extract_singly([]), []) == ([], [])",
        "num_ids": 1040
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return nums\n",
        "test": "assert     pancake_sort([1,2,3,4,5]) == [1,2,3,4,5], \"Sorting failed\"",
        "num_ids": 953
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k]:\n                    count+=1\n                    break\n    return count\n    \n    \nlist1=[2,3,4,4,4,5,6]\nlist2=[7,7,7,6,5,4,2]\nlist3=[8,6,4,8,6,4,3]\n",
        "test": "assert     count_samepair([1,2,3],[2,3,3],[3,4,5]) == 2",
        "num_ids": 728
    },
    {
        "number": 143,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert     find_lists([[1], [2], [3]]) == 3, 'error'",
        "num_ids": 805
    },
    {
        "number": 145,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    min_el = min(arr)\n    arr = [el-min_el for el in arr]\n    return max(arr)\n",
        "test": "assert     (max_Abs_Diff([1, 1, 1, 1]) == 0)",
        "num_ids": 763
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = 0, 0\n    while x < n:\n        if (a * x + b) % n == 0:\n            return x, (n - x) % n\n        x += 1\n    return None\n",
        "test": "assert     find_solution(2, 3, 2) == None",
        "num_ids": 676
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1) - set(list2))\n",
        "test": "assert     remove_elements([1,2,3], [1,2,3]) == []",
        "num_ids": 921
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n > 0:\n        return (n * (n+1) // 2)\n    elif n == 0:\n        return 0\n    else:\n        return sum_series(n + 1) - sum_series(n - 1)\n",
        "test": "assert     sum_series(0)             == 0",
        "num_ids": 332
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    A = (s ** 2) * (tan(pi / l) / 2)\n    return A\n",
        "test": "assert ",
        "num_ids": 366
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 1\n    sum1 = 0\n    sum2 = 0\n    for i in range(2,n):\n        if n%i == 0:\n            div_sum += i\n    sum1 = div_sum\n    n = div_sum\n    for j in range(2,n):\n        if n%j == 0:\n            div_sum += j\n    sum2 = div_sum\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n",
        "test": "assert     div_sum(1) == True",
        "num_ids": 632
    },
    {
        "number": 165,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].upper() == str(i):\n            count += 1\n    return count\n",
        "test": "assert     count_char_position(\"\") == 0",
        "num_ids": 705
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    total_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                total_pairs += 1\n    return total_pairs\n",
        "test": "assert     find_even_pair([3, 4, 5]) == 1",
        "num_ids": 664
    },
    {
        "number": 167,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n == 0): \n        return 1\n    else: \n        x = 2\n        while(x < n): \n            x = x * 2\n        return x \n",
        "test": "assert     next_power_of_2(8) == 8",
        "num_ids": 506
    },
    {
        "number": 168,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if (i == x):\n            count = count + 1\n    return count\n",
        "test": "assert     frequency([1, 3, 5, 3, 3, 4, 3], 3) == 4",
        "num_ids": 650
    },
    {
        "number": 170,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    res = 0\n    for x in list1[m:n+1]:\n        res = res + x\n    return res\n    \ndef delete_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to delete a range of numbers in a list.\n    '''\n    for x in range(m, n):\n        list1.pop(m)\n    return list1\n    \ndef copy_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to copy a range of numbers in a list to another list.\n    '''\n    res = []\n    for x in range(m, n):\n        res.append(list1[x])\n    return res\n",
        "test": "assert     sum_range_list([0, 1, 2, 3, 4, 5], 0, 0) == 0",
        "num_ids": 3099
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n",
        "test": "assert     (perimeter_pentagon(20) == 100)",
        "num_ids": 387
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert count_occurance('Classes can be fun!') == 0",
        "num_ids": 2363
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == len(test_tuple):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_type(('1', 1, 2)) == False",
        "num_ids": 550
    },
    {
        "number": 223,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if n%2 == 0:\n    #     if arr[n//2] == x:\n    #         return True\n    #     else:\n    #         return False\n    # else:\n    #     if arr[n//2+1] == x:\n    #         return True\n    #     else:\n    #         return False\n    return (arr[n//2] == x) if n%2 == 0 else (arr[n//2+1] == x)\n    \ndef max_sum_subarray(arr, n):\n    '''\n    Given an array of positive integers, find the subarray with the largest sum. Return the sum of that subarray.\n    '''\n    best = arr[0]\n    cur = arr[0]\n    for i in range(1, n):\n        cur = max(arr[i], cur + arr[i])\n        best = max(best, cur)\n    return best\n    \ndef subarray_sum(arr, n, k):\n    '''\n    Given an array, an integer k and an integer n. Find the sum of the largest subarray with sum k.\n    '''\n    best = 0\n    cur = 0\n    for i in range(n):\n        cur += arr[i]\n        cur = cur % k\n        if cur == 0:\n            best = i+1\n    return best\n",
        "test": "assert     is_majority([1,2,3,4,5,1], 6, 1) == False",
        "num_ids": 752
    },
    {
        "number": 224,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 330
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n",
        "test": "assert     '' == odd_values_string('')",
        "num_ids": 487
    },
    {
        "number": 227,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 457
    },
    {
        "number": 228,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x=n\n    while n>0:\n        x=(x^(x-1))\n        n=n-1\n    if x>r:\n        return False\n    elif x>=l and x<=r:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(0,0,100) == True",
        "num_ids": 802
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = n - 1\n    i = n - 1\n    while i >= 0:\n        if arr[i] < 0:\n            arr[low], arr[i] = arr[i], arr[low]\n            low += 1\n            i -= 1\n        else:\n            i -= 1\n",
        "test": "assert     re_arrange_array([-1, 2, 1, -4, 6, -2, -2, 0, 7, -3, -1, 7, -3, -3, -1, -1, -3, 9, -4, 3, 9, -1, -4, -3, -3, 2, 9, 9, 9, -4, -4, -1, -2, -4, -2, -4, 7, -3, -4, -3, -3, -3, -4, 3, 9, 2, 8, -4, -4, -3, 3, -1, -1, -4, -1, -4, -1, 2, -4, -4, -3, 9, 2, -4, 7, -3, -3, -4, -3, -4, 2, -1, -1, -3, -1, 2, 9, 9, -4, 4, 9, -2, -1, 3, 9, -1, -4, 6, -4, -1, -4, -1, -2, 8, -3, 3, 8, -4, 3, -3, 9, -1, -4, -4, -4, -4, -3, -1, 2, 1, -1, -4, 3, -1, -4, -1, -2, -1, 6, 6, -4, -3, 8, -4, -4, -3, -4, -1, -3, -1, -1, -4, 2, -2, -4, -1, -1, -4, -3, -3, 9, -1, 4, 3, -3, -4, -4, 9, -1, -1, -3, 4, -1, -4, -1, -2, 9, -1, 7, -1, 4, -3, -4, -3, -2, 8, -1, -1, -3, -4, -1, -1, -1, -1, -1, -4, -2, -2, -3, -1, -1, -4, 9, -2, -1, -1, -1, -3, -1, 7, -1, 7, -1, 7, -1, -4, -4, -1, -1, -1, -1, -4, -1, -1, -4, -4, -1, -3, -1, -4, -1, -1, -4, -4, -3, -1, -1, -4, -1, -1, -4, -1, -1, -1, -4, -1, -1, -4, -3, -1, -1, -1, -4, -3, -1, -4, -1, -1, -4, -1, -1, -1, -1, -4, -1, -1, -1, -1, -3, -1, -4, -1, -4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1",
        "num_ids": 5439
    },
    {
        "number": 230,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \",\"\"+char)\n    return new_str\n",
        "test": "assert     replace_blank(\"hello\", '!') == \"hello\", \"replace_blank(string, char) failed.\"",
        "num_ids": 499
    },
    {
        "number": 232,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list=[]\n    for i in range(n):\n        new_list.append(max(list1))\n        list1.remove(max(list1))\n    return new_list\n",
        "test": "assert     larg_nnum([4, 2, 3, 1, 6, 5], 1) == [6], \"incorrect\"",
        "num_ids": 897
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.1415926535\n    lateral=2*pi*r*h\n    return lateral\n",
        "test": "assert     lateralsuface_cylinder(1.0,2.0) == 12.0, 'Wrong output'",
        "num_ids": 469
    },
    {
        "number": 234,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\n",
        "test": "assert     volume_cube(1) == 1",
        "num_ids": 289
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "test": "assert     (even_bit_set_number(0x00) == 0x00), 'Wrong output for 0x00'",
        "num_ids": 547
    },
    {
        "number": 237,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = dict(Counter(test_list))\n    return occurences_dict\n",
        "test": "assert     check_occurences([]) == {}",
        "num_ids": 1537
    },
    {
        "number": 238,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str) \n    for i in range(n): \n        for j in range(i,n): \n            subs = str[i:j+1] \n            if(len(subs)>0): \n                count+=1\n    return count \n",
        "test": "assert     number_of_substrings('ab') == 3, 'Test 2 Failed!'",
        "num_ids": 535
    },
    {
        "number": 239,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m**n\n",
        "test": "assert     get_total_number_of_sequences(1, 1) == 1, \"Your function for getting total number of sequences is incorrect\"",
        "num_ids": 752
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:]=list2\n    return list1\ndef open_file(filename):\n    '''\n    Write a function that takes in a filename as a string and opens the file in the current directory and returns the contents as a string.\n    '''\n    with open(filename,'r') as file:\n        return file.read()\ndef read_file(filename):\n    '''\n    Write a function that takes in a filename as a string and opens the file in the current directory and returns a list of the lines of that file.\n    '''\n    with open(filename,'r') as file:\n        return file.readlines()\ndef save_file(filename,content):\n    '''\n    Write a function that takes in a filename as a string and a content as a string and creates a file in the current directory with that content.\n    '''\n    with open(filename,'w') as file:\n        file.write(content)\ndef add_to_file(filename,content):\n    '''\n    Write a function that takes in a filename as a string and a content as a string and appends that content to the end of the file.\n    '''\n    with open(filename,'a') as file:\n        file.write(content)\ndef sort_list(list):\n    '''\n    Write a function that takes in a list as an argument and returns that list in sorted order.\n    '''\n    return sorted(list)\ndef create_list(n):\n    '''\n    Write a function that takes in a number as an argument and returns a list of numbers from 1 to that number.\n    '''\n    new_list=[]\n    for i in range(n):\n        new_list.append(i)\n    return new_list\ndef delete_item(list,item):\n    '''\n    Write a function that takes in a list as an argument and deletes the first instance of that item.\n    '''\n    list.remove(item)\n    return list\ndef delete_index(list,item):\n    '''\n    Write a function that takes in a list as an argument and removes an item at a specified index.\n    '''\n    list.pop(item)\n    return list\ndef delete_range(list,index1,index2):\n    '''\n    Write a function that takes in a list as an argument and removes all items in the specified range.\n    '''\n    list[index1:index2] = []\n    return list\ndef duplicate_list(list):\n    '''\n    Write a function that takes in a list as an argument and duplicates that list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n    return new_list\ndef multiply_by_two(list):\n    '''\n    Write a function that takes in a list as an argument and multiplies each element by two.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i]*2)\n    return new_list\ndef increment(list):\n    '''\n    Write a function that takes in a list as an argument and adds one to each element in the list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i]+1)\n    return new_list\ndef element_greater_than(list,item):\n    '''\n    Write a function that takes in a list as an argument and returns True if there is an element greater than the specified number. Otherwise, it should return False.\n    '''\n    for i in range(len(list)):\n        if list[i]>item:\n            return True\n    return False\ndef length_list(list):\n    '''\n    Write a function that takes in a list as an argument and returns the length of that list.\n    '''\n    return len(list)\ndef join_list(list):\n    '''\n    Write a function that takes in a list as an argument and returns a string that is a concatenation of all the elements of that list separated by a comma and space.\n    '''\n    new_string=''\n    for i in range(len(list)):\n        new_string=new_string+list[i]+', '\n    return new_string[:-2]\ndef append_list(list1,list2):\n    '''\n    Write a function that takes in two lists as arguments and returns a new list consisting of the items in the first list followed by the items in the second list.\n    '''\n    new_list=list1.copy()\n    new_list.extend(list2)\n    return new_list\ndef list_intersection(list1,list2):\n    '''\n    Write a function that takes in two lists as arguments and returns a new list that contains only the elements that are common between the lists.\n    '''\n    list_intersection=[]\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                list_intersection.append(list1[i])\n    return list_intersection\ndef list_difference(list1,list2):\n    '''\n    Write a function that takes in two lists as arguments and returns a new list that contains all the elements that are not common between the two lists.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]!=list2[j]:\n                new_list.append(list1[i])\n    return new_list\ndef list_union(list1,list2):\n    '''\n    Write a function that takes in two lists as arguments and returns a new list that contains all the elements that are in either list.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    for i in range(len(list2)):\n        new_list.append(list2[i])\n    return new_list\ndef even_number_of_evens(list):\n    '''\n    Write a function that takes in a list as an argument and returns True if the number of even numbers is even. Otherwise, it should return False.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]%2==0:\n            count=count+1\n    if count%2==0:\n        return True\n    return False\ndef even_number_of_evens_alt(list):\n    '''\n    Write a function that takes in a list as an argument and returns True if the number of even numbers is even. Otherwise, it should return False.\n    '''\n    return len([i for i in list if i%2==0])%2==0\ndef big_diff(list):\n    '''\n    Write a function that takes in a list as an argument and returns the difference between the biggest and smallest elements.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n    return max(new_list)-min(new_list)\ndef capitalize(string):\n    '''\n    Write a function that takes in a string as an argument and returns a capitalized version of that string.\n    '''\n    return string.upper()\ndef compact(list):\n    '''\n    Write a function that takes in a list as an argument and returns a version of that list with all of the empty values removed.\n    '''\n    return [i for i in list if i!='']\ndef sum_of_cubes(list):\n    '''\n    Write a function that takes in a list as an argument and returns the sum of the cubes of all of the numbers in that list.\n    '''\n    sum_of_cubes=0\n    for i in range(len(list)):\n        sum_of_cubes+=list[i]**3\n    return sum_of_cubes\ndef sum_of_squares(list):\n    '''\n    Write a function that takes in a list as an argument and returns the sum of the squares of all of the numbers in that list.\n    '''\n    sum_of_squares=0\n    for i in range(len(list)):\n        sum_of_squares+=list",
        "test": "assert     replace_list([\"a\",\"b\",\"c\",\"d\"],[\"1\",\"2\",\"3\",\"4\"]) == [\"a\",\"b\",\"c\",\"1\",\"2\",\"3\",\"4\"]",
        "num_ids": 566
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac('abcdef') == 6",
        "num_ids": 417
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # return int(math.sqrt(N) + 1) ** 2\n    x = math.ceil(math.sqrt(N))\n    return x**2\n  \n  \ndef max_product(n): \n    '''\n    Write a python function to find the maximum product of three numbers in the array. The array can be large.\n    '''\n    # max = -1\n    # if len(n) < 3:\n    #     return -1\n    # for i in range(len(n)):\n    #     for j in range(i+1,len(n)):\n    #         if n[i] * n[j] > max:\n    #             max = n[i] * n[j]\n    # return max\n    # mx = 0\n    # while n:\n    #     a = n.pop()\n    #     b = n.pop()\n    #     c = n.pop()\n    #     if a*b*c > mx:\n    #         mx = a*b*c\n    #     n.append(a)\n    #     n.append(b)\n    #     n.append(c)\n    # return mx\n    max1,max2 = -1, -1\n    if len(n) < 3:\n        return -1\n    for i in range(len(n)):\n        if max1 < n[i] and n[i] > max2:\n            max1 = n[i]\n        elif max1 < n[i] and n[i] > max2:\n            max2 = n[i]\n        elif n[i] * max1 > max1 * max2:\n            max2 = max1\n            max1 = n[i]\n        elif n[i] * max1 > max1 * max2:\n            max2 = n[i]\n    return max1 * max2\n  \n  \ndef max_min_products(l): \n    '''\n    Write a python function to find the maximum and minimum product of three numbers in the array. The array can be large.\n    '''\n    # min1,min2 = 0,0\n    # max1,max2 = -1, -1\n    # for i in l:\n    #     if max1 < i and i > max2:\n    #         max1 = i\n    #     elif max1 < i and i > max2:\n    #         max2 = i\n    #     elif min1 > i and i < min2:\n    #         min1 = i\n    #     elif min1 > i and i < min2:\n    #         min2 = i\n    #     elif max1 * max2 < max1 * min2:\n    #         max2 = max1\n    #         max1 = i\n    #     elif max1 * max2 < max1 * min2:\n    #         min2 = min1\n    #         min1 = i\n    # return max1 * max2, min1 * min2\n    # min = -1\n    # max = -1\n    # if len(l) < 3:\n    #     return -1, -1\n    # for i in range(len(l)):\n    #     for j in range(i+1,len(l)):\n    #         if min == -1 and max == -1:\n    #             min = l[i] * l[j]\n    #             max = l[i] * l[j]\n    #         else:\n    #             if l[i] * l[j] < min:\n    #                 min = l[i] * l[j]\n    #             elif l[i] * l[j] > max:\n    #                 max = l[i] * l[j]\n    # return max, min\n    # if len(l) < 3:\n    #     return -1\n    # l.sort()\n    # return l[-1] * l[-2], l[0] * l[1]\n    min1, min2 = 0, 0\n    max1, max2 = -1, -1\n    for i in l:\n        if max1 < i and i > max2:\n            max1 = i\n        elif max1 < i and i > max2:\n            max2 = i\n        elif min1 > i and i < min2:\n            min1 = i\n        elif min1 > i and i < min2:\n            min2 = i\n        elif max1 * max2 < max1 * min2:\n            max2 = max1\n            max1 = i\n        elif max1 * max2 < max1 * min2:\n            min2 = min1\n            min1 = i\n    return max1 * max2, min1 * min2\n  \n  \ndef min_absolute_difference(n):\n    '''\n    Write a python function to find the minimum absolute difference between two numbers in the array. The array can be large.\n    '''\n    # if len(n) < 2:\n    #     return -1\n    # min = -1\n    # for i in range(len(n)):\n    #     for j in range(i+1,len(n)):\n    #         if abs(n[i] - n[j]) < min or min == -1:\n    #             min = abs(n[i] - n[j])\n    # return min\n    # n.sort()\n    # return min(abs(n[i] - n[i+1]) for i in range(len(n)-1))\n    n.sort()\n    return min(abs(n[i] - n[i+1]) for i in range(len(n)-1))\n  \n  \ndef product_difference(n):\n    '''\n    Write a python function to find the maximum product of two numbers in the array. The array can be large.\n    '''\n    # if len(n) < 2:\n    #     return -1\n    # max = -1\n    # for i in range(len(n)):\n    #     for j in range(i+1,len(n)):\n    #         if n[i] * n[j] > max:\n    #             max = n[i] * n[j]\n    # return max\n    # n.sort()\n    # return n[-1] * n[-2]\n    return max(n[i] * n[j] for i in range(len(n)) for j in range(len(n))) - min(n[i] * n[j] for i in range(len(n)) for j in range(len(n)))\n  \n  \ndef find_the_number(n):\n    '''\n    Write a python function to find the number of permutations for n distinct objects.\n    '''\n    # if n < 2:\n    #     return 1\n    # return n * find_the_number(n-1)\n    return math.factorial(n)\n  \n  \ndef find_the_number_2(n):\n    '''\n    Write a python function to find the number of permutations for n distinct objects.\n    '''\n    # if n < 2:\n    #     return 1\n    # return n * find_the_number(n-1)\n    return math.factorial(n)\n  \n  \ndef find_the_number_3(n):\n    '''\n    Write a python function to find the number of permutations for n distinct objects.\n    '''\n    if n < 2:\n        return 1\n    return math.factorial(n) // math.factorial(n-2)\n  \n  \ndef find_the_number_4(n):\n    '''\n    Write a python function to find the number of permutations for n distinct objects.\n    '''\n    if n < 2:\n        return 1\n    return math.factorial(n) // math.factorial(n-2)\n  \n  \ndef find_the_number_5(n):\n    '''\n    Write a python function to find the number of permutations for n distinct objects.\n    '''\n    if n < 2:\n        return 1\n    return math.factorial(n) // math.factorial(n-2)\n    return math",
        "test": "assert     (next_Perfect_Square(3) == 4), \"Wrong result for next_Perfect_Square(3)\"",
        "num_ids": 529
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    arr = sorted(arr)\n    # Traverse through all array elements \n    sum = arr[0]\n    for i in range(1,n):\n        sum = max(sum, arr[i])\n        sum += arr[i]\n    return sum\n",
        "test": "assert     max_sum([13, 1, 3, 2, 8, 10, 12, 14, 16, 15]) == 46",
        "num_ids": 1017
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    guess = number/2\n    while True:\n        if guess**2 > number:\n            guess = (guess+number/guess)/2\n        elif guess**2 < number:\n            guess = (guess+number/guess)/2\n        elif guess**2 == number:\n            return guess\n",
        "test": "assert     round(babylonian_squareroot(16), 2) == 4.0, \"Test 1 failed\"",
        "num_ids": 386
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    l = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        l[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                l[i][j] = 2\n            elif str[i] == str[j]: \n                l[i][j] = l[i + 1][j - 1] + 2\n            else: \n                l[i][j] = max(l[i][j - 1], l[i + 1][j]); \n    return l[0][n - 1] \n",
        "test": "assert     lps('acd') == 1",
        "num_ids": 584
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # base case:\n    if n == 1:\n        return 1\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 206
    },
    {
        "number": 249,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    l1,l2 = len(array_nums1),len(array_nums2)\n    inter = []\n    i,j = 0,0\n    while i < l1 and j < l2:\n        if array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            inter.append(array_nums1[i])\n            i += 1\n            j += 1\n    return inter\n",
        "test": "assert intersection_array([1,2],[]) == []",
        "num_ids": 876
    },
    {
        "number": 250,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X(('a', 'a', 'b'), 'a') == 2",
        "num_ids": 732
    },
    {
        "number": 251,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "test": "assert     insert_element([1, 2, 3, 4, 5], 1) == [1, 1, 2, 3, 4, 5], 'failed'",
        "num_ids": 939
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if isinstance(numbers, (int,float)):\n        return(round(abs(numbers), 2), round(cmath.phase(numbers),2))\n    elif isinstance(numbers, complex):\n        return(round(abs(numbers), 2), round(cmath.phase(numbers),2))\n    else:\n        return(\"Input must be a single integer or a complex number\")\n",
        "test": "assert     convert(2) == cmath.polar(2)",
        "num_ids": 983
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x, int):\n            count += 1\n    return count\n",
        "test": "assert     count_integer([]) == 0, \"test case 4 failed\"",
        "num_ids": 540
    },
    {
        "number": 255,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n    # return combinations(l, n)\n",
        "test": "assert     combinations_colors([1, 2, 3], 1) == [(1,), (2,), (3,)]",
        "num_ids": 1337
    },
    {
        "number": 256,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n            \n    return count\n    \ndef is_prime(n):\n    '''\n    Write a python function that takes in a positive integer n and returns True if the n is a prime number and False if the n is not a prime number.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef count_Primes_eratosthenes(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number using the sieve of eratosthenes.\n    '''\n    if n <= 1:\n        return 0\n        \n    number_list = [False] * n\n    \n    number_list[0] = number_list[1] = True\n    \n    for i in range(2, n):\n        if number_list[i] == False:\n            for j in range(i * i, n, i):\n                number_list[j] = True\n                \n    return sum(number_list)\n    ",
        "test": "assert     count_Primes_nums(1) == 0, \"the result of count_Primes_nums should be 0\"",
        "num_ids": 688
    },
    {
        "number": 257,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "test": "assert     swap_numbers(5, 2) == (2, 5)",
        "num_ids": 396
    },
    {
        "number": 259,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result = tuple()\n    if test_tup1 < test_tup2:\n        result = test_tup2\n    elif test_tup1 > test_tup2:\n        result = test_tup1\n    return result\n",
        "test": "assert     maximize_elements((1,5), (3,4)) == (3,4), \"maximize_elements is incorrect\"",
        "num_ids": 932
    },
    {
        "number": 260,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n<=0:\n        return None\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    a = 2\n    b = 3\n    i = 3\n    while True:\n        p = a + b\n        if p >= n:\n            return p\n        a = b\n        b = p\n        i+=1\n",
        "test": "assert     newman_prime(2) == 3",
        "num_ids": 543
    },
    {
        "number": 261,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    res = ()\n    for i, j in zip(test_tup1, test_tup2):\n        res = res + (i/j,)\n    return res\n",
        "test": "assert     division_elements((3,6,9), (2,4,6)) == (1.5, 1.5, 1.5)",
        "num_ids": 636
    },
    {
        "number": 262,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    print('\\nSplit Two Parts:')\n    list2 = list1[L:]\n    list1 = list1[:L]\n    print('List 1: {}\\nList 2: {}'.format(list1, list2))\n    return (list1, list2)\n",
        "test": "assert     split_two_parts([1,2,3,4,5,6,7,8,9], 4) == ([1,2,3,4], [5,6,7,8,9])",
        "num_ids": 923
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if not isinstance(h_age, int):\n        raise ValueError('Please pass in an integer')\n    return (h_age * 7)\n",
        "test": "assert     dog_age(0) == 0, \"0 years is 0 dog years\"",
        "num_ids": 2376
    },
    {
        "number": 265,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = S\n    L = [L[i:i+step] for i in range(0, len(L), step)]\n    return L\n",
        "test": "assert     list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]",
        "num_ids": 801
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert     lateralsurface_cube(1) == 6, 'wrong result'",
        "num_ids": 301
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 1:\n        return None\n    return sum(i*i for i in range(1, n+1, 2))\n",
        "test": "assert     square_Sum(1) == 1",
        "num_ids": 437
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (2**n) * n\n",
        "test": "assert     find_star_num(1) == 2",
        "num_ids": 437
    },
    {
        "number": 269,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 291
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_index.append(i)\n            even_sum = even_sum + arr[i]\n    return even_sum\n",
        "test": "assert     sum_even_and_even_index([1, 3, 5, 7, 9]) == 0, \"Incorrect sum of evens at even indices\"",
        "num_ids": 912
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i**5)\n    return sum\n    ",
        "test": "assert     even_Power_Sum(0) == 0",
        "num_ids": 452
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][-1]\n    return test_list\n",
        "test": "assert     rear_extract([]) == []",
        "num_ids": 512
    },
    {
        "number": 273,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for index in range(len(test_tup1)):\n        new_tup += (test_tup1[index] - test_tup2[index],)\n    return new_tup\n",
        "test": "assert     substract_elements((2,3,4,5,6), (1,2,3,4,5)) == (1,1,1,1,1)",
        "num_ids": 1480
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for x in range(1,n+1):\n        if x%2==0:\n            sum += math.factorial(x)/(math.factorial(x/2)*math.factorial(x/2))\n    return sum\n",
        "test": "assert     even_binomial_Coeff_Sum(0) ==     0",
        "num_ids": 828
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=3.14*(r**2)*h\n    return volume\n    \nprint(volume_cylinder(3,5))\n",
        "test": "assert     volume_cylinder(0, 2) == 0",
        "num_ids": 469
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}\n",
        "test": "assert     dict_filter({1: 3, 2: 3, 3: 3, 4: 3, 5: 3}, 3) == {1: 3, 2: 3, 3: 3, 4: 3, 5: 3}, \"incorrect\"",
        "num_ids": 977
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tup_count = []\n    for elem in test_tup:\n        if elem == 1:\n            break\n        else:\n            tup_count.append(elem)\n    return len(tup_count)\n",
        "test": "assert     count_first_elements(('blueberry',)) == 1",
        "num_ids": 2804
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(3*n - 1)/2)\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 1206
    },
    {
        "number": 280,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "test": "assert     sequential_search([1,2,3,4,5],1) == (True, 0)",
        "num_ids": 853
    },
    {
        "number": 281,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     (all_unique([1, 2, 3, 4, 5]) == True)",
        "num_ids": 424
    },
    {
        "number": 282,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == len(nums2):\n        return [nums1[i] - nums2[i] for i in range(len(nums1))]\n    else:\n        print(\"error,length of two lists are not equal\")\n        return\n",
        "test": "assert     sub_list([1,2,3], [1,2,0]) == [0,0,3]",
        "num_ids": 638
    },
    {
        "number": 283,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Create a list of numbers from 0-9\n    nums = [0,1,2,3,4,5,6,7,8,9]\n    # n is a string, so we will need to convert it to integer before we can iterate through it\n    n = int(n)\n    # A list to store the frequencies of each digit in n\n    freq = [0] * 10\n    # Loop through the string n\n    while n > 0:\n        # Calculate the frequency of each digit in n\n        freq[n % 10] += 1\n        # n = n // 10\n        n //= 10\n    # Check whether the frequency of each digit in n is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True\n",
        "test": "assert     validate(12) == True",
        "num_ids": 570
    },
    {
        "number": 284,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    equal = False\n    for elem in list:\n        if elem == element:\n            equal = True\n        else:\n            equal = False\n    return equal\n",
        "test": "assert     check_element(['a', 'b', 'a', 'a', 'a', 'a'], 'b') == False",
        "num_ids": 565
    },
    {
        "number": 285,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2}',text):\n        flag=True\n    if re.search(r'ab{3}',text):\n        flag=True\n    return flag\n    \n    \n    \ndef text_match_two_three_and_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters, followed by zero or more 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \n    \ndef text_match_three_or_more_and_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three or more 'b' characters, followed by zero or more 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{3,}c',text):\n        flag=True\n    return flag\n    \n    \n    \ndef text_match_three_or_more_and_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three or more 'b' characters, followed by one 'c' character.\n    '''\n    flag=False\n    if re.search(r'ab{3,}c',text):\n        flag=True\n    return flag\n    \n    \ndef text_match_three_or_more_and_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three or more 'b' characters, followed by two 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{3,}c',text):\n        flag=True\n    return flag\n    \n    \ndef text_match_three_or_more_and_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three or more 'b' characters, followed by three 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{3,}c',text):\n        flag=True\n    return flag\n    \n    \ndef text_match_four_or_more(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or more 'b' characters.\n    '''\n    flag=False\n    if re.search(r'ab{4,}',text):\n        flag=True\n    return flag\n    \ndef text_match_four_or_more_and_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or more 'b' characters, followed by zero 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{4,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_four_or_more_and_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or more 'b' characters, followed by one 'c' character.\n    '''\n    flag=False\n    if re.search(r'ab{4,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_four_or_more_and_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or more 'b' characters, followed by two 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{4,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_four_or_more_and_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or more 'b' characters, followed by three 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{4,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by zero 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by one 'c' character.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by two 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by three 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by four 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by five 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by six 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by seven 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by eight 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by nine 'c' characters.\n    '''\n    flag=False\n    if re.search(r'ab{2,}c',text):\n        flag=True\n    return flag\n    \ndef text_match_two_or_more_and_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or more 'b' characters, followed by ten 'c' characters.\n    '''\n",
        "test": "assert     text_match_two_three('ab') == False",
        "num_ids": 612
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = 1\n    s = a[0]\n    for i in range(1, n):\n        if s + a[i] >= a[i]:\n            s += a[i]\n        else:\n            s = a[i]\n            l += 1\n            if l == k:\n                return s\n    return s\n",
        "test": "assert     max_sub_array_sum_repeated([1, 2, 3], 3, 3) == 6",
        "num_ids": 1200
    },
    {
        "number": 287,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([x*x for x in range(1,n+1) if x % 2 == 0])\n",
        "test": "assert     square_Sum(4) == 20",
        "num_ids": 498
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = []\n    for item in list1:\n        if len(item) > len(max_len):\n            max_len = item\n    return max_len\n    \n    \nprint(max_length([[1, 2, 3], [4, 5], [], [1, 2, 3, 4, 5, 6]]))\n",
        "test": "assert     max_length([[1,2], [3,4,5], [6]]) == [3, 4, 5]",
        "num_ids": 687
    },
    {
        "number": 291,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(n, k):\n        if n == 0: \n            return 0\n        elif n == 1: \n            return 1\n        elif n == 2: \n            if k >= 2:\n                return k\n            elif k == 1:\n                return k + 1\n        elif k == 1:\n            return n\n        elif k == 2:\n            return n + 1\n        else:\n            return count_ways(n - 2, k - 2) + count_ways(n - 1, k - 1) + count_ways(n - 1, k)\n    return count_ways(n, k)\n",
        "test": "assert     count_no_of_ways(2, 2) == 2, \"Incorrect\"",
        "num_ids": 830
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    div = n // m\n    print(div)\n    return div\n",
        "test": "assert     find(11,10) == 1",
        "num_ids": 438
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = 0\n    def hypotenuse(a,b):\n        thirdside = math.sqrt(a**2 + b**2)\n        return thirdside\n    x = hypotenuse(w,h)\n    return x\n",
        "test": "assert     otherside_rightangle(3,4) == 5, \"This should be 5: {0}\".format(otherside_rightangle(3,4))",
        "num_ids": 500
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval=listval[0]\n    for x in listval:\n        if x>maxval:\n            maxval=x\n    return maxval\n",
        "test": "assert     max_val([3, 7, 2, 1, 9, 5, 4]) == 9, \"Incorrect result for max_val\"",
        "num_ids": 383
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = [1]\n    for x in range(2,number):\n        if number % x == 0:\n            div.append(x)\n    return sum(div)\n",
        "test": "assert     sum_div(10) == 1+2+5, \"not working for 10\"",
        "num_ids": 365
    },
    {
        "number": 296,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv += 1\n    return inv\n",
        "test": "assert     get_Inv_Count([3,2,1,0]) == 6",
        "num_ids": 1056
    },
    {
        "number": 297,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for i in list1:\n        if type(i) is list:\n            flattened_list += flatten_list(i)\n        else:\n            flattened_list.append(i)\n    return flattened_list\n",
        "test": "assert     flatten_list([1, 2, 3]) == [1, 2, 3], 'incorrect flattening'",
        "num_ids": 346
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(list)\n    for i in stdata:\n        data[i[0]].append(i[1])\n    for i in data:\n        data[i] = max(data[i])\n    return data\n",
        "test": "assert     max_aggregate([(0, 2), (1, 3), (0, 1), (2, 4), (1, 5)]) == 7, \"Wrong output\"",
        "num_ids": 878
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2) + count_binary_seq(n-3)\n",
        "test": "assert     count_binary_seq(0) == 1",
        "num_ids": 493
    },
    {
        "number": 301,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if isinstance(d, dict):\n        for v in d.values():\n            depth = max(depth, dict_depth(v))\n    return depth+1\n",
        "test": "assert     dict_depth({}) == 1, 'Empty dictionary should have depth of 1'",
        "num_ids": 697
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # for i in range(0,ranges) :\n    #     arr[i] = arr[i] + rotations\n    #     print(arr[i])\n    #     arr[i] = arr[i] - rotations\n    #     print(arr[i])\n    #     if index == i :\n    #         return arr[index]\n    # return -1\n",
        "test": "assert ",
        "num_ids": 732
    },
    {
        "number": 305,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    new_list=[]\n    for words in words:\n        if words[0]=='p':\n            new_list.append(words)\n    return new_list\n",
        "test": "assert     start_withp(['pythons', 'is', 'awesome']) == ['pythons']",
        "num_ids": 864
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n or k > index:\n        return 0\n    if k == index:\n        return a[k]\n    ans = max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    return ans\n",
        "test": "assert     max_sum_increasing_subseq(a, n, k) == [15, 16, 13, 14]",
        "num_ids": 1016
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    temp=tuple(i for i in tuplex[1:m+1])\n    return (tuplex[0],temp,tuplex[-n:])\ndef tuple_dictionary(tuplex):\n    '''\n    Write a function to convert tuple to a dictionary\n    '''\n    temp=dict()\n    for i in tuplex:\n        temp[i[0]]=i[1]\n    return temp\ndef tuple_dictionary_2(tuplex):\n    '''\n    Write a function to convert tuple to a dictionary\n    '''\n    temp=dict()\n    for i in range(len(tuplex)):\n        temp[tuplex[i][0]]=tuplex[i][1]\n    return temp\ndef tuple_list_dictionary(tuplex):\n    '''\n    Write a function to convert tuple to a list of dictionaries\n    '''\n    temp=list()\n    for i in range(len(tuplex)):\n        temp.append(dict(zip(tuplex[i][0],tuplex[i][1])))\n    return temp\ndef list_tuple_dictionary(listx):\n    '''\n    Write a function to convert list of tuples to a dictionary\n    '''\n    temp=dict()\n    for i in listx:\n        temp[i[0]]=i[1]\n    return temp\ndef tuple_list_list_tuple(tuplex):\n    '''\n    Write a function to convert list of lists of tuples to a list of tuples\n    '''\n    temp=list()\n    for i in tuplex:\n        temp.append(tuple(j for j in i))\n    return temp\ndef tuple_list_tuple_dictionary(tuplex):\n    '''\n    Write a function to convert list of tuples to a dictionary of tuples\n    '''\n    temp=dict()\n    for i in tuplex:\n        temp[i[0]]=i[1]\n    return temp\ndef tuple_dictionary_list(tuplex):\n    '''\n    Write a function to convert a dictionary of tuples to a list of tuples\n    '''\n    temp=list()\n    for i in tuplex.items():\n        temp.append(i)\n    return temp\ndef dic_tuple_list(dicx):\n    '''\n    Write a function to convert a dictionary to a list of tuples\n    '''\n    temp=list()\n    for i in dicx.items():\n        temp.append((i[0],i[1]))\n    return temp\ndef dict_from_tuples_list(listx):\n    '''\n    Write a function to convert a list of tuples to a dictionary\n    '''\n    temp=dict()\n    for i in listx:\n        temp[i[0]]=i[1]\n    return temp\ndef dict_from_tuple_list(listx):\n    '''\n    Write a function to convert a list of tuples to a dictionary\n    '''\n    temp=dict()\n    for i in listx:\n        temp[i[0]]=i[1]\n    return temp\ndef dictionaries_lists_lists_tuple(dictx,n):\n    '''\n    Write a function to create a list of lists of tuples.\n    '''\n    temp=list()\n    for i in dictx.items():\n        temp.append((i[0],i[1]) for j in range(n))\n    return temp\ndef dict_tuple_list(dicx):\n    '''\n    Write a function to convert a dictionary to a list of tuples\n    '''\n    temp=list()\n    for i in dicx.items():\n        temp.append((i[0],i[1]))\n    return temp\ndef list_dict_tuple(listx):\n    '''\n    Write a function to convert a list of tuples to a dictionary\n    '''\n    temp=dict()\n    for i in listx:\n        temp[i[0]]=i[1]\n    return temp\ndef list_dict_tuple_list(listx):\n    '''\n    Write a function to convert a list of tuples to a list of dictionaries\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(dict(zip(i[0],i[1])))\n    return temp\ndef list_list_dict_tuple(listx):\n    '''\n    Write a function to convert a list of lists of tuples to a list of dictionaries\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(dict(zip(i[0],i[1])))\n    return temp\ndef list_tuple_dict_tuple(listx):\n    '''\n    Write a function to convert a list of tuples to a list of dictionaries\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(dict(zip(i[0],i[1])))\n    return temp\ndef list_tuple_list_dict(listx):\n    '''\n    Write a function to convert a list of tuples to a list of lists of dictionaries\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(list(zip(i[0],i[1])))\n    return temp\ndef dict_list_tuple(dictx):\n    '''\n    Write a function to convert a dictionary to a list of tuples\n    '''\n    temp=list()\n    for i in dictx.items():\n        temp.append((i[0],i[1]))\n    return temp\ndef tuple_dict_list(tuplex):\n    '''\n    Write a function to convert a tuple to a list of dictionaries\n    '''\n    temp=list()\n    for i in tuplex:\n        temp.append(dict(zip(i[0],i[1])))\n    return temp\ndef dictionary_lists_lists_tuples(dictx,n):\n    '''\n    Write a function to create a list of lists of tuples.\n    '''\n    temp=list()\n    for i in dictx.items():\n        temp.append((i[0],i[1]) for j in range(n))\n    return temp\ndef dict_list_list_tuple(dictx):\n    '''\n    Write a function to convert a dictionary to a list of lists of tuples\n    '''\n    temp=list()\n    for i in dictx.items():\n        temp.append(list(zip(i[0],i[1])))\n    return temp\ndef lists_lists_tuples_dict(listx,n):\n    '''\n    Write a function to create a list of lists of tuples.\n    '''\n    temp=list()\n    for i in listx:\n        temp.append((i[0],i[1]) for j in range(n))\n    return temp\ndef tuple_tuple_list_dict(tuplex):\n    '''\n    Write a function to convert a tuple to a list of dictionaries\n    '''\n    temp=list()\n    for i in tuplex:\n        temp.append(dict(zip(i[0],i[1])))\n    return temp\ndef list_tuple_list_list(listx):\n    '''\n    Write a function to convert a list of tuples to a list of lists of tuples\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(list(zip(i[0],i[1])))\n    return temp\ndef list_list_list_tuple(listx):\n    '''\n    Write a function to convert a list of lists of tuples to a list of lists of tuples\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(list(zip(i[0],i[1])))\n    return temp\ndef list_list_dict_tuple(listx):\n    '''\n    Write a function to convert a list of lists of tuples to a list of lists of dictionaries\n    '''\n    temp=list()\n    for i in listx:\n        temp.append(list(zip(i[0],i[1])))\n    return temp\ndef list_list_list_list_tuple(listx):\n    ''",
        "test": "assert     colon_tuplex((1,2,3,4),1,1) == (1,2)",
        "num_ids": 1047
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Use reduce to compute the product\n    from functools import reduce\n    from operator import mul\n",
        "test": "assert ",
        "num_ids": 739
    },
    {
        "number": 309,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    ",
        "test": "assert     maximum(1,2) == maximum(2,1), \"maximum(1,2) failed\"",
        "num_ids": 400
    },
    {
        "number": 310,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        lst.append(str1[i])\n    return tuple(lst)\n",
        "test": "assert     string_to_tuple('another string')!= ('a', 'o', 'n','', 'h', 'a', 'r', 'r', 'e','s', 't', 'r', 'i', 'n', 'g') ",
        "num_ids": 604
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & -n)\n",
        "test": "assert    set_left_most_unset_bit(0) == 0",
        "num_ids": 500
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=1/3*math.pi*r**2*h\n    return volume\n",
        "test": "assert     volume_cone(3,0)==0, \"Wrong answer for volume_cone(3,0)\"",
        "num_ids": 2471
    },
    {
        "number": 388,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 0\n    while n>=pow(2,p):\n        p+=1\n    return p\n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 2450
    },
    {
        "number": 389,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base case\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 474
    },
    {
        "number": 390,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "test": "assert     add_string([], '{}!') == []",
        "num_ids": 706
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) and len(l1) == len(l3):\n        dic = {}\n        for i in range(len(l1)):\n            dic[l1[i]] = {l2[i]:l3[i]}\n        return dic\n",
        "test": "assert     convert_list_dictionary([], [], []) == {}",
        "num_ids": 1379
    },
    {
        "number": 392,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    s1 = get_max_sum(n/2)\n    s2 = get_max_sum(n/3)\n    s3 = get_max_sum(n/4)\n    s4 = get_max_sum(n/5)\n    if s1 >= s2:\n        if s1 >= s3:\n            if s1 >= s4:\n                return s1 + n\n            else:\n                return s4 + n\n        else:\n            if s3 >= s4:\n                return s3 + n\n            else:\n                return s4 + n\n    else:\n        if s2 >= s3:\n            if s2 >= s4:\n                return s2 + n\n            else:\n                return s4 + n\n        else:\n            if s3 >= s4:\n                return s3 + n\n            else:\n                return s4 + n\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 729
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for l in input_list:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return max_list\n",
        "test": "assert     max_length_list([]) == []",
        "num_ids": 1259
    },
    {
        "number": 394,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #tup_list = list(test_tup)\n    #if len(test_tup)!= len(set(test_tup)):\n    #    return False\n    #else:\n    #    return True\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert     check_distinct(()) == True, 'error in check_distinct'",
        "num_ids": 677
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict.keys():\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for i, key in enumerate(char_dict.keys()):\n        if char_dict[key] == 1:\n            return key\n    return None\n",
        "test": "assert     first_non_repeating_character(\"aabbc\")     == 'c'",
        "num_ids": 469
    },
    {
        "number": 396,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Write your code here\n    if (string[0] == string[-1]):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char('aba') == True",
        "num_ids": 379
    },
    {
        "number": 397,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a,b,c]\n    num_list.sort()\n    n = len(num_list)\n    if n % 2 == 0:\n        m1 = num_list[n//2]\n        m2 = num_list[n//2 - 1]\n        median = (m1 + m2)/2\n    else:\n        median = num_list[n//2]\n    return median\n",
        "test": "assert     median_numbers(0,1,2) == 1.0",
        "num_ids": 602
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        return sum(int(i) for i in str(num))\n",
        "test": "assert     sum_of_digits([1234]) == 10",
        "num_ids": 316
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    for i in range(0, len(test_tup1_list)):\n        test_tup1_list[i] = test_tup1_list[i] ^ test_tup2_list[i]\n    return tuple(test_tup1_list)\n",
        "test": "assert     ((3, 3) == bitwise_xor((1, 2), (2, 1)))",
        "num_ids": 993
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # your code here\n    return len(set(test_list))\n",
        "test": "assert extract_freq([('A', 'B'), ('D', 'E')]) == 2",
        "num_ids": 929
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_list = []\n    for i in range(0,len(test_tup1)):\n        new_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(new_list)\n",
        "test": "assert     add_nested_tuples((1, (2, 3)), (4, (1, 2))) == (5, (3, 4))",
        "num_ids": 1060
    },
    {
        "number": 404,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef greater(a,b,c):   \n    '''\n    Write a python function to check if the first number is greater than the second number and the third number.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\ndef lesser(a,b,c):   \n    '''\n    Write a python function to check if the first number is lesser than the second number and the third number.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\ndef is_greater_lesser(a,b,c):   \n    '''\n    Write a python function to check if the first number is greater than the second number and the third number.\n    '''\n    if a>b and a<c:\n        return \"a is greater than b and c\"\n    elif b>a and b<c:\n        return \"b is greater than a and c\"\n    else:\n        return \"c is greater than a and b\"\n    \nprint(\"minimum(1,2):\",minimum(1,2))\nprint(\"minimum(3,2):\",minimum(3,2))\nprint(\"maximum(1,2):\",maximum(1,2))\nprint(\"maximum(3,2):\",maximum(3,2))\nprint(\"greater(1,2,3):\",greater(1,2,3))\nprint(\"greater(3,2,1):\",greater(3,2,1))\nprint(\"greater(3,1,2):\",greater(3,1,2))\nprint(\"greater(3,3,3):\",greater(3,3,3))\nprint(\"lesser(1,2,3):\",lesser(1,2,3))\nprint(\"lesser(3,2,1):\",lesser(3,2,1))\nprint(\"lesser(3,1,2):\",lesser(3,1,2))\nprint(\"lesser(3,3,3):\",lesser(3,3,3))\nprint(\"is_greater_lesser(1,2,3):\",is_greater_lesser(1,2,3))\nprint(\"is_greater_lesser(3,2,1):\",is_greater_lesser(3,2,1))\nprint(\"is_greater_lesser(3,1,2):\",is_greater_lesser(3,1,2))\nprint(\"is_greater_lesser(3,3,3):\",is_greater_lesser(3,3,3))",
        "test": "assert     minimum(5, 3) == 3",
        "num_ids": 760
    },
    {
        "number": 405,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuple1[0] in tuplex):\n        return True\n    elif(tuple1[1] in tuplex):\n        return True\n    elif(tuple1[2] in tuplex):\n        return True\n    elif(tuple1[3] in tuplex):\n        return True\n    elif(tuple1[4] in tuplex):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex((\"hello\",1,2),(\"hello\",1,2)) == True",
        "num_ids": 791
    },
    {
        "number": 406,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    result = 0\n    while (x): \n        result ^= x & 1\n        x >>= 1\n    return result \n",
        "test": "assert     (find_Parity(2) == 1)",
        "num_ids": 413
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = list(map(int, str(n)))\n    # make sure the array is ascending\n    # if it is not ascending, sort it\n    # if it is ascending, swap with the right index\n    # if the length of the array is one, return the number as it is\n    if arr[-1] - arr[0] > 0:\n        arr = sorted(arr)\n        arr[-1], arr[-2] = arr[-2], arr[-1]\n    elif arr[-1] - arr[0] == 0:\n        return n\n    else:\n        arr = arr\n",
        "test": "assert     rearrange_bigger(9) == 9,     rearrange_bigger(9)",
        "num_ids": 1035
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # O(klog(n) + nlog(k)) time\n    # O(n) space\n",
        "test": "assert     (k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == ",
        "num_ids": 878
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = list(set(list1))\n    list2.sort()\n    min_value = min(list2)\n    return min_value\n",
        "test": "assert ",
        "num_ids": 982
    },
    {
        "number": 410,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n    minval = listval[0]\n    for x in listval:\n        if x < minval:\n            minval = x\n    return minval\n",
        "test": "assert     min_val([1,2,3,4,5,6,7,8,9,0]) == 0, \"Check your answer\"",
        "num_ids": 751
    },
    {
        "number": 411,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n",
        "test": "assert     snake_to_camel('snake_case') == 'SnakeCase'",
        "num_ids": 2476
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n",
        "test": "assert     remove_odd([1,3,5,7]) == [], \"Remove Odd Numbers Function Not Working\"",
        "num_ids": 612
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1) is not list:\n        return \"Invalid input\"\n    if n >= len(list1):\n        return \"Invalid index\"\n    return list1[n][1]\n",
        "test": "assert     extract_nth_element([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)], 1) == (6, 7, 8, 9, 10), \\",
        "num_ids": 883
    },
    {
        "number": 414,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(num in list1 for num in list2)\n    ",
        "test": "assert     overlapping([1,2,3,4], [3,4,5,6,7]) == True, \"overlapping function is incorrect\"",
        "num_ids": 721
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    result = arr[-1]*arr[-2]\n    return result\n",
        "test": "assert     max_Product([1, 2, 3]) == 6",
        "num_ids": 753
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #convert list of tuples to a dictionary\n    \n    InputDict = {}\n    for t in Input:\n        InputDict[t[0]] = InputDict.get(t[0],0) + 1\n",
        "test": "assert     group_tuples([('siva', 'g'), ('siva','s'), ('siva', 'g'), ('siva', 'a'), ('siva', 'g'), ('siva','s')]) =='siva'",
        "num_ids": 945
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maximum = None\n    for i in lst:\n        if len(i)>len(maximum):\n            maximum = i\n    return maximum\n",
        "test": "assert Find_Max([]) == None",
        "num_ids": 655
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = list(map(lambda x: round(x), list1))\n    return round(sum(rounded_list) * len(list1), 3)\n",
        "test": "assert     round_and_sum([]) == 0",
        "num_ids": 276
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubes = []\n    for num in range(n+1):\n        if num % 2 == 0:\n            cubes.append(num**3)\n    return sum(cubes)\n",
        "test": "assert     cube_Sum(1) == 0",
        "num_ids": 450
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delim = ', '\n    return delim.join(test_tup)\n",
        "test": "assert     concatenate_tuple((\"a\",)) == \"a\", \"should be 'a'\"",
        "num_ids": 652
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        Sum += i**3\n    return Sum/n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 443
    },
    {
        "number": 424,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[-1])\n",
        "test": "assert     extract_rear((\"Hello\", \"world\", \"!\")) == \"!\"",
        "num_ids": 666
    },
    {
        "number": 425,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([], 0) == 0",
        "num_ids": 589
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # We can use the filter function to filter out\n    # the odd numbers from a list\n    odds = filter(lambda x: x % 2!= 0, nums)\n    return list(odds)\n",
        "test": "assert     filter_oddnumbers([1,2,3]) == [1,3]",
        "num_ids": 490
    },
    {
        "number": 427,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10]+\"-\"+dt[5:7]+\"-\"+dt[:4]\n",
        "test": "assert     change_date_format(\"2019-04-09\") == \"09-04-2019\"",
        "num_ids": 726
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    list_len = len(my_list)\n    gap = int(list_len/2)\n    while gap > 0:\n        for i in range(gap, list_len):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap/2)\n    return my_list\n",
        "test": "assert     shell_sort([1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 714
    },
    {
        "number": 429,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] and test_tup2[i],)\n    return new_tup\n",
        "test": "assert     and_tuples((1,2,3),(1,2,3)) == (1,2,3)",
        "num_ids": 791
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = -b/(2*a)\n    print(d)\n    \nparabola_directrix(2, -8, 8)",
        "test": "assert     parabola_directrix(0, -1, -1) == (2, 2)",
        "num_ids": 669
    },
    {
        "number": 431,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert not common_element([1, 2, 3, 4, 5], [])",
        "num_ids": 765
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print('The median length of a trapezium with bases {} and {} and height {} is {}'.format(base1,base2,height,((base1+base2)/2)*height))\n",
        "test": "assert ",
        "num_ids": 469
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if number < x:\n            return False\n    return True\n",
        "test": "assert     check_greater([1,2,3,4,5], 2) == False",
        "num_ids": 384
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b*')\n    result = pattern.search(text)\n    return result!= None\n",
        "test": "assert     text_match_one('') == False, 'wrong result: '''",
        "num_ids": 533
    },
    {
        "number": 435,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     last_Digit(1) == 1",
        "num_ids": 412
    },
    {
        "number": 436,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos\n",
        "test": "assert     [] == neg_nos([])",
        "num_ids": 380
    },
    {
        "number": 437,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if not i in '13579':\n            new_str += i\n    return new_str\n",
        "test": "assert     remove_odd('') == ''",
        "num_ids": 2484
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] == test_list[i][1]:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8)]) == 0, 'Case 2'",
        "num_ids": 3046
    },
    {
        "number": 439,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return int(''.join([str(i) for i in L]))\n",
        "test": "assert     multiple_to_single([1, 2, 3, 4, 5]) == 12345",
        "num_ids": 349
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regex to find adverbs\n    result = re.search(r\"\\w+ly|\\w+ness\", text)\n    if result is None:\n        return -1, -1\n    else:\n        # Save the location of the first adverb\n        position = result.span()[0]\n        return position, position + len(result.group())\n",
        "test": "assert     find_adverb_position(\"I went to the market to buy apples and I got some.\") == [0, \"adverb\"]",
        "num_ids": 1192
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "test": "assert     surfacearea_cube(3) == 54",
        "num_ids": 300
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for x in nums:\n        if x>0:\n            count+=1\n    return count/len(nums)\n",
        "test": "assert     positive_count([1, -1, 1, -1]) == 0.5",
        "num_ids": 552
    },
    {
        "number": 443,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    result = None\n    for x in list1:\n        if result is None or x < result:\n            result = x\n    return result\n",
        "test": "assert     largest_neg([-1, 0, -1, 1, 1]) == -1, 'test failed'",
        "num_ids": 718
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for x in test_list:\n        if len(x) > K:\n            x = x[:K]\n    return test_list\n",
        "test": "assert     trim_tuple([(2, 3, 4), (2, 4, 5), (2, 5, 6), (2, 6, 7), (2, 7, 8)], 3) == [(2, 3, 4), (2, 4, 5), (2, 5, 6), (2, 6, 7), (2, 7, 8)]",
        "num_ids": 1169
    },
    {
        "number": 445,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    l1 = []\n    for i in range(len(test_tup1)):\n        l1.append(test_tup1[i] * test_tup2[i])\n    return tuple(l1)\n",
        "test": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18), \"Error in your code. Try again!\"",
        "num_ids": 608
    },
    {
        "number": 446,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup=tuple(lst)\n    d={} \n    for i in range(len(tup)): \n        d[tup[i]]=tup.count(tup[i]) \n    return d \nlst=['a', 'a', 'b', 'a', 'a', 'a', 'b', 'c', 'd', 'e', 'f', 'f', 'g', 'h'] \ntup=('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h') \nprint(count_Occurrence(tup, lst)) \n",
        "test": "assert     count_Occurrence([1,2,3,1,2,3], [1,2,3]) == Counter([1,2,3])",
        "num_ids": 1180
    },
    {
        "number": 447,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "test": "assert     cube_nums([1,2,3,4,5,6,7]) == [1,8,27,64,125,216,343]",
        "num_ids": 530
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i * (2 * i - 1) // 2\n    return s\n",
        "test": "assert     cal_sum(1) == 0",
        "num_ids": 317
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for s in str:\n        if len(s) == l:\n            res.append(s)\n    return res\n",
        "test": "assert     extract_string(['abcd', 'efgh', 'ijkl','mnop', 'qrst'], 0) == []",
        "num_ids": 773
    },
    {
        "number": 451,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n",
        "test": "assert     remove_whitespaces(\"      \") == \"\", \"Remove whitespaces should return an empty string.\"",
        "num_ids": 614
    },
    {
        "number": 452,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss < 0:\n        return 0\n    else:\n        return loss\n",
        "test": "assert     loss_amount(100,100) == 0",
        "num_ids": 435
    },
    {
        "number": 453,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i=1\n    sum=0\n    while i<n:\n        if n%i==0:\n            if i%2==0:\n                sum+=i\n        i+=1\n    return sum\n    \ndef printSquareOfDigits(n) : \n    '''\n    Write a python function to print the square of digits of a number.\n    '''\n    i=1\n    while i<=n:\n        print(int(i*i),end=' ')\n        i+=1\n    return\n",
        "test": "assert     sumofFactors(1)    == 0",
        "num_ids": 593
    },
    {
        "number": 454,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # r'\\b\\w*z\\w*\\b'\n    return re.findall(r'\\b\\w*z\\w*\\b', text)\n",
        "test": "assert     text_match_wordz('The quick brown fox jumps over the lazy dog.')",
        "num_ids": 2258
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthlist=[1,3,5,7,8,10,12]\n    if monthnum2 in monthlist:\n        return 31\n    elif monthnum2==2:\n        return 29\n    else:\n        return 0\n",
        "test": "assert     check_monthnumb_number(4) == False",
        "num_ids": 539
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0,len(stringlist)):\n        if len(stringlist[i]) > 1:\n            stringlist[i] = stringlist[i][::-1]\n        else:\n            pass\n    return stringlist\n",
        "test": "assert     reverse_string_list(['abc', 'def', 'ghi']) == ['cba', 'fed', 'ihg']",
        "num_ids": 498
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if len(lst[i:j+1]) < len(lst[i:j+1-1]):\n                break\n    return lst[i:j+1]\n",
        "test": "assert     (Find_Min([ [0], [0,1], [1,2], [0,3] ])) == [ [0,3] ]",
        "num_ids": 1510
    },
    {
        "number": 458,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(3,4) == 12, 'incorrect'",
        "num_ids": 373
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = re.compile('[A-Z]+')\n    return regex.sub('', str1)\n",
        "test": "assert     remove_uppercase('let it be')             == 'let it be'",
        "num_ids": 451
    },
    {
        "number": 460,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst]\n",
        "test": "assert     Extract([[1, 2], [3, 4], [5, 6, 7]]) == [1, 3, 5] ",
        "num_ids": 632
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n",
        "test": "assert upper_ctr('abc') == 0",
        "num_ids": 474
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    return [list(t) for t in itertools.permutations(list1)]\n",
        "test": "assert     combinations_list([1,2,3,4,5,6,7,8,9]) == [[1],[2],[3],[4],[5],[6],[7],[8],[9],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,9],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9],[4,5],[4,6],[4,7],[4,8],[4,9],[5,6],[5,7],[5,8],[5,9],[6,7],[6,8],[6,9],[7,8],[7,9],[8,9],[1,2,3],[1,2,4],[1,2,5],[1,2,6],[1,2,7],[1,2,8],[1,2,9],[1,3,4],[1,3,5],[1,3,6],[1,3,7],[1,3,8],[1,3,9],[1,4,5],[1,4,6],[1,4,7],[1,4,8],[1,4,9],[1,5,6],[1,5,7],[1,5,8],[1,5,9],[1,6,7],[1,6,8],[1,6,9],[1,7,8],[1,7,9],[1,8,9],[2,3,4],[2,3,5],[2,3,6],[2,3,7],[2,3,8],[2,3,9],[2,4,5],[2,4,6],[2,4,7],[2,4,8],[2,4,9],[2,5,6],[2,5,7],[2,5,8],[2,5,9],[2,6,7],[2,6,8],[2,6,9],[2,7,8],[2,7,9],[2,8,9],[3,4,5],[3,4,6],[3,4,7],[3,4,8],[3,4,9],[3,5,6],[3,5,7],[3,5,8],[3,5,9],[3,6,7],[3,6,8],[3,6,9],[3,7,8],[3,7,9],[3,8,9],[4,5,6],[4,5,7],[4,5,8],[4,5,9],[4,6,7],[4,6,8],[4,6,9],[4,7,8],[4,7,9],[4,8,9],[5,6,7],[5,6,8],[5,6,9],[5,7,8],[5,7,9],[5,8,9],[6,7,8],[6,7,9],[6,8,9],[7,8,9],[1,2,3,4],[1,2,3,5],[1,2,3,6],[1,2,3,7],[1,2,3,8],[1,2,3,9],[1,2,4,5],[1,2,4,6],[1,2,4,7],[1,2,4,8],[1,2,4,9],[1,2,5,6],[1,2,5,7],[1,2,5,8],[1,2,5,9],[1,2,6,7],[1,2,6,8],[1,2,6,9],[1,2,7,8],[1,2,7,9],[1,2,8,9],[1,3,4,5],[1,3,4,6],[1,3,4,7],[1,3,4,8],[1,3,4,9],[1,3,5,6],[1,3,5,7],[1,3,5,8],[1,3,5,9],[1,3,6,7],[1,3,6,8],[1,3,6,9],[1,3,7,8],[1,3,7,9],[1,3,8,9],[1,4,5,6],[1,4,5,7],[1,4,5,8],[1,4,5,9],[1,4,6,7],[1,4,6,8],[1,4,6,9],[1,4,7,8],[1,4,7,9],[1,4,8,9],[1,5,6,7],[1,5,6,8],[1,5,6,9],[1,5,7,8],[1,5,7,9],[1,5,8,9],[1,6,7,8],[1,6,7,9],[1,6,8,9],[1,7,8,9],[2,3,4,5],[2,3,4,6],[2,3,4,7],[2,3,4,8],[2,3,4,9],[2,3,5,6],[2,3,5,7],[2,3,5,8],[2,3,5,9],[2,3,6,7],[2,3,6,8],[2,3,6,9],[2,3,7,8],[2,3,7,9],[2,3,8,9],[2,4,5,6],[2,4,5,7],[2,4,5,8],[2,4,5,9],[2,4,6,7],[2,4,6,8],[2,4,6,9],[2,4,7,8],[2,4,7,9],[2,4,8,9],[2,5,6,7],[2,5,6,8],[2,5,6,9],[2,5,7,8],[2,5,7,9],[2,5,8,9],[2,6,7,8],[2,6,7,9],[2,6,8,9],[2,7,8,9],[3,4,5,6],[3,4,5,7],[3,4,5,8],[3,4,5,9],[3,4,6,7],[3,4,6,8],[3,4,6,9],[3,4,7,8],[3,4,7,9],[3,4,8,9],[3,5,6,7],[3,5,6,8],[3,5,6,9],[3,5,7,8],[3,5,7,9],[3,5,8,9],[3,6,7,8],[3,6,7,9],[3,6,8,9],[3,7,8,9],[4,5,6,7],[4,5,6,8],[4,5,6,9],[4,5,7,8],[4,5,7,9],[4,5,8,9],[4,6,7,8],[4,6,7,9],[4,6,8,9],[4,7,8,9],[5,6,7,8],[5,6,7,9],[5,6,8,9],[5,7,8,9],[6,7,8,9],[1,2,3,4,5],[1,2,3,4,6],[1,2,3,4,7],[1,2,3,4,8],[1,2,3,4,9],[1,2,3,5,6],[1,2,3,5,7],[1,2,3,5,8],[1,2",
        "num_ids": 2413
    },
    {
        "number": 463,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_max = curr_min = 1\n    start_index = 0\n    end_index = 0\n    for i in range(len(arr)):\n        curr_max = max(arr[i], curr_max * arr[i])\n        curr_min = min(arr[i], curr_min * arr[i])\n        if curr_max > max_product:\n            start_index = i - (curr_max - max_product)\n            end_index = i\n            max_product = curr_max\n    return max_product\n",
        "test": "assert     max_subarray_product([2,3,-2,4]) == 6, 'Failed'",
        "num_ids": 1516
    },
    {
        "number": 464,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values())!= n:\n        return False\n    return True\n",
        "test": "assert     check_value({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 4) == False, \"not working for a sample input\"",
        "num_ids": 1874
    },
    {
        "number": 465,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in list(dict1.items()):\n        if not v:\n            del dict1[k]\n    return dict1\n",
        "test": "assert     {'A': 1, 'B': 2, 'C': 3} == drop_empty({'A': 1, 'B': 2, 'C': 3})",
        "num_ids": 626
    },
    {
        "number": 468,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    l = len(arr)\n    if l < 2:\n        return\n    max_product = 1\n    for i in range(0, l):\n        for j in range(i + 1, l):\n            prod = 1\n            for k in range(i, j + 1):\n                prod = prod * arr[k]\n            max_product = max(max_product, prod)\n    return max_product\n",
        "test": "assert     max_product([1,1,1,1]) == 1",
        "num_ids": 964
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n    else:\n        return (test_tup[0]+test_tup[1], test_tup[2]) + add_pairwise(test_tup[1:])\n",
        "test": "assert     add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9)) == (2, 4, 6, 8, 10, 12, 14, 16, 18)",
        "num_ids": 848
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod * i % n\n    return prod\n",
        "test": "assert     find_remainder([2, 4, 6], 24) == 0",
        "num_ids": 302
    },
    {
        "number": 472,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if sorted(l) == list(range(min(l), max(l)+1)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 766
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return intersection\n",
        "test": "assert     tuple_intersection([(1,2), (3,4), (4,5)], [(1,2), (4,5), (6,7), (8,9), (10,11)]) == [(1,2), (4,5)]",
        "num_ids": 1045
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=''\n    for char in str1:\n        if char==ch:\n            newstr=newstr+newch\n        else:\n            newstr=newstr+char\n    return newstr\n",
        "test": "assert     replace_char('Hello World', 'H', 'J') == 'Jello World','replace_char should replace the first H to J'",
        "num_ids": 573
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    \ndef longest_word_in_dictionary(dict1):\n    '''\n    Write a function to return the longest word in the dictionary.\n    '''\n    longest_word = \"\"\n    for word in dict1.keys():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n    \ndef find_unique_words(list1):\n    '''\n    Write a function to return the number of unique words in the list.\n    '''\n    unique_words = {}\n    for word in list1:\n        unique_words[word] = 0\n    for word in unique_words:\n        unique_words[word] += 1\n    return unique_words\n",
        "test": "assert     sort_counter(",
        "num_ids": 460
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return sum(nums[0:2])\n",
        "test": "assert ",
        "num_ids": 184
    },
    {
        "number": 477,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    return string.lower()\n",
        "test": "assert     is_lower(\"HELLO\") == \"hello\", \"is_lower case fail\"",
        "num_ids": 354
    },
    {
        "number": 478,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for char in str1:\n        if char.islower():\n            str1 = str1.replace(char, \"\")\n    return str1\n",
        "test": "assert     remove_lowercase('') == ''",
        "num_ids": 534
    },
    {
        "number": 479,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n = n / 10;\n    return int(n)\n",
        "test": "assert     first_Digit(0) == 0, \"Wrong Result\"",
        "num_ids": 275
    },
    {
        "number": 554,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = [item for item in list if item % 2]\n    return result\n",
        "test": "assert     Split([1, 1, 2, 3, 5, 8, 13]) == [1, 1, 3, 5, 13], Split([1, 1, 2, 3, 5, 8, 13])",
        "num_ids": 811
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    Sum_Cubes = 0\n    Sum = 0\n    for i in range(n+1) :\n        Sum_Cubes += i**3\n    for j in range(n+1) :\n        Sum += j\n    return Sum_Cubes - Sum**2\n    \nprint(difference(10))\n    \n    \n    \ndef fibonacci(n) :\n    '''\n    Write a python function to calculate the value of the nth number of the fibonacci series.\n    '''\n    Sum_fibonacci = 0\n    Sum_fibonnaci_1 = 1\n    i = 1\n    while i <= n :\n        Sum_fibonacci = Sum_fibonacci + Sum_fibonnaci_1\n        Sum_fibonnaci_1 = Sum_fibonacci\n        i += 1\n    return Sum_fibonacci\n    \nprint(fibonacci(10))\n    \n",
        "test": "assert     difference(1) == 0",
        "num_ids": 493
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if((A[i] ^ A[j]) % 2 == 1) :\n                count+=1\n    return count\n",
        "test": "assert     find_Odd_Pair([1, 2, 3], 3) == 2, 'Test 1 failed. Expected result is 2 but got {}.'.format(find_Odd_Pair([1, 2, 3], 3))",
        "num_ids": 918
    },
    {
        "number": 557,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = [s.upper() if s.islower() else s.lower() for s in string]\n    string = [s.upper() if s.isupper() else s for s in string]\n    return ''.join(string)\n",
        "test": "assert     toggle_string('a') == 'A'",
        "num_ids": 684
    },
    {
        "number": 558,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1-n2)\n    return sum(map(int, str(diff)))\n",
        "test": "assert     digit_distance_nums(1, 5) == 4",
        "num_ids": 475
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_so_far = a[0]\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([-3, -3, -3, -3, -3], 5) == -3",
        "num_ids": 741
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    union = sorted(list(set(test_tup1 + test_tup2)))\n    print(f'The sorted union of {test_tup1} and {test_tup2} is:', union)\n",
        "test": "assert     (",
        "num_ids": 2850
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:\n        return 0\n    max_length = 0\n    for i in range(len(lst)):\n        lst[i] = [i] + lst[i]\n    lst.sort(key = len, reverse = True)\n    print(lst)\n    return len(lst[0])\n    \ndef Factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 1:\n        return 1\n    return n*Factorial(n-1)\n    \ndef Fibonacci_Sequence(n):\n    '''\n    Write a python function to find the nth term of Fibonacci sequence.\n    '''\n    if n == 0 or n == 1:\n        return n\n    return Fibonacci_Sequence(n-2) + Fibonacci_Sequence(n-1)\n",
        "test": "assert     Find_Max_Length([[1, 2, 3], [1, 2], [1, 2, 3], [1, 2, 3]]) == 4",
        "num_ids": 1059
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = re.compile(r'\"(.*?)\"')\n    return p.findall(text)\n",
        "test": "assert     extract_values('\"hello\"') == ['hello']",
        "num_ids": 2607
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n",
        "test": "assert     count_Pairs([0, 1, 2, 3, 4], 5) == 10, \"Failed\"",
        "num_ids": 742
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 189
    },
    {
        "number": 566,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, list(str(n))))\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 413
    },
    {
        "number": 567,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n",
        "test": "assert     issort_list(['a', 'c', 'b']) == False",
        "num_ids": 494
    },
    {
        "number": 568,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    for i in range(length):\n        list.append({})\n    return list\n",
        "test": "assert     [{},{},{},{}] == empty_list(4)",
        "num_ids": 346
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_helper(sublist):\n        sublist.sort()\n    return [sort_helper(sublist) for sublist in list1]\n",
        "test": "assert ",
        "num_ids": 488
    },
    {
        "number": 572,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    print('Input List: {}'.format(nums))\n    # Create a list of unique numbers\n    unique_list = []\n    for i in nums:\n        if i not in unique_list:\n            unique_list.append(i)\n    # Print new list\n    print('Unique List: {}'.format(unique_list))\n    print('\\n')\n    return unique_list\n",
        "test": "assert     two_unique_nums([0,2,3,4,5,6,7]) == [0,2,3,4,5,6,7]",
        "num_ids": 728
    },
    {
        "number": 573,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    \n    if len(list_data) == 0:\n        return 1\n    elif len(list_data) == 1:\n        return list_data[0]\n    else:\n        uniq_elem = []\n        for elem in list_data:\n            if elem not in uniq_elem:\n                uniq_elem.append(elem)\n        res = 1\n        for i in uniq_elem:\n            res = res * i\n        return res\n    return res\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert unique_product([1,2,3,4,5,6,7,8,9,0,3]) == 0",
        "num_ids": 2563
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*3.14*r*h + 2*3.14*r**2\n    return surfacearea\n",
        "test": "assert     surfacearea_cylinder(0,4) == 0,'surfacearea_cylinder is not returning the correct value'",
        "num_ids": 646
    },
    {
        "number": 576,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (len(A) >= len(B)):\n        for i in range(0,len(B)):\n            if A[i] == B[i]:\n                continue\n            else:\n                break\n        if (i == len(B) - 1):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([1,2,3], [1,2,3]) == True, \"Wrong answer\"",
        "num_ids": 1253
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n == 0): \n        return 1\n    else: \n        return n * last_Digit_Factorial(n-1)\n",
        "test": "assert     last_Digit_Factorial(1)     == 1",
        "num_ids": 441
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [a for pair in zip(list1,list2,list3) for a in pair]\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 712
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 == test_tup2:\n        return -1\n    dissimilar = []\n    for i,j in zip(test_tup1,test_tup2):\n        if i!= j:\n            dissimilar.append(j)\n    return dissimilar\n",
        "test": "assert     find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 4)) == []",
        "num_ids": 881
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc,test_tuple))\n",
        "test": "assert     even_ele( ( 1, 2, 3, 4, 5, 6 ), lambda x: x % 2 == 0 ) == ( 2, 4, 6 )",
        "num_ids": 1242
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=2*b*(1+s)\n    return a\n",
        "test": "assert     (surface_Area(2,4) == 20), \"Wrong surface area\"",
        "num_ids": 473
    },
    {
        "number": 582,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n",
        "test": "assert     not my_dict({'a': 1})",
        "num_ids": 273
    },
    {
        "number": 583,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    return (catalan_number(num-1)*(4*(num-1)+2))//(num+1)\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 549
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #Solution\n    regex_adverbs = \"(([a-z]{2,}ly)+)\"\n    regex_adverbs = re.compile(regex_adverbs)\n    mo = regex_adverbs.search(text)\n    if mo!= None:\n        return mo.group(1)\n    return None\n",
        "test": "assert     find_adverbs('The best advice is given to the wise.') == ['wise']",
        "num_ids": 818
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    new=items.copy()\n    heapq.heapify(new)\n    return heapq.nlargest(n,new)\n",
        "test": "assert     expensive_items([(\"bread\",50),(\"wine\",200),(\"meat\",20)], 1) == [('wine', 200)], 'incorrect'",
        "num_ids": 1427
    },
    {
        "number": 586,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[0:n]\n    l2 = l[n:]\n    new_l = l1 + l2\n    return new_l\n",
        "test": "assert     split_Arr( [1, 2, 3, 4, 5], 5) == [1, 2, 3, 4] + [5]",
        "num_ids": 710
    },
    {
        "number": 587,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5), \"Test 1 Failed\"",
        "num_ids": 483
    },
    {
        "number": 588,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([1,2,9,4,5]) == 8",
        "num_ids": 243
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # use range(a,b+1)\n    squares = []\n    for i in range(a,b+1):\n        if math.sqrt(i)%1 == 0:\n            squares.append(i)\n    return squares\n",
        "test": "assert     perfect_squares(2, 9) == [4, 9]",
        "num_ids": 591
    },
    {
        "number": 590,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2 + y**2)**0.5\n    theta = cmath.phase(complex(x,y))\n    x2 = r*cmath.cos(theta)\n    y2 = r*cmath.sin(theta)\n    return x2,y2\n",
        "test": "assert     (0,0) == polar_rect(0,0)",
        "num_ids": 561
    },
    {
        "number": 591,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    lenght = len(newList)\n    if lenght < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 624
    },
    {
        "number": 592,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n:\n        return 0\n    if k==0 or k==n:\n        return 1\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\ndef binomial_Coeff_2(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n:\n        return 0\n    if k==0 or k==n:\n        return 1\n    return (k*(n-k)*binomial_Coeff(n,k))//(k+1) + binomial_Coeff_2(n-1,k-1) + binomial_Coeff_2(n-1,k)\n",
        "test": "assert     binomial_Coeff(0,0) == 1, \"Test 1 failed\"",
        "num_ids": 758
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    numbers = re.findall(r'\\d+',ip)\n    if len(numbers) == 4:\n        return \".\".join(numbers)\n    elif len(numbers) == 3:\n        return \".\".join(numbers)\n    elif len(numbers) == 2:\n        return \".\".join(numbers)\n    elif len(numbers) == 1:\n        return \".\".join(numbers)\n",
        "test": "assert     '0.0.0.0' == removezero_ip('0.0.0.0')",
        "num_ids": 945
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    i = 0\n    while i<len(list1):\n        if (i+1)%2 == 0:\n            if (list1[i]!= list1[i+1]):\n                count+=1\n        i+=1\n    return count\n",
        "test": "assert     diff_even_odd([1,2,3,4,5]) == 2",
        "num_ids": 756
    },
    {
        "number": 595,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    s1 = str1\n    s2 = str2\n    list1 = list(s1)\n    list2 = list(s2)\n    dict1 = {'0':0,'1':0}\n    dict2 = {'0':0,'1':0}\n    for i in range(len(list1)) :\n        dict1[list1[i]] = dict1[list1[i]]+1\n    for i in range(len(list2)) :\n        dict2[list2[i]] = dict2[list2[i]]+1\n    count = 0\n    for i in dict1.keys() :\n        if i in dict2.keys() :\n            temp = dict1[i] - dict2[i]\n            count = count + temp\n        else :\n            count = count + dict1[i]\n    for i in dict2.keys() :\n        if i in dict1.keys() :\n            continue\n        else :\n            count = count + dict2[i]\n    return count \n",
        "test": "assert     min_Swaps('11101110','11101110') == 0",
        "num_ids": 1226
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = 0\n    for i in tuple_list:\n        s += sys.getsizeof(i)\n    return s\n",
        "test": "assert     tuple_size(()) ==     0,     \"error in function 0\"",
        "num_ids": 4394
    },
    {
        "number": 597,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) >= len(arr2):\n        arr = arr1\n    else:\n        arr = arr2\n    for i in range(len(arr)):\n        if len(arr1) == i + 1:\n            return arr2[k - i - 1]\n        elif len(arr2) == i + 1:\n            return arr1[k - i - 1]\n        elif arr1[i] < arr2[i]:\n            return arr1[k - i - 1]\n        else:\n            return arr2[k - i - 1]\n",
        "test": "assert     find_kth([1, 3, 4, 6], [2, 3, 5, 7, 9], 2) == 3",
        "num_ids": 1075
    },
    {
        "number": 598,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = str(number)\n    sum = 0\n    for i in num:\n        sum += int(i)**len(num)\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(200) == False,'should return False'",
        "num_ids": 556
    },
    {
        "number": 599,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = (number * (number+1))/2\n    return sum_n\n",
        "test": "assert     sum_average(5) == 15",
        "num_ids": 392
    },
    {
        "number": 600,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n",
        "test": "assert     is_Even(84) == True ",
        "num_ids": 266
    },
    {
        "number": 602,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            return i\n",
        "test": "assert     first_repeated_char('hello') == 'l'",
        "num_ids": 596
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    assert n>0\n    ludic=[1]\n    i=1\n    while(True):\n        if i not in ludic:\n            #print(i)\n            ludic.append(i)\n            for j in range(1,len(str(i))):\n                if j==len(str(i))-1:\n                    if int(str(i)[j-1:j+1])<=n:\n                        if int(str(i)[j-1:j+1]) not in ludic:\n                            ludic.append(int(str(i)[j-1:j+1]))\n                else:\n                    if int(str(i)[j-1:j+2])<=n:\n                        if int(str(i)[j-1:j+2]) not in ludic:\n                            ludic.append(int(str(i)[j-1:j+2]))\n        if len(ludic)>=n:\n            return ludic\n        else:\n            i+=1\n",
        "test": "assert ",
        "num_ids": 2714
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #Get the words in a string\n    lst = s.split()\n    #Reverse the order of the words\n    lst = list(reversed(lst))\n    #Join the words together into a string\n    s =''.join(lst)\n    return s\n",
        "test": "assert     reverse_words(\"\") == \"\"",
        "num_ids": 576
    },
    {
        "number": 605,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(3) ==     True",
        "num_ids": 448
    },
    {
        "number": 606,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "test": "assert     radian_degree(45) == math.pi/4",
        "num_ids": 648
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    for match in re.finditer(pattern, text):\n        print(match)\n",
        "test": "assert     find_literals('completed', 'completed test ') == ('completed ', 0, 9)",
        "num_ids": 666
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 380
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        del list1[0]\n    return list1\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], -1) == [1, 2, 3, 4, 5], 'incorrect'",
        "num_ids": 621
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list) or N < 1:\n        return 'Incorrect input!'\n    else:\n        return max([row[N-1] for row in test_list])\n",
        "test": "assert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 873
    },
    {
        "number": 612,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    out_list = []\n    for i in range(len(lst)):\n        out_list.append([lst[i][0], lst[i][1]])\n    return out_list\n",
        "test": "assert     merge([[1,2], [3,4], [5,6]]) == [[1,2], [3,4], [5,6]],'merge([[1,2], [3,4], [5,6]])'",
        "num_ids": 899
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)-1):\n        if test_list[i+1]!= test_list[i]:\n            test_list[i+1] += test_list[i]\n    return test_list\nprint(cummulative_sum([1,2,3,4,5,6,7,8,9,0]))\n",
        "test": "assert ",
        "num_ids": 281
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        average = sum(i)/len(i)\n        averages.append(average)\n",
        "test": "assert     ((5, 6, 7, 8, 9) == average_tuple(((6, 7, 8, 9, 10), (1, 2, 3, 4, 5))))",
        "num_ids": 734
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_list = []\n    for i in range(len(test_tup1)):\n        new_list.append(test_tup1[i] % test_tup2[i])\n    return tuple(new_list)\n",
        "test": "assert     (tuple_modulo((8,9), (10,11)) == (8,9)), 'Not a tuple modulo!'",
        "num_ids": 469
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d >= 0):\n        if (d == 0): \n            return 0\n        else:\n            return 1 + min(min_Jumps(steps, d-1), min_Jumps(steps, d-steps))\n    else:\n        return float('inf') \n",
        "test": "assert     min_Jumps(4, 5) == 2",
        "num_ids": 857
    },
    {
        "number": 618,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1\n    \ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] += nums2[i]\n    return nums1\n    \ndef log_list(nums1):\n    '''\n    Write a function to compute the natural logarithm of each element in a list.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = math.log(nums1[i])\n    return nums1\n    \ndef exp_list(nums1):\n    '''\n    Write a function to compute the exponential of each element in a list.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = math.exp(nums1[i])\n    return nums1\n    \ndef log_exp_list(nums1):\n    '''\n    Write a function to compute the natural logarithm of each element and then compute the exponential of each element in a list.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = math.exp(nums1[i])\n    for i in range(len(nums1)):\n        nums1[i] = math.log(nums1[i])\n    return nums1\n    \ndef cube_list(nums1):\n    '''\n    Write a function to compute the cube of each element in a list.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]**3\n    return nums1\n    \ndef poly_list(nums1,nums2):\n    '''\n    Write a function to compute the value of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]\n    return nums1\n    \ndef poly_diff(nums1,nums2):\n    '''\n    Write a function to compute the value of the first derivative of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]\n    return nums1\n    \ndef poly_integrate(nums1,nums2):\n    '''\n    Write a function to compute the value of the integral of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]\n    return nums1\n    \ndef poly_derivative(nums1,nums2):\n    '''\n    Write a function to compute the value of the derivative of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]\n    return nums1\n    \ndef compute_derivative(nums1,nums2):\n    '''\n    Write a function to compute the value of the derivative of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]\n    return nums1\n    \ndef compute_integral(nums1,nums2):\n    '''\n    Write a function to compute the value of the integral of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]\n    return nums1\n    \ndef compute_polynomial(nums1,nums2,nums3):\n    '''\n    Write a function to compute the value of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]*nums3[i]\n    return nums1\n    \ndef compute_polynomial_derivative(nums1,nums2,nums3):\n    '''\n    Write a function to compute the value of the derivative of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]*nums3[i]\n    return nums1\n    \ndef compute_polynomial_integral(nums1,nums2,nums3):\n    '''\n    Write a function to compute the value of the integral of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]*nums3[i]\n    return nums1\n    \ndef compute_polynomial_derivative_integral(nums1,nums2,nums3):\n    '''\n    Write a function to compute the value of the derivative of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]*nums3[i]\n    return nums1\n    \ndef compute_polynomial_integral_derivative(nums1,nums2,nums3):\n    '''\n    Write a function to compute the value of the derivative of a polynomial for a given value of x.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i]*nums2[i]*nums3[i]\n    return nums1\n",
        "test": "assert     div_list([0,1,2,3],[2,2,2,2]) == [0.0,0.5,1.0,1.5]",
        "num_ids": 795
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    words = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            numbers.append(test_str[i])\n        else:\n            words.append(test_str[i])\n    words.extend(numbers)\n    return ''.join(words)\n",
        "test": "assert     move_num('abc456') == 'abc456'",
        "num_ids": 2557
    },
    {
        "number": 620,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    x = list(filter(lambda n: n % 2 == 0, a))\n    y = list(filter(lambda n: n % 3 == 0, a))\n    z = list(filter(lambda n: n % 5 == 0, a))\n    if len(x) > len(a):\n        return len(x)\n    if len(y) > len(a):\n        return len(y)\n    if len(z) > len(a):\n        return len(z)\n    return len(a)\n",
        "test": "assert     largest_subset([]) == 0",
        "num_ids": 608
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        return get_median(arr2, arr1, n)\n    \n    low = 0\n    high = n\n    while True:\n        i = (low + high) // 2\n        j = (n + 1) // 2 - i\n        if i < len(arr1) and j > 0 and arr1[i] > arr2[j - 1]:\n            low = i + 1\n        elif i > 0 and j < len(arr2) and arr1[i - 1] > arr2[j]:\n            high = i - 1\n        else:\n            if i == 0:\n                return arr2[j - 1]\n            if j == 0:\n                return arr1[i - 1]\n            return max(arr1[i - 1], arr2[j - 1])\n",
        "test": "assert     get_median([2], [], 1) == 2",
        "num_ids": 1064
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "test": "assert     nth_nums([1], 2) == [1]",
        "num_ids": 448
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return False\n    elif len(string) == 1:\n        if string == \"A\" or string == \"a\":\n            return True\n        else:\n            return False\n    else:\n        if string[0] == \"A\" or string[0] == \"a\":\n            string = string[1:]\n        elif string[0] == \"B\" or string[0] == \"b\":\n            string = string[1:]\n            if len(string) == 0:\n                return False\n        elif string[0] == \"C\" or string[0] == \"c\":\n            string = string[1:]\n        elif string[0] == \"D\" or string[0] == \"d\":\n            string = string[1:]\n        elif string[0] == \"E\" or string[0] == \"e\":\n            string = string[1:]\n        elif string[0] == \"F\" or string[0] == \"f\":\n            string = string[1:]\n        elif string[0] == \"G\" or string[0] == \"g\":\n            string = string[1:]\n        elif string[0] == \"H\" or string[0] == \"h\":\n            string = string[1:]\n        elif string[0] == \"I\" or string[0] == \"i\":\n            string = string[1:]\n        elif string[0] == \"J\" or string[0] == \"j\":\n            string = string[1:]\n        elif string[0] == \"K\" or string[0] == \"k\":\n            string = string[1:]\n        elif string[0] == \"L\" or string[0] == \"l\":\n            string = string[1:]\n        elif string[0] == \"M\" or string[0] == \"m\":\n            string = string[1:]\n        elif string[0] == \"N\" or string[0] == \"n\":\n            string = string[1:]\n        elif string[0] == \"O\" or string[0] == \"o\":\n            string = string[1:]\n        elif string[0] == \"P\" or string[0] == \"p\":\n            string = string[1:]\n        elif string[0] == \"Q\" or string[0] == \"q\":\n            string = string[1:]\n        elif string[0] == \"R\" or string[0] == \"r\":\n            string = string[1:]\n        elif string[0] == \"S\" or string[0] == \"s\":\n            string = string[1:]\n        elif string[0] == \"T\" or string[0] == \"t\":\n            string = string[1:]\n        elif string[0] == \"U\" or string[0] == \"u\":\n            string = string[1:]\n        elif string[0] == \"V\" or string[0] == \"v\":\n            string = string[1:]\n        elif string[0] == \"W\" or string[0] == \"w\":\n            string = string[1:]\n        elif string[0] == \"X\" or string[0] == \"x\":\n            string = string[1:]\n        elif string[0] == \"Y\" or string[0] == \"y\":\n            string = string[1:]\n        elif string[0] == \"Z\" or string[0] == \"z\":\n            string = string[1:]\n        else:\n            return False\n        if len(string) == 0:\n            return True\n        else:\n            return is_upper(string)\n",
        "test": "assert     is_upper('string') ==    False,     \"The first letter in'string' is lowercase\"",
        "num_ids": 1203
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef reverse_List(newList):\n    '''\n    Write a Python function to reverse the order of the list.\n    '''\n    newList.reverse()\n    return newList\n",
        "test": "assert     swap_List([1,2,3,4]) == [4,2,3,1], 'incorrect output'",
        "num_ids": 658
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (2 * (r**2)) / 3.14\n    return area\ndef triange_perimeter(r) :\n    '''\n    Write a python function to find the perimeter of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    perimeter = 2 * 3.14 * r\n    return perimeter\ndef maximum_perimeter(radius) :\n    '''\n    Write a python function to find the maximum perimeter of a triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r_max = radius / ((3**0.5) / 2)\n    return triange_perimeter(r_max)\ndef maximum_area(radius) :\n    '''\n    Write a python function to find the maximum area of a triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r_max = radius / ((3**0.5) / 2)\n    return triangle_area(r_max)\ndef triangle_area_perimeter_ratio(r) :\n    '''\n    Write a python function to find the area-to-perimeter ratio of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return triangle_area(r) / triange_perimeter(r)\ndef triangle_area_perimeter_ratio_of_maximum(radius) :\n    '''\n    Write a python function to find the area-to-perimeter ratio of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r_max = radius / ((3**0.5) / 2)\n    return triangle_area_perimeter_ratio(r_max)\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 399
    },
    {
        "number": 627,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    if not end:\n        end=len(array)\n    # write your code here\n    \n    \n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return array[-1]+1\n    \ndef find_First_Missing_v2(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    \n    start=0\n    end=len(array)-1\n    \n    while start<=end:\n        mid=(start+end)//2\n        if array[mid]==mid+1:\n            start=mid+1\n        else:\n            end=mid-1\n    return start\n    \nif __name__==\"__main__\":\n    array=[1,2,3,4,5,6]\n    # print(find_First_Missing(array,0,len(array)))\n    print(find_First_Missing_v2(array))",
        "test": "assert find_First_Missing([1,3,4,5,6,7]) == 2",
        "num_ids": 1188
    },
    {
        "number": 628,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return(string.replace(\" \", \"%20\"))\n",
        "test": "assert     replace_spaces('') == ''",
        "num_ids": 542
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i%2 == 0]\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [2, 4, 6, 8, 10], \"Split function does not pass test\"",
        "num_ids": 679
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        for j in range(i, len(ele)):\n            if ele[i][0] == ele[j][0]:\n                sub.append([ele[i][0], ele[i][1]+1])\n                break\n            elif ele[i][1] == ele[j][1]:\n                sub.append([ele[i][0]+1, ele[i][1]])\n                break\n            else:\n                continue\n    return sub\n",
        "test": "assert ",
        "num_ids": 809
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if '_' in text:\n        text = text.replace('_','')\n    else:\n        text = text.replace(' ', '_')\n    return text\n",
        "test": "assert     replace_spaces('john') == 'john'",
        "num_ids": 500
    },
    {
        "number": 632,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    for i in range(count, len(num_list)):\n        num_list[i] = 0\n    return num_list\n",
        "test": "assert     move_zero([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]",
        "num_ids": 668
    },
    {
        "number": 633,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            result += arr[i]^arr[j]\n    return result\n",
        "test": "assert     pair_xor_Sum([2,2,2,2],4)==0, \"Error\"",
        "num_ids": 842
    },
    {
        "number": 635,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for val in iterable:\n        hq.heappush(h,val)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     [4, 3, 2, 1, 1] == list(reversed(sorted(list(heap_sort([1, 4, 3, 2, 1])))))",
        "num_ids": 1099
    },
    {
        "number": 637,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n",
        "test": "assert not noprofit_noloss(5,10)",
        "num_ids": 599
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(13.12 + 0.6215*v - 11.37*math.pow(t,0.16) + 0.3965*v*math.pow(t,0.16))\n",
        "test": "assert     wind_chill(2,    20) == -3",
        "num_ids": 840
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()]\n    return len(''.join(names))\n",
        "test": "assert     sample_nam([]) == 0, \"no name\"",
        "num_ids": 631
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #Regex to remove parenthesis\n    parenthesis = re.compile(r\"\\([^)]*\\)\")\n    #Remove parenthesis and what is inbetween them from items.\n    items = parenthesis.sub(\"\", items)\n    return items\n    \ndef check_email(items):\n    '''\n    Write a function to check if a string is in the format of an email.\n    '''\n    #Regex to check for email address\n    email = re.compile(r\"[a-zA-Z0-9]{1,}@{1}[a-zA-Z0-9]*\\.[a-zA-Z]{3}\")\n    #Check if items is an email address\n    result = email.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_phonenumber(items):\n    '''\n    Write a function to check if a string is in the format of a phone number.\n    '''\n    #Regex to check for phone number\n    phonenumber = re.compile(r\"\\d{3}[-]\\d{3}[-]\\d{4}\")\n    #Check if items is a phone number\n    result = phonenumber.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_date(items):\n    '''\n    Write a function to check if a string is in the format of a date.\n    '''\n    #Regex to check for date\n    date = re.compile(r\"(\\d{1,2}[-/]\\d{1,2}[-/]\\d{2,4})\")\n    #Check if items is a date\n    result = date.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_time(items):\n    '''\n    Write a function to check if a string is in the format of a time.\n    '''\n    #Regex to check for time\n    time = re.compile(r\"\\d{1,2}[:]\\d{1,2}[:]\\d{2,4}\")\n    #Check if items is a time\n    result = time.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_academic_reference(items):\n    '''\n    Write a function to check if a string is in the format of an academic reference.\n    '''\n    #Regex to check for academic reference\n    academic_reference = re.compile(r\"([a-zA-Z]*\\d{4})[:]\\d{4}[:]\\d{1,2}\")\n    #Check if items is an academic reference\n    result = academic_reference.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_slash(items):\n    '''\n    Write a function to check if a string is in the format of a slash.\n    '''\n    #Regex to check for slash\n    slash = re.compile(r\"[/]\")\n    #Check if items is a slash\n    result = slash.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_bar(items):\n    '''\n    Write a function to check if a string is in the format of a bar.\n    '''\n    #Regex to check for bar\n    bar = re.compile(r\"[|]\")\n    #Check if items is a bar\n    result = bar.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_comma(items):\n    '''\n    Write a function to check if a string is in the format of a comma.\n    '''\n    #Regex to check for comma\n    comma = re.compile(r\"[,]\")\n    #Check if items is a comma\n    result = comma.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_space(items):\n    '''\n    Write a function to check if a string is in the format of a space.\n    '''\n    #Regex to check for space\n    space = re.compile(r\"\\s\")\n    #Check if items is a space\n    result = space.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_mixed(items):\n    '''\n    Write a function to check if a string is in the format of a mixed case word.\n    '''\n    #Regex to check for space\n    mixed = re.compile(r\"[A-Z][a-z]+\\s[A-Z][a-z]+\")\n    #Check if items is a space\n    result = mixed.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_pipe(items):\n    '''\n    Write a function to check if a string is in the format of a pipe.\n    '''\n    #Regex to check for pipe\n    pipe = re.compile(r\"[|]\")\n    #Check if items is a pipe\n    result = pipe.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_hashtag(items):\n    '''\n    Write a function to check if a string is in the format of a hashtag.\n    '''\n    #Regex to check for hashtag\n    hashtag = re.compile(r\"#\\S+\")\n    #Check if items is a hashtag\n    result = hashtag.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_backslash(items):\n    '''\n    Write a function to check if a string is in the format of a backslash.\n    '''\n    #Regex to check for backslash\n    backslash = re.compile(r\"[\\\\]\")\n    #Check if items is a backslash\n    result = backslash.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_dollar(items):\n    '''\n    Write a function to check if a string is in the format of a dollar.\n    '''\n    #Regex to check for dollar\n    dollar = re.compile(r\"[$]\")\n    #Check if items is a dollar\n    result = dollar.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_asterisk(items):\n    '''\n    Write a function to check if a string is in the format of an asterisk.\n    '''\n    #Regex to check for asterisk\n    asterisk = re.compile(r\"[*]\")\n    #Check if items is an asterisk\n    result = asterisk.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_question(items):\n    '''\n    Write a function to check if a string is in the format of a question mark.\n    '''\n    #Regex to check for question\n    question = re.compile(r\"\\?\")\n    #Check if items is a question mark\n    result = question.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_exclamation(items):\n    '''\n    Write a function to check if a string is in the format of an exclamation mark.\n    '''\n    #Regex to check for exclamation\n    exclamation = re.compile(r\"\\!\")\n    #Check if items is an exclamation mark\n    result = exclamation.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_semicolon(items):\n    '''\n    Write a function to check if a string is in the format of a semicolon.\n    '''\n    #Regex to check for semicolon\n    semicolon = re.compile(r\";\")\n    #Check if items is a semicolon\n    result = semicolon.search(items)\n    if result!= None:\n        return True\n    return False\n    \ndef check_percent(items):\n    '''\n    Write a function to check if a string is in the format of a percent.\n    '''\n    #Regex to check for percent\n    percent = r",
        "test": "assert     remove_parenthesis(\"Hello there\") == \"Hello there\"",
        "num_ids": 711
    },
    {
        "number": 641,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    t = (2*n)-1\n    return t * t\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 409
    },
    {
        "number": 643,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text_split = text.split()\n    for words in text_split:\n        if words[0] == 'z' and words[-1] == 'z':\n            continue\n        elif words[0] == 'z' or words[-1] == 'z':\n            return False\n    return True\n",
        "test": "assert     text_match_wordz_middle('t1exz') == False, 'failed for \"t1exz\"'",
        "num_ids": 789
    },
    {
        "number": 644,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5], 'Failed!'",
        "num_ids": 916
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('apple',), {'qty': 5, 'price': 5.4}) == ('apple', {'qty': 5, 'price': 5.4})",
        "num_ids": 1119
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def isvalid(arr,row,col,n):\n        if row<0 or col<0 or row>=n or col>=n:\n            return False\n        return True\n",
        "test": "assert     maxAverageOfPath([[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20],[21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40],[41,42,43,44,45,46,47,48,49,50],[51,52,53,54,55,56,57,58,59,60],[61,62,63,64,65,66,67,68,69,70],[71,72,73,74,75,76,77,78,79,80],[81,82,83,84,85,86,87,88,89,90],[91,92,93,94,95,96,97,98,99,100]]) == 100",
        "num_ids": 1192
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students.keys():\n        if students[student][0] >= h and students[student][1] >= w:\n            filtered_students[student] = students[student]\n    return filtered_students\n",
        "test": "assert     filter_data({'Alice':(170, 60)}, 160, 170) == {'Alice':(170, 60)}",
        "num_ids": 563
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1, 2, 3, 4, 5], [6, 6, 6, 6, 6]) == 0",
        "num_ids": 806
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(x) for x in str(base**power)])\n",
        "test": "assert     power_base_sum(2, 1) == 2",
        "num_ids": 367
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    pattern = re.compile(\"\\\"[A-Za-z\\s0-9\\,]*\\\"\")\n    match = pattern.finditer(text)\n    for m in match:\n        match_string = m.group()\n        print(match_string)\n",
        "test": "assert     extract_quotation('''This is an example. Lets see if this works.",
        "num_ids": 932
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t1 = int(input(\"Enter the first number:\"))\n    t2 = int(input(\"Enter the second number:\"))\n    t3 = int(input(\"Enter the third number:\"))\n    t4 = int(input(\"Enter the fourth number:\"))\n    t5 = int(input(\"Enter the fifth number:\"))\n    t6 = int(input(\"Enter the sixth number:\"))\n    t7 = int(input(\"Enter the seventh number:\"))\n    t8 = int(input(\"Enter the eighth number:\"))\n    t9 = int(input(\"Enter the ninth number:\"))\n    t10 = int(input(\"Enter the tenth number:\"))\n    test_tup = (t1,t2,t3,t4,t5,t6,t7,t8,t9,t10)\n    print(\"Tuple input:\",test_tup)\n    print(\"Result:\")\n    result_tup = ()\n    for i in range(len(test_tup)):\n        result_tup = result_tup + ((test_tup[i],)*(i+1))\n    print(\"Result tuple:\",result_tup)\n",
        "test": "assert     (multiply_elements((5,2,3)) == (10, 4, 6))",
        "num_ids": 885
    },
    {
        "number": 728,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(x) for x in zip(lst1,lst2)]\n",
        "test": "assert     (sum_list([1,2,3],[4,5,6]) == [5,7,9])",
        "num_ids": 706
    },
    {
        "number": 730,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    return [item for item, group in groupby(nums)]\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 1195
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1.0/3.0)*math.pi*(r**2)*h\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1.0/3.0)*math.pi*(r**2)*h\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    return l*b\ndef lateral_surface_rect(l,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given length l and the width b.\n    '''\n    retur",
        "test": "assert     lateralsurface_cone(2,0) == 0, 'failed'",
        "num_ids": 391
    },
    {
        "number": 732,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s|,|\\.', \":\", text)\n",
        "test": "assert     replace_specialchar('hello world') == 'hello:world'",
        "num_ids": 615
    },
    {
        "number": 733,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # # for first index\n    # low = 0\n    # # for last index\n    # high = len(A)-1\n    # # binary search\n    # while low <= high:\n    #     mid = (low + high) // 2\n    #     if x > A[mid]:\n    #         low = mid + 1\n    #     elif x < A[mid]:\n    #         high = mid - 1\n    #     else:\n    #         return mid\n    # return -1\n    # 2nd solution\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 2, 3, 3, 3, 4], 3) == 2",
        "num_ids": 904
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def all_sum(arr,n,k):\n        l = len(arr)\n        if k > n or k == 0:\n            return 0\n        if k == 1:\n            return sum(arr)\n        if k == 2:\n            return sum([x*x for x in arr])\n        return sum([all_sum(arr[i+1:],n-i-1,k-1) for i in range(n)])\n    return all_sum(arr,len(arr),len(arr))\n",
        "test": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8]) == 28064",
        "num_ids": 1128
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set all bits of num \n    # using set_bit() \n    # Set all bits of num \n    # using set_bit() \n    # Set all bits of num \n    # using set_bit() \n    # Set all bits of num \n    # using set_bit() \n    # Set all bits of num \n    # using set_bit() \n    return n ^ (n >> 1)\n",
        "test": "assert     set_middle_bits(0) == 0",
        "num_ids": 512
    },
    {
        "number": 736,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    length = len(a)\n    left = 0\n    right = length-1\n    while(left<=right):\n        mid = (left+right)//2\n        if x>a[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n",
        "test": "assert     left_insertion([1, 3, 5, 7], 0) == 0, \"Wrong answer\"",
        "num_ids": 791
    },
    {
        "number": 737,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)): \n        return True\n    else: \n        return False \n        \n",
        "test": "assert     check_str(\"string\") == False, \"This is a string!\"",
        "num_ids": 514
    },
    {
        "number": 738,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n * geometric_sum(n - 1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 396
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest_number = int(1e10)\n    for i in range(1,n+1):\n        # tri = int(i*(i+1)/2)\n        tri = int(0.5*i*(i+1)*(i+2))\n        if (smallest_number > tri):\n            smallest_number = tri\n            idx = i\n    return idx\n    # return smallest_number\n",
        "test": "assert     find_Index(2) ==     1,     'Incorrect'",
        "num_ids": 605
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]:test_tup[i+1] for i in range(0,len(test_tup),2)}\n",
        "test": "assert ",
        "num_ids": 499
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(list(s))) == 1\n",
        "test": "assert     all_Characters_Same('aaaaaaaaaa@') == False",
        "num_ids": 2389
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2) * (3 ** (1 / 2)) / 4\n",
        "test": "assert     round(area_tetrahedron(8),4) == 64.44",
        "num_ids": 921
    },
    {
        "number": 743,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction.\n    '''\n    return list[len(list) - m:] + list[:len(list) - m]\n",
        "test": "assert     rotate_right([1,2,3,4,5], 2) == [3,4,5,1,2], \"rotate_right: incorrect output for [1,2,3,4,5] 2\"",
        "num_ids": 467
    },
    {
        "number": 744,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for t in test_tup:\n        if t is None:\n            return True\n    return False\n",
        "test": "assert     check_none((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == False",
        "num_ids": 461
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = []\n    for i in range(startnum, endnum+1):\n        if True in [i%x==0 for x in map(int, str(i))]:\n            lst.append(i)\n    return(lst)\n",
        "test": "assert ",
        "num_ids": 583
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return 3.14*r*r*(1-(math.cos((a*3.14)/180)))\n    else:\n        return None\n",
        "test": "assert     sector_area(3, 360) == None,     \"Error in sector_area\"",
        "num_ids": 413
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z)\n    L = [[[0 for k in range(l+1)] for j in range(n+1)] for i in range(m+1)] \n    # print(L)\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n    print(L[m][n][l])\n",
        "test": "assert ",
        "num_ids": 1238
    },
    {
        "number": 748,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])([A-Z])',r' \\1',str1)\n    # return re.sub(r'(?<=[a-z])([A-Z])',r' \\1',str1)\n",
        "test": "assert     capital_words_spaces('') == ''",
        "num_ids": 722
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(i) for i in nums_str]\n    nums.sort()\n    nums_str = [str(i) for i in nums]\n    return nums_str\n",
        "test": "assert ",
        "num_ids": 264
    },
    {
        "number": 750,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1,2,3],(1,2,3)) == [1,2,3,(1,2,3)]",
        "num_ids": 660
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr)//2:\n        return True\n    if arr[i] > arr[2*i+1] or arr[i] > arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n",
        "test": "assert     check_min_heap_helper([4, 6, 3, 2, 1, 5], 1) == False",
        "num_ids": 795
    },
    {
        "number": 752,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "test": "assert     jacobsthal_num(2) == 1,     \"jacobsthal_num(2) is not correct\"",
        "num_ids": 668
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return 'Too short'\n    else:\n        return sorted(test_list, key=lambda x: x[0])[:K]\n",
        "test": "assert     min_k([(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1)], 1) == [(1, 1)]",
        "num_ids": 637
    },
    {
        "number": 754,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1) & set(l2) & set(l3))\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 1254
    },
    {
        "number": 755,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_list = sorted(numbers)\n    return sorted_list[1]\n",
        "test": "assert     second_smallest([5, 5, 5]) == 5",
        "num_ids": 2582
    },
    {
        "number": 756,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search('a[a-z]+b',text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('a') == False, \"Incorrect output for trivial case\"",
        "num_ids": 2514
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    size = len(test_list)\n    count = 0\n    for i in range(0, size):\n        for j in range(i + 1, size):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count = count + 1\n    return count\n",
        "test": "assert     count_reverse_pairs(['who', 'what', 'why']) == 0",
        "num_ids": 913
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # list1 = [[1, 2, 3], [4, 5, 6], [1, 2, 3]]\n    res = {}\n    for elem in list1:\n        tup = tuple(elem)\n        if tup not in res:\n            res[tup] = 1\n        else:\n            res[tup] += 1\n    return res\n",
        "test": "assert     unique_sublists([[1,2,3],[1,2,3],[1,2,3]]) == {(1,2,3):3}",
        "num_ids": 1133
    },
    {
        "number": 759,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     not is_decimal(\"-1.01d\")",
        "num_ids": 424
    },
    {
        "number": 760,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    x = np.array(arr)\n    if len(np.unique(x))==1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element([1,1,2,3,3,4,4,5,5,5]) == False",
        "num_ids": 559
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30_days = [4,6,9,11]\n    if monthnum3 in month_30_days:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(3)==False, 'check_monthnumber_number(3)'",
        "num_ids": 390
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    res = arr[n-1] - arr[0] \n    for i in range(1,n): \n        res = min(res, arr[i] - arr[i-1]) \n    return res \n",
        "test": "assert     find_min_diff([1, 5, 3, 4], 3) == 1",
        "num_ids": 879
    },
    {
        "number": 764,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"12345\") == 5",
        "num_ids": 420
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #Start writing your code here\n    #Populate the variables: a, b and k\n    #TODO\n    a = 1\n    b = 2\n    k = 1\n    if(n < 2):\n        return 1\n    else:\n        while(b <= n):\n            if(b%2 == 0):\n                k = k * b\n            a = a * b\n            b = b + 1\n        return a * k\n        \n",
        "test": "assert     (is_polite(1) == 1)",
        "num_ids": 708
    },
    {
        "number": 766,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_l = []\n    for i in range(len(l1) - 1):\n        pair_l.append((l1[i], l1[i + 1]))\n    return pair_l\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 455
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    # TODO: Write the code to find the number of pairs that sum to'sum'\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i < j and (arr[i] + arr[j]) == sum:\n                count += 1\n    return count\n    pass\n",
        "test": "assert     get_pairs_count([1,2,3,4,5,6,7,8,9], 42) == 0",
        "num_ids": 2598
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i in li1 and i not in li2]\n    return li_dif\n",
        "test": "assert     Diff([], []) == []",
        "num_ids": 280
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return sum([int(i**4) for i in range(1,n+1) if int(i)%2!= 0])\n    \ndef odd_num_sum_2(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    def recur(n) : \n        if n == 0 :\n            return 0\n        else :\n            return n + recur(n-1)\n    \n    return recur(n)\n    \n",
        "test": "assert     odd_num_sum(1)     ==     1",
        "num_ids": 591
    },
    {
        "number": 771,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brac = ['(', '{', '[']\n    close_brac = [')', '}', ']']\n    for i in range(len(exp)):\n        if exp[i] in open_brac:\n            stack.append(exp[i])\n        elif exp[i] in close_brac:\n            if len(stack) == 0:\n                return False\n            if open_brac.index(stack.pop())!= close_brac.index(exp[i]):\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n",
        "test": "assert     check_expression('(a+b)*(c+d)') == True",
        "num_ids": 799
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    temp = 0\n    ans = ''\n    for i in test_str:\n        if i!='':\n            ans += i\n        else:\n            temp = 0\n        if temp == K:\n            temp = 0\n            ans = ans[:-1]\n            ans +=''\n        else:\n            temp += 1\n    return ans[:-1]\n",
        "test": "assert remove_length(\"The quick brown fox jumps over the lazy dog.\", 0) == \"\"",
        "num_ids": 538
    },
    {
        "number": 773,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match!= None:\n        print(match.group())\n        print(match.start())\n        print(match.end())\n    else:\n        return None\n",
        "test": "assert     occurance_substring('abc', 'z') == None, 'the match of non-existent substrings'",
        "num_ids": 2617
    },
    {
        "number": 775,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i+1) % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1,2,3,4,5,6,7,8,10]) == False",
        "num_ids": 716
    },
    {
        "number": 776,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    num = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiouAEIOU':\n            if ((i>0 and test_str[i-1] in 'aeiouAEIOU') or (i<len(test_str)-1 and test_str[i+1] in 'aeiouAEIOU')):\n                num+=1\n            else:\n                num+=0\n    return num\n",
        "test": "assert     count_vowels('aab') == 2",
        "num_ids": 663
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if not arr: \n        return 0\n    sum = 0\n    seen = set()\n    for num in arr: \n        if num not in seen: \n            sum += num \n            seen.add(num)\n    return sum \n",
        "test": "assert     find_sum([1,2,3,4,5,6,1]) == 21",
        "num_ids": 490
    },
    {
        "number": 778,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n        else:\n            list3.append(list2)\n            list2 = [i]\n    if list2:\n        list3.append(list2)\n    return list3\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 2769
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n",
        "test": "assert     unique_sublists([[1, 2], 3, [3], [1, 2], 1, 2, [2], 4, [2], [2], [4, 5], [3]]) == {(1, 2): 2, (2,): 4, (3,): 1, (4, 5): 1, (5,): 1}",
        "num_ids": 1021
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    l = len(test_list)\n    n = l + 1\n    combinations_list = []\n    for i in range(0, n):\n        for c in combinations(test_list, i):\n            if sum(c) == 0:\n                combinations_list.append(c)\n    return combinations_list\n",
        "test": "assert     find_combinations([(1, 2), (3, 4), (5, 6, 7, 8)]) ==     [(3, 4, 5, 6), (5, 6, 7, 8)]",
        "num_ids": 3386
    },
    {
        "number": 781,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,(int)(math.sqrt(n))+1):\n        if (n % i == 0):\n            if (n/i == i):\n                count = count + 1\n            else:\n                count = count + 2\n    return count \n",
        "test": "assert     count_divisors(0) == 0",
        "num_ids": 559
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    start = 0\n    end = 1\n    length = len(arr)\n    sum = 0\n    # num_of_odds = 0\n    while(start<length and end<length):\n        # print(arr[start:end])\n        # print(arr[start:end+1])\n        # print(arr[start:end+2])\n        if len(arr[start:end+1]) % 2!= 0:\n            sum+= sum(arr[start:end+1])\n            # num_of_odds += 1\n        start += 1\n        end += 1\n    # print(num_of_odds)\n    # return sum\n    return sum\n",
        "test": "assert     odd_length_sum([1,2,3,4,5,6,7,8,9]) ==     0",
        "num_ids": 824
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0), 'test 1'",
        "num_ids": 814
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    mul_odd=1\n    mul_even=1\n    for i in list1:\n        if list1.index(i)%2==0:\n            mul_odd*=i\n        else:\n            mul_even*=i\n    return [mul_odd,mul_even]\n",
        "test": "assert ",
        "num_ids": 706
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_list = test_str.split(',')\n    new_list = [int(i) for i in new_list]\n    return tuple(new_list)\n",
        "test": "assert ",
        "num_ids": 484
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the proper index so that when a[i] > x, a[:i+1] is sorted.\n    i = bisect.bisect_right(a, x)\n    print(i)\n    # Return the proper index so that when a[i] > x, a[:i+1] is sorted.\n    return i\n    \n    ",
        "test": "assert     right_insertion([], 5) == 0",
        "num_ids": 554
    },
    {
        "number": 787,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_b = re.search(r'ab{3}', text)\n    if match_b:\n        print(match_b.group(0))\n        return True\n    else:\n        print('Not found')\n        return False\n",
        "test": "assert     text_match_three('azcbobobegg')                 == False, 'wrong result'",
        "num_ids": 642
    },
    {
        "number": 788,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = tuple(test_list)\n    new_tup = (tup, test_str)\n    return new_tup\n",
        "test": "assert     new_tuple(['1', '2', '3'], \"('1', '2', '3')\")",
        "num_ids": 752
    },
    {
        "number": 790,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     even_position([1, 2, 3, 4, 5, 6, 7, 8]) == False, \"all even indexes have even number\"",
        "num_ids": 771
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            result.append(tup)\n        else:\n            result.extend(remove_nested(tup))\n    return result\n",
        "test": "assert     remove_nested(((1, 2), (2, 3), (1, 2), (4, 5))) ",
        "num_ids": 614
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if type(i)==list: \n            count += 1\n    return count\n",
        "test": "assert     count_list([[1, 2, 3], [1, 2, 3]]) == 2",
        "num_ids": 520
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i > -1:\n        if arr[i] == x:\n            return i\n        i-=1\n    return -1\n",
        "test": "assert     last([1, 2, 2, 3, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7], 1) == 0",
        "num_ids": 671
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.b$'\n    if re.search(pattern, text):\n        return 'found'\n    else:\n        return 'not found'\n",
        "test": "assert not re.match(text_starta_endb('applepie'), 'apple')",
        "num_ids": 664
    },
    {
        "number": 796,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    #add all items in dictionary to a variable\n    sum_of_items = 0\n    for i in dict.values():\n        sum_of_items += i\n    return sum_of_items\n    ",
        "test": "assert     return_sum({1:2,3:4,5:6}) == 12, \"Wrong answer: return_sum({1:2,3:4,5:6}) == 12\"",
        "num_ids": 522
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(n) if i%2!= 0])\n",
        "test": "assert     sum_odd(10) == 25",
        "num_ids": 220
    },
    {
        "number": 798,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1,2,3]) == 6",
        "num_ids": 235
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32-d)))&0xffffffff\n",
        "test": "assert     left_rotate(0x55555555, 1) == 0xaaaaaaaa",
        "num_ids": 461
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\n",
        "test": "assert     remove_all_spaces('  ') == ''",
        "num_ids": 493
    },
    {
        "number": 801,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    def countEqual(a, b, c):\n        count = 0\n        if (a == b):\n            count += 1\n        if (a == c):\n            count += 1\n        if (b == c):\n            count += 1\n        return count\n    return countEqual(x,y,z)\n",
        "test": "assert     test_three_equal(1,2,3) == 0",
        "num_ids": 468
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotation = 0\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = start + (end-start)//2\n        if arr[mid] > arr[end]:\n            start = mid+1\n        else:\n            end = mid-1\n        rotation += 1\n",
        "test": "assert     count_rotation([1,2,3,4,5,6]) == 2",
        "num_ids": 1274
    },
    {
        "number": 803,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<0:\n        return False\n    i=1\n    while (i*i<=n):\n        if i*i==n:\n            return True\n        i=i+1\n    return False\n",
        "test": "assert     is_perfect_square(2) == False",
        "num_ids": 534
    },
    {
        "number": 804,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    arr = list(filter(lambda x: x > 0, arr))\n    return sum(arr) % 2 == 0\n",
        "test": "assert     is_product_even([2, 1, 7, 4]) == True",
        "num_ids": 596
    },
    {
        "number": 805,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    maximum = 0\n    max_list = []\n    for list in lists:\n        if sum(list) > maximum:\n            max_list = list\n            maximum = sum(list)\n    return max_list\n",
        "test": "assert     max_sum_list([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [13, 14, 15, 16]",
        "num_ids": 1285
    },
    {
        "number": 806,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return len(max(test_str.split('\\n'), key=len))\n",
        "test": "assert     max_run_uppercase('') == 0, 'Empty string'",
        "num_ids": 919
    },
    {
        "number": 807,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return False\n",
        "test": "assert     first_odd([2, 4, 6, 8, 10, 3]) == 3, 'incorrect'",
        "num_ids": 671
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n        \n        \n        \ndef loop_K(start, end):\n    '''\n    Write a function to return all the possible K's in the range(start,end).\n    '''\n    list_K = []\n    for i in range(start, end+1):\n        list_K.append(i)\n    return list_K\n",
        "test": "assert     check_K(((1,0,2),(3,4,5)), 3) == False",
        "num_ids": 611
    },
    {
        "number": 809,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    print('\\n\\n')\n    if len(test_tup1) == len(test_tup2):\n        print('Check smaller')\n        for i in range(len(test_tup1)):\n            if test_tup2[i] < test_tup1[i]:\n                print(test_tup2[i], \" is smaller than \", test_tup1[i])\n            elif test_tup2[i] > test_tup1[i]:\n                print(test_tup1[i], \" is smaller than \", test_tup2[i])\n        return True\n    else:\n        print(\"Tuples are not the same length\")\n        return False\n",
        "test": "assert     check_smaller((1, 2, 3), (1, 2, 3)) == True",
        "num_ids": 607
    }
]