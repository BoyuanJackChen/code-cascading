[
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1).intersection(set(test_tup2)))\n    \ndef union_of_lists(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of two lists.\n    '''\n    return list(set(test_tup1).union(set(test_tup2)))\n",
        "test": "assert     similar_elements([1,2,3], [3,4,5]) == [3], 'incorrect output'",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(2) == False",
        "num_ids": 1041,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # if n < 1:\n    #     return []\n    # if n > len(nums):\n    #     return nums\n    # return heapq.nlargest(n, nums)\n    result = []\n    if len(nums) == 0:\n        return result\n    for i in range(n):\n        result.append(max(nums))\n        nums.remove(max(nums))\n    return result\n",
        "test": "assert     (sorted(heap_queue_largest([2, 1, 3, 4, 6, 5], 2)) == [5, 6])",
        "num_ids": 1418,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if ((x & (x - 1)) == 0): \n        return True\n    else: \n        return False\n",
        "test": "assert     is_Power_Of_Two(3) == False ",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find_long = []\n    for x in text.split():\n        if len(x) >= 4:\n            find_long.append(x)\n    return find_long\n",
        "test": "assert     find_char_long('dog') == []",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda num: num**2, nums))\n",
        "test": "assert     [1, 4, 9, 16] == square_nums([1, 2, 3, 4])",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(0, n):\n        if str[i:] + str[:i] == str:\n            return i\n    return 0\n",
        "test": "assert     find_Rotations('a') == 0",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch, \"\")\n    s=s.replace(ch, \"\")\n    return s\ns='geeksforgeeks'\nch='e'\nprint(remove_Occ(s,ch))\n",
        "test": "assert     remove_Occ('Python', 'P') == 'ython'",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = sum)\n",
        "test": "assert     sort_matrix(    [[]])     == [[]]",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * b * h\n",
        "test": "assert     find_Volume(4,4,6)!= 37",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # return bool(re.findall(r'[a-z]+_[a-z]', text, flags=re.IGNORECASE))\n    return bool(re.search(r'_[a-z]+_', text, flags=re.IGNORECASE))\n",
        "test": "assert     text_lowercase_underscore(\"Halo\") == False",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a) == int:\n        return a * 4\n    return 0\n    \ndef first_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the first number in the array.\n    '''\n    if type(n) == list:\n        return n[0]\n    return 0\n    \ndef last_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the last number in the array.\n    '''\n    if type(n) == list:\n        return n[-1]\n    return 0\n    \ndef average_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the average of all the numbers in the array.\n    '''\n    if type(n) == list:\n        return sum(n) / len(n)\n    return 0\n    \ndef positive_numbers(n):\n    '''\n    Write a function that returns all positive numbers from an array of numbers.\n    '''\n    if type(n) == list:\n        return [x for x in n if x >= 0]\n    return []\n    \ndef only_positive_numbers(n):\n    '''\n    Write a function that returns an array of all positive numbers with 1.\n    '''\n    if type(n) == list:\n        return [x + 1 for x in n if x >= 0]\n    return []\n    \ndef numbers_greater_than(n):\n    '''\n    Write a function that takes in an array of numbers and returns all numbers from the array that are greater than a specified number.\n    '''\n    if type(n) == list:\n        return [x for x in n if x > 5]\n    return []\n    \ndef numbers_greater_than_or_equal_to(n):\n    '''\n    Write a function that takes in an array of numbers and returns all numbers from the array that are greater than or equal to a specified number.\n    '''\n    if type(n) == list:\n        return [x for x in n if x >= 5]\n    return []\n    \ndef largest_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the largest number in the array.\n    '''\n    if type(n) == list:\n        return max(n)\n    return 0\n    \ndef smallest_number(n):\n    '''\n    Write a function that takes in an array of numbers and returns the smallest number in the array.\n    '''\n    if type(n) == list:\n        return min(n)\n    return 0\n    \ndef reverse_list(n):\n    '''\n    Write a function that takes in an array of numbers and returns the reverse of the array.\n    '''\n    if type(n) == list:\n        return n[::-1]\n    return []\n    \ndef reverse_list_in_place(n):\n    '''\n    Write a function that takes in an array of numbers and returns the reverse of the array in place.\n    '''\n    if type(n) == list:\n        n.reverse()\n        return n\n    return []\n    \ndef reverse_list_recursive(n):\n    '''\n    Write a function that takes in an array of numbers and returns the reverse of the array (recursively).\n    '''\n    if type(n) == list:\n        if n == []:\n            return []\n        return reverse_list_recursive(n[1:]) + [n[0]]\n    return []\n",
        "test": "assert     square_perimeter(3) == 12",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    string_list = [ord(x) for x in string]\n    new_string_list = []\n    for index, value in enumerate(string_list):\n        if value not in new_string_list:\n            new_string_list.append(value)\n    new_string_list = [chr(x) for x in new_string_list]\n    new_string = ''.join(new_string_list)\n    return new_string\n",
        "test": "assert     str_to_list('') == '' ",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "test": "assert     test_duplicate([]) == False",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [0, 1, 2]:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(8) == False, \"Error in is_woodall\"",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s = str(num)\n    n = len(s)\n    rev = int(s[::-1])\n    if num == (2 * rev) - num:\n        return True\n    return False\n",
        "test": "assert     rev(12) == False",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) < 1 :\n        return\n    if len(arr) == 1:\n        return int(max(arr))\n    return max(arr)\n    \ndef check_permutation_using_Sort(a,b):\n    if len(a)!= len(b) :\n        return False\n    \n    if sorted(a) == sorted(b) :\n        return True\n    return False\n",
        "test": "assert (find_Max_Num([]) == None)",
        "num_ids": 3206,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0): \n        return True\n    else: \n        return False\n",
        "test": "assert     opposite_Signs(1,0) == False",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # list of octagonal numbers.\n    octagonal_number = []\n    # first octagonal number is 1.\n    octagonal_number.append(1)\n    # for each index, multiply the previous number by 8 and add 1.\n    for i in range(1, n):\n        octagonal_number.append(octagonal_number[i-1]*8+1)\n    # return the nth octagonal number.\n    return octagonal_number[n-1]",
        "test": "assert     is_octagonal(1) == 1, 1",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    m = len(s)\n    #dp[i][j] represents the number of substrings from index i to j\n    dp = [[0 for j in range(m)] for i in range(n)]\n    #base case\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if i == j:\n                dp[i][j] = 1\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = dp[i+1][j]\n    #print(dp)\n    return dp[0][-1]\n",
        "test": "assert     count_Substrings('abcb')          ==     3",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest == None:\n            smallest = x\n        elif x < smallest:\n            smallest = x\n    return smallest\n",
        "test": "assert     smallest_num([3, 5, 8, 7, 6]) == 3",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # variable to store the difference\n    diff = 0\n    # iterate over the list\n    for index in range(len(test_list)):\n        for index_2 in range(index + 1, len(test_list)):\n            if abs(test_list[index] - test_list[index_2]) > diff:\n                diff = abs(test_list[index] - test_list[index_2])\n",
        "test": "assert     max_difference(((1, 2), (3, 4), (5, 6))) == 4",
        "num_ids": 1466,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l=list(subjectmarks)\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i][1]>l[j][1]:\n                l[i],l[j]=l[j],l[i]\n    return l\n    \n",
        "test": "assert     subject_marks([(1, 1), (2, 1), (3, 1)]) == [1, 1, 1], 'incorrect'",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        total = 0\n        for i in data_list:\n            total += recursive_list_sum(i)\n        return total\n    else:\n        return data_list\n",
        "test": "assert     recursive_list_sum([1]) == 1, 'A list with one element should return that element'",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "test": "assert     pos_count([]) == 0, \"empty list\"",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1]\n    if n >= 1:\n        bell_numbers.append(1)\n    for i in range(2,n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\nA = [6, 5, 4, 4] \nprint(is_Monotonic(A)) \n",
        "test": "assert     is_Monotonic([1,2,2,3]) == True",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if len(s) > len(l):\n        return False\n    if l == s:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i] == s[0]:\n            check = True\n            for j in range(len(s)):\n                if l[i+j]!= s[j]:\n                    check = False\n                    break\n            if check:\n                return True\n    return False\n",
        "test": "assert not is_sublist([1], [2])",
        "num_ids": 3234,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return True\n    elif len(Input[0])!= len(Input[1]):\n        return False\n    else:\n        if len(Input) == 2:\n            return True\n        else:\n            return (find_equal_tuple(Input[1:]) and find_equal_tuple([Input[0]] + Input[2:]))\n",
        "test": "assert     find_equal_tuple([(1,2),(1,2,3),(1,2,3,4,5,6,7,8,9)]) == False",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # for i in range(len(nums)):\n    #     for j in range(i+1, len(nums)):\n    #         if nums[i] > nums[j]:\n    #             nums[i], nums[j] = nums[j], nums[i]\n    # return nums\n",
        "test": "assert     comb_sort([4,8,2,7,6,3,5]) == [2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i*i + j*j == n:\n                return True\n    return False\n",
        "test": "assert     dif_Square(42) == False",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color not in patterns:\n            return False\n    return True\n    \n    \ndef is_samecolors(colors):\n    '''\n    Write a function to check whether it follows the sequence given in the colors array.\n    '''\n    for color in colors:\n        if color in patterns:\n            return False\n    return True\n    \n    \ndef check_colors_patterns(colors, patterns):\n    if is_samecolors(colors) and is_samepatterns(colors, patterns):\n        return True\n    return False\n",
        "test": "assert     is_samepatterns(['red', 'green','red','red'], ['G', 'G', 'R', 'R']) == False",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for elem in test_list:\n        if all(x%K for x in elem):\n            res.append(elem)\n    return res\n",
        "test": "assert     find_tuples([(1,2), (3,4), (5,6)], 2)     == [ ]",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "test": "assert     is_Diff(11) == True, \"Should be True\"",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "test": "assert     word_len(\"pizza\") == True",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [1]\n    for x in range(1, n):\n        tetrahedral_numbers.append(tetrahedral_numbers[x-1] + x + 1)\n    return tetrahedral_numbers[n-1]\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n",
        "test": "assert     volume_sphere(2) == 4.18879020479e-16",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(sum([ord(c) for c in strr]))\n",
        "test": "assert     get_Char('a') == 'a', 'get_Char(\u2018a\u2019)!= \u2018a\u2019. Exception: If this assertion fails, the error should be in get_Char(\u2018a\u2019) '",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 2478,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n",
        "test": "assert     surfacearea_sphere(2) == 50.26548245743669",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def f(n):\n        return (n**2 + n) // 2\n    return f(n)\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # return dict(dict1,**dict2,**dict3) #wrong return\n    return {**dict1, **dict2, **dict3} # right return\n",
        "test": "assert     {'a': 1, 'b': 2, 'c': 3, 'd': 1, 'e': 2, 'f': 3, 'g': 3, 'h': 1, 'i': 1, 'j': 3, 'k': 2, 'l': 1,'m': 2, 'n': 1, 'o': 1} == merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 1, 'e': 2, 'f': 3}, {'g': 3, 'h': 1, 'i': 1, 'j': 3, 'k': 2, 'l': 1,'m': 2, 'n': 1, 'o': 1})",
        "num_ids": 1954,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # TODO: Implement function\n    if len(list1) == 0:\n        return {}\n    \n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] not in dict1:\n            dict1[list1[i]] = 1\n        else:\n            dict1[list1[i]] += 1\n    return dict1\n",
        "test": "assert     freq_count(['a','a','a','b','b','b']) == {'a':3, 'b':3}",
        "num_ids": 1470,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    a = N - 1\n    b = N + 1\n    min_diff = abs(a - N)\n    min_num = a\n    while b <= N*2:\n        if abs(N - b) < min_diff:\n            min_diff = abs(N - b)\n            min_num = b\n        b += 1\n    return min_num\n",
        "test": "assert     closest_num(100) == 99",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "test": "assert len_log(['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']) == 5, 'Not right'",
        "num_ids": 1573,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)-len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring('abcd','a') == True",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count = count + 1\n    if count == 1:\n        return True\n    return False\n",
        "test": "assert     is_undulating(13) == True",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    elif b%2 == 0:\n        return power(a,b//2) * power(a,b//2)\n    elif b%2 == 1:\n        return power(a,b//2) * power(a,b//2) * a\n",
        "test": "assert     power(2,3) == 8, \"Power failed!\"",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert     index_minimum([(1, 2), (3, 4), (0, 1)]) == 0",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < length:\n            length = len(sublist)\n    return length\n",
        "test": "assert Find_Min_Length([[5, 6], [7, 8, 9]]) == 2",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     divisor(0) == False ",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq\n",
        "test": "assert     frequency_lists([1,2,3,4,5,6,7]) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1}",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total*num\n    total = total/len(numbers)\n    return total\n",
        "test": "assert     multiply_num([0, 2, 3]) == 0",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "test": "assert     decimal_to_binary(100) == \"1100100\"",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # if the number is a palindrome, return itself\n    if num == int(str(num)[::-1]):\n        return num\n    # initialize the number of digits, the loop variable, and the list of digits\n    num_digits = len(str(num))\n    i = 0\n    digits = []\n    # for each digit in the number, add it to the list of digits, and move on to the next one\n    while i < num_digits:\n        digits.append(num % 10)\n        num //= 10\n        i += 1\n    # if the number is less than 9, add one to the number of digits and return it\n    if len(digits) < 9:\n        return int('1' + ''.join(str(num) for num in digits) + '1')\n    # if the number is greater than 9, add one to the number of digits and return it\n    else:\n        return int('9' + ''.join(str(num) for num in digits) + '9')\n",
        "test": "assert     next_smallest_palindrome(9999) == 9999",
        "num_ids": 1922,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Your code here\n    \n    n = len(arr)\n    if k < 1 or k > n:\n        return\n    \n    return arr[k - 1]\n",
        "test": "assert kth_element([1,2,3,4,5], 1) == 1",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "test": "assert     snake_to_camel('snake_case') == 'SnakeCase'",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m - (n-1) - (m-1)\n",
        "test": "assert     eulerian_num(1, 2) == 1, \"wrong answer for eulerian_num(1, 2)\"",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(sorted, input_list))\n",
        "test": "assert     sort_sublists([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n",
        "test": "assert count([False, False, True]) == 1",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return tuple(test_list) + test_tup\n",
        "test": "assert     add_lists(['a', 'b'], ('c', 'd')) == ('a', 'b', 'c', 'd'), 'incorrect'",
        "num_ids": 1021,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=num1+num2\n    list2=num3\n    list1.sort()\n    list2.sort()\n    list3=[]\n    i=0\n    j=0\n    while(i<len(list1) and j<len(list2)):\n        if list1[i]<list2[j]:\n            list3.append(list1[i])\n            i+=1\n        elif list1[i]>list2[j]:\n            list3.append(list2[j])\n            j+=1\n        elif list1[i]==list2[j]:\n            list3.append(list1[i])\n            list3.append(list2[j])\n            i+=1\n            j+=1\n    while(i<len(list1)):\n        list3.append(list1[i])\n        i+=1\n    while(j<len(list2)):\n        list3.append(list2[j])\n        j+=1\n    return list3\n",
        "test": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 2732,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return ((2**n)-1) & int(s,2)\n",
        "test": "assert     odd_Equivalent(\"10101010\", 0) == 0, \"case 2\"",
        "num_ids": 943,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Define a list of distinct elements\n    distinct_elements = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in distinct_elements:\n                distinct_elements.append(item)\n    # Find common elements\n    common_elements = []\n    for item in distinct_elements:\n        count = 0\n        for sublist in nestedlist:\n            if item in sublist:\n                count += 1\n        if count == len(nestedlist):\n            common_elements.append(item)\n    return common_elements\n",
        "test": "assert     common_in_nested_lists([1, [1, 2, 3, 4], [4, [4, 5, 6], 7], [7, 8, 9]]) == [4, 4, 7]",
        "num_ids": 1374,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "test": "assert     check_integer('3.5') == False",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{},{},{}]) == True",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #create a list to store the numbers from the tuple\n    num_list = []\n    #loop through the tuple\n    for num in nums:\n        #append the numbers in the tuple into the list\n        num_list.append(num)\n    #return the sum of the numbers in the list\n    return int(''.join(str(x) for x in num_list))\n",
        "test": "assert     tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, val in enumerate(test_list):\n        try:\n            test_list[i] = float(val)\n        except:\n            pass\n    return test_list\n",
        "test": "assert     list_to_float([[1, 2, 3], [3.5, 1.0]]) == [[1.0, 2.0, 3.0], [3.5, 1.0]], \"Test Failed\"",
        "num_ids": 1363,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('abc') == ['abc']",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    n=len(arr)\n    for i in range(0,n-1):\n        if arr[i]!=arr[i+1]:\n            return arr[i]\n    return arr[n-1]\n",
        "test": "assert     search([1,1,2,3,3,4,4,8,8]) == 1",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][0]*list1[i][1])\n    return max(result)\n",
        "test": "assert     max_product_tuple([(0, 0), (0, 0), (0, 0), (0, 0)]) == 0",
        "num_ids": 4469,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        sum_of_factors = sum(get_factors(i))\n        if sum_of_factors < i:\n            # The pair (i, sum_of_factors) is not an amicable pair.\n            continue\n        elif sum_of_factors > i:\n            # The pair (i, sum_of_factors) is already found.\n            if is_amicable_number(i, sum_of_factors):\n                sum_of_amicable_numbers += i\n            continue\n        elif sum_of_factors == i:\n            if is_amicable_number(i, sum_of_factors):\n                sum_of_amicable_numbers += i\n                break\n    return sum_of_amicable_numbers\n",
        "test": "assert amicable_numbers_sum(10001) == 4179871",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #a = complex(a)\n    #b = complex(b)\n    r = (a**2 + b**2)**0.5\n    t = cmath.phase(complex(a,b))\n    if t >=0:\n        return t\n    else:\n        return t + 360",
        "test": "assert     angle_complex(1, 0) == 0.0",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0: return 0\n    max_diff = 0\n    count_1 = 0\n    count_0 = 0\n    for i in range(len(string)):\n        if string[i] == \"1\":\n            count_1 += 1\n        else:\n            count_0 += 1\n        max_diff = max(max_diff, abs(count_1 - count_0))\n    return max_diff\n",
        "test": "assert     find_length(\"\") == 0",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        if b==0:\n            return a\n        return gcd(b,a%b)\n    return gcd(a,b)\n",
        "test": "assert     sum(5,25)==5",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(5, 3) == 15",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [s for s in str if len(s) > n]\n",
        "test": "assert     long_words(10, ['me', 'for', 'you']) == []",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    import numpy as np\n    #print(\"my_matrix is\", my_matrix)\n    my_matrix = np.array(my_matrix)\n    #print(\"my_matrix is\", my_matrix)\n    num_rows = len(my_matrix)\n    #print(\"num_rows is\", num_rows)\n    num_cols = len(my_matrix[0])\n    #print(\"num_cols is\", num_cols)\n    # check all the rows for same sum\n    for row in my_matrix:\n        #print(\"row is\", row)\n        s_row = sum(row)\n        #print(\"s_row is\", s_row)\n        if s_row!= sum(my_matrix.diagonal()):\n            #print(\"s_row is not diagonal sum\")\n            return False\n    # check all the columns for same sum\n    for i in range(num_cols):\n        s_col = sum([row[i] for row in my_matrix])\n        if s_col!= sum(my_matrix[:,i]):\n            #print(\"s_col is not diagonal sum\")\n            return False\n    # check all the diagonals for same sum\n    if sum([my_matrix.diagonal()[i] for i in range(num_cols)])!= sum([my_matrix.diagonal()[-(i+1)] for i in range(num_cols)]):\n        #print(\"s_row is not diagonal sum\")\n        return False\n    # check all the diagonals for same sum\n    if sum([my_matrix.diagonal()[i] for i in range(num_rows)])!= sum([my_matrix.diagonal()[-(i+1)] for i in range(num_rows)]):\n        #print(\"s_row is not diagonal sum\")\n        return False\n    return True\n",
        "test": "assert     magic_square_test([[2,7,6],[9,5,1],[4,3,8],[3,9,7]]) == False",
        "num_ids": 2837,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for i in nums:\n        dic[i] += 1\n    return max(dic.keys(),key=lambda x:dic[x])\n",
        "test": "assert     max_occurrences([1, 2, 2, 3, 3, 4, 5]) == 2",
        "num_ids": 1344,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    \n    new_str = []\n    for char in str1:\n        if char in vowels:\n            new_str.append(vowels_list.pop())\n        else:\n            new_str.append(char)\n    \n    new_str = \"\".join(new_str)\n    return new_str\n    \ndef is_valid_parentheses(str1):\n    '''\n    Write a Python function to check parentheses in a string are balanced or not.\n    '''\n    open_list = ['[', '{', '(']\n    close_list = [']', '}', ')']\n    \n    stack = []\n    \n    for char in str1:\n        if char in open_list:\n            stack.append(char)\n        elif char in close_list:\n            pos = close_list.index(char)\n            if ((len(stack) > 0) and\n                (open_list[pos] == stack[len(stack)-1])):\n                stack.pop()\n            else:\n                return False\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \ndef find_duplicates_brute_force(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                return True\n    return False\n    \ndef find_duplicates_hash_table(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    hash_table = {}\n    for val in arr:\n        if val not in hash_table:\n            hash_table[val] = 1\n        else:\n            return True\n    return False\n    \ndef find_duplicates_bit_vector(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    bit_vector = 0\n    for val in arr:\n        if val & bit_vector == 0:\n            bit_vector |= 1 << val\n        else:\n            return True\n    return False\n    \ndef find_duplicates_bit_vector_alt(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    bit_vector = 0\n    for val in arr:\n        bit_vector = bit_vector | 1 << val\n    for i in range(len(arr)):\n        if bit_vector & 1 << i == 0:\n            return False\n    return True\n    \ndef find_duplicates_set(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    seen = set()\n    for val in arr:\n        if val not in seen:\n            seen.add(val)\n        else:\n            return True\n    return False\n    \ndef find_duplicates_set_alt(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    seen = set()\n    dups = set()\n    for val in arr:\n        if val not in seen:\n            seen.add(val)\n        else:\n            dups.add(val)\n    return dups\n    \ndef find_duplicates_sort(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    arr.sort()\n    for i in range(0, len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n    \ndef find_duplicates_sort_alt(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    arr.sort()\n    for i in range(0, len(arr)-1):\n        if arr[i] == arr[i+1] and arr[i+1] == arr[i+2]:\n            return True\n    return False\n    \ndef find_duplicates_set_with_extra_space(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    seen = set()\n    for val in arr:\n        if val not in seen:\n            seen.add(val)\n        else:\n            return True\n    return False\n    \ndef find_duplicates_set_with_extra_space_alt(arr):\n    '''\n    Write a Python function that takes a list of numbers and returns True if there is \n    a duplicate number in the list.\n    '''\n    seen = set()\n    dups = set()\n    for val in arr:\n        if val not in seen:\n            seen.add(val)\n        else:\n            dups.add(val)\n    return dups\n    \ndef find_duplicates_arrays(arr1, arr2):\n    '''\n    Write a Python function that takes two lists and returns True if there is \n    a duplicate number in the list.\n    '''\n    seen = set()\n    dups = set()\n    for val in arr1:\n        if val not in seen:\n            seen.add(val)\n        else:\n            dups.add(val)\n    \n    for val in arr2:\n        if val not in seen:\n            seen.add(val)\n        else:\n            dups.add(val)\n    \n    return dups\n    \ndef find_duplicates_arrays_alt(arr1, arr2):\n    '''\n    Write a Python function that takes two lists and returns True if there is \n    a duplicate number in the list.\n    '''\n    dups = set()\n    \n    for val in arr1:\n        if val in arr2:\n            dups.add(val)\n    \n    for val in arr2:\n        if val in arr1:\n            dups.add(val)\n            \n    return dups\n    \ndef find_duplicates_arrays_alt_2(arr1, arr2):\n    '''\n    Write a Python function that takes two lists and returns True if there is \n    a duplicate number in the list.\n    '''\n    return list(set(arr1) & set(arr2))\n    \ndef find_duplicates_arrays_alt_3(arr1, arr2):\n    '''\n    Write a Python function that takes two lists and returns True if there is \n    a duplicate number in the list.\n    '''\n    return list(set(arr1 + arr2))\n",
        "test": "assert     reverse_vowels(\"world\") == \"world\"",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    my_str = \"\"\n    for i in tup1:\n        my_str += str(i) + \",\"\n    my_str = my_str[:-1]\n    return my_str\n",
        "test": "assert     'tuple' == tup_string(('tuple',))",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    suma = 0\n    for x in nums:\n        if x < 0:\n            suma += x\n    return suma\n",
        "test": "assert ",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def is_hexagonal(n):\n        '''\n        Return if the hexagonal number is a right triangle.\n        '''\n        numerator = 1\n        denominator = 1\n        while True:\n            if numerator > denominator:\n                return False\n            if (numerator + denominator) % 2 == 0:\n                return (numerator + denominator) * n >= n ** 2\n            else:\n                numerator += 1\n                denominator += 2\n    \n    hexagonal = [1]\n    number = 1\n    while len(hexagonal) < n:\n        hexagonal.append(number)\n        number += 6 * (number - 1)\n    \n    return hexagonal[n - 1]\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    return zeros / len(nums)\n",
        "test": "assert     zero_count([1,2,0,1,0,3,0,4]) == 3./8.",
        "num_ids": 9184,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 0; \n    while (n > 0): \n        power += n & 1; \n        n >>= 1; \n    return (power == 1 or power == 3 or power == 5 or power == 7); \ndef is_Sum_Of_Powers_Of_Two_New(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n): \n        n = n & (n - 1); \n    return n == 0; \n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(3) == False",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c = 2 * math.pi * r\n    return c\n",
        "test": "assert     (circle_circumference(0) == 0)",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flat(items, acc=None):\n        if acc is None:\n            acc = []\n        for item in items:\n            if isinstance(item, list):\n                flat(item, acc)\n            else:\n                acc.append(item)\n        return acc\n    return flat(test_list)\n",
        "test": "assert     extract_singly([1,2,3]) == [1,2,3], \"list of nums should not contain duplicates.\"",
        "num_ids": 1218,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    return pancake_sort(nums[:-1]) + [nums[-1]] if nums[-1] > nums[0] else pancake_sort(nums[1:]) + [nums[0]]\n",
        "test": "assert     [3, 4, 5] == pancake_sort([3, 4, 5])",
        "num_ids": 1543,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if (len(list1)!= len(list2)) or (len(list2)!= len(list3)) or (len(list1)!= len(list3)):\n        return -1\n    return sum([1 for i in range(len(list1)) if list1[i] == list2[i] == list3[i]])\n",
        "test": "assert     count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # convert tuple into list\n    input_list = list(Input)\n    #print(input_list)\n    # finding the length of the list\n    length = len(input_list)\n    #print(length)\n    # looping through the list\n    # starting from the first element till the end of the list\n    # count 0\n    count = 0\n    # count 0\n    count_2 = 0\n    for i in input_list:\n        # count +1\n        count += 1\n        # if count is not even\n        if count % 2 == 1:\n            # count 0\n            count_2 = 0\n        # if count is even\n        else:\n            # count +1\n            count_2 += 1\n            # if count_2 is even\n            if count_2 % 2 == 0:\n                # return count\n                return count\n    # return count\n    return count\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (i!= j):\n                absolute_difference = abs(arr[i] - arr[j])\n                if absolute_difference > max_abs_diff:\n                    max_abs_diff = absolute_difference\n                    \n    return max_abs_diff\n    \nprint(max_Abs_Diff([0, 2, 3, 1]))\nprint(max_Abs_Diff([5, 3, 2, 1, 9, 0]))\nprint(max_Abs_Diff([7, 5, 3, 1]))\nprint(max_Abs_Diff([1, 10, 100, 1000, 2, 1001]))\nprint(max_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\n",
        "test": "assert     max_Abs_Diff([10, 9, 10, 8, 10]) == 2, \"Incorrect output for max_Abs_Diff([10, 9, 10, 8, 10])\"",
        "num_ids": 1577,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        for y in range(1, n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n",
        "test": "assert     (find_solution(1, 1, 2) == (1, 1))",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_diff = []\n    for i in list1:\n        if i not in list2:\n            list_diff.append(i)\n    return list_diff\n",
        "test": "assert     remove_elements( [1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 6, 9] ) == [1, 2, 4, 5, 7, 8]",
        "num_ids": 1090,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)*(3*tan(pi/l) + 1)/(3*tan(pi/l))\n",
        "test": "assert     area_polygon(10, 4)!= 200, 'error in area_polygon()'",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for x in range(1,n):\n        if n % x == 0:\n            divisors.append(x)\n    return sum(divisors) == n\n",
        "test": "assert not div_sum(5) == [2, 3], 'incorrect'",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i].lower() and ord('a')<= ord(str1[i].lower()) <= ord('z'):\n            count += 1\n    return count\n    \n    \ndef count_char_frequency(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at least once.\n    '''\n    str1 = str1.lower()\n    freq = [0]*26\n    for i in range(len(str1)):\n        freq[ord(str1[i]) - ord('a')] += 1\n    return freq\n",
        "test": "assert     count_char_position('a') == 1, \"test1\"",
        "num_ids": 1665,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # create an empty dictionary\n    dict = {}\n    # iterate through the list\n    for i in range(0, len(A)):\n        # check to see if xor of a and i is even, if it is, increment the count\n        if A[i] ^ i in dict:\n            dict[A[i] ^ i] += 1\n        # otherwise, initialize the count for this key to 1\n        else:\n            dict[A[i] ^ i] = 1\n    # initialize counter to 0\n    count = 0\n    # iterate through dictionary\n    for key, value in dict.items():\n        # if the value is even, increment counter\n        if value % 2 == 0:\n            count += 1\n    # return counter\n    return count\n",
        "test": "assert     find_even_pair([1,2,3]) == 1",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        n = -n\n    return 1 if n == 0 else 2 ** int(math.ceil(math.log2(n)))\n",
        "test": "assert     next_power_of_2(4) == 4",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    cnt = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            cnt += 1\n    return cnt\n",
        "test": "assert     frequency([12,45,56,1,23,54,34,2,3,4], 45) == 1, \"Frequency is incorrect\"",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0                                                                                                                                                                                                                        \n    for i in list1:\n        if m <= list1.index(i) <= n:\n            total += i\n    return total\n",
        "test": "assert     sum_range_list([0], 0, 1) == 0",
        "num_ids": 1086,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = (5 * a)\n    return p\n",
        "test": "assert     (perimeter_pentagon(5) - 5*5 == 0)",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n",
        "test": "assert     count_occurance('std') == 1",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        for j in range(i+1,len(test_tuple)):\n            if type(test_tuple[i])!= type(test_tuple[j]):\n                return False\n    return True\n",
        "test": "assert     check_type((0, 1.0, 2)) == False",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if the element is not in the array, return False\n    if x not in arr:\n        return False\n    else:\n        # initialize count variable and initialize counter variable\n        count = 0\n        counter = 0\n        # loop through the array, if counter is greater than n/2, return True, otherwise return False\n        while counter < n:\n            if counter > n/2:\n                return True\n            if arr[counter] == x:\n                count += 1\n            counter += 1\n        return False\n    \n    # initialize count variable and initialize counter variable\n    count = 0\n    counter = 0\n    # loop through the array, if counter is greater than n/2, return True, otherwise return False\n    while counter < n:\n        if counter > n/2:\n            return True\n        if arr[counter] == x:\n            count += 1\n        counter += 1\n    return False\n",
        "test": "assert     is_majority([1,2,2,2,2,2,3,4,4,4], 9, 2) == True",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n",
        "test": "assert     odd_values_string('aabbccddeeff') == '', \"Test 2 Failed\"",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<=b) and (a<=c): \n        return a\n    elif (b<=a) and (b<=c):\n        return b\n    elif (c<=a) and (c<=b):\n        return c\n    else:\n        return \"invalid input\"\n",
        "test": "assert     min_of_three(1,2,3) == 1, \"Incorrect output\"",
        "num_ids": 1027,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (2**n-1) & i == 2**n-1:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(1,0,7) == 0, 'Test failed!'",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    start = 0\n    end = n - 1\n    while start <= end:\n        if arr[start] < 0 and arr[end] < 0:\n            start += 1\n            end -= 1\n        elif arr[start] < 0 and arr[end] >= 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        elif arr[start] >= 0 and arr[end] >= 0:\n            start += 1\n            end -= 1\n        elif arr[start] >= 0 and arr[end] < 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n    return arr\n",
        "test": "assert     re_arrange_array([-1, -2, -3, -4, -5, -6, -7, -8, -9], 9) == [-1, -2, -3, -4, -5, -6, -7, -8, -9], \"Test 2 Failed\"",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = ''\n    for i in str1:\n        if i =='':\n            new_string = new_string + char\n        else:\n            new_string = new_string + i\n    return new_string\n",
        "test": "assert     replace_blank('abc', '$') == 'abc'",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1 = list1[::-1]\n    list2 = []\n    for i in range(n):\n        list2.append(list1[i])\n    return list2\n",
        "test": "assert     larg_nnum([1, 2, 3, 4, 5, 6, 7], 1) == [7]",
        "num_ids": 1180,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14159\n    LateralSurfaceArea=(2*pi*r*h) + (2*pi*r**2)\n    return LateralSurfaceArea\n",
        "test": "assert     lateralsuface_cylinder(0.5,1) == 1.5*3.14159, 'the function result is wrong'",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n",
        "test": "assert     volume_cube(2) == 8, \"Incorrect Answer\"",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for item in test_list:\n        if item in test_dict:\n            test_dict[item] += 1\n        else:\n            test_dict[item] = 1\n    return test_dict\n",
        "test": "assert     check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == {(1, 2): 6}, 'incorrect'",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # intilize a counter variable.\n    count = 0\n    # iterate for each substring.\n    for i in range(0, len(str)):\n        # if substring is not empty.\n        if str[i:]!= '':\n            # increment counter.\n            count += 1\n    # return number of substrings.\n    return count\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = 0\n    for i in range(n):\n        if i == 0:\n            result += 1\n        else:\n            result = result + m - (2 * i) + 1\n    return result\n",
        "test": "assert     get_total_number_of_sequences(1, 1) == 1",
        "num_ids": 3013,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:]\n    return list1\n",
        "test": "assert     replace_list(['a','b','c','d'],['e','f','g','h']) == ['a','b','c','e','f','g','h'], 'incorrect'",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac(\"ABC\") == 3",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    next_perfect_square = math.ceil(math.sqrt(N))*math.ceil(math.sqrt(N))\n    return next_perfect_square \n",
        "test": "assert     (next_Perfect_Square(1) == 1)",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n",
        "test": "assert     max_sum([1,2,3,4,5,6,4,5,6,5,4,3,2,1]) == 28",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2.0\n    while True:\n        better = (approx + number / approx) / 2.0\n        if better == approx:\n            return better\n        approx = better\n",
        "test": "assert     abs(babylonian_squareroot(9) - 3) < 1e-8",
        "num_ids": 809,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    maxi = 1\n    for i in range(n):\n        for j in range(i,n):\n            if str[i:j+1] == str[i:j+1][::-1] and j-i+1> maxi:\n                maxi = j-i+1\n    return maxi\n",
        "test": "assert     lps('cbbd') == 2",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n\n",
        "test": "assert ",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict_nums = {}\n    for num in array_nums1:\n        if num in dict_nums:\n            dict_nums[num] += 1\n        else:\n            dict_nums[num] = 1\n    intersection_array = []\n    for num in array_nums2:\n        if num in dict_nums and dict_nums[num] > 0:\n            dict_nums[num] -= 1\n            intersection_array.append(num)\n    return intersection_array\n",
        "test": "assert     set(intersection_array([1,2,2,1],[2,2])) == {2}",
        "num_ids": 1266,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "test": "assert     count_X((1,2,3,4,5),5) == 1",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n    \nprint(insert_element([1,2,3],0))\n",
        "test": "assert     insert_element([1, 2, 3, 4, 5],0) == [0, 1, 2, 3, 4, 5]",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_number = numbers\n    r = cmath.polar(complex_number)[0]\n    theta = cmath.polar(complex_number)[1]\n    return r,theta\n",
        "test": "assert     convert((2+0j)) == (2.0, 0.0)",
        "num_ids": 2994,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for element in list1:\n        if type(element) == int:\n            counter += 1\n    return counter\n",
        "test": "assert     count_integer([1, 2, 1.0, 3, 4.0]) == 3",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l, n)]\n",
        "test": "assert     combinations_colors([], 1) == []",
        "num_ids": 2668,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [2]\n    x = 3\n    while x <= n:\n        for y in primes:\n            if x % y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    return len(primes)\n",
        "test": "assert     count_Primes_nums(1) == 0, 'testcase 1 failed'",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a, b = b, a\n    return a,b\n",
        "test": "assert     swap_numbers(100, 200) == (200, 100)",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    #test_tup1 = (1, 2)\n    #test_tup2 = (0, 2)\n    return tuple(max(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n    \n",
        "test": "assert     maximize_elements( (1, 2, 3, 4, 5), (5, 4, 3, 2, 1) ) ",
        "num_ids": 3198,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return \"Invalid Input\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 23\n    if n == 9:\n        return 29\n    if n == 10:\n        return 31\n    if n == 11:\n        return 37\n    if n == 12:\n        return 41\n    if n == 13:\n        return 43\n    if n == 14:\n        return 47\n    if n == 15:\n        return 53\n    if n == 16:\n        return 59\n    if n == 17:\n        return 61\n    if n == 18:\n        return 67\n    if n == 19:\n        return 71\n    if n == 20:\n        return 73\n    if n == 21:\n        return 79\n    if n == 22:\n        return 83\n    if n == 23:\n        return 89\n    if n == 24:\n        return 97\n    if n == 25:\n        return 101\n    if n == 26:\n        return 103\n    if n == 27:\n        return 107\n    if n == 28:\n        return 109\n    if n == 29:\n        return 113\n    if n == 30:\n        return 127\n    if n == 31:\n        return 131\n    if n == 32:\n        return 137\n    if n == 33:\n        return 139\n    if n == 34:\n        return 149\n    if n == 35:\n        return 151\n    if n == 36:\n        return 157\n    if n == 37:\n        return 163\n    if n == 38:\n        return 167\n    if n == 39:\n        return 173\n    if n == 40:\n        return 179\n    if n == 41:\n        return 181\n    if n == 42:\n        return 191\n    if n == 43:\n        return 193\n    if n == 44:\n        return 197\n    if n == 45:\n        return 199\n    if n == 46:\n        return 211\n    if n == 47:\n        return 223\n    if n == 48:\n        return 227\n    if n == 49:\n        return 229\n    if n == 50:\n        return 233\n    if n == 51:\n        return 239\n    if n == 52:\n        return 241\n    if n == 53:\n        return 251\n    if n == 54:\n        return 257\n    if n == 55:\n        return 263\n    if n == 56:\n        return 269\n    if n == 57:\n        return 271\n    if n == 58:\n        return 277\n    if n == 59:\n        return 281\n    if n == 60:\n        return 283\n    if n == 61:\n        return 293\n    if n == 62:\n        return 307\n    if n == 63:\n        return 311\n    if n == 64:\n        return 313\n    if n == 65:\n        return 317\n    if n == 66:\n        return 331\n    if n == 67:\n        return 337\n    if n == 68:\n        return 347\n    if n == 69:\n        return 349\n    if n == 70:\n        return 353\n    if n == 71:\n        return 359\n    if n == 72:\n        return 367\n    if n == 73:\n        return 373\n    if n == 74:\n        return 379\n    if n == 75:\n        return 383\n    if n == 76:\n        return 389\n    if n == 77:\n        return 397\n    if n == 78:\n        return 401\n    if n == 79:\n        return 409\n    if n == 80:\n        return 419\n    if n == 81:\n        return 421\n    if n == 82:\n        return 431\n    if n == 83:\n        return 433\n    if n == 84:\n        return 439\n    if n == 85:\n        return 443\n    if n == 86:\n        return 449\n    if n == 87:\n        return 457\n    if n == 88:\n        return 461\n    if n == 89:\n        return 463\n    if n == 90:\n        return 467\n    if n == 91:\n        return 479\n    if n == 92:\n        return 487\n    if n == 93:\n        return 491\n    if n == 94:\n        return 499\n    if n == 95:\n        return 503\n    if n == 96:\n        return 509\n    if n == 97:\n        return 521\n    if n == 98:\n        return 523\n    if n == 99:\n        return 541\n    if n == 100:\n        return 547\n    return \"Not Found\"\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 2031,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # tup1 = (2, 4, 6)\n    # tup2 = (2, 4, 6)\n    result = ()\n    for i in range(0, len(test_tup1)):\n        if len(test_tup1) == len(test_tup2):\n            result += (test_tup1[i] / test_tup2[i],)\n    return result\n",
        "test": "assert     division_elements((1, 4), (2, 2)) == (0.5, 2), 'incorrect'",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l1 = len(list1)\n    if l1 > L:\n        l1 = L\n        first_lst = list1[:l1]\n        second_lst = list1[l1:]\n        return (first_lst, second_lst)\n    else:\n        return (list1, [])\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 3) == ([1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12])",
        "num_ids": 1492,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Body of the function.\n    if h_age == None:\n        return None\n    elif h_age < 0:\n        return None\n    else:\n        return int(h_age * 7)\n    \n",
        "test": "assert     dog_age(8) == 15, \"If you use a dog that is 8 human years old then dog_age(8) should return 15\"",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #S = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #step = 3\n    #output = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n    #time_complexity = 0(n)\n    #space_complexity = 0(n)\n    output = []\n    for i in range(0, len(S), step):\n        output.append(S[i:i + step])\n    print(output)\n    return output\n",
        "test": "assert     [[0, 1], [2, 3], [4]] == list_split([0, 1, 2, 3, 4], 2)",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if type(l) == int:\n        return 6*l**2\n    else:\n        return \"TypeError: The value must be an int\"",
        "test": "assert     lateralsurface_cube(3) == 54",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**2\n    return total\n",
        "test": "assert     square_Sum(0) == 0, \"test 1 failed\"",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n*(n+1)/2)\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    res = []\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            res.append(arr[i])\n    return sum(res)\n",
        "test": "assert     sum_even_and_even_index([1,3,5,7,9]) ==     0, \"Sum of even numbers at even positions of a list are not equal\"",
        "num_ids": 3208,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([(i**5) for i in range(1,n+1) if i%2==0])\n",
        "test": "assert     even_Power_Sum(0) == 0, \"Incorrect output: even_Power_Sum(0)\"",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(len(test_list)):\n        rear.append(test_list[i][-1])\n    return rear\n",
        "test": "assert     rear_extract([(1, 2), (2, 4), (3, 6)]) == [2, 4, 6]",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for index in range(len(test_tup1)):\n        result = result + (test_tup1[index] - test_tup2[index],)\n    return result\n",
        "test": "assert     substract_elements((3, 4, 5), (1, 2, 3)) == (2, 2, 2), \"Fails\"",
        "num_ids": 1362,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = []\n    binomial_coeff.append(1)\n    sum = 0\n    for i in range(1,n+1):\n        binomial_coeff.append((binomial_coeff[i-1]*(n-i+1))//i)\n    for j in range(1,n+1):\n        if j%2==0:\n            sum+=binomial_coeff[n]\n        n-=1\n    return sum \n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0, \"even_binomial_Coeff_Sum(0) == 0 should be True\"",
        "num_ids": 1395,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume=math.pi*(r**2)*h\n    return volume\n",
        "test": "assert     volume_cylinder(4,10) == 314.1592653589793",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = dict\n    for key,val in dict.items():\n        if val < n:\n            del new_dict[key]\n    return new_dict\n",
        "test": "assert     {1:1,2:2,3:3,4:4} == dict_filter({1:1,2:2,3:3,4:4},0), \"incorrect output for case 2\"",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return 0\n",
        "test": "assert     count_first_elements((1,2,2,3,3,3,2,2,1)) == [3,2,2,3,3,2,2,3]",
        "num_ids": 3558,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    if not isinstance(n, int):\n        return False\n    \n    if n <= 0:\n        return False\n    \n    d = 0\n    k = 1\n    while d < n:\n        d = 10 * d + k\n        k += 1\n    \n    return d == n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 4492,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n",
        "test": "assert     sequential_search([1, 2, 3, 4, 5], 1) == (True, 0)",
        "num_ids": 1699,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return (len(set(test_list)) == len(test_list))\n",
        "test": "assert     all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for n in nums1:\n        if n in nums2:\n            nums2.remove(n)\n    return nums2\n",
        "test": "assert     sub_list([2],[1,1]) == [1,1], \"sub_list([2],[1,1]) is incorrect\"",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = dict()\n    for i in str(n):\n        if i in d:\n            if d[i] > int(i):\n                return False\n        d[i] = d.get(i,0) + 1\n    return True\n",
        "test": "assert     validate(12345) == True",
        "num_ids": 1849,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "test": "assert     check_element([1,2,1],1) == False",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Code goes here\n    result=re.search('a.{2}|a.{3}',text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('abbb') == True",
        "num_ids": 2784,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if not a:\n        return None\n    curr_sum = max_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        if i >= k and curr_sum <= 0:\n            curr_sum = 0\n        elif i >= k:\n            max_sum = max(curr_sum, max_sum)\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([1, -3, -2, 1], 4, 2) == 1",
        "num_ids": 1740,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers=[]\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            even_numbers.append(i**2)\n    return sum(even_numbers)\n",
        "test": "assert     square_Sum(0) == 0, \"Error\"",
        "num_ids": 2606,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=[]\n    for each in list1:\n        max_len.append(len(each))\n    return max(max_len)\n",
        "test": "assert     max_length([[1, 2, 3], [4, 5, 6], [7, 8], [9, 10]]) == [7, 8]",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or n == 1 or k == 1:\n        return 1\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n",
        "test": "assert     count_no_of_ways(3, 2) == 3",
        "num_ids": 1117,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    #return n/m\n    #print(n//m)\n    return int(n/m)\n",
        "test": "assert     find(2,2)==1",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    return int(math.sqrt(w**2 + h**2))\n",
        "test": "assert math.isclose(otherside_rightangle(3,4),5)",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max_num = 0\n    if len(listval) == 1:\n        return listval[0]\n    elif len(listval) == 0:\n        return None\n    else:\n        for i in range(len(listval)):\n            if listval[i] > max_num:\n                max_num = listval[i]\n        return max_num\n",
        "test": "assert     max_val([3,6,4,7,9,0,2,4]) == 9, 'incorrect output'",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n",
        "test": "assert     sum_div(1) == 1, \"error in sum_div(1)\"",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n",
        "test": "assert     get_Inv_Count([0,1,2,3,4,5,6,7,8,9]) == 0, 'Wrong Answer'",
        "num_ids": 1188,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for elem in list1:\n        if type(elem) == list:\n            flat_list += flatten_list(elem)\n        else:\n            flat_list.append(elem)\n    return flat_list\n",
        "test": "assert     flatten_list([1, 2, 3]) == [1, 2, 3], \"Should return [1, 2, 3]\"",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = lambda x, y: x if x > y else y\n    print(aggregate(4,3))\n    print(max(stdata, key=lambda x: x[1]))\n    return max(stdata, key=lambda x: x[1])[1]\n",
        "test": "assert     max_aggregate([(1, 1), (2, 2), (3, 3)]) == 3",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        if (i & (i+1)) == (i >> n) << n:\n            count += 1\n    return count\n",
        "test": "assert     count_binary_seq(0) == 1",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    elif len(d.keys()) == 0:\n        return 0\n    else:\n        # if d is an empty dictionary, returns 0\n        return 1 + max([dict_depth(d[k]) for k in d.keys()])\n",
        "test": "assert     dict_depth({1: {2: {3: 'd'}, 4: 5}, 6: 7}) == 3",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    left, right = 0, len(arr)-1\n    rotations = rotations % len(arr)\n    while left <= right : \n        mid = (left+right)//2\n        if arr[mid] == ranges[index] :\n            return arr[mid]\n        elif ranges[index] > arr[mid] :\n            left = mid+1\n        else :\n            right = mid-1\n    if right < 0 :\n        return arr[0]\n    else :\n        left = 0\n        while left <= right : \n            mid = (left+right)//2\n            if arr[mid] == ranges[index] :\n                return arr[mid]\n            elif ranges[index] > arr[mid] :\n                left = mid+1\n            else :\n                right = mid-1\n    return arr[right]\n",
        "test": "assert     find_Element([1,2,3,4,5,6], [0,2,4,6], 3, 0) == 1",
        "num_ids": 3724,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_w=[]\n    for word in words:\n        if word.startswith('p'):\n            list_w.append(word)\n    return list_w[0:2]\n",
        "test": "assert     start_withp([\"cat\", \"dog\", \"mouse\"]) == []",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(index == n):\n        return 0\n    max1 = 0\n    for i in range(index, n):\n        curr_sum = 0\n        for j in range(index, i+1):\n            curr_sum = curr_sum + a[j]\n        max1 = max(max1, curr_sum)\n    max2 = 0\n    for i in range(index, n):\n        if(k < i):\n            curr_sum = 0\n            for j in range(index, k):\n                curr_sum = curr_sum + a[j]\n            max2 = max(max2, curr_sum)\n    return max(max1, max2)\n",
        "test": "assert     max_sum_increasing_subseq([1,2,3,4],4,1,2) == 9",
        "num_ids": 1860,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # \u6ce8\u610f\uff0c\u8fd9\u91cc\u9700\u8981\u590d\u5236\u4e00\u4efd\u65b0\u7684\u5143\u7ec4\uff0c\u5426\u5219\u539f\u5143\u7ec4\u5c06\u88ab\u6539\u53d8\u3002\n    new_tuplex = deepcopy(tuplex)\n    return tuple(new_tuplex[0:m] + new_tuplex[n:])\n",
        "test": "assert     colon_tuplex(('hello', 'goodbye'), 2, 2) ",
        "num_ids": 1367,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for i in range(N):\n        res.append(nums1[i]*nums2[i])\n    return sorted(res)[-N:]\n",
        "test": "assert     large_product([4, 3, 5, 6], [2, 7, 9], 0) == []",
        "num_ids": 1542,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\ndef add(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\ndef substract(a,b):\n    '''\n    Write a python function to substract a number to another.\n    '''\n    return a-b\ndef multiply(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\ndef divide(a,b):\n    '''\n    Write a python function to divide two numbers.\n    '''\n    return a/b\ndef power(a,b):\n    '''\n    Write a python function to find a number raised to the power of another number.\n    '''\n    return a**b\ndef modulus(a,b):\n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return a%b\nprint(minimum(100,200))\nprint(maximum(100,200))\nprint(add(100,200))\nprint(substract(100,200))\nprint(multiply(100,200))\nprint(divide(100,200))\nprint(power(100,200))\nprint(modulus(100,200))",
        "test": "assert     maximum(1,2) == 2, \"maximum(1,2) == 2 is not True\"",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = []\n    for i in str1:\n        str2.append(i)\n    tuple_of_str = tuple(str2)\n    return tuple_of_str\n",
        "test": "assert     string_to_tuple('Alma') == ('A', 'l','m', 'a'), 'WRONG'",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    left_most_set_bit = -1\n    for i in range(32):\n        if n>>i & 1 == 0:\n            left_most_set_bit = i\n            break\n    return n | (1 << left_most_set_bit)\n",
        "test": "assert     set_left_most_unset_bit(2) == 3",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * (r ** 2) * h) / 3\n",
        "test": "assert     round(volume_cone(4,4),2) == round(math.pi*4**2*4/3,2)",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high=0\n    while(n):\n        high=high+1\n        n=n>>1\n    return high\n",
        "test": "assert     (highest_Power_of_2(1) == 1)",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base case\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    # Recursive step\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n    \ndef reverse_string(string):\n    '''\n    Write a function that reverses a string. The input string is given as an array of characters char[].\n    Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n    You may assume all the characters consist of printable ascii characters.\n    '''\n    # Initialize pointers for the beginning and end of the array\n    start = 0\n    end = len(string) - 1\n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string.format(element) for element in list_]\n    return list_\n",
        "test": "assert     add_string(['1', '2', '3'], '{}') == ['1', '2', '3']",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary_list = {}\n    for i in range(len(l1)):\n        dictionary_list[l1[i]] = {l2[i]:l3[i]}\n    return dictionary_list\n",
        "test": "assert     convert_list_dictionary([], [], []) == {}",
        "num_ids": 1795,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n < 1:\n            return 0\n        else:\n            return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return f(n)\n",
        "test": "assert     get_max_sum(1)         == 1",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for list_item in input_list:\n        if isinstance(list_item, list):\n            list_item_length = len(list_item)\n        else:\n            list_item_length = 1\n        if max_length < list_item_length:\n            max_length = list_item_length\n    return max_length\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "test": "assert     check_distinct((1,2,3,4,5)) == True",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Initialize empty dictionary\n    dict = {}\n    for i in range(len(str1)):\n        if str1[i] not in dict:\n            dict[str1[i]] = 1\n        else:\n            dict[str1[i]] += 1\n    for j in range(len(str1)):\n        if dict[str1[j]] == 1:\n            return str1[j]\n    return None\n",
        "test": "assert     first_non_repeating_character('bacb') == 'a'",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip() \n    if(string[0] == string[-1]): \n        return True\n    else: \n        return False\n",
        "test": "assert     check_char('abc')     == False, 'wrong result'",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif a < c:\n            return c\n        else:\n            return a\n    else:\n        if a < c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n",
        "test": "assert     True == (median_numbers(1,2,3) == 2.0)",
        "num_ids": 3216,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in nums:\n        sum_of_digits += sum(int(digit) for digit in str(i))\n    return sum_of_digits\n",
        "test": "assert     sum_of_digits([]) == 0, \"Test Failed\"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # return tuple([(a ^ b) for a, b in zip(test_tup1, test_tup2)])\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n",
        "test": "assert     (bitwise_xor((1, 2, 3), (1, 2, 3)) == (0, 0, 0))",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # create empty dictionary\n    freq_dict = {}\n    \n    # iterate through the list\n    for tup in test_list:\n        # if the tuple is in the dictionary, increase the count by 1\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        # if the tuple is not in the dictionary, set the count to 1\n        else:\n            freq_dict[tup] = 1\n        \n    # return the number of unique tuples in the dictionary\n    return len(freq_dict)\n",
        "test": "assert     extract_freq([('red', 1), ('blue', 2), ('red', 3), ('blue', 4), ('red', 1), ('blue', 4)]), 5",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup = []\n    for i in range(len(test_tup1)):\n        tup.append(test_tup1[i] + test_tup2[i])\n    return tuple(tup)\n",
        "test": "assert     (add_nested_tuples((1, (2, (3, (4, 5)))), (4, (5, (6, 7)))) == (9, (11, (13, 15))))",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(4,6) == 4",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0]==tuplex[0] and tuple1[1]==tuplex[1] and tuple1[2]==tuplex[2]:\n        return True\n    return False\n",
        "test": "assert     check_tuplex([2, 3, 4], (1, 2, 3)) == False",
        "num_ids": 969,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2==0\n",
        "test": "assert     find_Parity(8) == 1, 'Wrong Result!'",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_num = str(n)\n    lst_num = list(str_num)\n    lst_num.sort()\n    i = 0\n    while lst_num[i] == '0':\n        i += 1\n    lst_num[:i] = lst_num[:i][::-1]\n    lst_num[i:] = lst_num[i:][::-1]\n    result = ''\n    for i in lst_num:\n        result += i\n    return int(result)\n",
        "test": "assert     rearrange_bigger(23) == 32, \"error in rearrange_bigger_1\"",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i]+nums2[j],i,j))\n    res = []\n    for i in range(k):\n        res.append([nums1[heap[0][1]],nums2[heap[0][2]]])\n        heapq.heappop(heap)\n    return res\n",
        "test": "assert     k_smallest_pairs([1, 2], [3], 1) == [[1, 3]]",
        "num_ids": 2811,
        "indeed": true
    },
    {
        "number": 409,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    assert type(list1) == list\n    \n    sorted_list = sorted(list1, key=lambda tup: tup[1])\n    \n    return sorted_list[0][0] * sorted_list[0][1]\n",
        "test": "assert     min_product_tuple( [(1,2,3,4),(2,3,4,5),(4,5,6,7)] ) == 2, \"should return 2\"",
        "num_ids": 1678,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    smallest = listval[0]\n    for item in listval:\n        if item < smallest:\n            smallest = item\n    return smallest\n",
        "test": "assert     min_val([1,3,2,0]) == 0, \"test case failed\"",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    if isinstance(word, str):\n        return ''.join([x.capitalize() if i > 0 else x for i, x in enumerate(word.split('_'))])\n    else:\n        return word\n",
        "test": "assert     snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 2995,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_copy = l[:]\n    for i in l:\n        if (i % 2 == 0):\n            l_copy.remove(i)\n    return l_copy\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n-1])\n",
        "test": "assert     extract_nth_element([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)], 1) == (1, 2, 3, 4)",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # for i in list1:\n    #     if i in list2:\n    #         return True\n    # return False\n    #or\n    # return bool(set(list1).intersection(list2))\n    return bool(set(list1).intersection(list2))\n",
        "test": "assert     overlapping([1,2,3,4], [1,2,3,4,5]) == True, 'fails'",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        print(\"No pair with max product is present.\")\n        return 0\n    elif len(arr) == 2:\n        return arr[0]*arr[1]\n    else:\n        max1 = max(arr[0], arr[1])\n        max2 = min(arr[0], arr[1])\n        for i in range(2,len(arr)):\n            if arr[i]*max1 > arr[i]*max2:\n                max2 = max1\n                max1 = arr[i]\n            elif arr[i]*max1 < arr[i]*max2:\n                max2 = arr[i]\n        return max1*max2\n        \nprint(max_Product([1,2,3,4,5]))\n",
        "test": "assert     max_Product([1,2,3]) == 1*2*3",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dct = {}\n    for elem in Input:\n        if elem[0] in dct:\n            dct[elem[0]].append(elem)\n        else:\n            dct[elem[0]] = [elem]\n    d = list(dct.values())\n    return [max(sublst, key=lambda x:len(x)) for sublst in d]\n",
        "test": "assert     group_tuples(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f']",
        "num_ids": 1975,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    try:\n        a = max(lst, key=len)\n        return a\n    except ValueError:\n        return None\n        ",
        "test": "assert     Find_Max(['ABC', 'XYZ', 'ABC']) == 'ABC'",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))\n",
        "test": "assert     round_and_sum([1.1, 2.2, 3.3, 4.4]) == 21.6, \"Should be 21.6\"",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        s = s + i**3\n    return s\n",
        "test": "assert     cube_Sum(1) == 0",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + ','\n    return result[:-1]\n",
        "test": "assert     concatenate_tuple(('hello',)) == 'hello'",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)])/n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     (extract_rear(('string1','string2')) =='string2'), \"Wrong answer\"",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if isinstance(list1[i], list):\n            if x in list1[i]:\n                count += 1\n        else:\n            if x == list1[i]:\n                count += 1\n    return count\n",
        "test": "assert     count_element_in_list([[1, 2], [2, 3]], 2) == 2",
        "num_ids": 2991,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 1]\n",
        "test": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 918,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 19,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dts = dt.split('-')\n    return(dts[2]+'-'+dts[1]+'-'+dts[0])\n",
        "test": "assert     change_date_format(\"2017-10-10\") == \"10-10-2017\"",
        "num_ids": 1241,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([54, 26, 93, 17, 77, 31, 44, 55, 20]) == [17, 20, 26, 31, 44, 54, 55, 77, 93]",
        "num_ids": 1126,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i1 and i2 for i1, i2 in zip(test_tup1, test_tup2))\n",
        "test": "assert     and_tuples((1, 1), (1, 0)) == (1, 0)",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                print(\"This parabola is a circle\")\n            else:\n                print(\"This parabola is a vertical line\")\n        else:\n            print(\"This parabola is a horizontal line\")\n    else:\n        x = (-b / (2*a))\n        y = (a*x*x + b*x + c)\n        print(\"The directrix of this parabola is at ({:.2f}, {:.2f})\".format(x, y))\n",
        "test": "assert     parabola_directrix(1, 2, 3) ==     None",
        "num_ids": 1367,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3], [2, 3, 5, 6, 7, 9]) == True",
        "num_ids": 3170,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2\n",
        "test": "assert     (median_trapezium(1,1,1) == 1.0)",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    length = len(arr)\n    for i in range(length):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([1, 2, 3], 1) == True",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat=r\"a.*?b\"\n    result=re.findall(pat,text)\n    if len(result)==0:\n        return False\n    else:\n        return True\nprint(text_match_one(\"ac\"))\nprint(text_match_one(\"abc\"))\nprint(text_match_one(\"abbc\"))\n",
        "test": "assert     text_match_one('') == False, 'wrong result'",
        "num_ids": 973,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n < 0) :\n        n = n * (-1)\n    n = str(n)\n    n = n[len(n)-1:]\n    return int(n)\n",
        "test": "assert     last_Digit(0) == 0",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n",
        "test": "assert     (neg_nos([1,2,3,-4,-5]) == [-4,-5])",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([i for i in str1 if ord(i)%2==0])\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # return len(list(filter(lambda x: x[0] == x[1], test_list)))\n    return len(list(filter(lambda x: x[0] > 0, test_list)))\n",
        "test": "assert     count_bidirectional([]) == 0, 'incorrect'",
        "num_ids": 1792,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n    \nprint(multiple_to_single([1,2,3,4,5,6,7,8,9]))\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9,0]))\n",
        "test": "assert     multiple_to_single([2]) == 2",
        "num_ids": 4603,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # TO DO: Complete this function\n    # find all the adverbs\n    # Store them into an array\n    # Iterate through the array and print the positions of the first occurence of each adverb\n",
        "test": "assert     find_adverb_position('I will take a break from coding.') == 'from coding'",
        "num_ids": 1184,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "test": "assert     surfacearea_cube(0) == 0.0, 'Not Passed'",
        "num_ids": 1020,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in nums:\n        if i > 0:\n            pos_count += 1\n    ratio = pos_count/len(nums)\n    return ratio\n",
        "test": "assert     positive_count([-1,-1,-1,-1]) == 0, 'Incorrect output'",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_val = list1[0] \n    for x in range(0,len(list1)): \n        if list1[x] < max_val: \n            max_val = list1[x] \n    return max_val \n",
        "test": "assert     largest_neg([1,2,3,4,5,-1]) == -1",
        "num_ids": 1216,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return []\n    test_list.sort(key=lambda x: x[0])\n    ret_list = []\n    last_num = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] - last_num < K:\n            last_num = test_list[i][0]\n        else:\n            ret_list.append(test_list[i])\n    return ret_list\n",
        "test": "assert     (trim_tuple([(1,2),(3,4),(5,6),(7,8)], 0)) == [(1,2),(3,4),(5,6),(7,8)]",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "test": "assert     index_multiplication((1, 2), (2, 3)) == (2, 6)",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # tup = tuple(lst) \n    # # tup = tuple(set(tup)) \n    # return Counter(tup)\n    # for k,v in Counter(tup).items():\n    #     print(k,v)\n    dic={}\n    for i in lst:\n        if i in dic.keys():\n            dic[i] +=1\n        else:\n            dic[i]=1\n    return dic\n",
        "test": "assert     count_Occurrence([1, 2, 3, 4], (1, 2, 3, 4)) == Counter({1: 1, 2: 1, 3: 1, 4: 1}), \"fails\"",
        "num_ids": 2116,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print([i**3 for i in nums])\n    return [i**3 for i in nums]\n    \ncube_nums([1,2,3,4,5])\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    else:\n        return cal_sum(n - 1) + 2*cal_sum(n - 2)\n",
        "test": "assert     cal_sum(1) == 2",
        "num_ids": 2675,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    temp = []\n    while len(temp) < l:\n        if i >= len(str):\n            break\n        if str[i] not in temp:\n            temp.append(str[i])\n        i += 1\n    return temp\n    \ndef get_unique_char_in_string(s):\n    '''\n    Write a function to get unique character from the given string.\n    '''\n    if len(s) == 0:\n        return 0\n    i = 0\n    temp = set()\n    while i < len(s):\n        if s[i] not in temp:\n            temp.add(s[i])\n        i += 1\n    return temp\n",
        "test": "assert     extract_string(['123', '456', '789'], 3) == ['123', '456', '789']",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = '\\s+'\n    text1 = re.sub(pattern, '', text1)\n    return text1\n",
        "test": "assert     remove_whitespaces('   Hello  ') == 'Hello'",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n    else:\n        loss = 0\n    return loss\n",
        "test": "assert     loss_amount(1000, 1000) == 0",
        "num_ids": 1780,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # return sum([k for k in range(1, n) if n % k == 0 and k % 2 == 0])\n    \n    return sum([k for k in range(1, math.ceil(math.sqrt(n))) if n % k == 0 and k % 2 == 0])\n",
        "test": "assert     sumofFactors(4) == 0",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    return True\n",
        "test": "assert     text_match_wordz('The quick brown fox jumps over the lazy dog.')",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1) == True,     \"Incorrect result\"",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "test": "assert ",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = [] \n    lst_len = len(lst) \n    min_length = 1\n    for i in range(0, lst_len): \n        for j in range(i, lst_len): \n            if len(lst[i:j+1]) <= min_length and len(lst[i:j+1]) >= 1: \n                min_length = len(lst[i:j+1]) \n    for i in range(0, lst_len): \n        for j in range(i, lst_len): \n            if len(lst[i:j+1]) == min_length: \n                min_lst.append(lst[i:j+1]) \n    return min_lst \n",
        "test": "assert     Find_Min([1, 2, 3, 4, 5]) ",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \ndef triangle_area(l,b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*l*b\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*r**2\n    \ndef right_triangle_area(b,h):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    return 0.5*b*h\n    \ndef trapezoid_area(l1,l2,b):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return (l1+l2)*b/2\n    \ndef parallelogram_area(l1,l2,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return l1*l2*b\n    \ndef is_right_angled(l1,l2,l3):\n    '''\n    Write a function to determine if 3 given lengths can form a right triangle.\n    '''\n    return l1**2 + l2**2 == l3**2\n    \ndef area_of_parallelogram(l1,l2,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return l1*l2*b\n    \ndef area_of_right_triangle(b,h):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    return 0.5*b*h\n    \ndef area_of_trapezoid(l1,l2,b1,b2):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return l1*l2*(b1+b2)/2\n    \ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14*r**2\n    \ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n    \ndef circumference_of_circle_from_diameter(r):\n    '''\n    Write a function to find the circumference of a circle from the diameter.\n    '''\n    return 2*3.14*r\n    \ndef circumference_of_circle_from_circumference(c):\n    '''\n    Write a function to find the diameter of a circle from the circumference.\n    '''\n    return c/2*3.14\n    \ndef area_of_ellipse(b,a):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    return 3.14*a*b\n    \ndef circumference_of_ellipse(b,a):\n    '''\n    Write a function to find the circumference of an ellipse.\n    '''\n    return 2*3.14*a*b\n    \ndef circumference_of_ellipse_from_diameter(b,a):\n    '''\n    Write a function to find the circumference of an ellipse from the diameter.\n    '''\n    return 2*3.14*a*b\n    \ndef circumference_of_ellipse_from_circumference(c):\n    '''\n    Write a function to find the diameter of an ellipse from the circumference.\n    '''\n    return c/2*3.14\n    \ndef area_of_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*b*h\n    \ndef perimeter_of_parallelogram(l1,l2,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    return 2*(l1+l2)\n    \ndef perimeter_of_triangle(l1,l2,l3):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return l1+l2+l3\n    \ndef perimeter_of_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*3.14*r\n    \ndef perimeter_of_rectangle(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(l+b)\n    \ndef perimeter_of_right_triangle(b,h):\n    '''\n    Write a function to find the perimeter of a right triangle.\n    '''\n    return 2*(b+h)\n    \ndef perimeter_of_trapezoid(l1,l2,b1,b2):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    return 2*(l1+l2)+(b1+b2)\n    \ndef perimeter_of_circle_from_diameter(d):\n    '''\n    Write a function to find the perimeter of a circle from the diameter.\n    '''\n    return 2*3.14*d\n    \ndef perimeter_of_circle_from_circumference(c):\n    '''\n    Write a function to find the diameter of a circle from the circumference.\n    '''\n    return c/2*3.14\n    \ndef area_of_circle_from_diameter(d):\n    '''\n    Write a function to find the area of a circle from the diameter.\n    '''\n    return 3.14*d**2\n    \ndef area_of_circle_from_circumference(c):\n    '''\n    Write a function to find the area of a circle from the circumference.\n    '''\n    return 3.14*c**2\n    \ndef area_of_circle_from_perimeter(p):\n    '''\n    Write a function to find the area of a circle from the perimeter.\n    '''\n    return p*p/4*3.14\n    \ndef perimeter_of_circle_from_area(a):\n    '''\n    Write a function to find the perimeter of a circle from the area.\n    '''\n    return 2*3.14*(a**0.5)\n    \ndef diameter_of_circle_from_perimeter(p):\n    '''\n    Write a function to find the diameter of a circle from the perimeter.\n    '''\n    return p/2*3.14\n    \ndef diameter_of_circle_from_area(a):\n    '''\n    Write a function to find the diameter of a circle from the area.\n    '''\n    return 2*(a**0.5)/3.14\n    \ndef diameter_of_circle_from_circumference(c):\n    '''\n    Write a function to find the diameter of a circle from the circumference.\n    '''\n    return c*2/3.14\n    \ndef area_of_triangle_from_perimeter(p):\n    '''\n    Write a function to find the area of a triangle from the perimeter.\n    '''\n    return p/2*(p/2 - 1)\n    \ndef area_of_triangle_from_area(a):\n    '''\n    Write a function to find the area of a triangle from the area.\n    '''\n    return a*(2**0.5)/2\n    \ndef perimeter_of_triangle_from_area(a):\n    '''\n    Write a function to find the perimeter of a triangle from the area.\n    '''\n    return 3*a**0.5\n    \ndef circumference_of_triangle_from_circumference(c):\n    '''\n    Write a function to find the circumference of a triangle from the circumference.\n    '''\n    return c*2/3\n    \ndef circumference_of_triangle_from_perimeter(p):\n    '''\n    Write a function to find the circumference of a triangle from the perimeter.\n    '''\n    return p*3**0.5/2\n    \ndef area_of_right_triangle_from_perimeter(p):\n    '''\n    Write a function to find the area of a right triangle from the perimeter.\n    '''\n    return ",
        "test": "assert     rectangle_area(1,2) == 2, 'wrong output'",
        "num_ids": 279,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #return str1.lower().capitalize()\n    # return str1.replace(str1, str1.lower())\n    # return ''.join(str1.split(str1.lower()))\n    return str1.lower()\n",
        "test": "assert     remove_uppercase('') == ''",
        "num_ids": 2749,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "test": "assert     Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([l for l in str if l.isupper()])\n",
        "test": "assert     upper_ctr(\"\") == 0",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    list1 = list1[:]\n    if len(list1) == 0:\n        return comb\n    if len(list1) == 1:\n        return [list1]\n    for i in range(len(list1)):\n        temp = list1[:i] + list1[i+1:]\n        for j in combinations_list(temp):\n            comb.append([list1[i]] + j)\n    return comb\n",
        "test": "assert     combinations_list(['a', 'b']) == [['a', 'b'], ['b', 'a']]",
        "num_ids": 1670,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n    start_index = 0\n    end_index = 0\n    n = len(arr)\n    for i in range(n):\n        max_ending_here = max_ending_here * arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = start_index\n            end = i\n        if max_ending_here < 1:\n            max_ending_here = 1\n            start_index = i+1\n    return max_so_far\n",
        "test": "assert     max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # if all values are same\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n",
        "test": "assert     check_value({1:1, 2:1, 3:1}, 1) == True",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n",
        "test": "assert     drop_empty({1:1, 2:1, 3:1, 4:1}) == {1:1, 2:1, 3:1, 4:1}, 'incorrectly drops empty dictionary'",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i+1, len(arr)):\n            temp *= arr[j]\n            if temp > max_product:\n                max_product = temp\n    return max_product\n",
        "test": "assert     max_product([1,2,3,4,5]) == 120, \"case 1 failed\"",
        "num_ids": 1479,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #first, we have to unpack the tuple. \n    #the comma in the tuple is needed because its a single element. \n    (a, b) = test_tup\n    #we can use a + b, because we have added the tuple\n    add_tup = (a, b, a+b)\n    return add_tup\n",
        "test": "assert     (add_pairwise((1, 2, 3, 4, 5))) == (2, 4, 6, 8, 10)",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 1: \n        return arr[0] % n \n    remainder = find_remainder(arr[:len(arr)//2], n) * find_remainder(arr[len(arr)//2:], n) \n    return remainder % n \n",
        "test": "assert     ((2 * 3 * 4 * 5 * 6) % 30) == find_remainder([2, 3, 4, 5, 6], 30)",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1): \n        if l[i]!= (l[i+1] - 1): \n            return False\n    return True\n",
        "test": "assert     check_Consecutive([0,1,2,3]) == True, \"check_Consecutive([0,1,2,3]) should return True\"",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n",
        "test": "assert     tuple_intersection([('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')], [('i', 'j', 'k'), ('m', 'n', 'o'), ('a', 'b', 'c')])",
        "num_ids": 3322,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('abc', 'a', 'b') == 'bbc'",
        "num_ids": 759,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return dict1\ndef sort_counter_2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\ndef sort_counter_3(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return list(dict1.values())\n",
        "test": "assert     {1: 2, 3: 2, 2: 2, 4: 2, 5: 1} ==     sort_counter({1: 2, 3: 2, 2: 2, 4: 2, 5: 1})",
        "num_ids": 990,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n",
        "test": "assert ",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('LOWER') == 'lower'",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('(?<=[a-z])[A-Z]|(?<![A-Z])[A-Z](?=[a-z])', '', str1)\n",
        "test": "assert     remove_lowercase(\"HELLO\") == 'HELLO', 'incorrect!'",
        "num_ids": 4802,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "test": "assert     first_Digit(3) == 3",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in list:\n        if i % 2!=0:\n            odd_list.append(i)\n    return odd_list\nprint(Split([1,2,3,4,5,6,7]))\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9,11]",
        "num_ids": 2820,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [x**3 for x in range(1,n+1)]\n    return sum(cubes) - sum(range(1,n+1))\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if((A[i] ^ A[j]) & 1) : \n                count += 1\n                break\n    return count\nA = [1, 5, 6, 3, 4, 7] \nprint(find_Odd_Pair(A, len(A))) \n",
        "test": "assert     find_Odd_Pair([2,4,5],3) == 2",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)\n",
        "test": "assert     toggle_string('a') == 'A'",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = list(str(n1))\n    n2 = list(str(n2))\n    n1.sort()\n    n2.sort()\n    distance = 0\n    for i,n in enumerate(n1):\n        if n!= n2[i]:\n            distance += 1\n    return distance\n",
        "test": "assert     digit_distance_nums(0, 0) == 0, \"Wrong\"",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return max(sum(a[i:j]) for i in range(size) for j in range(i+1, size+1))\n",
        "test": "assert     max_sub_array_sum([-1, -2, -3, -4, -5, -100], 5) == -1",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    sorted_union = list(set(test_list1 + test_list2))\n    sorted_union.sort()\n    return tuple(sorted_union)\n",
        "test": "assert     sorted(union_elements((1,2,3), (3,4,5))) == [1, 2, 3, 4, 5]",
        "num_ids": 1173,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max=0\n    for i in range(len(lst)):\n        sum=0\n        for j in lst[i]:\n            sum+=1\n        if(sum>max):\n            max=sum\n    return(max)\n",
        "test": "assert     Find_Max_Length([[2,4,5], [1,2,4], [3,4,3]]) == 3",
        "num_ids": 1096,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if len(re.findall(\"'(.+)'\", text)) > 0:\n        return re.findall(\"'(.+)'\", text)[0]\n    elif len(re.findall('\"(.+)\",', text)) > 0:\n        return re.findall('\"(.+)\",', text)[0]\n    elif len(re.findall('\"(.+)\"', text)) > 0:\n        return re.findall('\"(.+)\"', text)[0]\n    elif len(re.findall(\"'(.+)'\", text)) > 0:\n        return re.findall(\"'(.+)'\", text)[0]\n    elif len(re.findall('\"(.+)\"', text)) > 0:\n        return re.findall('\"(.+)\"', text)[0]\n    elif len(re.findall('\"(.+)\"', text)) > 0:\n        return re.findall('\"(.+)\"', text)[0]\n    else:\n        return \"No strings found\"\n",
        "test": "assert     'honey' == extract_values('\"honey\" is good')",
        "num_ids": 1231,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    temp=set()\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                temp.add(arr[i])\n                temp.add(arr[j])\n    return len(temp)\n",
        "test": "assert     count_Pairs([],1) == 0",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #flag = True\n    for i in range(len(list1)-1):\n        if(list1[i] <= list1[i+1]):\n            #flag = True\n            pass\n        else:\n            return False\n    return True\n    \ndef main():\n    #list1 = [1,2,3,4,5,6,7,8,9,10]\n    list1 = [1,2,3,3,3,3,4,4,5,6]\n    #list1 = [1,2,3,4]\n    print(issort_list(list1))\n",
        "test": "assert     issort_list([1, 2, 3]) == True",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n",
        "test": "assert     type(empty_list(2)) == list,     \"Wrong return type. Expected a list, got %s\" % (type(empty_list(2)))",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key = lambda x: x[0])\n    return list1\n",
        "test": "assert     sort_sublists(['a', 'b', 'c']) == ['a', 'b', 'c']",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert     two_unique_nums([1,1,2,2,3,3,4,4,5,5]) == [1,2,3,4,5]",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(set(list_data))\n    prod = 1\n    for num in list_data:\n        prod *= num\n    return prod\n",
        "test": "assert     unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800",
        "num_ids": 3023,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*(r+h)\n",
        "test": "assert     surfacearea_cylinder(0,0)     == 0.0",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i]==B[0]:\n            for j in range(len(B)):\n                if A[i+j]==B[j]:\n                    if j==len(B)-1:\n                        return True\n                else:\n                    break\n    return False\n",
        "test": "assert     is_Sub_Array([1,2,3,5], [1,2,3,4]) == False, \"Failed\"",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        return n%10*last_Digit_Factorial(n//10)\n",
        "test": "assert     last_Digit_Factorial(1) == 1, \"Correctness of last_Digit_Factorial\"",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 110,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert(len(list1) == len(list2) == len(list3))\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_list.append(i)\n    return dissimilar_list\n",
        "test": "assert     find_dissimilar((\"a\", 1, \"b\"), (1, 3, \"c\")) == [3, \"c\"]",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = ()\n    for i in test_tuple:\n        if(isinstance(i, tuple)):\n            even_tuple += even_ele(i, even_fnc)\n        elif(isinstance(i, float)):\n            even_tuple += (i,)\n        elif(isinstance(i, str)):\n            even_tuple += (i,)\n        elif(isinstance(i, int)):\n            if(even_fnc(i)):\n                even_tuple += (i,)\n        else:\n            even_tuple += (i,)\n    return even_tuple\n",
        "test": "assert     even_ele(((1, 2, 3), (4, 5), (6, 7, 8, 9)), even_fnc= lambda x: x % 2 == 0) ",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 2*s*s\n    \ndef lateral_surface_Area(b,s):\n    '''\n    Write a python function to find the lateral surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b*s + b*s + b*s)\n",
        "test": "assert     surface_Area(0, 0) == 0, 'incorrect!'",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"Dictionary is empty\")\n        return True\n    else:\n        print(\"Dictionary is not empty\")\n        return False\n",
        "test": "assert     my_dict({}) == True, \"empty dictionary\"",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    result = 0\n    for i in range(num):\n        result += catalan_number(i) * catalan_number(num - 1 - i)\n    return result\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_end = r\"[ly]$\"\n    adverb_list = re.findall(adverb_end, text)\n    return adverb_list\nprint(find_adverbs(\"I am flying to San Francisco\"))\nprint(find_adverbs(\"The wolf howled out of the room\"))\n",
        "test": "assert     find_adverbs('') == []",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) == n:\n            heapq.heappushpop(heap, item)\n        else:\n            heapq.heappush(heap, item)\n    return heapq.nlargest(n, heap)\n",
        "test": "assert     expensive_items( {'item1':'12.00','item2':'15.00','item3':'50.00'}, 1) == ['item3'], 'incorrect'",
        "num_ids": 3570,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "test": "assert     split_Arr([1,2,3,4,5,6,7,8,9,10], 4) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "test": "assert     (1, 2, 3) == list_tuple([1, 2, 3])",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([2, 3, 5, 6, 9, 1, 2]) == 8",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i ** 0.5 == int(i ** 0.5):\n            perfect_squares.append(i)\n    return perfect_squares\n",
        "test": "assert     perfect_squares(1, 2) == [1]",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z=complex(x,y)\n    z=cmath.polar(z)\n    z=cmath.rect(z[0],z[1])\n    z=round(z.real,4),round(z.imag,4)\n    return z\n",
        "test": "assert     polar_rect(1,0) == (1,0)",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    return newList\n    \ndef same_List(newList): \n    '''\n    Write a python function to add 'age' to all the elements in a list.\n    '''\n    newList = [x+10 for x in newList]\n    print(newList)\n    return newList\n    \ndef even_List(newList): \n    '''\n    Write a python function to add 'age' to all the even elements in a list.\n    '''\n    newList = [x for x in newList if x%2==0]\n    print(newList)\n    return newList\n",
        "test": "assert     swap_List([1,2,3,4])     ==     [4,2,3,1], \"Wrong\"",
        "num_ids": 948,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #k is the index of the term\n    res = 1\n    if (n>=k):\n        for i in range(k):\n            res = res*(n-i)\n            res = res/float(i+1)\n    return(res)\n    \n",
        "test": "assert     binomial_Coeff(0,0) == 1, f\"the binomial coefficient should be 1 for n=0,k=0. This is wrong. Try again!\"",
        "num_ids": 1158,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match('^0+\\.[0-9]+',ip):\n        ip=re.sub('^0+\\.','',ip)\n    return ip\n",
        "test": "assert     removezero_ip(\"10.100.200.1\") == \"10.100.200.1\"",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # list1 = [1,2,3,4,5,6,7,8]\n    # first_odd = list1[1::2]\n    # first_even = list1[0::2]\n    # diff = [x1 - x2 for (x1, x2) in zip(first_odd, first_even)]\n    # diff = set(diff)\n    # diff = list(diff)\n    # diff.sort()\n    # return diff[0]\n    \n    # return sum(list1[::2]) - sum(list1[1::2])\n    odd_num = []\n    even_num = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_num.append(list1[i])\n        else:\n            odd_num.append(list1[i])\n    diff = even_num[0] - odd_num[0]\n    return diff\n    \n    \nlist1 = [1,2,3,4,5,6,7,8]\nprint(diff_even_odd(list1))\n",
        "test": "assert     diff_even_odd([4,1,5,2,6]) == 3, 'incorrect'",
        "num_ids": 1531,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    #if len(str1)!= len(str2) : \n        #return -1\n    l1,l2 = len(str1),len(str2)\n    \n    i = 0\n    j = 0\n    while i < l1 and j < l2 : \n        if str1[i]!= str2[j] : \n            count += 1\n            if len(str1) == len(str2) :\n                if l1 > l2 : \n                    if str1[i+1:] == str2[j:] : \n                        break\n                elif str1[i:] == str2[j+1:] : \n                    break\n                else : \n                    j += 1\n            elif str1[i+1:] == str2[j:] : \n                break\n            else : \n                j += 1\n        i += 1\n        j += 1\n    return count\n",
        "test": "assert     min_Swaps(\"11100010\", \"11101110\") == 2, \"Wrong output\"",
        "num_ids": 1690,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sum = 0\n    for element in tuple_list:\n        sum += sys.getsizeof(element)\n    return sum\n",
        "test": "assert     tuple_size((1,)) == sys.getsizeof(1)",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if not arr1:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = 0\n    j = 0\n    while i + j < k:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        if j == len(arr2):\n            return arr1[i + k - 1]\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return min(arr1[i], arr2[j])\n",
        "test": "assert     find_kth([1,2,3,4,5,6], [1,2,3,4,5,6], 1) == 1",
        "num_ids": 2420,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_lst = [int(x) for x in str(number)]\n    result = sum([y**len(num_lst) for y in num_lst])\n    if result == number:\n        return True\n    return False\n",
        "test": "assert     armstrong_number(153) == True",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number+1):\n        total+=i\n    average = total/number\n    return total,average\n",
        "test": "assert ",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n    \ndef is_Even_Iterative(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    while (n > 0) : \n        if (n % 2 == 0) : \n            return True\n        else : \n            return False\n",
        "test": "assert     (is_Even(2) == True) ",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = list(str1)\n    s_set = set(s)\n    for i in s_set:\n        if s.count(i) > 1:\n            return i\n    return None\n",
        "test": "assert     first_repeated_char(\"abcc\") == 'c'",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludic.append(i)\n            continue\n        if i == 2:\n            ludic.append(i)\n            continue\n        if i == 3:\n            ludic.append(i)\n            continue\n        for j in range(1, i+1):\n            if i % j == 0:\n                ludic.append(i)\n                break\n    return ludic\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 2824,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print(s.split())\n    print(s.split()[::-1])\n    return \" \".join(s.split()[::-1])\nprint(reverse_words(\"hello world\"))\n",
        "test": "assert     reverse_words('the sky is blue') == 'blue is sky the'",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    import math\n    if num == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(6) == False",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n",
        "test": "assert     radian_degree(90) == 1.5707963267948966",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print('Found {} at start index {} and end index {}.'.format(match.group(), match.start(), match.end()))\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert     find_literals('aaaaa', 'b') == None",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 2617,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n    # if L is greater than the lenght of the list, return an empty list.\n",
        "test": "assert     remove_kth_element([1, 2, 3, 1], 3) == [1, 2, 3]",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[n][N] for n in range(len(test_list)))\n",
        "test": "assert     max_of_nth([[2, 1, 3], [5, 6, 7], [8, 9, 0]], 2) == 7",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #result = []\n    #for item in lst:\n    #    result.append([item[0],item[1]])\n    #return result\n    return [[item[0],item[1]] for item in lst]\n",
        "test": "assert     merge([[1,2], [3,4], [5,6], [7,8]]) ",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result_list = []\n    for i in range(len(test_list)):\n        result_list.append(sum(test_list[:i+1]))\n    return result_list\n",
        "test": "assert     cummulative_sum([1,2,3,4]) ==     [1,3,6,10], \"Try again!\"",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t) / len(t) for t in nums]\n",
        "test": "assert     average_tuple( [(1, 1), (2, 2)] ) == [ 1, 2 ]",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((3,4), (3,4))     == (0, 0)",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(0,steps):\n        if i == d:\n            jumps += 1\n            d += 1\n        elif i > d:\n            jumps += 1\n            d += 2\n        else:\n            jumps += 1\n            d += 1\n    return(jumps)\n",
        "test": "assert     min_Jumps(0, 2) == 0",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        assert isinstance(nums1,list)\n        assert isinstance(nums2,list)\n    except:\n        print(\"Passed argument is not a list\")\n    else:\n        try:\n            assert len(nums1) == len(nums2)\n        except:\n            print(\"Arrays are of unequal length\")\n        else:\n            result = []\n            for i in range(len(nums1)):\n                try:\n                    assert isinstance(nums1[i],int) and isinstance(nums2[i],int)\n                except:\n                    print(\"Arrays are of unequal type\")\n                    break\n                else:\n                    try:\n                        assert nums1[i]!= 0 and nums2[i]!= 0\n                    except:\n                        print(\"Division by zero\")\n                        result.append(0)\n                    else:\n                        result.append(nums1[i]/nums2[i])\n    return result\n",
        "test": "assert     div_list([], []) == []",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    non_num_str = ''\n    for letter in test_str:\n        if letter.isdigit():\n            num_str += letter\n        else:\n            non_num_str += letter\n    return non_num_str + num_str\n",
        "test": "assert     move_num(\"zoozoo\") == \"zoozoo\"",
        "num_ids": 1310,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # return sum(set(sorted(a)).difference(set(sorted(a)[::2])))\n    b = []\n    for i in a:\n        for j in a:\n            if i % j == 0 or j % i == 0:\n                b.append(i)\n    return max(b)\n",
        "test": "assert     largest_subset([1,2,3,4,5,6,8,9,10]) == 10",
        "num_ids": 3530,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    while True:\n        if n == 0:\n            return None\n        if j >= n:\n            return arr1[i + n//2]\n        if i >= n:\n            return arr2[j + n//2]\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if n % 2 == 0:\n                return (arr1[i] + arr2[j])/2\n            else:\n                return max(arr1[i], arr2[j])\n",
        "test": "assert     get_median([], [], 0) == None",
        "num_ids": 3296,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i ** n)\n    return res\n",
        "test": "assert     nth_nums([1, 2, 3, 4], 2) == [1, 4, 9, 16]",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "test": "assert     is_upper('a') == False",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList \n",
        "test": "assert     swap_List(['apple', 'banana']) == ['banana', 'apple'], 'Check the function is passed'",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = r*r*math.pi/2\n    return area\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 2713,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return i+2\n",
        "test": "assert     find_First_Missing([1,2,3,4,5,6])==7, \"test1 not passed\"",
        "num_ids": 3694,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces(\"%20\") == \"%20\"",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8], \"Check again\"",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    left = (x, y-1)\n    right = (x, y+1)\n    up = (x-1, y)\n    down = (x+1, y)\n    \n    return [left, right, up, down]\n    \ndef get_coord(pos, initial = False): \n    '''\n    Write a function to convert the given coordinate tuple to a coordinate index if initial is set to True.\n    '''\n    x, y = pos\n    \n    if initial:\n        return (x + 1) + (y * 4)\n    else:\n        return y + (x * 4)\n",
        "test": "assert     adjac((0, 0), [(1, 0)]) == [(1, 0), (0, 1), (-1, 0), (0, -1)]",
        "num_ids": 1615,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace(' ','')\n",
        "test": "assert     replace_spaces('word') == 'word', 'wrong result'",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    moved_list = [i for i in num_list if i!= 0]\n    moved_list.extend([0] * num_list.count(0))\n    return moved_list\n",
        "test": "assert     move_zero([0,1,3,5,0,0,0]) == [1,3,5,0,0,0,0]",
        "num_ids": 1206,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    arr.sort()\n    for i in range(n) : \n        s += arr[i] ^ arr[n-1-i]\n    return s\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6], 6) ",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n    # build the heap \n    for num in iterable:\n        hq.heappush(h, num)\n    # heap sort\n    for _ in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n",
        "test": "assert     [1,2,3,4] == heap_sort([4,2,3,1])",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<=actual_cost:\n        return True\n    else:\n        return False\n        \n",
        "test": "assert not noprofit_noloss(500,600)",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill = 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)\n    return wind_chill\n",
        "test": "assert     round(wind_chill(1, 10)) == 10",
        "num_ids": 3092,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def remove_start(t):\n        if t[0].islower():\n            return None\n        return t[1:]\n    for i in sample_names:\n        if i.startswith(' '):\n            sample_names.remove(i)\n        else:\n            sample_names.remove(i)\n    sample_names = list(filter(remove_start, sample_names))\n    return sum(map(len, sample_names))\n",
        "test": "assert     (sample_nam(['a', 'b', 'c']) == 0)",
        "num_ids": 2988,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = items[1:-1]\n    if new_items == '':\n        new_items = items[1:]\n    return new_items\n",
        "test": "assert     remove_parenthesis(\"(abc)\") == \"abc\"",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))/2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.find('z') == 0 or text.find('z') == len(text)-1:\n        return False\n    else:\n        return True\n",
        "test": "assert     text_match_wordz_middle('baz') is False, 'not working for single letters'",
        "num_ids": 2821,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k][::-1] + input[k:]\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]",
        "num_ids": 1254,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('I', 'am'), {'dog': True, 'cat': False}) == ('I', 'am', {'dog': True, 'cat': False})",
        "num_ids": 1008,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[0][0]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    \n    avg = sum(cost[n - 1])\n    for i in range(n):\n        if i!= 0:\n            avg -= dp[n - 1][i]\n    \n    avg /= n * n\n    return avg\n",
        "test": "assert     maxAverageOfPath([[1, 1, 1], [2, 2, 1], [4, 3, 1]]) == 2.0",
        "num_ids": 6000,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for key in students:\n        if(students[key][0]>=h and students[key][1]>=w):\n            result[key] = students[key]\n    return result\n    \ndef find_average(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to calculate average height and weight of students with height and weight above the minimum.\n    '''\n    result = 0\n    count = 0\n    for key in students:\n        if(students[key][0]>=h and students[key][1]>=w):\n            result += students[key][0]\n            count += 1\n    return result/count\n    \ndef find_average_height(students,h):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height. Write a function to calculate average height of students with height above the minimal.\n    '''\n    result = 0\n    count = 0\n    for key in students:\n        if(students[key][0]>=h):\n            result += students[key][0]\n            count += 1\n    return result/count\n",
        "test": "assert     filter_data({'Arpita':(172, 63),'Amit':(160, 69),'Shanti':(160, 45),'Shri':(180, 69),'Shubham':(162, 38)}, 173, 80) == {}",
        "num_ids": 1513,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for num1, num2 in zip(nums1, nums2):\n        if num1 == num2:\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3, 4], [1, 4, 3, 2]) == 2, \"Wrong output\"",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    for i in range(len(str(base))):\n        s += int(str(base)[i]) ** power\n    return s\n",
        "test": "assert     power_base_sum(3, 1) == 3",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    x = re.findall(r'\"([^\"]*)\"', text1)\n    for i in x:\n        print(i)\n        \nextract_quotation('''The grass is greener where you water it.\nThe more you water it, the greener it becomes.\nThe laws of physics are not hard to understand.\nThe less you know, the harder it is to learn.'''.strip())\n",
        "test": "assert extract_quotation('hello') is None",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = list(test_tup)\n    new_tup = [tup[0],tup[1]]\n    for i in range(2,len(tup)):\n        new_tup.append(tup[i]*tup[i+1])\n    return tuple(new_tup)\n",
        "test": "assert ",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n",
        "test": "assert     (sum_list([1,2,3],[1,2,3]) == [2,4,6])",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_1 = [item for item, group in groupby(nums)]\n    return nums_1\n",
        "test": "assert     consecutive_duplicates([1,2,2,3,4,4,5]) == [1,2,3,4,5]",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r+math.pi*r*h\n    \ndef cylinder_cubed(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*h\n",
        "test": "assert     lateralsurface_cone(0,0) == 0",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n",
        "test": "assert     replace_specialchar('hello,world. how are you today?. hope you are fine')!= 'hello:world. how are you today?. hope you are fine'",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)-1\n    while start <= end:\n        mid = (start+end)//2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            else:\n                end = mid-1\n        elif A[mid] > x:\n            end = mid-1\n        else:\n            start = mid+1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 1) == 0",
        "num_ids": 1231,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total=1\n    for i in range(len(arr)):\n        total*=arr[i]\n    prod=total\n    for i in range(len(arr)):\n        if arr[i]!=0:\n            left=prod\n            right=prod\n            prod=0\n            for j in range(i,len(arr)):\n                prod=prod*arr[j]\n                right=right//arr[j]\n                if prod<left:\n                    left=prod\n            if right<prod:\n                prod=right\n            total=total-prod\n    return total\n    ",
        "test": "assert     [(1, 6), (0, 6), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6)] ",
        "num_ids": 3380,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # code here\n    a = n\n    b = n & (~(0x55555555))\n    n = a ^ b\n    return n\n",
        "test": "assert     set_middle_bits(10) == -19",
        "num_ids": 2527,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    i = bisect.bisect_left(a, x)\n    a.pop()\n    return i\n",
        "test": "assert     bisect.bisect_left([], 1) == 0",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True\n    else: \n        return False\nprint(check_str('a3'))\nprint(check_str('aeiouAEIOU'))\nprint(check_str('Aa0'))\nprint(check_str('AaeiouAEIOU'))\nprint(check_str('iB'))\nprint(check_str('aeiou'))\n",
        "test": "assert     check_str(\"sting\") == False",
        "num_ids": 4748,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) ==     1",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(0.5 * n * (n + 1)) \n",
        "test": "assert     find_Index(1)     == 1",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n    return test_dict\n",
        "test": "assert     {} == tuple_to_dict(())",
        "num_ids": 841,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s[0] == s[len(s)-1]\n",
        "test": "assert     all_Characters_Same('a') == True",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = float(side)\n    area = (3**(1/2))/4*(side**2)\n    return area\n",
        "test": "assert     math.isclose(area_tetrahedron(1),math.sqrt(3)/4)",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n",
        "test": "assert     rotate_right([1,2,3,4,5,6], 6) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_none(()) == False",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def every_digit(number):\n        '''\n        This function checks if the number is divisible by every digit it contains\n        '''\n        return_value = True\n        if (int(number) % 10!= 0):\n            return_value = False\n        while (int(number) > 1):\n            if (int(number) % 10!= 0):\n                return_value = False\n                break\n            number = int(number) / 10\n        return return_value\n",
        "test": "assert ",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    def area(r,a):\n        s=(math.pi)*(r**2)\n        area=s*(a/360)\n        return area\n    if a>360:\n        return None\n    else:\n        return area(r,a)\n",
        "test": "assert     sector_area(0,0) == 0",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # create a table to store the longest common subsequence \n    # for every pair of strings\n    L = [[[None] for i in range(o + 1)] for j in range(m + 1)]\n    \n    for i in range(m + 1): \n        for j in range(o + 1): \n            for k in range(n + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[k - 1] and X[i - 1] == Z[j - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    \n    # L[m][n][o] contains the length of LCS of X[0..n-1], Y[0..m-1] and Z[0..o-1]\n    return L[m][n][o]\n",
        "test": "assert     lcs_of_three('1231', '1232', '12345') == 3",
        "num_ids": 2386,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub(r'(?<=[a-z])([A-Z]+)',r' \\1',str1)\n    return result\n",
        "test": "assert     capital_words_spaces('') == ''",
        "num_ids": 2372,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = int(nums_str[i])\n    nums_str.sort()\n    for i in range(len(nums_str)):\n        nums_str[i] = str(nums_str[i])\n    return nums_str\n",
        "test": "assert     sorted(sort_numeric_strings(['1', '22', '3333', '4'])) == ['1', '22', '3333', '4']",
        "num_ids": 1320,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([(1, 2), (3, 4)], (5, 6)) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    if i >= 1 and arr[i] > arr[i//2]:\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([], 0) == True",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num = [0, 1]\n    if n < 2:\n        return n\n    for i in range(2, n):\n        num.append(num[i - 1] + num[i - 2])\n    return num[-1]\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l = len(test_list)\n    test_list.sort()\n    return test_list[:K]\n",
        "test": "assert     min_k([(1,1),(2,2),(3,3),(4,4),(5,5),(6,6)], 2) == [(1,1),(2,2)]",
        "num_ids": 2143,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    x = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            x.append(l1[i])\n    return x\n",
        "test": "assert     extract_index_list([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3, 4], 'incorrect'",
        "num_ids": 1799,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n",
        "test": "assert     second_smallest([1,2,3]) == 2",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.b*')\n    result = pattern.search(text)\n    return result!= None\n",
        "test": "assert     (re.search(\"ab*\", \"\") == None)",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    print(test_list)\n    print(\"Length of list is {}\".format(len(test_list)))\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i<j and test_list[i][::-1] == test_list[j]:\n                count+=1\n    return count\n",
        "test": "assert     count_reverse_pairs(['aa','aa']) == 1, 'error'",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for list_ in list1:\n        list_tup = tuple(list_)\n        if list_tup in dict:\n            dict[list_tup] += 1\n        else:\n            dict[list_tup] = 1\n    return dict\n",
        "test": "assert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {(1, 2, 3): 3}",
        "num_ids": 1247,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        return num.replace('.','',1).isdecimal() and '.' in num and num.count('.') == 1\n    elif isinstance(num, int) or isinstance(num, float):\n        return num % 1 == 0\n    else:\n        return False\n",
        "test": "assert     is_decimal(\"12.22.1\") == False",
        "num_ids": 2584,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #x = set(arr)\n    #if len(x) > 1:\n    #    return False\n    #else:\n    #    return True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n",
        "test": "assert     unique_Element([1, 1, 1, 2, 2, 2]) == False",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthlist = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum3 in monthlist:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(12) == True, \"Wrong!\"",
        "num_ids": 2356,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the given array \n    arr.sort() \n    # initialize variables \n    min_diff = arr[1] - arr[0] \n    # traverse the array and find the minimum difference \n    for i in range(n-1): \n        if min_diff > arr[i+1] - arr[i]: \n            min_diff = arr[i+1] - arr[i] \n    return min_diff \n",
        "test": "assert     find_min_diff([1, 2, 3, 4, 5, 10],6) == 1,     \"should be 1\"",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr('1234') == 4",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def get_pow(n):\n        if(n==0):\n            return 0\n        else:\n            return int(math.log(n, 2))+1\n        \n    def is_polite_number(n, d): \n        if(n==0): \n            return 0\n        pow_d = get_pow(d)\n        return is_polite_number(n//2, pow_d) + d*(n%2)\n    \n    def get_polite_number(n):\n        return is_polite_number(n, 2)\n    \n    return get_polite_number(n)\n",
        "test": "assert     is_polite(1) ==     2, \"wrong result\"",
        "num_ids": 2798,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        pairs.append((l1[i],l1[i+1]))\n    return pairs\n",
        "test": "assert     pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 1007,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr_size = len(arr)\n    count = 0\n    for i in range(0, arr_size - 1):\n        for j in range(i + 1, arr_size):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([2, 7, 9, 3, 1, 5], 8) == 2",
        "num_ids": 1216,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l=list(set(li1)-set(li2))\n    l.sort()\n    return l\n",
        "test": "assert Diff( [1,2,3], [1,2]) == [3]",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if (i%2!= 0):\n            sum += pow(i,4)\n    return sum\n",
        "test": "assert     odd_num_sum(0) == 0",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    d = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for c in exp:\n        if c in d.values():\n            s.append(c)\n        elif c in d.keys():\n            if not s or s.pop()!= d[c]:\n                return False\n        else:\n            return False\n    return not s\n",
        "test": "assert not check_expression(\"[{(])\")",
        "num_ids": 1303,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(\" \")\n    output = []\n    for word in words:\n        if len(word)!= K:\n            output.append(word)\n    return \" \".join(output)\n",
        "test": "assert     remove_length('how are you today', 2)             == 'how are you today', 'wrong result'",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    count = 0\n    for match in matches:\n        count = count + 1\n    print(f\"Number of occurances of \\\"{pattern}\\\" is {count}\")\n",
        "test": "assert     occurance_substring(\"abc\",\"abcd\") == None",
        "num_ids": 1266,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list=[]\n    for i in range(len(nums)):\n        if i%2 ==0:\n            pass\n        else:\n            if nums[i]%2==0:\n                pass\n            else:\n                odd_list.append(nums[i])\n    if len(odd_list)>=1:\n        return False\n    else:\n        return True\n",
        "test": "assert     odd_position([]) == True, \"Error\"",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    vowel_count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "test": "assert     count_vowels('abracadabra') == 0",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if arr.count(i)==1:\n            sum+=i\n    return sum\n",
        "test": "assert ",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp_list = []\n    for k, g in groupby(list1):\n        temp_list.append(list(g))\n    \n    return temp_list\n",
        "test": "assert     pack_consecutive_duplicates(['a', 'a', 'b', 'b', 'c', 'c', 'c']) == [ ['a', 'a'], ['b', 'b'], ['c', 'c', 'c'] ], 'Incorrect output for pack_consecutive_duplicates([\\'a\\', \\'a\\', \\'b\\', \\'b\\', \\'c\\', \\'c\\', \\'c\\'])'",
        "num_ids": 1609,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    list_dict = {}\n    for i in list1:\n        tuple_list = tuple(i)\n        list_dict[tuple_list] = list_dict.get(tuple_list, 0) + 1\n    return list_dict\n    ",
        "test": "assert     unique_sublists([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [6, 6], [7, 7], [8, 8], [9, 9]]) ==     {(1, 1): 1, (2, 2): 1, (3, 3): 1, (4, 4): 1, (5, 5): 1, (6, 6): 2, (7, 7): 1, (8, 8): 1, (9, 9): 1}",
        "num_ids": 1816,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # get all the combination of tuples in the list\n    combos = list(combinations(test_list, 2))\n    # take the first element of the tuple and add it to the rest of the elements\n    for i in combos:\n        print(sum(i))\n",
        "test": "assert     find_combinations([(1, 2, 3), (1, 3, 4), (2, 3, 5), (3, 4, 5)]) == {(2, 1, 3), (3, 1, 3), (4, 1, 3), (5, 1, 3), (6, 1, 3), (7, 1, 3), (8, 1, 3), (9, 1, 3), (10, 1, 3), (11, 1, 3), (12, 1, 3), (13, 1, 3), (14, 1, 3), (15, 1, 3)}",
        "num_ids": 4169,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return sum(1 for i in range(1, n + 1) if n % i == 0)\n",
        "test": "assert     count_divisors(1) == 1, 'Incorrect result for count_divisors(1)'",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    start = 0\n    end = 1\n    total_sum = 0\n    while end < len(arr):\n        total_sum += sum(arr[start:end])\n        start += 1\n        end += 2\n    return total_sum\n",
        "test": "assert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 40, \"Check the data type\"",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    min_col = min(r, min(g, b))\n    max_col = max(r, max(g, b))\n    v = max_col\n    delta = max_col - min_col\n    if delta == 0:\n        return 0.0, 0.0, v\n    s = delta/max_col\n    rc = (max_col-r) / delta\n    gc = (max_col-g) / delta\n    bc = (max_col-b) / delta\n    if r == max_col:\n        h = bc-gc\n    elif g == max_col:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "test": "assert     ((rgb_to_hsv(0,0,0) == (0, 0, 0)))",
        "num_ids": 1865,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in list1:\n        if i % 2 == 0:\n            prod = prod * i\n    return prod\n",
        "test": "assert     mul_even_odd([3, 5, 6, 7, 2, 1, 9]) == 12",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.replace('(', '').replace(')', '').split(',')))\n",
        "test": "assert     tuple_str_int(\"1,2,3\") == (1,2,3), \"Wrong result!\"",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0 if a[0] <= x else 1\n    if n == 2:\n        return 0 if a[0] <= x else 1 if a[1] <= x else 2\n    # find the position of the leftmost element greater than or equal to x\n    # and search for a larger element by applying binary search to the right of that position\n    l = bisect.bisect_right(a, x)\n    if l == 0:\n        return 0\n    if l == n:\n        return n\n    while a[l-1] == x:\n        l -= 1\n    if l == 0:\n        return 0\n    return l\n",
        "test": "assert     bisect.bisect_right([1,2,2,2,3], 2.5) == 4",
        "num_ids": 823,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r'ab{3}', text):\n        return True\n    else:\n        return False\nprint(text_match_three('abaaba'))\nprint(text_match_three('abca'))\n",
        "test": "assert     text_match_three('aaabbb')",
        "num_ids": 1007,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if isinstance(test_list, list) and isinstance(test_str, str):\n        return tuple(test_list) + (test_str, )\n    else:\n        return None\n",
        "test": "assert     (new_tuple([1, 2, 3], 'This is a tuple') == (1, 2, 3, 'This is a tuple'))",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     even_position([]) == True",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for x in test_tup:\n        if type(x) == tuple:\n            new_tup += x\n        else:\n            new_tup += (x,)\n    return new_tup\n",
        "test": "assert     remove_nested((1, 1, (2, 3), 4, 5, (6, 7)))",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == type([]):\n            count += 1\n    return count\n",
        "test": "assert     count_list([[], [], []]) == 3",
        "num_ids": 948,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    h = len(arr)-1\n    while(l<=h):\n        m = (l+h)//2\n        if(arr[m]>x):\n            h = m-1\n        elif(arr[m]<x):\n            l = m+1\n        else:\n            if(m==len(arr)-1 or arr[m+1]!=x):\n                return m\n            else:\n                l = m+1\n    return -1\n",
        "test": "assert     last([1, 2, 3, 4, 5, 6], 6) == 5",
        "num_ids": 3269,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    m = re.search(r'a.*?b$', text)\n    return m!= None\n",
        "test": "assert     text_starta_endb('abcdef') == False, 'abcdef should return False'",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({1: 2, 3: 3}) == 5, 'incorrect'",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n>0:\n        return n * (n + 1) // 2\n    else:\n        return \"The number should be greater than 0\"\n",
        "test": "assert     sum_odd(1) == 1, \"Check your code again\"",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert     _sum([1, 2, 3]) == 6, \"Incorrect\"",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d < 0 or d >= 32:\n        return n\n    n = bin(n)[2:]\n    d = 32-d\n    return int('0b'+n[:d]+n[d:],2)\n",
        "test": "assert     left_rotate(0b101010,1) == 0b101010",
        "num_ids": 2632,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "test": "assert     remove_all_spaces('  ') == '', 'incorrect'",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x == y) and (y == z) and (x == z):\n        return 3\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(1,2,3) == 0",
        "num_ids": 975,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # start writing your code here\n    length = len(arr)\n    is_sorted = False\n    index = 1\n    while not is_sorted:\n        if arr[index] < arr[index-1]:\n            is_sorted = True\n        index = (index + 1) % length\n    return index - 1\n",
        "test": "assert     count_rotation([4,5,6,7,0,1,2]) == 4, \"count_rotation should return 4\"",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is perfect square\n    x = int(math.sqrt(n))\n    return (x * x == n)\n",
        "test": "assert     is_perfect_square(1) == True",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([1, 3, 2, 4, 5, 6]) == True",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        sum = 0\n        for num in list:\n            sum += num\n        if sum > max_sum:\n            max_sum = sum\n            max_list = list\n    return max_list\n",
        "test": "assert     max_sum_list([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]",
        "num_ids": 1666,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return sum([1 for x in test_str if x.isupper()])\n",
        "test": "assert     max_run_uppercase('Sumitkumar') == 1, 'Incorrect output'",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if(i%2!=0):\n            return i\n",
        "test": "assert     first_odd([1,2,3,4,5,6,7,8,9]) == 1",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k = 0\n    for i in test_tup:\n        if K == i:\n            k += 1\n    return k\n",
        "test": "assert     check_K([(1,1,1), (1,1,1), (1,1,1)], 2) ==     False",
        "num_ids": 1083,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if(test_tup2[0] < test_tup1[0] and test_tup2[1] < test_tup1[1] and test_tup2[2] < test_tup1[2] and test_tup2[3] < test_tup1[3] and test_tup2[4] < test_tup1[4]):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_smaller((1,5,3), (5,3,2,4)) == False",
        "num_ids": 1313,
        "indeed": false
    }
]