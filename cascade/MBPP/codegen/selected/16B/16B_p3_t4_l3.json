[
    {
        "number": 2,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n",
        "test": "assert     similar_elements([1, 2, 3, 4], [4, 5, 6, 7]) == [4], 'incorrect'",
        "num_ids": 505
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    #non_prime_list=[]\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(5) is False",
        "num_ids": 321
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]\n",
        "test": "assert     (heap_queue_largest([7, 6, 5, 4, 3, 2, 1], 0) == [])",
        "num_ids": 524
    },
    {
        "number": 6,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x &(x-1) ==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     (is_Power_Of_Two(10) == False)",
        "num_ids": 341
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n",
        "test": "assert find_char_long(\"A cat in a hat\") == []",
        "num_ids": 450
    },
    {
        "number": 8,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n*n)\n    return result\n",
        "test": "assert     [1, 4, 9] == square_nums([1,2,3])",
        "num_ids": 145
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    temp=str\n    count=0\n    while(str!=temp):\n        count=count+1\n        temp=temp[1:]+temp[0]\n    return count\n",
        "test": "assert     find_Rotations('xzx')     == 0, \"rotations of 'xzx' should be 0\"",
        "num_ids": 504
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n    return s\n",
        "test": "assert     remove_Occ('123','3') == '12', 'Should be 12'",
        "num_ids": 423
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = lambda m: sum(m))\n",
        "test": "assert ",
        "num_ids": 423
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if h == 0 : \n        return 0\n    if l == 0 or b == 0 : \n        return 0\n    return float(l*b*h)\n",
        "test": "assert     find_Volume(1,2,3) == 6, \"incorrect find_Volume, try again!\"",
        "num_ids": 257
    },
    {
        "number": 16,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return not re.search(r'_[a-z]', text) is None\n",
        "test": "assert     text_lowercase_underscore('abcdef') == False",
        "num_ids": 351
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "test": "assert     square_perimeter(4)     == 16, \"Should be 16\"",
        "num_ids": 112
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [None]*(len(string))\n    j = 0\n    for i in range(len(string)):\n        if string[i] in result:\n            continue\n        else:\n            result[j] = string[i]\n            j += 1\n    return result\n",
        "test": "assert     str_to_list('xyz', 'xyz') == 'xyz'",
        "num_ids": 414
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dictnums = {}\n    for i in arraynums:\n        if i in dictnums:\n            return True\n        else:\n            dictnums[i] = 1\n    return False\n",
        "test": "assert     test_duplicate([0]) == False, \"test_duplicate failed\"",
        "num_ids": 331
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%3 == 0 or x%5 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(2) == False",
        "num_ids": 315
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    result = num % 10\n    rem = num // 10\n    while rem!= 0:\n        result = result * 10 + rem % 10\n        rem = rem // 10\n    return result\n",
        "test": "assert     rev(10) == True",
        "num_ids": 177
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    size = len(arr) \n    arr.sort() \n",
        "test": "assert ",
        "num_ids": 324
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x < 0 and y > 0):\n        return True\n    elif(x > 0 and y < 0):\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(2,3)==False",
        "num_ids": 322
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 389
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n-1,-1,-1):\n        dp[i][i] = 1\n        for j in range(i+1,n):\n            if s[i] == s[j] and (j-i==1 or dp[i+1][j-1]):\n                dp[i][j] = 1\n    return sum([sum(row) for row in dp])\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 2376
    },
    {
        "number": 62,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n",
        "test": "assert     smallest_num([3, 5, -1, 1, -12, -42]) == -42",
        "num_ids": 268
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert     max_difference([1,2,3,4,5,6,7,8,9,10]) == 9, \"incorrect result\"",
        "num_ids": 771
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks, key=itemgetter(1)))\n",
        "test": "assert     subject_marks([('English', 75), ('Maths', 80), ('Science', 90)]) == \\",
        "num_ids": 433
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([]) == 0, 'the empty list returns 0'",
        "num_ids": 219
    },
    {
        "number": 66,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if(i>0):\n            count += 1\n    return count\n",
        "test": "assert     pos_count([])                 == 0, \"empty list\"",
        "num_ids": 384
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return bell_numbers.bell(n)\n",
        "test": "assert ",
        "num_ids": 229
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]<A[i+1]:\n            return True\n        elif A[i]>A[i+1]:\n            return False\n    return True\ndef is_Monotonic1(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=2:\n        return True\n    else:\n        if A[0]<A[1]:\n            for i in range(2,len(A)):\n                if A[i]<=A[i-1]:\n                    return False\n            return True\n        else:\n            for i in range(2,len(A)):\n                if A[i]>=A[i-1]:\n                    return False\n            return True\n",
        "test": "assert     is_Monotonic([-5, -1, -10]) == True",
        "num_ids": 476
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(l)\n    m = len(s)\n    if n < m:\n        return False\n    for i in range(0, n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1, 2, 3], [2, 4]) == False, 'Error'",
        "num_ids": 520
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if(len(Input[i])!= len(Input[j])):\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,2),(2,4),(4,5)]),'should return true'",
        "num_ids": 299
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    def _comb_sort(nums, begin, end):\n        if end <= begin:\n            return\n        pivot = nums[begin]\n        left = begin + 1\n        right = end\n        while True:\n            while left <= right and nums[left] <= pivot:\n                left += 1\n            while right >= left and nums[right] >= pivot:\n                right -= 1\n            if right < left:\n                break\n            swap(nums, left, right)\n        _comb_sort(nums, begin, right)\n        _comb_sort(nums, right + 1, end)\n    _comb_sort(nums, 0, len(nums) - 1)\n",
        "test": "assert ",
        "num_ids": 346
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n & 3) == 0:\n        n = (n >> 2) + 3\n    else:\n        n = ((n >> 2) + 3) << 2\n    i = 0\n    while i < n:\n        if (i*i == n) or ((i*i) + (i << 1)) == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert     dif_Square(7) == True",
        "num_ids": 471
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # if the patterns are not valid, the return the False\n    if len(patterns) == 0:\n        return False\n    # store the color for each pattern\n    color_sequence = []\n    # store the pattern for each color\n    pattern_sequence = []\n    # store the result\n    result = True\n    for i in range(len(colors)):\n        color_sequence.append(colors[i])\n        pattern_sequence.append(patterns[i])\n    for i in range(len(patterns)):\n        if i + 1 < len(patterns):\n            if pattern_sequence[i] == pattern_sequence[i + 1]:\n                pass\n            else:\n                result = False\n                return result\n    if pattern_sequence[-1]!= pattern_sequence[0]:\n        result = False\n    # return the result\n    return result\n",
        "test": "assert     is_samepatterns([1,1,2], [1,2,1]) == False, 'Fails'",
        "num_ids": 602
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for el in test_list:\n        if el[0] % K == 0 and el[1] % K == 0:\n            result.append(el)\n    return result\n",
        "test": "assert     find_tuples([(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4)], 5) == []",
        "num_ids": 590
    },
    {
        "number": 77,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    return False\n",
        "test": "assert     is_Diff(121) == True",
        "num_ids": 151
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\nprint(word_len('hello'))\n",
        "test": "assert     word_len('heLLo') == False, 'Incorrect'",
        "num_ids": 281
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1)*(n+2))/6)\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 255
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4*math.pi*r**3)/3\n    return volume\n",
        "test": "assert     round(volume_sphere(2), 3) == 44.414, \"Error in calculating volume of sphere\"",
        "num_ids": 148
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)%26\n    return chr(sum%26)\n",
        "test": "assert     get_Char(\"geeks\") == \"eke\"",
        "num_ids": 285
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def nth_number(n):\n        number = [0]\n        count = 0\n        while(count!= n):\n            count += 1\n            number.append(0)\n            if count > 1:\n                for i in range(1, count):\n                    number.append(number[count-i] + number[count-i-1])\n            number.append(0)\n        return number[-1]\n    return nth_number(n)\n",
        "test": "assert ",
        "num_ids": 356
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = (4 * math.pi * r ** 2)\n    return sa\n",
        "test": "assert     surfacearea_sphere(3) == 4 * math.pi * (3 ** 2)",
        "num_ids": 246
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def hexagon(n):\n        return n * n * 3\n",
        "test": "assert     centered_hexagonal_number(3) == 12, \"wrong result\"",
        "num_ids": 237
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict = dict1.copy()\n    dict.update(dict2)\n    dict.update(dict3)\n    return dict\ndef merge_dictionaries_three_one_line(dict1,dict2,dict3):\n    return {**dict1, **dict2, **dict3}\ndef merge_dictionaries_three_dict_comprehension(dict1,dict2,dict3):\n    return {**dict1, **dict2, **dict3}\ndef merge_dictionaries_three_version_one(dict1,dict2,dict3):\n    dict_all = {}\n    dict_all.update(dict1)\n    dict_all.update(dict2)\n    dict_all.update(dict3)\n    return dict_all\ndef merge_dictionaries_three_version_two(dict1,dict2,dict3):\n    dict_all = dict1.copy()\n    dict_all.update(dict2)\n    dict_all.update(dict3)\n    return dict_all\n",
        "test": "assert     merge_dictionaries_three({1: 'd'}, {2: 'e'}, {3: 'f'}) == {1: 'd', 2: 'e', 3: 'f'}",
        "num_ids": 961
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list_freq = {}\n    for i in list1:\n        if i in list_freq.keys():\n            list_freq[i] += 1\n        else:\n            list_freq[i] = 1\n    return list_freq\n",
        "test": "assert ",
        "num_ids": 464
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return 10**(len(str(N))-1)\n",
        "test": "assert     closest_num(11) == 10",
        "num_ids": 164
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(len(list1[i]))\n    return max(list2)\n",
        "test": "assert     len_log(['hello', 'world']) == 5",
        "num_ids": 234
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
        "test": "assert     find_substring(['1', '2', '4', '5', '6'], '6') == True",
        "num_ids": 348
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    m = 0\n    for i in range(1, n):\n        if(abs(n - n/i)!= abs(m - m/i)):\n            return False\n    return True\n",
        "test": "assert     is_undulating(3) == False",
        "num_ids": 255
    },
    {
        "number": 93,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        return 1/power(a, -b)\n    elif b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a, b-1)\n",
        "test": "assert     power(2,3) == 8",
        "num_ids": 337
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_value = min(test_list, key=itemgetter(1))\n    return test_list.index(smallest_value)\n",
        "test": "assert     index_minimum([(3, 2), (5, 1), (2, -2)]) == 2",
        "num_ids": 405
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min_len=1000\n    for item in lst:\n        if len(item)<min_len:\n            min_len=len(item)\n    return min_len\n",
        "test": "assert     Find_Min_Length([[1], [2, 3], [1, 2, 3]])     ==     1",
        "num_ids": 626
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert     divisor(6) == 4, \"Wrong\"",
        "num_ids": 285
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for x in list1:\n        counts[x] = counts.get(x, 0) + 1\n    return counts\n",
        "test": "assert     frequency_lists([1, 2, 3, 3, 3, 4]) == { 1: 1, 2: 1, 3: 3, 4: 1 }",
        "num_ids": 285
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for x in numbers:\n        result *= x\n    return result / len(numbers)\n",
        "test": "assert     multiply_num([0, 0, 0, 0, 0]) == 0",
        "num_ids": 262
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "test": "assert     decimal_to_binary(10) == '1010', 'test failed'",
        "num_ids": 290
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    if s[::-1] == s:\n        return None\n    \n    n = len(s)\n    for i in range(n):\n        if s[i]!= s[n-1-i]:\n            a = s[0:i] + s[i+1:n]\n            b = s[0:n-1-i] + s[n-i:]\n            if int(a) > int(b):\n                return int(b)\n            else:\n                return int(a)\n",
        "test": "assert     sys.version_info[0] == 3",
        "num_ids": 683
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr = sorted(arr)\n    return arr[k-1]\n",
        "test": "assert     kth_element([1, 2, 3, 4, 5, 6, 7], 1) == 1",
        "num_ids": 446
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #result = ''.join([word[0].upper(), word[1:]])\n    result = list(word)\n    result[0] = result[0].upper()\n    return \"\".join(result)\n",
        "test": "assert     snake_to_camel(\"snake_cased_test\") == \"snakeCasedTest\", \"It should work for a snake cased test\"",
        "num_ids": 550
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 1: \n    count=0\n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    return count\n    \ndef Eulerian_path(n, m):\n    '''\n    Write a function to find the Eulerian path in a graph with n nodes \n    and m edges.\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 2: \n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    count=0\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    #step 3: \n    # we need to find a Eulerian path on this graph,\n    # so we must check if the graph has an Eulerian cycle on it.\n    # if it does, then we can find an Eulerian path on it by Eulerian_cycle(n, m).\n    if count==n-1:\n        return Eulerian_cycle(n, m)\n    if count>n-1:\n        return 0\n    #if the graph doesn't have an Eulerian cycle on it,\n    # then we can't find an Eulerian path on it.\n    else:\n        return 0\n    \ndef Eulerian_cycle(n, m):\n    '''\n    Write a function to find an Eulerian cycle on a graph with n nodes \n    and m edges.\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 4: \n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    count=0\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    #step 5: \n    # we need to find a Eulerian cycle on this graph,\n    # so we must check if the graph has an Eulerian path on it.\n    # if it does, then we can find an Eulerian path on it by Eulerian_path(n, m).\n    if count==n-1:\n        return Eulerian_path(n, m)\n    #if the graph doesn't have an Eulerian cycle on it,\n    # then we can't find an Eulerian path on it.\n    else:\n        return 0\n    \ndef Eulerian_cycle_and_path(n, m):\n    '''\n    Write a function to find an Eulerian cycle and path on a graph with n nodes \n    and m edges.\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 4: \n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    count=0\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    #step 5: \n    # we need to find an Eulerian cycle on this graph,\n    # so we must check if the graph has an Eulerian path on it.\n    # if it does, then we can find an Eulerian path on it by Eulerian_path(n, m).\n    if count==n-1:\n        return Eulerian_path(n, m)\n    #if the graph doesn't have an Eulerian cycle on it,\n    # then we can't find an Eulerian path on it.\n    else:\n        return 0\n    \ndef Eulerian_path_to_cycle(n, m):\n    '''\n    Write a function to find an Eulerian cycle and path on a graph with n nodes \n    and m edges.\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 4: \n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    count=0\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    #step 5: \n    # we need to find an Eulerian cycle on this graph,\n    # so we must check if the graph has an Eulerian path on it.\n    # if it does, then we can find an Eulerian path on it by Eulerian_path(n, m).\n    if count==n-1:\n        return Eulerian_path(n, m)\n    #if the graph doesn't have an Eulerian cycle on it,\n    # then we can't find an Eulerian path on it.\n    else:\n        return 0\n        \ndef Eulerian_path_to_cycle(n, m):\n    '''\n    Write a function to find an Eulerian cycle and path on a graph with n nodes \n    and m edges.\n    '''\n    if n%2!=0:\n        return 0\n    if m>n:\n        m=n\n    #step 4: \n    # a(n, m) is the number of edges in a Eulerian path on a graph with n nodes \n    # and m edges, where every node has an edge except one.\n    count=0\n    for i in range(n):\n        for j in range(i, n):\n            if (i+j)%2==0:\n                count+=1\n    #step 5: \n    # we need to find an Eulerian cycle on this graph,\n    # so we must check if the graph has an Eulerian path on it.\n    # if it does, then we can find an Eulerian path on it by Eulerian_path(n, m).\n    if count==n-1:\n        return Eulerian_path(n, m)\n    #if the graph doesn't have an Eulerian cycle on it,\n    # then we can't find an Eulerian path on it.\n    else:\n        return 0\n",
        "test": "assert     eulerian_num(0, 0) == 0",
        "num_ids": 573
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_lists = []\n    for i in input_list:\n        if len(i) > 1:\n            list_of_lists.append(sorted(i))\n        else:\n            list_of_lists.append(i)\n    return list_of_lists\n    \ndef merge_lists(list_of_lists):\n    '''\n    Write a function to merge multiple lists into a single list.\n    '''\n    list_to_return = []\n    for i in list_of_lists:\n        list_to_return.extend(i)\n    return list_to_return\n",
        "test": "assert     sort_sublists([['d','b'], ['c','a'], ['d','c'], ['a','b']]) == [['a','b'], ['a','d'], ['b','d'], ['c','d']]",
        "num_ids": 813
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # add code here\n    return sum(1 for elem in lst if elem)\n",
        "test": "assert     count([True, False, False, True]) == 2",
        "num_ids": 206
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(\"\\n[!] Appending the list to tuples\")\n    print(\"[!] The list to append is: {}\".format(test_list))\n    print(\"[!] The tuples to append to are: {}\".format(test_tup))\n    for i in range(len(test_tup)):\n        test_tup[i] = list(test_tup[i])\n        test_tup[i].append(test_list)\n        print(\"[!] The appended tuple is: {}\".format(test_tup[i]))\n    print(\"[!] Done!\")\n",
        "test": "assert     add_lists([1, 2, 3], (1, 2, 3, 4)) == [1, 2, 3, 1, 2, 3, 4], 'Failed'",
        "num_ids": 464
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    n1 = len(num1)\n    n2 = len(num2)\n    n3 = len(num3)\n    ans = [None]*(n1+n2+n3)\n    while p1<n1 and p2<n2 and p3<n3:\n        if num1[p1]<=num2[p2] and num1[p1]<=num3[p3]:\n            ans[p1+p2+p3] = num1[p1]\n            p1+=1\n        elif num2[p2]<=num1[p1] and num2[p2]<=num3[p3]:\n            ans[p1+p2+p3] = num2[p2]\n            p2+=1\n        else:\n            ans[p1+p2+p3] = num3[p3]\n            p3+=1\n    while p1<n1:\n        ans[p1+p2+p3] = num1[p1]\n        p1+=1\n    while p2<n2:\n        ans[p1+p2+p3] = num2[p2]\n        p2+=1\n    while p3<n3:\n        ans[p1+p2+p3] = num3[p3]\n        p3+=1\n    return ans\n    \ndef rearrange_digits(input_list):\n    '''\n    You are given a list of four integers and must return a new list with the digits of the four integers in the exact same order, with zeros between non-zero digits.\n    '''\n    n = len(input_list)\n    if n<4:\n        return []\n    elif n==4:\n        return merge_sorted_list(input_list,input_list,input_list)\n    else:\n        half = n//2\n        left = []\n        right = []\n        for i in range(half):\n            left.append(input_list[i])\n        for i in range(half,n):\n            right.append(input_list[i])\n        left = rearrange_digits(left)\n        right = rearrange_digits(right)\n        return merge_sorted_list(left,right,[0]*(n-len(left)-len(right)))\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 559
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(0,len(s)):\n            if (s[j] == '1'):\n                count+=1\n        temp = s\n        s = s[1:] + s[0]\n        s = s[-1] + s[:-1]\n        \n    return count\n",
        "test": "assert     odd_Equivalent(\"010\",4) == 4",
        "num_ids": 309
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common(nestedlist):\n        if nestedlist[0] == nestedlist[1]:\n            return nestedlist[0]\n        elif nestedlist[0]!= nestedlist[1]:\n            return nestedlist[0]\n        else:\n            return common(nestedlist[1:])\n    if isinstance(nestedlist, list):\n        return common(nestedlist)\n    else:\n        return None\n",
        "test": "assert common_in_nested_lists([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 1117
    },
    {
        "number": 113,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('0') == True, 'incorrect'",
        "num_ids": 178
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = []\n    for i in list1:\n        if len(i) == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    if False in result:\n        return False\n    else:\n        return True\n    \n",
        "test": "assert     empty_dit([{1:1}, {1:1}, {}]) == False, \"False\"",
        "num_ids": 355
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    str_num = ''\n    for num in nums:\n        str_num += str(num)\n    return int(str_num)\n",
        "test": "assert     tuple_to_int((0, 0, 0, 0)) == 0",
        "num_ids": 2133
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    #return [list(map(float, sublist)) for sublist in test_list]\n    return [list(map(float, sublist)) for sublist in test_list]\n",
        "test": "assert     list_to_float([[1, 2, 3, '4.5'], [5, 6, 7.0, 8]]) == [[1.0, 2.0, 3.0, 4.5], [5.0, 6.0, 7.0, 8.0]], 'incorrect output'",
        "num_ids": 214
    },
    {
        "number": 118,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "test": "assert     string_to_list(\"abc def\") == ['abc', 'def'], 'incorrect'",
        "num_ids": 225
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr = sorted(arr)\n    for num in arr:\n        if arr.count(num) == 1:\n            return num\n",
        "test": "assert ",
        "num_ids": 241
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_val = 0\n    tup_list = []\n",
        "test": "assert     max_product_tuple([(6,-3),(1,7),(-2,4),(5,0)]) == 12",
        "num_ids": 786
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    tot = 0\n    for i in range(2, limit):\n        # if sum of proper divisors of i is equal to i, then it is amicable\n        if is_amicable_number(i):\n            tot += i\n",
        "test": "assert     amicable_numbers_sum(10000) == 31626",
        "num_ids": 235
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = cmath.phase(a)\n    d = cmath.phase(b)\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex(a,b))\n    c = cmath.phase(complex",
        "test": "assert ",
        "num_ids": 2051
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    for i in range(len(string)):\n        count = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count += 1\n            elif string[j] == '1':\n                count -= 1\n            if count > max:\n                max = count\n    return max\n",
        "test": "assert     find_length('0100') == 2",
        "num_ids": 2218
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    d=set()\n    for i in range(1,a):\n        if a%i==0:\n            d.add(i)\n    for j in range(1,b):\n        if b%j==0:\n            d.add(j)\n    return d\n",
        "test": "assert ",
        "num_ids": 370
    },
    {
        "number": 127,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(2, 3) == 6, \"Actual: \" + str(multiply_int(2, 3))",
        "num_ids": 170
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n",
        "test": "assert     long_words(3, ['hi', 'bye', 'you', 'are', 'welcome', 'to', 'us']) == []",
        "num_ids": 386
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the expected sum for each row\n    row_sums = []\n    for i in range(0, len(my_matrix)):\n        sum = 0\n        for j in range(0, len(my_matrix[i])):\n            sum += my_matrix[i][j]\n        row_sums.append(sum)\n",
        "test": "assert     magic_square_test(",
        "num_ids": 793
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # return max(set(nums), key=nums.count)\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 0:\n        return None\n    result = []\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        d = defaultdict(int)\n        for i in nums:\n            d[i] += 1\n        for i,j in d.items():\n            if j == max(d.values()):\n                result.append(i)\n        return max(result)\n",
        "test": "assert     max_occurrences([1, 2, 2, 3]) == 2",
        "num_ids": 600
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    str1 = list(str1)\n    str2 = []\n    vowel = False\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel = True\n            str2.insert(0, str1[i])\n        elif str1[i] not in vowels and vowel == True:\n            vowel = False\n            str2.insert(0, str1[i])\n    str1 = ''.join(str2)\n    return str1\n",
        "test": "assert     reverse_vowels('aeiou') == 'uoiea', 'aeiou'",
        "num_ids": 455
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = ''\n    for i in tup1:\n        string1 += str(i)\n        string1 += ','\n    string1 = string1[:-1]\n    return string1\n",
        "test": "assert     tup_string((1,2,3, 'a')) == '(1,2,3,a)'",
        "num_ids": 232
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([n for n in nums if n < 0])\n",
        "test": "assert     sum_negativenum([1,2,3,4,5]) == 0",
        "num_ids": 212
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "test": "assert     hexagonal_num(1)     == 1",
        "num_ids": 277
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i] == 0:\n            count += 1\n    return count/n\n",
        "test": "assert zero_count([1,2,0,0,4,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "num_ids": 2385
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        for x in range(2,n):\n            if n == 2**x:\n                return 1\n        return 0\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 527
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "test": "assert       circle_circumference(1) == 6.283185307179586",
        "num_ids": 191
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for n in test_list:\n        if type(n) is list:\n            result += extract_singly(n)\n        else:\n            result.append(n)\n    return result\n",
        "test": "assert     extract_singly([[1, 2, 3], [4, 5], [6, 7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 660
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(arr, index):\n        '''\n        Flips a list until a value on that index becomes 0.\n        '''\n        i = len(arr) - 1\n        while i >= index and arr[i] == 0:\n            i -= 1\n        if i < index:\n            return arr\n        else:\n            while i >= index and arr[i] == 1:\n                i -= 1\n            arr[i] = 1\n            arr[index] = 0\n            return flip(arr, index+1)\n    for i in range(len(nums)):\n        arr = flip(nums, i)\n        if i < len(nums):\n            print(flip(arr, i))\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 558
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_samepair([1, 2, 3],[2, 3, 1],[3, 2, 1]) == 0, \"Check\"",
        "num_ids": 595
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = list(Input)\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count\n",
        "test": "assert     find_lists(()) == 0",
        "num_ids": 355
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    sorted_arr = sorted(arr)\n    max_diff = sorted_arr[-1] - sorted_arr[0]\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([10, 10, 9, 6, 2, 1]) == 9",
        "num_ids": 469
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n",
        "test": "assert     (find_solution(3, 2, 1) == None)",
        "num_ids": 342
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    res = []\n    for i in list1:\n        if i not in list2:\n            res.append(i)\n    return res\n",
        "test": "assert     remove_elements([2, 3, 1, 2, 3], [2, 1]) == [3, 3]",
        "num_ids": 419
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n",
        "test": "assert     sum_series(10) == 30, \"test failed\"",
        "num_ids": 195
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s < 3:\n        return 0\n    return (s / 2) ** 2 * tan(pi / s) * (1 / 2 + 1 / (2 * s))\n",
        "test": "assert     area_polygon(4, 5) == 20, \"Error area_polygon(4, 5) == 20\"",
        "num_ids": 375
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divs1 = 0 \n    sum_of_divs2 = 0 \n    for i in range(1,n): \n        if (n % i == 0): \n            sum_of_divs1 += i \n    sum_of_divs1 = sum_of_divs1 / n \n    \n    for j in range(1, n): \n        if (n % j == 0): \n            sum_of_divs2 += j \n    sum_of_divs2 = sum_of_divs2 / n \n    \n    if (sum_of_divs1 == sum_of_divs2): \n        return True \n    else: \n        return False\n",
        "test": "assert     div_sum(6) ==     True",
        "num_ids": 2233
    },
    {
        "number": 165,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(alpha)):\n            if str1[i].lower() == alpha[j].lower():\n                count += 1\n    return count\n",
        "test": "assert     count_char_position('A') == 1",
        "num_ids": 434
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count ",
        "test": "assert     find_even_pair([1, 2, 3]) == 1",
        "num_ids": 335
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n",
        "test": "assert     (next_power_of_2(3) == 4), \"Incorrect\"",
        "num_ids": 220
    },
    {
        "number": 168,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for y in a:\n        if y == x:\n            count += 1\n    return count\n",
        "test": "assert     frequency([10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 30, 30, 30, 30, 30], 10) == 4",
        "num_ids": 554
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total
        "test": "assert     sum_range_list([1, 3], 0, 1) == 1, \"Wrong result\"",
        "num_ids": 2672
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "test": "assert     perimeter_pentagon(10)     == 50, \"wrong answer for pentagon with 10\"",
        "num_ids": 241
    },
    {
        "number": 172,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('abc') == 0",
        "num_ids": 300
    },
    {
        "number": 222,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    import datetime\n    check_data_type = True\n    i = 0\n    while i < len(test_tuple) - 1:\n        if type(test_tuple[i])!= type(test_tuple[i+1]):\n            check_data_type = False\n        i += 1\n    return check_data_type\n",
        "test": "assert     not check_type((1, True, ['ABC', 3.7])) ",
        "num_ids": 402
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    else:\n        if x == arr[n//2]:\n            return True\n        elif x < arr[n//2]:\n            return is_majority(arr[:n//2], len(arr[:n//2]), x)\n        else:\n            return is_majority(arr[n//2:], len(arr[n//2:]), x)\n",
        "test": "assert     is_majority([0,1,2,2,2,2,3],7,2) == True",
        "num_ids": 382
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "test": "assert     count_Set_Bits(2) == 1",
        "num_ids": 283
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i%2 == 0])\n",
        "test": "assert     odd_values_string(\"\") == \"\", \"This is not the correct implementation\"",
        "num_ids": 351
    },
    {
        "number": 227,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n",
        "test": "assert     min_of_three(1,1,1) == 1",
        "num_ids": 362
    },
    {
        "number": 228,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if ((i ^ n) == 0):\n            return 0\n    return 1\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(5,0,15) == False ",
        "num_ids": 554
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    j = -1\n    for i in range(n):\n        if arr[i] < 0:\n            j += 1\n            arr[j], arr[i] = arr[i], arr[j]\n    return arr\n",
        "test": "assert     re_arrange_array([1, -2, 3, -4, 5, 6, 7, 8], 2) == [-2, 1, 3, -4, 5, 6, 7, 8], \"incorrect result\"",
        "num_ids": 574
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n    # return str1.replace(' ', char)\n    \nprint(replace_blank(\"This is a test\",'*'))\n",
        "test": "assert     replace_blank(\"codeleet\", \"z\") == \"codeleet\", \"replace_blank: error 1\"",
        "num_ids": 329
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq._heapify_max(list1)\n    output=[]\n    for i in range(n):\n        output.append(heapq._heappop_max(list1))\n    return output\n",
        "test": "assert larg_nnum([10, 20, 30, 40, 50], 2) == [40, 50]",
        "num_ids": 400
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n",
        "test": "assert     lateralsuface_cylinder(5,10) == 276.61, \"Wrong answer!\"",
        "num_ids": 235
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n",
        "test": "assert     volume_cube(1) == 1, 'error'",
        "num_ids": 163
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n >> 1)\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 309
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts \n",
        "test": "assert     check_occurences([]) == {}",
        "num_ids": 1016
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            substring = str[i:j + 1]\n            if len(substring) > 0 and substring[0]!= '0':\n                result += 1\n    return result \n  \ndef number_of_substrings(str):\n  return sum(len(str[i:j + 1]) > 0 and str[i:j + 1][0]!= '0' \n             for i in range(len(str)) for j in range(len(str)))\n",
        "test": "assert     number_of_substrings('')     == 0, \"Number of substrings of an empty string should be zero\"",
        "num_ids": 762
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    number_of_sequences = 0\n    \n    for i in range(1,m): \n        for j in range(1,i): \n            if (i+j) > m: \n                break \n            else: \n                number_of_sequences += 1\n    \n    return number_of_sequences \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     get_total_number_of_sequences(4,4) == 2",
        "num_ids": 2341
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    assert len(list1) >= len(list2)\n    list1[-1:] = list2\n    return list1\n    ",
        "test": "assert     replace_list([1,2,3,4,5,6,7], [8,9,10,11,12,13,14]) == [1,2,3,4,5,6,8,9,10,11,12,13,14]",
        "num_ids": 562
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for ch in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac('') == 0",
        "num_ids": 284
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    next_perfect_square = N + 1\n    while math.sqrt(next_perfect_square) % 1!= 0:\n        next_perfect_square += 1\n    return next_perfect_square\n",
        "test": "assert     next_Perfect_Square(0) == 1, 'next_Perfect_Square(0) is wrong'",
        "num_ids": 459
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #max sum is the current max sum\n    #first index is the left most point\n    #second index is the right most point\n    max_sum = 0\n    first = 0\n    last = len(arr) - 1\n    current_sum = 0\n    while first <= last:\n        if arr[first] < arr[last]:\n            current_sum = arr[first] + arr[last]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_start = first\n                max_end = last\n            last -= 1\n        else:\n            current_sum = arr[first] + arr[last]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_start = first\n                max_end = last\n            first += 1\n    return max_sum\n",
        "test": "assert ",
        "num_ids": 430
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number/2\n    while True:\n        better = (approx + number/approx)/2\n        if better == approx:\n            return better\n        approx = better\n",
        "test": "assert     babylonian_squareroot(1) == 1",
        "num_ids": 297
    },
    {
        "number": 247,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1] \ndef lps_dp(str): \n    '''\n    DP solution using the same approach.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1] \ndef lps_dp_all(str): \n    '''\n    DP solution using the same approach.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L",
        "test": "assert     lps('tactcoa') == 5",
        "num_ids": 429
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + 1 / sum(1 / x for x in range(1, n))\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string s and returns a boolean indicating whether the string is a palindrome.\n    '''\n    s = s.lower()\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n",
        "test": "assert ",
        "num_ids": 127
    },
    {
        "number": 249,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums2_dict = dict()\n    for num in array_nums2:\n        array_nums2_dict[num] = array_nums2_dict.get(num, 0) + 1\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2_dict and array_nums2_dict[num] > 0:\n            intersection.append(num)\n            array_nums2_dict[num] = array_nums2_dict[num] - 1\n    return intersection\n",
        "test": "assert     intersection_array([1,2,2,1], [2,2]) == [2,2]",
        "num_ids": 641
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n    \nprint(count_X((1, 2, 2, 2, 3, 4, 4, 5, 1), 2))\n",
        "test": "assert     count_X((1,2,3), 2) == 1",
        "num_ids": 1036
    },
    {
        "number": 251,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #element = int(input('Enter element: '))\n    list.insert(0, element)\n    return list\n",
        "test": "assert     insert_element([],1) == [1],    'Failed test case 4'",
        "num_ids": 540
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    i = 0\n    for i in range(len(numbers)):\n        p = cmath.polar(numbers[i])\n        print(f'The complex number {numbers[i]} converted to polar coordinates is {p}')\n        i += 1\n        \ndef multiplication(num):\n    '''\n    Write a python function to multiply all complex numbers in a list.\n    '''\n    i = 0\n    mult = 1\n    for i in range(len(num)):\n        mult = mult * num[i]\n    return mult\n        \ndef multiplication_tuple(tuple):\n    '''\n    Write a python function to multiply all complex numbers in a tuple.\n    '''\n    i = 0\n    mult = 1\n    for i in range(len(tuple)):\n        mult = mult * tuple[i]\n    return mult\n        \ndef list_to_tuple(list):\n    '''\n    Write a python function to convert a list to a tuple.\n    '''\n    tuple = tuple(list)\n    return tuple\n        \ndef tuple_to_list(tuple):\n    '''\n    Write a python function to convert a tuple to a list.\n    '''\n    list = list(tuple)\n    return list\n    \ndef create_list_of_numbers(start, end):\n    '''\n    Write a python function to create a list of numbers between a start value and an end value.\n    '''\n    i = 0\n    number_list = []\n    while i < end:\n        number_list.append(start)\n        start += 1\n        i += 1\n    return number_list\n",
        "test": "assert     convert((3+2j)) ==    (3.605551275463989, 3.141592653589793)",
        "num_ids": 2306
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for i in list1:\n        if isinstance(i, int):\n            result += 1\n    return result\n",
        "test": "assert count_integer([1.1, 2.2, 3.3, 4.4]) == 0, \"WRONG\"",
        "num_ids": 162
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [x for x in combinations_with_replacement(l, n)]\n",
        "test": "assert     combinations_colors([1, 2, 3], 1) == [(1,), (2,), (3,)]",
        "num_ids": 556
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return len(primes)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     count_Primes_nums(1) == 0",
        "num_ids": 2258
    },
    {
        "number": 257,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\nprint(swap_numbers(5, 6))\n",
        "test": "assert     (swap_numbers(1, 2) == (2, 1)), 'incorrect output'",
        "num_ids": 155
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #try:\n    #    test_tup1 = (1, 2)\n    #    test_tup2 = (4, 5)\n    #except Exception as e:\n    #    print(e)\n    return max(test_tup1[0] + test_tup2[1], test_tup2[0] + test_tup1[1])\n",
        "test": "assert     maximize_elements((0,1,5,4), (-4,3,7,3)) == (3,3,7,3)",
        "num_ids": 509
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        print(\"Please enter a number greater than 1\")\n        return\n    else:\n        newman_prime_list = [2, 3, 5]\n        if n == 1:\n            return 2\n        elif n == 2:\n            return 3\n        elif n == 3:\n            return 5\n        elif n > 3:\n            n_prime = newman_prime_list[-1]\n            newman_prime_list.append((n_prime + 1) * 2)\n            newman_prime_list.append(n_prime + 2)\n            while len(newman_prime_list) < n + 1:\n                newman_prime_list.append((newman_prime_list[-1] + 2) * 2)\n                newman_prime_list.append(newman_prime_list[-1] + 4)\n            return newman_prime_list[-1]\n",
        "test": "assert ",
        "num_ids": 463
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 and test_tup2[i] == 0:\n            result.append('0')\n        elif test_tup1[i] == 0 and test_tup2[i]!= 0:\n            result.append('error')\n        else:\n            result.append(test_tup1[i]/test_tup2[i])\n    return tuple(result)\n",
        "test": "assert     division_elements((1, 2, 3, 4, 5), (0, 0, 0, 0, 0)) == (0, 0, 0, 0, 0), 'Error'",
        "num_ids": 481
    },
    {
        "number": 262,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_list = []\n    second_list = []\n    for i in range(L):\n        first_list.append(list1[i])\n    for i in range(L, len(list1)):\n        second_list.append(list1[i])\n    return(first_list, second_list)\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == ([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])",
        "num_ids": 835
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 6\n",
        "test": "assert     dog_age(0) == 0, \"wrong result for 0\"",
        "num_ids": 303
    },
    {
        "number": 265,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[step*i:step*i + step] for i in range(len(S)//step)]\n",
        "test": "assert     list_split([1,2,3,4,5,6], 1) == [[1],[2],[3],[4],[5],[6]]",
        "num_ids": 772
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a=l**2\n    print(a)\n    return a\n",
        "test": "assert     lateralsurface_cube(10) == 100, 'check the function lateralsurface_cube'",
        "num_ids": 175
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([(n)**2 for n in range(1,n+1,2)])\n",
        "test": "assert     square_Sum(1) == 1",
        "num_ids": 220
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars = [1]\n    i = 1\n    while i < n:\n        stars.append(stars[i-1]+3*(i-1)+1)\n        i += 1\n    return stars[-1]\n",
        "test": "assert     find_star_num(0) == 1",
        "num_ids": 300
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 174
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum = even_sum + arr[i]\n    return even_sum\n",
        "test": "assert     sum_even_and_even_index([1, 3, 5, 7, 9, 11, 13, 15, 17]) == 0",
        "num_ids": 689
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    def is_Even(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n        \n    def Power(n):\n        return pow(n,5)\n    \n    def Power_Sum(n):\n        if is_Even(n) == True:\n            return Power(n)\n        else:\n            return 0\n    \n    return Power_Sum(n)\n",
        "test": "assert ",
        "num_ids": 261
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for each_tuple in test_list:\n        rear_list.append(each_tuple[1])\n    return rear_list\n",
        "test": "assert     rear_extract([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [2, 4, 6, 8, 10], rear_extract([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])",
        "num_ids": 596
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    new_tuple = []\n    for i in range(0, len(test_tup1)):\n        new_tuple.append(test_tup1[i] - test_tup2[i])\n    print(new_tuple)\n",
        "test": "assert     substract_elements( (1,2,3), (2,2,2) ) == (0, 0, 1) ",
        "num_ids": 659
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    count = 0\n    for i in range(2*n):\n        if(i%2==0):\n            count+=i\n    return count\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 0",
        "num_ids": 466
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*(r**2)*h\n    \n",
        "test": "assert ",
        "num_ids": 170
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result ={k:v for k,v in dict.items() if v>=n}\n    return result\n",
        "test": "assert     {'a':1, 'b':3, 'c':7} == dict_filter({'a':1, 'b':3, 'c':7},0)",
        "num_ids": 496
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    #Write your code here\n    return len([i for i in test_tup if i in test_tup[:test_tup.index(i)]])\n",
        "test": "assert     count_first_elements((1, 2, 3, 4, 5)) == 0, 'incorrect for {}'.format((1, 2, 3, 4, 5))",
        "num_ids": 634
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def is_decagonal(num):\n        return (1+8*num)**0.5 % 2 == 1\n    return [i for i in range(1,n+1) if is_decagonal(i)][-1]\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 362
    },
    {
        "number": 280,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    for i in dlist:\n        if i == item:\n            found = True\n            break\n        else:\n            pos = pos + 1\n    if found == False:\n        pos = -1\n    return (found, pos)\n",
        "test": "assert     sequential_search([1, 2, 3, 4, 5], 6) == (False, -1)",
        "num_ids": 478
    },
    {
        "number": 281,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # a set of data is created using set function.\n    # using set function we can remove duplicates from a list\n    # remove method can be used for lists, sets, dictionaries, and other data structures.\n    unique = set(test_list)\n    if len(unique) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([1, 2, 3, 4, 5]) == True, \"Test 2 Failed\"",
        "num_ids": 296
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # list1 = [1, 2, 3]\n    # list2 = [4, 5, 6]\n    # ans = []\n    # for i in range(len(list1)):\n    #     ans.append(list1[i]-list2[i])\n    # return ans\n    list1 = nums1[:]\n    list2 = nums2[:]\n    for i in range(len(list1)):\n        list1[i] = list1[i] - list2[i]\n    return list1\n",
        "test": "assert     (sub_list([1,2,3], [0,0,0]) == [1, 2, 3]) ",
        "num_ids": 636
    },
    {
        "number": 283,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    sum_digits = 0\n    while n!= 0:\n        sum_digits += (n % 10)\n        n = n // 10\n    if sum_digits <= 9:\n        return True\n    else:\n        return False\n",
        "test": "assert     validate(12331234331234)==False",
        "num_ids": 312
    },
    {
        "number": 284,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    equal_list = []\n    for num in list:\n        if num == element:\n            equal_list.append(num)\n    if len(equal_list) == len(list):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_element([1,1,1,1],1)==True",
        "num_ids": 313
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count(\"a\") == text.count(\"b\"):\n        return True\n    elif text.count(\"a\") == text.count(\"b\") + 1:\n        return True\n    elif text.count(\"a\") == text.count(\"b\") + 2:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('acb') == True",
        "num_ids": 338
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum as 0\n    max_sum = 0\n    \n    # Repeat the array k times and compute sum of the new array formed\n    for i in range(k):\n        sum = 0\n        for j in range(n):\n            sum = sum + a[j]\n        if (sum > max_sum):\n            max_sum = sum\n    \n    # Return the result\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([1, -1, 2, 1, 1, -1], 6, 2) == 3",
        "num_ids": 743
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    sum=0\n    for i in range(0,n):\n        sum=sum+square_sum(i)\n    return sum\n    #Remove pass and write your logic here to find and return the sum of squares of first n even natural numbers.\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 353
    },
    {
        "number": 290,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length_list:\n            max_length_list = len(list1[i])\n    return max_length_list\n",
        "test": "assert     max_length([[1,2,3],[3,4,5],[5,6,7],[9,10,11,12,13]]) == 5, 'incorrect'",
        "num_ids": 515
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return k \n    if n == 2: \n        return k * k \n    \n    s = k * k \n    a = k * (k - 1) \n    b = k * (k - 2) \n    for i in range(3, n + 1): \n        s = s + a + b \n        a = b \n        b = b + k * (k - 1) \n    return s \n",
        "test": "assert     count_no_of_ways(1, 2) == 2",
        "num_ids": 468
    },
    {
        "number": 292,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n<m:\n        return n//m\n    else:\n        return 1\n    \n",
        "test": "assert     find(2, 5) == 0",
        "num_ids": 257
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = (w**2 + h**2)**0.5\n    return thirdside\n",
        "test": "assert     math.sqrt(h**2 + w**2) == otherside_rightangle(w,h)",
        "num_ids": 135
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "test": "assert     max_val([2, 3, 1, 6, 7]) == 7, \"incorrect\"",
        "num_ids": 214
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_div = 0\n    for i in range(1,number + 1):\n        if number % i == 0:\n            sum_of_div += i\n    return sum_of_div\n",
        "test": "assert     sum_div(0) == 0",
        "num_ids": 151
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n",
        "test": "assert     get_Inv_Count([1, 2, 4, 3]) == 1",
        "num_ids": 333
    },
    {
        "number": 297,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened += flatten_list(element)\n        else:\n            flattened.append(element)\n    return flattened\n",
        "test": "assert     flatten_list([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6], 'Test case 1'",
        "num_ids": 584
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    count = 0\n    sum = 0\n    for item in stdata:\n        sum += item[1]\n        count += 1\n    return sum / count\n",
        "test": "assert     max_aggregate([(1, 4), (2, 6), (3, 8), (4, 10)]) == 10",
        "num_ids": 575
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return helper(n, n)\ndef helper(n, curr):\n    if curr == 0: return 1\n    if n == 1: return 2\n    return 2 * helper(n-1, curr-1) + helper(n-1, curr)\n",
        "test": "assert     count_binary_seq(0) == 1",
        "num_ids": 582
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert     dict_depth({0: 1}) == 1",
        "num_ids": 329
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # rotations = 3\n    # index = 4\n    # arr = [15,18,2,3,6,12]\n    length = len(arr)\n    rotations = rotations%length\n    new_arr = []\n    if(rotations > 0) :\n        for i in range(rotations) :\n            new_arr.append(arr[length-1])\n            for j in range(length-1) :\n                new_arr.append(arr[j])\n        for i in range(rotations,length) :\n            new_arr.append(arr[i])\n    else :\n        for i in range(length) :\n            new_arr.append(arr[i])\n    print(new_arr)\n    return new_arr[index]\n",
        "test": "assert     find_Element([1,2,3], 2, 3, 0) == 1, \"Error\"",
        "num_ids": 409
    },
    {
        "number": 305,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    my_list = []\n    for word in words:\n        if(word[0]=='p'):\n            my_list.append(word)\n    return my_list\n",
        "test": "assert     start_withp(['python', 'is', 'pythy']) == ['python', 'pythy']",
        "num_ids": 427
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    ans = 0\n    for i in range(index, n):\n        if i == k:\n            break\n        else:\n            ans = max(ans, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n    return ans\n",
        "test": "assert     max_sum_increasing_subseq([3, 5, 6, 1, 5, 6, 2, 5], 8, 5, 4) == 13",
        "num_ids": 687
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex2 = []\n    for i in range(n):\n        tuplex2.append(tuplex[0][m:m+n])\n        tuplex = tuplex[1:]\n    return tuple(tuplex2)\n",
        "test": "assert     colon_tuplex((5,6,7,8,9,10), 2, 3) == (5,6,7):",
        "num_ids": 511
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1_sorted = sorted(nums1, reverse=True)\n    nums2_sorted = sorted(nums2, reverse=True)\n    products = []\n    for i in range(N):\n        product = nums1_sorted[i] * nums2_sorted[i]\n        products.append(product)\n    return products\n",
        "test": "assert     large_product([2, 4, 6, 8], [1, 3, 5, 7], 4) == [12, 8, 48, 64]",
        "num_ids": 771
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a > b):\n        return a\n    elif (a < b):\n        return b\n    else:\n        return a\n",
        "test": "assert     maximum(1,10) == 10",
        "num_ids": 182
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('hello') == ('h','e','l','l','o')",
        "num_ids": 309
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n ^ (n & (n-1)))\n    \n",
        "test": "assert     set_left_most_unset_bit(63) == 1",
        "num_ids": 317
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol=math.pi*r*r*h/3\n    return vol\n",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 235
    },
    {
        "number": 388,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # if n is not a power of 2, then the highest power of 2 that is less than n is n // 2\n    if n < 0: \n        n = -n \n    \n    power = 0\n    while n!= 0: \n        n = n // 2\n        power += 1\n        \n    return power\n",
        "test": "assert     highest_Power_of_2(1) == 1, \"highPowerOf2 returns wrong value\"",
        "num_ids": 352
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 281
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n",
        "test": "assert     add_string([], '{}') == []",
        "num_ids": 425
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_list = {}\n    if len(l1) == len(l2) == len(l3):\n        for i in range(len(l1)):\n            dict_list[l1[i]] = {}\n            dict_list[l1[i]][l2[i]] = l3[i]\n    return dict_list\n",
        "test": "assert     convert_list_dictionary([1,2], [1.0,2.0], [1.0,2.0,3.0]) == {1: {2: {3: None}}}",
        "num_ids": 773
    },
    {
        "number": 392,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def calc_nth(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 5\n        else:\n            if n % 2 == 0:\n                return calc_nth(n/2) + calc_nth(n/2)\n            else:\n                return calc_nth(n/2) + calc_nth(n/3)\n    return calc_nth(n)\n    #return (calc_nth(n/2) + calc_nth(n/3) + calc_nth(n/4) + calc_nth(n/5))\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 2109
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list\n",
        "test": "assert     max_length_list([[], [], [1,2], [], [], [], [], [], [], [], [], [], [], [], [], [], []]) == [1, 2]",
        "num_ids": 415
    },
    {
        "number": 394,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "test": "assert     check_distinct((1, 1, 1, 1)) == False, \"Failed test 1\"",
        "num_ids": 376
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:] and str1[i] not in str1[:i]:\n            return str1[i]\n    return '_'\n",
        "test": "assert     first_non_repeating_character('abc') == 'a'",
        "num_ids": 363
    },
    {
        "number": 396,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0] == string[-1]):\n        return True\n    return False\n",
        "test": "assert     check_char('a') == True",
        "num_ids": 266
    },
    {
        "number": 397,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif a > c:\n        return a\n    elif b > c:\n        return c\n    else:\n        return b\n",
        "test": "assert     median_numbers(1,2,3) == 2, \"Check your implementation\"",
        "num_ids": 2408
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += sum([int(i) for i in str(num)])\n    return s\n",
        "test": "assert     sum_of_digits([25, 26, 27, 28, 29]) == 45, 'incorrect result'",
        "num_ids": 473
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n    \n",
        "test": "assert     bitwise_xor((0, 1, 1, 0), (1, 0, 0, 1)) == (1, 1, 1, 1)",
        "num_ids": 707
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count_set = set()\n    for tup in test_list:\n        count_set.add(tup)\n    return len(count_set)\n",
        "test": "assert     extract_freq([(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]) == 5",
        "num_ids": 657
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        res_tup = res_tup + (test_tup1[i] + test_tup2[i], )\n    return res_tup\n",
        "test": "assert     (add_nested_tuples(((1,2),(3,4)),((0,0),(0,0))) == ((0,0),(0,0))), \"Wrong output\"",
        "num_ids": 394
    },
    {
        "number": 404,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    return a\n    \n    ",
        "test": "assert     minimum(4,1) == 1",
        "num_ids": 234
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(item in tuplex for item in tuple1)\n",
        "test": "assert     check_tuplex(('a','b','c'),('a','c')) == True, \"check_tuplex(('a','b','c'),('a','c')) == True, error.\"",
        "num_ids": 484
    },
    {
        "number": 406,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_Parity(0)==0, 'the parity of 0 is 0'",
        "num_ids": 359
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n\n",
        "test": "assert ",
        "num_ids": 2321
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n            else:\n                if nums1[i]+nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i]+nums2[j], i, j))\n    pairs = []\n    while heap:\n        pairs.append([nums1[heap[0][1]], nums2[heap[0][2]]])\n        heapq.heappop(heap)\n    return pairs\n",
        "test": "assert     k_smallest_pairs([1,7,11], [2,4,6], 10) == [(1,2),(1,4),(7,6),(7,6),(11,4),(11,4),(11,4),(11,4),(11,4),(11,4)]",
        "num_ids": 1284
    },
    {
        "number": 409,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #print(list1)\n    list_result = []\n    for item in list1:\n        result = item[0]*item[1]\n        list_result.append(result)\n    return min(list_result)\n",
        "test": "assert     min_product_tuple([(3, 5), (1, 2), (6, 7), (3, 2)]) == 2",
        "num_ids": 553
    },
    {
        "number": 410,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #print(min(listval))\n    return min(listval)\n",
        "test": "assert     min_val([1, 3, 0, 2, 1, 2, 4, 2]) == 0",
        "num_ids": 326
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.islower():\n        return word\n    else:\n        words = []\n        words.append(word[0].upper())\n        for i in range(1, len(word)):\n            if word[i]!= \"_\":\n                words.append(word[i])\n            else:\n                words.append(\"_\")\n        return \"\".join(words)\n",
        "test": "assert     snake_to_camel(\"snake_to_camel_case\") == \"SnakeToCamelCase\"",
        "num_ids": 652
    },
    {
        "number": 412,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for i in l:\n        if i % 2 == 1:\n            odd_numbers.append(i)\n    return odd_numbers\n",
        "test": "assert     remove_odd([]) == [], 'incorrect'",
        "num_ids": 456
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result_list = []\n    for item in list1:\n        result_list.append(item[n])\n    return result_list\n",
        "test": "assert ",
        "num_ids": 356
    },
    {
        "number": 414,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #Check all values in list1 for any in list2\n    #and return a boolean result\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([2,4,5,8,9],[1,3,5,7,8]) == True",
        "num_ids": 512
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr_sorted = sorted(arr)\n    max_product = arr_sorted[0] * arr_sorted[1]\n    max_pair = [arr_sorted[0], arr_sorted[1]]\n",
        "test": "assert     max_Product([1, 2, 3, 4, 5, 6]) == 60, \"fails for all\"",
        "num_ids": 379
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    from itertools import groupby\n    Input = list(groupby(Input, lambda x: x[0]))\n    for i in Input:\n        print(i[0], len(list(i[1])))\n    print(Input)\n    return Input\n",
        "test": "assert     group_tuples([('a', 5), ('b', 2), ('c', 9)]) == [('a', 5), ('b', 2), ('c', 9)]",
        "num_ids": 2473
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = len(lst[0]) \n    for i in range(1,len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    return max\n",
        "test": "assert     Find_Max([1,2,3,4,5,6,7,8,9,10,11]) == 11",
        "num_ids": 372
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        i = round(i)\n        sum += i\n    sum *= len(list1)\n    return sum\n",
        "test": "assert     round_and_sum([]) == 0, 'incorrect'",
        "num_ids": 340
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum += i ** 3\n        i += 1\n    return sum\n",
        "test": "assert     cube_Sum(1)     == 0",
        "num_ids": 220
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for i in test_tup:\n        res += str(i) + '-'\n    return res[:-1]\n",
        "test": "assert     concatenate_tuple((\"hello\",)) == \"hello\"",
        "num_ids": 351
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 267
    },
    {
        "number": 424,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear(('Hello', 'Hai', 'Sail', 'Come')) == 'Come'",
        "num_ids": 519
    },
    {
        "number": 425,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     count_element_in_list([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 0) == 0",
        "num_ids": 2549
    },
    {
        "number": 426,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #new_list = [x for x in nums if x % 2!= 0]\n    #new_list = [x for x in nums if x % 2 == 0]\n    new_list = [x for x in nums if x % 2!= 0 and x % 2!= 0]\n    return new_list\n",
        "test": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]",
        "num_ids": 589
    },
    {
        "number": 427,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r\"^(.*)-(.*)-(.*)\"\n    match = re.match(regex, dt)\n    if match:\n        groups = match.groups()\n        new_date = \"-\".join(groups[::-1])\n        return new_date\n    else:\n        return \"Invalid date\"\n",
        "test": "assert     change_date_format('2020-02-03') == '03-02-2020'",
        "num_ids": 406
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "test": "assert     shell_sort(arr.copy()) == sorted(arr)",
        "num_ids": 269
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n",
        "test": "assert     and_tuples((4, 6), (4, 6)) == (4, 6)",
        "num_ids": 485
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    \n    # Solve the quadratic equation\n    d = (b**2) - (4*a*c)\n    \n    # Find the two roots \n    x1 = (-b + np.sqrt(d))/(2*a)\n    x2 = (-b - np.sqrt(d))/(2*a)\n    \n    # Create the x and y arrays\n    x = np.arange(-10, 10, 0.01)\n    y = x**2 + x + 1\n    \n    # Plot the parabola and the directrix\n    plt.plot(x, y)\n    plt.plot(x1, 0, 'r.')\n    plt.plot(x2, 0, 'r.')\n    plt.show()\n    \n    return x1, x2\n",
        "test": "assert ",
        "num_ids": 350
    },
    {
        "number": 431,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    if list1 == []:\n        return False\n    \n    for elem in list1:\n        if elem in list2:\n            return True\n            \n    return False\n",
        "test": "assert     common_element([1, 2, 3], [5, 2, 3]) == True, \"Wrong result for [1, 2, 3] and [5, 2, 3]\"",
        "num_ids": 283
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    median = (((base1 + base2)/2)*height)/2\n    return median\n",
        "test": "assert     median_trapezium(0,4,5) == 5.0",
        "num_ids": 289
    },
    {
        "number": 433,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    l = len(arr)\n    for i in range(l):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([1, 2, 3, 4, 5], 4) == True, \"Test case 1 failed\"",
        "num_ids": 334
    },
    {
        "number": 434,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab+\")\n    result = pattern.search(text)\n    return result!= None\n",
        "test": "assert     text_match_one(\"aacbb\") == False, 'WRONG'",
        "num_ids": 400
    },
    {
        "number": 435,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #print(\"Last digit of \"+str(n)+\" is \"+str(n%10))\n    return n%10\n",
        "test": "assert     last_Digit(1) == 1, \"Check the last_Digit function\"",
        "num_ids": 272
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "test": "assert     neg_nos([-1,-2,3]) == [-1,-2]",
        "num_ids": 175
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    newstr = \"\"\n    for char in str1:\n        if char not in newstr:\n            newstr += char\n    return newstr\n",
        "test": "assert     remove_odd('a') == 'a', 'Check your output'",
        "num_ids": 346
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    length = len(test_list)\n    count = 0\n    for i in range(length):\n        for j in range(i,length):\n            if test_list[i][1] == test_list[j][0]:\n                count+=1\n    return count\n",
        "test": "assert     count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8)]) == 0",
        "num_ids": 449
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''\n    for i in L:\n        s += str(i)\n    return int(s)\n",
        "test": "assert     multiple_to_single([1,2,3,4,5,6]) == 123456",
        "num_ids": 2268
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    text = text.split(\" \")\n    adverb = []\n    pos = []\n    for word in text:\n        if word.endswith('ly') or word.endswith('ing') or word.endswith('ed') or word.endswith('ing'):\n            if word in adverb:\n                pass\n            else:\n                adverb.append(word)\n                pos.append(text.index(word))\n    return adverb, pos\n",
        "test": "assert     find_adverb_position('I went to a party last year, but it was raining there.\\n') == [12, 20]",
        "num_ids": 640
    },
    {
        "number": 441,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n",
        "test": "assert     surfacearea_cube(1) == 6, \"Wrong result for surfacearea_cube(1)\"",
        "num_ids": 248
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_positive = 0\n    for num in nums:\n        if num > 0:\n            num_positive += 1\n    ratio = float(num_positive) / len(nums)\n    return ratio\n",
        "test": "assert     positive_count([-1,-1,-1,-1]) == 0",
        "num_ids": 450
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_negative=0\n    for i in list1:\n        if i<0:\n            max_negative=i\n    return max_negative\n",
        "test": "assert     largest_neg([0, 1, 2, 3, 4, 5]) == 0",
        "num_ids": 455
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(test_list[i][:K] + test_list[i][K+1:]) for i in range(len(test_list))]\n",
        "test": "assert     trim_tuple([(1,2,3,4),(4,5,6,7,8),(9,10,11,12,13)], 5) == [(1,2,3,4),(4,5,6,7,8),(9,10,11,12,13)]",
        "num_ids": 661
    },
    {
        "number": 445,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n",
        "test": "assert     index_multiplication((1,2,3,4), (5,6,7,8)) == (5,12,21,32), \"Test case 1 failed\"",
        "num_ids": 406
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = {} \n    for i in lst: \n        counter[i] = tup.count(i) \n    return counter \n",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15), [15]) == {15: 3}",
        "num_ids": 2671
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 295
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0 or n == 1:\n        return n\n    return cal_sum(n-1) + (4 * (n-1) + 2)\n",
        "test": "assert     cal_sum(4) ==     31",
        "num_ids": 211
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # return [string[i:i+l] for i in range(0,len(string),l)]\n    return list(map(lambda x: x[l-1:], str))\n",
        "test": "assert     extract_string('', 0) == []",
        "num_ids": 420
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text=text1\n    text=re.sub(r'\\s+',\"\", text)\n    return text\n",
        "test": "assert     remove_whitespaces(\"a  b   c\") == \"abc\"",
        "num_ids": 261
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "test": "assert     loss_amount(750,250) == 0",
        "num_ids": 200
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 and n%i == 0 : \n            res = res + i + n//i\n        \n    return res\ndef palindrome(n) : \n    '''\n    Write a Python function to check whether a number is a palindrome or not.\n    Palindrome are the numbers for which reverse is exactly same as the original one. For eg. 121 \n    '''\n    original = n \n    reverse = 0 \n    while n > 0 : \n        remainder = n%10\n        reverse = reverse*10 + remainder\n        n = n//10\n        \n    if original == reverse : \n        return True\n    else : \n        return False\n        \ndef is_prime(n) : \n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2 : \n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n        \n    return True\n",
        "test": "assert     sumofFactors(1) == 0, \"sumofFactors(1) incorrect\"",
        "num_ids": 346
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    r=re.compile(r\"\\b\\w*z\\w*\\b\")\n    result=r.findall(text)\n    print(result)\n    if result == []:\n        print(\"No wordz\")\n    else:\n        print(\"wordz\")\n",
        "test": "assert     text_match_wordz('apple afrst') == False, \"error\"",
        "num_ids": 432
    },
    {
        "number": 455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month31 = [1,3,5,7,8,10,12]\n    if monthnum2 in month31:\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 176
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_string_list = []\n    for element in stringlist:\n        rev_string_list.append(element[::-1])\n    return rev_string_list\n",
        "test": "assert     reverse_string_list([\"abc\", \"def\"]) == [\"cba\", \"fed\"]",
        "num_ids": 423
    },
    {
        "number": 457,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub=min(lst,key=len)\n    return sub\n",
        "test": "assert Find_Min([[1, 2, 3, 4], [1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [4, 5]",
        "num_ids": 810
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert     rectangle_area(3,4) == 12",
        "num_ids": 152
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase('123asd!@#$') == '123asd!@#$'",
        "num_ids": 408
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n    \ndef Group_by(lst):\n    '''\n    Write a python function to group a list of lists by the first element of each sublist.\n    For example, if the input list is [[3,2,1],[4,1,3],[2,3,1]], your function should return [[3,2,1],[4,1,3]]. \n    Note that the output list is also a list.\n    '''\n    \n    return [list(list_set) for list_set in set(tuple(row) for row in lst)]\n",
        "test": "assert     Extract([]) == []",
        "num_ids": 269
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr('lower') == 0, \"Incorrect for Lower\"",
        "num_ids": 692
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list_helper(list1, [], [])\n    return combinations_list_helper_results\n",
        "test": "assert ",
        "num_ids": 302
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #base case\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    #what if you find a max subarray, and then find a max subarray for the rest of the array.\n    #you can apply the same algo\n    #[-2, -4, 1, -1, 2, -6, -1, 4, 0]\n    max_subarray_of_n = max_subarray_product(arr[1:])\n    min_subarray_of_n = min_subarray_product(arr[1:])\n    max_product = arr[0] * max_subarray_of_n\n    min_product = arr[0] * min_subarray_of_n\n    max_ending_here = max(arr[0], max_product, min_product)\n    return max_ending_here\n",
        "test": "assert ",
        "num_ids": 385
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 1:\n        return all(value == dict[key] for key in dict for value in dict.values())\n    else:\n        return all(value == dict[key] for key in dict for value in dict.values()) and check_value(dict, n - 1)\n",
        "test": "assert     check_value({1:2, 2:3, 3:3}, 1) == False",
        "num_ids": 379
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}\n",
        "test": "assert     {} == drop_empty({})",
        "num_ids": 257
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    mul = 1\n    max_mul = 1\n    for i in range(n):\n        mul *= arr[i]\n        max_mul = max(max_mul, mul)\n    \n    return max_mul\n",
        "test": "assert     max_product([1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100]) == 1800",
        "num_ids": 503
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_list = list(test_tup)\n    length = len(test_list)\n    for i in range(0,length-1):\n        print(test_list[i]+test_list[i+1])\n",
        "test": "assert ",
        "num_ids": 175
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n): \n        prod = (prod * arr[i]) % n \n    return prod\n",
        "test": "assert ",
        "num_ids": 291
    },
    {
        "number": 472,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i]!= prev + 1:\n            return False\n        prev = l[i]\n    return True\n",
        "test": "assert     check_Consecutive([1,2,3]) == True",
        "num_ids": 399
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n",
        "test": "assert     tuple_intersection([(1,2,3),(4,5,6)], [(1,2,3),(4,5,6),(7,8,9)]) == [(1,2,3),(4,5,6)]",
        "num_ids": 878
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n",
        "test": "assert     replace_char('hello', 'z', 'a') == 'hello'",
        "num_ids": 217
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x:x[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert     sort_counter(Counter(['a','a','b','c','b','c'])) == ['c', 'b', 'b', 'a', 'a', 'c']",
        "num_ids": 362
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max=nums[0]\n    min=nums[0]\n    for i in nums:\n        if i>max:\n            max=i\n        if i<min:\n            min=i\n    return max+min\n",
        "test": "assert ",
        "num_ids": 146
    },
    {
        "number": 477,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower(\"Converter\") == \"converter\", \"Converter not lower\"",
        "num_ids": 228
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    i = 0\n    while i < len(str1):\n        if i == len(str1) - 1:\n            break\n        str2 += str1[i]\n        if str1[i] < str1[i + 1]:\n            str2 += str1[i + 1]\n        i += 1\n    if i == len(str1) - 1:\n        return str2\n    return str1\n",
        "test": "assert     remove_lowercase(\"THE GREAT GATSBY\") == \"T G R AE T\", \"Wrong output\"",
        "num_ids": 385
    },
    {
        "number": 479,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Your code goes here\n    return n//10\n",
        "test": "assert     first_Digit(45.44) == 4, 'wrong result'",
        "num_ids": 277
    },
    {
        "number": 554,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    for i in list:\n        if(i % 2!= 0):\n            list1.append(i)\n    return list1\n",
        "test": "assert     Split([1,2,3,4,5,6]) == [1,3,5]",
        "num_ids": 456
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # return int((n*(n+1)**2)//2 - (n*(n+1)*(2*n+1))//6)\n    return sum(i**3 for i in range(n)) - sum(i for i in range(n))**2\n",
        "test": "assert     difference(1) == 0",
        "num_ids": 460
    },
    {
        "number": 556,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here \n    pair_count = 0\n    for i in range(0, N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j] % 2 == 1):\n                pair_count += 1\n    return pair_count\n",
        "test": "assert     find_Odd_Pair([1,1,3,4,5],5) ==     2",
        "num_ids": 475
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            char = char.lower()\n        else:\n            char = char.upper()\n        result = result + char\n    return result\n",
        "test": "assert     toggle_string('Python') == 'pYTHON'",
        "num_ids": 276
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    # don't need to keep track of 0s\n    if n1 == \"0\" or n2 == \"0\":\n        return None\n    # do digit by digit difference\n    sum = 0\n    for i in range(len(n1)):\n        sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n",
        "test": "assert     digit_distance_nums(121212, 121212) == 0",
        "num_ids": 327
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in a:\n        current_sum += i\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
        "test": "assert max_sub_array_sum([-12, 15, -13, 14, -1, 2, 1, -5, 4], 8) == 18",
        "num_ids": 438
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        l = test_tup1\n        s = test_tup2\n    else:\n        l = test_tup2\n        s = test_tup1\n    new_tup = ()\n    for i in l:\n        if i not in new_tup:\n            new_tup = new_tup + (i, )\n    for i in s:\n        if i not in new_tup:\n            new_tup = new_tup + (i, )\n    return sorted(new_tup)\n",
        "test": "assert     union_elements(('3', '4', '5', '6'), ('1', '2', '3', '4', '5', '6')) == ['1', '2', '3', '4', '5', '6']",
        "num_ids": 711
    },
    {
        "number": 562,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for item in lst:\n        if type(item) is list:\n            sublist_len = len(item)\n            if sublist_len > max_len:\n                max_len = sublist_len\n    return max_len\n",
        "test": "assert     Find_Max_Length([]) == 0, \"Empty\"",
        "num_ids": 691
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex=r'\\\"(.*?)\\\"'\n    result=re.findall(regex, text)\n    return result\n",
        "test": "assert     extract_values('\"Hello World\"'), '\"Hello World\"'",
        "num_ids": 381
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                count+=1\n    return count\n",
        "test": "assert     count_Pairs([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 477
    },
    {
        "number": 565,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n    \ndef repeat(sentence, num):\n    '''\n    Write a python function to repeat a string a given number of times.\n    '''\n    return sentence * num\n",
        "test": "assert     split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 234
    },
    {
        "number": 566,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n    ",
        "test": "assert     sum_digits( 123) == 6",
        "num_ids": 132
    },
    {
        "number": 567,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return(list1 == sorted(list1))",
        "test": "assert     issort_list([]) == True",
        "num_ids": 223
    },
    {
        "number": 568,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n    \ndef dictionaries_of_lists(list_of_dictionaries):\n    '''\n    Write a function that returns the list of keys from each dictionary.\n    '''\n    result = []\n    for d in list_of_dictionaries:\n        result.append(list(d.keys()))\n    return result\n    \ndef merge_dictionaries(list_of_dictionaries):\n    '''\n    Write a function to merge all the dictionaries of lists into one dictionary\n    of lists. The keys are the keys of the first list's dictionary. The values\n    are lists that contain the corresponding values for all the dictionaries.\n    '''\n    result = {}\n    list_of_keys = dictionaries_of_lists(list_of_dictionaries)\n    for i, k in enumerate(list_of_keys):\n        result.setdefault(k[0], []).extend([list_of_dictionaries[j][k[0]] for j in range(len(list_of_dictionaries))])\n    return result\n    \ndef smallest_number_in_lists(list_of_lists):\n    '''\n    Write a function to return the smallest number in each list\n    '''\n    result = []\n    for l in list_of_lists:\n        result.append(min(l))\n    return result\n    \ndef main():\n    print(empty_list(2))\n    print(dictionaries_of_lists([{1:3, 2:4}, {1:5, 3:4}]))\n    print(merge_dictionaries([{1:3, 2:4}, {1:5, 3:4}]))\n    print(smallest_number_in_lists([[4, 7], [3, 8, 6], [1, 2, 0]]))\n    \nif __name__ == '__main__':\n    main()",
        "test": "assert     empty_list(3) == [{}, {}, {}], \"Empty list should contain 3 empty dictionaries\"",
        "num_ids": 358
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "test": "assert     sort_sublists(",
        "num_ids": 228
    },
    {
        "number": 572,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n",
        "test": "assert     two_unique_nums([1, 1, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"test 1\"",
        "num_ids": 607
    },
    {
        "number": 573,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_number = set(list_data)\n    product = 1\n    for i in unique_number:\n        product = product * i\n    return product\n",
        "test": "assert     unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 511
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * (r**2) * h\n",
        "test": "assert     surfacearea_cylinder(4,4)==143, 'incorrect for r=4, h=4'",
        "num_ids": 344
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if(A[i]==B[j]):\n                if(i==len(A)-1):\n                    flag=1\n                    break\n                else:\n                    i+=1\n                    continue\n            else:\n                break\n    if(flag==1):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([1,2,3,4],[1,2,5])==False, \"error\"",
        "num_ids": 570
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if n < 0: \n        return None\n    elif n == 0: \n        return 1\n    else: \n        for i in range(1, n + 1): \n            factorial = factorial * i \n        return factorial % 10\nn = 5\nprint(\"The last digit of factorial of 5 is:\", last_Digit_Factorial(n)) \n",
        "test": "assert     last_Digit_Factorial(0) == 1, \"Factorial of 0 should be 0!\"",
        "num_ids": 400
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # if(len(list1)==len(list2)==len(list3)):\n    #     result=[]\n    #     for i in range(len(list1)):\n    #         result.append(list1[i])\n    #         result.append(list2[i])\n    #         result.append(list3[i])\n    #     return result\n    # else:\n    #     return \"Length of lists are not equal\"\n    result=[]\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 711
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [i for i in test_tup1 if i not in test_tup2]\n",
        "test": "assert     find_dissimilar(('hello', 1, [], 'world'), ('hello', 1, [], 'world')) == []",
        "num_ids": 587
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) is tuple:\n            result.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return tuple(result)\n",
        "test": "assert     (even_ele((1, [2, 'b'], 3, (4, 'd')), lambda x: x % 2 == 0) == (1, [2, 'b'], (4, 'd')))",
        "num_ids": 579
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_area = b**2\n    surface_area = (base_area + b*s) * 2\n    return surface_area\n",
        "test": "assert     surface_Area(10,5) == 100",
        "num_ids": 227
    },
    {
        "number": 582,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")\n",
        "test": "assert ",
        "num_ids": 185
    },
    {
        "number": 583,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return (catalan_number(num-1) * (4 * num - 2)) / (num + 1)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 245
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r\"ly\"\n    # for match in re.finditer(regex, text, re.MULTILINE):\n    #     # print(match)\n    #     print(match.span())\n    # regex = r\"(\\w+\\W+ly)\"\n    # match = re.search(regex, text, re.MULTILINE)\n    # print(match.group(1))\n    for match in re.finditer(regex, text, re.MULTILINE):\n        print(match.span(), match.group(1))\n    # print(match.span())\n    return match.group(1)\n    # return re.search(regex, text, re.MULTILINE)\n",
        "test": "assert     find_adverbs('''Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam vel nunc tincidunt, viverra semper, dictum dui ut, accumsan nisi. Fusce sed ultrices eros. Nam eu arcu a ex imperdiet tempus. Fusce accumsan id vestibulum, eu ultricies est interdum ut. In sed velit eget ex molestie tincidunt. Vivamus viverra, ante a ultricies convallis, orci enim facilisis eros, eu finibus semper magna eros ac eros. Maecenas ac urna sit amet arcu suscipit placerat. Nunc vel dui ex. Donec sodales augue vel ligula ullamcorper, nec suscipit felis ultrices.",
        "num_ids": 1333
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap=[]\n    for item in items:\n        if len(heap)<n:\n            heapq.heappush(heap,(-1*item[1],item))\n        else:\n            heapq.heappush(heap,(-1*item[1],item))\n            heapq.heappop(heap)\n    return heapq.nlargest(n,heap,key=lambda x:x[0])\nitems=[('Item1', 22), ('Item2', 35), ('Item3', 17), ('Item4', 24), ('Item5', 25)]\nprint(expensive_items(items,2))\n",
        "test": "assert     expensive_items([('Iphone 7',1000),",
        "num_ids": 871
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    l2.extend(l1)\n    return l2\n",
        "test": "assert     split_Arr([1, 2, 3, 4], 1) == [2, 3, 4, 1], \"Check your implementation\"",
        "num_ids": 457
    },
    {
        "number": 587,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "test": "assert     list_tuple([1, 2, 3]) == (1, 2, 3), \"Wrong answer\"",
        "num_ids": 276
    },
    {
        "number": 588,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff=max(nums)-min(nums)\n    return diff\n",
        "test": "assert     big_diff([0]) == 0",
        "num_ids": 269
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n",
        "test": "assert ",
        "num_ids": 174
    },
    {
        "number": 590,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x,y)\n    return (round(r.real,3),round(r.imag,3))\n",
        "test": "assert     polar_rect(0,0) == (0,0)",
        "num_ids": 330
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n    \n",
        "test": "assert     swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1], 'check 1'",
        "num_ids": 247
    },
    {
        "number": 592,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n",
        "test": "assert     binomial_Coeff(1,1) == 1",
        "num_ids": 410
    },
    {
        "number": 593,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        if len(ip.split(\".\"))==4:\n            return ip\n        ip_list = ip.split(\".\")\n        while len(ip_list[3])>1 and ip_list[3][0]==\"0\":\n            ip_list[3] = ip_list[3][1:]\n        return \".\".join(ip_list)\n    except:\n        raise Exception(\"Invalid IP Address\")\n",
        "test": "assert     removezero_ip('010.020.030.40') == '010.020.030.40'",
        "num_ids": 431
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    diff = even_list[0] - odd_list[0]\n    return diff\n",
        "test": "assert     diff_even_odd([1,2,3,5,7]) == 4",
        "num_ids": 500
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Create an array to store all 0's\n    zero_arr = [0] * len(str1)\n    one_arr = [0] * len(str1)\n    \n    # Traverse the string and count all the 1s and 0s\n    for i in range(len(str1)) : \n        if str1[i] == '1' :\n            one_arr[i] = one_arr[i] + 1\n        else :\n            zero_arr[i] = zero_arr[i] + 1\n    \n    # Create an array of swaps to be carried out\n    swap_arr = []\n    \n    # Check if we have more 0s than 1s\n    if zero_arr[0] > one_arr[0] :\n        # Swap all the 1s with the 1s we have\n        for i in range(1, len(zero_arr)) :\n            if one_arr[i] > 0 :\n                swap_arr.append(zero_arr[i] + 1)\n                one_arr[i] = one_arr[i] - 1\n    else :\n        # Swap all the 0s with the 0s we have\n        for i in range(1, len(zero_arr)) :\n            if zero_arr[i] > 0 :\n                swap_arr.append(one_arr[i] + 1)\n                zero_arr[i] = zero_arr[i] - 1\n    \n    # Add the last 1 to the swap array\n    swap_arr.append(one_arr[len(one_arr) - 1])\n    \n    # Store the length of the array into a variable\n    len_swap_arr = len(swap_arr)\n    \n    # Count the minimum number of swaps required to convert\n    # one binary number represented as a string to another\n    counter = 0\n    for i in range(0, len_swap_arr) :\n        counter = counter + swap_arr[i]\n    \n    return counter\n",
        "test": "assert     min_Swaps('11010', '10110') == 2,'min_Swaps returns incorrect results'",
        "num_ids": 1037
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(tuple_list.__sizeof__())\n",
        "test": "assert     tuple_size((1,2,3,4,5,6)) ==     sys.getsizeof(1)+sys.getsizeof(2)+sys.getsizeof(3)+sys.getsizeof(4)+sys.getsizeof(5)+sys.getsizeof(6)",
        "num_ids": 818
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n",
        "test": "assert ",
        "num_ids": 596
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    sum1 = 0\n    temp = number\n    while temp > 0:\n        r = temp % 10\n        sum1 += r ** length\n        temp //= 10\n    if sum1 == number:\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(15) == False",
        "num_ids": 258
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s, n = 0, number\n    while n:\n        s, n = s + n, n - 1\n    return s\n",
        "test": "assert     sum_average(4) == (10, 3.5)",
        "num_ids": 213
    },
    {
        "number": 600,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\n",
        "test": "assert     is_Even(199) == False",
        "num_ids": 243
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    hash_table = {}\n    for ch in str1:\n        if ch in hash_table:\n            return ch\n        hash_table[ch] = 1\n",
        "test": "assert     first_repeated_char(\"abcdea\") == \"a\", \"should return 'a'\"",
        "num_ids": 299
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n",
        "test": "assert ",
        "num_ids": 371
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "test": "assert     reverse_words('') == ''",
        "num_ids": 301
    },
    {
        "number": 605,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) ==     True",
        "num_ids": 365
    },
    {
        "number": 606,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian=degree*(math.pi/180)\n    return radian\n",
        "test": "assert     radian_degree(1) == math.pi/180",
        "num_ids": 324
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    return match.group()\n",
        "test": "assert     find_literals('pythons love apple', 'apple pythons') == ('pythons', 0, 12)",
        "num_ids": 690
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n+1) \n    bell[0] = bell[1] = 1\n    for i in range(2, n+1): \n        bell[i] = bell[i - 1] + bell[i - 2] \n    return bell[n] \n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 296
    },
    {
        "number": 610,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    L = L - 1\n    \n    list1.pop(L)\n    \n    return list1\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == [1, 2, 3, 4, 5, 6, 7, 9], \"remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) wrong answer\"",
        "num_ids": 824
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return -1\n    return max([col[N] for col in test_list])\n    # return max([test_list[i][N] for i in range(len(test_list))])\n",
        "test": "assert     max_of_nth([[0,1,0],[1,2,1],[0,0,0]], 1) == 2, 'Wrong result'",
        "num_ids": 631
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append([lst[i][0], lst[i][1]])\n    return res\n",
        "test": "assert     merge([[1, 2], [2, 3], [3, 4]]) == [[1, 2], [2, 3], [3, 4]]",
        "num_ids": 658
    },
    {
        "number": 614,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = []\n    for i in range(len(test_list)):\n        cummulative_sum.append(sum(test_list[:i+1]))\n    return cummulative_sum\n",
        "test": "assert     cummulative_sum([]) == []",
        "num_ids": 362
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x) / len(x) for x in zip(*nums)]\n",
        "test": "assert     (average_tuple( ( (1, 2), (3, 4), (5, 6), (7, 8) ) ) == [ 2.5, 4.5, 5.5, 6.5 ])",
        "num_ids": 536
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    \n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    \n    \n    \ndef test_tuple_modulo():\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert (tuple_modulo(tuple(range(0, 3)), tuple(range(3, 6))) == tuple(range(0, 3)))\n    assert (tuple_modulo(tuple(range(0, 9)), tuple(range(4, 8))) == tuple(range(0, 9)))\n    assert (tuple_modulo(tuple(range(0, 9)), tuple(range(4, 8))) == tuple(range(0, 9)))\n    assert (tuple_modulo(tuple(range(0, 9)), tuple(range(4, 8))) == tuple(range(0, 9)))\n    \n    \ntest_tuple_modulo(",
        "test": "assert     tuple_modulo((4,5,6), (-1,2,-3)) == (-1,2,3)",
        "num_ids": 379
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def count_jumps(d):\n        if d==0:\n            return 0\n        elif d>0:\n            return 1 + count_jumps(d-1)\n        else:\n            return 1 + count_jumps(d+1)\n    return count_jumps(abs(steps))\n",
        "test": "assert     min_Jumps(3, 1) == 3 ",
        "num_ids": 289
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [i / j for i, j in zip(nums1,nums2)]\n",
        "test": "assert     div_list([1, 2, 3], [1, 2, 3]) == [1, 1, 1]",
        "num_ids": 441
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    result = []\n    for i in test_str:\n        if i.isdigit():\n            count += 1\n        else:\n            result.append(i)\n    for j in range(count):\n        result.append(test_str[-j])\n    return \"\".join(result)\n",
        "test": "assert     move_num(\"abcd\") == \"abcd\"",
        "num_ids": 382
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = []\n    for i in a:\n        if all(i%j == 0 for j in a):\n            s.append(i)\n    return len(s)\n",
        "test": "assert     largest_subset([9, 9, 9, 9, 9, 9]) == 6, 'incorrect'",
        "num_ids": 2413
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    arr3 = []\n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            arr3.append(arr1[i])\n            i += 1\n        else:\n            arr3.append(arr2[j])\n            j += 1\n",
        "test": "assert     get_median([], [], 0) == None",
        "num_ids": 491
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "test": "assert     nth_nums([1, 2, 3, 4], 2) == [1, 4, 9, 16]",
        "num_ids": 263
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 252
    },
    {
        "number": 625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "test": "assert ",
        "num_ids": 125
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r=r/2\n    return 3.14*r*r\n",
        "test": "assert     triangle_area(0) == 0, \"Wrong answer\"",
        "num_ids": 190
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 0\n    if not end:\n        end = len(array)-1\n    if start < end:\n        mid = (start+end)//2\n        if array[mid]==mid+1:\n            return mid+1\n        elif array[mid]<mid+1:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid)\n    return 1\n",
        "test": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 5, \"Check the correctness of find_First_Missing\"",
        "num_ids": 615
    },
    {
        "number": 628,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \",\"%20\")\n    return string\n",
        "test": "assert     replace_spaces('Hello ') == 'Hello%20'",
        "num_ids": 286
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if (i%2 == 0):\n            even_numbers.append(i)\n    return even_numbers\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]",
        "num_ids": 732
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = sub + [ele]\n    adj = []\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if i == 0 and j == 0:\n                continue\n            elif (ele[0] + i) < 0 or (ele[1] + j) < 0:\n                continue\n            else:\n                adj = adj + [(ele[0] + i,ele[1] + j)]\n    adj = list(set(adj))\n    return adj\n",
        "test": "assert ",
        "num_ids": 646
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = list(text)\n    i = 0\n    while i < len(text):\n        if text[i] =='':\n            text[i] = '_'\n        elif text[i] == '_':\n            text[i] =''\n        i += 1\n    return ''.join(text)\n",
        "test": "assert     replace_spaces('Hello') == 'Hello'",
        "num_ids": 388
    },
    {
        "number": 632,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = []\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n    for z in zeros:\n        num_list.remove(z)\n    for num in zeros:\n        num_list.append(num)\n    return num_list\n",
        "test": "assert     move_zero([0,1,3,0,3,4,0,0,1,0,2,0]) == [1,3,3,4,1,2,0,0,0,0,0,0]",
        "num_ids": 1036
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0, n): \n        for j in range(i + 1, n): \n            x = x ^ (arr[i] ^ arr[j]) \n    return x \n",
        "test": "assert     pair_xor_Sum([1,2,3],3) == 0",
        "num_ids": 464
    },
    {
        "number": 635,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n",
        "test": "assert     heap_sort([2, 1, 4, 5, 3, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 347
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    return actual_cost == sale_amount\n    \ndef test_noprofit_noloss():\n    assert noprofit_noloss(50,50)\n",
        "test": "assert     noprofit_noloss(10,9) == False",
        "num_ids": 344
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=round(35.74+0.6215*t+((0.4275*t)-35.75)*(v**0.16))\n    return wci\ndef get_the_num(num):\n    '''\n    Write a function to obtain the word corresponding to the positive/negative/zero of the number entered.\n    '''\n    num=float(num)\n    if num>0:\n        return \"positive\"\n    elif num<0:\n        return \"negative\"\n    elif num==0:\n        return \"zero\"\n",
        "test": "assert     wind_chill(12.0,24.0) == 13.0",
        "num_ids": 409
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list = []\n    for i in sample_names:\n        if i[0].isupper():\n            new_list.append(i)\n    return sum([len(i) for i in new_list])\n",
        "test": "assert     sample_nam([\"Aa\", \"Aa\", \"aa\", \"bb\", \"AB\", \"aAb\"]) == 6, \"error\"",
        "num_ids": 344
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r'\\([^)]*\\)'\n    items = re.sub(regex, '', items)\n    return items\n",
        "test": "assert     remove_parenthesis(\"No (hello) world\") == \"No  world\"",
        "num_ids": 323
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) / 2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 266
    },
    {
        "number": 643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #text = 'prez is a word'\n    if re.search(r'\\bz\\w+\\b',text):\n        print(f'{text} contains \"z\"')\n    else:\n        print(f'{text} does not contain \"z\"')\n",
        "test": "assert     text_match_wordz_middle(\"\") == True",
        "num_ids": 411
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, n, 2*k+1):\n        input[i:i+k] = input[i:i+k][::-1]\n    return input\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10],4) == [4,3,2,1,5,6,7,8,9,10]",
        "num_ids": 934
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # return tuple(test_tup) + (test_dict,)\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('abcd', 'efgh', 'ijkl'), {'a': 'apple', 'b': 'orange', 'c': 'cherry'}) == ('abcd', 'efgh', 'ijkl', 'a': 'apple', 'b': 'orange', 'c': 'cherry')",
        "num_ids": 234
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n",
        "test": "assert     maxAverageOfPath([[1, 2, 3, 4], [5, 6, 7, 8]]) == 8.0",
        "num_ids": 694
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student in students:\n        if students[student][0]>=h and students[student][1]>=w:\n            result[student] = students[student]\n    return result\n",
        "test": "assert     filter_data(students,max_height,min_weight) == {'Max': (95, 185), 'Aida': (100, 182)}",
        "num_ids": 229
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    res = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            res += 1\n    return res\n",
        "test": "assert     eq(count_same_pair([0, 1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 3, 4, 5, 6, 7, 8]), 8)",
        "num_ids": 604
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    power = int(power)\n    sum = 0\n    for i in range(len(base)):\n        sum += int(base[i]) ** power\n    return sum\n",
        "test": "assert ",
        "num_ids": 131
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = text1.replace('\"', '')\n    return text2\n",
        "test": "assert     extract_quotation('') == '', \"Empty string\"",
        "num_ids": 298
    },
    {
        "number": 726,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup) - 1):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    return new_tup\n",
        "test": "assert     (multiply_elements(tuple([0, 1, 2, 3, 4, 5]))!= tuple([0, 1, 4, 10, 20, 40, 50])), 'WRONG RESULT'",
        "num_ids": 586
    },
    {
        "number": 728,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(x) for x in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 224
    },
    {
        "number": 730,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    ans = list(dict.fromkeys(nums))\n    ans.sort()\n    return ans\n",
        "test": "assert     consecutive_duplicates([1,2,3,4,4,4,5,5,6,6,6,7,7]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 675
    },
    {
        "number": 731,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A_cone=1/3*math.pi*(r**2)*h\n    return A_cone\nprint('Exercise 4.1')\nprint(lateralsurface_cone(5,7))\n",
        "test": "assert     lateralsurface_cone(0,2) == 0",
        "num_ids": 360
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' ', ':', text)\n    text = re.sub('\\.', ':', text)\n    text = re.sub(',', ':', text)\n    return text\n",
        "test": "assert     replace_specialchar(\"\") == \"\"",
        "num_ids": 390
    },
    {
        "number": 733,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            # print(mid)\n            return mid\n        elif x < A[mid]:\n            right = mid - 1\n        elif x > A[mid]:\n            left = mid + 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 2, 3, 4, 5, 5, 5, 6, 7], 1) == 0",
        "num_ids": 502
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = []\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            s.append(reduce(lambda x, y: x*y, arr[i:j+1]))\n    return s\n",
        "test": "assert ",
        "num_ids": 207
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # code here\n    n = n >> 1\n    n = n << 1\n    return n ^ n>>32\n",
        "test": "assert     set_middle_bits(3) ==     2",
        "num_ids": 262
    },
    {
        "number": 736,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the insertion point with bisection search.\n    i = bisect.bisect_left(a, x)\n    return i\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the insertion point with bisection search.\n    i = bisect.bisect_right(a, x)\n    return i\n    \ndef left_deletion(a, x):\n    '''\n    Write a function to locate the left deletion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the insertion point with bisection search.\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return None\n",
        "test": "assert     bisect.bisect_left([], 1) == 0",
        "num_ids": 446
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string)) \n",
        "test": "assert     check_str('this') == False",
        "num_ids": 322
    },
    {
        "number": 738,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return geometric_sum(n-1) + n**n\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 159
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # n must be a positive integer\n    if n <= 0 or math.ceil(math.log10(n))!= math.floor(math.log10(n)): \n        return -1 \n    \n    # Initialize starting number with minimum digits \n    # so that n-digit triangular numbers can be formed. \n    start = 10**(n - 1) \n    \n    # Keep adding 1 to the starting number \n    # till it is divisible by 10 \n    while (10 * (start - 1)) % (n + 1)!= 0: \n        start += 1\n    \n    # find the smallest triangular number \n    # with n digits and return its index \n    return (10 * (start - 1)) / (n + 1) \n",
        "test": "assert     find_Index(1) == 0, \"test failed\"",
        "num_ids": 477
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        test_dict[test_tup[i][0]] = test_tup[i][1]\n    print(test_dict)\n",
        "test": "assert     tuple_to_dict(('A', 'B', 'C')) == {'A': 'B', 'B': 'C'}, 'tuple_to_dict failed'",
        "num_ids": 320
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(i == s[0] for i in s)\n",
        "test": "assert     all_Characters_Same(\"\") == True, \"Error\"",
        "num_ids": 253
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/4 * side**2 * math.sqrt(3)\n",
        "test": "assert     area_tetrahedron(1) ==    math.sqrt(3)/4",
        "num_ids": 243
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.append(list.pop(0))\n    return list\n",
        "test": "assert     rotate_right([10, 20, 30, 40], 3) == [20, 30, 40, 10], \"rotate right is broken\"",
        "num_ids": 462
    },
    {
        "number": 744,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n",
        "test": "assert     check_none((1, 2, 3, None)) == True, \"tuple with None\"",
        "num_ids": 295
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum+1) if check_divisible_by_digits(x)]\n    \ndef check_divisible_by_digits(number):\n    '''\n    A function to check whether the given number is divisible by the sum of its digits\n    '''\n    if sum([int(i) for i in str(number)]) % number == 0:\n        return True\n    return False\n",
        "test": "assert ",
        "num_ids": 303
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (r**2)*(math.acos(-1*a/180)-math.acos((a-360)/180))\n    #return None if a>360\n    #return math.acos(-1*a/180)*r**2 if a<360\n",
        "test": "assert ",
        "num_ids": 181
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "test": "assert     (lcs_of_three('AGGTAB', 'GXTXAYB', 'GXTXAYB')) == 'GTAB', \"Wrong Answer\"",
        "num_ids": 998
    },
    {
        "number": 748,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_string = ''\n    for each_char in str1:\n        if each_char.isupper():\n            new_string += each_char +''\n        else:\n            new_string += each_char\n    return new_string\n",
        "test": "assert     capital_words_spaces('This is an example of a sentence example 123.') == 'This is an example of a sentence example 123.', 'Wrong result for string \"This is an example of a sentence example 123.\"'",
        "num_ids": 487
    },
    {
        "number": 749,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    nums_list = list(nums_str)\n    nums_list.sort(key=lambda x: int(''.join(str(ord(c)) for c in x)))\n    return nums_list\n",
        "test": "assert     sort_numeric_strings(['10', '6', '8', '2']) == ['2', '6', '8', '10']",
        "num_ids": 266
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "test": "assert     add_tuple([1, 2, (1, 2)], (4, 5)) == [1, 2, (1, 2), (4, 5)]",
        "num_ids": 258
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    length = len(arr)\n    if i >= length:\n        return True\n    \n    left = 2*i + 1\n    right = 2*i + 2\n    \n    if left < length and arr[left] < arr[i]:\n        return False\n    if right < length and arr[right] < arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    \n    \ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n",
        "test": "assert     check_min_heap_helper([0,1,2,3,4,5], 1)",
        "num_ids": 456
    },
    {
        "number": 752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n",
        "test": "assert     jacobsthal_num(4) == 11",
        "num_ids": 270
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    if n==0 or K==0:\n        return None\n    # Initialize starting point as minimum\n    # ending point\n    min_idx, min_val = 0, test_list[0][0]\n    for i in range(n):\n        if min_val>test_list[i][0]:\n            min_val=test_list[i][0]\n            min_idx=i\n    min_k_list=[]\n    for j in range(K):\n        min_k_list.append(test_list[min_idx])\n        for i in range(min_idx):\n            if test_list[i][1]<test_list[min_idx][1]:\n                min_idx=i\n    return min_k_list\n",
        "test": "assert     [(1,2),(2,2),(3,2)] == min_k( [(1,2),(2,2),(3,2),(4,2)], 2)",
        "num_ids": 1713
    },
    {
        "number": 754,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in l:\n            l.append(l1[i])\n    return l\n",
        "test": "assert     [] == extract_index_list([], [], [])",
        "num_ids": 655
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list first\n    numbers.sort()\n    return numbers[1]\n    \ndef second_largest(numbers):\n    '''\n    Write a function to find the second largest number in a list.\n    '''\n    # sort the list in reverse order\n    numbers.sort(reverse=True)\n    return numbers[1]\n",
        "test": "assert     second_smallest([3, 3, 3]) == 3, \"Test 4\"",
        "num_ids": 243
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.b*')\n    if pattern.search(text):\n        return 'Match'\n    else:\n        return 'No Match'\n",
        "test": "assert     text_match_zero_one(\"aabb\") == True, \"WRONG\"",
        "num_ids": 372
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total_pairs = 0\n    for element in test_list:\n        reverse_element = element[::-1]\n        if reverse_element in test_list:\n            total_pairs += 1\n    return total_pairs\n",
        "test": "assert ",
        "num_ids": 268
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if type(list1)!= list:\n        return \"Invalid input\"\n    if len(list1) < 1:\n        return \"Invalid input\"\n    if len(list1) == 1:\n        return {(tuple(list1),):1}\n",
        "test": "assert ",
        "num_ids": 676
    },
    {
        "number": 759,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if isinstance(num, int):\n        return False\n    return True\n",
        "test": "assert     is_decimal(\"100\") == True",
        "num_ids": 279
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n",
        "test": "assert     unique_Element([1,2,3,4,5,5,5,5])     == False",
        "num_ids": 296
    },
    {
        "number": 762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return \"February has 28 or 29 days.\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"There are 30 days in given month number.\"\n    else:\n        return \"There are 31 days in given month number.\"\n",
        "test": "assert     check_monthnumber_number(4) == True",
        "num_ids": 495
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    sorted_arr = sorted(arr) \n    min_diff = sorted_arr[1] - sorted_arr[0] \n    for i in range(1, n): \n        if(sorted_arr[i] - sorted_arr[i - 1] < min_diff): \n            min_diff = sorted_arr[i] - sorted_arr[i - 1] \n    return min_diff\n",
        "test": "assert ",
        "num_ids": 262
    },
    {
        "number": 764,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit()==True:\n            count+=1\n    return count\n",
        "test": "assert     number_ctr('123')         ==     3",
        "num_ids": 272
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n",
        "test": "assert     is_polite(1) == True ",
        "num_ids": 2350
    },
    {
        "number": 766,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i = 0\n    pair_list = []\n    for item in l1:\n        if i < len(l1)-1:\n            pair_list.append((item,l1[i+1]))\n        i += 1\n    return pair_list\n",
        "test": "assert     pair_wise([1,2,3,4,5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 449
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([1, 2, 3, 4, 5], 10) == 0, 'Incorrect output'",
        "num_ids": 400
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "test": "assert     Diff([1,2,3],[2,3]) == [1], 'Diff result 1 not matching'",
        "num_ids": 225
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([(n * i) ** 4 for i in range(1, n + 1, 2)])\n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 220
    },
    {
        "number": 771,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef is_parenth(s):\n    if len(s) == 0:\n        return False\n    parenth_map = {'(':')', '{':'}', '[':']'}\n    stack = []\n    for char in s:\n        if char in parenth_map:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if parenth_map[stack.pop()]!= char:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_parenth(s):\n    if is_parenth(s):\n        return 'The string is balanced'\n    else:\n        return 'The string is not balanced'\ndef get_max_profit_stock(prices):\n    '''\n    You are given an array prices where prices[i] is the price of a given stock on the ith day.\n    You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n    Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n    '''\n    if len(prices) < 2:\n        return 0\n    profit = 0\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i - 1]:\n            profit += prices[i] - prices[i - 1]\n    return profit\ndef k_greatest(a, k):\n    '''\n    You are given an array of positive numbers and a positive number, k.\n    Find the maximum sum of any contiguous subarray of size k.\n    '''\n    if len(a) < k:\n        return 0\n    if len(a) == k:\n        return sum(a)\n    sum_list = [0]\n    for i in range(k):\n        sum_list.append(sum_list[-1] + a[i])\n    for i in range(k, len(a)):\n        sum_list[i] = sum_list[i - 1] + a[i]\n    return max(sum_list[k:])\ndef find_permutation(nums):\n    '''\n    Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\n    '''\n    nums_set = set()\n    nums_set_list = []\n    for num in nums:\n        nums_set.add(num)\n        nums_set_list.append(num)\n    for i in range(len(nums)):\n        if i not in nums_set:\n            return i\n    return len(nums)\ndef get_missing_num(arr):\n    '''\n    Given an unsorted array containing n+1 integers where each integer is between 1 and n (inclusive), \n    find the missing integer.\n    '''\n    arr_set = set()\n    for num in arr:\n        arr_set.add(num)\n    for i in range(len(arr) + 1):\n        if i not in arr_set:\n            return i\ndef get_missing_num_v2(arr):\n    '''\n    Given an unsorted array containing n+1 integers where each integer is between 1 and n (inclusive), \n    find the missing integer. But, you are not allowed to use any sorting function that you have not learned yet.\n    '''\n    n = len(arr)\n    nums = [False] * (n + 1)\n    for num in arr:\n        nums[num] = True\n    for i in range(n):\n        if nums[i]:\n            continue\n        else:\n            return i\n    return n\ndef reverse_words(words):\n    '''\n    Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        words[i] = list(words[i])\n        words[i].reverse()\n        words[i] = ''.join(words[i])\n    return''.join(words)\ndef reverse_words_v2(words):\n    '''\n    Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n    But, you are not allowed to use any sorting function that you have not learned yet.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        words[i] = list(words[i])\n    n = len(words) - 1\n    for i in range(n, -1, -1):\n        start = 0\n        end = len(words[i]) - 1\n        while start <= end:\n            words[i][start], words[i][end] = words[i][end], words[i][start]\n            start += 1\n            end -= 1\n        words[i] = ''.join(words[i])\n    return''.join(words)\ndef reverse_words_v3(words):\n    '''\n    Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n    But, you are not allowed to use any sorting function that you have not learned yet.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        words[i] = list(words[i])\n    return''.join([''.join(word[::-1]) for word in words])\ndef reverse_words_v4(words):\n    '''\n    Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n    But, you are not allowed to use any sorting function that you have not learned yet.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        words[i] = list(words[i])\n    return''.join([''.join(word) for word in words])\ndef reverse_words_v5(words):\n    '''\n    Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n    But, you are not allowed to use any sorting function that you have not learned yet.\n    '''\n    words = words.split(' ')\n    for i in range(len(words)):\n        words[i] = list(words[i])\n    return''.join([''.join(word) for word in words])\ndef is_anagram(s1, s2):\n    '''\n    Given two strings s and t, write a function to determine if t is an anagram of s.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    s1_list = [0] * 256\n    s2_list = [0] * 256\n    for char in s1:\n        s1_list[ord(char)] += 1\n    for char in s2:\n        s2_list[ord(char)] += 1\n    return s1_list == s2_list\ndef is_anagram_v2(s1, s2):\n    '''\n    Given two strings s and t, write a function to determine if t is an anagram of s.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = s1.lower()\n    s2 = s2.lower()\n    s1_list = [0] * 256\n    s2_list = [0] * 256\n    for char in s1:\n        s1_list[ord(char)] += 1\n    for char in s2:\n        s2_lis",
        "test": "assert     check_expression(\"(a+b))\") == False, \"Oops, you have a missing paranthesis\"",
        "num_ids": 575
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(word for word in test_str.split() if len(word)!= K)\n    \n    ",
        "test": "assert     remove_length(\"the quick brown fox jumps over the lazy dog\", 7) == 'the quick brown fox jumps over the lazy dog', 'Error'",
        "num_ids": 368
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurance = re.search(pattern, text)\n    if occurance:\n        return occurance.group()\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"xyzxyzxyzxyz\",\"xyz\") == [2,7]",
        "num_ids": 598
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums = set()\n    for i in range(0, len(nums), 2):\n        odd_nums.add(nums[i])\n    if len(odd_nums) == len(nums) / 2:\n        return True\n    else:\n        return False\n",
        "test": "assert     odd_position([2, 4, 6, 8, 10]) is False, 'Wrong!'",
        "num_ids": 474
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u':\n            if i+1 < len(test_str):\n                if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u':\n                    count += 1\n            if i-1 >= 0:\n                if test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u':\n                    count += 1\n        elif test_str[i] == 'A' or test_str[i] == 'E' or test_str[i] == 'I' or test_str[i] == 'O' or test_str[i] == 'U':\n            if i+1 < len(test_str):\n                if test_str[i+1] == 'A' or test_str[i+1] == 'E' or test_str[i+1] == 'I' or test_str[i+1] == 'O' or test_str[i+1] == 'U':\n                    count += 1\n            if i-1 >= 0:\n                if test_str[i-1] == 'A' or test_str[i-1] == 'E' or test_str[i-1] == 'I' or test_str[i-1] == 'O' or test_str[i-1] == 'U':\n                    count += 1\n    return count\n",
        "test": "assert     count_vowels(\"xyz\") == 0",
        "num_ids": 1334
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert",
        "num_ids": 245
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    i = 0\n    while i < len(list1):\n        count = 1\n        while i+1 < len(list1) and list1[i] == list1[i+1]:\n            count += 1\n            i += 1\n        if count > 1:\n            list1[i] = [list1[i]]*count\n            i += count\n        else:\n            i += 1\n    return list1\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 2605
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = dict()\n    for sublist in list1:\n        if tuple(sublist) in count_dict:\n            count_dict[tuple(sublist)] += 1\n        else:\n            count_dict[tuple(sublist)] = 1\n    return count_dict\n",
        "test": "assert     unique_sublists([[1,2,3],[4,5,6,6,7,8],[9,9,9,9,9,9,9]]) == {(1,2,3):1,(4,5,6,6,7,8):1,(9,9,9,9,9,9,9):1}",
        "num_ids": 2866
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_list = []\n    for i in range(1,len(test_list)):\n        sum_list.append(combinations(test_list,i))\n        print(sum_list)\n    print(\"Combinations are:\")\n    for i in range(len(sum_list)):\n        print(list(sum_list[i]))\n",
        "test": "assert     set(find_combinations([(1,2,3,4,5),(6,7,8,9,10),(3,4,5,6,7),(4,5,6,7,8)])) == set([(1, 2, 3, 4, 5), (1, 2, 3, 4, 6), (1, 2, 3, 4, 7), (1, 2, 3, 4, 8), (1, 2, 3, 4, 9), (1, 2, 3, 4, 10), (1, 2, 3, 5, 6), (1, 2, 3, 5, 7), (1, 2, 3, 5, 8), (1, 2, 3, 5, 9), (1, 2, 3, 5, 10), (1, 2, 3, 6, 7), (1, 2, 3, 6, 8), (1, 2, 3, 6, 9), (1, 2, 3, 6, 10), (1, 2, 3, 7, 8), (1, 2, 3, 7, 9), (1, 2, 3, 7, 10), (1, 2, 3, 8, 9), (1, 2, 3, 8, 10), (1, 2, 3, 9, 10), (1, 3, 4, 5, 6), (1, 3, 4, 5, 7), (1, 3, 4, 5, 8), (1, 3, ",
        "num_ids": 2389
    },
    {
        "number": 781,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    result = 0\n    for i in range(1, math.ceil(math.sqrt(n))): \n        if (n % i == 0): \n            if (n / i == i): \n                result += 1\n            else: \n                result += 2\n    return result \n    \ndef count_divisors_sqrt(n):\n    '''\n    Write a python program to check whether the count of divisors is even for all the numbers between 1 and n using while loop. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    c = 1\n    while(n > c): \n        if(count_divisors(c) % 2 == 0): \n            print(\"even number\", c)\n        else:\n            print(\"odd number\", c)\n        c += 1\ncount_divisors_sqrt(5000)\n",
        "test": "assert     count_divisors(5) == 2, 'Wrong'",
        "num_ids": 445
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            sum_subarrays += sum(arr[i:j+1])\n    return sum_subarrays\n",
        "test": "assert ",
        "num_ids": 201
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # r,g,b = rgb_to_dec(r,g,b)\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0), \"error in rgb_to_hsv()\"",
        "num_ids": 795
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    l = []\n    for i in list1:\n        if i%2 == 0:\n            l.append(i)\n        elif i%2!= 0:\n            l.append(i)\n    if len(l)%2!= 0:\n        l.pop()\n    l1 = []\n    for i in list1:\n        if i%2 == 0:\n            l1.append(i)\n        elif i%2!= 0:\n            l1.append(i)\n    return l,l1\n",
        "test": "assert     mul_even_odd([1,2,3]) == 6, 'error'",
        "num_ids": 517
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n",
        "test": "assert     tuple_str_int(\"(10, 20, 30, 40)\") == (10, 20, 30, 40), \"Test failed.\"",
        "num_ids": 356
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    for i in range(len(a)):\n        if x > a[i]:\n            continue\n        else:\n            return i\n    return len(a)\n",
        "test": "assert     right_insertion([1,2,3,4], 5) == 4, 'fails'",
        "num_ids": 231
    },
    {
        "number": 787,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    result = re.search(pattern, text)\n    if result:\n        print(\"Match found: \", result.group())\n    else:\n        print(\"No match was found.\")\n",
        "test": "assert     text_match_three(\"abccd\") == None, 'Not working for \"abccd\"'",
        "num_ids": 425
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_str = ''.join(test_str)\n    print(test_str)\n    print(test_list)\n    return tuple(test_list), test_str\n",
        "test": "assert     new_tuple([\"cat\", \"dog\", \"rabbit\"], \"The new tuple is: ()\")",
        "num_ids": 350
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     even_position([1,3,5,7,9]) == False",
        "num_ids": 269
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = list(test_tup)\n    #count = 0\n    for i in range(len(test_list)):\n        test_list = list(test_tup)\n        if type(test_list[i]) == tuple:\n            test_list.remove(test_list[i])\n        test_tup = tuple(test_list)\n    return test_tup\n    #print(test_list)\n    #print(count)\n",
        "test": "assert     (remove_nested((1, 2, 3)) == (1, 2, 3))",
        "num_ids": 492
    },
    {
        "number": 792,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([]) == 0, 'incorrect'",
        "num_ids": 431
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start+end)//2\n        if arr[mid] > x:\n            end = mid -1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            if (mid == len(arr)-1) or (arr[mid+1]!=x):\n                return mid\n            else:\n                start = mid + 1\n    return -1\n",
        "test": "assert     last([1,2,3,4,5,5,6,6,7],1) == 0, \"check failed\"",
        "num_ids": 536
    },
    {
        "number": 794,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.lower()\n    a = re.search(r'a.*b$',text)\n    print(a)\n    return True if a else False\n",
        "test": "assert     text_starta_endb('apple') == False",
        "num_ids": 415
    },
    {
        "number": 796,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n",
        "test": "assert     return_sum({'A': 1, 'B': 3}) == 4, 'Not correct'",
        "num_ids": 158
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n*(n+1))/2\n",
        "test": "assert     sum_odd(100) ==     5050",
        "num_ids": 172
    },
    {
        "number": 798,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert     _sum([1, 2, 3]) == 6",
        "num_ids": 153
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # First, we perform d bit left shift and then we do XOR\n    n=n<<d\n    return n^(2**d-1)\n",
        "test": "assert     left_rotate(0b10110110110, 3) == 0b101111011010",
        "num_ids": 256
    },
    {
        "number": 800,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert     remove_all_spaces(\"Hello, world!\")                 == \"Hello,world!\"",
        "num_ids": 294
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return (x+y+z)/3\n",
        "test": "assert     test_three_equal(1,2,3) == 2",
        "num_ids": 362
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    for i in range(0, n):\n        j = i\n        while j >=0:\n            if arr[j] > arr[j+1]:\n                return j\n            else:\n                break\n        j -=1\n    return -1\n",
        "test": "assert     count_rotation([8,4,2,1]) == 0",
        "num_ids": 301
    },
    {
        "number": 803,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n\n    if (sqrt % 2 == 0):\n        return False\n    i = 3\n    while (i * i <= n):\n        if (n % i == 0):\n            return False\n        i = i + 2\n    return True\n",
        "test": "assert     is_perfect_square(8) ==     False, \"Fails\"",
        "num_ids": 600
    },
    {
        "number": 804,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for number in arr:\n        product *= number\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([1,2,3,4,5]) == True, \"Wrong output\"",
        "num_ids": 207
    },
    {
        "number": 805,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for sub_list in lists:\n        if sum(sub_list) > max_sum:\n            max_sum = sum(sub_list)\n            max_list = sub_list\n    return max_list\n",
        "test": "assert     max_sum_list([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]",
        "num_ids": 364
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    new_str = \"\"\n    new_str = test_str.upper()\n    maximum = 0\n    if new_str!= \"\":\n        for i in new_str:\n            if i.isupper():\n                if new_str.count(i) > maximum:\n                    maximum = new_str.count(i)\n    return maximum\n",
        "test": "assert     max_run_uppercase(\"\") == 0, \"wrong answer for max_run_uppercase(' ')\"",
        "num_ids": 523
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return 0\n",
        "test": "assert     first_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 1, \"Test case 1 failed.\"",
        "num_ids": 448
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    print(test_tup)\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_K((('a','b','c'), ('1', '2', '3')), 1) == False, \"wrong result\"",
        "num_ids": 586
    },
    {
        "number": 809,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n    return True\n    \n    \n",
        "test": "assert     check_smaller((1, 3, 5, 7, 9), (1, 2, 3, 4, 5)) == False, 'Error'",
        "num_ids": 468
    }
]