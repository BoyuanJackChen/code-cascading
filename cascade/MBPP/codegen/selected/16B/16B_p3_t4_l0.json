[
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the test tuple to sets and compare\n    return list(set(test_tup1).intersection(set(test_tup2)))\n",
        "test": "assert     similar_elements([1, 2, 3], [2, 3]) == [2, 3]",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n",
        "test": "assert     is_not_prime(12) == True",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<n:\n        print(\"The list is too small.\")\n        return None\n    \n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,(-nums[i],i))\n    result=[]\n    for i in range(n):\n        result.append(nums[hq.heappop(heap)[1]])\n    return result\n",
        "test": "assert     heap_queue_largest([2,1,3,4],4) == [4,3,2,1]",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return False\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n    return True\n",
        "test": "assert     is_Power_Of_Two(2**16) == True ",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    results = []\n    for word in text.split():\n        if len(word) >= 4:\n            results.append(word)\n    return results\n",
        "test": "assert     find_char_long('hi') == []",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n",
        "test": "assert     [0,1,4,9,16] == square_nums([0,1,2,3,4])",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_length = len(str)\n    for i in range(0, str_length): \n        if str[i:] + str[:i] == str: \n            return i \n    return -1\n",
        "test": "assert     find_Rotations('abc') == 0, \"find_Rotations('abc') is wrong!\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\")\n",
        "test": "assert     remove_Occ(\"hello\",'e') == \"hllo\"",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=sum)\n    return M\n",
        "test": "assert ",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3\n",
        "test": "assert     find_Volume(6,5,2) == 120",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search('[_]+[a-z]+[a-z]*', text) else False\n",
        "test": "assert     text_lowercase_underscore('the_tail_is_wagging') == True",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 4 * a\n    return p\n",
        "test": "assert     square_perimeter(1) == 4",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    array_string = [0]*NO_OF_CHARS\n    for i in string:\n        array_string[ord(i)] += 1\n",
        "test": "assert     str_to_list('''Hacking is cool''','so') == 'Hacking is cool'",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return all(elem in arraynums for elem in arraynums)\n",
        "test": "assert     test_duplicate([0,1,3,4,5,6,0]) == True",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x%7==0) or (x%9==0) or (x%15==0): \n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     is_woodall(8) == False",
        "num_ids": 2277,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = str(num)[::-1]\n    if str(num) == (rev[::-1]):\n        return True\n    else:\n        return False\n        \ndef d(n):\n    '''\n    Write a python function to check if a given number is the sum of its own digits squared.\n    '''\n    sum = 0\n    for i in str(n):\n        sum += int(i)**2\n    if sum == n:\n        return True\n    else:\n        return False\n        \ndef f(n):\n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    flag = False\n    if n > 1:\n        for i in range(2, n):\n            if n%i == 0:\n                flag = True\n                break\n        if not flag:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef e(n):\n    '''\n    Write a python function to check if a given number has exactly 9 divisors.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            c += 1\n    if c == 9:\n        return True\n    else:\n        return False\n    \ndef s(n):\n    '''\n    Write a python function to check if a given number has the same digits when reversed.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\n        \ndef f(n):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    flag = False\n    if n > 0:\n        s = str(n)\n        if s == s[::-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef t(n):\n    '''\n    Write a python function to check if a given number is a truncatable prime.\n    '''\n    flag = False\n    if f(n) == True:\n        if s(n) == True:\n            if d(n) == True:\n                if e(n) == True:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     rev(1234)!= 4322",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = max(arr)\n    return max_num\n    \ndef find_Max_Num_2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = []\n    for i in arr : \n        max_num.append(int(i))\n    max_num.sort()\n    max_num = max_num[::-1]\n    return max_num[0]\n    \ndef find_Max_Num_3(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    numbers = [str(x) for x in arr]\n    number_list = \"\".join(numbers)\n    return max(map(int,number_list))\n    ",
        "test": "assert     find_Max_Num([9,9,9,9,9]) == 9",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    if x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(-9,9) == True",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    d = defaultdict(int)\n    d[0] = 1\n    running_sum = 0\n    ans = 0\n    for i in range(l):\n        running_sum += int(s[i])\n        ans += d[running_sum - l]\n        d[running_sum] += 1\n    return ans\n    \nprint(count_Substrings('101'))\n",
        "test": "assert     count_Substrings('1234*567') ==    0",
        "num_ids": 2365,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n",
        "test": "assert     smallest_num([2, 5, 3, 1, -1]) == -1",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_length = len(test_list)\n    if list_length < 2:\n        return 0\n    \n    temp_list = []\n    for i in range(list_length-1):\n        for j in range(i+1, list_length):\n            temp_list.append((test_list[i], test_list[j]))\n    \n    temp_list.sort(key=lambda x: abs(x[0]-x[1]))\n    return abs(temp_list[-1][0] - temp_list[-1][1])\n",
        "test": "assert     max_difference([(4, 5), (1, 2), (3, 4), (6, 8), (7, 9), (0, 1)]) == 7",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1], reverse=True)\n    \ndef extract_marks(subject):\n    '''\n    Write a function to extract marks from a dictionary.\n    '''\n    return dict(subject)['marks']\n    \ndef extract_subjects(subjectmarks):\n    '''\n    Write a function to extract the subjects from a list of tuples.\n    '''\n    return list(map(lambda x: x[0], subjectmarks))\n",
        "test": "assert     subject_marks([(100,'maths'), (95, 'physics'), (90, 'chemistry'), (85, 'biology'), (70, 'english')]) == [(70, 'english'), (85, 'biology'), (95, 'physics'), (90, 'chemistry'), (100,'maths')], \"Subject Marks are incorrect\"",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n",
        "test": "assert recursive_list_sum([]) == 0, 'Check the empty list'",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([1, 3, -4, 7, 8, 9, 0]) == 5",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Compute the Bell number (n,k)\n    bell = bell_number_helper(n)\n    # If the number of partition is even, the number of ways to partition is divisible by 2.\n    if n % 2 == 0:\n        return bell // 2\n    else:\n        # Else, the number of ways to partition is odd, so we can add 1 to the number of ways.\n        return bell // 2 + 1\n",
        "test": "assert     bell_number(100) == bell_number(99) + bell_number(98)",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if(A[i]<=A[i+1]):\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([0, 1, 2, 3, 4, 5]) == True",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    return is_sublist(l[1:], s) if s[0] == l[0] else is_sublist(l[1:], s[1:])\n",
        "test": "assert     is_sublist([1, 2, 3], [1, 2, 4]) == False",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,2,3),(4,5),(6,7,8),(1,2,3,4,5),(6,7,8,9,10)]) == False",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        gap = max(1, gap)\n        swapped = False\n        i = 0\n        while i+gap < size:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n            i += 1\n",
        "test": "assert ",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt = int(n**0.5)\n    if (n**0.5 == sqrt): \n        return (sqrt * sqrt == n)\n    else:\n        return False\n",
        "test": "assert     dif_Square(15)         == False     ",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_pattern_map = {}\n    for idx,color in enumerate(colors):\n        if color in color_pattern_map:\n            if color_pattern_map[color]!= patterns[idx]:\n                return False\n        else:\n            color_pattern_map[color] = patterns[idx]\n    return True\n",
        "test": "assert     is_samepatterns([    'R', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B'], ['R', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B']) == False",
        "num_ids": 1570,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(i%K==0 for i in t)]\n",
        "test": "assert     find_tuples([(3, 4, 5), (6, 7, 8)], 2) == []",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n",
        "test": "assert     is_Diff(11) == True",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n",
        "test": "assert     word_len('hello') == False, \"The length of the word hello is odd\"",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return \"N must be greater than 0\"\n    elif n == 1:\n        return 1\n    else:\n        return n * (n-1) // 2 + 1\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n",
        "test": "assert     volume_sphere(10) == 4188.790204786391",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n",
        "test": "assert     get_Char('dungeons and dragons') == 'D'",
        "num_ids": 2288,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # base case:\n    if n == 0:\n        return 0\n    # recursive case:\n    else:\n        return n + sequence(n - 1)\n",
        "test": "assert ",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa=4*math.pi*r**2\n    return sa\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa=2*math.pi*r*h+2*math.pi*r**2\n    return sa\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    sa=math.pi*r**2+math.pi*r*h\n    return sa\ndef surfacearea_prism(l,w,h):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    sa=2*l*w+2*l*h+2*w*h\n    return sa\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    sa=6*s**2\n    return sa\ndef surfacearea_tetrahedron(s):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    sa=4*math.sqrt(3)*s**2\n    return sa\ndef surfacearea_hexagon(s):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    sa=6*math.sqrt(3)*s**2/2\n    return sa\ndef surfacearea_rectangle(s,l):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    sa=2*s*l\n    return sa\ndef surfacearea_triangle(s,b):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    sa=s*b/2\n    return sa\ndef surfacearea_rhombus(s,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    sa=s*b\n    return sa\ndef surfacearea_squarepyramid(s,b):\n    '''\n    Write a function to find the surface area of a square pyramid.\n    '''\n    sa=2*(s*b+s**2)**(1/2)\n    return sa\ndef surfacearea_parallelogram(s,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    sa=s*b\n    return sa\ndef surfacearea_triangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    sa=(s*b**2+s*h**2)**(1/2)\n    return sa\ndef surfacearea_rectangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    sa=2*(s*b+s*h)\n    return sa\ndef surfacearea_spheretriangularprism(r,h):\n    '''\n    Write a function to find the surface area of a sphere triangular prism.\n    '''\n    sa=2*(math.pi*r**2*h)\n    return sa\ndef surfacearea_cubictriangularprism(s,b,h):\n    '''\n    Write a function to find the surface area of a cube triangular prism.\n    '''\n    sa=3*(s*b**2+s*h**2)\n    return sa\ndef surfacearea_cubehexagonalprism(s,h):\n    '''\n    Write a function to find the surface area of a cube hexagonal prism.\n    '''\n    sa=6*s*h\n    return sa\ndef surfacearea_pyramidalhexagonalprism(s,h):\n    '''\n    Write a function to find the surface area of a pyramidal hexagonal prism.\n    '''\n    sa=2*s*(math.sqrt(2)*h+h/math.sqrt(6))\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*r**3\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r**2*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=1/3*math.pi*r**2*h\n    return v\ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    v=l*w*h\n    return v\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v=s**3\n    return v\ndef volume_tetrahedron(s):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    v=1/4*math.sqrt(3)*s**3\n    return v\ndef volume_hexagon(s):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    v=1/2*math.sqrt(3)*s**2\n    return v\ndef volume_rectangle(s,l):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    v=s*l\n    return v\ndef volume_triangle(s,b):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v=s/2*b\n    return v\ndef volume_rhombus(s,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    v=s*b/2\n    return v\ndef volume_squarepyramid(s,b):\n    '''\n    Write a function to find the volume of a square pyramid.\n    '''\n    v=s*b**2/3\n    return v\ndef volume_parallelogram(s,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    v=s*b\n    return v\ndef volume_triangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    v=s*b*h/3\n    return v\ndef volume_rectangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    v=s*b*h\n    return v\ndef volume_spheretriangularprism(r,h):\n    '''\n    Write a function to find the volume of a sphere triangular prism.\n    '''\n    v=1/3*math.pi*r**2*h\n    return v\ndef volume_cubictriangularprism(s,b,h):\n    '''\n    Write a function to find the volume of a cube triangular prism.\n    '''\n    v=s*b**2*h/3\n    return v\ndef volume_cubehexagonalprism(s,h):\n    '''\n    Write a function to find the volume of a cube hexagonal prism.\n    '''\n    v=s*h**3/3\n    return v\ndef volume_pyramidalhexagonalprism(s,h):\n    '''\n    Write a function to find the volume of a pyramidal hexagonal prism.\n    '''\n    v=s*(math.sqrt(2)*h**2+h/math.sqrt(6))\n    return v\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi, \"incorrect\"",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        return hexagonal_number(n//2)\n    else:\n        return hexagonal_number(n//2) + 2 * (hexagonal_number(n//2 + 1) - hexagonal_number(n//2 - 1))\n",
        "test": "assert     centered_hexagonal_number(8) == 408",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if not dict1:\n        return dict2\n    elif not dict2:\n        return dict1\n    elif not dict3:\n        return dict2\n",
        "test": "assert     merge_dictionaries_three({},{}, {}) == {}, \"Empty dictionaries should return an empty dict!\"",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = dict()\n    for x in list1:\n        freq_dict[x] = list1.count(x)\n    return freq_dict\n",
        "test": "assert     collections.Counter([1, 2, 3, 1, 1, 2, 3, 2]) == freq_count([1, 2, 3, 1, 1, 2, 3, 2])",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    def find_closest(n):\n        if n % 2 == 0:\n            return n - 1\n        else:\n            return n + 1\n    num = 0\n    print(find_closest(N))\n",
        "test": "assert ",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length_list = []\n    for i in list1:\n        length_list.append(len(i))\n    return max(length_list)\n",
        "test": "assert     len_log([\"hello\", \"world\", \"hi\"]) == 5, \"wrong output\"",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if sub_str in str1:\n        return True\n    return False\n",
        "test": "assert     find_substring('abcde', 'dc') == False",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def check(s, n):\n        if s[0] == '1' and s[n - 1] == '1':\n            return True\n        elif s[0] == '0' and s[n - 1] == '0':\n            return True\n        else:\n            return False\n        return s\n    if n < 2:\n        return False\n    else:\n        s = str(n)\n        if check(s, len(s)):\n            return True\n        else:\n            return False\n",
        "test": "assert     is_undulating(23) == False",
        "num_ids": 2199,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    if b>0:\n        return power(a,b-1)*a\n    if b<0:\n        return power(a,b+1)/a\n",
        "test": "assert     power(2,3) == 8, \"Incorrect\"",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key = itemgetter(1))[1]\n    for item in test_list:\n        if item[1] == min_value:\n            return item[0]\n",
        "test": "assert     index_minimum([(2, 3), (1, 2), (4, 5)]) == 1",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n    \ndef Factorial(num):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if num < 0:\n        return None\n    if num < 2:\n        return 1\n    return num * Factorial(num - 1)\n",
        "test": "assert Find_Min_Length([[10, 20], [30], [25, 18, 11], [27], [45, 33, 50, 90], [1, 2, 3, 4, 5, 6, 7], [8], []]) == 8",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisor_count += 1\n    return divisor_count\n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i not in freq_dict:\n            freq_dict[i] = list1.count(i)\n    return freq_dict\n",
        "test": "assert ",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    s = 1\n    for i in numbers:\n        s *= i\n    return s/len(numbers)\n",
        "test": "assert     (multiply_num([1]) == 1) == True, \"wrong result\"",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_equivalent = [] \n    while n!= 0: \n        remainder = int(n % 2) \n        binary_equivalent.append(str(remainder)) \n        n = n // 2\n    binary_equivalent.reverse() \n    binary_equivalent = ''.join(binary_equivalent) \n    return binary_equivalent \n",
        "test": "assert     decimal_to_binary(100) == '1100100'",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    is_even = num % 2 == 0\n    divisor = 10\n    current_value = num\n    while True:\n        next_value = (current_value // divisor) * divisor\n        if is_even:\n            if next_value >= current_value:\n                break\n            if str(next_value) == str(next_value)[::-1]:\n                return next_value\n        else:\n            if next_value + 1 >= current_value:\n                break\n            if str(next_value + 1) == str(next_value + 1)[::-1]:\n                return next_value + 1\n        current_value = next_value\n        divisor = divisor * 10\n    return -1\n",
        "test": "assert     next_smallest_palindrome(123) == 121",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1:\n        raise ValueError('Value of k must be >= 1')\n    \n    # Find the middle element\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n",
        "test": "assert ",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = []\n    for i in word.split(\"_\"):\n        res.append(i.capitalize())\n    return \"\".join(res)\n",
        "test": "assert     snake_to_camel('snake_case') =='snakeCase'",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1: return 3\n    elif n == 1 and m == 2: return 1\n    elif n == 2 and m == 1: return 5\n    elif n == 2 and m == 2: return 1\n    else: return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n    #return a(n-1, m) + a(n, m-1)\n",
        "test": "assert ",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #create empty lists to store the sorted sublists\n    sublists = []\n    sorted_sublists = []\n    #loop through the given list of lists\n    for i in input_list:\n        #sort the sublists and store the sorted sublists in a list\n        sublists.append(sorted(i))\n    #for each sublist in the list of sublists\n    for j in sublists:\n        #convert the sublist to a string\n        string = \"\".join(j)\n        #append the string to a list\n        sorted_sublists.append(string)\n    #return the list of sorted sublists\n    return sorted_sublists\n",
        "test": "assert ",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    total = 0\n    for x in lst:\n        if bool(x) == True:\n            total += 1\n    return total\n",
        "test": "assert     count([True, False, False, True, False]) == 2, \"Case 1\"",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return list(test_list) + list(test_tup)\n",
        "test": "assert     add_lists(['a', 'b'], ['c', 'd']) == ['a', 'b', 'c', 'd']",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1=num1\n    list2=num2\n    list3=num3\n    list_1=sorted(list1)\n    list_2=sorted(list2)\n    list_3=sorted(list3)\n    list_1.extend(list_2)\n    list_1.extend(list_3)\n    return list_1\ndef count_number_of_inversions(list1,list2,list3):\n    '''\n    Write a function that takes three sorted lists as parameters, and returns the number of inversions between the three lists.\n    '''\n    list_1=list1\n    list_2=list2\n    list_3=list3\n    list_1.extend(list_2)\n    list_1.extend(list_3)\n    len_list_1=len(list_1)\n    # print(list_1)\n    counter_1=0\n    for i in range(len_list_1):\n        for j in range(i+1,len_list_1):\n            if(list_1[i]>list_1[j]):\n                counter_1+=1\n    # print(counter_1)\n    return counter_1\ndef rearrange_digits(input_list):\n    '''\n    Rearrange Array Elements so as to form two number such that their sum is maximum.\n    '''\n    input_list=input_list\n    input_list.sort()\n    # print(input_list)\n    len_input_list=len(input_list)\n    # print(len_input_list)\n    list_1=[]\n    list_2=[]\n    i=0\n    while(len_input_list>1):\n        # print(input_list[i],input_list[len_input_list-1])\n        list_1.append(input_list[i])\n        list_2.append(input_list[len_input_list-1])\n        del input_list[i]\n        del input_list[len_input_list-1]\n        # print(input_list)\n        len_input_list=len(input_list)\n        # print(len_input_list)\n    # print(input_list)\n    list_1.append(input_list[0])\n    list_2.append(input_list[1])\n    # print(list_1,list_2)\n    output_list=[0,0]\n    output_list[0]=sum(list_1)\n    output_list[1]=sum(list_2)\n    return output_list\ndef reverse_digits(input_list):\n    '''\n    You are given a list of integers. Write a function that returns the largest product that can be made by multiplying any three integers in the list.\n    '''\n    input_list=input_list\n    input_list.sort()\n    # print(input_list)\n    len_input_list=len(input_list)\n    list_1=[]\n    list_2=[]\n    list_3=[]\n    i=0\n    while(len_input_list>2):\n        list_1.append(input_list[i])\n        list_2.append(input_list[len_input_list-1])\n        list_3.append(input_list[len_input_list-2])\n        del input_list[i]\n        del input_list[len_input_list-1]\n        del input_list[len_input_list-2]\n        len_input_list=len(input_list)\n    list_1.append(input_list[0])\n    list_2.append(input_list[1])\n    list_3.append(input_list[2])\n    output_list=[0,0,0]\n    output_list[0]=list_1[0]*list_1[1]*list_1[2]\n    output_list[1]=list_2[0]*list_2[1]*list_2[2]\n    output_list[2]=list_3[0]*list_3[1]*list_3[2]\n    return max(output_list)\ndef k_distinct_integers(input_list,k):\n    '''\n    You are given a list of integers. Write a function that returns the largest sum of \n    non-adjacent numbers. Numbers can be 0 or negative.\n    '''\n    input_list=input_list\n    input_list.sort()\n    # print(input_list)\n    len_input_list=len(input_list)\n    list_1=[]\n    list_2=[]\n    list_3=[]\n    i=0\n    while(len_input_list>1):\n        list_1.append(input_list[i])\n        list_2.append(input_list[len_input_list-1])\n        list_3.append(input_list[len_input_list-2])\n        del input_list[i]\n        del input_list[len_input_list-1]\n        del input_list[len_input_list-2]\n        len_input_list=len(input_list)\n    list_1.append(input_list[0])\n    list_2.append(input_list[1])\n    # print(list_1,list_2)\n    output_list=[0,0]\n    output_list[0]=sum(list_1)\n    output_list[1]=sum(list_2)\n    return max(output_list)\ndef check_sublist(list1,list2):\n    '''\n    Write a function that checks if one list is a subset of another list.\n    '''\n    list1=list1\n    list2=list2\n    for i in list1:\n        if(i not in list2):\n            return False\n    return True\ndef find_missing_number(list1):\n    '''\n    You are given a list of n-1 integers and these integers are in the range of 1 to n. \n    There are no duplicates in the list. One of the integers is missing in the list. \n    Write an efficient code to find the missing integer.\n    '''\n    list1=list1\n    len_list1=len(list1)\n    list_1=[]\n    list_2=[]\n    list_3=[]\n    i=0\n    while(len_list1>1):\n        list_1.append(list1[i])\n        list_2.append(list1[len_list1-1])\n        list_3.append(list1[len_list1-2])\n        del list1[i]\n        del list1[len_list1-1]\n        del list1[len_list1-2]\n        len_list1=len(list1)\n    list_1.append(list1[0])\n    list_2.append(list1[1])\n    list_3.append(list1[2])\n    output_list=[0,0,0]\n    for i in range(len(list_1)):\n        output_list[list_1[i]-1]+=1\n    for i in range(len(list_2)):\n        output_list[list_2[i]-1]+=1\n    for i in range(len(list_3)):\n        output_list[list_3[i]-1]+=1\n    for i in range(len(output_list)):\n        if(output_list[i]==0):\n            return i+1\ndef find_missing_number_v2(list1):\n    '''\n    You are given a list of n-1 integers and these integers are in the range of 1 to n. \n    There are no duplicates in the list. One of the integers is missing in the list. \n    Write an efficient code to find the missing integer.\n    '''\n    list1=list1\n    len_list1=len(list1)\n    list_1=[]\n    list_2=[]\n    list_3=[]\n    i=0\n    while(len_list1>1):\n        list_1.append(list1[i])\n        list_2.append(list1[len_list1-1])\n        list_3.append(list1[len_list1-2]",
        "test": "assert     merge_sorted_list([1,3,6], [1,2,7], [1,4,8]) == [1, 1, 1, 2, 3, 4, 6, 7, 8], \"merge_sorted_list failed\"",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code goes here\n    str = '0b'\n    #str = str*n\n    rotation = '0b'\n    for i in range(0,n):\n        rotation += '0'\n    for i in range(0,len(s)):\n        if s[i]=='1':\n            rotation += '1'\n        else:\n            rotation += '0'\n    rotation = int(rotation,2)\n    return rotation\n",
        "test": "assert     odd_Equivalent('010',2) == 2, 'error'",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def check_lists(list1, list2):\n        for i in list2:\n            if i in list1:\n                return True\n        return False\n    final_list = []\n    for i in nestedlist:\n        if check_lists(final_list, i):\n            final_list.append(i)\n    return final_list\n",
        "test": "assert     common_in_nested_lists([]) == []",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"1\") == True, \"check_integer('1') failed\"",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_check = []\n    for dict1 in list1:\n        if len(dict1) == 0:\n            empty_check.append(True)\n        else:\n            empty_check.append(False)\n    if False in empty_check:\n        return False\n    else:\n        return True\n",
        "test": "assert     empty_dit([{},{},{}]) == True, \"Wrong output\"",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = ''\n    for num in nums:\n        num_str += str(num)\n    num_str = num_str.lstrip('0')\n    return int(num_str) if num_str else 0\n",
        "test": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 12345",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n",
        "test": "assert     list_to_float([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [1, 2, 3, 4, 5], 'list_to_float'",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('hello world') == ['hello','world']",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    sorted_arr = sorted(arr)\n    for i in range(0, len(sorted_arr)):\n        if i == 0:\n            continue\n        if sorted_arr[i]!= sorted_arr[i-1]:\n            return sorted_arr[i]\n    return sorted_arr[0]\n",
        "test": "assert     search([1,1,2]) == 2",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    elif len(list1) == 2:\n        return list1[0][0]*list1[1][0]\n    else:\n        max_tuple = []\n        for i in range(0,len(list1) - 1):\n            for j in range(i + 1, len(list1)):\n                if i!= j:\n                    max_tuple.append(list1[i][0]*list1[j][0])\n        return max(max_tuple)\n",
        "test": "assert     max_product_tuple([(1,3), (-3,2), (-5,6), (7,8), (-9,9)]) == -9",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_of_divisors(n):\n        result = 0\n        for i in range(1, n):\n            if n % i == 0:\n                result += i\n        return result\n",
        "test": "assert     amicable_numbers_sum(10000) == 31626",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\n",
        "test": "assert     angle_complex(3+4j,3+4j)==0",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    maxdiff = 0\n    for i in string:\n        if i == \"0\":\n            count0 += 1\n        elif i == \"1\":\n            count1 += 1\n        if count0 == count1:\n            if maxdiff < count0 - count1:\n                maxdiff = count0 - count1\n        elif count0 > count1:\n            if maxdiff < count0 - count1:\n                maxdiff = count0 - count1\n        elif count1 > count0:\n            if maxdiff < count1 - count0:\n                maxdiff = count1 - count0\n    return maxdiff\n",
        "test": "assert     find_length('1101101101110') == 6",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = 1\n    sum = 0\n    while(x <= a or x <= b):\n        if(a % x == 0 and b % x == 0):\n            sum = sum + x\n        x = x + 1\n    return sum\n",
        "test": "assert     sum(7,5) == 1",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(5, 3) == 15",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    print(\"\\n\\nQUESTION:\")\n    print(\"\\nWrite a function to find words that are longer than n characters from a given list of words.\")\n    print(\"\\nHere is a list of words to test the function with:\\n\",str)\n    print(\"\\nPlease enter n: \")\n    n = int(input())\n    print(\"\\nPlease enter a list of words separated by commas: \")\n    words_list = input().split(\",\")\n    print(\"\\nThe following words have more than\",n,\"characters:\\n\")\n    for word in words_list:\n        if len(word) > n:\n            print(word)\n",
        "test": "assert ",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (\n        my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2] == my_matrix[1][0] + my_matrix[1][1] + my_matrix[1][2] == my_matrix[2][0] + my_matrix[2][1] + my_matrix[2][2] == my_matrix[0][0] + my_matrix[1][0] + my_matrix[2][0] == my_matrix[0][1] + my_matrix[1][1] + my_matrix[2][1] == my_matrix[0][2] + my_matrix[1][2] + my_matrix[2][2] == my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n    ):\n        print(my_matrix)\n        print('\\n')\n        return'magic_square'\n    else:\n        print(my_matrix)\n        print('\\n')\n        return 'not_magic_square'\n",
        "test": "assert     magic_square_test(magic_square_test) == True, 'Error: magic_square_test'",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_item = None\n    freq = defaultdict(int)\n    for i in nums:\n        freq[i] += 1\n        if freq[i] > max_freq:\n            max_freq = freq[i]\n            max_item = i\n    return max_item\n",
        "test": "assert     max_occurrences([1, 2, 2, 3]) == 2",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #str1 = input('Enter a string: ')\n    vowels = 'aeiou'\n    str1 = list(str1)\n    n = len(str1)\n    i = 0\n    j = n-1\n    while(i<j):\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i] not in vowels and str1[j] not in vowels:\n            i += 1\n            j -= 1\n        elif str1[i] in vowels and str1[j] not in vowels:\n            j -= 1\n        elif str1[i] not in vowels and str1[j] in vowels:\n            i += 1\n    return ''.join(str1)\n",
        "test": "assert     reverse_vowels(\"aeiou\") == \"uoiea\", \"Incorrect\"",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i)\n        string +=''\n    return string\n",
        "test": "assert     tup_string(('b', 'g', 'g', 'b', 'b', 'g')) == 'bggbbg', 'error'",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    for num in nums:\n        # check if the current number is negative and add it to the sum if it is\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_nonzero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    return count_zero/count_nonzero\n",
        "test": "assert     zero_count([1]) == 0",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n == 0:\n        return 0\n        \n    while (n % 2 == 0):\n        n //= 2\n        \n    if (n == 1):\n        return 1\n        \n    return 0\n    ",
        "test": "assert     is_Sum_Of_Powers_Of_Two(1) == True, 'Test case 2 failed'",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n",
        "test": "assert ",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            result.append(element)\n    \n    return result\n",
        "test": "assert extract_singly([[5,7,9], [11,13,15]]) == set([5,7,9,11,13,15])",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    cur = len(nums)\n    while cur > 1:\n        # Find the maximum number in a subarray of size cur\n        # Find the index of the maximum number\n        # Swap it with the last item in the array\n        # and then reverse the subarray of size cur\n        i = 0\n        while i + cur < len(nums):\n            if nums[i] > nums[i + cur - 1]:\n                max_ind = i\n            i += 1\n        nums[max_ind], nums[-1] = nums[-1], nums[max_ind]\n        nums[:cur] = nums[:cur][::-1]\n        cur -= 1\n",
        "test": "assert     [4, 5, 3, 1, 2] == pancake_sort( [2, 3, 1, 5, 4])",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_list = [i for i in list1 if i in list2 and i in list3]\n    return len(same_list)\n",
        "test": "assert     count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3, 'Incorrect'",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count\n",
        "test": "assert     find_lists(()) == 0, \"should be 0\"",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if ((arr[i] - arr[j]) > max_diff and arr[i] - arr[j] > 0):\n                max_diff = arr[i] - arr[j]\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([3, 2, 1]) == 3",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x+b*y == n:\n                return (x, y)\n    return None\n",
        "test": "assert     find_solution(1, 3, 4) == None",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n    \n    \n    \n    \n    \n    \ndef remove_elements2(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = [i for i in list1 if i not in list2]\n    return list3\n    \n    \n    \n    \n    \n    \ndef remove_elements3(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [i for i in list1 if i not in list2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     remove_elements([1,2,3,4], [2,3]) == [1,4]",
        "num_ids": 2244,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 'n must be >= 0'\n    elif n <= 2:\n        return n\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    polygon = s * l\n    area = polygon * 1/2\n    print(f'The area of a {l} sided polygon is {area} units squared.')\n",
        "test": "assert     area_polygon(5, 2) == 7.5, \\",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1=0\n    sum2=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum1=sum1+i\n    for i in range(1,n):\n        if(sum1%i==0):\n            sum2=sum2+i\n    if(sum1==sum2):\n        return True\n    return False\n",
        "test": "assert     div_sum(10) == False",
        "num_ids": 2151,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == 'a' or str1[i] == 'A':\n            count += 1\n    return count\n",
        "test": "assert     count_char_position(\"a\") == 1",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in A:\n        for j in A:\n            if i ^ j == 0:\n                even += 1\n    return even\n",
        "test": "assert     find_even_pair([1, 2, 3]) == 3",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x < n: \n        x *= 2\n    return x\n",
        "test": "assert     next_power_of_2(7) == 8",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "test": "assert     frequency([], 0) == 0",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return None\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15, 'incorrect'",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "test": "assert     perimeter_pentagon(5) == 5*5, 'perimeter_pentagon'",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if not s:\n        return 0\n    # O(n) time\n    # O(n) space\n    return s.count('std')\n",
        "test": "assert     count_occurance('python') == 0, \"test case 4 failed\"",
        "num_ids": 2249,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = []\n    for i in test_tuple:\n        test_list.append(type(i))\n    if len(set(test_list)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_type((1, 2, 3, 4, 5)) == True",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_majority([1,2,3,4,5,5,5,5], 8, 6) == False",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        n &= (n-1)\n        count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0, \"Incorrect\"",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = [ele for ele in str if not (str.index(ele) % 2)]\n    return ''.join(res)\n",
        "test": "assert     odd_values_string('python') == 'pto', \"Test Failed\"",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n",
        "test": "assert     min_of_three(1,1,1) == 1",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    ans = True\n    for i in range(n):\n        x = 2**i\n        if(x>=l and x<=r):\n            ans = False\n    return ans\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(10,1,5) == False",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    left_pos = 0\n    right_pos = n-1\n    while left_pos <= right_pos:\n        if arr[left_pos] < 0 and arr[right_pos] < 0:\n            left_pos += 1\n            right_pos -= 1\n        elif arr[left_pos] > 0 and arr[right_pos] > 0:\n            left_pos += 1\n            right_pos -= 1\n        elif arr[left_pos] > 0 and arr[right_pos] < 0:\n            left_pos += 1\n            right_pos -= 1\n        elif arr[left_pos] < 0 and arr[right_pos] > 0:\n            left_pos += 1\n            right_pos -= 1\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[left_pos] = arr[left_pos], arr[i]\n            left_pos += 1\n    for i in range(n, 2*n):\n        if arr[i] > 0:\n            arr[i], arr[right_pos] = arr[right_pos], arr[i]\n            right_pos -= 1\n    return arr\n",
        "test": "assert     re_arrange_array([1, 2, 3, -4, 5, 6, 7, -8, 9], 7) == [-8, -4, 1, 2, 3, 5, 6, 7], \"Test 4 Failed\"",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "test": "assert     replace_blank('abc def ghi', '') == 'abcdefghi','replace blank failed'",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n",
        "test": "assert     larg_nnum([0, 1, -1, 2, -2, 3], 4) == [3,2, 1, 0]",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return 2*math.pi*r*(r+h)\n",
        "test": "assert     lateralsuface_cylinder(1.5,1) == 3.14159265359",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert     volume_cube(3) == 27",
        "num_ids": 165,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n",
        "test": "assert     (even_bit_set_number(0) == 0)",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_of_tuple = dict(Counter(test_list))\n    return count_of_tuple\n",
        "test": "assert     check_occurences([(1, 2, 3), (1, 2, 3), (1, 2, 3), (3, 4, 5)]) == {(1, 2, 3): 3, (3, 4, 5): 1}",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    non_empty_substrings = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            substr = str[i:j+1]\n            if substr!= '' and len(substr) > 1:\n                non_empty_substrings += 1\n    return non_empty_substrings\n",
        "test": "assert     number_of_substrings('') == 0",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables\n    nth_sequence_count = 0\n    i = 2\n    nth_sequence_count = nth_sequence_count + m\n    while n > 1:\n        i = i + 1\n        nth_sequence_count = nth_sequence_count + m\n        n = n - 1\n    return nth_sequence_count\n",
        "test": "assert     get_total_number_of_sequences(2,3) == 6",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        if i == len(list1)-1:\n            list1[i] = list2[0]\n            list2.pop(0)\n    return list1\n",
        "test": "assert     replace_list([], []) == []",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_charac = 0\n    for x in str1:\n        num_charac = num_charac + 1\n    return num_charac\n",
        "test": "assert     count_charac('abc') == 3, 'wrong'",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0: \n        return 1\n    # Initialize variables 'i' and 'n'. \n    i = n = N \n    while True: \n        # Increment 'n' until it is not equal to 'i'. \n        n += 1\n        # If 'n' is not equal to 'i', then it is a perfect \n        # square. Update 'i' and 'n' for next iteration. \n        if n!= i: \n            i = n \n            break\n        # Increment 'n' until it is not equal to 'i'. \n        n += 1\n        if n!= i: \n            i = n \n            break\n    # Return the output. \n    return i \n",
        "test": "assert     next_Perfect_Square(0) == 1",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def maxSumIncreasingSubsequence(array): \n        #initialize array with values 0\n        sub_seq_sum_array = [0] * len(array)\n        \n        for i in range(len(array)):\n            current_max = 0\n            for j in range(i):\n                if array[i] > array[j] and sub_seq_sum_array[j] > current_max:\n                    current_max = sub_seq_sum_array[j]\n            sub_seq_sum_array[i] = current_max + array[i]\n        \n        max_value = 0\n        for element in sub_seq_sum_array:\n            if element > max_value:\n                max_value = element\n        return max_value\n    return maxSumIncreasingSubsequence(arr)\n",
        "test": "assert     max_sum([4,3,2,1])     ==     4",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    number = abs(number)\n    guess = 1\n    #number = 12\n    iterations = 0\n    while guess * guess <= number and iterations < 500:\n        guess = (guess + (number / guess)) / 2.0\n        iterations += 1\n    return guess\n",
        "test": "assert _____ _____ _____",
        "num_ids": 2125,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    m = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        m[i][i] = 1\n    for i in range(n-1): \n        if(str[i] == str[i+1]): \n            m[i][i+1] = 2\n    for j in range(2,n): \n        for i in range(0,n-j): \n            k = i+j \n            if(str[i] == str[k] and str[i+1] == str[k-1]): \n                m[i][k] = m[i+1][k-1] + 2\n            else: \n                m[i][k] = max(m[i][k-1],m[i+1][k]) \n    return m[0][n-1]\n",
        "test": "assert     lps('cbbd') == 2",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1 / i for i in range(1, n)])\n",
        "test": "assert ",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1 & set2)\n",
        "test": "assert     intersection_array([1,2],    [1,1]) == [1]",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(0,len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,4,5), 10) == 0",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "test": "assert     insert_element([1, 3, 2], 1) == [1, 1, 3, 2], \"Test failed\"",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"\\n\")\n    def polar(a):\n        a = cmath.polar(a)\n        print(\"Real part:\",a[0],\"\\n\")\n        print(\"Imaginary part:\",a[1],\"\\n\")\n        #print(\"The number of real and imaginary parts:\",a)\n    polar(numbers)\n",
        "test": "assert     convert((1+0j)) == (1.0, 0.0)",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for x in list1:\n        if type(x)==int:\n            count+=1\n    return count\n",
        "test": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 'hi']) == 30",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [i for i in combinations_with_replacement(l, n)]\n",
        "test": "assert     combinations_colors([1, 2, 3], 2) ==     [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [2]\n    for number in range(3, n+1):\n        is_prime = True\n        for prime in primes:\n            if number % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(number)\n    return len(primes)\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 119,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    print(test_tup1, test_tup2)\n    if len(test_tup1) == len(test_tup2):\n        max_tup = []\n        for i in range(0, len(test_tup1)):\n            max_tup.append(max(test_tup1[i], test_tup2[i]))\n        return tuple(max_tup)\n    else:\n        print(\"Tuples are not the same length!\")\n",
        "test": "assert     maximize_elements((4,5), (7,9)) == (7,9)",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            if len(primes) == n:\n                break\n    return primes[-1]\n",
        "test": "assert     newman_prime(5) == 9973",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + ((test_tup1[i] / test_tup2[i]),)\n    return result_tup\n",
        "test": "assert     (division_elements((0,), (3,)) == (0,))",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    def split(list1, L):\n        if L == len(list1):\n            return list1\n        elif L > len(list1):\n            return list1, []\n        else:\n            return list1[:L], list1[L:]\n    return split(list1, L)\n",
        "test": "assert     split_two_parts([0, 1, 2, 3, 4, 5], 3) == ([0, 1, 2], [3, 4, 5])",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n",
        "test": "assert ",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = S\n    lst_split = []\n    count = 0\n    for i in lst:\n        if count % step == 0:\n            lst_split.append(lst[count])\n        count += 1\n    return lst_split\n",
        "test": "assert ",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # l=int(input(\"Enter the side length of the cube:\"))\n    import math\n    def lateral_surface_area(l):\n        return 6 * (l ** 2)\n    return lateral_surface_area(l)",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i**2\n    return s\n",
        "test": "assert ",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 2 ** (n - 1)\n",
        "test": "assert     find_star_num(1)     ==     1",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ",
        "num_ids": 36,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for x in arr:\n        if (x%2 == 0) and (arr.index(x)%2 == 0):\n            sum += x\n    return sum\n",
        "test": "assert     sum_even_and_even_index([2,2,2,2,2,2]) == 12",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += (i**5)\n    return s\nprint(even_Power_Sum(10))\n",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple_[1] for tuple_ in test_list]\n",
        "test": "assert ",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtraction_list = []\n    for i in range(len(test_tup1)):\n        subtraction_list.append(test_tup1[i] - test_tup2[i])\n    return tuple(subtraction_list)\n",
        "test": "assert     substract_elements((1,2,3,4),(2,3,4,4)) == (1,0,1,0,0,0), \"wrong result\"",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (n*(n-1))//2\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r**2 * h)\n    return volume\n",
        "test": "assert     volume_cylinder(0,1) == 0, \"Wrong Volume\"",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert     dict_filter({1:5, 2:2, 3:3}, 6) == {}",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    l = len(test_tup)\n    count = 0\n    for i in range(0,l):\n        if i!= 0 and test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements(tuple_2) == 2",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (n - 1) / 2)\n",
        "test": "assert     is_num_decagonal(4) == 27",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Iterate over each element in the list\n    for index, element in enumerate(dlist):\n        # Check if the item in the element is the one we're looking for\n        if item == element:\n            # If so, return the boolean and the index\n            return (True, index)\n    # If we get here, then the element was not found\n    return (False, -1)\n",
        "test": "assert     sequential_search([1, 2, 3, 4, 5], 6) == (False, -1)",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list=[]\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list)==len(test_list):\n        return True\n    return False\n",
        "test": "assert     all_unique([]) == True, \"Fails\"",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] - nums2[i])\n    return new_list\n",
        "test": "assert     sub_list([1, 2, 3], [1, 2, 3]) == [0, 0, 0]",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_dict = {}\n    for i in str(n):\n        digit_dict[i] = digit_dict.get(i,0) + 1\n    return all(v <= int(k) for k,v in digit_dict.items())\n",
        "test": "assert     validate(123) == True",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\nprint(check_element([1,1,1,1],1))\nprint(check_element([0,0,0,0],1))\nprint(check_element([1,2,3,4],1))\nprint(check_element([2,3,4,5],2))\n",
        "test": "assert     check_element([2,2,2],2) == True",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'a.{2,3}b', text))\n",
        "test": "assert     text_match_two_three('aab') == False",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (n < k): \n        return -1\n    max_sum = 0\n    for i in range(0, n - k + 1): \n        current_sum = 0\n        for j in range(i, i + k): \n            current_sum += a[j % n] \n        if (current_sum > max_sum): \n            max_sum = current_sum\n    return max_sum \n  ",
        "test": "assert     max_sub_array_sum_repeated([-4, -3, -2, -1], 4, 2) == 0, \"Test3 Error. (-4, -3, -2, -1) 4 2\"",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_sq = 0\n    for i in range(0,n+1):\n        if i%2 == 0:\n            sum_sq = sum_sq + i**2\n",
        "test": "assert square_Sum(5) == 100",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return(len(max(list1,key=len)))\n",
        "test": "assert     max_length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 5",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==0 or k==0 or n==1:\n        return 0\n    if k==1:\n        return n\n    result = [[0 for _ in range(n)] for _ in range(k)]\n    result[0][0] = 1\n    result[1][0] = 1\n    result[0][1] = 1\n    result[1][1] = 1\n    for i in range(2, n):\n        result[0][i] = result[0][i-1] + result[1][i-1]\n        result[1][i] = result[0][i-2] + result[1][i-2]\n    print(result)\n    return result[0][n-1] + result[1][n-1]\n",
        "test": "assert     count_no_of_ways(4,2) == 6",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "test": "assert     find(1,1) == 1",
        "num_ids": 171,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = []\n    side.append(math.sqrt(h**2 + w**2))\n    side.append(math.sqrt(h**2 + w**2))\n    side.append(math.sqrt(h**2 + w**2))\n    side.sort()\n    return side[0]\n",
        "test": "assert     otherside_rightangle(12,5) == 3.60, 'wrong'",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'empty list'\n    else:\n        maxval = listval[0]\n        for i in range(len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval\n",
        "test": "assert ",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n",
        "test": "assert ",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr)\n    inv_count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inv_count+=1\n    return inv_count\n",
        "test": "assert     get_Inv_Count([1, 3, 5, 2, 4, 6]) == 3",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return [list1[0]] + flatten_list(list1[1:])\n",
        "test": "assert     flatten_list([1, 2, 3, [4, [5, 6]]]) == [1, 2, 3, 4, 5, 6], \"Checking list 1\"",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max([sum(i) for i in stdata])\n",
        "test": "assert ",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return binomial(2*n, n)\n",
        "test": "assert     count_binary_seq(3) == 4",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n",
        "test": "assert     dict_depth({'a': 'a', 'b': {'x': 'x', 'y': {'z': 'z'}}}), 2",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[ranges[rotations][index]]\n",
        "test": "assert     find_Element([1,2,3,4,5,6],[[1,5],[2,4]],[2,3],7) == -1",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    mylist=[]\n    for word in words:\n        if word.startswith(\"p\"):\n            mylist.append(word)\n    return mylist[0:2]\n",
        "test": "assert     start_withp([]) == []",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index == n):\n        return 0\n    if (index == k):\n        return a[k]\n    ans1 = max_sum_increasing_subseq(a, n, index+1, k)\n    ans2 = a[index] + max_sum_increasing_subseq(a, n, index+1, k-1)\n    return max(ans1, ans2)\n",
        "test": "assert ",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = ()\n    for i in range(m,m+n):\n        new_tuplex += (tuplex[i],)\n    return new_tuplex\n",
        "test": "assert     colon_tuplex(('a', 1, 'b', 2, 'c', 3), 4, 1) == (('a', 1, 'b', 2, 'c'), 3)",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    results = []\n    if nums1 and nums2:\n        for i in range(N):\n            results.append(nums1[i] * nums2[i])\n        return sorted(results, reverse=True)[:N]\n    elif nums1 and not nums2:\n        for num in nums1:\n            results.append(num)\n        return sorted(results, reverse=True)[:N]\n    elif not nums1 and nums2:\n        for num in nums2:\n            results.append(num)\n        return sorted(results, reverse=True)[:N]\n    else:\n        return []\n",
        "test": "assert     large_product([1, 2, 3, 4], [2, 4, 6, 8], 0) == []",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(5,7) == 7, maximum(5,7)",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = list(str1)\n    return tuple(list1)\n",
        "test": "assert     string_to_tuple('abcd') == ('a','b','c','d')",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1 << (n.bit_length() - 1)\n    while mask:\n        if n & mask == 0:\n            break\n        mask >>= 1\n    n |= mask\n    return n\n",
        "test": "assert     set_left_most_unset_bit(0b111111) == 0b111111",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*(h)\n",
        "test": "assert     volume_cone(1,2) == 2 * math.pi / 3",
        "num_ids": 194,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable\n    highest_power = 0\n    # Loop through all the powers of 2\n    power = 1\n    while(power * 2 <= n):\n        highest_power = power\n        power = power * 2\n    return highest_power\n",
        "test": "assert highest_Power_of_2(1) == 0, \"Test Failed\"",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n >= 3:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # list_ = ['1', '2', '3']\n    # string = '%s'\n    # print(list(map(string, list_)))\n    return [string % i for i in list_]\n",
        "test": "assert     add_string(['a', 'b', 'c'], \"My name is %s and I'm %d years old. My shoe size is %s\") == 'My name is a\\nb\\nc'",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Check if list lengths match\n    if len(l1) == len(l2) == len(l3):\n        \n        # Initialize dictionary\n        d = {}\n        for idx in range(len(l1)):\n            d[l1[idx]] = {l2[idx]: l3[idx]}\n        \n        return d\n    \n    else:\n        print('Length of lists does not match.')\n        return None\n",
        "test": "assert     convert_list_dictionary(",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n in [0,1]:\n            return n\n        a, b, c = f(n/2), f(n/3), f(n/4)\n        s = max(a,b,c)\n        return s + n if s < n else s\n    return f(n)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths_list = []\n    for i in input_list:\n        lengths_list.append(len(i))\n    return lengths_list.index(max(lengths_list))\n",
        "test": "assert ",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    if test_tup:\n        test_set = set(test_tup)\n        return len(test_tup) == len(test_set)\n    return True\n",
        "test": "assert     check_distinct((1,2,1)) == False",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1=str1.lower()\n    l1=[]\n    for i in str1:\n        if i in l1:\n            pass\n        else:\n            l1.append(i)\n    return l1[0]\n",
        "test": "assert     first_non_repeating_character('aabbcc') == 'c'",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip()\n    if len(string) < 1:\n        return False\n    return re.match(regex, string) is not None\n",
        "test": "assert     check_char('hello') == False",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    elif a>c:\n        return a\n    elif b>c:\n        return c\n    else:\n        return b\n",
        "test": "assert     median_numbers(3,1,4) == 3",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(list(map(int, str(num))))\n    return sum_of_digits\n",
        "test": "assert ",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x,y: x ^ y, test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((1, 1), (0, 1)) == (1, 0), \"bitwise_xor((1, 1), (0, 1)) == (1, 0) failed\"",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict_freq = {}\n    for item in test_list:\n        if item in dict_freq:\n            dict_freq[item] += 1\n        else:\n            dict_freq[item] = 1\n    print(dict_freq)\n",
        "test": "assert     extract_freq([('a', 0, 1), ('a', 1, 1), ('b', 1, 1), ('a', 2, 1), ('a', 3, 1), ('a', 4, 1), ('b', 2, 1), ('b', 3, 1), ('b', 4, 1), ('b', 5, 1), ('b', 6, 1), ('a', 7, 1)]) == 4",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    i=0\n    j=0\n    result_tup=()\n    if len(test_tup1)>=len(test_tup2):\n        max_len=len(test_tup1)\n    else:\n        max_len=len(test_tup2)\n    while i<=max_len-1:\n        result_tup+=(test_tup1[i]+test_tup2[i],)\n        i+=1\n    return result_tup\n",
        "test": "assert     add_nested_tuples((1,2,3,4),(5,6,7,8)) == (6,8,10,12)",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return b\n    else:\n        return a\n",
        "test": "assert     minimum(3,6) == 3",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex=str(tuplex)\n    tuple1=str(tuple1)\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex((1, 2, 3, 4, 5), (1, 2, 3, 6)) == False",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    result = 0\n    while(x): \n        result ^= x & 1\n        x >>= 1\n    return result\n",
        "test": "assert     find_Parity(7) == 1",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10: return None\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            return int(''.join(str(d) for d in digits[:i+1]+digits[i+1:]))\n    return int(''.join(str(d) for d in digits[:-1]))\n",
        "test": "assert     rearrange_bigger(981) == 9812",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k < 1:\n        return None\n    # Making nums1 always the shortest\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n",
        "test": "assert     k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    return list1[0][0] * list1[0][1]\n",
        "test": "assert     min_product_tuple([(3,4),(5,6),(4,5)]) == 12",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = None\n    for ele in listval:\n        if val == None:\n            val = ele\n        else:\n            if type(ele) == int or type(ele) == float:\n                if ele < val:\n                    val = ele\n    return val\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = None\n    for ele in listval:\n        if val == None:\n            val = ele\n        else:\n            if type(ele) == int or type(ele) == float:\n                if ele > val:\n                    val = ele\n    return val\n",
        "test": "assert     min_val([1, 3, 4]) == 1",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # return re.sub(r'\\w+_\\w+', lambda m: m.group(0)[0] + m.group(0)[1].upper(), word, flags=re.IGNORECASE)\n    return word[0:1].upper()+word[1:].lower()\n",
        "test": "assert     snake_to_camel(\"snake_case_string_4\") == \"SnakeCaseString4\"",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for n in l:\n        if n % 2 == 0:\n            new_list.append(n)\n    return new_list\n",
        "test": "assert     remove_odd([1]) == [], \"Remove Odds Failed\"",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n])\n",
        "test": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == (3, 4), \"Error\"",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len([x for x in list1 if x in list2]) > 0\n",
        "test": "assert     overlapping([1,2,3], [1,5,6,4]) == True",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[-1]*arr[-2]\n",
        "test": "assert     max_Product([1,2,3]) == 6, \"The product is 6\"",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #unzip the tuple and sort the list\n    Input = sorted(list(zip(*Input))) \n    #Initialize the first tuple and increment the second tuple\n    first = Input[0][0]\n    second = Input[0][0]\n    #Loop through the list\n    for i in range(len(Input)):\n        if first == Input[i][0]:\n            continue\n        else:\n            second = Input[i][0]\n            break\n    #Return the common first element\n    return first\n",
        "test": "assert     group_tuples(    [('a', 'apple'), ('b', 'banana'), ('c', 'cherry'), ('a', 'apple')]) == 'a'",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len) \n",
        "test": "assert     Find_Max([\"hello\",\"good\",\"morning\"]) == \"morning\"",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    return total * len(list1)\n",
        "test": "assert     round_and_sum([0, -1.2, 1.9, 0.3]) == 4, \"check if it works on a list of 0\"",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(2, n+1, 2)])\n    # return sum([i**3 for i in range(1, n+1, 2)])\n    # return sum([i**3 for i in range(0, n+1, 2)])\n",
        "test": "assert     cube_Sum(2) == 8",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = ''\n    for i in test_tup:\n        output = output + i + '-'\n    return output[:-1]\n",
        "test": "assert     concatenate_tuple(('abc', 'def', 'ghi'))!= 'abcde'",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    avg = sum/n\n    return avg\n",
        "test": "assert     find_Average_Of_Cube(30) == 115975600",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "test": "assert     extract_rear(('smile', 'universe')) == 'universe'",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([[1,2,3], [4,5,6], [7,8,9], [1,2,3]], 0) == 0",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num % 2 == 1:\n            new_list.append(num)\n    return new_list\n",
        "test": "assert     [1, 3, 5] == filter_oddnumbers([1, 2, 3, 4, 5, 6])",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = '28/04/2007'\n    # Your code goes here\n    dt = dt.split('/')\n    dt = dt[-1] + '-' + dt[1] + '-' + dt[0]\n    print(dt)\n",
        "test": "assert     change_date_format(\"30-10-1994\") == \"1994-10-30\"",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gaps = [7, 3, 1]\n",
        "test": "assert ",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_tup = tuple()\n    for i in range(0,len(test_tup1)):\n        if(test_tup1[i] == test_tup2[i]):\n            new_tup = new_tup + (test_tup1[i],)\n    return new_tup\n",
        "test": "assert     and_tuples((True, True), (True, True)) == (True, True), 'Boolean and'",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b**2-4*a*c)**0.5/(2*a)\n",
        "test": "assert     parabola_directrix(-2, -4, 0) == 2.0",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "test": "assert     common_element(['a', 'b', 'c'], ['d', 'e', 'f']) == False",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base = (base1+base2)/2.0\n    area = (base1+base2)/2.0 * height\n    return area\n",
        "test": "assert     median_trapezium(1,8,7) == 6.5, \"Wrong result for trapezium 1,8,7\"",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([1,2,3,4,5], 3) == True",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #pattern = re.compile(r'[a]+b+')\n    #mo = pattern.search(text)\n    #return mo is not None\n    return len(re.findall(r'[a]+b+',text)) > 0\n",
        "test": "assert     text_match_one('a') == False, 'expected False for text_match_one(\"a\")'",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\nprint(last_Digit(12))\nprint(last_Digit(10))\nprint(last_Digit(72))\n",
        "test": "assert     last_Digit(123456789) == 9",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1 = []\n    for i in list1:\n        if i < 0:\n            l1.append(i)\n    return l1\n",
        "test": "assert ",
        "num_ids": 106,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[1::2]\n",
        "test": "assert     remove_odd('Hi') == 'i'",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0,len(test_list)-1):\n        if (test_list[i][0]==test_list[i+1][1] and test_list[i][1]==test_list[i+1][0]):\n            count = count+1\n    return count\n",
        "test": "assert     count_bidirectional([(0,0), (0,0), (0,0), (0,0), (0,0), (0,0), (0,0)]) == 6",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n",
        "test": "assert     multiple_to_single([1, 2, 3, 4, 5]) == 12345, 'error'",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    words = text.split()\n    position = 0\n    for index, word in enumerate(words):\n        word = word.lower()\n        if word in ('no', 'now', 'here'):\n            position = index\n    return position\n",
        "test": "assert ",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "test": "assert     surfacearea_cube(3) == 54",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for i in nums:\n        if i > 0:\n            positives += 1\n    return positives/len(nums)\n    \ndef max_list_iter(int_list):\n    '''\n    Write a function that takes a list and returns the index of the largest element in the list\n    '''\n    if int_list == []:\n        return None\n    \n    max_index = 0\n    max_num = int_list[0]\n    \n    for i in range(1, len(int_list)):\n        if int_list[i] > max_num:\n            max_index = i\n            max_num = int_list[i]\n    return max_index\n        \ndef reverse_rec(int_list):\n    '''\n    Write a function that reverses the elements in the list (in place).\n    '''\n    if len(int_list) <= 1:\n        return int_list\n    else:\n        return [int_list[-1]] + reverse_rec(int_list[:-1])\n    \ndef bin_search(target, low, high, int_list):\n    '''\n    Write a function that implements the binary search.\n    '''\n    if high < low:\n        return False\n    middle = int((high+low)/2)\n    if int_list[middle] == target:\n        return True\n    elif int_list[middle] < target:\n        return bin_search(target, middle+1, high, int_list)\n    else:\n        return bin_search(target, low, middle-1, int_list)\n        \ndef remove_duplicates(nums):\n    '''\n    Write a function that takes a list and removes all duplicate values.\n    '''\n    if len(nums) <= 1:\n        return len(nums)\n    else:\n        return [nums[0]] + remove_duplicates(nums[1:])\n        \n        \ndef remove_first(nums, target):\n    '''\n    Write a function that takes a list, and a target value.\n    It should remove the first instance of the target value in the list.\n    The function should return a list with all instances of the target value removed.\n    '''\n    if nums == []:\n        return nums\n    elif nums[0] == target:\n        return remove_first(nums[1:], target)\n    else:\n        return [nums[0]] + remove_first(nums[1:], target)\n        \ndef replace_first(nums, target, replacement):\n    '''\n    Write a function that takes a list, a target value and a replacement value.\n    It should replace all instances of the target value in the list with the replacement value.\n    It should return a list with all instances of the target value removed.\n    '''\n    if nums == []:\n        return nums\n    elif nums[0] == target:\n        return [replacement] + replace_first(nums[1:], target, replacement)\n    else:\n        return [nums[0]] + replace_first(nums[1:], target, replacement)\n        \ndef remove_all(nums, target):\n    '''\n    Write a function that takes a list, and a target value.\n    It should remove all instances of the target value in the list.\n    It should return a list with all instances of the target value removed.\n    '''\n    if nums == []:\n        return nums\n    elif nums[0] == target:\n        return remove_all(nums[1:], target)\n    else:\n        return [nums[0]] + remove_all(nums[1:], target)\n        \ndef sum_all(nums):\n    '''\n    Write a function that takes a list and returns the sum of all items in the list\n    '''\n    if nums == []:\n        return 0\n    else:\n        return nums[0] + sum_all(nums[1:])\n        \ndef max_in_list(nums):\n    '''\n    Write a function that takes a list and returns the largest value in the list\n    '''\n    if nums == []:\n        return None\n    else:\n        return max(nums)\n        \ndef length_all(nums):\n    '''\n    Write a function that takes a list and returns the length of the list\n    '''\n    if nums == []:\n        return 0\n    else:\n        return 1 + length_all(nums[1:])\n        \ndef sum_even(nums):\n    '''\n    Write a function that takes a list and returns the sum of the even valued elements in the list.\n    '''\n    if nums == []:\n        return 0\n    elif nums[0] % 2 == 0:\n        return nums[0] + sum_even(nums[1:])\n    else:\n        return sum_even(nums[1:])\n        \ndef count_even(nums):\n    '''\n    Write a function that takes a list and returns the number of even values in the list.\n    '''\n    if nums == []:\n        return 0\n    elif nums[0] % 2 == 0:\n        return 1 + count_even(nums[1:])\n    else:\n        return count_even(nums[1:])\n        \ndef count_all(nums, target):\n    '''\n    Write a function that takes a list and an item and returns the number of times that item appears in the list.\n    '''\n    if nums == []:\n        return 0\n    elif nums[0] == target:\n        return 1 + count_all(nums[1:], target)\n    else:\n        return count_all(nums[1:], target)\n        \ndef extend_list(nums, values):\n    '''\n    Write a function that takes a list and an item and adds the item to the end of the list.\n    '''\n    if len(values) > len(nums):\n        return nums + values\n    else:\n        return values + nums\n        \ndef min_in_list(nums):\n    '''\n    Write a function that takes a list and returns the minimum value in the list.\n    '''\n    if nums == []:\n        return None\n    else:\n        return min(nums)\n        \ndef min_index_in_list(nums):\n    '''\n    Write a function that takes a list and returns the index of the minimum value in the list.\n    '''\n    if nums == []:\n        return None\n    else:\n        return nums.index(min(nums))\n        \ndef make_list(n):\n    '''\n    Write a function that takes a number and returns a list of n numbers in ascending order.\n    '''\n    if n < 0:\n        return []\n    else:\n        return [0] + make_list(n-1)\n        \ndef list_ends(nums):\n    '''\n    Write a function that takes a list of numbers and returns a list of the first and last elements in the list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        return [nums[0]] + [nums[-1]] + list_ends(nums[1:-1])\n        \ndef remove_middle(nums):\n    '''\n    Write a function that takes a list of numbers and removes the middle element from the list.\n    If the list's length is odd, return the middle element. If the list's length is even, return the middle two elements.\n    '''\n    if len(nums) % 2 == 0:\n        return [nums[len(nums)//2]] + remove_middle(nums[:len(nums)//2]) + remove_middle(nums[(len(nums)+1)//2:])\n    else:\n        return nums[:len(nums)//2] + remove_middle(nums[(len(nums)+1)//2:])\n        \ndef max_ends(nums):\n    '''\n    Write a function that takes a list of numbers and returns the maximum difference between the first and last elements in the list.\n    '''\n    return max(nums[0], nums[-1]) - min(nums[0], nums[",
        "test": "assert     positive_count([-1,2,3,4,5,0]) == {'positive_count': 5, 'positive_ratio': 1.0}",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #print(list1)\n    list1.sort()\n    list1.reverse()\n    \n    for i in range(len(list1)):\n        if(list1[i] < 0):\n            #print(list1[i])\n            return list1[i]\n        else:\n            continue\n    #print(max(list1))\n    return None\n        \n",
        "test": "assert largest_neg([-1,0,-2]) == -1",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_tuple_list = [elem for elem in test_list if len(elem) >= K]\n    return trimmed_tuple_list\n",
        "test": "assert     trim_tuple([(1,2),(2,3),(4,5)], 2) == [(2,3),(4,5)]",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mult_list = []\n    for i in range(len(test_tup1)):\n        mult_list.append(test_tup1[i] * test_tup2[i])\n    return tuple(mult_list)\n    \n    ",
        "test": "assert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 12, 21, 32), 'Test 1 incorrect'",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup) \n    return c.most_common(len(lst)) \nlst = [1,2,3,4,4,5,3,3,3,3,4,2,1,2,4,5,6,7,8]\ntup = (1,2,3,4,4,5,3,3,3,3,4,2,1,2,4,5,6,7,8)\nprint(count_Occurrence(tup, lst))\n",
        "test": "assert     count_Occurrence(('a','a','a','b','b'),['a','b']) ",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 8, 27, 64, 125, 216, 343, 512, 729]",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += sum([int(j) for j in str(i)])\n        print(total)\n    return total\n",
        "test": "assert     cal_sum(30) == 17712000",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if (len(str) >= l):\n        return str[0:l]\n    else:\n        return str + \"-\" * (l - len(str))\n",
        "test": "assert     extract_string([\"Tiger\",\"Puma\",\"Bear\"],2) == [\"Tiger\",\"Puma\"]",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2=''\n    for char in text1:\n        if char==' ':\n            pass\n        else:\n            text2+=char\n    return text2\n",
        "test": "assert     remove_whitespaces(\"Hello\") == \"Hello\"",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        loss_amount=actual_cost-sale_amount\n        return loss_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(12,12)==0, \"a correct loss_amount function is expected\"",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum([i for i in range(1,n) if n%i==0 and i%2==0])\n    # return n*(n+1)/2\n",
        "test": "assert     sumofFactors(100) == 0, '100 should have 0 as sum'",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    m = re.findall(\"\\w*z\\w*\", text)\n    print(\"\\n\\n text_match_wordz:\",m)\n",
        "test": "assert not text_match_wordz(\"I love qqq-z.\")",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months_31 = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in months_31:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(3) == True",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if type(stringlist) == str:\n        return stringlist[::-1]\n    elif type(stringlist) == list:\n        newlist = []\n        for item in stringlist:\n            newlist.append(item[::-1])\n        return newlist\n",
        "test": "assert     reverse_string_list([\"a\"]) == ['a']",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_list=lst[0]\n    min_len=len(sub_list)\n    for i in lst:\n        if len(i)<min_len:\n            min_len=len(i)\n            sub_list=i\n    return sub_list\n",
        "test": "assert Find_Min([1, 4, 6, 7, 9, 2, 6, 4, 5, 9, 6, 3, 2, 4]) == [1, 4, 6, 7, 9, 2, 6], \"Not Correct\"",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert     rectangle_area(10, 5) == 50",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1_length = len(str1)\n    new_str = ''\n    is_upper_found = False\n    for i in range(str1_length):\n        if str1[i] >= 'a' and str1[i] <= 'z':\n            if is_upper_found:\n                continue\n            else:\n                new_str += str1[i]\n        elif str1[i] >= 'A' and str1[i] <= 'Z':\n            if is_upper_found:\n                continue\n            else:\n                is_upper_found = True\n                new_str += str1[i]\n        else:\n            is_upper_found = False\n            new_str += str1[i]\n    return new_str\n",
        "test": "assert     remove_uppercase(\"abcd\") == \"abcd\", \"Remove uppercase\"",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "test": "assert     Extract([[1,2], [3,4], [5,6], [7,8], [9,10]]) == [1,3,5,7,9], \"Extract first of list elements failed\"",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr(\"asds\") == 0, \"Test case #3 failed\"",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # return list(itertools.combinations(list1, 2))\n    return list(itertools.combinations(list1, 2))\n    \nprint(combinations_list([1, 2, 3, 4]))\n",
        "test": "assert     (combinations_list([1,2,3,4]) == [(1,), (2,), (3,), (4,), (1,2), (1,3), (1,4), (2,3), (2,4), (3,4), (1,2,3), (1,2,4), (1,3,4), (2,3,4), (1,2,3,4)]), \"combinations_list should return the given list of combinations\"",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    min_product = float('inf')\n    max_product_start = 0\n    min_product_start = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_product *= arr[i]\n            min_product *= arr[i]\n        else:\n            temp = max_product\n            max_product = max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        if max_product > max_product_start:\n            max_product_start = i\n        if min_product < min_product_start:\n            min_product_start = i\n    return (max_product_start, max_product, min_product_start, min_product)\n",
        "test": "assert     max_subarray_product([-2, 0, -3, -5, -6, -7, -4, -5, 0, -7, 0, -2, -5, -3, 0, -2, -3, -6, -5, -4, -6, -7, -6, -4, -7, -2, -7, -3, -5, -4, -7, -5, -4, -3, -6, -2, -2, -6, -3, 0, -5, 0, -6, -7, -5, -4, -7, -6, -4, -7, -5, -3, -6, -5, -4, -6, -2, -7, -6, -4, -6, -7, -6, -4, -7, -5, -4, -7, -5, -4, -3, -6, -2, -7, -5, -4, -6, -7, -5, -4, -7, -5, -4, -5, -7, -6, -4, -6, -5, -4, -6, -7, -6, -5, -4, -7, -5, -4, -5, -7, -6, -4, -5, -6, -4, -4, -7, -5, -7, -6, -5, -7, -4, -7, -4, -5, -5, -4, -5, -7, -6, -4, -5, -6, -7, -5, -7, -5, -4, -5, -6, -7, -4, -7, -7, -4, -7, -4, -6, -6, -5, -7, -6, -5, -7, -4, -7, -5, -4, -7, -5, -6, -4, -6, -6, -6, -7, -7, -5, -5, -7, -5, -6, -6, -6, -7, -7, -5, -6, -5, -7, -4, -7, -6, -7, -7, -5, -7, -7, -5, -7, -5, -5, -4, -7, -6, -6, -7, -7, -7, -7, -7, -6, -7, -5, -7, -7, -7, -6, -7, -5, -7, -7, -5, -6, -7, -4, -7, -4, -6, -7, -6, -7, -4, -7, -7, -6, -7, -7, -7, -4, -6, -7, -7, -7, -7, -6, -7, -5, -7, -4, -7, -6, -7, -6, -7, -5, -7, -5, -6, -7, -7, -7, -6, -7, -6, -6, -7, -7, -7, -7, -7, -6, -7, -6, -7, -7, -7, -7, -6, -7, -7, -5, -7, -7, -7, -7, -7, -6, -6, -6, -6, -5, -5, -7, -6, -7, -5, -7, -5, -7, -7, -6, -6, -7, -7, -7, -7, -7, -7, -7, -6, -7, -7, -7, -5, -7, -7, -7, -7, -7, -7, -5, -7, -7, -6, -7, -7, -7, -7, -7, -6, -7, -5, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7",
        "num_ids": 2465,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = None\n    for key in dict:\n        if val == None:\n            val = dict[key]\n        else:\n            if val!= dict[key]:\n                return False\n    return True\n",
        "test": "assert     check_value({1: 1, 2: 1, 3: 1}, 1) == True",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}\n",
        "test": "assert     {} ==     drop_empty({})",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return arr[0] if len(arr) == 1 else -1\n    \n    max_product = 1\n    for i in range(len(arr)):\n        temp = 1\n        for j in range(i,len(arr)):\n            temp *= arr[j]\n            max_product = max(temp, max_product)\n    return max_product\n",
        "test": "assert max_product([5, 4, 3, 2, 1]) == 120, \"should return the max product of an increasing subsequence\"",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (tup[0] + tup[1])\n",
        "test": "assert     add_pairwise((1, 2, 3, 4, 5)) == (3, 6, 9, 12, 15)",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n",
        "test": "assert     find_remainder([4,5], 3) == 1",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return l == sorted(l)\n",
        "test": "assert     check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = set(test_list1)\n    list2 = set(test_list2)\n    return list(list1.intersection(list2))\n",
        "test": "assert     tuple_intersection([(1,2),(2,3)],[(3,4),(5,6)]) == []",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    i=0\n    new=''\n    for char in str1:\n        if char == ch:\n            new+=newch\n        else:\n            new+=char\n        i+=1\n    return new\n    \n",
        "test": "assert     replace_char('', 'e', 'a') == ''",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n",
        "test": "assert     sort_counter({1: 1, 2: 3, 3: 2}) == {1: 1, 2: 3, 3: 2}",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    def my_function(nums):\n        largest = -1 * sys.maxsize\n        smallest = sys.maxsize\n        for num in nums:\n            if num > largest:\n                largest = num\n            if num < smallest:\n                smallest = num\n        return largest+smallest\n    return my_function(nums)\n",
        "test": "assert     big_sum([1, 2, -3, 4, -5]) ==     0, \"Not correct!\"",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('aaaaa') == 'aaaaa'",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    match = re.findall(r\"[a-z][A-Z]*\",str1)\n    print(match)\n    print(str1)\n    for m in match:\n        str1 = str1.replace(m,\"\")\n    print(str1)\n    return str1\n",
        "test": "assert     remove_lowercase(\"ABC\") == 'ABC'",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return int(str(n)[0])\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2==1]\n    \n    \n    \n    \ndef Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2==1]\n    \n",
        "test": "assert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7]",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumofcubes(n):\n        sum = 0\n        for i in range(1,n+1):\n            sum+=i*i*i\n        return sum\n    \n    def sumofsquares(n):\n        sum = 0\n        for i in range(1,n+1):\n            sum+=i*i\n        return sum\n    \n    sum_of_cubes = sumofcubes(n)\n    sum_of_squares = sumofsquares(n)\n    return abs(sum_of_squares-sum_of_cubes)\n",
        "test": "assert     difference(1) == 0, \"Wrong Answer\"",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if (A[i] ^ A[j]) & 1 : \n                count+=1\n    return count \n",
        "test": "assert     find_Odd_Pair([3,1,2],3) == 2",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i].isupper():\n            string[i] = string[i].lower()\n        else:\n            string[i] = string[i].upper()\n    return ''.join(string)\n",
        "test": "assert     toggle_string('abc') == 'ABC'",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i) - int(j)) for i, j in zip(str(n1), str(n2))])\n",
        "test": "assert     digit_distance_nums(123, 123) == 0",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -float('inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum = current_sum + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([4,2,3,4],4) == 13",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    sorted_list = list(set(test_tup1).union(set(test_tup2)))\n    sorted_list.sort()\n    return tuple(sorted_list)\n",
        "test": "assert     union_elements((1, 3, 5, 7, 9), (1, 3, 5, 6)) == (1, 3, 5, 6, 7, 9), 'wrong output'",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lenlst = len(lst)\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    lst4 = []\n    lst5 = []\n    lst6 = []\n    lst7 = []\n    for i in range(lenlst):\n        if type(lst[i]) == list:\n            lst1.append(len(lst[i]))\n        if type(lst[i]) == tuple:\n            lst2.append(len(lst[i]))\n        if type(lst[i]) == set:\n            lst3.append(len(lst[i]))\n        if type(lst[i]) == str:\n            lst4.append(len(lst[i]))\n        if type(lst[i]) == dict:\n            lst5.append(len(lst[i]))\n        if type(lst[i]) == range:\n            lst6.append(len(lst[i]))\n        if type(lst[i]) == frozenset:\n            lst7.append(len(lst[i]))\n    if len(lst1)!= 0:\n        return(max(lst1))\n    if len(lst2)!= 0:\n        return(max(lst2))\n    if len(lst3)!= 0:\n        return(max(lst3))\n    if len(lst4)!= 0:\n        return(max(lst4))\n    if len(lst5)!= 0:\n        return(max(lst5))\n    if len(lst6)!= 0:\n        return(max(lst6))\n    if len(lst7)!= 0:\n        return(max(lst7))\n",
        "test": "assert Find_Max_Length([[1]]) == 1, \"test failed\"",
        "num_ids": 974,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r'\\\"(.*?)\\\"'\n    result = re.findall(regex, text)\n    if len(result) == 0:\n        return False\n    else:\n        return result\n",
        "test": "assert     extract_values('\"str1\",\"str2\",\"str3\"') ==     ['str1','str2','str3']",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    x=set(arr)\n    x.discard(0)\n    y=list(x)\n    counter=0\n    for i in range(len(y)):\n        for j in range(i+1,len(y)):\n            if y[i]!=y[j]:\n                counter+=1\n    print(counter)\n    return counter\ncount_Pairs([1,2,3,4,5,6,7],7)\n",
        "test": "assert     count_Pairs([1, 2, 3, 3, 3, 3], 5) == 3",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n    \ndef join(char_list):\n    '''\n    Write a python function to join a list of characters.\n    '''\n    return ''.join(char_list)\n",
        "test": "assert     split('hello') == ['h','e','l','l','o']",
        "num_ids": 202,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return 0 if n == 0 else n % 10 + sum_digits(n // 10)\n",
        "test": "assert     sum_digits(1234) == 10",
        "num_ids": 149,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] < list1[i+1]:\n            pass\n        else:\n            return False\n    return True\n",
        "test": "assert     issort_list([1,2,3]) == True",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert     empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = str.lower)\n",
        "test": "assert     sort_sublists(['a', 'a', 'a']) == ['a', 'a', 'a']",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    a = set(nums)\n    a = list(a)\n    return a\n",
        "test": "assert     two_unique_nums([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    my_set = set(list_data)\n    result = 1\n    for item in my_set:\n        result *= item\n    return result\n",
        "test": "assert     unique_product([1, 1, 1, 1, 1]) ==     1,         \"Check the code\"",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = (2*pi*r*h) + (2*pi*r*r)\n    return surface_area\n",
        "test": "assert     (surfacearea_cylinder(10,8) == 548), \"Check the example\"",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    for i in range(0, m-n+1):\n        if sorted(A) == sorted(B[i:i+n]):\n            return True\n    return False\n",
        "test": "assert     is_Sub_Array([1,2,3],[1,2,4]) == False",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n == 0):\n        return 1\n    elif(n == 1):\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "test": "assert     last_Digit_Factorial(15) == 5, \"Error\"",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    print([x for t in zip(list1,list2,list3) for x in t])\n",
        "test": "assert ",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    # if test_tup1 == test_tup2:\n    #     raise Exception(\"Input tuples are the same.\")\n    for i, j in zip(test_tup1, test_tup2):\n        if i!= j:\n            res.append(i)\n    return tuple(res)\n",
        "test": "assert     find_dissimilar((1,2,3,4,5,6),(3,4,5,6,7,8,9)) == (1,2) or (2,1), 'Check your solution'",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = ()\n    for i in test_tuple: \n        if type(i) is tuple: \n            if len(i) > 0: \n                even_tuple += even_ele(i, even_fnc)\n        elif len(i) > 0: \n            if even_fnc(i): \n                even_tuple += (i,)\n    return even_tuple\n",
        "test": "assert ",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = ((b*s)/2)*b\n    return A\n",
        "test": "assert     surface_Area(b=4, s=5) ==     40",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n",
        "test": "assert my_dict({'A': 1}) == False",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Base case\n    if num == 0 or num == 1:\n        return 1\n    # Recursive case\n    return catalan_number(num - 1) * (4 * catalan_number(num - 1) - 2 * (num - 1))\n",
        "test": "assert     catalan_number(1)     ==     1",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result=re.findall(r'(\\w*ly\\w*)', text)\n    return result\n",
        "test": "assert     find_adverbs('I am an adverb!') == [('adverb', 0)]",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n >= len(items):\n        return items\n    # TODO: Write the function here\n    print('\\n'.join(map(str,heapq.nlargest(n,items,key=lambda x: x[1]))))\n    return heapq.nlargest(n,items,key=lambda x: x[1])\n",
        "test": "assert expensive_items([('item1', 5), ('item2', 10), ('item3', 4)], 0) == []",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "test": "assert ",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     tuple([1, 2, 3]) == list_tuple([1, 2, 3])",
        "num_ids": 149,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest\n",
        "test": "assert     big_diff([0]) == 0, \"Wrong result for big_diff([0])\"",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = a\n    while i <= b:\n        squares.append(i * i)\n        i += 1\n    return squares\n",
        "test": "assert     perfect_squares(1, 6) == [4, 9]",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    phi = y\n    return r*complex(cos(phi),sin(phi)),phi\n",
        "test": "assert     polar_rect(0,0) == (0,0)",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    listLen = len(newList)\n    temp = newList[0]\n    newList[0] = newList[listLen-1]\n    newList[listLen-1] = temp\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1], 'incorrect swap'",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k > n):\n        return 0\n    elif(k == 0 or k == n):\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n",
        "test": "assert     binomial_Coeff(1,1) == 1",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^0+\\.\", \".\", ip)\n",
        "test": "assert     removezero_ip(\"1111\") == \"1111\"",
        "num_ids": 2292,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[0]\n    for x in list1:\n        if x % 2 == 0:\n            even_num = x\n        else:\n            odd_num = x\n    diff = even_num - odd_num\n    return diff\n",
        "test": "assert     diff_even_odd([2,3,4,5,6]) == 1",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count_1, count_0 = 0, 0\n    for i in str1:\n        if i == '1':\n            count_1 += 1\n        else:\n            count_0 += 1\n    for j in str2:\n        if j == '1':\n            count_1 -= 1\n        else:\n            count_0 -= 1\n    return count_1 + count_0 \n",
        "test": "assert     min_Swaps('1100','1100')     == 0, 'incorrect result'",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for elem in tuple_list:\n        if type(elem) == int:\n            size = size + sys.getsizeof(elem)\n        elif type(elem) == list:\n            size = size + tuple_size(elem)\n        elif type(elem) == tuple:\n            size = size + tuple_size(elem)\n    return size\ndef tuple_max(tuple_list):\n    '''\n    Write a function to find the maximum value in the tuple.\n    '''\n    max_val = tuple_list[0]\n    for elem in tuple_list:\n        if elem > max_val:\n            max_val = elem\n    return max_val\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function to reverse the tuple.\n    '''\n    reverse_list = []\n    for elem in tuple_list:\n        reverse_list.append(elem)\n    reverse_list.reverse()\n    return tuple(reverse_list)\ndef tuple_sorted(tuple_list):\n    '''\n    Write a function to sort the tuple.\n    '''\n    sorted_list = []\n    for elem in tuple_list:\n        sorted_list.append(elem)\n    sorted_list.sort()\n    return tuple(sorted_list)\ndef tuple_count(tuple_list, elem):\n    '''\n    Write a function to count the number of occurrences of the given element in the tuple.\n    '''\n    count = 0\n    for elem in tuple_list:\n        if elem == elem:\n            count += 1\n    return count\ndef tuple_mul(tuple_list, num):\n    '''\n    Write a function to multiply all the values in the tuple by the given number and return a tuple.\n    '''\n    mult_list = []\n    for elem in tuple_list:\n        mult_list.append(elem * num)\n    return tuple(mult_list)\ndef tuple_div(tuple_list, num):\n    '''\n    Write a function to divide all the values in the tuple by the given number and return a tuple.\n    '''\n    div_list = []\n    for elem in tuple_list:\n        div_list.append(elem / num)\n    return tuple(div_list)\ndef tuple_index(tuple_list, elem):\n    '''\n    Write a function that takes a tuple as a parameter, and return the index of the given element.\n    '''\n    count = 0\n    for elem in tuple_list:\n        if elem == elem:\n            return count\n        count += 1\ndef tuple_index_list(tuple_list, index_list):\n    '''\n    Write a function that takes a tuple as a parameter, and return the value of the tuple elements at the given index numbers.\n    '''\n    tuple_index_list = []\n    for elem in index_list:\n        tuple_index_list.append(tuple_list[elem])\n    return tuple(tuple_index_list)\ndef tuple_remove(tuple_list, elem):\n    '''\n    Write a function to remove all the occurrences of the given element in the tuple.\n    '''\n    new_list = []\n    for elem in tuple_list:\n        if elem!= elem:\n            new_list.append(elem)\n    return tuple(new_list)\ndef tuple_pop(tuple_list):\n    '''\n    Write a function to remove the last element of the tuple and return the tuple.\n    '''\n    tuple_list.pop()\n    return tuple(tuple_list)\ndef tuple_insert(tuple_list, index_list, new_elem):\n    '''\n    Write a function that inserts the given element at the given index numbers in the tuple.\n    '''\n    for elem in index_list:\n        tuple_list.insert(elem, new_elem)\n    return tuple(tuple_list)\ndef tuple_copy(tuple_list):\n    '''\n    Write a function to copy the tuple.\n    '''\n    return tuple(tuple_list)\ndef tuple_join(tuple_list, sep):\n    '''\n    Write a function to join all the elements of the tuple into a string, and return a string.\n    '''\n    return sep.join(tuple_list)\ndef tuple_map(tuple_list, map_fn):\n    '''\n    Write a function to map the given function to each element in the tuple.\n    '''\n    map_list = []\n    for elem in tuple_list:\n        map_list.append(map_fn(elem))\n    return tuple(map_list)\ndef tuple_reduce(tuple_list, reduce_fn):\n    '''\n    Write a function to reduce the given function to a single value in the tuple.\n    '''\n    reduce_list = []\n    for elem in tuple_list:\n        reduce_list.append(reduce_fn(elem))\n    return tuple(reduce_list)\ndef tuple_filter(tuple_list, filter_fn):\n    '''\n    Write a function to filter the given function from the tuple.\n    '''\n    filter_list = []\n    for elem in tuple_list:\n        if filter_fn(elem):\n            filter_list.append(elem)\n    return tuple(filter_list)\ndef get_tuple_list_str(tuple_list):\n    '''\n    Write a function to convert the given tuple into a string.\n    '''\n    str_list = []\n    for elem in tuple_list:\n        str_list.append(str(elem))\n    return''.join(str_list)\ndef test_tuple_size():\n    assert sys.getsizeof(tuple_size((1, 2, 3))) == sys.getsizeof(1)\n    assert sys.getsizeof(tuple_size((1,))) == sys.getsizeof(1) * tuple_size(())\n    assert sys.getsizeof(tuple_size(('a', 'b', 'c'))) == sys.getsizeof('a') * sys.getsizeof('b') * sys.getsizeof('c')\ndef test_tuple_max():\n    assert tuple_max((1, 2, 3)) == 3\n    assert tuple_max((1, 2, 3, 4)) == 4\n    assert tuple_max((1,)) == 1\ndef test_tuple_reverse():\n    assert tuple_reverse((1, 2, 3, 4, 5)) == (5, 4, 3, 2, 1)\ndef test_tuple_sorted():\n    assert tuple_sorted((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n    assert tuple_sorted((1, 2, 3, 5, 4)) == (1, 2, 3, 4, 5)\n    assert tuple_sorted((5, 3, 2, 1, 4)) == (1, 2, 3, 4, 5)\n    assert tuple_sorted((1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11)) == (1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11)\ndef test_tuple_count():\n    assert tuple_count((1, 2, 3, 1), 1) == 2\n    assert tuple_count((1, 2, 3, 1, 1), 1) == 3\n    assert tuple_count((1, 2, 3, 1, 1), 2) == 0\ndef test_tuple_mul():\n    assert tuple_mul((1, 2, 3, 4), 3) == (1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4)\n    assert tuple_mul((1, 2, 3, 4), 2) == (1, 2, 3, 4, 1, 2, 3, 4)\ndef test_tuple_div():\n    assert tuple_div((2, 4, 6, 8), 2) == (1, 2, 3, 4)\n    assert tuple_div((2, 4, 6, 8), 3) == (1, 2, 3, 4)\n    assert tupl",
        "test": "assert     tuple_size((1, 2,)) == sys.getsizeof(1) + sys.getsizeof(2), f\"wrong size of tuple(1, 2) {tuple_size((1, 2))}\"",
        "num_ids": 3130,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[k-1] < arr2[k-1]:\n        return arr1[k-1]\n    elif arr1[k-1] > arr2[k-1]:\n        return arr2[k-1]\n    else:\n        return arr1[k-1]\n",
        "test": "assert     find_kth([2,5,8,9], [1,3,4,7], 3) == 4",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum(int(i)**len(str(number)) for i in str(number)) == number\n",
        "test": "assert     armstrong_number(153) == True",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    count = 0\n    sum = 0\n    while count < number:\n        count += 1\n        sum += count\n    print(f\"The sum of first {number} numbers is {sum}\")\n    print(f\"The average of first {number} numbers is {sum / number}\")\n",
        "test": "assert ",
        "num_ids": 144,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    for i in range(2,n//2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     (is_Even(15) == False)",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #method 1\n    dict1 = {}\n    for x in str1:\n        if x in dict1:\n            return x\n        else:\n            dict1[x] = 1\n",
        "test": "assert     first_repeated_char(\"abbcdefg\") == 'b'",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n        for x in range(1, i):\n            ludic.append(x*i)\n    return list(set(ludic))\n",
        "test": "assert ",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    a = s.split()\n    a.reverse()\n    return \" \".join(a)\n",
        "test": "assert     reverse_words(\"the sky is blue\") == \"blue is sky the\"",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for x in range(2, num):\n        if num % x == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n",
        "test": "assert     radian_degree(90) == math.pi/2",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    # Initializing index variables\n    index = 0\n    pattern_index = 0\n    literals_matches = []\n    \n    # Traverse the text string character by character\n    while index < len(text):\n        # Get the next character in the text string\n        char = text[index]\n        # Get the next character in the pattern string\n        pattern_char = pattern[pattern_index]\n        # Increment the index for both strings\n        index += 1\n        pattern_index += 1\n        \n        # When we encounter a literal\n        if pattern_char in 'Ll':\n            # Match the character with the next character in the text string\n            if text[index] == pattern[pattern_index]:\n                # If the characters match, increment the index for both strings\n                index += 1\n                pattern_index += 1\n                # Append the matching substring to the matches list\n                literals_matches.append(text[index - 1])\n            # When we encounter a mismatch\n            else:\n                # Break out of the loop\n                break\n        # When we encounter a non-literal character\n        else:\n            # Match the character with the next character in the text string\n            if text[index] == pattern[pattern_index]:\n                # If the characters match, increment the index for both strings\n                index += 1\n                pattern_index += 1\n            # When we encounter a mismatch\n            else:\n                # Break out of the loop\n                break\n    \n    return literals_matches\n",
        "test": "assert     find_literals(",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0,1,1]\n    for i in range(3, n+1):\n        bell.append(i*bell[i-1])\n    return bell[n]\n",
        "test": "assert     bell_Number(1) == 1, \"It's wrong!\"",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in list1:\n        if i!= L:\n            new_list.append(i)\n    return new_list\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4], \"The 5th element of the list should be removed\"",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for i in test_list:\n        max_list.append(max(i))\n    return max_list[N-1]\n",
        "test": "assert     max_of_nth([[1, 2, 3], [4, 5, 6]], 1) == 3",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    a=[]\n    b=[]\n    for i in range(len(lst)):\n        a.append(lst[i][0])\n        b.append(lst[i][1])\n    return [a,b]\n",
        "test": "assert     merge([[1,2],[3,4],[5,6]]) == [[1, 3, 5], [2, 4, 6]], \"merge([[1,2],[3,4],[5,6]]) is not correct\"",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    sum = 0\n    for num in test_list:\n        sum += num\n        cum_sum.append(sum)\n    print(cum_sum)\n    return cum_sum\n",
        "test": "assert     cummulative_sum([1,2,3,4,5,6,7,8,9]) == [1,3,6,10,15,21,28,36,45], 'incorrect'",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num in nums:\n        average_list.append(sum(num)/len(num))\n    return average_list\n",
        "test": "assert     (average_tuple([(1,2,3,4),(6,7,8,9),(10,11,12,13)])) == [3, 4, 5.5, 6.5], 'incorrect'",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1,2,3), (4,5,6)) == (1,2,3)",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    if d == steps[-1]: \n        return 1\n    if steps[-1] < d: \n        return 0\n",
        "test": "assert ",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1//num2 for num1,num2 in zip(nums1,nums2)]\n",
        "test": "assert     div_list([2, 4, 6], [2, 4, 6]) == [1, 1, 1]",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in range(0, len(test_str)):\n        if test_str[i].isdigit():\n            new_str += test_str[i]\n    return new_str + test_str\n",
        "test": "assert     move_num('hi') == 'hi', 'Not a valid string'",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_count = 0\n    for i in range(len(a)):\n        count = 0\n        for j in range(i, len(a)):\n            if (a[j] % a[i] == 0):\n                count += 1\n        if (count > max_count):\n            max_count = count\n    return max_count\n",
        "test": "assert     largest_subset([1,2,3,4,5,6]) == 6, \"test failed\"",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    \n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2 - 1]) / 2\n    else:\n        return arr1[n//2]\n",
        "test": "assert     get_median([1, 2, 3], [2, 3, 4], 3) == 2",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "test": "assert     nth_nums([1, 2, 3, 4], 5) == [3, 4, 1, 4]",
        "num_ids": 190,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if type(string) == str:\n        return string.upper()\n    return \"Invalid input\"\n",
        "test": "assert     is_upper('All')",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "test": "assert     swap_List([1,2,3,4]) == [4,2,3,1]",
        "num_ids": 196,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass # Write your code here\n",
        "test": "assert     triangle_area(3) == 0.5*sqrt(3)",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    length = len(array)\n    if length <= 1:\n        return 1\n    if end is None:\n        end = length\n    \n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n",
        "test": "assert     find_First_Missing([1,2,3,4,6,7,8,9,10]) == 5",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return(string.replace(\" \", \"%20\"))\n",
        "test": "assert     replace_spaces('Mr John Smith') == 'Mr%20John%20Smith'",
        "num_ids": 244,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = [] \n    for i in list: \n        if i%2 == 0: \n            even_num.append(i) \n    return even_num\n",
        "test": "assert     (Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10])",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for n in range(len(ele)):\n        if n+1 < len(ele):\n            sub.append((ele[n], ele[n+1]))\n            sub = adjac(ele[n+1], sub)\n    return sub\n",
        "test": "assert ",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "test": "assert     replace_spaces('test') == 'test'",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    moved_list = []\n    for i in num_list:\n        if i == 0:\n            moved_list.append(i)\n        else:\n            moved_list.append(i)\n    return moved_list\n",
        "test": "assert     move_zero([1,2,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0]) == [1,2,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0], \"Test 2 Failed\"",
        "num_ids": 2389,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n",
        "test": "assert     pair_xor_Sum([0,0,0,0,0,0,0,0,0,0],4) == 0",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for x in iterable:\n        hq.heappush(h,x)\n    return [hq.heappop(h) for _ in range(len(h))]\n",
        "test": "assert     heap_sort([5,4,3,2,1]) == [1,2,3,4,5], \"Not sorted correctly\"",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount>actual_cost:\n        return 1\n    return 0\n",
        "test": "assert     noprofit_noloss(14.6,23.5)",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 3:\n        return 0\n    elif t < 11:\n        return 0\n    elif v < 13:\n        return round(35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16),0)\n    elif v < 18:\n        return round(35.75 + 0.4275*t*(v**0.16) - 35.75*(v**0.16),0)\n    else:\n        return round(35.75 + 0.4275*t*(v**0.16),0)\n",
        "test": "assert not     math.isclose(16.6, wind_chill(7.5, 8), abs_tol=0.01)",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['bob', 'rick', 'diego', 'cow', 'joe', 'panda','sue']\n    print(sample_names)\n    print(len(sample_names))\n    new_sample_names = [i for i in sample_names if i[0].isupper()]\n    print(new_sample_names)\n    print(len(new_sample_names))\n",
        "test": "assert     sample_nam(['Mary', 'Zoe', 'Sam', 'Harry']) == 10",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('\\([^)]*\\)', '', items)\n",
        "test": "assert     remove_parenthesis(\"don(mary)\") == \"don\"",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n*(n+1)/2)\n",
        "test": "assert     is_nonagonal(1) == 1, 'It is a nonagonal number.'",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    test_list = re.findall(r'z+',text)\n    if test_list == []:\n        return False\n    else:\n        return True\n",
        "test": "assert     text_match_wordz_middle('zazza') == True",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Upto_K(input, k):\n        start = 0\n        end = k - 1\n        while start < end:\n            input[start], input[end] = input[end], input[start]\n            start += 1\n            end -= 1\n    \n    if not isinstance(input, list):\n        return 'Input should be a list'\n    \n    if not isinstance(k, int) or k < 0 or k > len(input):\n        return 'Invalid input'\n    \n    reverse_Upto_K(input, k)\n    return input\n    \n    \n    \nprint(reverse_Array_Upto_K([1,2,3,4,5,6,7], 4))\nprint(reverse_Array_Upto_K([1,2,3,4,5,6,7], 3))\nprint(reverse_Array_Upto_K([1,2,3,4,5,6,7], 1))\nprint(reverse_Array_Upto_K([1,2,3,4,5,6,7], 8))\nprint(reverse_Array_Upto_K(['a','b','c'], 2))\nprint(reverse_Array_Upto_K([], 2))\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('a', 'b', 'c'), {'d': 1, 'e': 2, 'f': 3}) == ('a', 'b', 'c', {'d': 1, 'e': 2, 'f': 3}) ",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_value = -1\n    max_avg = 0\n    paths = []\n    rows = len(cost)\n    columns = len(cost[0])\n    for i in range(rows):\n        for j in range(columns):\n            current_cell = cost[i][j]\n            if current_cell == 0 or i == 0 or j == 0:\n                continue\n            if i > 0:\n                left_cell = cost[i-1][j]\n                if left_cell!= 0:\n                    paths.append(left_cell + current_cell)\n            if j > 0:\n                up_cell = cost[i][j-1]\n                if up_cell!= 0:\n                    paths.append(up_cell + current_cell)\n            if i > 0 and j > 0:\n                left_up_cell = cost[i-1][j-1]\n                if left_up_cell!= 0:\n                    paths.append(left_up_cell + current_cell)\n",
        "test": "assert     maxAverageOfPath([[1, 2, 1], [4, 1, 5], [1, 1, 1]]) == 2",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print(students)\n    #check for minimal height\n    filtered_students = {}\n    for key in students:\n        height = students[key][0]\n        weight = students[key][1]\n        if height >= h and weight >= w:\n            filtered_students[key] = (height,weight)\n    print(filtered_students)\n    return filtered_students\n",
        "test": "assert     filter_data({'Alex':(36, 40)}, 25, 25) == {'Alex':(36, 40)}",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([5, 2, 2, 4], [5, 9, 3, 2]) == 1",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(0, power + 1):\n        result += base ** i\n    return result\n",
        "test": "assert ",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\\\"(.*?)\\\"', text1)\n    return result\n",
        "test": "assert     extract_quotation(\"'This is a single quotation mark'\") == ['This is a single quotation mark'], 'wrong result'",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_list = []\n    for i in range(len(test_tup) - 1):\n        result_list.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_list)\n",
        "test": "assert     multiply_elements((2, 3, 4, 5, 6, 7, 8, 9, 10)) == (2, 12, 32, 56, 96, 120, 144, 160, 192)",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(x) for x in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    return [key for key, group in groupby(nums)]\n",
        "test": "assert     (consecutive_duplicates([1,2,2,3,3,3,4,4,4,4]) == [1,2,3,4])",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r + math.pi*r*r*h\n    #return (math.pi*r*r+math.pi*r*r*h)/2\n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    return 2*math.pi*r*h + 2*math.pi*r*r\n    #return (2*math.pi*r*h+2*math.pi*r*r)/2\n    \ndef lateralsurface_circular_cone(r):\n    '''\n    Write a function to find the lateral surface area of a circular cone given radius r.\n    '''\n    return math.pi*r*r + math.pi*r*r\n    #return (math.pi*r*r+math.pi*r*r)/2\n    \ndef lateralsurface_rectangular_prism(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular prism given its length, width and height.\n    '''\n    return 2*l*w+2*l*h+2*w*h\n    #return (2*l*w+2*l*h+2*w*h)/2\n    \ndef lateralsurface_rectangular_pyramid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a rectangular pyramid given its length, width and height.\n    '''\n    return l*w+l*h+w*h\n    #return (l*w+l*h+w*h)/2\n",
        "test": "assert     lateralsurface_cone(3,4) == 12",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\"\\.\", \":\", text)\n    text = re.sub(r\",\", \":\", text)\n    return text\n",
        "test": "assert     replace_specialchar('') == ''",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            if mid == 0 or x!= A[mid - 1]:\n                return mid\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 3, 3, 3, 6, 7], 2) == -1",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    \n    # Initialize all sublist sums to 0\n    sublist_sums = [0] * n\n    \n    # Iterate through the given array\n    for i in range(n):\n        \n        # Initialize left sublist sum and right sublist sum\n        # to current element\n        left_sum = arr[i]\n        right_sum = arr[i]\n        \n        # Traverse left and right sublists\n        for j in range(i):\n            \n            # Add previous left sublist sum\n            left_sum = left_sum * arr[j]\n            \n            # Add previous right sublist sum\n            right_sum = right_sum * arr[n - j - 1]\n            \n            # Update sum of current left and right sublist\n            sublist_sums[i] = left_sum + right_sum\n    \n    # Return sum of sublist sums\n    return max(sublist_sums)",
        "test": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 12131392",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Start writing your code here\n    # n = 3\n    n |= n >> 1\n    n &= ~(1 << 0)\n    n |= n >> 1\n    n &= ~(1 << 63)\n    return n\n    \ndef get_list_of_bits(n):\n    '''\n    Write a python function to get the list of bits for a number.\n    '''\n    # Start writing your code here\n    # n = 16\n    # List of bits for the number n is stored in bits[]\n    bits = []\n    for i in range(0,64):\n        if n & (1 << i):\n            bits.append(1)\n        else:\n            bits.append(0)\n    return bits\n",
        "test": "assert     set_middle_bits(2) == 3",
        "num_ids": 2193,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = -1\n    n = len(a)\n    if n < 1:\n        return left\n    right = n - 1\n    while(left <= right):\n        mid = (left + right) // 2\n        if a[mid] == x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        elif a[mid] < x:\n            left = mid + 1\n    return left\n",
        "test": "assert     left_insertion([1, 2, 3, 5, 6, 8, 10], 2) == 2, \"left_insertion([1, 2, 3, 5, 6, 8, 10], 2)\"",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return 'Starting with vowel'\n    else:\n        return 'Starting with consonant'\n",
        "test": "assert     re.search(regex, 'Afghijk') ",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 738,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return (1/n)*(n-1) + geometric_sum(n-1)\n    \n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = []\n    i = 1\n    while True:\n        triangular_number.append(i * (i + 1) // 2)\n        i += 1\n        if len(str(triangular_number[-1])) == n:\n            break\n    return triangular_number[-1]\n",
        "test": "assert     find_Index(7) == 9",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = dict()\n    for i in range(len(test_tup)-1):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict\n",
        "test": "assert     tuple_to_dict((1,2)) == {1:2}, 'tuple_to_dict((1,2))!= {1:2}'",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0,len(s)-1):\n        if s[i]!=s[i+1]:\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same(['abc','abc','abc']) == True",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 2 * math.sqrt(2) * 4 / 3\n    \ndef test_area_tetrahedron():\n    assert math.isclose(area_tetrahedron(3), 12.780545885606055)\n    assert math.isclose(area_tetrahedron(1), 3.2981010852)\n    assert math.isclose(area_tetrahedron(2), 9.52573172722)\n    print('test passed')\n",
        "test": "assert     area_tetrahedron(5) ==     125",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1,2,3,4,5,6], 0) == [1,2,3,4,5,6], \"rotate_right_test1\"",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_none((1,None,3,4,5,6))==True, \"Wrong Answer\"",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(\"\\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\\n\")\n    return [num for num in range(startnum, endnum+1) if list(filter(None, str(num)) == list(filter(None, str(num)[::-1])))]\n",
        "test": "assert ",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n",
        "test": "assert     sector_area(1, 360) == None",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lenX = len(X) \n    lenY = len(Y) \n    lenZ = len(Z) \n",
        "test": "assert     lcs_of_three(\"TACOCAT\", \"GXTXAYB\", \"TACOCAT\") == \"TACOCAT\", 'lcs_of_three(\"TACOCAT\", \"GXTXAYB\", \"TACOCAT\") == \"TACOCAT\" should be True'",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if isinstance(str1, str) and str1!= '':\n        return re.sub(r'(?<=[a-z])([A-Z])', r' \\1', str1)\n    else:\n        return None\n    \ndef capital_words_list(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if isinstance(str1, str) and str1!= '':\n        lst = str1.split(' ')\n        new = []\n        for w in lst:\n            new.append(w[0].upper() + w[1:])\n        return''.join(new)\n    else:\n        return None\n    \ndef capital_words_re(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if isinstance(str1, str) and str1!= '':\n        return re.sub(r'(?<=\\w)([A-Z])', r' \\1', str1)\n    else:\n        return None\n",
        "test": "assert     capital_words_spaces('Hello, and welcome to my world.') == 'Hello, and welcome to my world.'",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n",
        "test": "assert     sort_numeric_strings([\"42\", \"23\", \"45\", \"45\", \"42\", \"23\", \"13\"]) == \\",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6], \"Wrong output\"",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    #check if left child of node at index i is smaller than its parent\n    if (i*2+1 < n) and arr[i] > arr[i*2+1]:\n        return False\n    #check if right child of node at index i is smaller than its parent\n    if (i*2+2 < n) and arr[i] > arr[i*2+2]:\n        return False\n    #if the above two cases are not met, then there is a problem\n    if i*2+1 < n and i*2+2 < n:\n        return False\n    #if we reach here, then all the checks pass\n    return True\n",
        "test": "assert     check_min_heap_helper([0, 1, 2, 3, 4], 3) == True",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_number(n):\n        '''\n        Write a function to find the nth jacobsthal number.\n        '''\n        a = 1\n        b = 1\n        for i in range(n):\n            a,b = b,(a+b)\n        return a\n        \n    if __name__ == '__main__': \n        n = int(input())\n        print(jacobsthal_number(n))\n    return n\n        \ndef zebra_puzzle(colors):\n    '''\n    A Zebra puzzle is a mathematical game that consists of a grid of squares arranged in a grid with two colors in each square. The objective of the puzzle is to place the colored tiles on the grid so that each row, column, and diagonal has a single color. The program should output \"YES\" if it can solve the puzzle and \"NO\" if it cannot.\n    '''\n    \n    def zebra_puzzle(colors):\n        '''\n        Write a program that solves the Zebra puzzle.\n        '''\n        grid = [None] * len(colors)\n        for i in range(len(colors)):\n            if i % 2 == 0:\n                grid[i] = \"W\"\n            else:\n                grid[i] = \"B\"\n        print(\"YES\" if check(grid) else \"NO\")\n    \n    def check(grid):\n        '''\n        Write a function that checks the grid to see if it's a solution.\n        '''\n        for col in range(len(grid)):\n            if grid[col]!= \"W\" and grid[col]!= \"B\":\n                return False\n        return True\n    \n    if __name__ == '__main__': \n        colors = input().split()\n        zebra_puzzle(colors)\n    return colors\n        \ndef max_key(value):\n    '''\n    A key is a value that could be used to sort a dictionary of data. Write a function that takes a dictionary of values and returns the key with the largest value in the dictionary.\n    '''\n    \n    def max_key(value):\n        '''\n        Write a function that takes a dictionary of values and returns the key with the largest value in the dictionary.\n        '''\n        return max(value, key=value.get)\n    \n    if __name__ == '__main__': \n        value = {'a': 1, 'b': 2, 'c': 3}\n        max_key(value)\n        \ndef max_list(values):\n    '''\n    Write a function that takes a list and returns the largest value in that list.\n    '''\n    \n    def max_list(values):\n        '''\n        Write a function that takes a list and returns the largest value in that list.\n        '''\n        return max(values)\n    \n    if __name__ == '__main__': \n        values = [2, 3, 1, 5, -3, 2]\n        max_list(values)\n    return values\n        \ndef order_people(ages):\n    '''\n    Write a program that takes as input a list of integers, and then prints that list in order from oldest to youngest.\n    '''\n    \n    def order_people(ages):\n        '''\n        Write a program that takes as input a list of integers, and then prints that list in order from oldest to youngest.\n        '''\n        oldest = None\n        youngest = None\n        for age in ages:\n            if oldest == None:\n                oldest = age\n            elif age < oldest:\n                oldest = age\n            if youngest == None:\n                youngest = age\n            elif age > youngest:\n                youngest = age\n        print(oldest, youngest)\n    \n    if __name__ == '__main__': \n        ages = [5, 10, 15, 20, 25]\n        order_people(ages)\n    return ages\n        \ndef word_break(s, words):\n    '''\n    Write a program that takes as input a string and a list of strings and checks if the string can be broken into words from the list of words. For example, the string \"barfoothefoobarman\" can be broken into two words \"bar\" and \"foo\" and therefore \"barfoothefoobarman\" is a valid string for the list of words, [\"bar\",\"foo\"].\n    '''\n    \n    def word_break(s, words):\n        '''\n        Write a program that takes as input a string and a list of strings and checks if the string can be broken into words from the list of words. For example, the string \"barfoothefoobarman\" can be broken into two words \"bar\" and \"foo\" and therefore \"barfoothefoobarman\" is a valid string for the list of words, [\"bar\",\"foo\"].\n        '''\n        for word in words:\n            if s.startswith(word):\n                if len(word) == len(s):\n                    return True\n                else:\n                    if word_break(s[len(word):], words):\n                        return True\n        return False\n    \n    if __name__ == '__main__': \n        s = \"barfoothefoobarman\"\n        words = [\"foo\", \"bar\"]\n        word_break(s, words)\n    return s, words\n        \ndef longest_substring(s):\n    '''\n    Write a program that takes as input a string and returns the longest substring of that string that is a palindrome.\n    '''\n    \n    def longest_substring(s):\n        '''\n        Write a program that takes as input a string and returns the longest substring of that string that is a palindrome.\n        '''\n        \n        def palindrome(s):\n            '''\n            Write a function that checks whether a string is a palindrome.\n            '''\n            return s == s[::-1]\n    \n        longest = ''\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                substring = s[i:j+1]\n                if palindrome(substring) and len(substring) > len(longest):\n                    longest = substring\n        return longest\n    \n    if __name__ == '__main__': \n        s = 'racecarannakayak'\n        longest_substring(s)\n    return s\n        \ndef get_max(n):\n    '''\n    Write a program that takes as input an integer n, and prints the nth row of Pascal's triangle.\n    '''\n    \n    def get_max(n):\n        '''\n        Write a program that takes as input an integer n, and prints the nth row of Pascal's triangle.\n        '''\n        row = [1]\n        while len(row) <= n:\n            print(row)\n            row = [x + y for x, y in zip([0] + row, row + [0])]\n        return row[:n]\n    \n    if __name__ == '__main__': \n        n = int(input())\n        get_max(n)\n    return n\n        \ndef rotate_matrix(matrix):\n    '''\n    Write a program to rotate a matrix by 90 degrees. For example, given the following matrix:\n    [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9]\n    ]\n    rotate it in the following way:\n    [\n      [7, 4, 1],\n      [8, 5, 2],\n      [9, 6, 3]\n    ]\n    '''\n    \n    def rotate_matrix(matrix):\n        '''\n        Write a program to rotate a matrix by 90 degrees. For example, give",
        "test": "assert ",
        "num_ids": 2090,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Time - O(N log K)\n    # Space - O(K)\n    # Create a Heap of size K\n    # Traverse the List and push - (tuple_list[i], index) to the heap.\n",
        "test": "assert ",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #list_x = []\n    #for i in range(min(l1,l2,l3)):\n    #    if l1[i] == l2[i] == l3[i]:\n    #        list_x.append(l1[i])\n    #return list_x\n    \n    \n    return [i for i in l1 if i in l2 and i in l3]\n",
        "test": "assert     extract_index_list([], [1, 2, 3, 4], [1, 2, 3, 4]) == [], \"Failed\"",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert     second_smallest([1, 2, 3, 4, 5]) == 3",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.match(r\"(a)+b*\", text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('aabbbbc') == True",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                counter += 1\n    return counter\n",
        "test": "assert     count_reverse_pairs([\"\", \"\", \"\", \"\"]) == 0",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = dict()\n    for sublist in list1:\n        count[tuple(sublist)] = count.get(tuple(sublist), 0) + 1\n    return count\n",
        "test": "assert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {(1, 2, 3): 6}, \"Test 1 Failed\"",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert not     is_decimal('3.12d')",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_dict = {}\n    for i in arr:\n        if i in arr_dict:\n            arr_dict[i] += 1\n        else:\n            arr_dict[i] = 1\n    # print(arr_dict)\n    # print(len(arr_dict.values()))\n    if len(arr_dict.values()) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element([1,1,2,3,3,4,4,5,5,6,7,7,8,9,9]) == False",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = [1,3,5,7,8,10,12]\n    if monthnum3 in months:\n        print(\"30 days\")\n    else:\n        print(\"31 days\")\n",
        "test": "assert     check_monthnumber_number(2) == True",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    print(arr)\n    diff = abs(arr[0] - arr[1]) \n    for i in range(0, n): \n        for j in range(i + 1, n): \n            if (abs(arr[i] - arr[j]) < diff): \n                diff = abs(arr[i] - arr[j]) \n    return(diff) \n",
        "test": "assert     find_min_diff([1, 10, 70, 40, 50], 4) == 9, \"Not Equal\"",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(1 for i in str if i.isdigit())\n",
        "test": "assert     number_ctr('23') == 2",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0:\n        return False\n    polite_list = [1,2,3,4,5,6]\n    print(polite_list)\n    if n <= len(polite_list):\n        return polite_list[n-1]\n    n = n - len(polite_list)\n    c = 1\n    while True:\n        if n%c == 0:\n            break\n        c += 1\n    return c\n",
        "test": "assert     is_polite(1) == 1 ",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i+1 <= len(l1)-1:\n            l2.append((l1[i], l1[i+1]))\n    return l2\n",
        "test": "assert     pair_wise([1,2,3,4,5]) == [(1,2),(2,3),(3,4),(4,5)]",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Write your code here\n    arr.sort()\n    i = 0\n    j = len(arr)-1\n    count = 0\n    while i < j:\n        if arr[i] + arr[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    return count\n",
        "test": "assert     get_pairs_count([1,2,3,5,6,8],10) == 1, \"Wrong answer for input [1,2,3,5,6,8]\"",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i in li1 and i not in li2]\n    return li_dif\n",
        "test": "assert ",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    num = 1\n    sum = 0\n    while (num <= n) : \n        if (num % 2!= 0) : \n            sum += num ** 4\n        num += 1\n    return sum\n",
        "test": "assert     odd_num_sum(1) == 1, \"Sum of first odd natural numbers should be 1\"",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    par_map = {'}':'{', ']':'[',')':'('}\n    open_brackets = '({['\n    queue = deque()\n    for char in exp:\n        if char in open_brackets:\n            queue.append(char)\n        elif char in par_map:\n            if not queue or queue[-1]!= par_map[char]:\n                return False\n            queue.pop()\n    return not queue\n",
        "test": "assert     check_expression(\"[][])\") == False",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for k in range(K):\n        test_str = test_str.replace(test_str[k*K:k*K+K], '')\n    return test_str\n",
        "test": "assert     remove_length(\"the quick brown fox jumps over the lazy dog\", 16) == \"the quick brown fox jumps over the lazy dog\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text,re.MULTILINE)\n    result = []\n    for match in matches:\n        result.append((match.group(),match.start(),match.end()))\n    return result\n",
        "test": "assert     occurance_substring(\"i am amir\",\"hir\") == []",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(1, len(nums), 2):\n        if nums[index] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([2, 4, 6, 8, 10, 11, 10]) == False",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = 0\n    for i in range(len(test_str)):\n        if test_str[i] == \"a\" or test_str[i] == \"e\" or test_str[i] == \"i\" or test_str[i] == \"o\" or test_str[i] == \"u\":\n            if test_str[i-1] == \"a\" or test_str[i-1] == \"e\" or test_str[i-1] == \"i\" or test_str[i-1] == \"o\" or test_str[i-1] == \"u\" or test_str[i-1] == \"A\" or test_str[i-1] == \"E\" or test_str[i-1] == \"I\" or test_str[i-1] == \"O\" or test_str[i-1] == \"U\":\n                result += 1\n            if test_str[i+1] == \"a\" or test_str[i+1] == \"e\" or test_str[i+1] == \"i\" or test_str[i+1] == \"o\" or test_str[i+1] == \"u\" or test_str[i+1] == \"A\" or test_str[i+1] == \"E\" or test_str[i+1] == \"I\" or test_str[i+1] == \"O\" or test_str[i+1] == \"U\":\n                result += 1\n        elif test_str[i] == \"A\" or test_str[i] == \"E\" or test_str[i] == \"I\" or test_str[i] == \"O\" or test_str[i] == \"U\":\n            if test_str[i-1] == \"a\" or test_str[i-1] == \"e\" or test_str[i-1] == \"i\" or test_str[i-1] == \"o\" or test_str[i-1] == \"u\" or test_str[i-1] == \"A\" or test_str[i-1] == \"E\" or test_str[i-1] == \"I\" or test_str[i-1] == \"O\" or test_str[i-1] == \"U\":\n                result += 1\n            if test_str[i+1] == \"a\" or test_str[i+1] == \"e\" or test_str[i+1] == \"i\" or test_str[i+1] == \"o\" or test_str[i+1] == \"u\" or test_str[i+1] == \"A\" or test_str[i+1] == \"E\" or test_str[i+1] == \"I\" or test_str[i+1] == \"O\" or test_str[i+1] == \"U\":\n                result += 1\n    return result\n",
        "test": "assert     count_vowels('bcdefghijklmnopqrstuvwxyz') == 0, 'Incorrect'",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if i not in arr[arr.index(i)+1:]:\n            sum+=i\n    return sum\n",
        "test": "assert ",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n",
        "test": "assert     pack_consecutive_duplicates([1]) == [[1]]",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        result[tuple(sublist)] = list1.count(sublist)\n    return result\n",
        "test": "assert     unique_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {(1, 2, 3): 1, (4, 5, 6): 1, (7, 8, 9): 1}",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    length_of_test_list = len(test_list)\n    for i in range(length_of_test_list):\n        first_item = test_list[i]\n        for j in range(i+1,length_of_test_list):\n            second_item = test_list[j]\n            for k in range(j+1,length_of_test_list):\n                third_item = test_list[k]\n                if (first_item+second_item) == third_item:\n                    result.append((first_item,second_item,third_item))\n    return result\ndef find_triplets(test_list):\n    '''\n    Write a function to find the triplets of numbers in a list that add up to a particular sum\n    '''\n    result = []\n    length_of_test_list = len(test_list)\n    for i in range(length_of_test_list):\n        first_item = test_list[i]\n        for j in range(i+1,length_of_test_list):\n            second_item = test_list[j]\n            for k in range(j+1,length_of_test_list):\n                third_item = test_list[k]\n                if first_item+second_item == third_item:\n                    result.append((first_item,second_item,third_item))\n    return result\ndef find_all_combinations(test_list,sum):\n    '''\n    Write a function to find all the combinations of a list that adds to a specific sum\n    '''\n    result = []\n    length_of_test_list = len(test_list)\n    for i in range(length_of_test_list):\n        first_item = test_list[i]\n        for j in range(i+1,length_of_test_list):\n            second_item = test_list[j]\n            if first_item+second_item == sum:\n                result.append((first_item,second_item))\n    return result\ndef find_all_possible_combinations(test_list):\n    '''\n    Write a function to find all the possible combinations of a list\n    '''\n    result = []\n    length_of_test_list = len(test_list)\n    for i in range(length_of_test_list):\n        first_item = test_list[i]\n        for j in range(i+1,length_of_test_list):\n            second_item = test_list[j]\n            result.append((first_item,second_item))\n    return result\ndef find_subsets(test_list):\n    '''\n    Write a function to find all the possible subsets of a list\n    '''\n    result = []\n    for i in range(len(test_list)+1):\n        result.extend(combinations(test_list,i))\n    return result\ndef find_all_subsets(test_list):\n    '''\n    Write a function to find all the possible subsets of a list\n    '''\n    result = []\n    for i in range(len(test_list)+1):\n        result.extend(combinations(test_list,i))\n    return result\ndef find_all_permutations(test_list):\n    '''\n    Write a function to find all the possible permutations of a list\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.extend(permutations(test_list,i+1))\n    return result\ndef find_sum_of_list(test_list):\n    '''\n    Write a function to find the sum of all the elements in a list\n    '''\n    sum = 0\n    for item in test_list:\n        sum = sum + item\n    return sum\ndef find_sum_of_subset(test_list,subset):\n    '''\n    Write a function to find the sum of all the elements in a subset\n    '''\n    sum = 0\n    for item in subset:\n        sum = sum + item\n    return sum\ndef find_sum_of_list_without_repetitions(test_list):\n    '''\n    Write a function to find the sum of all the elements in a list without repetitions\n    '''\n    sum = 0\n    temp_list = []\n    for item in test_list:\n        if item not in temp_list:\n            sum = sum + item\n            temp_list.append(item)\n    return sum\ndef find_factorial(test_number):\n    '''\n    Write a function to find the factorial of a number\n    '''\n    result = 1\n    for i in range(1,test_number+1):\n        result = result*i\n    return result\ndef find_all_subsets_without_repetition(test_list):\n    '''\n    Write a function to find all the possible subsets of a list without repetition\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.extend(combinations(test_list,i))\n    return result\ndef find_all_permutations_without_repetition(test_list):\n    '''\n    Write a function to find all the possible permutations of a list without repetition\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.extend(permutations(test_list,i+1))\n    return result\ndef find_all_possible_combinations_without_repetition(test_list):\n    '''\n    Write a function to find all the possible combinations of a list without repetition\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.extend(combinations(test_list,i+1))\n    return result\ndef find_greatest_product_of_three(test_list):\n    '''\n    Write a function to find the greatest product of three numbers in a list\n    '''\n    max = 0\n    for i in range(len(test_list)-2):\n        for j in range(i+1,len(test_list)-1):\n            for k in range(j+1,len(test_list)):\n                if test_list[i]*test_list[j]*test_list[k] > max:\n                    max = test_list[i]*test_list[j]*test_list[k]\n    return max\ndef find_unique_elements(test_list):\n    '''\n    Write a function to find the unique elements in a list\n    '''\n    temp_list = []\n    for item in test_list:\n        if item not in temp_list:\n            temp_list.append(item)\n    return temp_list\ndef find_all_sublists(test_list):\n    '''\n    Write a function to find all the possible sublists of a list\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.extend(combinations(test_list,i))\n    return result\ndef find_max_elements_in_list(test_list):\n    '''\n    Write a function to find the max number in a list\n    '''\n    max = test_list[0]\n    for i in range(1,len(test_list)):\n        if test_list[i] > max:\n            max = test_list[i]\n    return max\ndef find_min_elements_in_list(test_list):\n    '''\n    Write a function to find the min number in a list\n    '''\n    min = test_list[0]\n    for i in range(1,len(test_list)):\n        if test_list[i] < min:\n            min = test_list[i]\n    return min\ndef find_common_elements_in_lists(list1,list2):\n    '''\n    Write a function to find common elements in two lists\n    '''\n    temp_list = []\n    for item in list1:\n        if item in list2:\n            temp_list.append(item)\n    return temp_list\ndef find_max_elements_in_list",
        "test": "assert     find_combinations([(2, 1, 3), (5, 3, 4, 7), (1, 2, 4, 5)]) == [[(1, 2, 4), (1, 2, 5), (2, 1, 3)], ",
        "num_ids": 1506,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, n + 1) : \n        if (n % i == 0) : \n            divisors_count += 1\n    if (divisors_count % 2 == 0) : \n        return True\n    else : \n        return False\ndef is_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if (n <= 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for i in range(3, 1 + max_divisor, 2) : \n        if (n % i == 0) : \n            return False\n    return True\ndef is_perfect(n) : \n    '''\n    Write a python function to check whether the number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors == n) : \n        return True\n    else : \n        return False\ndef is_abundant(n) : \n    '''\n    Write a python function to check whether the number is abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors > n) : \n        return True\n    else : \n        return False\ndef is_super_abundant(n) : \n    '''\n    Write a python function to check whether the number is super abundant or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors > n) : \n        return True\n    if (is_abundant(n)) : \n        return False\n    else : \n        return True\ndef is_deficient(n) : \n    '''\n    Write a python function to check whether the number is deficient or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (sum_of_divisors < n) : \n        return True\n    else : \n        return False\ndef is_transient(n) : \n    '''\n    Write a python function to check whether the number is transient or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (is_perfect(n)) : \n        return False\n    if (is_deficient(n)) : \n        return False\n    if (sum_of_divisors > n) : \n        return True\n    else : \n        return False\ndef is_twin_transient(n) : \n    '''\n    Write a python function to check whether the number is twin_transient or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            sum_of_divisors += i\n    if (is_transient(n)) : \n        return False\n    if (is_transient(sum_of_divisors)) : \n        return True\n    else : \n        return False\ndef is_triangular(n) : \n    '''\n    Write a python function to check whether the number is triangular or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if ((sum_of_divisors * 2) == n) : \n            return True\n        else : \n            return False\ndef is_pentagonal(n) : \n    '''\n    Write a python function to check whether the number is pentagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if (((24 * sum_of_divisors) + 1) == n) : \n            return True\n        else : \n            return False\ndef is_hexagonal(n) : \n    '''\n    Write a python function to check whether the number is hexagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if (((8 * sum_of_divisors) + 1) == n) : \n            return True\n        else : \n            return False\ndef is_heptagonal(n) : \n    '''\n    Write a python function to check whether the number is heptagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divisors += i\n        if (((55 * sum_of_divisors) + 1) == n) : \n            return True\n        else : \n            return False\ndef is_octagonal(n) : \n    '''\n    Write a python function to check whether the number is octagonal or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-36.php\n    '''\n    if (is_prime(n)) : \n        return False\n    else : \n        sum_of_divisors = 0\n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum_of_divi",
        "test": "assert     count_divisors(12) == True",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sub_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (i < j) and (j-i+1)%2!=0:\n                sub_sum = sub_sum + sum(arr[i:j+1])\n    return sub_sum\n",
        "test": "assert ",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = round(h, 2)\n    s = round(s, 2)\n    v = round(v, 2)\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n    return product\n",
        "test": "assert     mul_even_odd([0,1,2,3,4,5,6]) == 0",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, str):\n        return None\n    return tuple(int(item) for item in test_str[1:-1].split(','))\n",
        "test": "assert     (tuple_str_int('(1, 2, 3)'), (1, 2, 3))",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    for i in range(l):\n        if x <= a[i]:\n            return i\n    return l\n",
        "test": "assert     (right_insertion([1, 3, 5, 6], 0) == 0)",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n",
        "test": "assert     text_match_three('abb') == False",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)\n",
        "test": "assert     new_tuple([1, 2, 3, 4], \"1234\") == (1234, 1234)",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "test": "assert     even_position([1,2,3,4,5,6,7,8,9]) == False, 'fails'",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            new_tup = new_tup + (tup,)\n        else:\n            new_tup = new_tup + remove_nested(tup)\n    return new_tup\n",
        "test": "assert     remove_nested(('3', 4, 5)) == ('3', 4, 5), \"Checking remove_nested\"",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([1, 2, 3]) == 0",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = start + (end - start)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            else:\n                start = mid+1\n        elif x > arr[mid]:\n            start = mid+1\n        else:\n            end = mid-1\n",
        "test": "assert     last([1,2,2,3,4],1) == 0, 'incorrect'",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return text.startswith('a') and text.endswith('b')\n",
        "test": "assert not text_starta_endb('zzbobobegghakl') == 'a', 'wrong output'",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k,v in dict.items():\n        total = total + v\n    return total\n",
        "test": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(n) if x % 2 == 1])\n",
        "test": "assert     sum_odd(1) == 0,     \"Wrong answer for sum_odd(1)\"",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n    \ndef _product(arr):\n    '''\n    Write a python function to find the product of an array.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product\n",
        "test": "assert     _sum([1,2,3]) == 6, \"check #1\"",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32-d)))&0xffffffff\n",
        "test": "assert     left_rotate(0x0000,2) == 0x0000, 'Error, %x should be 0x0000'",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "test": "assert     remove_all_spaces(\"The cat in the hat sat on the flat mat.\")     == \"Thecatinthehatsatontheflatmat.\"",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y and y == z\n",
        "test": "assert     test_three_equal(3,5,5) == 0",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    cnt = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            cnt += 1\n    return cnt\n",
        "test": "assert     count_rotation([1, 2, 3, 4, 5, 6, 7]) == 0, \"should be 0\"",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n;  \n    y = int(math.sqrt(n)) \n    if (y * y == x) : \n        return True\n    else : \n        return False\n",
        "test": "assert     is_perfect_square(9) == True, \"The ninth argument is perfect square\"",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for num in arr:\n        prod *= num\n    return prod % 2 == 0\n",
        "test": "assert     is_product_even([1,2]) is True, 'Two elements.'",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_list = l\n            max_sum = sum(l)\n    return max_list\n",
        "test": "assert ",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # last_char = ''\n    # max_count = 0\n    # for char in test_str:\n    #     if char.isupper():\n    #         last_char = char\n    #         if char.isupper():\n    #             count = 1\n    #     else:\n    #         if last_char.isupper():\n    #             count += 1\n    #             if count > max_count:\n    #                 max_count = count\n    #         last_char = char\n    #         count = 0\n    # return max_count\n",
        "test": "assert     max_run_uppercase(\"ABaaaa\") == \"ABaaaa\"",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n",
        "test": "assert     first_odd([3,4,6,7,8,9,0,1,2,3,5,6,7,8,9]) == 3",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if test_tup[i] == 0:\n            return True\n    return False\n",
        "test": "assert     check_K(((1, 'a'), (2, 'b')), 2) == False",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[1] > test_tup2[1]:\n        return False\n    elif test_tup1[2] > test_tup2[2]:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_smaller(((1,3),(2,3)),((1,2),(2,2))) == False",
        "num_ids": 607,
        "indeed": false
    }
]