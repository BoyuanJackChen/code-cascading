[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "test": "assert     similar_elements([1,2,3], [2,3,4]) == [2,3]",
        "num_ids": 244
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(2)         == False",
        "num_ids": 264
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans = []\n    if len(nums) < n:\n        return 'Invalid Input!'\n    for i in range(n):\n        a = hq.heappop(nums)\n        ans.append(a)\n    return ans[::-1]\n",
        "test": "assert     heap_queue_largest([7, 2, 10, 5, 6, 3, 2, 4], 2) == [7, 10]",
        "num_ids": 388
    },
    {
        "number": 6,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    if (x & (x - 1)) == 0:\n        return True\n    return False\n",
        "test": "assert     is_Power_Of_Two(8) == True",
        "num_ids": 192
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n",
        "test": "assert     find_char_long('') == []",
        "num_ids": 243
    },
    {
        "number": 8,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num * num for num in nums]\n",
        "test": "assert     [0, 1, 4] == square_nums([0, 1, 2])",
        "num_ids": 109
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    for i in range(0,n): \n        temp=str[i:] + str[0:i]\n        if(temp==str): \n            return i\n    return -1\n",
        "test": "assert     find_Rotations('abab') == 0",
        "num_ids": 298
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '')\n",
        "test": "assert     remove_Occ('helloworld', 'x') == 'helloworld'",
        "num_ids": 245
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # get list of sum of row\n    row_sums = [sum(row) for row in M]\n",
        "test": "assert ",
        "num_ids": 177
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = l*b*h\n    return vol\n",
        "test": "assert     find_Volume(4,5,3)     ==     30",
        "num_ids": 138
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore(\"a_b_c\") == True",
        "num_ids": 580
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "test": "assert     square_perimeter(2) ==     8",
        "num_ids": 79
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    for i in string:\n        string_list.append(i)\n    return string_list\n",
        "test": "assert     str_to_list('aba', 'bc') == 'aba'",
        "num_ids": 264
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(len(arraynums)-1):\n        if arraynums[i]==arraynums[i+1]:\n            return True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 1, 2, 3, 4]) == True, \"This should return True\"",
        "num_ids": 286
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 8 or x == 9:\n        return True\n    elif x == 10 or x == 11:\n        return False\n    elif x == 12 or x == 13:\n        return True\n    elif x == 14 or x == 15:\n        return False\n    elif x == 16 or x == 17:\n        return True\n    elif x == 18 or x == 19:\n        return False\n    elif x == 20 or x == 21:\n        return True\n    elif x == 22 or x == 23:\n        return False\n    elif x == 24 or x == 25:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(2) == False",
        "num_ids": 298
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == num[::-1][:-1]*2\n",
        "test": "assert     rev(123) == False",
        "num_ids": 129
    },
    {
        "number": 57,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 0 : \n        return 0\n    if n == 1 : \n        return arr[0]\n    max_num = arr[0]\n    for i in range(1,n) : \n        max_num = max(max_num,arr[i] * 10**(n-1) + find_Max_Num(arr[:i] + arr[i+1:]))\n    return max_num\n",
        "test": "assert     find_Max_Num([1,2,3,4,5]) == 54321, 'incorrect'",
        "num_ids": 381
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n        \ndef write_a_function_to_return_max_sum_of_any_subarray(arr):\n    '''\n    Write a python function to return the maximum sum of any subarray of an array.\n    '''\n    max_sum=0\n    for i in range(len(arr)):\n        current_sum=0\n        for j in range(i,len(arr)):\n            current_sum+=arr[j]\n            if(current_sum>max_sum):\n                max_sum=current_sum\n    return max_sum\n",
        "test": "assert     opposite_Signs(-2,3)== True, 'incorrect output'",
        "num_ids": 278
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n",
        "test": "assert     is_octagonal(1) == 1, is_octagonal(1)",
        "num_ids": 146
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def is_valid_substring(string):\n        # print(string)\n        num_sum = 0\n        for i in string:\n            num_sum += int(i)\n        if len(string) == num_sum:\n            return True\n        else:\n            return False\n    substrings_counter = defaultdict(int)\n    for i in range(0, len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            if is_valid_substring(substring):\n                substrings_counter[substring] += 1\n    return substrings_counter\n",
        "test": "assert count_Substrings(\"abc\") == [\"abc\", \"a\", \"ab\", \"abc\"]",
        "num_ids": 416
    },
    {
        "number": 62,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert     smallest_num([5, 8, 12, -3, 1]) == -3",
        "num_ids": 163
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(test_list[i] - test_list[i+1] for i in range(len(test_list)-1))\n",
        "test": "assert     max_difference( ([1,2,3], [4,6,12], [0,9,45], [9,9,9]) ) == 9, \"not a valid difference!\"",
        "num_ids": 544
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n",
        "test": "assert     subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)], \"Wrong output\"",
        "num_ids": 224
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) > 0:\n        first_item = data_list[0]\n        if type(first_item) == list:\n            return recursive_list_sum(first_item) + recursive_list_sum(data_list[1:])\n        else:\n            return first_item + recursive_list_sum(data_list[1:])\n    else:\n        return 0\n",
        "test": "assert     recursive_list_sum([1,2,3]) == 6",
        "num_ids": 358
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "test": "assert     pos_count([-1,4,6,7]) == 3",
        "num_ids": 253
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #Bell(n) = sum(Bell(j)*Bell(n-j), for j in range(n))\n    #Bell(0) = 1\n    #Bell(1) = 1\n    #Bell(2) = 2\n    #Bell(n) = sum(Bell(j)*Bell(n-j), for j in range(n)) = sum(sum(Bell(j)*Bell(n-j), for j in range(n)))\n    bells = [1, 1, 2]\n    for i in range(3, n+1):\n        bells.append(sum([bells[i-j]*bells[j] for j in range(i)]))\n    return bells[n]\n",
        "test": "assert     bell_number(0) == 1",
        "num_ids": 401
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "test": "assert     is_Monotonic([-3, -2, -1, 0, 1, 2, 3]) == True, \"wrong result\"",
        "num_ids": 332
    },
    {
        "number": 69,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1,2,3,4,5], [1,2,3,4]) == True",
        "num_ids": 339
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i) == count:\n            count += 1\n        else:\n            break\n    return (count == len(Input))\n",
        "test": "assert     (find_equal_tuple([(1,2), (2,3), (3,4), (4,5), (5,6)]) == False)",
        "num_ids": 444
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))  # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     [0,1,2,3,4,5,6,7,8,9] == comb_sort([0,1,2,3,4,5,6,7,8,9])",
        "num_ids": 326
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def square_nums(n): \n        nums = []\n        for i in range(0,n):\n            if i**2 <= n:\n                nums.append(i**2)\n        return nums\n    \n    def is_square(n,l):\n        for i in l:\n            if i==n:\n                return True\n        return False\n",
        "test": "assert     dif_Square(121) == True",
        "num_ids": 347
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns:\n        if len(patterns) == 1:\n            return colors == patterns[0]\n        elif len(patterns) == 2:\n            return (colors[0] == patterns[0] and colors[1] == patterns[1]) or (colors[0] == patterns[1] and colors[1] == patterns[0])\n        elif len(patterns) == 3:\n            return (colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2]) or (colors[0] == patterns[1] and colors[1] == patterns[2] and colors[2] == patterns[0]) or (colors[0] == patterns[2] and colors[1] == patterns[0] and colors[2] == patterns[1])\n        else:\n            return False\n    else:\n        return True\n",
        "test": "assert     is_samepatterns([], []) == True",
        "num_ids": 554
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for elem in test_list:\n        if elem[0] % K == elem[1] % K == 0:\n            new_list.append(elem)\n    return new_list\n",
        "test": "assert     find_tuples([(1, 2, 3, 4, 5), (2, 3, 4, 5, 6)], 5) == [(1, 2, 3, 4, 5), (2, 3, 4, 5, 6)]",
        "num_ids": 423
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "test": "assert     is_Diff(10) == False, \"Wrong output\"",
        "num_ids": 110
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len_words = len(s) \n    if len_words % 2 == 0: \n        return False\n    else: \n        return True\n",
        "test": "assert     word_len(\"python\") == False, \"Wrong result for word_len('python')\"",
        "num_ids": 161
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n+1)*(n+2)*(n+3)/6)\n",
        "test": "assert     tetrahedral_number(0) == 1",
        "num_ids": 125
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=int(r)\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "test": "assert     volume_sphere(2) == 4*math.pi*(2**3)/3",
        "num_ids": 191
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #strr = input()\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return sum % 26\n    \n    \ndef get_Char1(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables.\n    '''\n    #strr = input()\n    return sum([ord(i) for i in strr]) % 26\n    \n    \ndef get_Char2(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables and without using any built in functions.\n    '''\n    return sum(map(ord, strr)) % 26\n    \n    \ndef get_Char3(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables and without using any built in functions and without using the reduce function.\n    '''\n    return reduce(lambda x, y: x+y, map(ord, strr)) % 26\n    \n    \ndef get_Char4(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables and without using any built in functions and without using the reduce function.\n    '''\n    return sum((ord(i) for i in strr)) % 26\n    \n    \ndef get_Char5(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables and without using any built in functions and without using the reduce function.\n    '''\n    return functools.reduce(lambda x, y: x+y, map(ord, strr)) % 26\n    \n    \ndef get_Char6(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26 without using any additional variables and without using any built in functions and without using the reduce function.\n    '''\n    return reduce(lambda x, y: x+y, map(ord, strr)) % 26\n",
        "test": "assert     get_Char(\"zy\")== 122, \"Check the logic\"",
        "num_ids": 184
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 0\n    # sequence = []\n    num = 0\n    while count < n:\n        num += 1\n        # sequence.append(num)\n        count += 1\n        if num % 2 == 0:\n            num += 1\n        else:\n            num += 2\n    # return sequence\n    return num\n",
        "test": "assert ",
        "num_ids": 162
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=4*math.pi*r**2\n    return area\ndef surfacearea_square(a,b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    area=a*b\n    return area\ndef surfacearea_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_triangle_three_sides(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef surfacearea_triangle_three_sides_alt(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))*(a+b+c)\n    return area\ndef surfacearea_triangle_three_sides_alt_2(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*a*b+a*c+b*c\n    return area\ndef surfacearea_triangle_three_sides_alt_3(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    s=(a+b+c)/2\n    area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return area\ndef surfacearea_triangle_three_sides_alt_4(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*(a+b+c)*math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))\n    return area\ndef surfacearea_triangle_three_sides_alt_5(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle using three sides.\n    '''\n    area=0.5*(a+b+c)*math.sqrt(math.pow(a,2)+math.pow(b,2)+math.pow(c,2))\n    return area\ndef surfacearea_rectangle_two_sides(a,b):\n    '''\n    Write a function to find the surface area of a rectangle using two sides.\n    '''\n    area=a*b\n    return area\ndef surfacearea_parallelogram_two_sides(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram using two sides.\n    '''\n    area=a*b\n    return area\ndef surfacearea_trapezium_two_sides(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium using two sides.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_circle_area(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area=math.pi*r**2\n    return area\ndef surfacearea_circle_area_alt(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area=math.pi*r**2\n    return area\ndef surfacearea_circle_area_alt_2(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area=math.pi*math.pow(r,2)\n    return area\ndef surfacearea_square_area(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=a*a\n    return area\ndef surfacearea_square_area_alt(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=math.pow(a,2)\n    return area\ndef surfacearea_square_area_alt_2(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area=math.pow(a,2)\n    return area\ndef surfacearea_rectangle_area(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_2(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_3(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_4(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_rectangle_area_alt_5(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area=a*b\n    return area\ndef surfacearea_trapezium_area(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_2(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_3(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_4(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h+b*h\n    return area\ndef surfacearea_trapezium_area_alt_5(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    area=0.5*a*b+a*h",
        "test": "assert     (surfacearea_sphere(1)==4*math.pi)",
        "num_ids": 161
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    return hexagonal_number(n - 1) + 1 - math.sqrt(3) * (1 - (1 / 3) ** (n - 1))\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 180
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3_copy = dict3.copy()\n    for d3 in dict3_copy:\n        if d3 in dict3 and d3 in dict2 and d3 in dict1:\n            dict3[d3].extend(dict1[d3])\n            dict3[d3].extend(dict2[d3])\n            dict3[d3].extend(dict3_copy[d3])\n            continue\n        if d3 in dict3 and d3 in dict2:\n            dict3[d3].extend(dict2[d3])\n            dict3[d3].extend(dict3_copy[d3])\n            continue\n        if d3 in dict3 and d3 in dict1:\n            dict3[d3].extend(dict1[d3])\n            dict3[d3].extend(dict3_copy[d3])\n            continue\n        if d3 in dict3:\n            dict3[d3].extend(dict3_copy[d3])\n            continue\n",
        "test": "assert     merge_dictionaries_three(dict1, dict2, dict3) == result",
        "num_ids": 419
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = list(set(list1))\n    list2.sort()\n    d = {}\n    for i in list2:\n        d[i] = list1.count(i)\n    return d\n",
        "test": "assert     freq_count([1,2,3,1]) == {1:2, 2:1, 3:1}",
        "num_ids": 341
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # get nums\n    nums = []\n    for i in range(1, N + 1):\n        nums.append(i)\n    # get sub nums\n    sub_nums = []\n    for i in range(1, N):\n        sub_nums.append(i)\n    # find\n    for i in range(0, len(sub_nums)):\n        sub_nums[i] = N - sub_nums[i]\n    # sort\n    sub_nums.sort()\n    # reverse\n    sub_nums.reverse()\n    # find\n    for i in range(0, len(sub_nums)):\n        if sub_nums[i]!= sub_nums[i - 1]:\n            return sub_nums[i]\n        if sub_nums[i] == sub_nums[-1]:\n            return sub_nums[0]\n",
        "test": "assert     closest_num(9) == 8",
        "num_ids": 463
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)\n",
        "test": "assert     len_log([\"python\", \"program\", \"python\"]) == 7",
        "num_ids": 255
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for str2 in str1:\n        if sub_str in str2:\n            return True\n    return False\n",
        "test": "assert     find_substring('hello world', 'h') == True",
        "num_ids": 200
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    length = len(s)\n    for i in range(1, length):\n        if int(s[i]) - int(s[i - 1])!= 0:\n            return False\n    return True\n",
        "test": "assert     is_undulating(3) == True, 'is_undulating(3) is True'",
        "num_ids": 232
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert     power(2,3) == 8, \"power(2,3) == 8 failed\"",
        "num_ids": 82
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert     index_minimum([(1,2), (0,0), (5,2), (1,0)]) == 0",
        "num_ids": 332
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return min(len(x) for x in lst)\n    \nlst1 = [[1,2,3,4],[1,2,3],[1,2,3,4,5]]\nprint(Find_Min_Length(lst1))\n",
        "test": "assert     Find_Min_Length([[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,2,3,4,5,6]]) == 3",
        "num_ids": 435
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors.append(i)\n    return len(divisors)\n",
        "test": "assert     divisor(4) == 3",
        "num_ids": 183
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n",
        "test": "assert ",
        "num_ids": 552
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for x in numbers:\n        product = product * x\n    print(product/len(numbers))\n    return product/len(numbers)\n",
        "test": "assert     (multiply_num([0, 2, 3]) == 0)",
        "num_ids": 180
    },
    {
        "number": 99,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "test": "assert     decimal_to_binary(0) == \"0\"",
        "num_ids": 164
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    max_len = len(num_str)\n    mid_point = max_len // 2\n    if max_len % 2 == 1:\n        mid_point += 1\n    mid_chars = num_str[:mid_point]\n    mid_chars = list(reversed(mid_chars))\n    mid_chars = ''.join(mid_chars)\n    next_palindrome = num_str + mid_chars\n    return int(next_palindrome)\n",
        "test": "assert     next_smallest_palindrome(9) == 99",
        "num_ids": 503
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k-1]\n",
        "test": "assert     kth_element([1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 1) == 1",
        "num_ids": 417
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # camel_case = ''\n    # for i, c in enumerate(word):\n    #     if i == 0:\n    #         camel_case += c.capitalize()\n    #     else:\n    #         camel_case += c\n    # return camel_case\n",
        "test": "assert ",
        "num_ids": 239
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Insert your code here\n    # Fill in the the appropriate return values\n    # Consider the base cases\n    # The recurrence relation\n    if n == 1:\n        return 0\n    if m == 1:\n        return 0\n    if n == m:\n        return 1\n    if n == 0:\n        return 0\n    if m == 0:\n        return 0\n    # The function is a(n, m) = a(n-1, m) + a(n, m-1)\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "test": "assert     eulerian_num(3, 2) == 1",
        "num_ids": 394
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(sorted,input_list))\n",
        "test": "assert     sort_sublists([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\"]]",
        "num_ids": 221
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "test": "assert     count([False, False, False, False]) == 0, \"Test failed\"",
        "num_ids": 204
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return_list = []\n    for tuple_num in range(len(test_tup)):\n        return_list.append(test_tup[tuple_num] + test_list[tuple_num])\n    return return_list\n",
        "test": "assert     [('a', 'b', 'c'), ('x', 'y', 'z'), ('1', '2', '3')] == \\",
        "num_ids": 294
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 325
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.split('0')\n    count=0\n    for i in s:\n        if i[0]!='':\n            count+=len(i)\n        \n    return count\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    s = s.split('0')\n    count=0\n    for i in s:\n        if i[0]!='':\n            count+=len(i)\n        \n    return count\n    \ndef max_Rotations(s): \n    '''\n    Write a python function to find the number of characters of string rotation when rotating a string the given number of times. \n    '''\n    s = s.split('0')\n    s = list(filter(None, s))\n    count=0\n    for i in s:\n        if i[0]!='':\n            count+=len(i)\n        \n    return count\n    \ndef unique(s): \n    '''\n    Write a python function to return if a string has all unique characters.\n    '''\n    return len(set(s)) == len(s)\n    \ndef non_decreasing(s): \n    '''\n    Write a python function to return if a string is non-decreasing.\n    '''\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            return False\n    \n    return True\n    \ndef check_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically smallest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return min(non_dec_s)\n    \n    return \"\"\n    \ndef check_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically smallest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return min(non_dec_s)\n    \n    return \"\"\n    \ndef non_decreasing(s): \n    '''\n    Write a python function to return if a string is non-decreasing.\n    '''\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            return False\n    \n    return True\n    \ndef non_decreasing(s): \n    '''\n    Write a python function to return if a string is non-decreasing.\n    '''\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            return False\n    \n    return True\n    \ndef non_decreasing(s): \n    '''\n    Write a python function to return if a string is non-decreasing.\n    '''\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            return False\n    \n    return True\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return max(non_dec_s)\n    \n    return \"\"\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return max(non_dec_s)\n    \n    return \"\"\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return max(non_dec_s)\n    \n    return \"\"\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return max(non_dec_s)\n    \n    return \"\"\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return max(non_dec_s)\n    \n    return \"\"\n    \ndef longest_non_decreasing(s): \n    '''\n    Write a python function to return the lexicographically largest non-decreasing substring. If no non-decreasing substring exists, return an empty string \"\".\n    '''\n    s = list(s)\n    non_dec_s = []\n    for i in range(len(s)-1):\n        if s[i]>s[i+1]:\n            non_dec_s.append(s[i+1:])\n            \n    non_dec_s = [''.join(i) for i in non_dec_s]\n    if non_dec_s:\n        return ma",
        "test": "assert     (odd_Equivalent(\"1110110101\", 5) == 7), \"Check your function!\"",
        "num_ids": 321
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8]]\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8], [1, 2, 3, 4]]\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8]]\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8], [1, 2, 3, 4]]\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8]]\n    # nestedlist = [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8], [1, 2, 3, 4]]\n",
        "test": "assert     common_in_nested_lists([[1, 2, 5], [2], [3, 4]], [[1, 2, 3, 4], [2, 4], [3, 5]]) == [2, 4, 3], \"Wrong answer\"",
        "num_ids": 558
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('4') == True",
        "num_ids": 160
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i):\n            return False\n    return True\n",
        "test": "assert     empty_dit([{},{},{}])",
        "num_ids": 253
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "test": "assert     tuple_to_int((0,)) == 0",
        "num_ids": 254
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index in range(len(test_list)):\n        test_list[index] = list(map(float, test_list[index]))\n    return test_list\n",
        "test": "assert     (list_to_float([[1, 2.0, '3'], ['4', 5, '6.0']]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])",
        "num_ids": 545
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(' '))\n",
        "test": "assert     string_to_list(\"abc def\") == ['abc', 'def'], \"Check the correctness of string_to_list\"",
        "num_ids": 108
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    current_element = arr[0]\n    current_index = 0\n",
        "test": "assert ",
        "num_ids": 260
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if (abs(list1[i][0]*list1[j][1])>max_prod):\n                max_prod = abs(list1[i][0]*list1[j][1])\n    print(max_prod)\nlist1 = [(3, 4), (1, 2), (-2, 0), (0, 4), (0, -1)]\nmax_product_tuple(list1)\n",
        "test": "assert ",
        "num_ids": 484
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def divisors(n):\n        '''\n        Return a list of divisors of a number.\n        '''\n        divisors = []\n        for i in range(1, n//2+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n",
        "test": "assert     amicable_numbers_sum(10000) == 31626, 'Test failed'",
        "num_ids": 269
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "test": "assert ",
        "num_ids": 111
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    maxdiff = 0\n    for i in string:\n        if i == '1':\n            count1+=1\n        else:\n            count0+=1\n        if abs(count0-count1) > maxdiff:\n            maxdiff = abs(count0-count1)\n    return maxdiff\n",
        "test": "assert     find_length('10') == 1",
        "num_ids": 506
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = min(a,b)\n    y = max(a,b)\n    t = x\n    sum = 1\n",
        "test": "assert ",
        "num_ids": 119
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(2, 3) == 6",
        "num_ids": 172
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #split the words in the str\n    str_split = str.split()\n    #iterate through each word in the list\n    for word in str_split:\n        #if the word length is greater than n, print it out\n        if len(word) > n:\n            print(word)\n",
        "test": "assert     long_words(6, \"the quick brown fox jumps over the lazy dog\") == [\"the\", \"quick\", \"brown\", \"jumps\"]",
        "num_ids": 255
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sums = []\n    col_sums = []\n    diagonal_sums = []\n    for i in range(len(my_matrix)):\n        row_sum = 0\n        for j in range(len(my_matrix[i])):\n            row_sum += my_matrix[i][j]\n        row_sums.append(row_sum)\n    for j in range(len(my_matrix[0])):\n        col_sum = 0\n        for i in range(len(my_matrix)):\n            col_sum += my_matrix[i][j]\n        col_sums.append(col_sum)\n    for i in range(len(my_matrix)):\n        diagonal_sum = 0\n        if i == 0:\n            diagonal_sum += my_matrix[i][i]\n            diagonal_sum += my_matrix[i][len(my_matrix) - 1 - i]\n        else:\n            diagonal_sum += my_matrix[i][i - 1]\n            diagonal_sum += my_matrix[i][len(my_matrix) - 1 - i]\n        diagonal_sums.append(diagonal_sum)\n    row_sums.sort()\n    col_sums.sort()\n    diagonal_sums.sort()\n    # print(row_sums)\n    # print(col_sums)\n    # print(diagonal_sums)\n    if len(set(row_sums))!= 1 or len(set(col_sums))!= 1 or len(set(diagonal_sums))!= 1:\n        return False\n    # print(row_sums)\n    # print(col_sums)\n    # print(diagonal_sums)\n    return True\n",
        "test": "assert     magic_square_test([[1,2,3],[4,5,6],[7,8,9]]) == True",
        "num_ids": 908
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for num in nums:\n        dict[num] += 1\n    max_key = max(dict, key = dict.get)\n    return max_key\n",
        "test": "assert     max_occurrences([1, 2, 3, 1, 3, 3, 4, 3, 3]) == 3",
        "num_ids": 268
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels = set(vowels)\n    s = set(str1)\n    #print(vowels)\n    #print(s)\n    result = []\n    for i in s:\n        if i in vowels:\n            result.append(i)\n    result = ''.join(result)\n    print(result)\n",
        "test": "assert     reverse_vowels('leetcode') == 'leotcede', 'leetcode example'",
        "num_ids": 355
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "test": "assert     tup_string(('goodbye', 'world')) == 'goodbye,world'",
        "num_ids": 134
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_num = 0\n    for num in nums:\n        if num < 0:\n            negative_num += num\n    return negative_num\n",
        "test": "assert     sum_negativenum([]) == 0, \"Error\"",
        "num_ids": 294
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    return 1 + 6 * hexagonal_num(n - 1)\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 1595
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return (zeroes, non_zeroes)\n",
        "test": "assert     zero_count([1,0,0,1,0,1,0,3,0,0,0,0,0,0,0]) == [0.75,0.25]",
        "num_ids": 420
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n > 0): \n        if (n % 2 == 0): \n            print(n)\n            n = n / 2; \n        else: \n            break\n    return n == 1\nprint(is_Sum_Of_Powers_Of_Two(8))\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(12) == False, \"Incorrect output\"",
        "num_ids": 347
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "test": "assert     circle_circumference(0) == 0, \"Wrong result for circle_circumference(0)\"",
        "num_ids": 140
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    temp_list = []\n    for i in test_list:\n        for j in i:\n            temp_list.append(j)\n    return temp_list\n",
        "test": "assert     extract_singly([[1,2],[3,4,5]]) == [1,2,3,4,5]",
        "num_ids": 432
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "test": "assert     pancake_sort([7,5,6,4,3,2,1]) == [1,2,3,4,5,6,7]",
        "num_ids": 382
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_samepair([1,2,3],[4,5,6],[1,2,9]) == 0",
        "num_ids": 389
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n",
        "test": "assert     find_lists(()) ==     0",
        "num_ids": 225
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return (max(arr) - min(arr))\nprint(\"Input array:\")\nn=int(input())\narr=list(int(i) for i in input().strip().split(' '))[:n]\nprint(max_Abs_Diff(arr)",
        "test": "assert     max_Abs_Diff([5, 10, 70, 80, 200]) == 99",
        "num_ids": 333
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if (a*x + b) % n == 0:\n            return (x, int((a*x + b)/n))\n",
        "test": "assert ",
        "num_ids": 224
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n",
        "test": "assert     remove_elements([1, 3, 2, 1, 2], [1, 2]) == [3, 1, 2], \"remove_elements([1, 3, 2, 1, 2], [1, 2]) incorrect\"",
        "num_ids": 249
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    return n + sum_series(n-2)\n",
        "test": "assert     sum_series(1) == 1",
        "num_ids": 145
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s ** 2) / (4 * tan(pi / l))\n",
        "test": "assert     area_polygon(3, 4) == 24",
        "num_ids": 228
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return sum(divisors(n))==sum(divisors(n+1))\n",
        "test": "assert     div_sum(12) == False, \"Should be False\"",
        "num_ids": 246
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    chars_lower_case=list(\"abcdefghijklmnopqrstuvwxyz\")\n    chars_upper_case=list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    for i in range(len(str1)):\n        if str1[i].lower() in chars_lower_case:\n            count+=1\n        elif str1[i].lower() in chars_upper_case:\n            count+=1\n    return count\n",
        "test": "assert     count_char_position('a') == 1",
        "num_ids": 387
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count\n",
        "test": "assert     find_even_pair([1,3,5,7,9]) == 1, \"check if the pair has xor % 2 == 0, i.e. its xor is even\"",
        "num_ids": 316
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pow_ = 1\n    while pow_<n:\n        pow_ *= 2\n    return pow_\n",
        "test": "assert     (next_power_of_2(127) == 128)",
        "num_ids": 406
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # find the number of occurrences of x in list a\n    count = 0\n    for i in a:\n        if x == i:\n            count += 1\n    return count\n",
        "test": "assert     frequency([1,2,3,4,5,2,2,3], 2) == 3, 'Check the inputs and outputs.'",
        "num_ids": 227
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    try:\n        if m < 1 or n < 1 or m > len(list1) or n > len(list1):\n            return 0\n        else:\n            return sum(list1[m-1:n])\n    except TypeError:\n        return 0\n        \ndef find_range_list(list1, m, n):                                                                                                                                                                                                                \n    '''\n    Write a function to find the range of a given list between a particular range of indices.\n    '''\n    try:\n        if m < 1 or n < 1 or m > len(list1) or n > len(list1):\n            return None\n        else:\n            return list1[m-1:n]\n    except TypeError:\n        return None\n        \ndef mean_list(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to compute the mean value of a list of numbers.\n    '''\n    try:\n        if len(list1) == 0:\n            return 0\n        else:\n            return sum(list1)/len(list1)\n    except TypeError:\n        return 0\n    \ndef join_lists(list1, list2):                                                                                                                                                                                                                        \n    '''\n    Write a function to join two lists.\n    '''\n    try:\n        return list1 + list2\n    except TypeError:\n        return None\n    \ndef char_range(c1, c2):                                                                                                                                                                                                                        \n    '''\n    Write a function to return a list of characters from a given range.\n    '''\n    try:\n        return list(chr(c1) + chr(c2))\n    except TypeError:\n        return None\n    \ndef even_index_list(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to return only the even indexed elements of a list.\n    '''\n    try:\n        if len(list1) == 0:\n            return []\n        else:\n            return list1[::2]\n    except TypeError:\n        return None\n        \ndef triple_sum(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to return the sum of three consecutive elements in a list.\n    '''\n    try:\n        if len(list1) < 3:\n            return 0\n        else:\n            return sum(list1[0:3])\n    except TypeError:\n        return None\n        \ndef get_index_list(list1, m):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the element index from a list.\n    '''\n    try:\n        if m > len(list1) or m < 1:\n            return None\n        else:\n            return list1.index(m)\n    except TypeError:\n        return None\n        \ndef count_list(list1, m):                                                                                                                                                                                                                        \n    '''\n    Write a function to find the number of occurrences of an element in a list.\n    '''\n    try:\n        if m not in list1:\n            return 0\n        else:\n            return list1.count(m)\n    except TypeError:\n        return None\n        \ndef flatten_list(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to flatten a list.\n    '''\n    try:\n        return [y for x in list1 for y in x]\n    except TypeError:\n        return None\n        \ndef reverse_list(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to reverse the order of a list.\n    '''\n    try:\n        return list1[::-1]\n    except TypeError:\n        return None\n        \ndef list_common_elements(list1, list2):                                                                                                                                                                                                                        \n    '''\n    Write a function to return a list of common elements in two lists.\n    '''\n    try:\n        return list(set(list1).intersection(list2))\n    except TypeError:\n        return None\n        \ndef list_union(list1, list2):                                                                                                                                                                                                                        \n    '''\n    Write a function to return a list of all elements in both lists.\n    '''\n    try:\n        return list(set(list1).union(list2))\n    except TypeError:\n        return None\n    \ndef slice_list(list1, m, n):                                                                                                                                                                                                                        \n    '''\n    Write a function to slice a list.\n    '''\n    try:\n        return list1[m-1:n]\n    except TypeError:\n        return None\n        \ndef list_average(list1):                                                                                                                                                                                                                        \n    '''\n    Write a function to return the average value of a list of numbers.\n    '''\n    try:\n        if len(list1) == 0:\n            return 0\n        else:\n            return sum(list1)/len(list1)\n    except TypeError:\n        return 0\n",
        "test": "assert     sum_range_list([1, 3, 5], 0, 3) == 9, 'incorrect'",
        "num_ids": 343
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p=5*a\n    return p\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    a=pow(((5*a)/(4*math.tan(math.pi/5))),2)\n    return a\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from its length.\n    '''\n    a=pow(a,2)\n    return a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    a=4*a\n    return a\ndef radius_circle(a):\n    '''\n    Write a function to find the radius of a circle from its diameter.\n    '''\n    a=a/2\n    return a\ndef circumference_circle(a):\n    '''\n    Write a function to find the circumference of a circle from its radius.\n    '''\n    a=2*(math.pi)*a\n    return a\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    a=math.pi*pow(a,2)\n    return a\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube from its length.\n    '''\n    a=pow(a,3)\n    return a\ndef perimeter_cube(a):\n    '''\n    Write a function to find the perimeter of a cube from its length.\n    '''\n    a=6*a\n    return a\ndef area_cube(a):\n    '''\n    Write a function to find the area of a cube from its length.\n    '''\n    a=pow(a,2)\n    return a\ndef volume_cone(a):\n    '''\n    Write a function to find the volume of a cone from its length and radius.\n    '''\n    a=math.pi*a*pow(a/3,2)/3\n    return a\ndef perimeter_cone(a):\n    '''\n    Write a function to find the perimeter of a cone from its length and radius.\n    '''\n    a=2*math.pi*a+2*a*math.sqrt((pow(a,2)/3))\n    return a\ndef area_cone(a):\n    '''\n    Write a function to find the area of a cone from its length and radius.\n    '''\n    a=math.pi*a*pow(a/3,2)\n    return a\ndef volume_cylinder(a):\n    '''\n    Write a function to find the volume of a cylinder from its height and radius.\n    '''\n    a=a*pow(a/2,2)*math.pi\n    return a\ndef perimeter_cylinder(a):\n    '''\n    Write a function to find the perimeter of a cylinder from its height and radius.\n    '''\n    a=2*math.pi*a+2*math.pi*a*math.sqrt((pow(a,2)/3))\n    return a\ndef area_cylinder(a):\n    '''\n    Write a function to find the area of a cylinder from its height and radius.\n    '''\n    a=math.pi*pow(a,2)\n    return a\ndef area_sphere(a):\n    '''\n    Write a function to find the area of a sphere from its radius.\n    '''\n    a=4*math.pi*pow(a,2)\n    return a\ndef volume_sphere(a):\n    '''\n    Write a function to find the volume of a sphere from its radius.\n    '''\n    a=4/3*math.pi*pow(a,3)\n    return a\ndef distance_point_line(a,b,c,d):\n    '''\n    Write a function to find the distance between a point and a line.\n    '''\n    a=math.sqrt(pow(a-c,2)+pow(b-d,2))\n    return a\ndef distance_point_segment(a,b,c,d):\n    '''\n    Write a function to find the distance between a point and a line segment.\n    '''\n    a=math.sqrt(pow(c-a,2)+pow(d-b,2))\n    return a\ndef distance_point_point(a,b,c):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    a=math.sqrt(pow(a-c,2))\n    return a\ndef slope_point_line(a,b,c,d):\n    '''\n    Write a function to find the slope of a line from two points.\n    '''\n    a=b-d\n    b=a/2\n    c=c-a\n    d=c/2\n    a=a/2\n    a=b-a\n    a=a/c\n    return a\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle from its width and height.\n    '''\n    a=a*b\n    return a\ndef perimeter_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle from its width and height.\n    '''\n    a=2*(a+b)\n    return a\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle from the lengths of its sides.\n    '''\n    a=a*b/2\n    return a\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle from the lengths of its sides.\n    '''\n    a=a+b+c\n    return a\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram from the length of its sides.\n    '''\n    a=a*b\n    return a\ndef perimeter_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram from the length of its sides.\n    '''\n    a=2*(a+b)\n    return a\ndef area_trapezoid(a,b,c):\n    '''\n    Write a function to find the area of a trapezoid from the lengths of its sides.\n    '''\n    a=a+b\n    c=a+c\n    a=a*b/2\n    return a\ndef perimeter_trapezoid(a,b,c):\n    '''\n    Write a function to find the perimeter of a trapezoid from the lengths of its sides.\n    '''\n    a=a+b+c\n    a=a-2*(a/2)\n    return a\ndef area_kite(a):\n    '''\n    Write a function to find the area of a kite from its length.\n    '''\n    a=math.sqrt(3)*a\n    return a\ndef circumference_kite(a):\n    '''\n    Write a function to find the circumference of a kite from its length.\n    '''\n    a=a*4\n    return a\ndef area_rhombus(a):\n    '''\n    Write a function to find the area of a rhombus from the length of its sides.\n    '''\n    a=a*a\n    return a\ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a rhombus from the length of its sides.\n    '''\n    a=4*a\n    return a\ndef area_kite_b(a,b,c):\n    '''\n    Write a function to find the area of a kite with its length and radius.\n    '''\n    a=a*math.sqrt(3)/2\n    return a\ndef circumference_kite_b(a,b,c):\n    '''\n    Write a function to find the circumference of a kite with its length and radius.\n    '''\n    a=2*math.pi*(a+b)\n    return a\ndef area_rectangle_b(a,b,c):\n    '",
        "test": "assert     perimeter_pentagon(4) == 20, \"Length of a pentagon is 4\"",
        "num_ids": 185
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('std') == 1, \"ERROR\"",
        "num_ids": 261
    },
    {
        "number": 222,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = [int(item) if isinstance(item, int) or isinstance(item, float) else item for item in test_tuple]\n    return all(isinstance(item, type(test_list[0])) for item in test_list)\n",
        "test": "assert     check_type(('a', 2, 4.5)) == False,'should be False'",
        "num_ids": 254
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n-1\n    mid = 0\n    \n    while i < j:\n        mid = i + (j-i)//2\n        \n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n            \n    if i < n and arr[i] == x:\n        return True\n    return False\n    \n    \n    # if x in arr:\n    #     return True\n    # return False\n",
        "test": "assert     is_majority([1, 2, 2, 2, 3], 5, 2) == True",
        "num_ids": 606
    },
    {
        "number": 224,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 157
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for i in range(len(str)):\n        if i%2 == 0:\n            lst.append(str[i])\n    return ''.join(lst)\n",
        "test": "assert     odd_values_string(\"PyThOn\") == \"PThOn\", \"Wrong output for 'PyThOn'\"",
        "num_ids": 312
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     (min_of_three(5, 3, 2) == 2)",
        "num_ids": 208
    },
    {
        "number": 228,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if(i & n!= 0):\n            return False\n    return True\n    \n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(10,3,6) == False, \"all_Bits_Set_In_The_Given_Range(10,3,6) failed\"",
        "num_ids": 397
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i, j = 0, 0\n    while j < n:\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        j += 1\n    return arr\n",
        "test": "assert     re_arrange_array([2, -3, -1, 6, 4, 7, -9, 8], 6) == [-3, -1, 2, 6, 4, 7, -9, 8]",
        "num_ids": 293
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert     replace_blank('salam alek','') =='salamalek', 'Check the second example'",
        "num_ids": 186
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result=[]\n    for i in range(n):\n        result.append(max(list1))\n        list1.remove(max(list1))\n    return result\n",
        "test": "assert     larg_nnum([5, 1, 4, 2, 3], 3) == [5, 4, 3], larg_nnum([5, 1, 4, 2, 3], 3)",
        "num_ids": 313
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    return math.pi*r*r + 2*math.pi*r*h\n",
        "test": "assert     lateralsuface_cylinder(5,10) == 166, 'Oops, something is wrong'",
        "num_ids": 292
    },
    {
        "number": 234,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert     volume_cube(3) == 27, \"This should be a cube, but it is not\"",
        "num_ids": 149
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n | (n >> 1)\n    n = n & 0x55555555\n    n = n | (n >> 2)\n    n = n & 0x33333333\n    n = n | (n >> 4)\n    n = n & 0x0f0f0f0f\n    return n\n",
        "test": "assert     even_bit_set_number(0) == 0x0",
        "num_ids": 222
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Your code here\n    dictionary = {}\n    for item in test_list:\n        if item not in dictionary.keys():\n            dictionary[item] = 1\n        else:\n            dictionary[item] += 1\n    return dictionary\n",
        "test": "assert     check_occurences([('a', 1), ('b', 2), ('c', 3), ('a', 4)]) == {('a', 1): 1, ('b', 2): 2, ('c', 3): 3}",
        "num_ids": 415
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    n = len(str) \n    \n    for i in range(n): \n        for j in range(i, n): \n            subs = str[i:j+1] \n            count = count + 1\n    return count\n",
        "test": "assert     number_of_substrings('abc') == 6",
        "num_ids": 328
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return math.factorial(m+n)//(math.factorial(m)*math.factorial(n))\n",
        "test": "assert     get_total_number_of_sequences(20, 3) == 20",
        "num_ids": 226
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n",
        "test": "assert     replace_list([1,2,3,4], [4,5,6,7]) == [1,2,3,7]",
        "num_ids": 403
    },
    {
        "number": 242,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count+=1\n    return count\n",
        "test": "assert count_charac('world') == 5",
        "num_ids": 162
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    start = int(math.sqrt(N))\n    if math.sqrt(N) == start:\n        return (2*start + 1)**2\n    else:\n        return (start+1)**2\n        \ndef HCF_and_LCM(A, B):\n    '''\n    Write a Python program to compute the HCF and LCM of two numbers.\n    '''\n    \n    num1=int(A)\n    num2=int(B)\n    \n    while num1>0 and num2>0:\n        if num1>num2:\n            num1=num1-num2\n        else:\n            num2=num2-num1\n    print(num1)\n    print(num2)\n    print(num1*num2)\n    \ndef sum_of_digits(num):\n    '''\n    Write a Python function that takes a positive integer and returns the sum of the absolute \n    differences of all the pairs of its digits.\n    '''\n    \n    x=str(num)\n    sum=0\n    for i in range(0,len(x)):\n        for j in range(i+1,len(x)):\n            sum=sum+abs(int(x[i])-int(x[j]))\n    return sum\n    \ndef prime_or_not(num):\n    '''\n    Write a Python program to check whether a given number is a prime number or not.\n    '''\n    if num>1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n    \ndef lcm(num1,num2):\n    '''\n    Write a Python program to compute the L.C.M. of two input number.\n    '''\n    \n    x=num1\n    y=num2\n    while num2!=0:\n        temp=num2\n        num2=num1%num2\n        num1=temp\n    return num1\n    \ndef fibonacci(num):\n    '''\n    Write a Python program to generate the Fibonacci Sequence.\n    '''\n    \n    print(0)\n    if num<1:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        return fibonacci(num-1)+fibonacci(num-2)\n        \ndef fibonacci_even(num):\n    '''\n    Write a Python program to generate the even Fibonacci Sequence.\n    '''\n    \n    x=1\n    y=0\n    \n    if num<1:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        while num>=2:\n            y=x+y\n            x=y\n            num=num-1\n    return y\n    \ndef fibonacci_odd(num):\n    '''\n    Write a Python program to generate the odd Fibonacci Sequence.\n    '''\n    \n    x=0\n    y=1\n    \n    if num<1:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        while num>=2:\n            x=y\n            y=x+y\n            num=num-1\n    return x\n    \ndef check_armstrong_or_not(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    while x>0:\n        y=num%10\n        sum=sum+(y**x)\n        num=num//10\n        x=x-1\n    if num==sum:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \ndef check_armstrong_or_not_v2(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    def sum_of_digit(num):\n        return sum(int(i) for i in str(num))\n    \n    x=len(str(num))\n    sum=0\n    while x>0:\n        y=num%10\n        sum=sum+(y**x)\n        num=num//10\n        x=x-1\n    if num==sum:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v3(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v4(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v5(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v6(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v7(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef check_armstrong_or_not_v8(num):\n    '''\n    Write a Python program to check whether a number is Armstrong number or not. Using function.\n    '''\n    \n    x=len(str(num))\n    sum=0\n    y=num\n    while x>0:\n        y=y%10\n        sum=sum+math.pow(y,x)\n        x=x-1\n    if sum==num:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \ndef is_leap_year(year):\n    '''\n    Write a Python program to check whether a year is a leap year or not.\n    '''\n    \n    if year%4==0 and year%100!=0 or year%400==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \ndef check_palindrome(num):\n    '''\n    Write a Python program to check whether a number is a palindrome or not.\n    '''\n    \n    num1=num\n    num2=0\n    while num1>0:\n        num2=num2*10+num1%10\n        num1=num1//10\n    if num1==num2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "test": "assert     next_Perfect_Square(3) == 4, \"next_Perfect_Square(3) is wrong\"",
        "num_ids": 280
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n",
        "test": "assert max_sum([2, 5, 8, 8, 10, 12, 2, 3, 1, 5]) == 29",
        "num_ids": 333
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (number+1)//2\n    while x!= y:\n        x = (x + y) // 2\n        y = (x + y) // 2\n    return x\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 174
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    \n    T = [[False for i in range(n)] for j in range(n)] \n    \n    \n    #Table is symmetrical, so only need to compute half\n    for i in range(n): \n        T[i][i] = True\n",
        "test": "assert ",
        "num_ids": 347
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n",
        "test": "assert     harmonic_sum(1) == 1, 'input = 1, output should be 1.'",
        "num_ids": 157
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [i for i in array_nums1 if i in array_nums2]\n",
        "test": "assert     intersection_array([1,2,2,1],[2,2]) == [2,2]",
        "num_ids": 207
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "test": "assert     count_X((1,2,3,2,3,3,4), 3) == 3",
        "num_ids": 240
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #new_list = []\n    #for index in range(len(list)):\n        #new_list.append(element)\n        #new_list.append(list[index])\n    #return new_list\n    return [element] + list\n",
        "test": "assert     insert_element([1,2,3],0) == [0,1,2,3], \"Failed\"",
        "num_ids": 2228
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    tot = len(numbers)\n    x = 0\n    y = 0\n    r = 0\n    p = 0\n    for i in range(0,tot):\n        r = cmath.polar(numbers[i])\n        print(\"The converted numbers are:\")\n        print(r)\n        x = r[0]\n        y = r[1]\n        p = cmath.phase(numbers[i])\n        print(\"The converted phase is:\")\n        print(p)\n        ",
        "test": "assert     convert([2j, 2 + 4j, 0]) == ([2.23606797749979, 2.23606797749979, 6.283185307179586], [0.7853981633974483, 0.7853981633974483, 0.0]), \"Wrong answer\"",
        "num_ids": 2484
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count\n",
        "test": "assert     count_integer([1,2,3,4,5,6]) == 6",
        "num_ids": 256
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # start with an empty list\n    lst = []\n    # loop over all possible combinations\n    for comb in combinations_with_replacement(l, n):\n        # append each combination to the list\n        lst.append(comb)\n    # return the list of combinations\n    return lst\n",
        "test": "assert     set(combinations_colors(['red', 'blue', 'green'], 3)) ==     set([('red','red','red'), ('red', 'blue', 'blue'), ('red', 'green', 'green'), ('blue', 'blue', 'blue'), ('blue', 'green', 'green'), ('green', 'green', 'green')])",
        "num_ids": 361
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 237
    },
    {
        "number": 257,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # print(a,b)\n    return(b,a)\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 114
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1), max(test_tup2)\n",
        "test": "assert     maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 302
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1: return \"n must be positive integer.\"\n    else:\n        if n == 1: return 2\n        else:\n            result = [2]\n            i = 1\n            while len(result) < n:\n                a = result[-1]\n                b = (a + 1) % 6\n                result.append(b)\n            return result[n - 1]\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 250
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x / y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     (division_elements( (1, 2, 3, 4), (1, 2, 3, 4) ) == (1, 1, 1, 1) ), \"check the function for division_elements!\"",
        "num_ids": 300
    },
    {
        "number": 262,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    len_list = len(list1)\n    index_L = len_list//2\n    \n    #print(\"index_L: \", index_L)\n    \n    if index_L == 0:\n        print(\"Error: L is too large.\")\n        return\n    elif index_L > L:\n        print(\"Error: L is too small.\")\n        return\n    else:\n        part1 = list1[0:index_L]\n        part2 = list1[index_L:len_list]\n        #print(\"part1: \", part1)\n        #print(\"part2: \", part2)\n        return part1, part2\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == ([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])",
        "num_ids": 604
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        dog_age = h_age * 10.5\n    else:\n        dog_age = 21 + (h_age - 2) * 4\n    return dog_age\n",
        "test": "assert ",
        "num_ids": 148
    },
    {
        "number": 265,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    print('\\n')\n    print(\"Question 9\")\n    print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\")\n    print('\\n')\n    my_list = [2,5,7,11,13,3,13,15,20,6,13]\n    result = list_split(my_list, 3)\n    print(result)\n",
        "test": "assert ",
        "num_ids": 165
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    #side is the side length of the cube\n    side = l\n    #calculate lateral surface area by multiplying side length with 6\n    lateral_surface_area = 6 * side ** 2\n    return lateral_surface_area\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 217
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum=sum+i*i\n    return sum\n    \n",
        "test": "assert     square_Sum(5) == 32",
        "num_ids": 199
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 0 \n    for i in range(n):\n        result += (3 * i) + 1\n    return result\n",
        "test": "assert     find_star_num(2) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 257
    },
    {
        "number": 269,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 59
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index_sum = 0\n    for index, value in enumerate(arr):\n        if index % 2 == 0 and value % 2 == 0:\n            even_index_sum += value\n    return even_index_sum\n",
        "test": "assert     sum_even_and_even_index([1,3,2,6,4,8,10]) == 4",
        "num_ids": 364
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += (i**5)\n    return sum\n",
        "test": "assert     even_Power_Sum(0)     == 0,         \"Expected even_Power_Sum(0) to be 0\"",
        "num_ids": 219
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_of_tuples = test_list\n    list_of_rears = []\n    for tuple in list_of_tuples:\n        list_of_rears.append(tuple[1])\n    return list_of_rears\n",
        "test": "assert     rear_extract([(2,3),(2,3),(2,3)]) == [3, 3, 3], 'incorrect'",
        "num_ids": 388
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple( (x - y) for x, y in zip(test_tup1, test_tup2))\n    else:\n        raise ValueError('Not possible to substract')\n",
        "test": "assert     substract_elements((2,3), (1,2,3)) == (1,0,0)",
        "num_ids": 300
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([ int(i/2) * math.factorial(i) / math.factorial(i-2) for i in range(2, n+1, 2)])\n",
        "test": "assert     even_binomial_Coeff_Sum(8) == 20",
        "num_ids": 244
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi*(r**2)*h\n",
        "test": "assert     volume_cylinder(1, 3) == 14.78497326206801, \"The volume is incorrect\"",
        "num_ids": 190
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered[key] = value\n    return filtered\n",
        "test": "assert     dict_filter({'a':3,'b':2,'c':7},7) == {'c':7}",
        "num_ids": 282
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # HINT: Use a single for loop\n    list_of_tuples = []\n    for i in test_tup:\n        list_of_tuples.append(i)\n    print(list_of_tuples)\n    list_of_indexes = []\n    for index, element in enumerate(list_of_tuples):\n        if element == '1':\n            list_of_indexes.append(index)\n    print(list_of_indexes)\n    \n    def list_of_tuples_function(list_of_indexes):\n        list_of_tuples_with_lengths = []\n        for index in list_of_indexes:\n            list_of_tuples_with_lengths.append(len(list_of_tuples[:index]))\n        print(list_of_tuples_with_lengths)\n        return list_of_tuples_with_lengths\n    \n    return list_of_tuples_function(list_of_indexes)\n    \n    \n",
        "test": "assert count_first_elements(((1, 2, 3, 3), (2, 3), (1, 2, 3), (2, 3, 4))) == (2, 1, 0, 2)",
        "num_ids": 425
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(10*n-n+1)/2)\n",
        "test": "assert     is_num_decagonal(2)         == 9",
        "num_ids": 178
    },
    {
        "number": 280,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    dlist_size = len(dlist)\n    for index in range(dlist_size):\n        if dlist[index] == item:\n            return (True, index)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1,2,3,4,5], 1) == (True, 0)",
        "num_ids": 322
    },
    {
        "number": 281,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # start writing your code here\n    return len(test_list) == len(set(test_list))\n    \ndef main():\n    print(\"### check for unique ###\")\n    test_list = [1,3,5,4,1]\n    print(all_unique(test_list))\n    test_list = [1,3,5,4,4]\n    print(all_unique(test_list))\n    test_list = [1,3,5,4,2]\n    print(all_unique(test_list))\n    test_list = [1,3,5,4]\n    print(all_unique(test_list))\n    test_list = [1,3,5,2]\n    print(all_unique(test_list))\n    test_list = []\n    print(all_unique(test_list))\n",
        "test": "assert     all_unique([1, 2, 3, 4]) == True",
        "num_ids": 483
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n",
        "test": "assert sub_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]",
        "num_ids": 2149
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    x = len(str(n))\n    d = {}\n    for i in range(x):\n        if str(n)[i] in d:\n            d[str(n)[i]] = d[str(n)[i]]+1\n        else:\n            d[str(n)[i]] = 1\n    for i in d:\n        if d[i] > int(i):\n            return False\n    return True\n",
        "test": "assert     validate(12345) == True",
        "num_ids": 581
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([x==element for x in list])\n",
        "test": "assert     check_element([1, 1, 1],1) == True",
        "num_ids": 102
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'.*ab{2,3}.'\n    result = re.match(pattern, text) is not None\n    return result\n",
        "test": "assert     text_match_two_three('text') == False",
        "num_ids": 234
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    max_sum = 0\n    for i in range(0, n):\n        sum = 0\n        for j in range(i, i+k):\n            if j >= n:\n                break\n            sum += a[j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n",
        "test": "assert ",
        "num_ids": 2312
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squares = []\n    for i in range(n+1):\n        squares.append(i**2)\n    print(squares)\n    return sum(squares)\n",
        "test": "assert     (square_Sum(2) == 1 + 4), \"Test failed\"",
        "num_ids": 189
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "test": "assert     max_length([[1,2,3,4,5,6,7],[8,9,10]]) == 8",
        "num_ids": 461
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for x in range(k + 1)] for y in range(n)]\n",
        "test": "assert     count_no_of_ways(5, 4) == 4",
        "num_ids": 247
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q=n//m\n    return q\n",
        "test": "assert     find(5, 3) == 1",
        "num_ids": 109
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #return 2*(w**2+h**2)**0.5\n    return (w**2+h**2)**0.5\n",
        "test": "assert     otherside_rightangle(3,4) == 5",
        "num_ids": 262
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if isinstance(i, int):\n            if max_val == None:\n                max_val = i\n            elif i > max_val:\n                max_val = i\n    return max_val\n",
        "test": "assert     max_val([5,3,1,9]) == 9",
        "num_ids": 281
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 0:\n        return False\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        sum = 1\n        for i in range(2, number):\n            if number % i == 0:\n                sum = sum + i\n        return sum\n",
        "test": "assert     sum_div(1)     == 1",
        "num_ids": 214
    },
    {
        "number": 296,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversion_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] > arr[j]):\n                inversion_count += 1\n    return inversion_count\n",
        "test": "assert     get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 327
    },
    {
        "number": 297,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    l = []\n    for e in list1:\n        if type(e) == list:\n            l += flatten_list(e)\n        else:\n            l.append(e)\n    return l\n",
        "test": "assert     flatten_list([1, [2, 3, [4, 5]]]) == [1, 2, 3, 4, 5]",
        "num_ids": 313
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    data = defaultdict(int)\n    for k,v in stdata:\n        data[k] = max(data[k],v)\n    return data\n",
        "test": "assert ",
        "num_ids": 167
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # array of size 2n to store the counts of first and last n bits respectively \n    # ans[i] is the total number of sequences of length 2n and beginning and ending with i-th bits are of same sum. \n    ans = [0] * (1 << n * 2) \n    ans[0] = 1\n    for mask in range(1 << n * 2): \n        # remove the first and last n bits from mask to make a sum \n        x = sum((mask & (1 << i)) >> i for i in range(n * 2)) \n        y = sum((mask & (1 << (n * 2 - i - 1))) >> (n * 2 - i - 1) for i in range(n * 2))\n        total = ans[mask]\n        if x == y: \n            ans[mask] = total + 1\n        else: \n            ans[mask] = total \n    return sum(ans) \n",
        "test": "assert     count_binary_seq(2) == 2",
        "num_ids": 414
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert     dict_depth({1: {2: {3: 4}}}) == 3",
        "num_ids": 222
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr)) :\n        for j in range(len(ranges)) :\n            if ranges[j][0] <= i <= ranges[j][1] :\n                rotations[j] = i\n                break\n    return rotations\n",
        "test": "assert     find_Element(arr = [10, 20, 30, 40, 50], ranges = 3, rotations = 2, index = 1) == 20",
        "num_ids": 510
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    a = re.compile('^p', re.I)\n    b = [i for i in words if a.match(i)]\n    return b\n",
        "test": "assert     start_withp(['poop','ponny','push','pish']) == ['ponny','push']",
        "num_ids": 283
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == k or k > n:\n        return 0\n    if k == n:\n        return max(a[0:k])\n    if index == n:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    if k < n:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), \\\n            max_sum_increasing_subseq(a, n, index + 1, k))\n",
        "test": "assert     max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 6, 4, 2) == 105",
        "num_ids": 517
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[m*n],tuplex[m*n+1],tuplex[m*n+2],tuplex[m*n+3],tuplex[m*n+4],tuplex[m*n+5],tuplex[m*n+6],tuplex[m*n+7])\n",
        "test": "assert     colon_tuplex((10,20,30),2,2)     == (20,30)",
        "num_ids": 484
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    max_prod_val = 1\n    max_prod_idx = 0\n",
        "test": "assert ",
        "num_ids": 453
    },
    {
        "number": 309,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(5,10) == 10",
        "num_ids": 115
    },
    {
        "number": 310,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = []\n    for i in str1:\n        tuple1.append(i)\n    return tuple(tuple1)\n",
        "test": "assert     string_to_tuple(\"abcd\") == (\"a\",\"b\",\"c\",\"d\"), \"Error\"",
        "num_ids": 290
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(1,n):\n        if (1 & ~n) == 1:\n            return 1\n        else:\n            n += n\n    return n\n",
        "test": "assert     set_left_most_unset_bit(2) == 2",
        "num_ids": 193
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*(r**2)*h/3\n    return volume\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area=math.pi*(r**2)+math.pi*r*h\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume=math.pi*(r**2)*h\n    return volume\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area=2*math.pi*r*(r+h)\n    return area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume=4/3*math.pi*(r**3)\n    return volume\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area=4*math.pi*(r**2)\n    return area\ndef area_prism(base,height,top_face=True):\n    '''\n    Write a function to find the surface area of a prism.\n    If the top_face parameter is set to True, the surface area\n    will be that of the top face. If it is set to False, then\n    it will be the surface area of the base.\n    '''\n    if top_face==True:\n        return base*height\n    elif top_face==False:\n        return 2*base*height\n    else:\n        return 'Invalid parameter value.'\ndef volume_prism(base,height,top_face=True):\n    '''\n    Write a function to find the volume of a prism.\n    If the top_face parameter is set to True, the volume\n    will be that of the top face. If it is set to False, then\n    it will be the volume of the base.\n    '''\n    if top_face==True:\n        return base*height\n    elif top_face==False:\n        return base*height\n    else:\n        return 'Invalid parameter value.'\ndef area_rectangle(length,width,top_face=True):\n    '''\n    Write a function to find the surface area of a rectangle.\n    If the top_face parameter is set to True, the surface area\n    will be that of the top face. If it is set to False, then\n    it will be the surface area of the base.\n    '''\n    if top_face==True:\n        return 2*length*width\n    elif top_face==False:\n        return 2*length*width\n    else:\n        return 'Invalid parameter value.'\ndef volume_rectangle(length,width,top_face=True):\n    '''\n    Write a function to find the volume of a rectangle.\n    If the top_face parameter is set to True, the volume\n    will be that of the top face. If it is set to False, then\n    it will be the volume of the base.\n    '''\n    if top_face==True:\n        return length*width\n    elif top_face==False:\n        return length*width\n    else:\n        return 'Invalid parameter value.'\ndef volume_cube(side):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return side**3\ndef area_cube(side):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*side**2\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    return 1/3*math.pi*(r**3)\ndef area_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere.\n    '''\n    return 2*math.pi*r\ndef area_triangle(base,height):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return base*height/2\ndef volume_triangle(base,height):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return base*height/3\ndef volume_parallelepiped(length,width,height):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return length*width*height\ndef area_parallelepiped(length,width,height):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    return 2*length*width+2*length*height+2*width*height\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*math.pi*(a*b*c)\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    return 4*math.pi*(a*b+a*c+b*c)\ndef volume_bivolume(r1,r2,h):\n    '''\n    Write a function to find the volume of a bivolume.\n    '''\n    return math.pi*(r1**2+r2**2)*h/3\ndef area_bivolume(r1,r2,h):\n    '''\n    Write a function to find the surface area of a bivolume.\n    '''\n    return 2*math.pi*(r1+r2)*h\ndef area_kite(side1,side2):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return 2*side1*side2\ndef volume_kite(side1,side2):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    return 1/2*side1*side2\ndef area_dodecagon(side):\n    '''\n    Write a function to find the surface area of a dodecagon.\n    '''\n    return 12*side**2\ndef volume_dodecagon(side):\n    '''\n    Write a function to find the volume of a dodecagon.\n    '''\n    return 1/3*math.sqrt(5)*side**3\ndef area_france(radius,height):\n    '''\n    Write a function to find the surface area of a france.\n    '''\n    return math.pi*radius**2+math.pi*radius*height\ndef volume_france(radius,height):\n    '''\n    Write a function to find the volume of a france.\n    '''\n    return radius**2*height\ndef volume_pyramid(side,top_face=True):\n    '''\n    Write a function to find the volume of a pyramid.\n    If the top_face parameter is set to True, the volume\n    will be that of the top face. If it is set to False, then\n    it will be the volume of the base.\n    '''\n    if top_face==True:\n        return 1/3*math.sqrt(2)*side**3\n    elif top_face==False:\n        return 1/3*side**3\n    else:\n        return 'Invalid parameter value.'\ndef area_pyramid(side,top_face=True):\n    '''\n    Write a function to find the surface area of a pyramid.\n    If the top_face parameter is set to True, the surface area\n    will be that of the top face. If it is set to False, then\n    it will be the surface area of the base.\n    '''\n    if top_face==True:\n        return 3*side**2+math.sqrt(2)*side**2\n    elif top_face==False:\n        return 3*side**2\n    else:\n        return 'Invalid parameter value.'\ndef volume_scaled_cube(side):\n    '''\n    Write a function to find the volume of a scaled cube.\n    '''\n    return side**3\ndef area_scaled_cube(side):\n    '''\n    Write a function to find the surface area of a scaled cube.\n    '''\n",
        "test": "assert     volume_cone(3,0)==0",
        "num_ids": 149
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**int(math.log(n,2))\n",
        "test": "assert     highest_Power_of_2(10) == 8, \"Wrong answer\"",
        "num_ids": 244
    },
    {
        "number": 389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n",
        "test": "assert     find_lucas(2) == 3",
        "num_ids": 113
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string % item for item in list_]\n    return list_\n",
        "test": "assert     add_string([1, 2, 3, 4], \"My name is {0} and I am {1} years old.\") == \\",
        "num_ids": 210
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dic = {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}\n    return dic\n",
        "test": "assert ",
        "num_ids": 372
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    for i in range(n, 1, -1):\n        nums = [int(n) for n in str(i)]\n        if (i % 2 == 0):\n            nums = [int(n) for n in str(i/2)]\n        elif (i % 3 == 0):\n            nums = [int(n) for n in str(i/3)]\n        elif (i % 4 == 0):\n            nums = [int(n) for n in str(i/4)]\n        elif (i % 5 == 0):\n            nums = [int(n) for n in str(i/5)]\n        if (sum(nums) > i):\n            return i\n    return 1\n",
        "test": "assert     get_max_sum(1) == 1, \"Test failed: get_max_sum(1) = {}\".format(get_max_sum(1))",
        "num_ids": 496
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    len_list = [len(i) for i in input_list]\n    return input_list[len_list.index(max(len_list))]\n",
        "test": "assert     max_length_list([]) == 'Empty list!'",
        "num_ids": 217
    },
    {
        "number": 394,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = []\n    for i in test_tup:\n        if i in unique_tup:\n            return False\n        else:\n            unique_tup.append(i)\n    return True\n",
        "test": "assert     check_distinct((1, 2, 3, 4, 5)) == True, 'wrong result'",
        "num_ids": 305
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for i in str1:\n        if dict1[i] == 1:\n            return i\n    return '_'\n",
        "test": "assert     first_non_repeating_character('first non repeating character') == 'f'",
        "num_ids": 360
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = string.strip()\n    if (string[0] == string[-1]) and (re.search(regex, string)):\n        return True\n    return False\n",
        "test": "assert check_char('aba')",
        "num_ids": 213
    },
    {
        "number": 397,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    elif a > c:\n        return a\n    elif b > c:\n        return c\n    else:\n        return b\n",
        "test": "assert     median_numbers(1,3,4) == 3, \"Wrong result\"",
        "num_ids": 286
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n",
        "test": "assert sum_of_digits([1,2,3]) == 6",
        "num_ids": 246
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    \n    \nif __name__ == '__main__':\n    print(bitwise_xor((1, 0, 1, 1), (1, 1, 0, 1)))\n    print(bitwise_xor((0, 0, 0, 1), (1, 1, 0, 1)))\n    ",
        "test": "assert     bitwise_xor((1, 2, 3, 4), (1, 2, 3, 4)) == (0, 0, 0, 0)",
        "num_ids": 419
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3), (4, 5, 6)]\n    #return 3\n    print('The list is :'+ str(test_list))\n    print('The number of unique tuples is :'+ str(len(set(test_list))))\n    return len(set(test_list))\n    #return len(set(test_list))\n",
        "test": "assert     extract_freq([(1, 1, 1), (1, 2, 3), (1, 2, 3)]) == 2, \"test failed\"",
        "num_ids": 536
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1)):\n            if i < len(test_tup2):\n                result.append(test_tup1[i] + test_tup2[i])\n            else:\n                result.append(test_tup1[i])\n    else:\n        for i in range(len(test_tup2)):\n            if i < len(test_tup1):\n                result.append(test_tup1[i] + test_tup2[i])\n            else:\n                result.append(test_tup2[i])\n",
        "test": "assert     (add_nested_tuples((\"element1\", (\"tuple1\", \"tuple2\", \"tuple3\", \"tuple4\")), (\"element2\", (\"tuple1\", \"tuple2\", \"tuple3\", \"tuple4\")) ) == (\"element1\", (\"tuple1\", \"tuple2\", \"tuple3\", \"tuple4\"), (\"element2\", (\"tuple1\", \"tuple2\", \"tuple3\", \"tuple4\"))) ), \"Wrong output\"",
        "num_ids": 576
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a if a<b else b\n    return min\n",
        "test": "assert     minimum(12,7) == 7",
        "num_ids": 143
    },
    {
        "number": 405,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex==tuple1: \n        return True \n    else: \n        return False \n",
        "test": "assert     check_tuplex((1,2,3,4,5),(1,3,4,5)) == False",
        "num_ids": 278
    },
    {
        "number": 406,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2!= 0): \n        return 1\n    else: \n        return 0\n",
        "test": "assert     find_Parity(5) == True",
        "num_ids": 132
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = [int(x) for x in str(n)]\n    i = len(arr) - 1\n    while i > 0 and arr[i - 1] >= arr[i]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(arr) - 1\n    while arr[j] <= arr[i - 1]:\n        j -= 1\n    arr[j], arr[i - 1] = arr[i - 1], arr[j]\n    arr[i:] = arr[len(arr) - 1:i - 1: -1]\n    return int(''.join(str(x) for x in arr))\n",
        "test": "assert     rearrange_bigger(12) == 21",
        "num_ids": 507
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1, nums2 = sorted(nums1), sorted(nums2)\n    output = []\n    heap = [(nums1[i] + nums2[0], i, 0) for i in range(len(nums1))]\n    heapq.heapify(heap)\n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        output.append([nums1[i], nums2[j]])\n        if j < len(nums2) - 1:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n    return output\n",
        "test": "assert     (k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1],[1, 1]])",
        "num_ids": 644
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append(min(list1[i][0]*list1[i][1],list1[j][0]*list1[j][1]))\n    return min(result)\n",
        "test": "assert     min_product_tuple([(1, 2), (3, 4)]) == 2, 'incorrect'",
        "num_ids": 466
    },
    {
        "number": 410,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'empty list'\n    minimum = listval[0]\n    for i in range(1, len(listval)):\n        if minimum > listval[i]:\n            minimum = listval[i]\n    return minimum\n",
        "test": "assert     min_val([1]) == 1",
        "num_ids": 220
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == \"\":\n        return word\n    else:\n        return word[0] + word.title().translate(None, \"-_\")[1:]\n",
        "test": "assert     snake_to_camel('snake_case_12') =='snakeCase12', 'wrong result'",
        "num_ids": 201
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "test": "assert     remove_odd([1, 2, 3, 4, 5, 7]) == [1, 3, 5, 7]",
        "num_ids": 322
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([(1,2),(3,4),(5,6)], 0) == (1,2)",
        "num_ids": 254
    },
    {
        "number": 414,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            return False\n",
        "test": "assert     overlapping([1,2,3], [4,5,6]) == False",
        "num_ids": 394
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    print(arr)\n    return arr[-1] * arr[-2]\n",
        "test": "assert     max_Product([-10, -20, -30, -40, -50]) == -600",
        "num_ids": 369
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)-1):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Output.append(Input[i][0])\n    return Output\n",
        "test": "assert ",
        "num_ids": 277
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in lst: \n        if len(i) > m:\n            m = len(i)\n            max_element = i\n    return max_element\n",
        "test": "assert     (Find_Max([1,2,3,4,5]) == 5) and (Find_Max([1,2,3,5]) == 5), 'Check the correctness of Find_Max'",
        "num_ids": 221
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #TODO\n    total = 0\n    for x in list1:\n        x = x + 0.5\n        x = round(x)\n        total += x\n    print(total * len(list1))\n",
        "test": "assert ",
        "num_ids": 186
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1,2)])\n",
        "test": "assert     cube_Sum(20) ==     1258291200",
        "num_ids": 183
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for i in test_tup:\n        res += str(i) + ','\n    return res[0:-1]\n",
        "test": "assert     concatenate_tuple(('hello',)) == 'hello'",
        "num_ids": 184
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1,n+1):\n        total_sum = total_sum + i**3\n    average = total_sum/n\n    return average\n",
        "test": "assert     find_Average_Of_Cube(5) ==     125",
        "num_ids": 215
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     (extract_rear(('Do', 'you', 'like', 'these', 'dishes?')) == 'dishes?'), \"Wrong Answer\"",
        "num_ids": 287
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count = count + 1\n    return count\n    \ndef sum_of_elements_in_list(list1):\n    '''\n    Write a function that computes the sum of the elements in a list.\n    '''\n    sum_of_list = 0\n    for element in list1:\n        sum_of_list = sum_of_list + element\n    return sum_of_list\n    \ndef calculate_midpoint(list1):\n    '''\n    Write a function that calculates the midpoint of a list.\n    '''\n    midpoint = len(list1) / 2\n    midpoint = int(midpoint)\n    return midpoint\n    \ndef calculate_min(list1):\n    '''\n    Write a function that calculates the minimum value in a list.\n    '''\n    return min(list1)\n",
        "test": "assert     count_element_in_list([[1, 2, 3], [1, 4], [1, 4, 2, 1]], 1) == 3",
        "num_ids": 395
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]",
        "num_ids": 344
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    split_string = dt.split(\"-\")\n    dd = split_string[2]\n    mm = split_string[1]\n    yyyy = split_string[0]\n    dd = str(dd).zfill(2)\n    mm = str(mm).zfill(2)\n    yyyy = str(yyyy)\n    new_date = \"-\".join([dd,mm,yyyy])\n    return new_date\n    \ndef test_change_date_format():\n    print(\"\\nTESTING CHANGE DATE FORMAT...\")\n    date = \"2019-03-19\"\n    new_date = change_date_format(date)\n    if new_date == \"19-03-2019\":\n        print(\"PASSED\")\n    else:\n        print(\"FAILED\")\n        \ntest_change_date_format()\n",
        "test": "assert     change_date_format('2019-02-03') == '03-02-2019'",
        "num_ids": 385
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Your code here\n    \n    #we first start from the first element and ignore the second last element as the previous insertion sort can already\n    #ensure that the elements are in sorted order before starting to sort the last element\n    n = len(my_list)\n    #we assume we know that the length of the list is at least 2\n    gap = n // 2\n    #to ensure we don't go out of bounds for the loop\n    gap = 1 if gap < 1 else gap\n    #we then start to increase the gap between each of the elements to allow for the insertion sort to sort\n    #larger elements faster\n    while gap > 0:\n        #for every element we're going to shift right, we start to shift left by the gap and do the same\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            #we move left until we hit a number that is greater than the current element\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            #once we hit the correct index, we place the element\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n    \n",
        "test": "assert     shell_sort([1,5,8,4,7,6,9,2,3]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'Shell Sort fail'",
        "num_ids": 1087
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup3 = ()\n    for i, j in zip(test_tup1, test_tup2):\n        tup3 = tup3 + (i & j,)\n    return tup3\n",
        "test": "assert     and_tuples((0,1),(0,0)) == (0,0), 'Wrong output'",
        "num_ids": 431
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(c/b)**(1/2)\n",
        "test": "assert ",
        "num_ids": 488
    },
    {
        "number": 431,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list2, list1 = list1, list2\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([], []) == False, \"If one list is empty, return False\"",
        "num_ids": 306
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(\"The median is:\",(base1 + base2)/2*height)\n",
        "test": "assert ",
        "num_ids": 132
    },
    {
        "number": 433,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number < i:\n            return False\n    return True\n",
        "test": "assert     check_greater([2,4,6,8], 6) == False, \"Test Failed\"",
        "num_ids": 144
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    exp = '.*[a]{1}[b]{1}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n    \ndef text_match_any(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    exp = '.*[a]{1}[b]{0,}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by zero or one c's.\n    '''\n    exp = '.*[a]{1}[b]{1}[c]{0,1}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by zero or one c's followed by one d.\n    '''\n    exp = '.*[a]{1}[b]{1}[c]{0,1}[d]{1}.*'\n    found = re.match(exp, text)\n    if found:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_one('ac') == False, 'Incorrect'",
        "num_ids": 259
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    return int(n[-1])\n",
        "test": "assert     last_Digit(1) == 1",
        "num_ids": 144
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n",
        "test": "assert     neg_nos([1, 2, 3, 4, 5]) == []",
        "num_ids": 207
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = \"Hello, World!\"\n    str1 = ''.join(i for i in str1 if not i in \"oox\")\n    print(str1)\n",
        "test": "assert     remove_odd('hello') == 'ell', 'incorrect'",
        "num_ids": 253
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(2, 5), (1, 2), (2, 3), (3, 2)]) == 1",
        "num_ids": 360
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L_string = ''\n    for number in L:\n        L_string = L_string + str(number)\n    return int(L_string)\n",
        "test": "assert     multiple_to_single([1,2,3,4,5,6,7,8]) == 12345678",
        "num_ids": 248
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = '(\\w+)\\W+(?:\\w+\\W+){1,}(adverb)'\n    for match in re.finditer(pattern, text):\n        result.append(match.group(0))\n    return result\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game. I hope you will have a great time in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\nprint(find_adverb_position('I hope that you will have a great time in the game. I hope that you will have fun in the game.'))\n",
        "test": "assert     find_adverb_position(\"I was not really hungry, I was just sick.\") == [('really', 12), ('really', 21)]",
        "num_ids": 856
    },
    {
        "number": 441,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    return 6 * (l ** 2)\n",
        "test": "assert     surfacearea_cube(3) == 54",
        "num_ids": 109
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = [num for num in nums if num > 0]\n    count = len(pos_nums)\n    return count / len(nums)\n",
        "test": "assert     positive_count([1,2,3,4,5,6,7,8,9,10,11,12]) == 0.5",
        "num_ids": 252
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_num = []\n    for i in list1:\n        if i < 0:\n            list_num.append(i)\n    return max(list_num)\n",
        "test": "assert     largest_neg([1, 2, 3, 4, 5, -5]) == -5",
        "num_ids": 282
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tuple in test_list:\n        new_tuple = tuple[0:K]\n        new_list.append(new_tuple)\n    return new_list\n",
        "test": "assert     trim_tuple([('Mon', 18, 20, 22, 19), ('Tue', 11, 18, 21, 18), ('Wed', 15, 21, 20, 19)], 2) == [('Tue', 11, 18, 21, 18), ('Wed', 15, 21, 20, 19)]",
        "num_ids": 594
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += ((test_tup1[i] * test_tup2[i]),)\n    return test_tup3\n",
        "test": "assert     index_multiplication((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 4, 9, 16)",
        "num_ids": 388
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for ele in lst:\n        if (ele in tup):\n            count += 1\n    return count\n",
        "test": "assert     count_Occurrence(('c', 'a', 't', 'c', 'o', 'n', 'c', 'a','s', 't', 'e', 'r', 'e', 'c', 'k','s', 'p', 'r', 'i', 'n', 'g
        "num_ids": 2307
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "test": "assert     cube_nums([1,2,3,4,5,6,7]) == [1, 8, 27, 64, 125, 216, 343], 'incorrect'",
        "num_ids": 277
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    while n!=0:\n        sum=sum+(n%10)*n\n        n=n//10\n    return sum\n",
        "test": "assert     cal_sum(0) == 0",
        "num_ids": 204
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) < l:\n        return str\n    return str[:l]\n",
        "test": "assert     extract_string(['a','b','c','d'], 1) == ['a']",
        "num_ids": 304
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #return re.sub(r'\\s+', '', text)\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert     remove_whitespaces('My name is John') == 'MynameisJohn', 'Error!'",
        "num_ids": 201
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(110,110)     == 0",
        "num_ids": 179
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,(int)(math.sqrt(n))+1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                sum = sum + i \n            else : \n                sum = sum + (i + n/i) \n    return sum\n",
        "test": "assert     sumofFactors(10) == 12, \"Wrong sumofFactors\"",
        "num_ids": 339
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # result = re.findall(r'\\s[aeiou]{2,}', text)\n    # print(result)\n    # print(len(result))\n    # print(result[0])\n    print(re.findall(r'\\b[aeiou]{2,}\\b', text))\n",
        "test": "assert     text_match_wordz('') == None, '''Your function should return None for the empty string.'''",
        "num_ids": 379
    },
    {
        "number": 455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n        return '31 days'\n    elif monthnum2 in (4, 6, 9, 11):\n        return '30 days'\n    elif monthnum2 == 2:\n        return '28 or 29 days'\n",
        "test": "assert     check_monthnumb_number(3) == True",
        "num_ids": 277
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in stringlist:\n        newlist.append(i[::-1])\n    return newlist\n",
        "test": "assert     reverse_string_list([\"abc\", \"def\", \"xyz\"]) == [\"cba\", \"fed\", \"zyx\"]",
        "num_ids": 258
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return [min(lst,key=len)] \n",
        "test": "assert     Find_Min(['b']) == ['b']",
        "num_ids": 436
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert     rectangle_area(4,2) == 8, \"rectangle_area(4,2) == 8\"",
        "num_ids": 132
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n    # return str1.translate(None, string.ascii_uppercase)\n",
        "test": "assert     remove_uppercase( \"CONGRATULATIONS\" ) == \"COngratulatons\", \"case 2 failed\"",
        "num_ids": 521
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "test": "assert     Extract([[1,2], [3,4], [5,6,7]]) == [1, 3, 5]",
        "num_ids": 163
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(map(str.isupper, str))\n",
        "test": "assert ",
        "num_ids": 122
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    temp = []\n    new_list = []\n    for i in range(len(list1)):\n        temp.append(list1[i])\n    print(temp)\n    print(list1)\n    print(list1[0])\n    if len(list1) == 1:\n        return list1\n    elif len(list1) == 2:\n        new_list.append(list1)\n        return new_list\n    else:\n        new_list = list1[0]\n        temp.pop(0)\n        while len(temp)!= 0:\n            if len(temp) == 1:\n                new_list.append(temp[0])\n                break\n            new_list = new_list + [temp[0]]\n            temp.pop(0)\n            print(temp)\n            print(new_list)\n            new_list = new_list + list1[len(new_list)]\n        print(new_list)\n        return new_list\n",
        "test": "assert     combinations_list([1,2,3,4]) == [",
        "num_ids": 686
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def max_crossing_product(left_array, right_array):\n        left_product = 1\n        right_product = 1\n        crossing_product = 1\n",
        "test": "assert     max_subarray_product([-2, 0, -1]) == 0",
        "num_ids": 2126
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    #your code here\n    \n    return True\n",
        "test": "assert     check_value({1:1, 2:2, 3:3}, 1) == True, \"this case should be True\"",
        "num_ids": 321
    },
    {
        "number": 465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return { key: val for key, val in dict1.items() if val }\n",
        "test": "assert ",
        "num_ids": 305
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    len_arr = len(arr)\n    dp = [[0 for i in range(len_arr+1)] for j in range(len_arr+1)]\n    for i in range(1, len_arr+1):\n        for j in range(1, len_arr+1):\n            if arr[j-1] < arr[i-1]:\n                dp[i][j] = max(dp[i][j-1], arr[j-1] * (i-1))\n            else:\n                dp[i][j] = max(dp[i-1][j], arr[i-1] * (i-1))\n    return dp[len_arr][len_arr]\n",
        "test": "assert     max_product([1,2,3,4,5]) ==     20",
        "num_ids": 505
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(x + y for x, y in zip(test_tup, test_tup[1:]))\n",
        "test": "assert     (add_pairwise(tuple(range(-10, -6))) == (-11, -10, -9, -8, -7, -6))",
        "num_ids": 404
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = prod * i % n\n    return prod\n",
        "test": "assert     find_remainder([1, 2, 3], 5) == 1",
        "num_ids": 281
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (max(l) - min(l) == len(l)-1)\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4]) == True, 'ERROR: Wrong output for check_Consecutive([1, 2, 3, 4])'",
        "num_ids": 500
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    unique = []\n    for element in test_list1:\n        if element in test_list2:\n            unique.append(element)\n    return unique\n",
        "test": "assert     tuple_intersection(['a', 'b', 'c'], ['b', 'd']) == ['b']",
        "num_ids": 445
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i,chr in enumerate(str1):\n        if chr == ch:\n            str1[i] = newch\n    str1 = ''.join(str1)\n    return str1\n",
        "test": "assert     replace_char('hello','h','j') == 'jello','replace_char test case 1 failed'",
        "num_ids": 212
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n",
        "test": "assert     sort_counter({'a': 5, 'b': 2, 'c': 1, 'd': 3, 'e': 4}) == ['d', 'e', 'b', 'c', 'a']",
        "num_ids": 375
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums is None:\n        return None\n    return sum(nums)-max(nums)-min(nums)\n",
        "test": "assert ",
        "num_ids": 193
    },
    {
        "number": 477,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if isinstance(string, str):\n        return string.lower()\n    else:\n        raise TypeError('please enter a string')\n",
        "test": "assert     is_lower(\"Helloworld\") == \"helloworld\", \"Not all lowercase\"",
        "num_ids": 128
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str_lst = list(str1)\n    i = 0\n    for i in range(len(str_lst)):\n        if str_lst[i].islower():\n            str_lst.pop(i)\n        elif str_lst[i].isupper():\n            str_lst.pop(i)\n            i -= 1\n        i += 1\n    return ''.join(str_lst)\n    \n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str_lst = list(str1)\n    i = 0\n    for i in range(len(str_lst)):\n        if str_lst[i].isupper():\n            str_lst.pop(i)\n            i -= 1\n        i += 1\n    return ''.join(str_lst)\n",
        "test": "assert     remove_lowercase('Heey HOW are you') == 'Heey WA rU'",
        "num_ids": 294
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "test": "assert     first_Digit(123456789) == 1",
        "num_ids": 106
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2!=0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     Split([1,2,3,4,5]) == [1,3,5], 'incorrect'",
        "num_ids": 349
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1,n+1) :\n        sum_of_nums = sum_of_nums + i\n        sum_of_cubes = sum_of_cubes + i**3\n    return sum_of_nums**2 - sum_of_cubes\n",
        "test": "assert ",
        "num_ids": 267
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            xor = A[i]^A[j]\n            if xor % 2 == 1 : \n                count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair([2,2,3,4,5], 10) == 4, \"Pairs with xor value 0\"",
        "num_ids": 302
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.lower() if x.isupper() else x.upper(), list(string)))\n",
        "test": "assert     toggle_string('Python') == 'pYTHON'",
        "num_ids": 260
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(a)-int(b)) for a,b in zip(str(n1),str(n2))])\n",
        "test": "assert     digit_distance_nums(12, 23) == 1, \"This is not the correct result\"",
        "num_ids": 705
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    curr_sum = max_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 8) == 6",
        "num_ids": 180
    },
    {
        "number": 560,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
        "test": "assert     (sorted(union_elements((1,2,3), (4,5,6))) == [1,2,3,4,5,6]), 'incorrect'",
        "num_ids": 374
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    len_lst = []\n    for i in lst:\n        len_lst.append(len(i))\n    return max(len_lst)\n",
        "test": "assert     Find_Max_Length([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1]]) == 4, \"Incorrect\"",
        "num_ids": 403
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    output = []\n    p = re.compile(r'\\\"(.*)\\\"')\n    for m in p.finditer(text):\n        output.append(m.group(1))\n    return output\n",
        "test": "assert     extract_values(\"I'm going to Germany this summer!\") ==    \"Germany this summer!\"",
        "num_ids": 2266
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if(arr[i]!=arr[j] and i<j):\n                count = count + 1\n    return count\n",
        "test": "assert     count_Pairs([1, 2, 3, 4, 5], 2) == 6",
        "num_ids": 313
    },
    {
        "number": 565,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 158
    },
    {
        "number": 566,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return (n % 10) + sum_digits(int(n / 10))\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 178
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\nprint(issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(issort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n",
        "test": "assert     issort_list([1,2,3,4,5]) == True",
        "num_ids": 279
    },
    {
        "number": 568,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert     empty_list(1) == [{}, {}]",
        "num_ids": 76
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(list1, list2):\n        if len(list1) == 0:\n            return list2\n        elif len(list1) == 1:\n            return list1\n        else:\n            for i in range(len(list1)):\n                for j in range(len(list1)):\n                    if len(list1[i]) > len(list1[j]):\n                        list1[i], list1[j] = list1[j], list1[i]\n                    elif len(list1[i]) == len(list1[j]):\n                        if list1[i] > list1[j]:\n                            list1[i], list1[j] = list1[j], list1[i]\n                    else:\n                        continue\n            return list1\n    if type(list1[0]) == list:\n        for i in range(len(list1)):\n            list1[i] = sort_sublist(list1[i], [])\n        return sort_sublist(list1, [])\n    else:\n        return list1\n",
        "test": "assert     sort_sublists([['b', 'c', 'a', 'd'], ['a', 'c', 'd', 'b'], ['c', 'a', 'b', 'd']]) == [['a', 'a', 'b', 'b'], ['b', 'c', 'c', 'd'], ['d', 'd', 'a', 'a']]",
        "num_ids": 407
    },
    {
        "number": 572,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_unique = set(nums)\n    print(nums_unique)\n    return list(nums_unique)\n",
        "test": "assert     two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"one\"",
        "num_ids": 278
    },
    {
        "number": 573,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for item in set(list_data):\n        result *= item\n    return result\n",
        "test": "assert     unique_product([1,2,3,4,5]) == 120",
        "num_ids": 264
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*h + 2*3.14*r**2\n    return surface_area\n",
        "test": "assert     surfacearea_cylinder(2,5) == 25, \"Wrong surface area of a cylinder\"",
        "num_ids": 211
    },
    {
        "number": 576,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A: \n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([1,2,3,4,5],    [2,4,5,1,3]) == False",
        "num_ids": 385
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1,n+1):\n        fact = fact * i\n    return fact % 10\n    \ndef is_BST(root, left = None, right = None):\n    if root:\n        return is_BST(root.left, left, root) and is_BST(root.right, root, right)\n        if left and right:\n            return left.data < root.data < right.data\n        else:\n            return left.data < root.data < right.data\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 357
    },
    {
        "number": 578,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for t in zip(list1,list2,list3) for item in t]\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 355
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    return [i for i in lst1 if i not in lst2]\n",
        "test": "assert     find_dissimilar((1,2,3,4),(4,1,2,3)) == (4, 1, 2, 3)",
        "num_ids": 601
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print('\\n# Even elements in tuple')\n    print('test_tuple:', test_tuple)\n    new_tuple = tuple(even_fnc(test_tuple, lambda x: x%2 == 0))\n    print('new_tuple:', new_tuple)\n",
        "test": "assert     even_ele(('a', 'b', ('c', 'd', 'e', 'f'), 'g', 'h', 'i', 'j')), ",
        "num_ids": 423
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n",
        "test": "assert ",
        "num_ids": 84
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    return True\n",
        "test": "assert     my_dict({}) ==     True, 'Test #1: Check if a empty dictionary is True'",
        "num_ids": 138
    },
    {
        "number": 583,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (catalan_number(num-1)*((4*num-2)*(num)+1))//(num+2)\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 311
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'ly\\b')\n    matches = pattern.findall(text)\n    if matches:\n        return matches\n    else:\n        return None\n    \ndef find_and_replace(text):\n    '''\n    Write a function to find and replace all the words with length greater than 2 in the given string with their length + 2.\n    '''\n    pattern = re.compile(r'\\b\\w{2,}')\n    matches = pattern.findall(text)\n    if matches:\n        for match in matches:\n            length = len(match)\n            text = text.replace(match, match + str(length+2))\n    return text\n",
        "test": "assert     find_adverbs(\"this is a string\") == None",
        "num_ids": 334
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_sorted = sorted(items,key=lambda x: x[1],reverse = True)\n    print(items_sorted[:n])\n",
        "test": "assert     expensive_items([{'name': 'pen', 'price': 5}, {'name': 'whiteboard', 'price': 170}, {'name': 'bike', 'price': 20}, {'name':'screwdriver', 'price': 10}], 2) == [{'name': 'whiteboard', 'price': 170}, {'name':'screwdriver', 'price': 10}], \"incorrect\"",
        "num_ids": 570
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n",
        "test": "assert ",
        "num_ids": 298
    },
    {
        "number": 587,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     (1, 2) == list_tuple([1, 2])",
        "num_ids": 295
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    big = nums[len(nums)-1]\n    small = nums[0]\n    diff = big - small\n    return diff\n    \ndef fizzbuzz(n):\n    '''\n    Write a python function to print fizz buzz if a number is divisible by 3 or 5 or both.\n    '''\n    if n % 3 == 0 and n % 5 == 0:\n        return 'fizzbuzz'\n    elif n % 3 == 0:\n        return 'fizz'\n    elif n % 5 == 0:\n        return 'buzz'\n    else:\n        return n\n    \ndef find_maximum(nums):\n    '''\n    Write a python function to return the maximum element of a given list of numbers.\n    '''\n    max = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n    return max\n    \ndef find_minimum(nums):\n    '''\n    Write a python function to return the minimum element of a given list of numbers.\n    '''\n    min = nums[0]\n    for i in nums:\n        if i < min:\n            min = i\n    return min\n    \ndef find_range(nums):\n    '''\n    Write a python function to return range of elements in a given list of numbers.\n    '''\n    return max(nums) - min(nums)\n    \ndef generate_random_num():\n    '''\n    Write a python function to generate and return a random number from the range 1 to 10.\n    '''\n    import random\n    return random.randint(1,10)\n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return s[::-1]\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    if s == reverse_string(s):\n        return True\n    else:\n        return False\n        \ndef check_double_letters(s):\n    '''\n    Write a python function to check whether a given string contains double letters or not.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n    if count >= 2:\n        return True\n    else:\n        return False\n    \ndef sum_even_numbers(nums):\n    '''\n    Write a python function to sum all the even numbers in a given list of numbers.\n    '''\n    even_sum = 0\n    for i in nums:\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n < 0:\n        return 'Factorial does not exist for negative numbers'\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "test": "assert     big_diff([1,2,3,4,5]) == 4, \"Wrong Answer\"",
        "num_ids": 230
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x**2 for x in range(a, b+1) if x**2 % a == 0 or x**2 % b == 0]\n",
        "test": "assert     perfect_squares(1,1) == [1]",
        "num_ids": 309
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x ** 2 + y ** 2) ** 0.5\n    t = cmath.phase(complex(x,y))\n    return (r,t)\ndef get_polar_coord(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = (x ** 2 + y ** 2) ** 0.5\n    t = cmath.phase(complex(x,y))\n    return (r,t)\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\ndef distance2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\ndef midpoint(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the midpoint between two points.\n    '''\n    x = (x1 + x2) / 2\n    y = (y1 + y2) / 2\n    return (x,y)\ndef area_of_triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\ndef area_of_triangle2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\ndef height(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the height of a triangle.\n    '''\n    return ((y1 - y2) ** 2 + (x1 - x2) ** 2) ** 0.5\ndef area_of_parallelogram(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * (x4 * (y3 - y4) + x3 * (y4 - y3) + x4 * (y2 - y3)))\ndef area_of_parallelogram2(x1,y1,x2,y2,x3,y3,x4,y4):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) * (x4 * (y3 - y4) + x3 * (y4 - y3) + x4 * (y2 - y3)))\ndef area_of_rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return abs(x1 * (y2 - y1))\ndef area_of_rectangle2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return abs(x1 * (y2 - y1))\ndef area_of_circle(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return abs(3.14 * (x2 - x1) ** 2)\ndef area_of_circle2(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return abs(3.14 * (x2 - x1) ** 2)\ndef area_of_sector(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector3(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector4(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector5(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector6(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector7(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector8(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector9(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector10(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector11(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the area of a sector.\n    '''\n    return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2\ndef area_of_sector12(x1,y1,x2,y2,x3",
        "test": "assert     polar_rect(1, 3.14) == (1, 3.14)",
        "num_ids": 490
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    return [newList[-1]] + newList[1:-1] + [newList[0]]\n",
        "test": "assert     swap_List(['a', 'b', 'c']) == ['c', 'b', 'a'], 'incorrect output for swap_List'",
        "num_ids": 197
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    summ = 0\n    if k==0:\n        summ = 1\n    elif k==n:\n        summ = n\n    elif k<n:\n        summ = (n * (binomial_Coeff(n,k-1))) + (binomial_Coeff(n,k))\n    return summ\ndef binomial_coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    summ = 0\n    if k==0:\n        summ = 1\n    elif k==n:\n        summ = n\n    elif k<n:\n        summ = (n * (binomial_coeff(n,k-1))) + (binomial_coeff(n,k))\n    return summ\n",
        "test": "assert     binomial_Coeff(1, 1) == 1 ",
        "num_ids": 399
    },
    {
        "number": 593,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join([str(int(i)) for i in ip.split('.')])\n",
        "test": "assert     removezero_ip(\"255.0.0.0\") == \"255.0.0.0\"",
        "num_ids": 1200
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_num = []\n    even_num = []\n    for i in list1:\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    return even_num[0] - odd_num[0]\n",
        "test": "assert     diff_even_odd([1,2,3,4,5,6,7,8]) == (1,9)",
        "num_ids": 2319
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=list(str1)\n    str2=list(str2)\n    swaps=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            str1[i],str2[i]=str2[i],str1[i]\n            swaps+=1\n    return swaps\n",
        "test": "assert     min_Swaps(\"101010\", \"101011\") == 1",
        "num_ids": 508
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    result = 0\n    for i in range(0,len(tuple_list)):\n        result += sys.getsizeof(tuple_list[i])\n    return result\n",
        "test": "assert     tuple_size((1,)) ==     sys.getsizeof(1),     'Error in tuple_size'",
        "num_ids": 336
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while(i<len(arr1) and j<len(arr2)):\n        if arr1[i] > arr2[j]:\n            j+=1\n        elif arr1[i] < arr2[j]:\n            i+=1\n        else:\n            i+=1\n            j+=1\n    \n    return arr1[k-1]\n",
        "test": "assert ",
        "num_ids": 617
    },
    {
        "number": 598,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    length = len(str(number))\n    while number:\n        remainder = number % 10\n        number = number // 10\n        sum += remainder ** length\n    if num == sum:\n        return True\n    else:\n        return False\n    \n",
        "test": "assert ",
        "num_ids": 205
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return sum, avg\n",
        "test": "assert ",
        "num_ids": 148
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "test": "assert     is_Even(2) == True",
        "num_ids": 165
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # my code here\n    str1 = str(str1).lower()\n    d = {}\n    for i in str1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n            break\n    for key, val in d.items():\n        if val > 1:\n            return key\n",
        "test": "assert     first_repeated_char('abcdef') == None, 'first repeated character found'",
        "num_ids": 328
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n",
        "test": "assert     get_ludic(1) == []",
        "num_ids": 2161
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    def reverse_words_recursive(s, start, end):\n        if start >= end:\n            return\n        \n        # find the end of first word\n        word_end = start\n        while word_end < len(s) and s[word_end]!='':\n            word_end += 1\n        \n        # reverse the word\n        s[start:word_end] = reversed(s[start:word_end])\n        \n        # go to next word and reverse it\n        reverse_words_recursive(s, word_end+1, end)\n        \n    reverse_words_recursive(list(s), 0, len(s))\n    return ''.join(s)\n    \n    \n    \ndef reverse_words(s):\n    return''.join(s.split()[::-1])\n    \n    \n    \nprint(reverse_words('  hello there  '))\nprint(reverse_words('hello there')",
        "test": "assert     reverse_words('hello world!') == 'world! hello'",
        "num_ids": 385
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 193
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n",
        "test": "assert     (radian_degree(90) - math.pi/2) < 0.001",
        "num_ids": 152
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    list1 = re.findall(pattern, text)\n    if list1:\n        return list1\n    else:\n        return False\n",
        "test": "assert     find_literals(\"123.123.123.123\", r'\\.')[0] == '123.123.123.123'",
        "num_ids": 245
    },
    {
        "number": 608,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1] \n    for i in range(1,n+1):\n        bell_number = bell[-1]*i\n        bell.append(bell_number)\n    return bell[n]\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 145
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1\n    print(\"Original List: \" + str(list1))\n    print(\"Original Length: \" + str(len(list1)))\n    k = 0\n    while k < L:\n        k += 1\n        list1.pop(k)\n    print(\"New List: \" + str(list1))\n    print(\"New Length: \" + str(len(list1)))\n",
        "test": "assert ",
        "num_ids": 331
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= N:\n                if max_val < test_list[i][j]:\n                    max_val = test_list[i][j]\n    return max_val\n",
        "test": "assert     max_of_nth([[2,5,3],[1,2,1],[1,2,1]],1) == 5",
        "num_ids": 385
    },
    {
        "number": 612,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_two_lists(lst):\n        return [list(x) for x in zip(*lst)]\n    return merge_two_lists(lst)\n",
        "test": "assert     merge([[1,2],[3,4],[5,6],[7,8],[9,0]]) == [[1,3,5,7,9], [2,4,6,8,0]]",
        "num_ids": 479
    },
    {
        "number": 614,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum = cum_sum + i\n    return cum_sum\n",
        "test": "assert     cummulative_sum((3,5,6,7)) == 21",
        "num_ids": 282
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for item in nums:\n        sum += item[0]\n    average = sum/len(nums)\n    return average\n",
        "test": "assert     (average_tuple(((1,5,9),(7,9,10))),[3,8])",
        "num_ids": 278
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n",
        "test": "assert     (tuple_modulo((1,2), (4,5)) ",
        "num_ids": 262
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d == steps:\n        return 1\n",
        "test": "assert     min_Jumps(3,    3) == 1,     \"Should be 1\"",
        "num_ids": 319
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div=[]\n    for i in range(len(nums1)):\n        div.append(nums1[i]/nums2[i])\n    return div\ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    mul=[]\n    for i in range(len(nums1)):\n        mul.append(nums1[i]*nums2[i])\n    return mul\ndef dev_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    dev=[]\n    for i in range(len(nums1)):\n        dev.append(nums1[i]-nums2[i])\n    return dev\ndef sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    sub=[]\n    for i in range(len(nums1)):\n        sub.append(nums1[i]-nums2[i])\n    return sub\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    add=[]\n    for i in range(len(nums1)):\n        add.append(nums1[i]+nums2[i])\n    return add\ndef exp_list(nums1,nums2):\n    '''\n    Write a function to exponentiate two lists element wise.\n    '''\n    exp=[]\n    for i in range(len(nums1)):\n        exp.append(nums1[i]**nums2[i])\n    return exp\ndef expm1_list(nums1,nums2):\n    '''\n    Write a function to calculate e^x - 1 for lists element wise.\n    '''\n    expm1=[]\n    for i in range(len(nums1)):\n        expm1.append(nums1[i]**nums2[i]-1)\n    return expm1\n",
        "test": "assert     div_list([0,0,0], [1,1,1]) == [0,0,0]",
        "num_ids": 208
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    words = test_str.split()\n    num_list = []\n    for i in words:\n        if i.isdigit():\n            num_list.append(i)\n    for i in range(len(num_list)):\n        words.remove(num_list[i])\n    return words + num_list\n",
        "test": "assert ",
        "num_ids": 256
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0: return 0\n    if len(a) == 1: return 1\n    # recursive version\n    #print(\"\\n\", a, \"\\n\")\n    if len(a) % 2 == 0:\n        a1 = largest_subset(a[:len(a) // 2])\n        a2 = largest_subset(a[len(a) // 2:])\n    else:\n        a1 = largest_subset(a[:len(a) // 2])\n        a2 = largest_subset(a[len(a) // 2 + 1:])\n    #print(\"a1:\", a1, \"a2:\", a2)\n    return max([a1, a2])\n    #print(\"a1+a2:\", a1+a2, \"\\n\")\n",
        "test": "assert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1, \"Incorrect output for largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\"",
        "num_ids": 434
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return (arr1[0] + arr2[0]) // 2\n    \n    i = 0\n    j = n - 1\n    \n    # If arrays have even no. of elements, then median\n    # will be the average of middle two elements\n    if n % 2 == 0:\n        return (arr1[i] + arr2[j] + get_median(arr1, arr2, (n//2)-1)) // 2\n    else:\n        return get_median(arr1, arr2, (n//2)-1)\n        \nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [4, 5, 6, 7, 8]\n    print(get_median(arr1, arr2, len(arr1)))\n    \n",
        "test": "assert     get_median([1, 2, 3, 4], [5, 6, 7, 8], 4) == 5.5",
        "num_ids": 441
    },
    {
        "number": 623,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n",
        "test": "assert     nth_nums([1, 2, 3, 4, 5], 3) == [1, 8, 27, 64, 125]",
        "num_ids": 241
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "test": "assert     is_upper('this is not upper') == False",
        "num_ids": 98
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "test": "assert     swap_List([5,3,2,1,4]) == [4,3,2,1,5], 'incorrect'",
        "num_ids": 242
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14\n    return pi*(r**2)\n",
        "test": "assert     (triangle_area(0) == 0)",
        "num_ids": 188
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #edge cases:\n    if end==None:\n        end=len(array)\n    if start==end:\n        return array[start]\n    else:\n        mid=(start+end)//2\n        #print(start,end,mid)\n        if array[mid]==mid+1:\n            #print(\"mid is the missing number\")\n            return mid+1\n        elif array[mid]==mid:\n            #print(\"mid is not the missing number\")\n            return find_First_Missing(array,mid,end)\n        elif array[mid]>mid:\n            return find_First_Missing(array,start,mid)\n        else:\n            return find_First_Missing(array,mid,end)\n    #print(\"the array is {} and its missing number is {}\".format(array,missing_number))\n",
        "test": "assert     find_First_Missing([1,2,3,4,5,6,7,8,10,11,12,13,14]) == 15",
        "num_ids": 552
    },
    {
        "number": 628,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split())\n    \ndef split_and_join(line):\n    '''\n    Write a function to split and join an input string into individual characters.\n    '''\n    return '-'.join(line.split(' '))\n",
        "test": "assert     replace_spaces('Dwight%20Schrute') == 'Dwight%20Schrute'",
        "num_ids": 203
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    # for i in range(0,len(list)):\n    #     if list[i] % 2 == 0:\n    #         print(list[i])\n    return [i for i in list if i % 2 == 0]\n",
        "test": "assert     Split([1,2,3,4,5,6,7]) == [2,4,6], 'incorrect'",
        "num_ids": 388
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        for i in sub:\n            sub_adj = [ele[0], ele[1]+1, ele[2], ele[3]+1]\n            adj = adjac(sub_adj, sub.copy())\n        return adj\n            \n            \ndef neigh_count(grid, x, y, z):\n    '''\n    Given a coordinate tuple, return the count of all the neighbors of the given coordinate\n    '''\n    neigh = adjac([x, y, z])\n    neigh_count = 0\n    for i in neigh:\n        if i in grid:\n            neigh_count += 1\n    return neigh_count\n",
        "test": "assert ",
        "num_ids": 410
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # return text.replace(\" \", \"_\").replace(\"_\", \" \")\n    return text.replace(\" \", \"_\")\n",
        "test": "assert     replace_spaces('the sky is blue') == 'the_sky_is_blue', 'wrong result'",
        "num_ids": 307
    },
    {
        "number": 632,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    temp = []\n    for i in num_list:\n        if i!=0:\n            temp.append(i)\n    temp.extend([0] * num_list.count(0))\n    return temp\n",
        "test": "assert     move_zero([1, 2, 0, 4, 0, 5, 7]) == [1, 2, 4, 5, 7, 0, 0]",
        "num_ids": 460
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0 \n    for i in range(n) : \n        for j in range(i+1,n) : \n            result = result ^ arr[i] ^ arr[j]\n    return result\n",
        "test": "assert     (pair_xor_Sum([0,1,0,3,12],5)==8)",
        "num_ids": 261
    },
    {
        "number": 635,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for element in iterable:\n        hq.heappush(h, element)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     sorted([3, 2, 1]) == heap_sort([3, 2, 1])",
        "num_ids": 350
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n",
        "test": "assert     noprofit_noloss(100,100) == True, 'wrong'",
        "num_ids": 195
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    WCI=13.12 + 0.6215*t - 11.37 * math.pow(v,0.16) + 0.3965 * t * math.pow(v,0.16)\n    return round(WCI)\nprint(wind_chill(10,15))\n",
        "test": "assert     wind_chill(22,22) == 22, \"22, 22 should be 22\"",
        "num_ids": 288
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    print(f'Sample names: {sample_names}')\n",
        "test": "assert ",
        "num_ids": 243
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = \"\"\n    for i in items:\n        if i == \"(\":\n            continue\n        if i == \")\":\n            break\n        else:\n            temp += i\n    return temp\n",
        "test": "assert     remove_parenthesis(\"()()\") == \"\"",
        "num_ids": 283
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (2 * n**3 - n) / 3\n",
        "test": "assert     is_nonagonal(2) == 7, 2",
        "num_ids": 130
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.startswith('z'):\n        return False\n    if text.endswith('z'):\n        return False\n    if 'z' in text:\n        return True\n    return False\n",
        "test": "assert     text_match_wordz_middle(\"thezoozoo\") == True",
        "num_ids": 1282
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reversed_list = list()\n    for index, val in enumerate(input):\n        if index < k:\n            reversed_list.append(input[index])\n        else:\n            reversed_list.append(input[index-k])\n    return reversed_list\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 0) == [1,2,3,4,5,6,7,8], \"Error\"",
        "num_ids": 354
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # test_tup = ('abc', 1, 2, 3, 4)\n    # test_dict = {'e': 4, 'a': 2, 'd': 1, 'b': 3}\n    return tuple(test_tup) + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple((1, 2, 3), {'a': 3, 'b': 4}) == (1, 2, 3, {'a': 3, 'b': 4})",
        "num_ids": 272
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost[0])\n    opt = [[0] * n for _ in range(n)]\n    sum = [0] * n\n    print(opt)\n    for i in range(n):\n        for j in range(n):\n            sum[j] = sum[j] + cost[i][j]\n",
        "test": "assert     maxAverageOfPath([[1, 2, 3],",
        "num_ids": 625
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_student = {}\n    for key in students:\n        if float(students[key][0])>=h and float(students[key][1])>=w:\n            new_student[key]=students[key]\n    print(new_student)\n",
        "test": "assert     filter_data(students,[150,170], 50, 100) == {'AJ':(172.5, 67), 'KD':(172.5, 67), 'YK':(172.5, 67), 'SX':(172.5, 67), 'WH':(172.5, 67), 'XS':(172.5, 67)}",
        "num_ids": 374
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,2,3], [2,2,3]) == 2",
        "num_ids": 357
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    if base == 0:\n        return 0\n    while base >= 1:\n        s += base % 10\n        base = base // 10\n    return s ** power\n    # return sum([int(i)**power for i in str(base)])\n",
        "test": "assert ",
        "num_ids": 181
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regx = re.compile('\"(.*?)\"')\n    match = regx.findall(text1)\n    return match\n",
        "test": "assert     extract_quotation('\"Ciao\"')==['Ciao']",
        "num_ids": 373
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Your code here\n    result = ()\n    for index in range(0, len(test_tup)):\n        if index == len(test_tup)-1:\n            break\n        else:\n            result += (test_tup[index] * test_tup[index + 1],)\n    return result\n    \nprint(multiply_elements((1, 2, 3, 4, 5))) # (2, 4, 6, 8, 10)\nprint(multiply_elements((1, 2, 3))) # (2, 4, 6)\nprint(multiply_elements((1,))) # (1,)",
        "test": "assert ",
        "num_ids": 775
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if lst1 == [] or lst2 == []:\n        return []\n    return [lst1[0] + lst2[0]] + sum_list(lst1[1:], lst2[1:])\n",
        "test": "assert ",
        "num_ids": 279
    },
    {
        "number": 730,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Without using itertools or groupby\n    def remove_duplicates(nums):\n        result = []\n        last = None\n        for num in nums:\n            if num!= last:\n                result.append(num)\n                last = num\n        return result\n    # Or using itertools\n    def remove_duplicates_iter(nums):\n        result = []\n        for key, group in groupby(nums):\n            result.append(key)\n        return result\n    # Or using groupby\n    def remove_duplicates_groupby(nums):\n        return [key for key, group in groupby(nums)]\n    # Using set\n    def remove_duplicates_set(nums):\n        return list(set(nums))\n    # With sorted\n    def remove_duplicates_sorted(nums):\n        nums = sorted(nums)\n        result = [nums[0]]\n        last = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i]!= last:\n                result.append(nums[i])\n                last = nums[i]\n        return result\n    # Without using any builtin functions\n    def remove_duplicates_no_builtins(nums):\n        result = []\n        for num in nums:\n            if num not in result:\n                result.append(num)\n        return result\n    # Without using any builtin functions or set\n    def remove_duplicates_no_builtins_no_set(nums):\n        result = []\n        for num in nums:\n            if num not in result:\n                result.append(num)\n        return result\n    # Without using any builtin functions or set\n    def remove_duplicates_no_builtins_no_sorted(nums):\n        result = []\n        num_set = set()\n        for num in nums:\n            if num not in num_set:\n                result.append(num)\n                num_set.add(num)\n        return result\n    return remove_duplicates_no_builtins_no_sorted(nums)\n",
        "test": "assert     consecutive_duplicates([1, 1, 2, 3, 3, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 816
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 3.1415926535*r**2 + 3.1415926535*r*h\ndef area_of_cube(a):\n    '''\n    Write a function to find the area of a cube given the side length a.\n    '''\n    return 6*a**2\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given the radius r.\n    '''\n    return 4/3*3.1415926535*r**3\ndef area_of_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder given the radius r and the height h.\n    '''\n    return 3.1415926535*r**2 + 3.1415926535*r*h\ndef lateral_surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''\n    return 2*3.1415926535*r + 3.1415926535*r*h\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle given the side lengths a,b,c.\n    '''\n    return (a+b+c)/2\ndef lateral_surface_area_of_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the side lengths a,b,c.\n    '''\n    return a*b*math.sqrt(3)/2\ndef lateral_surface_area_of_triangle_simplified(a,b,c):\n    return 0.5*(a+b+c)*math.sqrt(3)\ndef height_of_triangle(a,b,c):\n    '''\n    Write a function to find the height of a triangle given the side lengths a,b,c.\n    '''\n    return 2*math.sqrt(3)/3*math.sqrt(a**2+b**2+c**2)\ndef volume_of_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram given the base length a and the height length b.\n    '''\n    return a*b\ndef lateral_surface_area_of_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the base length a and the height length b.\n    '''\n    return 2*a + 2*b\ndef lateral_surface_area_of_parallelogram_simplified(a,b):\n    return 2*(a+b)\ndef area_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid given the base length a, the height length b, and the top length h.\n    '''\n    return (a+b)*h/2\ndef lateral_surface_area_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the base length a, the height length b, and the top length h.\n    '''\n    return 2*a + 2*b\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle given the base length a and the height length b.\n    '''\n    return a*b\ndef lateral_surface_area_of_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the base length a and the height length b.\n    '''\n    return 2*a + 2*b\ndef area_of_rhombus(a,b):\n    '''\n    Write a function to find the area of a rhombus given the base length a and the height length b.\n    '''\n    return 0.5*a*b\ndef lateral_surface_area_of_rhombus(a,b):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the base length a and the height length b.\n    '''\n    return a + b\ndef area_of_square(a):\n    '''\n    Write a function to find the area of a square given the side length a.\n    '''\n    return a*a\ndef lateral_surface_area_of_square(a):\n    '''\n    Write a function to find the lateral surface area of a square given the side length a.\n    '''\n    return 4*a\ndef area_of_parallelogram_with_slope(a,b,m):\n    '''\n    Write a function to find the area of a parallelogram with slope m given the base length a and the height length b.\n    '''\n    return a*b*(1 + m**2)**0.5\ndef lateral_surface_area_of_parallelogram_with_slope(a,b,m):\n    '''\n    Write a function to find the lateral surface area of a parallelogram with slope m given the base length a and the height length b.\n    '''\n    return 2*a*b*(1 + m**2)**0.5\ndef area_of_trapezoid_with_slope(a,b,h,m):\n    '''\n    Write a function to find the area of a trapezoid with slope m given the base length a, the height length b, and the top length h.\n    '''\n    return a*h*(1 + m**2)**0.5\ndef lateral_surface_area_of_trapezoid_with_slope(a,b,h,m):\n    '''\n    Write a function to find the lateral surface area of a trapezoid with slope m given the base length a, the height length b, and the top length h.\n    '''\n    return 2*a*h*(1 + m**2)**0.5\ndef area_of_rectangle_with_slope(a,b,m):\n    '''\n    Write a function to find the area of a rectangle with slope m given the base length a and the height length b.\n    '''\n    return a*b*(1 + m**2)**0.5\ndef lateral_surface_area_of_rectangle_with_slope(a,b,m):\n    '''\n    Write a function to find the lateral surface area of a rectangle with slope m given the base length a and the height length b.\n    '''\n    return 2*a*b*(1 + m**2)**0.5\ndef area_of_rhombus_with_slope(a,b,m):\n    '''\n    Write a function to find the area of a rhombus with slope m given the base length a and the height length b.\n    '''\n    return 0.5*a*b*(1 + m**2)**0.5\ndef lateral_surface_area_of_rhombus_with_slope(a,b,m):\n    '''\n    Write a function to find the lateral surface area of a rhombus with slope m given the base length a and the height length b.\n    '''\n    return a*b*(1 + m**2)**0.5\ndef area_of_square_with_slope(a,m):\n    '''\n    Write a function to find the area of a square with slope m given the side length a.\n    '''\n    return a*a*(1 + m**2)**0.5\ndef lateral_surface_area_of_square_with_slope(a,m):\n    '''\n    Write a function to find the lateral surface area of a square with slope m given the side length a.\n    '''\n    return 4*a*(1 + m**2)**0.5\ndef lateral_surface_area_of_square_with_slope_simplified(a,m):\n    return 4*a*(1 + m**2)\ndef lateral_surface_area_of_square_with_slope_simplified_one_line(a,m):\n    return a*4*(1 + m**2)\ndef area_of_parallelogram_with_slope(a,b,m):\n    '''\n    Write a function to find the area of a parallelogram with slope m give",
        "test": "assert     lateralsurface_cone(4,6) == 48",
        "num_ids": 153
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n",
        "test": "assert     replace_specialchar('abc def,ghi.') == 'abc:def:ghi:', \"replace_specialchar\"",
        "num_ids": 236
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        if x < A[mid]:\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            if mid - 1 < 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n    ",
        "test": "assert     find_first_occurrence([], 3) == -1",
        "num_ids": 547
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0 for _ in range(n)]\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = arr[i - 1] * dp[i - 1]\n    print(dp)\n    for j in range(1, n):\n        for i in range(j):\n            dp[j] = dp[j] + arr[j] * dp[i]\n",
        "test": "assert ",
        "num_ids": 273
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    import math\n    def get_first_and_last_bits(n):\n        bit_length = int(math.log2(n))+1\n        first_bit = n - ((2 ** bit_length) - 1)\n        last_bit = n - 2 ** (bit_length - 2)\n        return first_bit, last_bit\n",
        "test": "assert     set_middle_bits(22) ==     101010",
        "num_ids": 291
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)-1\n    while lo <= hi:\n        mid = lo + ((hi-lo)>>1)\n        if a[mid] > x:\n            hi = mid - 1\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            if mid == 0 or x < a[mid-1]:\n                return mid\n            else:\n                hi = mid - 1\n    return hi + 1\n",
        "test": "assert     left_insertion([1, 3, 4, 6, 10, 11, 15], 2) == 1",
        "num_ids": 335
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n",
        "test": "assert     ( check_str('this is string') == False )",
        "num_ids": 168
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(5) == 5*4*3*2*1",
        "num_ids": 137
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = 0\n    while (int(math.pow(10, k)) <= int(n)): \n        k += 1\n    k = k - 1\n    return int(math.pow(10, k)) \n",
        "test": "assert     find_Index(2) == 1",
        "num_ids": 219
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0,len(test_tup),2)}\n",
        "test": "assert     tuple_to_dict(('123','xyz','apple','banana')) ==     {'123': 'xyz', 'apple': 'banana'}",
        "num_ids": 255
    },
    {
        "number": 741,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if i == \" \" :\n            continue\n        if i!= s[0] :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('a') == True",
        "num_ids": 179
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**3)*(math.sqrt(6)/12)\n",
        "test": "assert     area_tetrahedron(2) == 4",
        "num_ids": 186
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # list = [1, 2, 3, 4, 5]\n    # m = 2\n    # n = len(list)\n    # list.append(0)\n    # for i in range(m):\n    #     list[n - 1 - i], list[n - i] = list[n - i], list[n - 1 - i]\n    # print(list[0:n])\n    # print(list[n:])\n",
        "test": "assert     rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \"rotate_right not work\"",
        "num_ids": 370
    },
    {
        "number": 744,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert test_tup!= None, \"Please enter a valid tuple!\"\n",
        "test": "assert     (check_none((1, 2, 3)) == None)",
        "num_ids": 120
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(list(map(lambda y: x % int(y) == 0, str(x))))),range(startnum, endnum)))\n",
        "test": "assert ",
        "num_ids": 205
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return round(math.pi*(r**2)*(a/360),2)\n    else:\n        return None\n",
        "test": "assert     sector_area(3,360) == None",
        "num_ids": 2171
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs_of_two(X,Y)\n    return lcs_of_two(X,Z)\n",
        "test": "assert     lcs_of_three(['geeksforgeeks', 'geeks', 'geek'], ",
        "num_ids": 588
    },
    {
        "number": 748,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    regex = re.compile('([A-Z])[A-Z]+')\n    result = regex.sub(r'\\1 ', str1)\n    return result\n",
        "test": "assert     capital_words_spaces('The quick brown fox jumped over the lazy dog.') == 'The quick brown fox jumped over the lazy dog.'",
        "num_ids": 372
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n",
        "test": "assert     sort_numeric_strings(['0', '10', '2', '3', '30', '14']) == \\",
        "num_ids": 167
    },
    {
        "number": 750,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6], 'incorrect output'",
        "num_ids": 186
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    for i in range(2, i):\n        if arr[i] < arr[i//2]:\n            return False\n    return True\n",
        "test": "assert     check_min_heap_helper([], -1) == True",
        "num_ids": 260
    },
    {
        "number": 752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n",
        "test": "assert ",
        "num_ids": 128
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # test_list = [(1, 3), (6, 4), (2, 4), (0, 1), (8, 5), (0, 1), (3, 4), (9, 9), (7, 5)]\n    \n    # test_list = [(\"first\", 1), (\"second\", 3), (\"third\", 4)]\n",
        "test": "assert ",
        "num_ids": 591
    },
    {
        "number": 754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # return [item for item in l1 if item in l2 and item in l3]\n    # return list(set(l1).intersection(l2, l3))\n    return [i for i in l1 if i in l2 and i in l3]\n",
        "test": "assert ",
        "num_ids": 285
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list to get the smallest and the second smallest number\n    numbers.sort()\n    return(numbers[1])\n",
        "test": "assert     second_smallest([3,2,1]) == 2",
        "num_ids": 326
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.search(r\"a.+b\",text))\n",
        "test": "assert     text_match_zero_one(\"cat\") == False, \"Match a single character not present\"",
        "num_ids": 200
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Solution\n    def reverse_string(string):\n        return ''.join(reversed(string))\n",
        "test": "assert ",
        "num_ids": 409
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for sublist in list1:\n        sub_tuple = tuple(sublist)\n        d[sub_tuple] = d.get(sub_tuple, 0) + 1\n    return d\n",
        "test": "assert     unique_sublists([[1,2,3,4],[1,2,3,4],[2,1,3,4]]) == {(1,2,3,4):2, (2,1,3,4):1}, 'incorrect'",
        "num_ids": 686
    },
    {
        "number": 759,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    print(num)\n    if len(num) > 2:\n        return False\n    num = int(num)\n    if num == 0:\n        return True\n    else:\n        return False\n    return True\n",
        "test": "assert     is_decimal(\"12.12\") == False, \"not a decimal\"",
        "num_ids": 564
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return arr.count(arr[0]) == len(arr)\n",
        "test": "assert     unique_Element([1,1,1,2,2,2,3,3,3,3,3,3,3]) == False, 'not passed'",
        "num_ids": 297
    },
    {
        "number": 762,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(2)     == True",
        "num_ids": 239
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 1000000001\n    arr.sort()\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if (diff < min_diff):\n            min_diff = diff\n",
        "test": "assert ",
        "num_ids": 315
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for i in str:\n        if i.isdigit():\n            digits += 1\n    return digits\n",
        "test": "assert     number_ctr(\"123\")         == 3",
        "num_ids": 199
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #nums=[]\n    #for i in range(1,n+1):\n    #    nums.append(i)\n    #print(nums)\n    #return int(nums[n-1])\n    return int((2*n-1)**0.5+1)\n",
        "test": "assert     is_polite(2) == 2",
        "num_ids": 441
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # if not l1:\n    #     return None\n    # if len(l1) < 2:\n    #     return None\n    # if len(l1) == 2:\n    #     return [(l1[0],l1[1])]\n    # for i in range(len(l1)):\n    #     for j in range(i+1,len(l1)):\n    #         return [(l1[i],l1[j])]\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 356
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    lst = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                lst.append((arr[i], arr[j]))\n    return len(lst)\n",
        "test": "assert     get_pairs_count([1,3,2,2],    4) == 2",
        "num_ids": 350
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n",
        "test": "assert     Diff(list(range(5)),list(range(5))) == []",
        "num_ids": 183
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num_list = []\n    for i in range(1,n+1):\n        if (i % 2!= 0) :\n            num_list.append(i*i*i*i)\n    return sum(num_list)\n",
        "test": "assert     odd_num_sum(1) == 1",
        "num_ids": 213
    },
    {
        "number": 771,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_paren = set('({[')\n    close_paren = set(')}]')\n    open_par_deque = deque()\n    for char in exp:\n        if char in open_paren:\n            open_par_deque.append(char)\n        elif char in close_paren:\n            if not open_par_deque:\n                return False\n            if (char == ')' and open_par_deque.pop()!= '(') or (char == '}' and open_par_deque.pop()!= '{') or (char == ']' and open_par_deque.pop()!= '['):\n                return False\n    if not open_par_deque:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression(\"({)}\") == False",
        "num_ids": 579
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = \"I am an NLPer\"\n    K = 2\n",
        "test": "assert ",
        "num_ids": 223
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(f'Occurance substring in \"{text}\" that matches \"{pattern}\" is \"{text.find(pattern)}\"')\n",
        "test": "assert     occurance_substring(\"30 days 30 days I am learning python\", \"python\") == (2,9), \"Example #2\"",
        "num_ids": 310
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([2,3,4,5,6,7,8,9]) == False",
        "num_ids": 194
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    test_str = test_str.lower()\n    neighbor_vowel = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels:\n            if test_str[i+1] in vowels:\n                neighbor_vowel += 1\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            neighbor_vowel += 1\n    return neighbor_vowel\n",
        "test": "assert     count_vowels(\"book\") == 2, \"Not implemented\"",
        "num_ids": 617
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # A dictionary which keeps a count of all the unique elements in the given array\n    d = dict() \n    for x in arr: \n        if x not in d: \n            d[x] = 1\n        else: \n            d[x] += 1\n",
        "test": "assert     (find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == ",
        "num_ids": 306
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def counter(list1):\n        count = 0\n        for i in list1:\n            if i==count:\n                count = count+1\n            else:\n                count = 1\n        return count\n    packed_list = []\n    for key, value in groupby(list1,counter):\n        packed_list.append(list(value))\n    return packed_list\n",
        "test": "assert     pack_consecutive_duplicates([1, 1, 1, 1]) == [[1], [1], [1], [1]]",
        "num_ids": 307
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def tuplify(list1):\n        '''\n        Write a function to convert a list to a tuple.\n        '''\n        tuple1 = tuple(list1)\n        return tuple1\n",
        "test": "assert ",
        "num_ids": 343
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for i in test_list:\n        if sum(i) not in final_list:\n            final_list.append(sum(i))\n    print(final_list)\n    final_list.sort()\n    return final_list\n    \ndef t1(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4)]))\n    \ndef t2(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(5,7,8)]))\n    \ndef t3(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8)]))\n    \ndef t4(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(5,7,8),(8,9,9),(1,1,1,1),(5,5,5,5)]))\n    \ndef t5(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8)]))\n    \ndef t6(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8),(9,9,9,9),(1,1,1,1),(5,5,5,5),(1,2,3,4)]))\n    \ndef t7(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8),(1,1,1,1),(5,5,5,5),(1,2,3,4)]))\n    \ndef t8(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(5,7,8),(9,9,9,9),(1,1,1,1),(5,5,5,5),(1,2,3,4)]))\n    \ndef t9(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8),(9,9,9,9),(1,1,1,1),(5,5,5,5),(1,2,3,4)]))\n    \ndef t10(l):\n    print(find_combinations([(1,2,3),(2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4),(5,7,8),(9,9,9,9),(1,1,1,1),(5,5,5,5),(1,2,3,4)]))\n",
        "test": "assert     find_combinations([(1,2,3,4), (1,2,3,4), (1,2,3,4), (1,2,3,4), (1,2,3,4)]) == [(1, 2, 3, 4, 4), (1, 2, 3, 4, 3), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4), (1, 2, 3, 4, 4)]",
        "num_ids": 1429
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) : \n        return 1\n    if (n == 2) : \n        return 1\n    if (n % 2 == 0) : \n        return 2\n    if (n % 2!= 0) : \n        return (2*((n+1)//2) + 1)\n    return n\n",
        "test": "assert     count_divisors(6) == 2, \"Incorrect\"",
        "num_ids": 306
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # def odd_length_sum(arr):\n    # arr = list(map(int, input().split()))\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if(len(arr[i:j+1]) % 2!= 0):\n                sum += sum(arr[i:j+1])\n    return sum\n",
        "test": "assert ",
        "num_ids": 293
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 1, 0) == (120, 1, 0)",
        "num_ids": 657
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 1\n    product_odd = 1\n    for item in list1:\n        if item % 2 == 0:\n            product_even *= item\n        else:\n            product_odd *= item\n    return product_even, product_odd\nprint(mul_even_odd([1,2,3,4,5,6,7]))\n",
        "test": "assert ",
        "num_ids": 299
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = tuple(test_str.split(','))\n    test_str = [int(x) for x in test_str]\n    return test_str\n",
        "test": "assert     (tuple_str_int((\"1\", \"2\", \"3\")) == (1, 2, 3)), \"Check the second example\"",
        "num_ids": 167
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
        "test": "assert     right_insertion([1, 2, 3, 4, 5], 2) == 1",
        "num_ids": 290
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    patterns = '[ab]{3}'\n    if re.search(patterns, text):\n        return 'Matched'\n    else:\n        return 'Not matched'\n",
        "test": "assert     text_match_three('aaaaabbbbb') == True, 'all a'",
        "num_ids": 237
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n",
        "test": "assert     new_tuple(['1', '2', '3', '4', '5'], '12345') == (('1', '2', '3', '4', '5'), ('1', '2', '3', '4', '5'))",
        "num_ids": 366
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if not nums:\n        return False\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "test": "assert     even_position([1,3,5,7,9]) == False, 'incorrect output'",
        "num_ids": 254
    },
    {
        "number": 791,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_list.append(i)\n        else:\n            pass\n    return tuple(new_list)\n",
        "test": "assert     remove_nested(('a', ('bb', 'ccc'), 'd', 'e')) == ('a', 'd', 'e'), 'incorrect result'",
        "num_ids": 321
    },
    {
        "number": 792,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for items in input_list:\n        if type(items) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([1, 2, 3, [1, 2, 3], [1, 2, 3]]) == 3, 'Function \"count_list\" is not returning the expected result'",
        "num_ids": 303
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if x not in arr:\n        return n\n    else:\n        return last(arr[:n-1],x)\n    \n",
        "test": "assert     last([1, 2, 3, 3, 4, 5], 1) == 0",
        "num_ids": 429
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert     text_starta_endb('abc') == False",
        "num_ids": 173
    },
    {
        "number": 796,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({1:1, 2:2, 3:3}) == 6, 'incorrect'",
        "num_ids": 168
    },
    {
        "number": 797,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # your code here\n    result = sum(list(range(n)))\n    return result\n",
        "test": "assert     sum_odd(1) == 0",
        "num_ids": 355
    },
    {
        "number": 798,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1,2,3])     == 6",
        "num_ids": 142
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if (d == 0):\n        return n\n    n = n << d\n    n = n | (n >> 32-d)\n    return n\n",
        "test": "assert     left_rotate(0b1001011,2) == 0b1001011 >> 2 == 0b1001011 >> 1 == 0b1001011 >> 1 == 0b1001010",
        "num_ids": 187
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    regex = re.compile(r\"\\s+\")\n    return regex.sub(\" \", text)\n",
        "test": "assert     remove_all_spaces(\"hello there\") == \"hello there\"",
        "num_ids": 184
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x == y:\n        counter += 1\n    if x == z:\n        counter += 1\n    if y == z:\n        counter += 1\n    return counter\n",
        "test": "assert     test_three_equal(8,8,8) == 3",
        "num_ids": 161
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    for i in range(n):\n        for j in range(i,n):\n            if arr[i] > arr[j]:\n                rotations += 1\n    return rotations\n",
        "test": "assert count_rotation([13, 18, 20, 30, 35, 39, 42]) == 0",
        "num_ids": 393
    },
    {
        "number": 803,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n == 0) :\n        return 0\n    if (n == 1) :\n        return 1\n    if (n == 4) :\n        return 1\n    else:\n        return is_perfect_square_util(n, [0, n])\n",
        "test": "assert     is_perfect_square(4) == True",
        "num_ids": 156
    },
    {
        "number": 804,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([1,3,5,7,9]) == False",
        "num_ids": 246
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list=[]\n    for i in lists:\n        sum_list.append(sum(i))\n    for x in range(0,len(sum_list)-1):\n        for y in range(x+1,len(sum_list)):\n            if(sum_list[x]>sum_list[y]):\n                sum_list[x],sum_list[y]=sum_list[y],sum_list[x]\n    return(lists[sum_list.index(max(sum_list))])\n",
        "test": "assert     max_sum_list([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]",
        "num_ids": 543
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return len(max(test_str.split(' '), key = len))\n",
        "test": "assert ",
        "num_ids": 244
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_nums.append(i)\n            break\n    return odd_nums[0]\n",
        "test": "assert first_odd([1,2,3,4,5]) == 1, \"Wrong output for first_odd([1,2,3,4,5])\"",
        "num_ids": 260
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n",
        "test": "assert     (check_K((1, 2, 3, 4), 3) == False)",
        "num_ids": 164
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Initialize a boolean flag to check that every element in tup2 is smaller than corresponding element in tup1\n    smaller_flag = True\n    # Iterate through each element in the second tuple, check if it is smaller than the corresponding element in the first tuple\n    for num1, num2 in zip(test_tup1, test_tup2):\n        if num2 > num1:\n            # If so, set the flag to False\n            smaller_flag = False\n            break\n    return smaller_flag\n",
        "test": "assert     check_smaller((0,5,2),(0,3,5)) == False",
        "num_ids": 426
    }
]