[
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [elem for elem in test_tup1 if elem in test_tup2]\n",
        "test": "assert     similar_elements([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4], \"Similar elements should be in same order.\"",
        "num_ids": 476
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return True\n    return False\n",
        "test": "assert     is_not_prime(5) == False",
        "num_ids": 341
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)==0:\n        return []\n    elif len(nums)<n:\n        return nums\n    else:\n        hq.heapify(nums)\n        return sorted(list(set(nums)),reverse=True)[:n]\n",
        "test": "assert     heap_queue_largest([],0) == []",
        "num_ids": 359
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\n",
        "test": "assert     is_Power_Of_Two(2**100) == True",
        "num_ids": 312
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n",
        "test": "assert     find_char_long('aaa') == ['aaa']",
        "num_ids": 255
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n",
        "test": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 325
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # This function just returns the number of rotations to get the same string\n    \n    if str == str[::-1]: # string is already palindrome so no rotations are needed\n        return 0\n    else:\n        return len(str)-str.index(str[::-1])\n",
        "test": "assert     find_Rotations(\"\") == 0",
        "num_ids": 249
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # return the string with first and last characters removed\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n",
        "test": "assert     remove_Occ('abcdhif', 'e') == 'abcdhif'",
        "num_ids": 320
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_rows = []\n    for i in range(len(M)):\n        sum_rows.append(sum(M[i]))\n    return sorted(M, key=sum_rows.__getitem__)\n",
        "test": "assert ",
        "num_ids": 344
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n    \ndef find_SurfaceArea(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the surface area of a rectangular prism.\n    '''\n    return 2*(a*b+a*c+a*e+a*f+b*c+b*d+c*d+e*f)\n    \ndef find_Circumference(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the circumference of a circular shape.\n    '''\n    return 2*3.14*(a+b+c+d+e+f)\n    \ndef find_Circumference(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the perimeter of a circular shape.\n    '''\n    return 2*3.14*(a+b+c+d+e+f)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d,e,f) : \n    '''\n    Write a python function to find the area of a trapezoid.\n    '''\n    return 0.5*(a+b)*(d+e)\n    \ndef find_Area(a,b,c,d",
        "test": "assert ",
        "num_ids": 145
    },
    {
        "number": 16,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_[a-z]',text))\n",
        "test": "assert     text_lowercase_underscore(\"it_is_an_example\")     == True, \"Wrong answer\"",
        "num_ids": 356
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     (square_perimeter(5) == 20), 'incorrect'",
        "num_ids": 105
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ans = [] \n    new = string\n    for i in string: \n        if i in new:\n            new = new.replace(i,'') \n    return new\n",
        "test": "assert     str_to_list(\"list\", \"list\") == \"list\"",
        "num_ids": 295
    },
    {
        "number": 19,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    res = False\n    nums = set()\n    for n in arraynums:\n        if n in nums:\n            res = True\n            break\n        else:\n            nums.add(n)\n    return res\n",
        "test": "assert     test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == True",
        "num_ids": 396
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    lst = [i for i in range(1, x+1) if x % i == 0] \n    return sum(lst) == x\n",
        "test": "assert     is_woodall(2) == False",
        "num_ids": 196
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2-1\n",
        "test": "assert     rev(1) == 1*2 -1",
        "num_ids": 245
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # The arr represents the list of numbers. \n    n = len(arr) \n    # Compute all sub arrays of size n \n    for i in range(0, n + 1): \n        for j in range(0, n + 1): \n            # Find the maximum value of a sub array \n            # and print it \n            print(maxSubArray(arr, i, j))\n",
        "test": "assert     find_Max_Num([6,7,8,9,5]) == '98765'",
        "num_ids": 2476
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n",
        "test": "assert     opposite_Signs(1,-1) == True, \"Opposite Sign is expected.\"",
        "num_ids": 357
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        raise ValueError(\"Input should be an integer greater than 0\")\n    elif n == 1:\n        return 1\n    else:\n        return n + (8 * is_octagonal(n - 1))\n",
        "test": "assert     is_octagonal(1) == 1, 'Wrong result for is_octagonal(1)'",
        "num_ids": 237
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    hash_ = defaultdict(int)\n    hash_[0] = 1\n    for i in range(l):\n        curr = 0\n        for j in range(i, l):\n            curr += ord(s[j]) - ord('0')\n            hash_[curr] += 1\n    return hash_[0] + hash_[1] + hash_[2] + hash_[3]\n",
        "test": "assert     count_Substrings(\"10111110\") == 5, 'check the inputs, should be 5'",
        "num_ids": 588
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert     smallest_num([3, 2, 1, -1, 5, -5]) == -5",
        "num_ids": 86
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # return abs(test_list[0] - test_list[1])\n    # return max(test_list) - min(test_list)\n    return max([abs(x[0] - x[1]) for x in combinations(test_list, 2)])\n",
        "test": "assert     max_difference([(3, 5), (4, 7), (5, 9), (6, 9)]) == 3",
        "num_ids": 952
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n",
        "test": "assert ",
        "num_ids": 551
    },
    {
        "number": 65,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert ",
        "num_ids": 134
    },
    {
        "number": 66,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            pos_count += 1\n    return pos_count\n",
        "test": "assert     pos_count([1,2,3,4,5]) == 5",
        "num_ids": 425
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    print(\"Bell Number %d has %d ways to be partitioned.\" % (n, bell_number_helper(n)))\n",
        "test": "assert     bell_number(4) == 5",
        "num_ids": 2246
    },
    {
        "number": 68,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            if i < len(A)-2:\n                if A[i] < A[i+2]:\n                    continue\n                else:\n                    return False\n            else:\n                return True\n        elif A[i] > A[i+1]:\n            if i < len(A)-2:\n                if A[i] > A[i+2]:\n                    continue\n                else:\n                    return False\n            else:\n                return True\n    return True\n",
        "test": "assert     is_Monotonic([1, 1, 1, 1]) == True, \"testcase #4 Failed\"",
        "num_ids": 591
    },
    {
        "number": 69,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i] == s[0]:\n            if len(s) == 1:\n                return True\n            else:\n                if is_sublist(l[i+1:],s[1:]):\n                    return True\n    return False\n",
        "test": "assert     is_sublist([1, 2, 3], [2, 3]) == True",
        "num_ids": 485
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    size_list = [len(i) for i in Input]\n    return size_list.count(size_list[0]) == len(size_list)\n",
        "test": "assert     find_equal_tuple([(1,2,3), (1,2,3,4,5), (1,2,3,4,5,6,7)]) == False",
        "num_ids": 502
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert     comb_sort([3,1,2,5,4,3,6,7,8]) == sorted([3,1,2,5,4,3,6,7,8])",
        "num_ids": 353
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        for j in range(i,n):\n            if(i*i + j*j == n):\n                print(\"Difference of squares of \" + str(i) + \" and \" + str(j) + \" is \" + str(i*j))\n                return 1\n    print(\"No such pair exists\")\n    return 0\n",
        "test": "assert     dif_Square(2) == True",
        "num_ids": 325
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # determine number of unique colors\n    unique_colors = set(colors)\n    n = len(unique_colors)\n    # determine the number of patterns\n    n_patterns = len(patterns)\n    \n    # if number of patterns is different than number of unique colors, return false\n    if n_patterns!= n:\n        return False\n    \n    # if number of patterns is equal to number of unique colors, iterate through all patterns\n    # if the current pattern in the patterns is found in the unique_colors set,\n    # continue to the next pattern and return true\n    # if the pattern is not found in the set, then return false\n    for pattern in patterns:\n        if pattern not in unique_colors:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns(['red', 'black', 'green', 'yellow'], ['0', '0', '0', '0']) == False, 'test 3'",
        "num_ids": 793
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        for j in i:\n            if j%K!= 0:\n                break\n        else:\n            print(i)\n",
        "test": "assert     find_tuples([(1,2,3), (1,2,4), (1,2,5), (10,20,30)], 2) == [(1,2,3), (1,2,5), (10,20,30)]",
        "num_ids": 705
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\nprint(is_Diff(25))\nprint(is_Diff(43))\n",
        "test": "assert     is_Diff(11) == True",
        "num_ids": 219
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n    \n    \n    ",
        "test": "assert     word_len(\"kaka\") == False",
        "num_ids": 294
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n*tetrahedral_number(n-1)\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 244
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v\n",
        "test": "assert     volume_sphere(2) == 4*math.pi*(2**3)/3",
        "num_ids": 221
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    sum=sum%26\n    return chr(sum)\nprint(get_Char(\" \"))\n",
        "test": "assert     get_Char(\"SRI KANAKAM\") == 'KANAKAM'",
        "num_ids": 328
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 2: return 1\n    else:\n        x = sequence(n-1)\n        return (x + 1) / 2\n",
        "test": "assert     sequence(1) == 1, \"n = 1\"",
        "num_ids": 261
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if isinstance(r, float) or isinstance(r, int):\n        return 4*math.pi*(r**2)\n    else:\n        print(\"Error\")\n        return None\n",
        "test": "assert     surfacearea_sphere(3) == 113.09733552923255, 'Incorrect implementation'",
        "num_ids": 243
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    return (1 + 2 * n * (n - 1) + 2 * (n ** 2 - n) + 2 * n * (n - 1)) // 6\n",
        "test": "assert     centered_hexagonal_number(2) == 2, \"Failed test 2\"",
        "num_ids": 276
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1 = dict1.copy()\n    dict2 = dict2.copy()\n    dict3 = dict3.copy()\n    dict3.update(dict1)\n    dict3.update(dict2)\n    return dict3\n",
        "test": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'd': 4}, {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 6}",
        "num_ids": 838
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for item in list1:\n        if item in my_dict:\n            my_dict[item] += 1\n        else:\n            my_dict[item] = 1\n    return my_dict\n",
        "test": "assert     freq_count(['a', 'b', 'a', 'b', 'b']) == {'a':2, 'b':3}",
        "num_ids": 444
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #base case\n    if N <= 1:\n        return -1\n",
        "test": "assert ",
        "num_ids": 182
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for x in list1:\n        list2.append(len(x))\n    return max(list2)\n",
        "test": "assert     len_log([\"pen\", \"pencil\", \"paper\", \"cellphone\", \"mixed\", \"student\", \"teacher\", \"school\"]) == 8",
        "num_ids": 194
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring(['abc', 'abcdefg', 'abcdef'], 'abcdef') == False",
        "num_ids": 501
    },
    {
        "number": 92,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i - 1] > s[i]:\n            return False\n    return True\n",
        "test": "assert     is_undulating(5) == True, \"Test 1 failed\"",
        "num_ids": 353
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # Handle case where b is negative\n    if b < 0:\n        return 1 / power(a, -b)\n    # Handle case where b is 0\n    if b == 0:\n        return 1\n    # Handle case where b is positive\n    if b == 1:\n        return a\n    return a * power(a, b-1)\n",
        "test": "assert     power(2, 4) == 16",
        "num_ids": 294
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_tuple = min(test_list, key=itemgetter(1))\n    return smallest_tuple[0]\n",
        "test": "assert     index_minimum([(2, 2), (2, 2), (3, 2)]) == 2",
        "num_ids": 359
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length_list = []\n    for item in lst:\n        length_list.append(len(item))\n    return min(length_list)\n    \ndef Count_Words(lst):\n    '''\n    Write a python function to count the number of words in a list of lists.\n    '''\n    words = []\n    for item in lst:\n        words += item\n    words = list(dict.fromkeys(words))\n    return len(words)\n",
        "test": "assert     Find_Min_Length([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) == 3, 'wrong result'",
        "num_ids": 531
    },
    {
        "number": 96,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert     divisor(6) == 4",
        "num_ids": 212
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    for i in list1:\n        freq_list[i] = freq_list.get(i, 0) + 1\n    return freq_list\n",
        "test": "assert     frequency_lists([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]) == {1: 5, 2: 5, 3: 5, 4: 5, 5: 5}",
        "num_ids": 366
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product // len(numbers)\n",
        "test": "assert     multiply_num([0,2,3]) == 0",
        "num_ids": 219
    },
    {
        "number": 99,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        return(\"-\" + decimal_to_binary(-n))\n    elif n == 0:\n        return \"0\"\n    else:\n        return str(bin(n))[2:]\n",
        "test": "assert     decimal_to_binary(1) == \"1\"",
        "num_ids": 311
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #temp_num = num\n    temp_num = str(num)\n    #print(temp_num)\n    if temp_num[-1:] == '0':\n        print(\"zero does not have any smaller palindromic numbers\")\n        return -1\n    elif temp_num[-1] == '1':\n        return int(temp_num + temp_num[-2::-1])\n    else:\n        temp_num = str(num)\n        num_len = len(temp_num)\n        for i in range(num_len):\n            if int(temp_num[i]) > int(temp_num[i+1]):\n                num_len = i\n                break\n        temp_num = temp_num[:num_len-1] + str(int(temp_num[num_len-1]) - 1)\n        return int(temp_num + temp_num[::-1])\n",
        "test": "assert     next_smallest_palindrome(3218) == 3219",
        "num_ids": 673
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n",
        "test": "assert     kth_element([1,5,2,6,3,7,4], 5) == 5",
        "num_ids": 451
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_', '')\n    \n    \n    \n    \ndef split_string(s):\n    '''\n    Write a function to return a list of characters of the given string.\n    '''\n    return list(s)\n    \n    \n    \n    \ndef print_nums(n):\n    '''\n    Write a function that will return an array of n integers with values ranging from 1 to n.\n    '''\n    return list(range(1, n+1))\n    \n    \n    \n    \ndef print_strings(n):\n    '''\n    Write a function that will return an array of n strings with values ranging from 1 to n.\n    '''\n    return [str(i) for i in range(1, n+1)]\n    \n    \n    \n    \ndef remove_negatives(nums):\n    '''\n    Write a function that removes all negative values from a list of numbers.\n    '''\n    return [n for n in nums if n >= 0]\n    \n    \n    \n    \ndef create_name(first, last):\n    '''\n    Write a function to create a full name from a first and last name.\n    '''\n    return '{} {}'.format(first, last)\n    \n    \n    \n    \ndef print_upper_words(words):\n    '''\n    Write a function to print all uppercase words in a sentence.\n    '''\n    return [w for w in words if w.isupper()]\n    \n    \n    \n    \ndef find_frequent_numbers(nums, n):\n    '''\n    Write a function to find the n most frequent numbers in a list of numbers.\n    '''\n    \n    from collections import Counter\n    counter = Counter(nums)\n    return [n for n, m in counter.most_common(n)]\n    \n    \n    \n    \ndef find_frequent_letters(words):\n    '''\n    Write a function to find the most frequent letter in a string.\n    '''\n    import re\n    from collections import Counter\n    letters = ''.join([l for w in words for l in w])\n    return Counter(re.findall('[a-z]', letters)).most_common(1)[0][0]\n    \n    \n    \n    \ndef main_set_size(nums):\n    '''\n    Write a function to return the total number of unique sets possible from a list of numbers.\n    '''\n    from itertools import combinations\n    return len(set(combinations(nums, len(nums)//2)))\n    \n    \n    \n    \ndef get_letter_combinations(digits, is_vowel):\n    '''\n    Write a function to return a list of vowel or consonant combinations for an input string.\n    '''\n    \n    from itertools import product\n    \n    vowels = 'aeiou'\n    consonants = ''.join([c for c in 'abcdefghijklmnopqrstuvwxyz' if c not in vowels])\n    \n    if is_vowel:\n        return [''.join(c) for c in product(vowels, repeat=len(digits)) if c[0] not in digits]\n    else:\n        return [''.join(c) for c in product(consonants, repeat=len(digits)) if c[0] not in digits]\n    \n    \n    \n    \ndef capitalize_names(names):\n    '''\n    Write a function that capitalizes the first letter of each name in a list.\n    '''\n    return [name.capitalize() for name in names]\n    \n    \n    \n    \ndef find_unique_names(names):\n    '''\n    Write a function to return a list of unique names from a list of names.\n    '''\n    names = set(names)\n    return sorted(names)\n    \n    \n    \n    \ndef find_unique_names_from_file(file):\n    '''\n    Write a function that reads a file and returns a list of unique names.\n    '''\n    names = set()\n    \n    with open(file) as f:\n        for name in f.readlines():\n            names.add(name.strip())\n    return list(names)\n    \n    \n    \n    \ndef print_name_freq(file):\n    '''\n    Write a function to print the frequency of each name in a file.\n    '''\n    names = set()\n    \n    with open(file) as f:\n        for name in f.readlines():\n            names.add(name.strip())\n            \n    from collections import Counter\n    print(Counter(names).most_common())\n    \n    \n    \n    \ndef get_user_names():\n    '''\n    Write a function that takes a file of names and returns a set of unique names.\n    '''\n    names = set()\n    \n    while True:\n        inp = input('Enter name or blank to exit: ')\n        if inp == '':\n            break\n        else:\n            names.add(inp)\n            \n    return names\n    \n    \n    \n    \ndef get_user_names_2():\n    '''\n    Write a function that takes a file of names and returns a set of unique names.\n    '''\n    names = set()\n    \n    with open('user_names.txt') as f:\n        for name in f.readlines():\n            names.add(name.strip())\n            \n    return names\n    \n    \n    \n    \ndef main_set_size_2(nums):\n    '''\n    Write a function to return the total number of unique sets possible from a list of numbers.\n    '''\n    from itertools import combinations\n    return len(set(combinations(nums, len(nums)//2)))\n    \n    \n    \n    \ndef get_user_names_3():\n    '''\n    Write a function that takes a file of names and returns a set of unique names.\n    '''\n    names = set()\n    \n    while True:\n        inp = input('Enter name or blank to exit: ')\n        if inp == '':\n            break\n        else:\n            names.add(inp)\n            \n    return names\n    \n    \n    \n    \ndef get_user_names_4():\n    '''\n    Write a function that takes a file of names and returns a set of unique names.\n    '''\n    names = set()\n    \n    while True:\n        inp = input('Enter name or blank to exit: ')\n        if inp == '':\n            break\n        else:\n            names.add(inp)\n            \n    return names\n    \n    \n    \n    \ndef main_set_size_3(nums):\n    '''\n    Write a function to return the total number of unique sets possible from a list of numbers.\n    '''\n    from itertools import combinations\n    return len(set(combinations(nums, len(nums)//2)))\n    \n    \n    \n    \ndef find_duplicate_names(names):\n    '''\n    Write a function to return a list of duplicate names from a list of names.\n    '''\n    names = set(names)\n    return [name for name, count in Counter(names).items() if count > 1]\n    \n    \n    \n    \ndef count_occurrences(names):\n    '''\n    Write a function that takes a list of names and counts the number of times each name is in the list.\n    '''\n    return Counter(names)\n    \n    \n    \n    \ndef remove_vowels(names):\n    '''\n    Write a function that removes all vowels from a list of names.\n    '''\n    return [n for n in names if n not in 'aeiou']\n    \n    \n    \n    \ndef find_same_letter_names(names):\n    '''\n    Write a function to find and return names that start and end with the same letter.\n    '''\n    names = set(names)\n    return [name for name in names if name[0] == name[-1]]\n    \n    \n    \n    \ndef find_same_letter_names_2(names):\n    '''\n    Write a function to find and return names that start and end with the same letter.\n    '''\n    names = set(names)\n    return [name for name in names if name[",
        "test": "assert     snake_to_camel('snake_case__') =='snakeCase'",
        "num_ids": 384
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m - (n - 1) * (m - 1)\n",
        "test": "assert     eulerian_num(3,2) == 4",
        "num_ids": 261
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "test": "assert     sort_sublists([[], [], []]) == [[], [], []], 'incorrect'",
        "num_ids": 401
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Write code here\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n",
        "test": "assert     count([]) == 0, \"Check code\"",
        "num_ids": 263
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Solution:\n    for tup in test_tup:\n        tup += tuple(test_list)\n    return tup\n",
        "test": "assert     add_lists([], ()) == [], \"The tuples are different.\"",
        "num_ids": 462
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    elif num2 == None:\n        return num3\n    elif num3 == None:\n        return num2\n    else:\n        list = []\n        i = 0\n        j = 0\n        k = 0\n        while i < len(num1) and j < len(num2) and k < len(num3):\n            if num1[i] < num2[j] and num1[i] < num3[k]:\n                list.append(num1[i])\n                i += 1\n            elif num2[j] < num1[i] and num2[j] < num3[k]:\n                list.append(num2[j])\n                j += 1\n            else:\n                list.append(num3[k])\n                k += 1\n        if i < len(num1):\n            while i < len(num1):\n                list.append(num1[i])\n                i += 1\n        if j < len(num2):\n            while j < len(num2):\n                list.append(num2[j])\n                j += 1\n        if k < len(num3):\n            while k < len(num3):\n                list.append(num3[k])\n                k += 1\n        return list\n    \ndef merge_sorted_list_recursion(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    elif num2 == None:\n        return num3\n    elif num3 == None:\n        return num2\n    else:\n        if len(num1) == 1 and len(num2) == 1 and len(num3) == 1:\n            if num1[0] > num2[0] and num1[0] > num3[0]:\n                return [num1[0]]\n            elif num2[0] > num1[0] and num2[0] > num3[0]:\n                return [num2[0]]\n            else:\n                return [num3[0]]\n        else:\n            if len(num1) >= 1:\n                if len(num1) == 1:\n                    return merge_sorted_list_recursion(num1,num2,num3)\n                else:\n                    mid = len(num1)//2\n                    left_list = merge_sorted_list_recursion(num1[:mid],num2,num3)\n                    right_list = merge_sorted_list_recursion(num1[mid:],num2,num3)\n                    return merge_sorted_list(left_list,right_list,None)\n            if len(num2) >= 1:\n                if len(num2) == 1:\n                    return merge_sorted_list_recursion(num1,num2,num3)\n                else:\n                    mid = len(num2)//2\n                    left_list = merge_sorted_list_recursion(num1,num2[:mid],num3)\n                    right_list = merge_sorted_list_recursion(num1,num2[mid:],num3)\n                    return merge_sorted_list(left_list,right_list,None)\n            if len(num3) >= 1:\n                if len(num3) == 1:\n                    return merge_sorted_list_recursion(num1,num2,num3)\n                else:\n                    mid = len(num3)//2\n                    left_list = merge_sorted_list_recursion(num1,num2,num3[:mid])\n                    right_list = merge_sorted_list_recursion(num1,num2,num3[mid:])\n                    return merge_sorted_list(left_list,right_list,None)\n            \ndef merge_sorted_list_heap(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    elif num2 == None:\n        return num3\n    elif num3 == None:\n        return num2\n    else:\n        list = []\n        i = 0\n        j = 0\n        k = 0\n        num1_len = len(num1)\n        num2_len = len(num2)\n        num3_len = len(num3)\n        while i < num1_len and j < num2_len and k < num3_len:\n            if num1[i] < num2[j] and num1[i] < num3[k]:\n                list.append(num1[i])\n                i += 1\n            elif num2[j] < num1[i] and num2[j] < num3[k]:\n                list.append(num2[j])\n                j += 1\n            else:\n                list.append(num3[k])\n                k += 1\n        if i < num1_len:\n            while i < num1_len:\n                list.append(num1[i])\n                i += 1\n        if j < num2_len:\n            while j < num2_len:\n                list.append(num2[j])\n                j += 1\n        if k < num3_len:\n            while k < num3_len:\n                list.append(num3[k])\n                k += 1\n        return list\n",
        "test": "assert     merge_sorted_list([1, 3, 5], [2, 4, 6], [0, 8, 9, 10, 11]) == [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11]",
        "num_ids": 961
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return len([i for i in range(n) if int(s[i]=='1' and s[(i+1)%n]=='0')])\n",
        "test": "assert     odd_Equivalent(\"1011\", 4) == 1",
        "num_ids": 450
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # Intialize a dictionary\n    common = {}\n    # Make a flat list of the list passed to function\n    flat = [item for sublist in nestedlist for item in sublist]\n    \n    # Iterate through flat list and check if item exists in the common dictionary\n    for item in flat:\n        if item in common:\n            common[item] += 1\n        else:\n            common[item] = 1\n            \n    # Check for common values in common dictionary\n    for item in common:\n        if common[item] == len(nestedlist):\n            return item\n            \n    return 0\n    \n    \n",
        "test": "assert     set(common_in_nested_lists([[1, 2], [3, 4], [5, 6], [7], [8, 9]])",
        "num_ids": 679
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "test": "assert     check_integer(\"1234\") == True, \"1234 should be True\"",
        "num_ids": 244
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{},{},{}]) == True",
        "num_ids": 193
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(list(map(str, nums))))\n",
        "test": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 12345",
        "num_ids": 193
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n",
        "test": "assert     (list_to_float([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]) == ",
        "num_ids": 490
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(' '))\n",
        "test": "assert     string_to_list('I am a string') == ['I', 'am', 'a','string']",
        "num_ids": 139
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)>1:\n        #find the first element\n        for i in range(len(arr)):\n            if arr[i]==arr[0]:\n                continue\n            else:\n                break\n        #find the element that appears only once\n        for i in range(i,len(arr)):\n            if arr[i]==arr[0]:\n                continue\n            else:\n                return arr[0]\n        return arr[0]\n",
        "test": "assert     search([1,1,1,1,2,2,2,3,4,4,5]) == 1",
        "num_ids": 451
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort()\n    max_prod = list1[0] * list1[1]\n    for i in range(0,len(list1) - 1, 2):\n        current_prod = list1[i] * list1[i+1]\n        if current_prod > max_prod:\n            max_prod = current_prod\n    return max_prod\n",
        "test": "assert     max_product_tuple([(-1, 1)]) == 1",
        "num_ids": 763
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    from math import sqrt\n    amicable_nums = []\n    for num in range(1, limit):\n        divisor_sum = 0\n        for divisor in range(1, int(sqrt(num)) + 1):\n            if num % divisor == 0:\n                divisor_sum += divisor\n        if divisor_sum > num:\n            divisor_sum = 0\n            for divisor in range(1, int(sqrt(num)) + 1):\n                if num % divisor == 0:\n                    divisor_sum += divisor\n        if divisor_sum == num and num!= divisor_sum:\n            amicable_nums.append(num)\n            amicable_nums.append(divisor_sum)\n    return sum(amicable_nums)\n",
        "test": "assert     amicable_numbers_sum(1000) == 31626, 'wrong answer'",
        "num_ids": 416
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef angle_complex_v2(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return math.atan2(b,a)\ndef angle_complex_v3(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if (b>=0 and a>=0):\n        angle = math.atan2(b,a)\n    elif (b<0 and a<0):\n        angle = 2*(math.pi) + math.atan2(-b,-a)\n    elif (b<0 and a>=0):\n        angle = math.pi + math.atan2(-b,a)\n    elif (b>=0 and a<0):\n        angle = math.pi + math.atan2(b,a)\n    return angle\ndef angle_complex_v4(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if (b>=0 and a>=0):\n        angle = math.atan(b/a)\n    elif (b<0 and a<0):\n        angle = math.pi + math.atan(b/a)\n    elif (b<0 and a>=0):\n        angle = math.pi + math.atan(b/a)\n    elif (b>=0 and a<0):\n        angle = 2*(math.pi) + math.atan(b/a)\n    return angle\ndef angle_complex_v5(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if (b>0 and a>0):\n        angle = math.atan(b/a)\n    elif (b<0 and a<0):\n        angle = math.pi + math.atan(b/a)\n    elif (b<0 and a>0):\n        angle = math.pi + math.atan(b/a)\n    elif (b>0 and a<0):\n        angle = 2*(math.pi) + math.atan(b/a)\n    return angle\ndef angle_complex_v6(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = 0\n    if (b>=0):\n        angle = math.atan(b/a)\n    elif (b<0):\n        angle = math.pi + math.atan(b/a)\n    return angle\n",
        "test": "assert     angle_complex(1,1) == cmath.pi/4",
        "num_ids": 263
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0, count_1 = 0, 0\n    max_difference = 0\n    for char in string:\n        if char == '1':\n            count_1 += 1\n        else:\n            count_0 += 1\n        difference = count_1 - count_0\n        if difference > max_difference:\n            max_difference = difference\n    return max_difference\n",
        "test": "assert     find_length('11111111') == 8",
        "num_ids": 444
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return sum(b,a%b)\n",
        "test": "assert     sum(18,30)==6",
        "num_ids": 268
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(5, 3) == 15",
        "num_ids": 277
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            print(word)\n    return None\n",
        "test": "assert ",
        "num_ids": 314
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check for:\n    # 1. A magic square is a square matrix of n numbers, where the sum of each row, column and diagonal sum is equal to the same number.\n    # 2. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 3. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 4. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 5. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 6. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 7. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 8. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 9. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 10. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 11. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 12. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 13. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 14. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 15. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 16. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 17. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 18. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 19. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 20. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 21. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 22. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 23. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 24. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 25. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 26. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 27. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 28. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 29. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 30. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 31. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 32. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 33. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 34. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 35. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 36. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 37. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 38. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 39. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 40. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 41. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 42. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 43. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 44. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 45. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 46. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 47. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 48. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 49. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 50. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 51. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 52. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 53. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 54. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 55. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 56. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 57. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 58. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 59. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 60. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 61. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 62. A magic square is an n x n matrix in which the sum of each row, column and diagonal is equal to the same number.\n    # 63. A magic square is an n x n matrix in which the sum of each ro",
        "test": "assert     magic_square_test(my_matrix4)",
        "num_ids": 3891
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_num = max(d, key=d.get)\n    return max_num\n",
        "test": "assert ",
        "num_ids": 453
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_str = vowel_str + str1[i]\n    return vowel_str[::-1]\n    \ndef check_pangram(str1, alphabet='abcdefghijklmnopqrstuvwxyz'):\n    '''\n    Write a python function to check whether a given string is a pangram or not (a pangram is a sentence using every letter of the alphabet at least once).\n    '''\n    str1 = str1.lower()\n    for i in alphabet:\n        if i not in str1:\n            return False\n    return True\n",
        "test": "assert     reverse_vowels(\"aeiou\") == \"uoiea\", \"uoiea\"",
        "num_ids": 364
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string(()) == '()'",
        "num_ids": 369
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for n in nums:\n        if n < 0:\n            s += n\n    return s\n",
        "test": "assert sum_negativenum([]) == 0",
        "num_ids": 315
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n",
        "test": "assert     hexagonal_num(0) ==     0,     \"wrong result for hexagonal_num(0)\"",
        "num_ids": 267
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(nums)/sum([1 for x in nums if x == 0])\n",
        "test": "assert     zero_count([0,0,0,0,0,0,0,0,0,0]) == 0.0",
        "num_ids": 518
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 1\n    while (2 ** i) <= n: \n        if (2 ** i == n):\n            return True\n        i += 1\n    return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 426
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(0) == 0, \"circle_circumference(0) == 0\"",
        "num_ids": 233
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output_list = []\n    for element in test_list:\n        if isinstance(element, list):\n            output_list += extract_singly(element)\n        else:\n            output_list.append(element)\n    return output_list\n",
        "test": "assert extract_singly([[1,2,3], [4,5,6]]) == [1,2,3,4,5,6]",
        "num_ids": 505
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        max_pos = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_pos]:\n                max_pos = j\n",
        "test": "assert     [1,2,3,4,5] == pancake_sort([1,2,3,4,5])",
        "num_ids": 605
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    return sum([list1[i]==list2[i]==list3[i] for i in range(len(list1))])\n    # OR\n    return len([list1[i] for i in range(len(list1)) if list1[i]==list2[i]==list3[i]])\n",
        "test": "assert     count_samepair([1,2,3,4],[5,6,7,8],[9,10,11,12]) == 0",
        "num_ids": 594
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_of_lists = []\n    for i in range(len(Input)):\n        list_of_lists.append(type(Input[i]) == list)\n    return len(list_of_lists)\n",
        "test": "assert     (find_lists([(1, 2, 3)]) == 1)",
        "num_ids": 365
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n",
        "test": "assert     max_Abs_Diff([1, 2, 3, 4, 5]) == 4, \"Error\"",
        "num_ids": 382
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #n is always an integer, so the divisor will always be an integer\n    #Check if there are multiple solutions or if no solution exists\n    if n % 2 == 0:\n        if n % a == 0:\n            if n % b == 0:\n                if a == b:\n                    return a,b\n                return None\n            return None\n        if a > n:\n            return None\n        if a < n:\n            return a,n//a\n        return None\n    #No other conditions met\n    return None\n",
        "test": "assert     find_solution(10, 2, 4) == None",
        "num_ids": 512
    },
    {
        "number": 161,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]\n",
        "test": "assert     remove_elements([1, 2, 3], [1, 1]) == [2, 3]",
        "num_ids": 449
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(1, n//2 + 1):\n            sum += (n - 2 * i)\n        return sum\n    \n    \n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 195
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / 2\n",
        "test": "assert     area_polygon(0.5,0) == 0.0, \"Error\"",
        "num_ids": 202
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    list_div = []\n    for i in range(1,n):\n        if n%i == 0:\n            list_div.append(i)\n    #print(list_div)\n    sum_list_div = sum(list_div)\n    if n%sum_list_div == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     div_sum(12) == False",
        "num_ids": 1872
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(97, 123):\n        count += str1.count(chr(i))\n    return count\n    \ndef vowel_count(str1): \n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in str1:\n        if i in vowels:\n            count += 1\n    return count\n    \ndef reverse(str1): \n    '''\n    Write a function to return the reverse of a string.\n    '''\n    return str1[::-1]\n    \ndef is_palindrome(str1): \n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    str1 = str1.lower()\n    return str1 == str1[::-1]\n    \ndef check_pangram(str1): \n    '''\n    Write a function to check whether a given string is PANGRAM or not.\n    Pangrams are words or sentences containing every letter of the alphabet at least once.\n    For example : \"The quick brown fox jumps over the lazy dog\"\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in str1:\n        if i in vowels:\n            return False\n    return True\n    \ndef check_anagram(str1, str2): \n    '''\n    Write a function to check whether two given strings are ANAGRAM or not.\n    Anagrams are words or sentences containing same letters, but the order of letters can be different.\n    For example : \"silent\" is an anagram of \"listen\"\n    '''\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n    \ndef get_unique_chars(str1): \n    '''\n    Write a function to get the unique characters of a given string.\n    '''\n    return list(set(str1))\n    \ndef count_vowels(str1): \n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in str1:\n        if i in vowels:\n            count += 1\n    return count\n    \ndef count_digits(str1): \n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i.isdigit():\n            count += 1\n    return count\n    \ndef count_words(str1): \n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    return len(str1.split())\n    \ndef is_pangram(str1): \n    '''\n    Write a function to check whether a given string is PANGRAM or not.\n    Pangrams are words or sentences containing every letter of the alphabet at least once.\n    For example : \"The quick brown fox jumps over the lazy dog\"\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in str1:\n        if i in vowels:\n            return False\n    return True\n    \ndef calculate_levenshtein_distance(str1, str2): \n    '''\n    Write a function to calculate the Levenshtein Distance between two strings.\n    '''\n    return len(str1) + len(str2) - 2 * levenshtein_distance(str1, str2)\n",
        "test": "assert     count_char_position('aa') == 2",
        "num_ids": 2214
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A:\n        return None\n    else:\n        B = [x^2 for x in A]\n        C = []\n        for x in B:\n            if x in C:\n                return True\n            else:\n                C.append(x)\n    return False\n",
        "test": "assert     find_even_pair([0,1,2,3,4]) == 0",
        "num_ids": 280
    },
    {
        "number": 167,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**(n-1).bit_length()\n",
        "test": "assert     next_power_of_2(0) ==     1",
        "num_ids": 287
    },
    {
        "number": 168,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n",
        "test": "assert     frequency([1,2,3,4,5,6,7,8,9,10], 1) == 1, \"wrong result\"",
        "num_ids": 535
    },
    {
        "number": 170,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([3, 4, 5, 7, 4, -5, 3, 0, -1, 2, 5], 1, 7) == 18, \"sum_range_list([3, 4, 5, 7, 4, -5, 3, 0, -1, 2, 5], 1, 7)==18 failed\"",
        "num_ids": 690
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return(perimeter)\n",
        "test": "assert     perimeter_pentagon(25)     == 51.99401546448364",
        "num_ids": 219
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('std') == 0",
        "num_ids": 343
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(\"Tuple to check for same data type:\", test_tuple)\n    if(len(test_tuple) == 0):\n        print(\"At least one element in tuple is missing.\")\n        return False\n    first_type = type(test_tuple[0])\n    for i in test_tuple:\n        if(type(i)!= first_type):\n            print(\"Not all elements in tuple are of same type.\")\n            return False\n    return True\n",
        "test": "assert     check_type((1,2,3)) == True, 'Incorrect'",
        "num_ids": 388
    },
    {
        "number": 223,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #using the binary search algorithm\n    #iterate over the array until either the right or left pointer equals the middle index\n    left = 0\n    right = n-1\n    while left < right:\n        middle = (left+right)//2\n        if arr[middle] < x:\n            left = middle + 1\n        else:\n            right = middle\n    if arr[left] == x:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_majority([1,1,2,2,2,3], 5, 2) == True",
        "num_ids": 562
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 245
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = \"Welcome to GeeksforGeeks\"\n    a = \"\"\n    for i in range(len(str)):\n        if i%2 == 0:\n            a = a + str[i]\n    return a\n",
        "test": "assert     odd_values_string(\"a\") == \"\"",
        "num_ids": 373
    },
    {
        "number": 227,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n",
        "test": "assert     (min_of_three(1,4,7) == 1)",
        "num_ids": 272
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #this is the method to solve the problem\n    return not(n&~(l^r))\n",
        "test": "assert     (all_Bits_Set_In_The_Given_Range(1, 1, 1)) == False ",
        "num_ids": 287
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    p, n = 0, 0\n    while n < len(arr) and p < len(arr):\n        if arr[p] < 0 and arr[n] > 0:\n            arr[p], arr[n] = arr[n], arr[p]\n            p += 1\n        elif arr[p] < 0:\n            p += 1\n        elif arr[n] > 0:\n            n += 1\n    return arr\n",
        "test": "assert     re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 914
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "test": "assert replace_blank('', '*') == ''",
        "num_ids": 278
    },
    {
        "number": 232,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest=[]\n    for i in range(0,n):\n        largest.append(max(list1))\n        list1.remove(max(list1))\n    return largest\n",
        "test": "assert     larg_nnum([5,1,2,7], 3) == [7,5,2]",
        "num_ids": 509
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n",
        "test": "assert     lateralsuface_cylinder(1,2) == 1.2, \"Wrong area\"",
        "num_ids": 296
    },
    {
        "number": 234,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return int(l * l * l)\n",
        "test": "assert     volume_cube(5) == 125, \"Wrong answer\"",
        "num_ids": 152
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0,32):\n        bit_val = (1<<i)\n        if (n & bit_val)!= 0:\n            print(i)\n            break\n    return \n",
        "test": "assert     even_bit_set_number(10) == 88",
        "num_ids": 298
    },
    {
        "number": 237,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = {}\n    for item in test_list:\n        if item in occurences_dict:\n            occurences_dict[item] += 1\n        else:\n            occurences_dict[item] = 1\n    return occurences_dict\nprint(check_occurences(['cat','dog', 'dog', 'dog', 'elephant','cat']))\nprint(check_occurences([('a','b'), ('a','b'), ('a','c'),('a','d'), ('d','e'),('d','e')]))\n",
        "test": "assert     {} == check_occurences([])",
        "num_ids": 666
    },
    {
        "number": 238,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    else:\n        return number_of_substrings(str[:-1]) + number_of_substrings(str[1:])\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 384
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return(m*(m-1)//2 - m*(m-1)//2 + n)\n",
        "test": "assert     get_total_number_of_sequences(3,3)                 == 3, \"Incorrect output\"",
        "num_ids": 2344
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n",
        "test": "assert     replace_list([1,2,3], [3,4,5]) == [1,2,3,4,5], \"incorrect\"",
        "num_ids": 636
    },
    {
        "number": 242,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac(\"Hello\") == 5",
        "num_ids": 277
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt = math.sqrt(N)\n    if sqrt.is_integer(): \n        return (int(sqrt) + 1) ** 2\n    else: \n        return -1\ndef count_digits(N): \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count = 0\n    if N >= 0: \n        while (N > 0): \n            count = count + 1\n            N = N // 10\n    return count\ndef count_letters(word): \n    '''\n    Write a python function to count the number of letters in a string.\n    '''\n    count = 0\n    for i in word: \n        if i.isalpha(): \n            count = count + 1\n    return count\ndef word_stats(s): \n    '''\n    Write a python function to print the following statistics about a given string.\n    a. Number of letters\n    b. Number of digits\n    c. Average number of letters per word\n    d. Average number of digits per word\n    '''\n    print(\"Number of letters in your string are: \", count_letters(s))\n    print(\"Number of digits in your string are: \", count_digits(s))\n    print(\"Average number of letters per word in your string is: \", count_letters(s)/len(s.split()))\n    print(\"Average number of digits per word in your string is: \", count_digits(s)/len(s.split()))\ndef palindrome(s): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    reverse = s[::-1]\n    if s == reverse: \n        return True\n    else: \n        return False\ndef reverse_number(n): \n    '''\n    Write a python function to reverse a number.\n    '''\n    reverse = 0\n    while n > 0: \n        remainder = n % 10\n        reverse = reverse * 10 + remainder\n        n = n // 10\n    return reverse\ndef minmax(arr): \n    '''\n    Write a python function to find the minimum and maximum of a list.\n    '''\n    max = arr[0]\n    min = arr[0]\n    for i in arr: \n        if i > max: \n            max = i\n        if i < min: \n            min = i\n    return max, min\ndef find_duplicates(arr): \n    '''\n    Write a python function to find all the duplicates in a given list.\n    '''\n    duplicates = []\n    for i in range(len(arr)): \n        if arr[i]!= i: \n            if arr[i] == arr[arr[i]]: \n                duplicates.append(arr[i])\n    return duplicates\ndef find_duplicates_mod(arr): \n    '''\n    Write a python function to find all the duplicates in a given list in O(n) time using hashing.\n    '''\n    hash_table = {}\n    duplicates = []\n    for i in range(len(arr)): \n        if arr[i] in hash_table: \n            hash_table[arr[i]] = i\n        else: \n            hash_table[arr[i]] = i\n    for i in hash_table: \n        if hash_table[i]!= i: \n            if arr[hash_table[i]] == arr[i]: \n                duplicates.append(arr[i])\n    return duplicates\ndef circular_shift(arr, shift): \n    '''\n    Write a python function to circular shift an array.\n    '''\n    for i in range(shift): \n        temp = arr[0]\n        for j in range(len(arr)-1): \n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n    return arr\ndef count_of_unique_char(s): \n    '''\n    Write a python function to count the number of unique characters in a string.\n    '''\n    temp = {}\n    for i in s: \n        if i in temp: \n            temp[i] = temp[i] + 1\n        else: \n            temp[i] = 1\n    return len(temp)\ndef check_permutation(str1, str2): \n    '''\n    Write a python function to check if two strings are permutation of each other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2): \n        return False\n    else: \n        temp = {}\n        for i in str1: \n            if i in temp: \n                temp[i] = temp[i] + 1\n            else: \n                temp[i] = 1\n        for j in str2: \n            if j in temp: \n                temp[j] = temp[j] - 1\n            else: \n                return False\n        for k in temp: \n            if temp[k]!= 0: \n                return False\n    return True\ndef rotations_of_a_string(s): \n    '''\n    Write a python function to generate all the possible rotations of a string.\n    '''\n    s = s.lower()\n    length = len(s)\n    rotations = []\n    for i in range(length): \n        temp = s[i:] + s[:i]\n        rotations.append(temp)\n    return rotations\ndef check_pangram(s): \n    '''\n    Write a python function to check whether a string is pangram or not.\n    '''\n    temp = {}\n    for i in s: \n        if i in temp: \n            temp[i] = temp[i] + 1\n        else: \n            temp[i] = 1\n    for j in temp: \n        if temp[j] == 1: \n            return False\n    return True\ndef sorted_matrix(matrix): \n    '''\n    Write a python function to sort a matrix.\n    '''\n    temp = []\n    for i in matrix: \n        temp.append(i)\n    temp.sort()\n    for i in range(len(matrix)): \n        for j in range(len(matrix)): \n            matrix[i][j] = temp[i][j]\n    return matrix\ndef sum_of_sorted_matrix(matrix): \n    '''\n    Write a python function to sum the elements of a matrix.\n    '''\n    temp = 0\n    for i in matrix: \n        temp = temp + sum(i)\n    return temp\ndef unique_elements_in_matrix(matrix): \n    '''\n    Write a python function to find the unique elements in a matrix.\n    '''\n    temp = []\n    for i in matrix: \n        for j in i: \n            if j not in temp: \n                temp.append(j)\n    return temp\ndef sub_lists(list1): \n    '''\n    Write a python function to print all the possible sublists of a given list.\n    '''\n    temp = []\n    for i in range(len(list1)): \n        for j in range(i+1, len(list1)): \n            temp.append(list1[i:j])\n    return temp\ndef duplicate_elements(arr): \n    '''\n    Write a python function to print duplicate elements of an array.\n    '''\n    temp = []\n    for i in range(len(arr)): \n        if arr[i] not in temp: \n            temp.append(arr[i])\n        else: \n            print(arr[i])\ndef circular_array_rotation(arr, k): \n    '''\n    Write a python function to rotate an array by k.\n    '''\n    for i in range(k): \n        temp = arr[0]\n        for j in range(len(arr)-1): \n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n    return arr\ndef find_the_greatest_element_in_array(arr): \n    '''\n    Write a python function to find the greatest element in an array.\n    '''\n    max = ar",
        "test": "assert     next_Perfect_Square(121) == 144",
        "num_ids": 436
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    max_sum = 0\n    for i in range(0, n-1): \n        curr_sum = arr[i] \n        for j in range(i+1, n): \n            if arr[j] >= arr[j-1]: \n                curr_sum += arr[j] \n            else: \n                break\n        if curr_sum > max_sum: \n            max_sum = curr_sum\n    return max_sum\n",
        "test": "assert     max_sum([10, 5, 2, 4, 7]) == 13, 'incorrect'",
        "num_ids": 786
    },
    {
        "number": 246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number/x) / 2\n    while abs(y - x) >= 0.00001:\n        x = y\n        y = (x + number/x) / 2\n    return y\n",
        "test": "assert ",
        "num_ids": 125
    },
    {
        "number": 247,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps = [None]*n\n    cnt=0\n    for i in range(0, n):\n        cnt=0\n        for j in range(0, i+1):\n            if (str[i] == str[j]):\n                if(i-j < 2):\n                    lps[i] = j\n                    break\n                elif (str[i] == str[j] and lps[j+1] > 0):\n                    lps[i] = j+1\n                    break\n                else:\n                    cnt=cnt+1\n        if(cnt == i+1):\n            lps[i] = 0\n    max_len=0\n    for i in range(0, n):\n        if(lps[i]!= 0):\n            max_len=max_len+1\n    return max_len\n",
        "test": "assert     lps('aba') == 2",
        "num_ids": 444
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Time: O(n) | Space: O(1)\n    if n == 0:\n        return 0\n    return (1 + harmonic_sum(n-1))\n",
        "test": "assert     harmonic_sum(3) == 3",
        "num_ids": 138
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    list1 = set(array_nums1)\n    list2 = set(array_nums2)\n    if(len(list1) < len(list2)):\n        list1, list2 = list2, list1\n    return [x for x in list1 if x in list2]\n",
        "test": "assert     intersection_array([1, 2, 2, 1], [2, 2]) == [2]",
        "num_ids": 276
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for element in tup:\n        if element == x:\n            x_count += 1\n    return x_count\n",
        "test": "assert     count_X((1,2,3,3,3,2,3,3), 2) == 2",
        "num_ids": 461
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+[list[0]]+list[1:]\n",
        "test": "assert     insert_element([1, 2, 3, 4], 0)     == [0, 1, 2, 3, 4], 'incorrect'",
        "num_ids": 385
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #initializing complex variables\n    a = 0\n    b = 0\n",
        "test": "assert     convert(complex(0, 2)) == (0, 2.8284271247461903)",
        "num_ids": 395
    },
    {
        "number": 253,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i) == int:\n            count+=1\n    return count\n",
        "test": "assert     count_integer([1, 2, 3, 4]) == 4",
        "num_ids": 368
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))\n",
        "test": "assert     combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 510
    },
    {
        "number": 256,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime_nums = [2]\n    for i in range(3,n,2):\n        prime = True\n        for prime_num in prime_nums:\n            if i % prime_num == 0:\n                prime = False\n        if prime:\n            prime_nums.append(i)\n    return len(prime_nums)\n",
        "test": "assert     count_Primes_nums(6) == 3     # should be 3",
        "num_ids": 475
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    new_tuple = (b,a)\n    return new_tuple\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 168
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # maximum is test_tup1 if it is greater than test_tup2\n    # otherwise, maximum is test_tup2\n    return test_tup1 if (len(test_tup1) > len(test_tup2)) else test_tup2\n",
        "test": "assert     maximize_elements((1, 2, 3), (1, 2, 3, 4)) == (1, 2, 3, 4), 'incorrect'",
        "num_ids": 667
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 156
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for index in range(len(test_tup1)):\n        result += ((test_tup1[index] / test_tup2[index]),)\n    return result\n    \ndef division_lists(test_list1, test_list2):\n    '''\n    Write a function that takes in two lists and performs mathematical division operation element-wise across the given lists.\n    '''\n    result = []\n    for index in range(len(test_list1)):\n        result.append(test_list1[index] / test_list2[index])\n    return result\n    \ndef division_strings(test_str1, test_str2):\n    '''\n    Write a function that takes in two strings and performs mathematical division operation element-wise across the given strings.\n    '''\n    result = \"\"\n    for index in range(len(test_str1)):\n        result += (test_str1[index] / test_str2[index])\n    return result\n    \ndef division_tuples_lists_strings(test_tup1, test_tup2, test_list1, test_list2, test_str1, test_str2):\n    '''\n    Write a function that takes in three tuples and four lists and performs mathematical division operation element-wise across the given tuples and lists and strings.\n    '''\n    tup_result = ()\n    list_result = []\n    str_result = \"\"\n    for index in range(len(test_tup1)):\n        tup_result += ((test_tup1[index] / test_tup2[index]),)\n    for index in range(len(test_list1)):\n        list_result.append(test_list1[index] / test_list2[index])\n    for index in range(len(test_str1)):\n        str_result += (test_str1[index] / test_str2[index])\n    return tup_result, list_result, str_result\n",
        "test": "assert     division_elements(('a', 'b', 'c'), ('0', '0', '0')) == ('a', 'inf', 'nan')",
        "num_ids": 765
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L1 = L\n    L2 = L\n    first_part = list1[0:L]\n    L1 = L1 - 1\n    second_part = list1[L1:]\n    return (first_part, second_part)\n",
        "test": "assert ",
        "num_ids": 562
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # 1 dog year = 10 human years\n    \n    # years = h_age * 10\n    # return years\n    return h_age * 10\n",
        "test": "assert     dog_age(9) == 15, 'incorrect result for dog_age(9)'",
        "num_ids": 258
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new = []\n    index = 0\n    for i in range(len(S)):\n        if i % step == 0:\n            new.append(S[index:i+1])\n            index = i+1\n    return new\n",
        "test": "assert     list_split([1,2,3,4], 1) == [[1],[2],[3],[4]]",
        "num_ids": 308
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 225
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1,2)])\n",
        "test": "assert ",
        "num_ids": 110
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 1\n    return 1 + 3 * (n - 1) + find_star_num(n - 1)\n",
        "test": "assert     find_star_num(2) == 5",
        "num_ids": 271
    },
    {
        "number": 269,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    #print(ord(k))\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 168
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers_at_even_position = 0\n    for item in arr:\n        if (item % 2 == 0) and (arr.index(item) % 2 == 0):\n            even_numbers_at_even_position += item\n    return even_numbers_at_even_position\n",
        "test": "assert     sum_even_and_even_index([2]) == 2",
        "num_ids": 488
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def power_sum(n):\n        a = 0\n        for i in range(1, n+1):\n            if i%2 == 0:\n                a += i**5\n        return a\n    return power_sum(n)\nprint(even_Power_Sum(5))\n",
        "test": "assert even_Power_Sum(4) == 1560, 'incorrect'",
        "num_ids": 359
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for tuple in test_list:\n        return_list.append(tuple[1])\n    return return_list\n",
        "test": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 439
    },
    {
        "number": 273,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += (test_tup1[i] - test_tup2[i],)\n    return test_tup3\n    pass\n",
        "test": "assert     substract_elements((1, 2), (3, 4)) == (-2, -2)",
        "num_ids": 474
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([int(math.factorial(n)/(math.factorial(k)*math.factorial(n-k))) for k in range(0,int(n/2)+1)])\n",
        "test": "assert     even_binomial_Coeff_Sum(5) == 16",
        "num_ids": 408
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    return pi*(r**2)*h\n",
        "test": "assert     volume_cylinder(0,3) == 0",
        "num_ids": 187
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "test": "assert     dict_filter({\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}, 1) == {\"b\":2,\"c\":3,\"d\":4,\"e\":5}",
        "num_ids": 283
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # TODO: Implement this function\n    #pass\n    count = 0\n    for x in test_tup:\n        if(test_tup.index(x) == 0):\n            count = count+1\n    return count\n",
        "test": "assert     count_first_elements(('a', 'c', 'b', 'a', 'b')) == 3",
        "num_ids": 534
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (9 * n - 14) / 2 + 1)\n",
        "test": "assert     is_num_decagonal(10) == [1,20,53,184,626,2764,12496,724496,4054688,15795865,70160488,3525571520]",
        "num_ids": 307
    },
    {
        "number": 280,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # implement linear search\n    # loop over all elements in array\n    # if the element is found return true and the index\n    # if the element is not found return false and -1\n    pos = -1\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    return found, pos\n",
        "test": "assert     sequential_search([1, 2, 3, 4, 5], 1) == (True, 0)",
        "num_ids": 403
    },
    {
        "number": 281,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # In Python, there is a built-in data structure called a set which is similar to a list,\n    # but with only unique values.\n    # We can use this to perform the test in a more efficient way.\n    return len(set(test_list)) == len(test_list)\n",
        "test": "assert     all_unique([1, 1, 2, 3, 3, 4]) == False",
        "num_ids": 376
    },
    {
        "number": 282,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list_nums1 = list(nums1)\n    list_nums2 = list(nums2)\n    for i in range(len(list_nums2)):\n        list_nums1[i] -= list_nums2[i]\n    return list_nums1\n",
        "test": "assert     sub_list([1, 2, 3], [5, 2, 1]) == [-4, 0, 2]",
        "num_ids": 318
    },
    {
        "number": 283,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n<=0:\n        return False\n    else:\n        d={}\n        for i in range(len(str(n))):\n            if str(n)[i] not in d:\n                d[str(n)[i]]=1\n            else:\n                d[str(n)[i]]+=1\n        for i in range(len(str(n))):\n            if int(str(n)[i]) > d[str(n)[i]]:\n                return False\n    return True\n",
        "test": "assert     validate(12345) == False, \"Not yet implemented\"",
        "num_ids": 393
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "test": "assert     check_element([1,1,1,1,1],1) == True, \"Should be True\"",
        "num_ids": 308
    },
    {
        "number": 285,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r\"ab{2,3}\",text)\n",
        "test": "assert     text_match_two_three('aaaa') == False, 'Oops!  Fourth Test Failed.  Returned True when False was expected.'",
        "num_ids": 386
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (k == 0): \n        return 0\n    if (n == 1): \n        return a[0]\n    temp_sum = max_sum_k_times(a, n, k) \n    max_sum = temp_sum\n    for i in range(1, k + 1): \n        temp_sum = temp_sum + max_sub_array_sum_repeated(a, n, k - i) \n        if (temp_sum >= max_sum): \n            max_sum = temp_sum\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([1, -2, 3, 1, 5], 4, 2) == 6, 'case4 failed'",
        "num_ids": 2725
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #base case\n    if n == 0:\n        return 0\n    #iterative case\n    else:\n        return n**2 + square_Sum(n-1)\n    \n    \ndef validate_Subsequence(str1, str2):\n    '''\n    Write a python function takes in two strings and returns True if str1 is a subsequence of str2. False otherwise. \n    '''\n    #base case\n    if str1 == '':\n        return True\n    #recursive case\n    elif str2 == '':\n        return False\n    #check if first character of str1 is in str2\n    elif str1[0] == str2[0]:\n        return validate_Subsequence(str1[1:], str2[1:])\n    #if str1 is not in str2, check if str1 is a subsequence of str2 by excluding the first character\n    else:\n        return validate_Subsequence(str1, str2[1:])\n",
        "test": "assert     (square_Sum(4) == 30)",
        "num_ids": 330
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = max(list1,key = lambda x : len(x))\n    return max_list\n",
        "test": "assert     max_length([[1,2,3],[4,5,6,7],[8,9],[0,0,0,0],[12,13,14,15,16],[17,18,19,20,21]])== [4, 4, 4, 4, 4, 4]",
        "num_ids": 488
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if k == 2:\n            return 1\n        else:\n            return k\n    if n == 3:\n        if k == 2:\n            return 2\n        else:\n            return k*(k-1)\n    if n == 4:\n        return k*(k-1)*(k-2)\n    if n == 5:\n        return k*(k-1)*(k-2)*(k-3)\n    dp = [0]*(n+1)\n    dp[1] = k\n    dp[2] = k*(k-1)\n    dp[3] = k*(k-1)*(k-2)\n    dp[4] = k*(k-1)*(k-2)*(k-3)\n    for i in range(5, n+1):\n        dp[i] = k*(k-1)*(k-2)*(k-3)*(k-4)\n    return dp[n]\n",
        "test": "assert     count_no_of_ways(2, 2) ==     1, \"check the code\"",
        "num_ids": 694
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \ndef sum(a,b):\n    '''\n    Write a python function to sum up two numbers.\n    '''\n    return a+b\n    \ndef product(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b\n    \ndef find_sqrt(a):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    return a**0.5\n    \ndef find_cbrt(a):\n    '''\n    Write a python function to find the cubic root of a number.\n    '''\n    return a**(1/3)\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert     find(9,3) == 3, \"Incorrect\"",
        "num_ids": 340
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return None\n    else:\n        return math.sqrt(w**2+h**2)\n",
        "test": "assert     otherside_rightangle(3,4) == 5, \"the length of side 3 is 5\"",
        "num_ids": 361
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    m = 0\n    for item in listval:\n        if type(item) == type([]):\n            item = max_val(item)\n        if m < item:\n            m = item\n    return m\n",
        "test": "assert     max_val([1, 2, 3]) == 3",
        "num_ids": 343
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = [1]\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            divs.append(i)\n            divs.append(number // i)\n    return sum(divs)\n",
        "test": "assert ",
        "num_ids": 250
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n",
        "test": "assert     get_Inv_Count([1, 4, 3, 2, 5]) == 3, \"Error!\"",
        "num_ids": 234
    },
    {
        "number": 297,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    newlist = []\n    def flatlist(list2):\n        for sublist in list2:\n            if isinstance(sublist,list):\n                flatlist(sublist)\n            else:\n                newlist.append(sublist)\n    flatlist(list1)\n    return newlist\n",
        "test": "assert     flatten_list([1, 2, 3]) == [1, 2, 3], 'incorrect output'",
        "num_ids": 482
    },
    {
        "number": 299,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # using max function and lambda functions\n    return max(stdata, key = lambda tup: tup[1])\n",
        "test": "assert     max_aggregate([('a',1), ('b',2), ('c',3), ('d',4)]) == ('d', 4)",
        "num_ids": 966
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0 for i in range(2*n)] for j in range(n)] \n    for i in range(2*n): \n        dp[0][i] = 1 \n    for i in range(1,n): \n        for j in range(2*n): \n            if j >= i: \n                dp[i][j] = dp[i-1][j] + dp[i-1][j-i] \n            else: \n                dp[i][j] = dp[i-1][j] \n    return dp[n-1][2*n-1] \n    \nif __name__ == '__main__': \n    n = 3\n    print(count_binary_seq(n)) ",
        "test": "assert     count_binary_seq(1)     == 1",
        "num_ids": 595
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    else:\n        depths = []\n        for key in d:\n            depths.append(dict_depth(d[key]))\n        return max(depths) + 1\n",
        "test": "assert     dict_depth({'key': {'key': {'key': {'key': {'key': {'key': 'value'}}}}}}) == 6",
        "num_ids": 348
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)) :\n        if index == 0 :\n            return ranges[0][0]\n        else :\n            index -= rotations[i]\n    for i in range(len(ranges)) :\n        if index == 0 :\n            return ranges[i][0]\n        else :\n            index -= 1\n    return None\n",
        "test": "assert     find_Element([3, 8, 9, 7, 6], [4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7],3) == 6",
        "num_ids": 771
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if re.match(r'^p\\S+', i):\n            return i\n    return False\n",
        "test": "assert     (start_withp(['p', 'is', 'not', 'the', 'best', 'way', 'to', 'find', 'the', 'best', 'word']) == ['p', 'is'])",
        "num_ids": 520
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n",
        "test": "assert     max_sum_increasing_subseq([1, 2, 3, 4], 3, 3, 2) == 0",
        "num_ids": 392
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuple(tuplex)\n    return tuplex[0:m]+tuplex[n-1:n]\n",
        "test": "assert     colon_tuplex((0,1,2,3,4,5),2,3) == (3,4)",
        "num_ids": 309
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n    return sorted(nums1*nums2, reverse=True)[:N]\n",
        "test": "assert     large_product([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15,16,17,18], 20) == [985916,1197904,1413776,1716352,1894208,2345120]",
        "num_ids": 654
    },
    {
        "number": 309,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(100,200) == 200 ",
        "num_ids": 184
    },
    {
        "number": 310,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = []\n    for char in str1:\n        tup.append(char)\n    tup = tuple(tup)\n    return tup\n",
        "test": "assert     string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 294
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | n>>1\n    n = n & -n\n    return n\n",
        "test": "assert     set_left_most_unset_bit(12) == 2",
        "num_ids": 317
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h\n",
        "test": "assert     volume_cone(5,4) == volume_cone(5,4)",
        "num_ids": 315
    },
    {
        "number": 388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    while (highest_power <= n): \n        highest_power *= 2\n    return highest_power / 2\n",
        "test": "assert ",
        "num_ids": 231
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(0) == 2",
        "num_ids": 230
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    def apply_format_string(list_, format_string):\n        '''\n        Write a function to apply a given format string to all of the elements in a list.\n        '''\n        return [format_string.format(elem) for elem in list_]\n    return apply_format_string(list_, string)\n",
        "test": "assert     add_string(['a', 'b', 'c'], '%s,%s') == ['a', 'b', 'c'], 'incorrect'",
        "num_ids": 222
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l2, l3))\n    d3 = {k : {kk: kkk for kkk, vvv in vv.items()} for k, vv in d1.items()}\n    d3.update(d2)\n    return d3\n",
        "test": "assert convert_list_dictionary([],[],[]) == {}",
        "num_ids": 683
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 0:\n        return -1\n    else:\n        return max( (get_max_sum(int(n/2)) + get_max_sum(int(n/3)) + get_max_sum(int(n/4)) + get_max_sum(int(n/5))), n)\n",
        "test": "assert ",
        "num_ids": 426
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    length_list.append(len(input_list))\n    for i in range(len(input_list)):\n        length_list.append(len(input_list[i]))\n    max_length = max(length_list)\n    return max_length\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 293
    },
    {
        "number": 394,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True\n",
        "test": "assert     check_distinct([1, 2]) == True, 'error in check_distinct'",
        "num_ids": 358
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i in dict:\n            dict[i] = dict[i] + 1\n        else:\n            dict[i] = 1\n    print(dict)\n    for i in str1:\n        if dict[i] == 1:\n            return i\n",
        "test": "assert     first_non_repeating_character(\"\") == None, \"Answer incorrect!\"",
        "num_ids": 473
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string) is None: \n        return False\n    else: \n        return True\n",
        "test": "assert     check_char('aaaaa') == True, 'String starts and ends with the same character'",
        "num_ids": 222
    },
    {
        "number": 397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    num_list = [a,b,c]\n    num_list.sort()\n    return num_list[1]\n",
        "test": "assert ",
        "num_ids": 203
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for n in nums:\n        result += sum(int(x) for x in str(n))\n    return result\n",
        "test": "assert     sum_of_digits([44, 23, 10, 17]) == 38, \"Wrong result for [44, 23, 10, 17]\"",
        "num_ids": 333
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += ((test_tup1[i] ^ test_tup2[i]),)\n    return test_tup3\n",
        "test": "assert     bitwise_xor((0, 0, 0), (0, 0, 0)) == (0, 0, 0), \"bitwise_xor() Wrong Answer\"",
        "num_ids": 434
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = list(set(tuple(sorted(test_list[i])) for i in range(len(test_list))))\n    print(\"The list with unique tuples:\", unique_list)\n    return unique_list\n",
        "test": "assert     extract_freq([('a', 'b'),('c', 'd'),('e', 'f'),('a', 'b'),('c', 'd'),('e', 'f')]) == { ('a', 'b'), ('c', 'd'), ('e', 'f')}",
        "num_ids": 813
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] + test_tup2[i],)\n    return new_tup\n",
        "test": "assert     add_nested_tuples((1,2,3), (4,5,6)) == (5,7,9)",
        "num_ids": 267
    },
    {
        "number": 404,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n",
        "test": "assert     minimum(3,2) == 2, \"Wrong output for minimum(3,2)\"",
        "num_ids": 211
    },
    {
        "number": 405,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = list(tuplex)\n    tuple1 = list(tuple1)\n    for i in range(len(tuplex)):\n        for j in range(len(tuple1)):\n            if tuplex[i] == tuple1[j]:\n                return True\n            else:\n                return False\n",
        "test": "assert     check_tuplex((2,4,6),(1,2,3))==False, \"check_tuplex( (2,4,6),(1,2,3) ) should be False\"",
        "num_ids": 473
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = 0\n    if (x % 2 == 0): \n        return 1\n    else: \n        return 0\n    \n    \ndef find_EvenOdd(x): \n    '''\n    Write a python function to find whether the even or odd of a given number is odd.\n    '''\n    y = x % 2\n    if y == 0: \n        return 0\n    else: \n        return 1\n",
        "test": "assert     find_Parity(15) == 0",
        "num_ids": 253
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(x) for x in str(n)]\n    digits.sort(reverse=True)\n    bigger = int(''.join([str(x) for x in digits]))\n    return bigger\n",
        "test": "assert     rearrange_bigger(0) == 0",
        "num_ids": 331
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    return [heapq.heappop(heap)[1:] for _ in range(k)][::-1]\n",
        "test": "assert     k_smallest_pairs([1, 7, 11], [2, 4, 6], 5) == [(1, 2), (1, 4), (7, 6)]",
        "num_ids": 785
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([list1[i][0]*list1[i][1] for i in range(len(list1))])\n",
        "test": "assert     min_product_tuple([(1, 4), (3, 5), (6, 7), (4, 5)]) == 4",
        "num_ids": 483
    },
    {
        "number": 410,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1,len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n",
        "test": "assert     min_val([0,1,2,3]) == 0, 'incorrect'",
        "num_ids": 248
    },
    {
        "number": 411,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    lst = word.split(\"_\")\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + ''.join(x.title() for x in lst[1:])\n",
        "test": "assert     snake_to_camel('foo_bar') == 'fooBar', \"Failed test case 1\"",
        "num_ids": 559
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2!=0:\n            l.remove(i)\n    return l\n    \ndef remove_odd_alt(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2!=0:\n            l.remove(l[i])\n    return l\n",
        "test": "assert     remove_odd([10, 20, 30, 40, 50, 60]) == [10, 20, 30, 40, 50, 60], 'incorrect output'",
        "num_ids": 505
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"The input must be smaller than the length of the given list\"\n    else:\n        return list1[n]\n",
        "test": "assert     extract_nth_element([(2, 3), (4, 5), (6, 7), (8, 9)], 1) == (4, 5), 'The extracted element should be (4, 5).'",
        "num_ids": 636
    },
    {
        "number": 414,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result=False\n    for x in list1:\n        for y in list2:\n            if x==y:\n                result=True\n                return result\n",
        "test": "assert     overlapping([2, 6, 7, 4, 9], [2, 5, 2, 2, 8]) == True",
        "num_ids": 314
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    max_product = arr[0] * arr[1]\n    return max_product\n    \ndef max_Product_n(arr,n):\n    '''\n    Write a python function to find the maximum product of n consecutive elements in a given array.\n    '''\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod\n",
        "test": "assert     max_Product([1,2,3,4,5,6,7,8,9,10]) ==    90, \"Not working for 1,2,3,4,5,6,7,8,9,10\"",
        "num_ids": 661
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    length = len(Input) \n    if length > 0:\n        # sort list of tuple on first element\n        Input.sort(key=lambda x:x[0])\n        # first element of first tuple\n        first_element = Input[0][0]\n        # group tuples based on first element\n        group = {first_element:[]}\n        for tup in Input:\n            group[first_element].append(tup)\n        return group\n    return Input\n",
        "test": "assert     group_tuples(input2) ==     {'a', 'd', 'e', 'f', 'k'}",
        "num_ids": 620
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst,key=len)\n",
        "test": "assert Find_Max([1, 2, 3, 4, 5]) == 4,",
        "num_ids": 446
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Your code here\n    for num in range(len(list1)):\n        list1[num] = round(list1[num], 1)\n    print(sum(list1))\n    print(len(list1))\n    print(sum(list1) * len(list1))\n",
        "test": "assert ",
        "num_ids": 2196
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += i**3\n    return sum\n",
        "test": "assert     cube_Sum(1) == 0",
        "num_ids": 291
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "test": "assert     concatenate_tuple(('n', 'i', 'p', 'o', 'd', 'i'))     == 'nipodid'",
        "num_ids": 548
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 2147
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]\n",
        "test": "assert     (extract_rear(('A', 'B', 'C', 'D', 'E', 'F', 'G'))) == ('B', 'C', 'D', 'E', 'F', 'G')",
        "num_ids": 434
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [3, 2, 1], [3, 2, 1]], 5) == 0",
        "num_ids": 409
    },
    {
        "number": 426,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num % 2 == 1, nums))\n",
        "test": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]",
        "num_ids": 499
    },
    {
        "number": 427,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = dt[::-1]\n    return '-'.join(dt)\n",
        "test": "assert     change_date_format(\"2020-02-04\") == \"04-02-2020\"",
        "num_ids": 338
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n",
        "test": "assert     shell_sort(my_list) == sorted(my_list)",
        "num_ids": 531
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 for tup1, tup2 in zip(test_tup1,test_tup2) if tup1==tup2)\n",
        "test": "assert     and_tuples(",
        "num_ids": 299
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculating discriminant \n    D = b * b - 4 * a * c \n    \n    if D > 0: \n        print(\"Given parabola has two distinct real roots.\") \n        print(\"The first root is:\") \n        x1 = (-b + math.sqrt(D)) / (2 * a) \n        print(x1) \n        print(\"The second root is:\") \n        x2 = (-b - math.sqrt(D)) / (2 * a) \n        print(x2) \n        \n    elif D == 0: \n        print(\"Given parabola has one double root.\") \n        print(\"The double root is:\") \n        x1 = -b / (2 * a) \n        print(x1) \n    else: \n        print(\"Given parabola has no real roots.\") \n    return\n",
        "test": "assert ",
        "num_ids": 605
    },
    {
        "number": 431,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert     common_element(['c', 'c', 'b'], ['a', 'b', 'c']) == True",
        "num_ids": 185
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1+base2)*height/2\n    return area\n",
        "test": "assert     median_trapezium(0.5,0.25,0.5) == 0.75, \"Wrong answer for median_trapezium(0.5,0.25,0.5)\"",
        "num_ids": 331
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if type(arr)!= list:\n        raise TypeError\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([1, 2, 3], 2) == True, 'Test Failed'",
        "num_ids": 388
    },
    {
        "number": 434,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # initialize match\n    # match = re.search(\"ab+\", text)\n    match = re.search(\"a.+b{1,}\", text)\n    # if match:\n    #     print(match.group())\n    if match:\n        print(match.group())\n    else:\n        print(\"Not found!\")\n",
        "test": "assert     text_match_one('') == None, 'Empty string'",
        "num_ids": 444
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     last_Digit(1234) == 4",
        "num_ids": 129
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n",
        "test": "assert ",
        "num_ids": 240
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i not in ['[', ']', ':', ',','', '\\n']:\n            new_str += i\n    return new_str\n",
        "test": "assert     remove_odd('abc') == 'abc', 'error'",
        "num_ids": 389
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # count = 0\n    # for i in range(len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         if (test_list[i], test_list[j]) in test_list:\n    #             count += 1\n    # return count\n",
        "test": "assert     count_bidirectional([(1, 3), (1, 2), (1, 1), (1, 3), (1, 1), (1, 3), (1, 1), (1, 3)]) == 2",
        "num_ids": 670
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join([str(x) for x in L]))\n",
        "test": "assert     multiple_to_single([1,2,3,4,5,6]) == 123456",
        "num_ids": 334
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r'[Aa]d[^Aa]*', text)\n    if result:\n        return result[0]\n    return None\n",
        "test": "assert     find_adverb_position(    \"The story was bad and awful\") == \"The story was awful\", 'Failed to find adverb'",
        "num_ids": 732
    },
    {
        "number": 441,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l = int(l)\n    return 6 * l ** 2\n",
        "test": "assert     surfacearea_cube(1) == 6",
        "num_ids": 162
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    number_of_positive = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            number_of_positive += 1\n    return number_of_positive / len(nums)\n",
        "test": "assert     positive_count([0, 1, 2, 3, 4, 5]) == 1",
        "num_ids": 338
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max1 = 0\n    for num in list1:\n        if num < 0 and num > max1:\n            max1 = num\n    return max1\n",
        "test": "assert     largest_neg([0, 0, 0, 0]) == 0, \"Wrong answer\"",
        "num_ids": 432
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # test_list = [(1,2,3,4,5,6,7,8), (9,10,11,12,13,14,15,16), (17,18,19,20,21,22,23,24), (25,26,27,28,29,30,31,32)]\n    # K = 3\n",
        "test": "assert ",
        "num_ids": 551
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for idx in range(len(test_tup1)):\n        result.append(test_tup1[idx] * test_tup2[idx])\n    return tuple(result)\n",
        "test": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 446
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for i in tup: \n        print(count[i], end = \" \") \n",
        "test": "assert     count_Occurrence((('a','b','c'),[2,3,4]), (1,2,3,4)) == [0,0,0,0]",
        "num_ids": 961
    },
    {
        "number": 447,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = list()\n    for num in nums:\n        result.append(num ** 3)\n    return result\n",
        "test": "assert     cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 304
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-1) + cal_sum(n-2)\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 224
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    size = l\n    result = []\n    for s in str:\n        if len(s) == l:\n            result.append(s)\n    return result\n",
        "test": "assert     [] == extract_string(['a', 'b', 'c', 'd'], 10)",
        "num_ids": 732
    },
    {
        "number": 451,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\", \"\", text1)\n",
        "test": "assert     remove_whitespaces('This is a   string') == 'Thisisastring'",
        "num_ids": 330
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    return 0\n",
        "test": "assert     loss_amount(100, 100) == 0",
        "num_ids": 216
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            result += i\n            if i == int(n/i):\n                result -= i\n    return result\n",
        "test": "assert     sumofFactors(15) ==     4",
        "num_ids": 305
    },
    {
        "number": 454,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r'\\w*z\\w*', text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz('The quick brown fox jumps over the lazy dog') == True, 'oops'",
        "num_ids": 435
    },
    {
        "number": 455,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(12) == True",
        "num_ids": 547
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = list()\n    for word in stringlist:\n        reversedlist.append(word[::-1])\n    return reversedlist\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 435
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    a=len(lst)\n    sub_lst=[]\n    for i in range(a):\n        for j in range(i,a):\n            sub_lst.append(lst[i:j+1])\n    sub_lst.sort(key=len)\n    return sub_lst[0]\n    \n",
        "test": "assert ",
        "num_ids": 426
    },
    {
        "number": 458,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(10, 20) == 200",
        "num_ids": 250
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # for i in str1:\n    #     if i.isupper():\n    #         str1 = str1.replace(i, '')\n    # return str1\n    return re.sub('[A-Z]','',str1)\n",
        "test": "assert     remove_uppercase('') == '', \"this input should return empty string\"",
        "num_ids": 357
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "test": "assert Extract([]) == [], \"Extract\"",
        "num_ids": 323
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n",
        "test": "assert     upper_ctr(\"\") == 0",
        "num_ids": 172
    },
    {
        "number": 462,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    return [list(a) for a in itertools.combinations(list1, 2)]\n",
        "test": "assert     [['x', 'y'], ['x', 'z'], ['y', 'z']] == combinations_list(['x', 'y', 'z'])",
        "num_ids": 335
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    prod = 1\n    max_prod = -1\n    start = 0\n    end = 0\n    for i in range(n):\n        prod = prod * arr[i]\n        if prod > max_prod:\n            max_prod = prod\n            start = i\n            end = i\n        if prod == 0:\n            start = i+1\n            end = i+1\n            max_prod = 1\n    print(f\"Maximum product is {max_prod} obtained from the subarray {arr[start:end+1]}\")\n    return max_prod\n",
        "test": "assert     max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 743
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_value({1:1,2:1,3:2}, 1) == False",
        "num_ids": 274
    },
    {
        "number": 465,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v!= ''}\n",
        "test": "assert ",
        "num_ids": 107
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    length = len(arr)\n    if length < 2:\n        return None\n    max_product = 0\n    for i in range(length):\n        for j in range(i, length):\n            product = 1\n            for k in range(i, j + 1):\n                product *= arr[k]\n            max_product = max(max_product, product)\n    return max_product\n",
        "test": "assert     max_product([3,1,4,1,5,9,2,6,5,3]) == 360",
        "num_ids": 576
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if i!= j:\n                result.append(test_tup[i] + test_tup[j])\n    return result\n",
        "test": "assert     add_pairwise((1,2,3,4,5,6,7,8,9,10)) == (1, 3, 5, 7, 9, 11, 13, 15, 17, 19), 'wrong result for (1,2,3,4,5,6,7,8,9,10)'",
        "num_ids": 465
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for x in arr: \n        prod = (prod * x) % n\n    return prod\n",
        "test": "assert     find_remainder([2, 4, 5], 10) == (2 * 4 * 5) % 10 == 2 * 4 * 5 % 10 == 0",
        "num_ids": 358
    },
    {
        "number": 472,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9])) \nprint(check_Consecutive([-1,2,3,4,5,6,7,8,9])) \nprint(check_Consecutive([1,2,3,4,5,6,7,8,11])) \nprint(check_Consecutive([1,2,3,4,5,6,7,8,11]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,10]))\n",
        "test": "assert     check_Consecutive(list(range(0,10))) == True, 'Check the correctness of check_Consecutive function'",
        "num_ids": 560
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for tup in test_list1:\n        if tup in test_list2:\n            intersection_list.append(tup)\n    return intersection_list\n    \n",
        "test": "assert     tuple_intersection([(1, 4), (2, 3), (1, 2)], [(1, 4), (3, 4), (2, 3)])         == [(1, 4), (2, 3)]",
        "num_ids": 539
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr\n",
        "test": "assert     replace_char('hello', 'h', 'a') == 'aello'",
        "num_ids": 333
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_list = sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n    sort_dict = dict()\n    for i in sort_list:\n        sort_dict[i[0]] = i[1]\n    return sort_dict\n",
        "test": "assert     sorted(sort_counter(Counter(dict(a=3, b=2, c=1, d=4, e=0, f=5, g=6)))).__class__ == list",
        "num_ids": 475
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    maxi = -1\n    mini = -1\n    for num in nums:\n        if num > maxi:\n            maxi = num\n        if num < mini:\n            mini = num\n    print(\"Sum of largest and smallest values in a given array is: \", maxi + mini)\n",
        "test": "assert ",
        "num_ids": 163
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('hello') == 'hello', \"hello in lowercase\"",
        "num_ids": 181
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    ans = ''\n    for letter in str1:\n        if letter.isupper():\n            ans += letter\n    return ans\nprint(remove_lowercase('THe quick Brow Fox'))\nprint(remove_lowercase('i dont know what is this'))\nprint(remove_lowercase('the quick Brow Fox'))\n",
        "test": "assert     remove_lowercase(\"I am a maN\") == \"I am a maN\"",
        "num_ids": 450
    },
    {
        "number": 479,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\nprint(\"\\n\")\nprint(\"Test First Digit:\")\nprint(first_Digit(56))\nprint(first_Digit(100))\nprint(first_Digit(235))\nprint(first_Digit(123456789))\n",
        "test": "assert     first_Digit(8) == 8",
        "num_ids": 265
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = [i for i in list if i%2 == 1]\n    return result\n",
        "test": "assert     Split([1,2,3,4,5,6,7]) == [1,3,5,7]",
        "num_ids": 282
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1=0\n    sum2=0\n    for i in range(n+1):\n        sum1+=i**3\n        sum2+=i\n    return sum1-sum2\n",
        "test": "assert     difference(1) == 0 ",
        "num_ids": 265
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    C = {}\n    for i in range(1, N+1) : \n        for j in range(i+1, N+1) : \n            key = i^j\n            if key not in C : \n                C[key] = 0\n            C[key] += 1\n    \n    return len([key for key in C if C[key]%2 == 1])\n",
        "test": "assert     find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8], 0) == 0",
        "num_ids": 570
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('hello') == 'HELLO'",
        "num_ids": 142
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2)))\n",
        "test": "assert     digit_distance_nums(1, 1) == 0, \"digit_distance_nums(1, 1) == 0 failed\"",
        "num_ids": 385
    },
    {
        "number": 559,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    for i in range(size):\n        current_sum = 0\n        for j in range(i, size):\n            current_sum += a[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([3, 4, -9, -10, 2, 3, 5, 7, -2], 8) == 17, \"not correct\"",
        "num_ids": 503
    },
    {
        "number": 560,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))\n",
        "test": "assert     union_elements((1,2,3),(3,4,5,6)) == (1, 2, 3, 4, 5, 6), \"Not working\"",
        "num_ids": 653
    },
    {
        "number": 562,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for sublist in lst:\n        if len(sublist)>max:\n            max = len(sublist)\n    return max\n",
        "test": "assert     Find_Max_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]) == 3",
        "num_ids": 1178
    },
    {
        "number": 563,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.search(r'\"(.*)\"', text)\n    if match:\n        return match.group(1)\n    return None\n",
        "test": "assert     extract_values('\"Hello\"') == 'Hello'",
        "num_ids": 405
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    import itertools\n    comb = itertools.combinations(arr, 2)\n    counter = 0\n    for pair in list(comb):\n        if pair[0]!= pair[1]:\n            counter += 1\n    return counter\n        \n    \n",
        "test": "assert ",
        "num_ids": 583
    },
    {
        "number": 565,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split(\"hi\") == ['h', 'i'] ",
        "num_ids": 154
    },
    {
        "number": 566,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert     sum_digits(123) == 6",
        "num_ids": 142
    },
    {
        "number": 567,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] >= list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([]) == True",
        "num_ids": 278
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert     [{}, {}] == empty_list(2)",
        "num_ids": 113
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for i in list1:\n        i.sort()\n        list2.append(i)\n    return list2\n",
        "test": "assert     sort_sublists(['e', 'c', 'b', 'a']) == [['a', 'b'], ['c', 'e']]",
        "num_ids": 506
    },
    {
        "number": 572,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for nums in nums:\n        unique_nums.add(nums)\n    return unique_nums\n",
        "test": "assert     two_unique_nums([1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]) == {1, 2, 3, 4, 5, 6, 7}",
        "num_ids": 676
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [1, 2, 2, 3, 3, 4, 4, 4]\n    unique = []\n    for element in list_data:\n        if element not in unique:\n            unique.append(element)\n    result = 1\n    for element in unique:\n        result = result * element\n    return result\n",
        "test": "assert     unique_product([1,3,2,5,6,7]) == 168",
        "num_ids": 334
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    import math\n    \n    \n    r=int(r)\n    h=int(h)\n    \n    surfacearea=2*math.pi*r*(r+h)\n    \n    surfacearea=round(surfacearea,2)\n    \n    print('The surface area of a cylinder is: ')\n    print(surfacearea)\n    \n    \ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    \n    import math\n    \n    \n    a=int(a)\n    \n    surfacearea=6*a**2\n    \n    surfacearea=round(surfacearea,2)\n    \n    print('The surface area of a cube is: ')\n    print(surfacearea)\n    \n    \ndef surfacearea_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    b=int(b)\n    \n    surfacearea=l*b\n    \n    surfacearea=round(surfacearea,2)\n    \n    print('The surface area of a rectangle is: ')\n    print(surfacearea)\n    \n    \ndef perimeter_parallelogram(l,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    b=int(b)\n    \n    perimeter=l*2+b*2\n    \n    perimeter=round(perimeter,2)\n    \n    print('The perimeter of a parallelogram is: ')\n    print(perimeter)\n    \n    \ndef perimeter_triangle(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    \n    import math\n    \n    \n    b=int(b)\n    h=int(h)\n    \n    perimeter=b*3+h*3\n    \n    perimeter=round(perimeter,2)\n    \n    print('The perimeter of a triangle is: ')\n    print(perimeter)\n    \n    \ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    \n    import math\n    \n    \n    a=int(a)\n    \n    perimeter=a*4\n    \n    perimeter=round(perimeter,2)\n    \n    print('The perimeter of a square is: ')\n    print(perimeter)\n    \n    \ndef perimeter_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    \n    import math\n    \n    \n    b1=int(b1)\n    b2=int(b2)\n    h=int(h)\n    \n    perimeter=b1+b2+h\n    \n    perimeter=round(perimeter,2)\n    \n    print('The perimeter of a trapezoid is: ')\n    print(perimeter)\n    \n    \ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    w=int(w)\n    h=int(h)\n    \n    volume=l*w*h\n    \n    volume=round(volume,2)\n    \n    print('The volume of a cuboid is: ')\n    print(volume)\n    \n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    \n    import math\n    \n    \n    r=int(r)\n    h=int(h)\n    \n    volume=math.pi*r**2*h\n    \n    volume=round(volume,2)\n    \n    print('The volume of a cylinder is: ')\n    print(volume)\n    \n    \ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    \n    import math\n    \n    \n    a=int(a)\n    \n    volume=a**3\n    \n    volume=round(volume,2)\n    \n    print('The volume of a cube is: ')\n    print(volume)\n    \n    \ndef volume_rectangle(l,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    b=int(b)\n    \n    volume=l*b\n    \n    volume=round(volume,2)\n    \n    print('The volume of a rectangle is: ')\n    print(volume)\n    \n    \ndef volume_parallelogram(l,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    b=int(b)\n    \n    volume=l*b\n    \n    volume=round(volume,2)\n    \n    print('The volume of a parallelogram is: ')\n    print(volume)\n    \n    \ndef volume_triangle(b,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    \n    import math\n    \n    \n    b=int(b)\n    h=int(h)\n    \n    volume=1/3*b*h\n    \n    volume=round(volume,2)\n    \n    print('The volume of a triangle is: ')\n    print(volume)\n    \n    \ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    \n    import math\n    \n    \n    a=int(a)\n    \n    volume=a**3\n    \n    volume=round(volume,2)\n    \n    print('The volume of a square is: ')\n    print(volume)\n    \n    \ndef volume_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    \n    import math\n    \n    \n    b1=int(b1)\n    b2=int(b2)\n    h=int(h)\n    \n    volume=1/2*(b1+b2)*h\n    \n    volume=round(volume,2)\n    \n    print('The volume of a trapezoid is: ')\n    print(volume)\n    \n    \ndef area_parallelogram(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    import math\n    \n    \n    l=int(l)\n    b=int(b)\n    \n    area=l*b\n    \n    area=round(area,2)\n    \n    print('The area of a parallelogram is: ')\n    print(area)\n    \n    \ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    \n    import math\n    \n    \n    b=int(b)\n    h=int(h)\n    \n    area=b*h/2\n    \n    area=round(area,2)\n    \n    print('The area of a triangle is: ')\n    print(area)\n    \n    \ndef area_square(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    \n    import math\n    \n    \n    a=int(a)\n    \n    area=a**2\n    \n    area=round(area,2)\n    \n    print('The area of a square is: ')\n    print(area)\n    \n    \ndef area_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    \n    import math\n    \n    \n    b1=int(b1)\n    b2=int(b2)\n    h=int(h",
        "test": "assert ",
        "num_ids": 195
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = False\n    for i in range(0,len(A)):\n        for j in range(0,len(B)):\n            if A[i:i+len(B)] == B:\n                flag = True\n    return flag\n    \ndef Smallest_Subarray_Sum(A,B):\n    '''\n    Write a Python program to find the smallest subarray with sum greater than a given value. \n    Input : A = [2, 1, 5, 2, 3, 2], B = 7 \n    Output : 2\n    Explanation : The smallest subarray with \n    sum greater than '7' is [5, 2].\n    '''\n    left = 0\n    right = 0\n    window_sum = 0\n    min_len = sys.maxsize\n    \n    while right < len(A):\n        window_sum += A[right]\n        while window_sum >= B:\n            min_len = min(min_len,right-left+1)\n            window_sum -= A[left]\n            left += 1\n        right += 1\n    if min_len == sys.maxsize:\n        return 0\n    else:\n        return min_len\n        \ndef Sum_of_Permutation(A):\n    '''\n    Write a Python program to find the sum of all the permutations of a given list of integers.\n    '''\n    n = len(A)\n    sum = 0\n    permutation = list(itertools.permutations(A))\n    for i in range(0,len(permutation)):\n        sum += int(''.join(str(j) for j in permutation[i]))\n    return sum\n",
        "test": "assert     (is_Sub_Array([1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) == False, \"Testcase2 Failed\"",
        "num_ids": 2279
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def factorial(n):\n        if n == 1:\n            return 1\n        return n * factorial(n-1)\n    last_digit = str(factorial(n))[-1]\n    return int(last_digit)\n    \ndef last_Digit_Sum_of_Digits(n):\n    '''\n    Write a Python function that finds the last digit of a factorial of a given number\n    '''\n    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        return n % 10 + sum_of_digits(int(n / 10))\n    last_digit = str(sum_of_digits(n))[-1]\n    return int(last_digit)\n    \ndef reverse_num(n):\n    '''\n    Write a Python function to return the reverse of a given number.\n    '''\n    n = str(n)\n    return int(n[::-1])\n    \ndef palindrome(n):\n    '''\n    Write a Python function that checks whether the given number is palindrome or not. Return True if it is palindrome, else False.\n    '''\n    n = str(n)\n    return n == n[::-1]\n    \ndef fibonacci_number(n):\n    '''\n    Write a Python function to calculate the value of nth number in a fibonacci series. The first two numbers are 0 and 1.\n    '''\n    def fibonacci_series(n):\n        if n <= 1:\n            return n\n        return fibonacci_series(n-1) + fibonacci_series(n-2)\n    return fibonacci_series(n)\n    \ndef fibonacci_number_with_memoization(n,memo):\n    '''\n    Write a Python function to calculate the value of nth number in a fibonacci series. The first two numbers are 0 and 1.\n    Use memoization to store the values and use that to calculate the value.\n    '''\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fibonacci_number_with_memoization(n-1,memo) + fibonacci_number_with_memoization(n-2,memo)\n    return memo[n]\n    \ndef fibonacci_number_with_tabulation(n):\n    '''\n    Write a Python function to calculate the value of nth number in a fibonacci series. The first two numbers are 0 and 1.\n    Use Tabulation (Bottom-Up Dynamic Programming) to store the values in an array and then use the array to calculate the value.\n    '''\n    if n <= 1:\n        return n\n    dp = [None] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2,n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n    \ndef fibonacci_number_with_tabulation_with_optimization(n):\n    '''\n    Write a Python function to calculate the value of nth number in a fibonacci series. The first two numbers are 0 and 1.\n    Use Tabulation (Bottom-Up Dynamic Programming) to store the values in an array and then use the array to calculate the value.\n    Optimize the function to O(n) time complexity.\n    '''\n    if n <= 1:\n        return n\n    prev = 0\n    curr = 1\n    for i in range(2,n+1):\n        temp = prev + curr\n        prev = curr\n        curr = temp\n    return curr\n    \ndef stock_price_prediction(daily_closing_prices, no_of_days):\n    '''\n    Given an array of n numbers that represent the daily closing price of a stock, and an integer k, find out the maximum profit you can make from k transactions. You can make at most k transactions.\n    '''\n    def max_profit(k,d_prices):\n        if k <= 0 or len(d_prices) <= 1:\n            return 0\n        if k >= len(d_prices)/2:\n            profit = 0\n            for i in range(1,len(d_prices)):\n                if d_prices[i] > d_prices[i-1]:\n                    profit += d_prices[i] - d_prices[i-1]\n            return profit\n        profits = [None]*(k+1)\n        for i in range(1,k+1):\n            profits[i] = -max(d_prices)\n            for j in range(1,len(d_prices)):\n                profits[i] = max(profits[i],profits[i-1] + d_prices[j])\n        return profits[-1]\n    return max_profit(no_of_days,daily_closing_prices)\n    \ndef stock_price_prediction_dp(daily_closing_prices, no_of_days):\n    '''\n    Given an array of n numbers that represent the daily closing price of a stock, and an integer k, find out the maximum profit you can make from k transactions. You can make at most k transactions.\n    Use a dynamic programming approach to solve the problem.\n    '''\n    if no_of_days <= 1:\n        return 0\n    profit = [0]*(no_of_days+1)\n    max_profit = 0\n    for i in range(1,len(daily_closing_prices)):\n        profit[i] = max(profit[i-1] + daily_closing_prices[i] - daily_closing_prices[i-1],0)\n        max_profit = max(max_profit,profit[i])\n    return max_profit\n    \ndef find_duplicate(arr):\n    '''\n    Write a Python program to find and return the first duplicate element in a given array of integers. Return -1 if there is no such element.\n    '''\n    for i in range(len(arr)):\n        if arr[abs(arr[i])] >= 0:\n            arr[abs(arr[i])] = -arr[abs(arr[i])]\n        else:\n            return abs(arr[i])\n    return -1\n    \ndef count_set_bits(n):\n    '''\n    Write a Python program to count the number of set bits in a given number.\n    '''\n    def count_set_bits_dp(n):\n        if n == 0:\n            return 0\n        n = str(bin(n))[2:]\n        count = 0\n        for i in n:\n            if i == '1':\n                count += 1\n        return count\n    return count_set_bits_dp(n)\n    \ndef count_set_bits_1(n):\n    '''\n    Write a Python program to count the number of set bits in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = (n - 1) & n\n    return count\n    \ndef find_missing_num(arr,n):\n    '''\n    Write a Python program to find the smallest positive integer that is missing from a given array.\n    '''\n    arr.sort()\n    for i in range(1,n):\n        if arr[i]!= arr[i-1] + 1:\n            return arr[i-1] + 1\n    return arr[-1] + 1\n    \ndef find_missing_num_1(arr,n):\n    '''\n    Write a Python program to find the smallest positive integer that is missing from a given array.\n    '''\n    for i in range(1,n+2):\n        if i not in arr:\n            return i\n    return n+1\n    \ndef max_subarray(arr,n):\n    '''\n    Write a Python program to find the maximum sum of contiguous subarray within a one-dimensional array of numbers\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum = current_sum + arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "test": "assert     last_Digit_Factorial(8) == 0, \"Error, last_Digit_Factorial(8) returned wrong value\"",
        "num_ids": 402
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n",
        "test": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == interleave_lists([1,2,3],[4,5,6],[7,8,9])",
        "num_ids": 270
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1).union(test_tup2)\n",
        "test": "assert ",
        "num_ids": 287
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_list = [elem for elem in test_tuple if even_fnc(elem)]\n    return tuple(test_list)\n",
        "test": "assert     even_ele((1, 2, 3), even_fnc=lambda x: x % 2 == 0) == (2,)",
        "num_ids": 645
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    p = (b*b + b*s + s*s) ** 0.5\n    return round((0.25*b*s*(b+s+p)),2)\n",
        "test": "assert     surface_Area(2,4)             == 76,     'Error in surface_Area function'",
        "num_ids": 298
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({}) == True",
        "num_ids": 115
    },
    {
        "number": 583,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if(num<=1):\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)*2\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 221
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #finds the adverbs by matching the text after ly to the adverb list \n    #if no adverbs found, returns None\n",
        "test": "assert     find_adverbs(\"She shouldn't have come here.\") == \"shouldn't\"",
        "num_ids": 596
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    sorted_items = {}\n    # Use a max heap to store the n most expensive items\n    max_heap = []\n    for item, price in items:\n        sorted_items[item] = price\n    # Push the first n items onto the heap\n    for i in range(n):\n        heapq.heappush(max_heap, (-sorted_items[item], item))\n    print(max_heap)\n    # Use a while loop to pop off the next expensive item off the heap\n    # Add the next expensive item on the heap\n    # Add the item's price to the running total\n    total = 0\n    while max_heap:\n        price, item = heapq.heappop(max_heap)\n        print('Popped item: {}, price: {}'.format(item, -price))\n        total += -price\n    return total\n",
        "test": "assert     expensive_items([{'name': 'bread', 'price': 100},",
        "num_ids": 332
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    result = l[:n]\n    print(result)\n    return result + l[n:]\n",
        "test": "assert",
        "num_ids": 296
    },
    {
        "number": 587,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "test": "assert     (1, 2, 3, 4) == list_tuple([1, 2, 3, 4])",
        "num_ids": 322
    },
    {
        "number": 588,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min = nums[0]\n    max = nums[0]\n    for i in nums:\n        if i < min:\n            min = i\n        elif i > max:\n            max = i\n    return max - min\n",
        "test": "assert     big_diff([1, 2, 3, 4, 5]) == 4, \"check for the smallest and the largest\"",
        "num_ids": 378
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        print('a must be less than b')\n        return\n    arr = []\n    for i in range(a, b+1):\n        s = i * i\n        if s in arr:\n            continue\n        arr.append(s)\n    return sorted(arr)\n",
        "test": "assert     perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 334
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = complex(x,y)\n    b = abs(a)\n    c = cmath.phase(a)\n    return [b,c]\n",
        "test": "assert     (5, 0) == (5, 0), 'polar_rect: wrong'",
        "num_ids": 307
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"New List\", newList[-1:] + newList[1: -1] + newList[:1])\n    return newList[-1:] + newList[1: -1] + newList[:1]\n",
        "test": "assert     swap_List([10, 20, 30, 40, 50]) == [50, 20, 30, 40, 10]",
        "num_ids": 297
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (k == 0 or k == n):\n        return 1\n    elif (k == 1 or k == n - 1):\n        return n\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n    return \n",
        "test": "assert     binomial_Coeff(7,7) == 2",
        "num_ids": 301
    },
    {
        "number": 593,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #return str(ip)\n    return re.sub(r'\\.[0]+\\.', '.', ip)\n",
        "test": "assert     removezero_ip(\"010.020.021.401\") == \"010.020.021.401\"",
        "num_ids": 441
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # list1 = [1,2,3,4,5,6,7,8,9]\n    list1 = list(list1)\n    diff_even = 0\n    diff_odd = 0\n    for i in range(len(list1)):\n        if i%2 == 0:\n            diff_even = diff_even + list1[i]\n        else:\n            diff_odd = diff_odd + list1[i]\n    print(diff_even - diff_odd)\ndiff_even_odd([1,2,3,4,5,6,7,8,9])",
        "test": "assert     diff_even_odd([1,3,5,7,9]) == 0, \"test case #3 diff_even_odd failed\"",
        "num_ids": 586
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i,j = 0,0\n    arr1 = []\n    arr2 = []\n    for i in range(len(str1)) : \n        arr1.append(str1[i])\n    for j in range(len(str2)) : \n        arr2.append(str2[j])\n    cnt = 0\n    while i < len(arr1) and j < len(arr2) : \n        if arr1[i] == arr2[j] : \n            i += 1\n            j += 1\n        elif arr1[i] == '1' and arr2[j] == '0' : \n            i += 1\n            j += 1\n            cnt += 1\n        elif arr1[i] == '0' and arr2[j] == '1' : \n            i += 1\n            j += 1\n            cnt += 1\n    return cnt\n",
        "test": "assert     min_Swaps('101', '101') == 0, \"DONE\"",
        "num_ids": 582
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert     tuple_size((1,2)) ==     sys.getsizeof((1,2)),     \"Error in tuple_size(tuple)\"",
        "num_ids": 1630
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def get_kth(arr1, arr2, k):\n        if not arr1:\n            return arr2[k]\n        if not arr2:\n            return arr1[k]\n        if k == len(arr1) + len(arr2) - 1:\n            return max(arr1[-1], arr2[-1])\n        if len(arr1) == 1:\n            return arr2[k]\n        if len(arr2) == 1:\n            return arr1[k]\n        if k == len(arr1) + len(arr2) - 2:\n            return min(arr1[0], arr2[0])\n        i = len(arr1) // 2\n        j = len(arr2) // 2\n        if arr1[i] < arr2[j]:\n            # print('arr1', arr1[i], arr2[j])\n            if k > i and k <= j + len(arr1) - i - 1:\n                return get_kth(arr1[i+1:], arr2, k - i - 1)\n            else:\n                return get_kth(arr1, arr2[j+1:], k)\n        else:\n            # print('arr2', arr1[i], arr2[j])\n            if k > i + len(arr2) - j - 1 and k <= len(arr1) - i - 1:\n                return get_kth(arr1, arr2[j+1:], k - i - len(arr2) + j - 1)\n            else:\n                return get_kth(arr1[i+1:], arr2, k)\n    if k < 1 or len(arr1) + len(arr2) < k:\n        raise Exception('invalid input')\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    return get_kth(arr1, arr2, k)\n",
        "test": "assert     find_kth([1, 2], [3, 4], 3) == 4",
        "num_ids": 820
    },
    {
        "number": 598,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n=number\n    sum=0\n    num=n\n    while(n!=0):\n        rem=n%10\n        sum=sum+(rem**3)\n        n=n//10\n    if(sum==num):\n        return True\n    return False\n",
        "test": "assert     armstrong_number(153) == True",
        "num_ids": 339
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total = total + i\n    average = total / number\n    print(total)\n    print(average)\n",
        "test": "assert ",
        "num_ids": 223
    },
    {
        "number": 600,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "test": "assert     is_Even(2) == True",
        "num_ids": 197
    },
    {
        "number": 602,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n",
        "test": "assert first_repeated_char(\"abacaba\") == 'a'",
        "num_ids": 373
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n) if islucid(i)]\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 2456
    },
    {
        "number": 604,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return \" \".join(s)\n",
        "test": "assert     reverse_words('This is  a test') == 'test a is This'",
        "num_ids": 305
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num == 1:\n        return False\n    if num % 2 == 0:\n        return False\n    \n    sq = int(num**0.5) + 1\n    \n    for div in range(3, sq, 2):\n        if num % div == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(1) == False",
        "num_ids": 251
    },
    {
        "number": 606,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi)/180\n",
        "test": "assert     radian_degree(45) - 0.7853981633974483    < 0.0001",
        "num_ids": 270
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = 0\n    lst = []\n",
        "test": "assert     find_literals(\"a1b2c3d4\", \"a\\d+b\\d+c\\d+\") == (\"a1b2c3d4\", 0, 12)",
        "num_ids": 503
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=0\n    for i in range(1,n+1):\n        bell=i*(i+1)/2\n    return bell\ndef bell_Number_recursion(n): \n    '''\n    Write a python function using recursion to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    return n*(n+1)/2+bell_Number_recursion(n-1)\n",
        "test": "assert     1 == bell_Number(1)",
        "num_ids": 227
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 470
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n",
        "test": "assert     max_of_nth([[1,2,3],[1,2,3],[1,2,3]],0) == 1",
        "num_ids": 438
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst==[]:\n        return []\n    elif type(lst[0])==list:\n        return [lst[0]]+merge(lst[1:])\n    else:\n        return [lst[0:1]]+merge(lst[1:])\n",
        "test": "assert     merge([[1, 2], [1, 2], [1, 2]]) == [[1, 2], [1, 2], [1, 2]]",
        "num_ids": 829
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for i in test_list:\n        cum_sum.append(sum(i))\n    return cum_sum\n",
        "test": "assert     cummulative_sum([]) == []",
        "num_ids": 384
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(tuple_of_tuples[0])/len(tuple_of_tuples[0]), 2) for tuple_of_tuples in nums]\n",
        "test": "assert ",
        "num_ids": 459
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(test_tup1[i] % test_tup2[i] for i in range(len(test_tup1)))\n",
        "test": "assert     tuple_modulo((9, 10), (5, 5)) == (4, 0)",
        "num_ids": 557
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    jumps = 0\n    while i < steps:\n        if i == d:\n            return jumps\n        if steps - i > d:\n            jumps += 1\n            steps -= d\n            i = 0\n        else:\n            jumps += 1\n            steps -= (i - d)\n            i = d\n    return jumps\n",
        "test": "assert     min_Jumps(3,2) == 2",
        "num_ids": 318
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    ans = []\n    for num1,num2 in zip(nums1,nums2):\n        ans.append(num1/num2)\n    return ans\n",
        "test": "assert     div_list([5,10,15,20], [1,2,3,4]) == [5,5,5,5], \"Division by zero check\"",
        "num_ids": 306
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char in '0123456789':\n            numbers.append(char)\n    print(numbers)\n    non_numbers = ''.join(numbers)\n    print(non_numbers)\n    return test_str.replace(non_numbers, '')\n",
        "test": "assert     move_num(\"+-*/\") == \"+-*/\"",
        "num_ids": 484
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n < 2:\n        return n\n    b = [0]*n\n    c = [0]*n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                b[i] = max(b[i], c[j]+1)\n        c[i] = b[i]\n    return max(b)\n",
        "test": "assert     largest_subset([1, 2, 3, 4, 7, 8, 9, 10]) == 3, \"Wrong output\"",
        "num_ids": 590
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    else:\n        mid = int(n/2)\n        if n%2==0:\n            return (arr1[mid]+arr2[mid])/2\n        else:\n            return arr1[mid]\n    return None\n",
        "test": "assert     get_median([1, 2, 3, 4], [2, 3, 4, 5, 6], 5) == 3, \"Test failed for case 3\"",
        "num_ids": 516
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [i ** n for i in nums]\n    return result\n",
        "test": "assert     nth_nums([1], 1) == [1]",
        "num_ids": 327
    },
    {
        "number": 624,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper('BANANA') == 'BANANA'",
        "num_ids": 229
    },
    {
        "number": 625,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 315
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n    \n    \ndef check_palindrome(string) :  \n    '''\n    Write a python function to check whether the given input string is palindrome or not. \n    Return True if the string is palindrome otherwise return False.\n    '''\n    pass\n    \n    \ndef word_count(string) :  \n    '''\n    Write a python function to find the number of words in a given string. \n    Note : A word is defined as a sequence of non-space characters. \n    '''\n    pass\n    \n    \ndef longest_word(string) :  \n    '''\n    Write a python function to find the longest word in a given string. \n    Note : A word is defined as a sequence of non-space characters. \n    '''\n    pass\n    \n    \ndef find_factors(number) :  \n    '''\n    Write a python function to find the factors of a given number. \n    Note : Factors should be greater than 1 and less than given number.\n    '''\n    pass\n    \n    \ndef is_prime(number) :  \n    '''\n    Write a python function to find whether the given number is prime or not. \n    Note : A prime number is a natural number greater than 1 and having only two factors : 1 and the number itself.\n    '''\n    pass\n    \n    \ndef is_power(a,b) :  \n    '''\n    Write a python function to check whether one number is the power of another or not. \n    Note : The first number should be greater than the second number.\n    '''\n    pass\n    \n    \ndef is_power_of_two(n) :  \n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    pass\n    \n    \ndef factorial(n) :  \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    pass\n    \n    \ndef reverse(string) :  \n    '''\n    Write a python function to find the reverse of the given string.\n    '''\n    pass\n    \n    \ndef find_all_indexes(string, letter) :  \n    '''\n    Write a python function to find all the indexes of the given letter in the given string. \n    '''\n    pass\n    \n    \ndef replace_char_at_index(string, index, letter) :  \n    '''\n    Write a python function to replace the character at given index with the given letter.\n    '''\n    pass\n    \n    \ndef find_all_indexes_of_substring(string, substring) :  \n    '''\n    Write a python function to find all the indexes of the given substring in the given string.\n    '''\n    pass\n    \n    \ndef remove_all_occurences(string, letter) :  \n    '''\n    Write a python function to remove all occurences of given letter from the given string.\n    '''\n    pass\n    \n    \ndef replace_all_occurences(string, old_letter, new_letter) :  \n    '''\n    Write a python function to replace all occurences of the given old letter in the given string with the given new letter.\n    '''\n    pass\n    \n    \ndef is_anagram(string1, string2) :  \n    '''\n    Write a python function to check whether two given strings are anagrams or not.\n    '''\n    pass\n    \n    \ndef is_palindrome_using_recursion(string) :  \n    '''\n    Write a python function to check whether the given string is palindrome or not. \n    The function should return true if the string is palindrome otherwise it should return false.\n    '''\n    pass\n    \n    \ndef generate_all_substrings(string) :  \n    '''\n    Write a python function to generate all the substrings of the given string.\n    '''\n    pass\n    \n    \ndef group_anagrams(list_of_strings) :  \n    '''\n    Write a python function to group anagrams together from the list of strings.\n    '''\n    pass\n    \n    \ndef rotate_matrix(matrix) :  \n    '''\n    Write a python function to rotate the given matrix by 90 degrees clockwise.\n    Note : You can assume that the given matrix is a square matrix i.e. size is same for both the rows and columns.\n    '''\n    pass\n    \n    \ndef sort_list_of_strings(list_of_strings) :  \n    '''\n    Write a python function to sort the given list of strings in the order of alphabets.\n    '''\n    pass\n    \n    \ndef print_formatted(number) :  \n    '''\n    Write a python function to print the following pattern for the given number of rows.\n    Note : There will be a single space between the stars.\n    Example :\n    Input : 3\n    Output :\n    1 \n    2 2 \n    3 3 3 \n    '''\n    pass\n    \n    \ndef generate_matrix(n) :  \n    '''\n    Write a python function to generate a matrix with n rows and n columns with all values as 0.\n    Note : You can assume that n is a positive integer.\n    '''\n    pass\n    \n    \ndef find_sum_of_diagonals(matrix) :  \n    '''\n    Write a python function to find the sum of diagonal elements of the given matrix.\n    Note : The first diagonal is the diagonal line connecting the first row to the last column. The second diagonal is the diagonal line connecting the second row to the second last column and so on.\n    '''\n    pass\n    \n    \ndef find_largest_product_in_a_series(series, n) :  \n    '''\n    Write a python function to find the product of the n adjacent numbers in the series.\n    '''\n    pass\n    \n    \ndef find_max_and_min(series) :  \n    '''\n    Write a python function to find the minimum and maximum number in the series.\n    '''\n    pass\n    \n    \ndef find_factors_of_number(number) :  \n    '''\n    Write a python function to find the factors of the given number.\n    '''\n    pass\n    \n    \ndef find_largest_prime_factor(number) :  \n    '''\n    Write a python function to find the largest prime factor of the given number.\n    '''\n    pass\n    \n    \ndef find_fibonacci_number(position) :  \n    '''\n    Write a python function to find the fibonacci number at given position.\n    Note : Position starts from 1.\n    '''\n    pass\n    \n    \ndef find_fibonacci_number_again(position) :  \n    '''\n    Write a python function to find the fibonacci number at given position.\n    Note : This function will find the fibonacci number at nth position (if position is valid) or it will return 0 otherwise.\n    Note : This function will take O(n) time.\n    '''\n    pass\n    \n    \ndef reverse_string(string) :  \n    '''\n    Write a python function to reverse a given string.\n    '''\n    pass\n    \n    \ndef reverse_words_in_a_given_string(string) :  \n    '''\n    Write a python function to reverse words in a given string.\n    '''\n    pass\n    \n    \ndef is_rotation(string1, string2) :  \n    '''\n    Write a python function to check whether the first string is a rotation of the second string.\n    Note : There can be at most one character that needs to be changed for string1 to become a rotation of string2.\n    '''\n    pass\n    \n    \ndef check_if_string_is_palindrome(string) :  \n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    pass\n    \n    \ndef rotate_matrix_90_degree_counter_clockwise(matrix) :  \n    '''\n    Write a python function to rotate the given matrix by 90 degrees clockwise.\n    Note : You can assume that the given matrix is a square matrix i.e. size is same for both the rows and columns.\n    '''\n    pass\n    \n    \ndef find_ma",
        "test": "assert     round(triangle_area(1.6), 2) == 2.08",
        "num_ids": 169
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if end <= start:\n        return -1\n    if end == start+1:\n        return array[start] + 1\n    else:\n        mid = (end+start)//2\n        if array[mid] == mid:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid)\n",
        "test": "assert     find_First_Missing([2,4,6,8,10]) == 3",
        "num_ids": 730
    },
    {
        "number": 628,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"",
        "num_ids": 299
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    l1 = []\n    while i < len(list):\n        if list[i] % 2 == 0:\n            l1.append(list[i])\n        i += 1\n    return l1\n",
        "test": "assert     Split([1, 2, 3, 4, 5])     == [2, 4]",
        "num_ids": 609
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub = [ele]\n    if len(sub) == 1:\n        sub.append(ele)\n        return sub\n    if sub[-1][0] == ele[0] and sub[-1][1] == ele[1]:\n        sub[-1][2] += 1\n    else:\n        sub.append(ele)\n    return sub\n",
        "test": "assert ",
        "num_ids": 489
    },
    {
        "number": 631,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_',' ').replace(' ', '_')\n    \ndef correct_sentence(text):\n    '''\n    Write a function to correct a sentence spelling.\n    '''\n    return \" \".join([replace_spaces(word) if word.isalnum() else word for word in text.split()])\n    \ndef sort_array(a, b):\n    '''\n    Given two arrays a and b write a function to compute their intersection.\n    '''\n    return sorted(list(set(a) & set(b)))\n    \ndef count_islands(grid):\n    '''\n    Given a 2d grid map of '1's (land) and '0's (water), count the number of islands.\n    An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.\n    You may assume all four edges of the grid are all surrounded by water.\n    '''\n    def dfs(grid, x, y, vis):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y]!= '1' or (x,y) in vis:\n            return\n        vis.add((x,y))\n        dfs(grid, x+1, y, vis)\n        dfs(grid, x-1, y, vis)\n        dfs(grid, x, y+1, vis)\n        dfs(grid, x, y-1, vis)\n    vis = set()\n    res = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '1' and (i,j) not in vis:\n                dfs(grid, i, j, vis)\n                res += 1\n    return res\n    \ndef zero_matrix(matrix):\n    '''\n    Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.\n    '''\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 0:\n                matrix[i] = [0]*len(matrix[0])\n                for k in range(len(matrix)):\n                    matrix[k][j] = 0\n    return matrix\n    \ndef sub_array(arr, sub):\n    '''\n    Write a function to check if a given array contains a given subarray.\n    '''\n    for i in range(len(arr)):\n        if arr[i:i+len(sub)] == sub:\n            return True\n    return False\n    \ndef rotate_array(a, d):\n    '''\n    Given an array a of integers and an integer d, rotate the array to the right by d elements.\n    '''\n    return a[-d:] + a[:len(a) - d]\n    \ndef remove_duplicates(arr):\n    '''\n    Write a function to remove duplicates from an array.\n    '''\n    return list(dict.fromkeys(arr))\n    \ndef string_compression(string):\n    '''\n    Implement a method to perform basic string compression using the counts of repeated characters.\n    For example, the string aabcccccaaa would become a2blc5a3.\n    If the \"compressed\" string would not become smaller than the original string, your method should return the original string.\n    You can assume the string has only uppercase and lowercase letters (a - z).\n    '''\n    count = 0\n    compressed = []\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            count += 1\n        else:\n            compressed.append(string[i] + str(count))\n            count = 1\n    if count > 0:\n        compressed.append(string[-1] + str(count))\n    compressed = \"\".join(compressed)\n    if len(compressed) < len(string):\n        return compressed\n    return string\n    \ndef zero_matrix_2(matrix):\n    '''\n    Write an algorithm such that if an element in a 2d matrix is 0, its entire row and column are set to 0.\n    '''\n    rows = set()\n    cols = set()\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 0:\n                rows.add(i)\n                cols.add(j)\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if i in rows or j in cols:\n                matrix[i][j] = 0\n    return matrix\n    \ndef min_subarray_sum(nums, s):\n    '''\n    Given an array of positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum \u2265 s. If there isn't one, return 0 instead.\n    '''\n    curr_sum = 0\n    min_len = float('inf')\n    start, end = 0, 0\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        while curr_sum >= s:\n            min_len = min(min_len, i - start + 1)\n            curr_sum -= nums[start]\n            start += 1\n    return min_len if min_len!= float('inf') else 0\n    \ndef max_profit_with_k_transactions(prices, k):\n    '''\n    You are given an array of integers representing the prices of a single stock on various days (each index in the array represents a different day).\n    You are also given an integer k, which represents the number of transactions you are allowed to make. One transaction consists of buying the stock on a given day and selling it on another, later day.\n    Write a function that returns the maximum profit that you can make buying and selling the stock, given k transactions.\n    Note that you can only hold 1 share of the stock at a time; in other words, you cannot buy more than 1 share of the stock on any given day, and you cannot buy a share of the stock if you are still holding another share.\n    Also note that you cannot sell a share of the stock if you don't hold any share of the stock, i.e., you must hold at least 1 share of the stock at all times.\n    '''\n    if k == 0:\n        return 0\n    profits = [0 for _ in range(len(prices))]\n    for i in range(len(prices)):\n        for j in range(i, len(prices)):\n            profits[j] = max(profits[j], prices[j] - prices[i] + profits[i])\n    return profits[-1]\n    \ndef first_unique_char(string):\n    '''\n    Write a method to replace all the spaces in a string with '%20'. You may assume that the string has sufficient space at the end to hold the additional characters, and that you are given the \"true\" length of the string.\n    '''\n    res = ''\n    for i in range(len(string)):\n        if string[i] =='':\n            res += '%20'\n        else:\n            res += string[i]\n    return res\n",
        "test": "assert     replace_spaces('aaaaaaa') == 'aaaaaaa'",
        "num_ids": 251
    },
    {
        "number": 632,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for item in num_list:\n        if item!= 0:\n            new_list.append(item)\n    new_list.extend([0]*num_list.count(0))\n    return new_list\n",
        "test": "assert     move_zero([0,1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9,0]",
        "num_ids": 565
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += (arr[i] ^ arr[j])\n    return sum\n",
        "test": "assert     pair_xor_Sum([1,2,3], 2) ",
        "num_ids": 424
    },
    {
        "number": 635,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    result = []\n    for value in iterable:\n        hq.heappush(h,value)\n    for i in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n",
        "test": "assert     heap_sort([6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 300
    },
    {
        "number": 637,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert not noprofit_noloss(3,4)",
        "num_ids": 443
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Find the wind chill given the temperature and wind velocity:\n    # wci = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    \n    wci = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    # Round the result to the nearest integer:\n    wci = math.ceil(wci)\n    return wci\n",
        "test": "assert     round(wind_chill(4,12)) == 13",
        "num_ids": 483
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # your code here\n    return sum([len(i) for i in sample_names if not i[0].islower()])\n",
        "test": "assert     sample_nam([],) == 0, \"please insert a list of at least one name\"",
        "num_ids": 461
    },
    {
        "number": 640,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_brackets(items):\n    '''\n    Write a function to remove the brackets and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_brace(items):\n    '''\n    Write a function to remove the braces and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_angles(items):\n    '''\n    Write a function to remove the angle brackets and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_curly(items):\n    '''\n    Write a function to remove the curly brackets and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_square(items):\n    '''\n    Write a function to remove the square brackets and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_tilde(items):\n    '''\n    Write a function to remove the tilde and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_ampersand(items):\n    '''\n    Write a function to remove the ampersand and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_star(items):\n    '''\n    Write a function to remove the star and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_slash(items):\n    '''\n    Write a function to remove the slash and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_hyphen(items):\n    '''\n    Write a function to remove the hyphen and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_period(items):\n    '''\n    Write a function to remove the period and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_plus(items):\n    '''\n    Write a function to remove the plus and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_equal(items):\n    '''\n    Write a function to remove the equal and what is inbetween it from a string.\n    '''\n    items = items.strip()\n    items = re.sub('[\\(\\[].*?[\\)\\]]', '', items)\n    items = items.replace(' ', '')\n    items = items.replace('_', '')\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.replace('[', '')\n    items = items.replace(']', '')\n    return items\n    \ndef remove_at(items):\n    '''\n",
        "test": "assert     remove_parenthesis(\"(Lets learn) (()Python)\") == \"Lets learn (Python)\"",
        "num_ids": 501
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n**2 - n + is_nonagonal(n - 1)\n",
        "test": "assert     is_nonagonal(2) == 3",
        "num_ids": 174
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('(?<!^)[zz]+(?!$)', text)\n    if result!= None:\n        return True\n    return False\n",
        "test": "assert     text_match_wordz_middle('Oh my zebra') == True",
        "num_ids": 390
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    if k >= input_length:\n        return input\n    else:\n        output = input[0:k][::-1]\n        output = output + input[k:][::-1]\n        return output\n    \nif __name__ == '__main__':\n    input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 8\n    output = reverse_Array_Upto_K(input, k)\n    print(output)",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6], 6) == [1,2,3,4,5,6], \"error\"",
        "num_ids": 709
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple_list = list(test_tup)\n    tuple_list.append(test_dict)\n    return tuple(tuple_list)\n",
        "test": "assert     (add_dict_to_tuple(('apple', 'orange', 'banana'), {'fruit': 'apple', 'count': 1})) == (('apple', 'orange', 'banana', {'fruit': 'apple', 'count': 1}))",
        "num_ids": 294
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n",
        "test": "assert     maxAverageOfPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]) == [8,14]",
        "num_ids": 1122
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students={}\n    for key,value in students.items():\n        if(value[0]>=h and value[1]>=w):\n            filtered_students[key]=value\n    return filtered_students\n",
        "test": "assert     filter_data({'James':(172.0,65.0),'Peter':(160.0,40.0),'Mary':(160.0,55.0)}, 160, 55) == {'James':(172.0,65.0),'Mary':(160.0,55.0)}",
        "num_ids": 741
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 599
    },
    {
        "number": 724,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    if power == 1:\n        return base\n    return base * power_base_sum(base, power - 1)\n",
        "test": "assert power_base_sum(10, 0) == 1",
        "num_ids": 278
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print(re.findall(r'\"([^\"]*)\"',text1))\n",
        "test": "assert     extract_quotation(\"\"\"I know that 'I will not\" stop loving you.\"\"\") == ['I will not\"']",
        "num_ids": 460
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if isinstance(test_tup, tuple) == False:\n        raise ValueError('Error: The input is not a tuple')\n    else:\n        new_tup = ()\n        for i in range(0,len(test_tup) - 1):\n            new_tup += ((test_tup[i], test_tup[i+1]),)\n        return new_tup\n    \n",
        "test": "assert     multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12)) == (2,4,6,8,10,12,14,16,18,20,22,24)",
        "num_ids": 549
    },
    {
        "number": 728,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = []\n    for index in range(len(lst1)):\n        new_lst.append(lst1[index] + lst2[index])\n    return new_lst\n",
        "test": "assert     sum_list([1,2,3,4],[1,2,3,4]) == [2,4,6,8]",
        "num_ids": 414
    },
    {
        "number": 730,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def consecutive_duplicates_helper(nums, lst=[]):\n        if not nums:\n            return lst\n        if len(nums) == 1:\n            if nums[0] in lst:\n                return lst\n            return lst + [nums[0]]\n        if nums[0] in lst:\n            return consecutive_duplicates_helper(nums[1:], lst)\n        else:\n            return consecutive_duplicates_helper(nums[1:], lst + [nums[0]])\n    return consecutive_duplicates_helper(nums)\n",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 804
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2 + (math.pi*r*h)/3\n",
        "test": "assert     lateralsurface_cone(3,6) == math.pi * (3**2 + 6**2)**0.5",
        "num_ids": 279
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\" \", \":\").replace(\".\", \":\").replace(\",\", \":\")\n",
        "test": "assert     replace_specialchar(\",\") == \":\", \"wrong result!\"",
        "num_ids": 2276
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x > A[mid]:\n            low = mid + 1\n        elif x < A[mid]:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([2,2,2,2,3], 2) == 0",
        "num_ids": 672
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    import numpy as np\n    n = len(arr)\n    result = np.zeros(n)\n    \n    for i in range(0, n):\n        temp = np.array([arr[0:i], arr[i:n]])\n        result[i] = np.prod(temp)\n",
        "test": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7]) == 5040, \"Wrong answer\"",
        "num_ids": 480
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #code here\n    n = n>>1\n    return n<<1\n    ",
        "test": "assert     set_middle_bits(1234) == 1234",
        "num_ids": 2263
    },
    {
        "number": 736,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i, num in enumerate(a):\n        if num >= x:\n            return i\n    return len(a)\n",
        "test": "assert     left_insertion([1,2,3,4,5],5) == 4",
        "num_ids": 612
    },
    {
        "number": 737,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex,string) is not None \n",
        "test": "assert     check_str('React') == False",
        "num_ids": 275
    },
    {
        "number": 738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert ",
        "num_ids": 184
    },
    {
        "number": 739,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0 \n    return int(math.floor(math.sqrt(8 * n + 1) - 1) / 2) \n",
        "test": "assert     find_Index(1) == 0",
        "num_ids": 392
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #1st method\n    # key = test_tup[0]\n    # value = test_tup[1]\n    # return {key:value}\n    #2nd method\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n    #3rd method\n    # a = dict()\n    # for i in range(len(test_tup)//2):\n    #     a[test_tup[i]] = test_tup[i+1]\n    # return a\n",
        "test": "assert     tuple_to_dict(('Amit','21')) == {'Amit':'21'}, 'tuple_to_dict does not work'",
        "num_ids": 735
    },
    {
        "number": 741,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1 :\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Characters_Same(\"allCharactersSame\") == False, 'incorrect'",
        "num_ids": 296
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/4 * math.sqrt(3) * side**2\n",
        "test": "assert     round(area_tetrahedron(0),6) == round(0,6), \"error\"",
        "num_ids": 242
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not list or not m:\n        return None\n",
        "test": "assert ",
        "num_ids": 199
    },
    {
        "number": 744,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(i is None for i in test_tup)\n",
        "test": "assert     check_none(('a', 2, 0, 3)) == False",
        "num_ids": 270
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    if endnum < startnum:\n        return []\n    else:\n        outlist = []\n        for num in range(startnum, endnum+1):\n            if is_divisible_by_digits(num):\n                outlist.append(num)\n        return outlist\n    \n    \ndef is_divisible_by_digits(num):\n    #print num\n    for i in range(1, len(str(num))+1):\n        if not(num%(10**(i-1))%(i)==0):\n            #print \"No\"\n            return False\n    #print \"Yes\"\n    return True\n",
        "test": "assert ",
        "num_ids": 338
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        area = (r**2)*(a/360)*(math.pi)\n        return area\n",
        "test": "assert     sector_area(1,360) == None",
        "num_ids": 879
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n",
        "test": "assert ",
        "num_ids": 800
    },
    {
        "number": 748,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', r' ', str1)\n",
        "test": "assert     capital_words_spaces('HelloWorld') == 'Hello World'",
        "num_ids": 546
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(s) if s.isdigit() else s for s in re.split(r'(\\d+)', x)])\n",
        "test": "assert ",
        "num_ids": 187
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "test": "assert ",
        "num_ids": 117
    },
    {
        "number": 751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n",
        "test": "assert ",
        "num_ids": 377
    },
    {
        "number": 752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_nums = [1, 1]\n    last_jacobsthal_num = 2\n",
        "test": "assert     jacobsthal_num(3) == 5",
        "num_ids": 196
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    min_k = []\n    for item in test_list:\n        if len(item) >= K:\n            min_list.append(item)\n    min_list = sorted(min_list, key=lambda x: x[1], reverse=True)\n    min_k = [list(x)[0:K] for x in min_list]\n    return min_k\n",
        "test": "assert ",
        "num_ids": 426
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for x in l1 if x in l2 and x in l3]\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 525
    },
    {
        "number": 755,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert     second_smallest([1, 2, 3, 4, 5]) == 2, 'incorrect'",
        "num_ids": 466
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a(\\W+)b+', text)\n    if match:\n        return match.group(1)\n    else:\n        return 'No match!'\n",
        "test": "assert     text_match_zero_one(\"aacb\") == True, \"Houston we've got a problem\"",
        "num_ids": 350
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i[::-1] == j and i!= j:\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([\"geeksforgeeks\", \"geeks\"]) == 0",
        "num_ids": 357
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    uniq_list = []\n    for i in list1:\n        uniq_list.append(tuple(i))\n",
        "test": "assert     unique_sublists([['a', 'b', 'a', 'b'], ['a', 'b', 'a'], ['a', 'b']]) == {('a', 'b'): 3, ('a', 'b', 'a'): 1, ('a', 'b', 'a', 'b'): 1}",
        "num_ids": 494
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdecimal()\n",
        "test": "assert     is_decimal('12.5') == False, 'wrong result'",
        "num_ids": 241
    },
    {
        "number": 760,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_arr=[]\n    for num in arr:\n        if num not in unique_arr:\n            unique_arr.append(num)\n    print(unique_arr)\n    if len(unique_arr)==1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element([1, 1, 1, 2]) == False, 'wrong'",
        "num_ids": 406
    },
    {
        "number": 762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        month = int(monthnum3)\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            print(\"\\nThere are 30 days in this month.\")\n        elif month == 2:\n            print(\"\\nThere are 29 days in this month.\")\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            print(\"\\nThere are 30 days in this month.\")\n    except ValueError:\n        print(\"\\nSorry, there are only numbers from 1 to 12.\")\n        \ndef check_daynumber_number(daynum4):\n    '''\n    Write a function to check whether the given day number is correct or not.\n    '''\n    try:\n        day = int(daynum4)\n        if day > 0 and day < 32:\n            print(\"\\nThis day is correct.\")\n        else:\n            print(\"\\nThere are only days from 1 to 31.\")\n    except ValueError:\n        print(\"\\nSorry, there are only numbers from 1 to 31.\")\n        \ndef check_monthyear_number(monthnum6):\n    '''\n    Write a function to check whether the given month number is correct or not.\n    '''\n    try:\n        month = int(monthnum6)\n        if month > 0 and month < 13:\n            print(\"\\nThis month is correct.\")\n        else:\n            print(\"\\nThere are only months from 1 to 12.\")\n    except ValueError:\n        print(\"\\nSorry, there are only numbers from 1 to 12.\")\n",
        "test": "assert ",
        "num_ids": 404
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort()\n    # initialize minimum difference as\n    # array's length\n    minimum = arr[n - 1] - arr[0]\n    for i in range(0,n - 1): \n        # find minimum of all pairs\n        # after every iteration\n        minimum = min(minimum, arr[i+1] - arr[i])\n    return minimum\n",
        "test": "assert     find_min_diff([3,4,5,6,7,8,9,1,2],9) == 1",
        "num_ids": 338
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return sum(c.isdigit() for c in str)\n",
        "test": "assert     number_ctr(\"1234\") == 4",
        "num_ids": 354
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    return is_polite(n-1)\n",
        "test": "assert     is_polite(0) == False, \"Is_polite function does not work for 0\"",
        "num_ids": 2226
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(0, len(l1)-1):\n        t = (l1[i], l1[i+1])\n        l.append(t)\n    return l\n",
        "test": "assert     pair_wise([])         == []",
        "num_ids": 309
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    unique = set(arr)\n    count = 0\n    for i in unique:\n        for j in unique:\n            if (i + j == sum):\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([1, 5, 2, 6, 3, 2, 4, 8], 2) == 1, 'check the example'",
        "num_ids": 661
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "test": "assert     Diff([1,2,3,4,5],[3,4,5,6,7]) == [1,2]",
        "num_ids": 194
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums_list = list()\n    i = 1\n    while i <= n :\n        if i % 2 == 1 :\n            odd_nums_list.append(i)\n        i += 1\n    total = sum([i**4 for i in odd_nums_list])\n    return total\n",
        "test": "assert ",
        "num_ids": 233
    },
    {
        "number": 771,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch == '{' or ch == '(' or ch == '[':\n            stack.append(ch)\n        elif ch == '}' or ch == ')' or ch == ']':\n            if len(stack) == 0:\n                return False\n            if (ch == '}' and stack[-1]!= '{') or (ch == ')' and stack[-1]!= '(') or (ch == ']' and stack[-1]!= '['):\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     check_expression(\"(a+b)\") == True, \"check_expression('(a+b)') is not returning True\"",
        "num_ids": 623
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_arr = test_str.split(\" \")\n    return \" \".join([x for x in str_arr if len(x)!= K])\n",
        "test": "assert     remove_length(\"I love Python\", 3) == \"I love Python\", 'error: remove_length(\"I love Python\", 3)!= \"I love Python\"'",
        "num_ids": 370
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # print(pattern.findall(text))\n    if pattern.findall(text)!= []:\n        match = pattern.findall(text)\n        print(match)\n        return match\n    else:\n        return None\n",
        "test": "assert     occurance_substring(\"aaabbbccc\", \"b\") == {'aaa': [[0, 4]], 'aab': [[0, 4]], 'aba': [[0, 4]], 'abb': [[0, 4]], 'ab': [[0, 4]], 'b': [[1, 3]], 'bb': [[1, 3]], 'bc': [[1, 3]], 'c': [[2, 2]]}",
        "num_ids": 559
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert     odd_position([1,2,3,4,6]) == False, \"Wrong output\"",
        "num_ids": 680
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0:\n                if test_str[i+1] in vowels:\n                    count += 1\n            elif i == len(test_str) - 1:\n                if test_str[i-1] in vowels:\n                    count += 1\n            else:\n                if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                    count += 1\n    return count\n",
        "test": "assert     count_vowels(\"arrgghh\")         == 0, \"WRONG\"",
        "num_ids": 500
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0 \n    for i in range(0,len(arr)):\n        if arr[i] not in arr[i+1:] :\n            sum += arr[i]\n    return sum\n",
        "test": "assert     (find_sum([1,2,3,4,5]) ==     15), \"The result should be 15\"",
        "num_ids": 681
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if list1 == []:\n        return []\n    list2 = []\n    for k, g in groupby(list1, lambda x: x == list1[0]):\n        list2.append(list(g))\n    list2 = list(filter(lambda x: x!= [], list2))\n    return list2\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 642
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for item in list1:\n        if tuple(item) in dict1:\n            dict1[tuple(item)] += 1\n        else:\n            dict1[tuple(item)] = 1\n    return dict1\n",
        "test": "assert     unique_sublists([[1,2], [2,3], [1,2], [2,3], [1,2], [2,3]]) == {(1, 2): 2, (2, 3): 2, (1, 2): 2, (2, 3): 2}, \"Check if your code works on a unique list\"",
        "num_ids": 501
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n    return combinations(test_list, 2)\n",
        "test": "assert set(find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])) == set([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (7, 8), (7, 9), (7, 10), (9, 10)])",
        "num_ids": 822
    },
    {
        "number": 781,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count = count + 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     count_divisors(1) ==    0,    \"Wrong output\"",
        "num_ids": 326
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # return sum(arr) % 2 == 0\n    return sum(arr) % 2\n",
        "test": "assert ",
        "num_ids": 182
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0,0,0)",
        "num_ids": 748
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_sum += list1[i]\n        else:\n            odd_sum += list1[i]\n    return even_sum * odd_sum\n",
        "test": "assert ",
        "num_ids": 349
    },
    {
        "number": 785,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_list = test_str[1:-1].split(',')\n    final_tuple = tuple(map(int, temp_list))\n    return final_tuple\n",
        "test": "assert     tuple_str_int('(1, 2, 3)') ==     (1, 2, 3)",
        "num_ids": 546
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert     right_insertion([0,2,3,5,9,11], 5) == 4",
        "num_ids": 437
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r\"ab{3}\", text)\n    if match:\n        return match.group()\n    return \"No Match\"\n",
        "test": "assert     text_match_three('abbb')",
        "num_ids": 344
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_tuple = tuple(test_list)\n    \n    return new_tuple\n",
        "test": "assert     new_tuple(['a', 'b', 'c'], 'a,b,c') == ('a', 'b', 'c')",
        "num_ids": 482
    },
    {
        "number": 790,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                result.append(True)\n            else:\n                result.append(False)\n        else:\n            result.append(False)\n    return all(result)\n    \n",
        "test": "assert     even_position([1, 3, 5, 7, 9]) == False, \"Wrong result\"",
        "num_ids": 224
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return ''.join(map(str, test_tup))\n",
        "test": "assert     remove_nested(((0, 1), (1, 2), (0, 2), (0, 3))) \\",
        "num_ids": 579
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == type([]):\n            count+=1\n    return count\n",
        "test": "assert     count_list([[1, 2], [1, 2, 3]])     == 2, \"check count_list\"",
        "num_ids": 298
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left<=right:\n        mid = (left+right)//2\n        if arr[mid]==x:\n            left = mid+1\n        elif arr[mid]>x:\n            right = mid-1\n        else:\n            left = mid+1\n    return left\n",
        "test": "assert     last([],5) == 0",
        "num_ids": 685
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a.*b$', text)!= None\n",
        "test": "assert     text_starta_endb(\"abcdb\") == True",
        "num_ids": 336
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    count = 0\n    for item in dict:\n        count += dict[item]\n    return count\n",
        "test": "assert     return_sum({1:2,3:5}) ==     7",
        "num_ids": 310
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        print(\"Please enter positive number.\")\n    else:\n        if n == 0:\n            return 0\n        else:\n            sum = 0\n            for i in range(1, n + 1, 2):\n                sum += i\n            return sum\n",
        "test": "assert     sum_odd(0) == 0, \"Wrong\"",
        "num_ids": 317
    },
    {
        "number": 798,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        ans = ans + arr[i]\n    return ans\n",
        "test": "assert     _sum([1, 2, 3, 4]) == 10",
        "num_ids": 141
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n<<d)|(n>>(32-d)))&0xFFFFFFFF\n",
        "test": "assert     left_rotate(0b1110111,0)     == 0b1110111",
        "num_ids": 2279
    },
    {
        "number": 800,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)\n",
        "test": "assert     \"banana\" == remove_all_spaces(\"banana\")",
        "num_ids": 271
    },
    {
        "number": 801,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if(x==y==z):\n        return 3\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(1,1,1) == 3, \"test failed\"",
        "num_ids": 465
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    N = len(arr)\n    low = 0\n    high = N-1\n    mid = 0\n    while mid <= high:\n        if arr[low] <= arr[mid] and arr[high] >= arr[mid]:\n            break\n        elif arr[mid] <= arr[high]:\n            high = high - 1\n        else:\n            low = low + 1\n        mid = (low + high)//2\n    rotations = 0\n    i = 0\n    while i < mid:\n        if arr[i] > arr[i+1]:\n            rotations = rotations + 1\n        i = i + 1\n    return rotations\n",
        "test": "assert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0",
        "num_ids": 705
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    return (n ** 0.5) % 1 == 0\n",
        "test": "assert     is_perfect_square(0) == True",
        "num_ids": 172
    },
    {
        "number": 804,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in range(0,len(arr)):\n        prod *= arr[i]\n    return prod % 2 == 0\n",
        "test": "assert     is_product_even([1,2,3,4,6]) == True ",
        "num_ids": 340
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key = sum)\n",
        "test": "assert     max_sum_list([[1,2,3], [4,5,6], [10,11,12]]) == [10,11,12]",
        "num_ids": 420
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    current_count = 0\n    for i in test_str:\n        if i.isupper():\n            current_count+=1\n        else:\n            current_count = 0\n        if current_count > max_count:\n            max_count = current_count\n    return max_count\n",
        "test": "assert     max_run_uppercase('abcdef') == 0, 'Test 2 Fail'",
        "num_ids": 360
    },
    {
        "number": 807,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n",
        "test": "assert     first_odd([12, 14, 16, 18, 20, 22, 24, 25]) == 25",
        "num_ids": 473
    },
    {
        "number": 808,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # N = len(test_tup)\n    # # print(N)\n    # for i in range(0, N):\n    #     for j in range(0, N):\n    #         if K == test_tup[i][j]:\n    #             return True\n    # return False\n    return K in [x for x, y, z in test_tup]\n",
        "test": "assert     check_K(((1,2,3), (4,5,6)), (1,2,3)) == False",
        "num_ids": 465
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('tup1 and tup2 need to be of same size')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller((0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) == False, 'incorrect'",
        "num_ids": 756
    }
]