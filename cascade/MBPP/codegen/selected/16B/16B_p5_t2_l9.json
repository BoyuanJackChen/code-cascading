[
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_element = []\n    for i in test_tup1:\n        if i in test_tup2:\n            similar_element.append(i)\n    return similar_element\n",
        "test": "assert     similar_elements([1, 2, 3, 4], [1, 2, 5, 6]) == [1, 2], \"wrong result\"",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "test": "assert    is_not_prime(6)",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(heap))\n    return res[::-1]\n",
        "test": "assert     [10,9,6,5,4] == heap_queue_largest([10,9,6,5,4],5)",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1) == 0): \n        return True\n    else: \n        return False\n",
        "test": "assert     is_Power_Of_Two(5) == False",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if not isinstance(text,str):\n        return\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "test": "assert     find_char_long(\"\") == []",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**2)\n    return result\n",
        "test": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(1, len(str)):\n        if (str[i] + str[0 : i] == str[0 : i] + str[i :]):\n            rotations += 1\n    return rotations\n",
        "test": "assert     find_Rotations(\"ABAC\") == 0",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    temp=s.replace(ch,\"\")\n    return(temp)\n",
        "test": "assert     remove_Occ(\"Bananas\",'a') == \"Bnns\"",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n",
        "test": "assert     sort_matrix([[1, 2], [1, 3], [4, 5], [0, 1]]) == [[0, 1], [1, 2], [1, 3], [4, 5]], \"incorrect\"",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume\n",
        "test": "assert (find_Volume(4,5,6) == 60), \"Triangular Prism volume is not correct\"",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'^[a-z][a-z]+_[a-z]+$'\n    pattern = re.compile(regex)\n    match = re.search(pattern, text)\n    if match:\n        return True\n    return False\n",
        "test": "assert     text_lowercase_underscore('Aaaa_BBBB_Cccc') == False, 'incorrect'",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \n",
        "test": "assert     square_perimeter(3) == 12",
        "num_ids": 181,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initalize the list for storing the string\n    string_list = []\n",
        "test": "assert     str_to_list(\"The quick brown fox\", \"qk\") ==     \"The quick brown fox\", \"The expected result is not equal to actual result for input 'The quick brown fox', 'qk'\"",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "test": "assert     test_duplicate([1, 2, 3, 4, 5]) == False, \"Dont forget to handle duplicates\"",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x)!= int:\n        raise TypeError('Only integers are allowed')\n    x = str(x)\n    if len(x) == 1:\n        if x[0] == '0':\n            return False\n        else:\n            return True\n    if len(x) > 1:\n        return False\n",
        "test": "assert     is_woodall(42) == False",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num = str(num)\n    # Reverse the string\n    num = num[::-1]\n    # Convert the reversed string back to a number\n    num = int(num)\n    # Check if num is one less than twice its reverse\n    if num == num - 2:\n        return True\n    else:\n        return False\n",
        "test": "assert     rev(10) == False",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n",
        "test": "assert     find_Max_Num([1, 2, 3, 4, 5]) == 5, \"Wrong Result : \" + str(find_Max_Num([1, 2, 3, 4, 5]))",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # function body\n    return (x>0)^(y>0)\n",
        "test": "assert     opposite_Signs(-4,2) == True, 'incorrect'",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n",
        "test": "assert     is_octagonal(1) == 1, 'Fails'",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [0]*n\n    dp[0] = 1\n    mod = 10**9 + 7\n    for i in range(1, n):\n        if s[i] > '9' or s[i-1] > '9':\n            dp[i] = 0\n        else:\n            dp[i] = (dp[i-1] + dp[i-2] * 2) % mod\n    return dp[-1]\n",
        "test": "assert     count_Substrings(\"123\") == 3",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Smallest = 0\n    # for x in xs:\n    #     if x < Smallest:\n    #         Smallest = x\n    # return Smallest\n    \n    return min(xs)\n",
        "test": "assert     smallest_num([0, 4, 5, 0]) == 0, \"the smallest number is 0\"",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > result:\n                result = abs(test_list[i] - test_list[j])\n    return result\n",
        "test": "assert     max_difference([(1, 2), (3, 4), (5, 6)]) == 4, 'Test Failed'",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks,key = lambda x:x[1]))\n",
        "test": "assert     subject_marks([(1, 85), (1, 65), (2, 75), (2, 65), (3, 85), (3, 75)]) == [",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    suma = 0\n    for item in data_list:\n        if isinstance(item, list):\n            suma += recursive_list_sum(item)\n        else:\n            suma += item\n    return suma\n",
        "test": "assert     recursive_list_sum([0]) == 0, \"The only element in a list should be counted as 0.\"",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count +=1\n    return count\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    print(f'n is: {n}')\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n    \n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 2406,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    count = 0\n    for i in range(1,n-1):\n        if A[i] > A[i+1]:\n            count+=1\n    if count==0:\n        return True\n    return False\n",
        "test": "assert     is_Monotonic([]) is True",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(0, len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n",
        "test": "assert     is_sublist([1, 2, 3, 4], [1, 2, 3]) == True",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for elem in Input:\n        if len(elem)!= len(Input[0]):\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,2),(1,2),(1,2),(1,2),(1,2)]) == True",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # The number of passes of the list is determined by the difference between the length of the list and its average.\n    # The average of the list is computed with an online algorithm.\n    # For each pass, the list is sorted by recursively calling the comb_sort method.\n    # Therefore, the time complexity of comb_sort is O(n^(log n)) (the average of the list).\n    n = len(nums)\n    average = 0\n    if n >= 0:\n        average = compute_average(nums)\n    passes = int(n * (math.log(n, 2) + 1))\n    \n    for i in range(passes):\n        for j in range(len(nums)):\n            if j + 1 < len(nums) and nums[j + 1] < nums[j]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                \n        if average == 0:\n            break\n            \n    if average!= 0:\n        # Comb Sort uses a variation of insertion sort, which makes the complexity of the sorting algorithm log(n) in the best and average cases.\n        # The worst case is O(n^2).\n        # The case of an already sorted array is O(n).\n        return comb_sort(nums)\n    else:\n        return nums\n        ",
        "test": "assert     comb_sort([1, 0, -1, 2, -2, 5]) == [-2, -1, 0, 1, 2, 5]",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int(n**(1/2))**2 == n :\n        print('Given number is a perfect square')\n        return True\n    else:\n        print('Given number is not a perfect square')\n        return False\n",
        "test": "assert     dif_Square(1) == True",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i, j = 0, 1\n    while i < len(colors) and j < len(patterns):\n        if colors[i]!= patterns[j]:\n            return False\n        i += 1\n        j += 1\n    return i == len(colors)\n",
        "test": "assert     not is_samepatterns(['green','red', 'blue', 'green','red', 'blue'], ['R', 'G', 'B', 'R', 'G', 'B'])",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in test_list:\n        if (i[0] % K == 0) and (i[1] % K == 0):\n            ans.append(i)\n    return ans\n",
        "test": "assert     find_tuples([(1,1),(2,2),(3,3),(4,4),(5,5)], 1) == [(1,1),(2,2),(3,3),(4,4),(5,5)]",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    import math\n    return n % 11 == 0\n",
        "test": "assert     is_Diff(111) == False",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    return len(s)%2\n    \ndef odd_even(s):\n    '''\n    Write a Python function which checks whether a passed string is palindrome or not.\n    Note: A palindrome is a word, phrase, or sequence that reads the same backward as forward,\n    e.g., madam or nurses run.\n    '''\n    return s[::-1]==s\n",
        "test": "assert     word_len('code') == False",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    return (n * (n+1)) / 2\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v\n",
        "test": "assert     volume_sphere(4) == 4/3*math.pi*(4 ** 3)",
        "num_ids": 2300,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = 0\n    for i in strr:\n        s += ord(i)\n    return chr(s%26)\n",
        "test": "assert     get_Char('hello') ==     '10'",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * (r**2))\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*n-n+1)\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1.copy()\n    d.update(dict2)\n    d.update(dict3)\n    return d\n",
        "test": "assert     merge_dictionaries_three({1: 1, 3: 3},",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n",
        "test": "assert     freq_count([1, 2, 3, 4, 5, 6, 7]) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1}",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    print(math.floor(N/2))\n",
        "test": "assert ",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length=0\n    for i in list1:\n        if len(i)>length:\n            length=len(i)\n    return length\n",
        "test": "assert     ( len_log(['The','quick','the','brown']) == 5)",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) < len(sub_str):\n        return False\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "test": "assert ",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # base case\n    if n == 1:\n        return True\n    if n == 2 or n == 3:\n        return False\n    \n    if n % 2 == 0:\n        return False\n    \n    if n < 4:\n        return True\n    \n    n_sq = int(n ** 0.5)\n    \n    return is_undulating(n_sq) and is_undulating(n_sq + 1)",
        "test": "assert     is_undulating(2) == False",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n    \ndef fib(n):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef binary_search(a,b,target):\n    '''\n    Write a function that performs a binary search for a number in a list of \n    numbers. If the number is not found, return None. Otherwise, return the \n    position of the number in the list. \n    '''\n    if len(a) == 0:\n        return None\n    else:\n        mid = len(a)//2\n        if a[mid] == target:\n            return mid\n        else:\n            if target < a[mid]:\n                return binary_search(a[:mid],b,target)\n            else:\n                return binary_search(a[mid+1:],b,target)\n    \ndef list_sum(a):\n    '''\n    Write a function that returns the sum of all the numbers in a list of \n    numbers.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        return a[0] + list_sum(a[1:])\n",
        "test": "assert     power(2, 3) == 8, 'Should be 8'",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    idx_min = min(test_list, key=itemgetter(1))[0]\n    return idx_min\n",
        "test": "assert     index_minimum([(1, 3), (0, 1), (1, 1), (1, 0), (3, 4)]) == 1",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst = [len(i) for i in lst]\n    min_len = min(lst)\n    return min_len\n",
        "test": "assert     Find_Min_Length([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == 4, 'incorrect output'",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i**2 == n:\n                continue\n            divisors.append(n//i)\n    return len(divisors)\n",
        "test": "assert     divisor(12) ==     6, \"wrong\"",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n    \n    \ndef frequency_lists_nested(list2):\n    '''\n    Write a function to find frequency of each element in a nested list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for element in list2:\n        for i in element:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict\n",
        "test": "assert     frequency_lists([1, 3, 1, 3, 2, 5, 2, 2, 5]) ==     {1: 2, 3: 2, 2: 3, 5: 2}, \"incorrect\"",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_list = [str(number) for number in numbers]\n    list_len = len(numbers_list)\n    product = int(''.join(numbers_list))\n    print(f'{product} / {list_len} = {product/list_len}')\n",
        "test": "assert     multiply_num([1, 1, 1, 1]) == 4, \"Should be 4\"",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n",
        "test": "assert     decimal_to_binary(2) == '10'",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # num = int(input('Enter your number to find the next smallest palindrome: '))\n    num_str = str(num)\n    print('num_str ='+ num_str)\n    if num_str[0] == '-':\n        num_str = num_str[1:]\n        if int(num_str) == 0:\n            return 1\n    # num_str = num_str.lstrip('0')\n    # if num_str == '0':\n    #     return 1\n    # if len(num_str) == 1 and int(num_str) >= 10:\n    #     return int(num_str) + 1\n    # if len(num_str) > 1:\n    #     if int(num_str) >= 10:\n    #         return int(num_str[0]) + 10 * int(num_str[1]) + 1\n    #     else:\n    #         return int(num_str) + 1\n    if len(num_str) == 1 and int(num_str) >= 10:\n        return int(num_str) + 1\n    if len(num_str) > 1:\n        if int(num_str) >= 10:\n            return int(num_str[0]) + 10 * int(num_str[1]) + 1\n        else:\n            return int(num_str) + 1\n",
        "test": "assert     next_smallest_palindrome(9) == 11, \"Incorrect output\"",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element([2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 4, \"Wrong answer\"",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    return word[0] + ''.join([word.capitalize() for word in word[1:]])\n",
        "test": "assert     snake_to_camel('snake_to_camel') =='snakeToCamel'",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        temp = n\n        n = m\n        m = temp\n    # Initializing an empty array to store the subarrays\n    subarrays = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            subarrays.append(i)\n    # Initializing an empty array to store the subarrays with distinct elements\n    subarrays_distinct = []\n    for i in range(1, m + 1):\n        if m % i == 0 and i not in subarrays:\n            subarrays_distinct.append(i)\n    for i in range(len(subarrays_distinct)):\n        if subarrays_distinct[i] == n:\n            return 0\n    subarrays_distinct_len = len(subarrays_distinct)\n    # If number of distinct elements is less than the number of subarrays\n    if subarrays_distinct_len < len(subarrays):\n        return 0\n    for i in range(subarrays_distinct_len):\n        if (subarrays_distinct[i] / subarrays[i])!= int(subarrays_distinct[i] / subarrays[i]):\n            return 0\n    return 1\n",
        "test": "assert     eulerian_num(3, 10) == 0",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "test": "assert     [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]] ==     sort_sublists( [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]] )",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n",
        "test": "assert     count([]) == 0",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n",
        "test": "assert     add_lists([1, 2, 3], [4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list_1=sorted(num1)\n    list_2=sorted(num2)\n    list_3=sorted(num3)\n    result=[]\n    i=0\n    j=0\n    k=0\n    while i<len(list_1) and j<len(list_2) and k<len(list_3):\n        if list_1[i]<list_2[j] and list_1[i]<list_3[k]:\n            result.append(list_1[i])\n            i+=1\n        elif list_2[j]<list_1[i] and list_2[j]<list_3[k]:\n            result.append(list_2[j])\n            j+=1\n        elif list_3[k]<list_1[i] and list_3[k]<list_2[j]:\n            result.append(list_3[k])\n            k+=1\n    result+=list_1[i:]+list_2[j:]+list_3[k:]\n    return result\n",
        "test": "assert     merge_sorted_list([1,3,5,7],[2,4,6,8],[0,9]) == [0,1,2,3,4,5,6,7,8,9]",
        "num_ids": 1525,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return n in (s+s[:n%len(s)]).split('0')\n",
        "test": "assert     (odd_Equivalent(\"11101\", 3) == 0) ",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if set(i) == set(j):\n                if i not in common_list:\n                    common_list.append(i)\n    return common_list\n",
        "test": "assert ",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"100\") == True",
        "num_ids": 245,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{},{},{},{}]) == True, 'incorrect'",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums:\n        return 0\n    else:\n        s = ''\n        for n in nums:\n            s += str(n)\n        return int(s)\n",
        "test": "assert     tuple_to_int((1,)) == 1, 'wrong result'",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(i) for i in test_list]\n    except:\n        return test_list\n    \ndef mean_and_std(df, column_names):\n    '''\n    Write a function to compute the mean and standard deviation of a given column(s) in a dataframe.\n    '''\n    if isinstance(column_names, str):\n        column_names = [column_names]\n    return [df[name].mean(), df[name].std(ddof=0) for name in column_names]\n",
        "test": "assert     list_to_float([[1.0, 2.0], ['1.0', '2.0']]) ==     [1.0, 2.0, 1.0, 2.0], \"Test 2: Wrong answer!\"",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(' ')\n    return string\n",
        "test": "assert     string_to_list(\"hello\") == ['hello']",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    if len(arr) == 3:\n        if arr[0]!= arr[1] or arr[1]!= arr[2]:\n            return arr[0]\n        else:\n            return arr[2]\n    if len(arr) == 4:\n        if arr[0]!= arr[1] or arr[1]!= arr[2]:\n            return arr[0]\n        elif arr[2]!= arr[3] or arr[3]!= arr[4]:\n            return arr[2]\n        else:\n            return arr[4]\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n",
        "test": "assert     search([1,2,2,3,3,4]) == 1",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i) == tuple:\n            new_list.append(i)\n        elif type(i) == list:\n            for x in i:\n                if type(x) == tuple:\n                    new_list.append(x)\n    new_list = list(set(new_list))\n    max_product = 0\n    for i in new_list:\n        for j in new_list:\n            if i!= j and i[0] * j[0] > max_product:\n                max_product = i[0] * j[0]\n    return max_product\n",
        "test": "assert     max_product_tuple([(3, 2), (4, 5), (5, -2)]) == -40",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # using a dict to store all amicable numbers, O(1)\n    # using the sum of each amicable number, O(n)\n    result = 0\n    amicable = {}\n",
        "test": "assert ",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z=complex(a,b)\n    return (cmath.phase(z))\n",
        "test": "assert     cmath.phase(complex(0,0)) == cmath.phase(complex(0.0,0.0)) == 0",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    max_length = 0\n    index = 0\n    if len(string) == 1:\n        return 0\n    while index < len(string):\n        if string[index] == '0':\n            length += 1\n        else:\n            length += 0\n        if length > max_length:\n            max_length = length\n        index += 1\n    return max_length\n",
        "test": "assert     find_length('1110101') == 2, \"Test Failed!\"",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum([i for i in range(1,min(a,b)+1) if a%i==0 and b%i==0])\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    return gcd(b,a%b) if b!=0 else a\n    \ndef lcm(a,b):\n    '''\n    Write a python function to find the least common multiple of two given numbers.\n    '''\n    return int(a*b/gcd(a,b))\n",
        "test": "assert ",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(1, 2) == 2, \"Incorrectly output\"",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str.split(' '):\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n",
        "test": "assert     long_words(4, ['aa', 'but', 'car', 'cat'])!= ['cat']",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # we only need to go through all the possible rows and columns to check if it is a magic square.\n    # the sum of each row/column should be the same, then sum the same for the diagonal.\n    # for this problem we will only consider squares of 3x3.\n    n = 3\n    if (len(my_matrix)!= n):\n        return False\n    # get the sum of each row/column\n    # get the sum of the diagonal.\n    # print(my_matrix)\n    # print(sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))))\n    # print(sum(my_matrix[i][j] for i in range(n) for j in range(n)))\n    # print(sum(my_matrix[i][j] for i in range(n) for j in range(n)) == sum(my_matrix[i][j] for i in range(n) for j in range(n)))\n    if (sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))) == sum(my_matrix[i][j] for i in range(n) for j in range(n))):\n        if (sum(my_matrix[i][j] for i in range(n) for j in range(n)) == sum(my_matrix[i][j] for i in range(n) for j in range(n))):\n            return True\n    return False\n",
        "test": "assert     magic_square_test([[8, 1, 6], [3, 5, 7], [4, 9, 2]]) is True",
        "num_ids": 1199,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dict with default value 0\n    d = defaultdict(int)\n    # Iterate through the list\n    for n in nums:\n        d[n] += 1\n    max_freq = max(d.values())\n    for k, v in d.items():\n        if v == max_freq:\n            return k\n",
        "test": "assert     max_occurrences([1,2,2,2,3,4]) == 2, \"wrong output\"",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a','e','i','o','u','A','E','I','O','U'])\n    str1 = list(str1)\n    i,j = 0,len(str1)-1\n    while(i<j):\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i],str1[j] = str1[j],str1[i]\n            i+=1\n            j-=1\n        if str1[i] not in vowels:\n            i+=1\n        if str1[j] not in vowels:\n            j-=1\n    return ''.join(str1)\n",
        "test": "assert     reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup = str(tup1)\n    return tup\n",
        "test": "assert     tup_string((1,2,3)) == '(1, 2, 3)'",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # def sum_negativenum(nums):\n    #     negative_sum = 0\n    #     for x in nums:\n    #         if x < 0:\n    #             negative_sum += x\n    #     return negative_sum\n    return sum(n for n in nums if n < 0)\n",
        "test": "assert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -45",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert     hexagonal_num(1) ==     1",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    print(count)\n    print(len(nums)-count)\n    return count / len(nums)\n",
        "test": "assert     zero_count([0,0,0,0]) == 1.0",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = set()\n    s.add(1)\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            s.add(2)\n        else:\n            if 2 in s:\n                return True\n            else:\n                return False\n    return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(25) == False, \"Test Failed\"",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n",
        "test": "assert     circle_circumference(0) ==    0.0, 'wrong result'",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten_lists(a_list):\n        '''\n        Write a function to flatten the list of lists into a single set of numbers.\n        '''\n        if isinstance(a_list, list):\n            if a_list == []:\n                return []\n            else:\n                return a_list[0] + flatten_lists(a_list[1:])\n        else:\n            return a_list\n    return flatten_lists(test_list)\n",
        "test": "assert     extract_singly( [[1, 2], [3, 4], [5, 6]] ) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for size in reversed(range(len(nums))):\n        # print(size)\n        for i in range(size):\n            if nums[i] > nums[i+1]:\n                # print(nums[i], nums[i+1])\n                temp = nums[i]\n                nums[i] = nums[i+1]\n                nums[i+1] = temp\n                # print(nums[i], nums[i+1])\n                # flip(nums, i)\n        # print(nums)\n    return nums\n",
        "test": "assert     pancake_sort([3, 2, 4, 1]) == [1, 2, 3, 4]",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            a+=1\n    return a\ndef count_samepair_v2(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] or list1[i]==list3[i] or list2[i]==list3[i]:\n            a+=1\n    return a\ndef same_str(a,b,c):\n    '''\n    Write a function to count number of common characters between the given strings.\n    '''\n    if a==b==c:\n        return True\n    elif a==b:\n        return True\n    elif a==c:\n        return True\n    elif b==c:\n        return True\n    else:\n        return False\n",
        "test": "assert     count_samepair([1,2,3], [2,4,5], [3,5,6]) == 0",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = 0\n    for x in Input:\n        if type(x) == list:\n            result += 1\n    return result\n",
        "test": "assert     (find_lists((2, ('aa', 'bb', 'cc')))) == 0",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_abs = max(abs(arr[i] - arr[j]),max_abs)\n    return max_abs\n",
        "test": "assert     max_Abs_Diff([1,2,3,4,5,6,7]) == 6, 'wrong answer'",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return (int(n / a) if a!= 0 else None, n % a) if b == 0 else (n % b, int(n / b))\n",
        "test": "assert     find_solution(1,2,1) == (1, 0)",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [num for num in list1 if num not in list2]\n",
        "test": "assert     (remove_elements([2,3,5,7], [2,7,11]) == [3,5])",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    return n + sum_series(n - 2)\n",
        "test": "assert         sum_series(1)        == 1",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l / 2 * tan(pi / l)\n",
        "test": "assert ",
        "num_ids": 2207,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n1,n2=n,n\n    n1_factors,n2_factors=[],[]\n    sum1,sum2=0,0\n    n1_factors.append(1)\n    n2_factors.append(1)\n    for i in range(2,int(math.sqrt(n1))+1):\n        if n1%i==0:\n            n1_factors.append(i)\n            n1_factors.append(int(n1/i))\n    for i in range(2,int(math.sqrt(n2))+1):\n        if n2%i==0:\n            n2_factors.append(i)\n            n2_factors.append(int(n2/i))\n    for i in n1_factors:\n        for j in n2_factors:\n            sum1+=i\n            sum2+=j\n    if sum1==sum2:\n        return True\n    return False\n    \ndef qubo_solver(n):\n    '''\n    Write a function to determine the sum of all values in the square below zero which are also perfect squares.\n    '''\n    sum1,square=[],[]\n    i=1\n    while i<n:\n        square.append(i*i)\n        i+=1\n    for i in range(1,n):\n        sum1.append(square[i-1]+square[i])\n    return sum1\n",
        "test": "assert     div_sum(6) == True",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for ch in str1:\n        if ch.isalpha():\n            if ord(ch) == ord(ch.upper()):\n                count += 1\n    return count\n",
        "test": "assert     count_char_position('ABCA') == 4",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    table = {}\n    for num in A:\n        if num not in table:\n            table[num] = 1\n        else:\n            table[num] += 1\n    count = 0\n    for num in table:\n        if table[num] % 2 == 0:\n            count += table[num]//2\n    return count \n",
        "test": "assert     find_even_pair([]) == 0, \"If there is no pair, return 0\"",
        "num_ids": 2536,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while(1):\n        i += 1\n        n = n >> 1\n        if n == 0:\n            return 2**i\n",
        "test": "assert     next_power_of_2(19) == 32",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if x==a[i]:\n            count = count + 1\n    return count\n",
        "test": "assert     frequency([1,2,3,4,5], 5) == 1",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s += list1[i]\n    return s\n    \nl = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(sum_range_list(l, 0, 4))         \nprint(sum_range_list(l, 0, 5))\nprint(sum_range_list(l, 0, 6))\n",
        "test": "assert     sum_range_list([1,2,3,4], 0, 0) == 0, 'incorrect'",
        "num_ids": 2820,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter of pentagon\n    perimeter = 0\n    for i in range(5):\n        perimeter += a\n    return perimeter\n",
        "test": "assert     perimeter_pentagon(4) == 20.0, 'Not Passed.'",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('stdnnsss') == 1",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Method 1\n    test_tuple = tuple(test_tuple)\n    return(type(test_tuple[0])) == type(test_tuple[1]) == type(test_tuple[2]) == type(test_tuple[3])\n",
        "test": "assert     check_type((1.0, 2)) == False",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i, j = 0, n - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return False\n",
        "test": "assert     is_majority([1,2,1,1,3], 5, 1) == True",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return n.bit_count()\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert     odd_values_string('') == '', \"Empty string input\"",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    if b <= a and b <= c:\n        return b\n    if c <= a and c <= b:\n        return c\n    else:\n        return None\n",
        "test": "assert     min_of_three(1, 2, 3) == 1,             'test 1 failed.'",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((2**n)-1)&l==0 and ((2**n)-1)&r==((2**n)-1)\n    \n",
        "test": "assert     (all_Bits_Set_In_The_Given_Range(1234,1,2)) == False",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n < 1 or n > len(arr):\n        return None\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > 0:\n            if arr[j] < 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n        else:\n            if arr[j] > 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n                j -= 1\n            else:\n                i += 1\n",
        "test": "assert     re_arrange_array([9, 8, 7, 6, 5, 4, 3, 2, 1, -2, -3, -4, -7, -6, -9, -8], 3) == [9, 8, 7, -2, -3, -4, -7, -6, -9, -8, 6, 7, 8, 5, 4, 3]",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if str1 == '':\n        return ''\n    else:\n        str1 = str1.replace(' ',char)\n        return str1\n",
        "test": "assert     replace_blank('', '!') == ''",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n    \n",
        "test": "assert     larg_nnum([1, 2, 3], 3) == [3, 2, 1], \"output\"",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 3.14*(r**2)*h\n",
        "test": "assert     lateralsuface_cylinder(0,0) == 0, \"Wrong\"",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(10) == 1000",
        "num_ids": 168,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Example: 242 -> 101010\n    # even bits: 101010 -> 101010\n    # odd bits: 101010 -> 101100\n    # So we just need to replace even bits with their original value.\n    # Create a mask that has all the even bits set.\n    mask = 0xAAAAAAAA\n    # Apply that mask to n.\n    return n & mask\n",
        "test": "assert     even_bit_set_number(3) == 28",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n    # print(check_occurences([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(2,3,4),(5,7,8)]))\n",
        "test": "assert     check_occurences([(1, 2), (1, 2), (1, 2)]) == {(1, 2): 3}",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count\n",
        "test": "assert     number_of_substrings(\"aaa\") == 6",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #This can be done in O(n^2) time. \n    return m**n - ((m-1)**n) - (m**(n-1) - (m-1)**(n-1))\n",
        "test": "assert     get_total_number_of_sequences(1,1) == 1",
        "num_ids": 2560,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #list1 = [1,2,3,4,5,6,7,8,9,10]\n    #list2 = [1,2,3,4,5,6,7]\n    return list1[0:-1] + list2\n",
        "test": "assert     replace_list([1,2,3,4], [1,2,3]) == [1,2,3,1,2,3]",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac(\"Hello\") == 5, \"Count characters should be 5\"",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N >= 1): \n        x = (int)(math.sqrt(N)) \n        return (x + 1) * (x + 1) \n    else: \n        return 0\n",
        "test": "assert     math.isqrt(4) == 2, \"Test Failed!\"",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    arr.sort()\n    for i in range(1, len(arr) - 1):\n        sum = arr[i] + arr[i - 1] + arr[i + 1]\n        max_sum = max(max_sum, sum)\n    return max_sum\n",
        "test": "assert     max_sum([5, 4, 3, 2, 1, 0]) == 10",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2\n    while True:\n        better = (approx + number/approx)/2\n        if abs(approx-better) < 0.000001:\n            return better\n        approx = better\n",
        "test": "assert     babylonian_squareroot(100) == 10",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # code here\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n    for i in range(2,n):\n        for j in range(n-i):\n            k = j+i\n            if str[j] == str[k] and dp[j+1][k-1] > 0:\n                dp[j][k] = dp[j+1][k-1] + 2\n            else:\n                dp[j][k] = max(dp[j][k-1],dp[j+1][k])\n    return dp[0][n-1]",
        "test": "assert     lps(\"CABBA\") == 4",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 193,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)<len(array_nums2):\n        base_array=array_nums1\n        check_array=array_nums2\n    else:\n        base_array=array_nums2\n        check_array=array_nums1\n    set_array=[]\n    for num in base_array:\n        if num in check_array:\n            set_array.append(num)\n    return set_array\n",
        "test": "assert     intersection_array([1, 2, 2, 1], [2, 2]) == [2, 2], 'fails'",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X((1,2,3,2,4,2,5), 2) == 3",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "test": "assert     insert_element([], 42)                 == [42]",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #list_num=[]\n    #print(\"Input : \",numbers)\n    real=numbers.real\n    imaginary=numbers.imag\n    #print(real,imaginary)\n    polar=cmath.polar(complex(real,imaginary))\n    #print(polar)\n    #print(polar[0],polar[1])\n    return(polar)\n",
        "test": "assert     convert(complex(1,1)) == (1.4142135623730951, 0.7853981633974483)",
        "num_ids": 854,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i)==int:\n            count +=1\n    return count\n",
        "test": "assert     count_integer([1, 2, 3, 4, 5, 'a']) == 5, 'Wrong output'",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(i) for i in combinations_with_replacement(l,n)]\n",
        "test": "assert     combinations_colors([1, 2, 3], 2) ==     [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(n):\n        if i > 1:\n            for j in range(2,i):\n                if (i % j) == 0:\n                    break\n            else:\n                primes.append(i)\n    return len(primes)\n",
        "test": "assert     count_Primes_nums(0) == 0, \"Wrong answer\"",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return (a,b)\n",
        "test": "assert     swap_numbers(1, 2) == (2, 1), \"swap_numbers(1, 2) should return (2, 1)\"",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple([max(x,y) for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     maximize_elements((1,2,3), (1,2,3)) == (1,2,3)",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 53\n    if n == 17:\n        return 59\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n == 20:\n        return 71\n    if n == 21:\n        return 73\n    if n == 22:\n        return 79\n    if n == 23:\n        return 83\n    if n == 24:\n        return 89\n    if n == 25:\n        return 97\n    if n == 26:\n        return 101\n    if n == 27:\n        return 103\n    if n == 28:\n        return 107\n    if n == 29:\n        return 109\n    if n == 30:\n        return 113\n    if n == 31:\n        return 127\n    if n == 32:\n        return 131\n    if n == 33:\n        return 137\n    if n == 34:\n        return 139\n    if n == 35:\n        return 149\n    if n == 36:\n        return 151\n    if n == 37:\n        return 157\n    if n == 38:\n        return 163\n    if n == 39:\n        return 167\n    if n == 40:\n        return 173\n    if n == 41:\n        return 179\n    if n == 42:\n        return 181\n    if n == 43:\n        return 191\n    if n == 44:\n        return 193\n    if n == 45:\n        return 197\n    if n == 46:\n        return 199\n    if n == 47:\n        return 211\n    if n == 48:\n        return 223\n    if n == 49:\n        return 227\n    if n == 50:\n        return 229\n    if n == 51:\n        return 233\n    if n == 52:\n        return 239\n    if n == 53:\n        return 241\n    if n == 54:\n        return 251\n    if n == 55:\n        return 257\n    if n == 56:\n        return 263\n    if n == 57:\n        return 269\n    if n == 58:\n        return 271\n    if n == 59:\n        return 277\n    if n == 60:\n        return 281\n    if n == 61:\n        return 283\n    if n == 62:\n        return 293\n    if n == 63:\n        return 307\n    if n == 64:\n        return 311\n    if n == 65:\n        return 313\n    if n == 66:\n        return 317\n    if n == 67:\n        return 331\n    if n == 68:\n        return 337\n    if n == 69:\n        return 347\n    if n == 70:\n        return 349\n    if n == 71:\n        return 353\n    if n == 72:\n        return 359\n    if n == 73:\n        return 367\n    if n == 74:\n        return 373\n    if n == 75:\n        return 379\n    if n == 76:\n        return 383\n    if n == 77:\n        return 389\n    if n == 78:\n        return 397\n    if n == 79:\n        return 401\n    if n == 80:\n        return 409\n    if n == 81:\n        return 419\n    if n == 82:\n        return 421\n    if n == 83:\n        return 431\n    if n == 84:\n        return 433\n    if n == 85:\n        return 439\n    if n == 86:\n        return 443\n    if n == 87:\n        return 449\n    if n == 88:\n        return 457\n    if n == 89:\n        return 461\n    if n == 90:\n        return 463\n    if n == 91:\n        return 467\n    if n == 92:\n        return 479\n    if n == 93:\n        return 487\n    if n == 94:\n        return 491\n    if n == 95:\n        return 499\n    if n == 96:\n        return 503\n    if n == 97:\n        return 509\n    if n == 98:\n        return 521\n    if n == 99:\n        return 523\n    if n == 100:\n        return 541\n    if n == 101:\n        return 547\n    if n == 102:\n        return 557\n    if n == 103:\n        return 563\n    if n == 104:\n        return 569\n    if n == 105:\n        return 571\n    if n == 106:\n        return 577\n    if n == 107:\n        return 581\n    if n == 108:\n        return 583\n    if n == 109:\n        return 593\n    if n == 110:\n        return 599\n    if n == 111:\n        return 601\n    if n == 112:\n        return 607\n    if n == 113:\n        return 613\n    if n == 114:\n        return 617\n    if n == 115:\n        return 619\n    if n == 116:\n        return 631\n    if n == 117:\n        return 641\n    if n == 118:\n        return 643\n    if n == 119:\n        return 647\n    if n == 120:\n        return 653\n    if n == 121:\n        return 659\n    if n == 122:\n        return 661\n    if n == 123:\n        return 673\n    if n == 124:\n        return 677\n    if n == 125:\n        return 683\n    if n == 126:\n        return 691\n    if n == 127:\n        return 701\n    if n == 128:\n        return 709\n    if n == 129:\n        return 719\n    if n == 130:\n        return 727\n    if n == 131:\n        return 733\n    if n == 132:\n        return 739\n    if n == 133:\n        return 743\n    if n == 134:\n        return 751\n    if n == 135:\n        return 757\n    if n == 136:\n        return 761\n    if n == 137:\n        return 769\n    if n == 138:\n        return 773\n    if n == 139:\n        return 787\n    if n == 140:\n        return 797\n    if n == 141:\n        return 809\n    if n == 142:\n        return 811\n    if n == 143:\n        return 821\n    if n == 144:\n        return 823\n    if n == 145:\n        return 827\n    if n == 146:\n        return 829\n    if n == 147:\n        return 839\n    if n == 148:\n        return 853\n    if n == 149:\n        return 857\n    if n == 150:\n        return 859\n    if n == 151:\n        return 863\n    if n == 152:\n        return 877\n    if n == 153:\n        return 881\n    if n == 154:\n        return 883\n    if n == 155:\n        return 887\n    if n == 156:\n        return 907\n    if n == 157:\n        return 911\n    if n == 158:\n        return 919\n    if n == 159:\n        return 929\n    if n == 160:\n        return 937\n    if n == 161:\n        return 941\n    if n == 162:\n        return 947\n    if n == 163:\n        return 953\n    if n == 164:\n        return 967\n    if n == 165:\n        return 971\n    if n == 166:\n        return 977\n    if n == 167:\n        return 983\n    if n == 168:\n        return 991\n    if n == 169:\n        return 997\n    if n == 170:\n        return 1009\n    if n == 171:\n        return 1013\n    if n == 172:\n        return 1019\n    if n == 173:\n        return 1021\n    if n == 174:\n        return 1031\n    if n == 175:\n        retur",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 2569,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    first_tup = test_tup1\n    second_tup = test_tup2\n",
        "test": "assert     division_elements( (5, 6, 7, 8), (1, 2, 3, 4) ) == (2.5, 3.0, 3.5, 4.0)",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if (len(list1) < L):\n        print(\"List length is less than L, returning the list\")\n        return list1, None\n    return list1[0:L], list1[L:]\n    pass\n",
        "test": "assert     split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert     dog_age(0) == 0, 'function dog_age(h_age) returns dog\\'s age in human years'",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_split = []\n    if step > len(S):\n        return list_split\n    for i in range(0, len(S), step):\n        list_split.append(S[i:i+step])\n    return list_split\n",
        "test": "assert     (list_split([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6], [7]])",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_surface_area(l):\n        return 6*l**2\n    return lateral_surface_area(l)\n",
        "test": "assert     lateralsurface_cube(3) == 54",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    num = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    count = 1\n    total = 0\n    while count <= n:\n        for i in num:\n            total += i ** 2\n        count += 1\n    return total\n",
        "test": "assert     (square_Sum(4) == 332), \"Incorrect output for square_Sum(4)\"",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    count = 0\n    while star_num < n:\n        star_num += 5 ** count\n        count += 1\n    star_num -= 5 ** (count - 1)\n    count -= 1\n    return star_num + 5 ** count\n",
        "test": "assert     find_star_num(1) == 1, find_star_num(1)",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    assert (isinstance(k, str) and len(k) == 1)\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for item in arr:\n        if (item%2==0 and item!=0):\n            sum_even += item\n    return sum_even\n",
        "test": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7]) == 12, \"Not working\"",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for x in range(1, n+1):\n        sum += x**5\n    return sum",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result\n",
        "test": "assert     rear_extract([(1,3),(4,2),(4,5)]) == [3,2,5], \"Not correct\"",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    my_tuple = ()\n    my_list = list(test_tup1)\n    for i in range(len(my_list)):\n        my_tuple += (my_list[i] - test_tup2[i],)\n    return tuple(my_tuple)\n",
        "test": "assert     substract_elements( (2,3,4), (1,2,3) ) == (1, 1, 1)",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomialCoeff(n, k): \n        C = [[0 for i in range(k + 1)] for j in range(n + 1)] \n        for i in range(n+1): \n            for j in range(min(i, k) + 1): \n                if j == 0 or j == i: \n                    C[i][j] = 1\n                else: \n                    C[i][j] = C[i - 1][j - 1] + C[i - 1][j] \n        return C[n][k] \n    return sum([binomialCoeff(n, i) for i in range(n) if i%2 == 0])\n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r**2)*h\n",
        "test": "assert     volume_cylinder(0,2) == 0",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict2 = {}\n    for key, value in dict.items():\n        if value >= n:\n            dict2[key] = value\n    return dict2\n",
        "test": "assert     dict_filter({'a': 3, 'b': 2, 'c': 3}, 2) == {'a': 3, 'c': 3}",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            break\n        else:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements((5, 3, 9, 1, 1, 2, 2, 2, 4, 5, 5, 3, 5)) == ",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<0: \n        return \"No negative numbers allowed\"\n    else: \n        num=int(n*(n+1)/2)\n        return num\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "test": "assert     sequential_search([1, 2, 3, 4, 5, 6, 7], 2) == (True, 1)",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "test": "assert     all_unique([1, 2, 3, 4, 5, 6]) == True, \"all_unique did not work for a correct input\"",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    nums = []\n    for i in range(len(nums1)):\n        nums.append(nums1[i] - nums2[i])\n    return nums\n",
        "test": "assert     sub_list([1,2,3,4],[0,1,2,3]) == [1,1,1,1]",
        "num_ids": 566,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    arr = []\n    while(n):\n        arr.append(n % 10)\n        n //= 10\n    arr.sort()\n    for i in arr:\n        if arr.count(i) > i:\n            return False\n    return True\n",
        "test": "assert     validate(111111111111111111111111111111111111111111111111111111111111111111111) == False, 'Wrong'",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all([i==element for i in list])\n",
        "test": "assert     check_element([1,2,3,4],1) == False",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('ab{2,3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('abbbbc') == True, 'WRONG'",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    s = 0\n    i = 0\n    while i < n:\n        if i + k <= n:\n            s = sum(a[i: i + k])\n            if s > max_sum:\n                max_sum = s\n            i += 1\n        else:\n            break\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([-1,2,3,1,-1,5,6,7], 8, 3) ==     18",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(2,n+1):\n        if i % 2 == 0:\n            s += i**2\n    return s\n",
        "test": "assert     square_Sum(0) == 0, \"incorrect\"",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(i) for i in list1])\n",
        "test": "assert     max_length([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[7, 8]], \\",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    mod = 10**9 + 7\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    \n    # base case initialization\n    for i in range(k+1):\n        dp[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = (dp[i][j-1] + dp[i-1][j])%mod\n    \n    # print(dp)\n    return dp[n][k]\n    \n    \n    \n    \n    \ndef find_max_equal_subarray(arr, n):\n    '''\n    Write a function to find the maximum sum of the contiguous subarray of size k with the best possible value.\n    '''\n    sum_so_far = 0\n    max_sum = 0\n    start = 0\n    \n    for i in range(n):\n        sum_so_far += arr[i]\n        if i >= k-1:\n            max_sum = max(max_sum, sum_so_far)\n            sum_so_far -= arr[start]\n            start += 1\n    return max_sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     count_no_of_ways(1, 1) == 1, \"Wrong answer\"",
        "num_ids": 2153,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Implementing a function to find quotient of two numbers\n    if m!=0:\n        return n//m\n    return 0",
        "test": "assert     find(1,1) == 1",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt(w**2+h**2))\n",
        "test": "assert     otherside_rightangle(3,4)==5",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    newlist = []\n    for x in listval:\n        if isinstance(x, int) or isinstance(x, float):\n            newlist.append(x)\n        else:\n            pass\n    return max(newlist)\n",
        "test": "assert     max_val([1,2,3,4,5]) == 5, \"incorrect\"",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 1\n    for x in range(2,number):\n        if number % x == 0:\n            sum_div = sum_div + x\n    return sum_div\n",
        "test": "assert     sum_div(1) == 1",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                count += 1\n    return count \n",
        "test": "assert     get_Inv_Count([2, 1]) == 1",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if isinstance(i,list):\n            result += flatten_list(i)\n        else:\n            result.append(i)\n    return result\n",
        "test": "assert     flatten_list([[1,2,3], [4,5], [6,7,8]]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = {}\n    max_agg = 0\n    for item in stdata:\n        if aggregate.get(item[0]):\n            aggregate[item[0]] = aggregate.get(item[0]) + item[1]\n        else:\n            aggregate[item[0]] = item[1]\n    for k,v in aggregate.items():\n        if v > max_agg:\n            max_agg = v\n    return max_agg\n",
        "test": "assert     max_aggregate([(5, 5), (7, 10), (6, 1), (1, 1)]) == 10",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    cnt = 0\n    for i in range(1, 2**n):\n        b = bin(i)[2:]\n        if int(b[:n]) == int(b[-n:]):\n            cnt += 1\n    return cnt",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return 0\n    elif isinstance(d, list):\n        return 1 + max(map(dict_depth, d))\n    else:\n        return 1\n",
        "test": "assert     dict_depth({'a': 1}) == 1",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index<0:\n        return -1\n    l=ranges[0]\n    r=ranges[1]\n    n=rotations\n    if(l>r):\n        if(n%2==0):\n            return arr[index]\n        else:\n            if(index==r):\n                return arr[l]\n            else:\n                return arr[r]\n    else:\n        if(n%2==0):\n            return arr[r+index]\n        else:\n            return arr[l+index]\n            \ndef test_function(test_case):\n    arr = test_case[0]\n    ranges = test_case[1]\n    rotations = test_case[2]\n    solution = test_case[3]\n    output = find_Element(arr, ranges, rotations)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n",
        "test": "assert     find_Element([1, 2, 3, 4], [0, 2, 1, 3], 2, 0) == 3",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words == []:\n        return []\n    else:\n        return [words[0],words[1]]\n",
        "test": "assert     start_withp(['python', 'is', 'awesome']) == ['python', 'is']",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k >= n:\n        return -1\n    if k == 1:\n        return sum(a[:index+1])\n    # print(k, index, a)\n    max_sum = -sys.maxsize\n    i = index\n    while i >= 0:\n        # print('i', i)\n        max_sum = max(max_sum, sum(a[:i+1]))\n        i -= 1\n    i = index + 1\n    while i < k:\n        # print('i', i)\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n        i += 1\n    return max_sum\n",
        "test": "assert     max_sum_increasing_subseq([4, 0, 1, 2, 3, 10, 100, 200], 8, 7, 7) == 200",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[m-1],tuplex[n-1])\n",
        "test": "assert     colon_tuplex((1,2,3,4,5,6,7,8,9),3,2) == ((1,2,3),(4,5,6))",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = list(reversed(sorted(nums1)))\n    nums2 = list(reversed(sorted(nums2)))\n    result = []\n    for i in range(N):\n        if len(nums1) == 0:\n            result.append(nums2[i])\n        elif len(nums2) == 0:\n            result.append(nums1[i])\n        elif nums1[i] * nums2[i] > result[i-1] * result[i-1]:\n            result.append(nums1[i] * nums2[i])\n        else:\n            result.append(result[i-1] * result[i-1])\n",
        "test": "assert     large_product([1,2,3,4], [5,6,7,8], 2) == [24, 48]",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b",
        "test": "assert     maximum(3,6)== 6",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('Hello') == ('H','e','l','l','o')",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    import math\n    n = int(n)\n    return n ^ (n & (n - 1))\n",
        "test": "assert     set_left_most_unset_bit(0b111111111111111111111111111111111111) == 0b1",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #pi\n    #volume = pi * r^2 * h\n    return math.pi * r ** 2 * h\n",
        "test": "assert     volume_cone(1,1) == math.pi",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return 1 if (n & (n - 1)) == 0 else highest_Power_of_2(n & (n - 1)) + 1\n",
        "test": "assert     highest_Power_of_2(15) == 4",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n): \n        '''\n        Returns the nth lucas number using recursive\n        '''\n        if n == 0: \n            return 2\n        elif n == 1: \n            return 1\n        else:\n            return lucas(n-1) + lucas(n-2)\n    return lucas(n)\n",
        "test": "assert     (find_lucas(0) == 2)",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if type(list_)!= list:\n        return None\n    for x in list_:\n        if type(x) == int:\n            print(\"the element: %d\" % x)\n        elif type(x) == str:\n            print(\"the element: %s\" % x)\n        elif type(x) == list:\n            add_string(x, string)\n        else:\n            print(\"error: unknown type of element in list\")\n            return None\n",
        "test": "assert     add_string(['abc', 'def', 'xyz'], '{:d}') == ['abc', 'def', 'xyz']",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [dict(zip(l1, x)) for x in zip(*l2, *l3)]\n",
        "test": "assert     convert_list_dictionary(",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n==1):\n        return 1\n    if (n==2):\n        return 2\n    if (n==3):\n        return 4\n    if (n==4):\n        return 7\n    if (n==5):\n        return 13\n    return max((get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5)),n)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    for i in input_list:\n        if len(i) > maximum:\n            maximum = len(i)\n    return maximum\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    check_set = set()\n    for t in test_tup:\n        if t in check_set:\n            return False\n        check_set.add(t)\n    return True\n",
        "test": "assert     check_distinct([1,2,3,1]) == False, 'check_distinct failed'",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(0,len(str1)):\n        if str1.count(str1[i])==1:\n            return str1[i]\n    return -1\n    # pass #remove pass after writing the function\n",
        "test": "assert     first_non_repeating_character('aabbccd') == 'd'",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (bool(re.match(regex, string))) \n",
        "test": "assert     check_char(\"abccba\") == True",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    n = len(nums)\n    if n%2 == 0:\n        median = (nums[n//2-1] + nums[n//2])/2\n    else:\n        median = nums[n//2]\n    return median\n",
        "test": "assert     median_numbers(1,2,3) == 2",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(map(int,str(nums[i]))) for i in range(0,len(nums))]\n",
        "test": "assert ",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        # convert tuples to lists\n        list_test_tup1 = list(test_tup1)\n        list_test_tup2 = list(test_tup2)\n        # initialize empty list\n        list_result = []\n        # perform bitwise xor operation\n        for num1, num2 in zip(list_test_tup1, list_test_tup2):\n            list_result.append(num1 ^ num2)\n        # convert list to tuple\n        tup_result = tuple(list_result)\n        return tup_result\n    else:\n        print(\"Error: Invalid input\")\n",
        "test": "assert     bitwise_xor((1, 0, 1, 1), (1, 1, 1, 0)) == (0, 1, 0, 1)",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "test": "assert     extract_freq([(0, 1), (1, 1), (1, 1), (2, 1), (3, 1), (2, 1), (3, 1), (0, 1), (0, 1), (1, 1), (3, 1), (0, 1), (0, 1), (2, 1), (3, 1)]) == 4",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return [tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2)]\n",
        "test": "assert     add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8), (9, 10))) == ((6, 8), (10, 12)), \"Test 2 Failed\"",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(3,4) == 3",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if (set(tuplex).issuperset(set(tuple1))) else False \n",
        "test": "assert not check_tuplex([1,2,3],(1,2,4))",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n        \nprint(find_Parity(5))\n",
        "test": "assert     find_Parity(0) == 0",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(i) for i in str(n)]\n    n_list = sorted(digits, reverse = True)\n    new_num = [str(i) for i in n_list]\n    return int(''.join(new_num))\n",
        "test": "assert     rearrange_bigger(0) == 0",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # assuming nums1 and nums2 are sorted\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    minheap = []\n    for i in range(0, min(len(nums1), k)):\n        for j in range(0, min(len(nums2), k)):\n            sum_pair = nums1[i] + nums2[j]\n            heapq.heappush(minheap, (sum_pair, i, j))\n    pairs = []\n    for i in range(0, k):\n        sum_pair, i, j = heapq.heappop(minheap)\n        pairs.append([nums1[i], nums2[j]])\n    return pairs\n",
        "test": "assert     k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) ==     [[1, 2], [1, 4], [1, 6]]",
        "num_ids": 2313,
        "indeed": true
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tuple_list = []\n    for i in range(0,len(list1)):\n        tuple_list.append(tuple(list1[i]))\n    a = min(tuple_list,key = lambda item:item[0]*item[1])\n    return a\n",
        "test": "assert     min_product_tuple([(6, 2), (2, 7), (4, 6)]) == 42",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 'List is empty'\n    else:\n        min_val = listval[0]\n        for i in listval:\n            if i < min_val:\n                min_val = i\n        return min_val\n",
        "test": "assert     min_val([5, 2, 3, 1, 4]) == 1",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    split = re.findall('[A-Z]', word)\n    if split:\n        return split[0]+''.join([i.lower() if i.isupper() else i.title() for i in word[len(split[0]):]])\n    return word\n",
        "test": "assert     snake_to_camel(\"test\") == \"test\"",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    newlist=[]\n    for i in l:\n        if i%2==0:\n            newlist.append(i)\n    return newlist\n",
        "test": "assert     remove_odd([2,4,8,10,11]) == [2,4,8,10], 'Error'",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    temp = list1[n-1]\n    list1.remove(temp)\n    return temp\n",
        "test": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == (1, 2), \"Wrong result\"",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if(i==j):\n                return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4,5], [4,5,6,7,8]) == True",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = arr[-1]*arr[-2]\n    return max_product\n",
        "test": "assert     (max_Product([1, -2, -3, 4]) == -3, -6)",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Result = set()\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                Result.add(Input[i][0])\n                Result.add(Input[j][0])\n                break\n    return Result\n",
        "test": "assert     group_tuples([(1,2),(1,3),(1,4),(1,5)]) == [1], \"group_tuples did not return common first element\"",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if max<len(i):\n            max=len(i)\n            max_str=i\n    return max_str\n",
        "test": "assert     Find_Max([1,2,3,4,5]) == 5",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(f\"Length of list: {len(list1)}\")\n    for i in list1:\n        print(round(i))\n    print(f\"Total sum: {round(sum(list1))}\")\n    print(f\"Total multiplied by length: {round(sum(list1)*len(list1))}\")\n",
        "test": "assert     round_and_sum([1, 2, 3, 4, 5]) == (15, 5)",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(i%2 == 0):\n            sum += i**3\n    return sum\n",
        "test": "assert     cube_Sum(0)==0",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return_str = ''\n    for i in range(len(test_tup)):\n        return_str += test_tup[i]\n        if i!= len(test_tup) - 1:\n            return_str += ', '\n    return return_str\n",
        "test": "assert     concatenate_tuple((\"hello\",)) == \"hello\"",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    average = sum/n\n    return average\n",
        "test": "assert     find_Average_Of_Cube(1)==    1",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear((\"python\",\"is\",\"awesome\",\"!\")) == '!' ",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([[1,2,3], [2,3], [2,3], [4,5], [5,6], [7,8], [8,9]], 10) == 0",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if num % 2!= 0:\n            oddnumbers.append(num)\n    return oddnumbers\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    d = dt[2]\n    m = dt[1]\n    y = dt[0]\n    \n    return '{}-{}-{}'.format(d,m,y)\n    \n",
        "test": "assert     change_date_format(\"2015-09-10\") == \"10-09-2015\"",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) > 1:\n        gap = len(my_list)//2\n        while gap > 0:\n            for i in range(gap, len(my_list)):\n                temp = my_list[i]\n                j = i\n                while j >= gap and my_list[j-gap] > temp:\n                    my_list[j] = my_list[j-gap]\n                    j -= gap\n                my_list[j] = temp\n            gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort(list(range(5))) == [0, 1, 2, 3, 4]",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))\n",
        "test": "assert     and_tuples((1,2), (1,2)) == (1,2)",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if c == 0:\n        return None\n    elif a == 0:\n        return (-c)/b\n    else:\n        return -b/(2*a)\n",
        "test": "assert     parabola_directrix(2, 3, 2) == (0, 1)",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # your code here\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert     common_element([1, 2, 3, 4], [5, 6, 7, 8]) == False",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2\n    \ndef median_of_medians(arr):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_list = sorted(arr)\n    if len(median_list)%2 == 0:\n        median = median_list[len(median_list)//2]\n    else:\n        median = median_list[len(median_list)//2]\n    return median\n    \ndef median_of_medians_quicksort(arr):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if len(arr) == 1:\n        return arr\n    elif len(arr)%2 == 0:\n        median_list = sorted(arr[:len(arr)//2]) + sorted(arr[len(arr)//2:])\n    else:\n        median_list = sorted(arr[:len(arr)//2+1]) + sorted(arr[len(arr)//2+1:])\n    return median_of_medians(median_list)\n    \ndef median_of_medians_heapsort(arr):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_list = []\n    for i in range(len(arr)):\n        median_list.append(arr[i])\n        if i%2 == 0:\n            median_list.sort()\n        else:\n            median_list.sort(reverse=True)\n    return median_list[len(median_list)//2]\n",
        "test": "assert     median_trapezium(3,3,2) == 3",
        "num_ids": 249,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return len([i for i in arr if i > number]) == len(arr)\n",
        "test": "assert     check_greater([1],1) == False",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"ab+\")\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n",
        "test": "assert     text_match_one(\"accbbbbb\") == None, \"Incorrect output for text_match_one('accbbbbb').\"",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Please add your code here\n    return int(str(n)[-1])\n",
        "test": "assert     last_Digit(987589) == 9",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n",
        "test": "assert     neg_nos([1, 2, 3, -4, -3, -2]) == [ -4, -3, -2]",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if ord(i) % 2 == 1:\n            str1 = str1.replace(i, '')\n    return str1\n",
        "test": "assert     remove_odd('') == '', \"Empty string\"",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list.sort()\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1][::-1]:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(1,2), (2,3), (4,1), (5,2)]) == 3",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #return int(\"\".join(map(str,L)))\n    return int(\"\".join(map(lambda x: str(x),L)))\n",
        "test": "assert     multiple_to_single([3, 1, 4, 1, 5, 9]) == 33",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = r\"\\s*(([Aa]dverbs?|[Aa]d|[Aa]ll right|[Aa]ll right|[Aa]ny(thing)?|[Aa]ny(thing)?|[Aa]ny(place)?|[Aa]nywhere|[Aa]n?[Tt]hey|[Tt]he|[Tt]his|[Tt]hat|[Tt]hose|[Tt]hose|[Tt]hose|[Tt]hem|[Tt]hem|[Tt]heir|[Tt]heirs|[Tt]hems?|[Tt]hemselves|[Tt]hen|[Tt]hen(thing)?|[Tt]hen(place)?|[Tt]hen(any(thing)?|any(place)?))\\s+(\\w+)\\s*\"\n    res = re.findall(regex, text)\n    print(res)\n    # for m in re.finditer(regex, text):\n    #     print(m.groups())\n",
        "test": "assert     find_adverb_position('he is the man in the picture') ==    {'adverb': 'in', 'position': 4}",
        "num_ids": 2972,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # First create a variable to track the surface area.\n    sa = 0\n    # Then, use the formula given in the problem to solve for the surface area.\n    sa = 6 * (l ** 2)\n    # Return the surface area.\n    return sa\n",
        "test": "assert     surfacearea_cube(3) == 54",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    length = len(nums)\n    positive_num = 0\n    for i in nums:\n        if i > 0:\n            positive_num += 1\n    return positive_num/length\n",
        "test": "assert     positive_count([1,1,1,1]) == 4/4",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    max_neg = list1[0]\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            max_neg = list1[i]\n    return max_neg\n    \nlist1 = [-8, -1, -6, -3, -2, -4, -9]\nprint(\"Largest negative number is: \", largest_neg(list1))",
        "test": "assert     largest_neg([3, 2, -5, 7, -6]) == -5",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = list()\n    for tup in test_list:\n        tup = tup[:K]\n        result.append(tup)\n    return result\n",
        "test": "assert     trim_tuple([('Python', 'is', 'a', 'popular', 'programming', 'language')], 3) == [('Python', 'is', 'a')], 'incorrect'",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(0, len(test_tup1)):\n        result = result + (test_tup1[i]*test_tup2[i],)\n    return result\n",
        "test": "assert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 12, 21, 32)",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = [tup]\n    dct = dict(Counter(lst)) \n    return dct\n",
        "test": "assert     count_Occurrence( (5, 6, 7, 8, 2), [5, 6, 7, 8, 2]) == [1, 2, 2, 1, 1]",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "test": "assert     cube_nums([1,2,3,4]) == [1,8,27,64]",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i\n        print(i)\n    return sum\nprint(cal_sum(50))\n",
        "test": "assert     cal_sum(3) == 6",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # We can use the string slicing [:] to extract specified string size.\n    # This will create a new list and return it.\n    return [str[i:i+l] for i in range(0, len(str), l)]\n    \ndef check_string_length(list_of_strings, length):\n    '''\n    Write a function to check if each string in a given list is of specified length.\n    '''\n    # Let's assume that we have a list of string values.\n    # Then, we can iterate through the list using a for loop.\n    # The for loop will iterate through the list of strings.\n    # Let's assume that the strings are of variable length.\n    # To do this, we can use the string slicing [:] to extract strings of specified length.\n    # This will create a new list and return it.\n    # We can check if the extracted strings are of specified length by using the len() function.\n    # We can use the boolean variable check to track if the string length matches the length specified.\n    # We can use the boolean variable check to track if the list is empty.\n    # We can use the boolean variable check to track if the list is of specified length.\n    # Let's assume that the length of the strings is not known beforehand.\n    # We can use a while loop to iterate through the list until we find the length of the string.\n    # We can use the boolean variable check to track if the length of the string is found.\n    # Once the length of the string is found, we can use the string slicing [:] to extract the strings.\n    # This will create a new list and return it.\n    # We can then use the len() function to check if the extracted string length matches the length specified.\n    # We can use the boolean variable check to track if the string length matches the length specified.\n    # We can use the boolean variable check to track if the list is empty.\n    # We can use the boolean variable check to track if the list is of specified length.\n    # Let's assume that the length of the strings is not known beforehand.\n    # We can use a while loop to iterate through the list until we find the length of the string.\n    # We can use the boolean variable check to track if the length of the string is found.\n    # Once the length of the string is found, we can use the string slicing [:] to extract the strings.\n    # This will create a new list and return it.\n    # We can then use the len() function to check if the extracted string length matches the length specified.\n    # We can use the boolean variable check to track if the string length matches the length specified.\n    # We can use the boolean variable check to track if the list is empty.\n    # We can use the boolean variable check to track if the list is of specified length.\n    check = False\n    empty = True\n    while not check:\n        while empty:\n            if len(list_of_strings) == 0:\n                print(\"List is empty\")\n                return False\n            else:\n                empty = False\n                print(\"List is not empty\")\n        for i in range(0, len(list_of_strings)):\n            if len(list_of_strings[i]) == length:\n                print(list_of_strings[i], \"is of specified length\")\n                return True\n            else:\n                print(\"Extracted strings:\", extract_string(list_of_strings[i], length))\n                print(\"Length of extracted strings:\", len(extract_string(list_of_strings[i], length)))\n                print(\"Length of specified string:\", length)\n                check = False\n                break\n                return False\n",
        "test": "assert     (extract_string('abcd', 2) == ['ab', 'cd']), \"WRONG\"",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n",
        "test": "assert     remove_whitespaces('  This   is an example') == 'Thisisanexample'",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(1000,1000) == 0",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum+=i\n            else:\n                sum+=n/i\n    return sum\n",
        "test": "assert     sumofFactors(25) == 5",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(\"\\sz.\\s\", text)\n",
        "test": "assert     text_match_wordz('The lazy brown fox jumped over the quick dog.') == 'lazy brown fox', 'incorrect match'",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(\"It has 31 days\")\n    elif monthnum2 == 2:\n        print(\"It has 28 days\")\n    elif monthnum2 == 3:\n        print(\"It has 31 days\")\n    elif monthnum2 == 4:\n        print(\"It has 30 days\")\n    elif monthnum2 == 5:\n        print(\"It has 31 days\")\n    elif monthnum2 == 6:\n        print(\"It has 30 days\")\n    elif monthnum2 == 7:\n        print(\"It has 31 days\")\n    elif monthnum2 == 8:\n        print(\"It has 31 days\")\n    elif monthnum2 == 9:\n        print(\"It has 30 days\")\n    elif monthnum2 == 10:\n        print(\"It has 31 days\")\n    elif monthnum2 == 11:\n        print(\"It has 30 days\")\n    elif monthnum2 == 12:\n        print(\"It has 31 days\")\n    else:\n        print(\"Please check the month number\")\n        ",
        "test": "assert     check_monthnumb_number(12) ==     True",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist\n",
        "test": "assert     reverse_string_list([\"test\"]) == [\"tset\"]",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key=len)\n    \n",
        "test": "assert     Find_Min([[1,2,3], [1,3], [1,2,3,4]]) == [1,3], \"wrong output\"",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert     rectangle_area(3,4) == 12",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r\"[A-Z]\", \"\", str1)\n",
        "test": "assert     remove_uppercase('') == ''",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst] \n",
        "test": "assert     Extract([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5] ",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_ctr = 0\n    for char in str:\n        if char.isupper():\n            upper_ctr += 1\n    return upper_ctr\n",
        "test": "assert     upper_ctr(\"\") == 0, \"Empty string\"",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_combinations = []\n    for i in range(1, len(list1)+1):\n        combination = []\n        for j in range(len(list1)-i+1):\n            combination.append(list1[j:j+i])\n        all_combinations.append(combination)\n    return all_combinations\n",
        "test": "assert     combinations_list([1,2,3,4]) == [",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    size = len(arr)\n    if size <= 1:\n        return arr[0]\n    elif size == 2:\n        return min(arr)\n    left_max = [None] * size\n    right_max = [None] * size\n    left_max[0] = 1\n    right_max[size-1] = 1\n    max_left_right = 1\n    max_right_left = 1\n    for i in range(1, size):\n        if arr[i-1] > 0:\n            left_max[i] = max(left_max[i-1]*arr[i-1], 1)\n        else:\n            left_max[i] = 1\n        if arr[size-i-1] > 0:\n            right_max[size-i-1] = max(right_max[size-i]*arr[size-i-1], 1)\n        else:\n            right_max[size-i-1] = 1\n        max_left_right = max(max_left_right, left_max[i]*right_max[size-i-1])\n    return max(left_max[0], right_max[0], max_left_right)\n",
        "test": "assert     max_subarray_product([-3, -1]) == -3",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i == n:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_value({1:1, 2:2, 3:1}, 2) == False",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}\n",
        "test": "assert     drop_empty({}) == {}, 'drop_empty({}) should be {{}}'",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            temp = 1\n            for k in range(i, j+1):\n                temp = temp*arr[k]\n            if max < temp:\n                max = temp\n    return max\n",
        "test": "assert     max_product([1, 2, 3, 4]) == 24, \"Not Correct\"",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return [test_tup[0] + test_tup[1], test_tup[1] + test_tup[2], test_tup[2] + test_tup[3]]\n",
        "test": "assert     add_pairwise((1, 2, 3, 4)) == (2, 4, 6, 8), 'incorrect output'",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for num in arr:\n        mul = (mul * num) % n\n    return mul\n",
        "test": "assert     (find_remainder([2, 4, 5], 5) ==     2*4*5 % 5)",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i] == l[i+1] - 1 for i in range(len(l)-1))\n",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5]) == True, \"Wrong output\"",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    try:\n        test_list1 = list(test_list1)\n        test_list2 = list(test_list2)\n",
        "test": "assert ",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newStr = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newStr = newStr + newch\n        else:\n            newStr = newStr + str1[i]\n    return newStr\n    \ndef is_anagram(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams or not. An anagram is\n    a word, phrase, or name formed by rearranging the letters of a different\n    word, phrase, or name.\n    '''\n    return sorted(str1) == sorted(str2)\n",
        "test": "assert     replace_char(\"abc\",'a', 'z') == \"zbc\"",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "test": "assert     {9: 2, 6: 2, 4: 2, 3: 1, 1: 1, 2: 1, 5: 1, 7: 1, 8: 1, 0: 1} == Counter(sort_counter({\"9\": 2, \"6\": 2, \"4\": 2, \"3\": 1, \"1\": 1, \"2\": 1, \"5\": 1, \"7\": 1, \"8\": 1, \"0\": 1})).most_common()",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    largest = 0\n    smallest = 0\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return (largest, smallest)\n",
        "test": "assert     big_sum([1,2,3,4,5]) == 16",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower(\"python\") == \"python\"",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "test": "assert     remove_lowercase('abcd') == ''",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n / 10\n    return int(n)\n",
        "test": "assert     first_Digit(123) == 1",
        "num_ids": 214,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [element for element in list if element % 2 == 1]\n",
        "test": "assert     Split([1,2,3,4,5]) == [1,3,5], \"Split([1,2,3,4,5]) should be [1,3,5]\"",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_nums += i\n    return sum_of_cubes - sum_of_nums**2\n",
        "test": "assert     difference(5) == 0",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if ((A[i]^A[j])%2):\n                count+=1\n    return count\nA = [1, 2, 3, 4, 5, 6]\nprint(find_Odd_Pair(A,len(A)))\n",
        "test": "assert     find_Odd_Pair([2,2,2,2],4)==0",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(x.upper() if x.islower() else x.lower() for x in string)\n",
        "test": "assert     toggle_string('abc') == 'ABC'",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if not n1 and not n2:\n        return 0\n    elif not n1:\n        return len(str(n2))\n    elif not n2:\n        return len(str(n1))\n    else:\n        return len(str(n1)) + len(str(n2))\n",
        "test": "assert     digit_distance_nums(12, 32) == 4",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "test": "assert     max_sub_array_sum([1, 2, -1, -2, 3, 5, -3, 1], 8) == 8",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    union_list = list(test_tup1)\n    for element in test_tup2:\n        if element not in union_list:\n            union_list.append(element)\n    union_list.sort()\n    for element in union_list:\n        union_tup += (element,)\n    return union_tup\n",
        "test": "assert     sorted(union_elements((1,2,3,4), (0,5,6,7))) == [0,1,2,3,4,5,6,7]",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length=[]\n    for x in lst:\n        length.append(len(x))\n    length.sort(reverse=True)\n    return length[0]\n",
        "test": "assert     Find_Max_Length([[1, 2, 3], [4], [5, 6, 7]]) == 3",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('\\\"[\\w\\s\\d]*\\\"', text)\n    values = [value.strip('\\\"') for value in values]\n    return values\ndef extract_zip_code(text):\n    '''\n    Write a function to extract the zip codes from a string.\n    '''\n    values = re.findall('\\d{5}', text)\n    return values\ndef extract_phone_numbers(text):\n    '''\n    Write a function to extract all phone numbers from a string.\n    '''\n    values = re.findall(r'''(\n        (\\d{3}|\\(\\d{3}\\))?              # area code\n        (\\s|-|\\.)?                      # separator\n        (\\d{3})                         # first 3 digits\n        (\\s|-|\\.)                       # separator\n        (\\d{4})                         # last 4 digits\n        (\\s*(ext|x|ext.)\\s*(\\d{2,5}))?  # extension\n        )''', text)\n    return [re.sub(r'\\D', '', number[0]) for number in values]\ndef extract_host_names(text):\n    '''\n    Write a function to extract all host names from a string.\n    '''\n    values = re.findall('[A-Z][a-z]*\\s[A-Z][a-z]*', text)\n    return values\ndef extract_from_to(text):\n    '''\n    Write a function to extract all dates of format dd/mm/yyyy from a string.\n    '''\n    values = re.findall(r'\\d{1,2}/\\d{1,2}/\\d{4}', text)\n    return values\ndef extract_price(text):\n    '''\n    Write a function to extract all numbers from a string.\n    '''\n    values = re.findall('\\d+', text)\n    return values\ndef extract_names(text):\n    '''\n    Write a function to extract all names from a string.\n    '''\n    values = re.findall('[A-Z][a-z]*\\s[A-Z][a-z]*', text)\n    return values\ndef extract_names_with_numbers(text):\n    '''\n    Write a function to extract all names from a string, that also have numbers.\n    '''\n    values = re.findall('[A-Z][a-z]*\\s[A-Z][a-z]*\\d+', text)\n    return values\ndef extract_dates(text):\n    '''\n    Write a function to extract all dates from a string.\n    '''\n    values = re.findall('\\d{2}/\\d{2}/\\d{4}', text)\n    return values\ndef extract_time(text):\n    '''\n    Write a function to extract all times from a string.\n    '''\n    values = re.findall('\\d{2}:\\d{2}:\\d{2}', text)\n    return values\ndef extract_money(text):\n    '''\n    Write a function to extract all money values from a string.\n    '''\n    values = re.findall('\\$\\d*\\.\\d+', text)\n    return values\ndef extract_email_addresses(text):\n    '''\n    Write a function to extract all email addresses from a string.\n    '''\n    values = re.findall('[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text)\n    return values\ndef extract_words(text):\n    '''\n    Write a function to extract all words from a string.\n    '''\n    values = re.findall('[a-zA-Z]*', text)\n    return values\ndef find_urls(text):\n    '''\n    Write a function to extract all URLs from a string.\n    '''\n    values = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)\n    return values\ndef remove_newlines(text):\n    '''\n    Write a function to remove all newlines from a string.\n    '''\n    return re.sub('\\n', '', text)\ndef is_keyword(text):\n    '''\n    Write a function to check if a string is a keyword.\n    '''\n    keywords = ['breakfast', 'lunch', 'dinner', 'brunch', 'br', 'break', 'lun', 'din', 'brnch', 'dinner', 'lun', 'br', 'brnch']\n    if text in keywords:\n        return True\n    else:\n        return False\ndef is_email_address(text):\n    '''\n    Write a function to check if a string is an email address.\n    '''\n    if re.match(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text):\n        return True\n    else:\n        return False\ndef is_phone_number(text):\n    '''\n    Write a function to check if a string is a phone number.\n    '''\n    if re.match(r'\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{4}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{4}|\\d{3}[-\\.\\s]??\\d{4}', text):\n        return True\n    else:\n        return False\ndef is_url(text):\n    '''\n    Write a function to check if a string is a URL.\n    '''\n    if re.match(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text):\n        return True\n    else:\n        return False\ndef is_time(text):\n    '''\n    Write a function to check if a string is a time.\n    '''\n    if re.match(r'\\d{2}:\\d{2}:\\d{2}', text):\n        return True\n    else:\n        return False\ndef is_date(text):\n    '''\n    Write a function to check if a string is a date.\n    '''\n    if re.match(r'\\d{2}/\\d{2}/\\d{4}', text):\n        return True\n    else:\n        return False\ndef is_money(text):\n    '''\n    Write a function to check if a string is a money value.\n    '''\n    if re.match(r'\\$\\d*\\.\\d+', text):\n        return True\n    else:\n        return False\ndef is_email(text):\n    '''\n    Write a function to check if a string is an email address.\n    '''\n    if re.match(r'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+', text):\n        return True\n    else:\n        return False\ndef is_name(text):\n    '''\n    Write a function to check if a string is a name.\n    '''\n    if re.match(r'[A-Z][a-z]*\\s[A-Z][a-z]*', text):\n        return True\n    else:\n        return False\ndef is_number(text):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    if re.match(r'\\d+', text):\n        return True\n    else:\n        return False\ndef is_zip_code(text):\n    '''\n    Write a function to check if a string is a zip code.\n    '''\n    i",
        "test": "assert     extract_values('It was a \"dark and stormy night\"') == ['dark and stormy night'], 'check the first example'",
        "num_ids": 2405,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(0, n): \n        for j in range(0, n): \n            if arr[i]!= arr[j]:\n                pairs+=1\n    return pairs \n",
        "test": "assert     count_Pairs([1,2,3,4],5) == 0, \"Failed\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o'] ",
        "num_ids": 2145,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n//10)\n",
        "test": "assert     sum_digits(11) == 2",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([]) == True",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(0,length)]\n",
        "test": "assert     len(empty_list(0)) == 0",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in list1]\n",
        "test": "assert     sort_sublists([['1','2','3'],['4','5','6'],['7','8','9']]) == [['1','2','3'],['4','5','6'],['7','8','9']]",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniq_nums = []\n    for i in nums:\n        if i not in uniq_nums:\n            uniq_nums.append(i)\n    return uniq_nums\n    \nnums = [5,6,7,8,5,6,7,8,5,6,7,8]\nprint(two_unique_nums(nums))\n",
        "test": "assert     two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'Test Fail'",
        "num_ids": 2502,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    s = set(list_data)\n    product = 1\n    for num in s:\n        product = product * num\n    return product\n",
        "test": "assert     unique_product([0,0,0,0]) == 0",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.1415926535897932384\n    return 2*pi*r*(r + h)\n",
        "test": "assert ",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while(i<len(A) and j<len(B)):\n        if(A[i]==B[j]):\n            j=j+1\n        i=i+1\n    if(j==len(B)):\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([1,2,3], [1,2,4]) == False",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def last_Digit(n):\n        if n==1:\n            return 1\n        else:\n            return n % 10\n    last_digit_of_n = last_Digit(n)\n    factorial_last_digit = last_Digit(last_digit_of_n)\n    return factorial_last_digit",
        "test": "assert     last_Digit_Factorial(4) == 4",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for t in zip(list1,list2,list3) for x in t]\n    \ndef interleave_lists_dictionary(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    my_list=[]\n    for i in range(len(list1)):\n        my_list.append(list1[i])\n        my_list.append(list2[i])\n        my_list.append(list3[i])\n    return my_list\n    \n    \n    ",
        "test": "assert     interleave_lists(['a','b','c','d'],['e','f','g','h'],['1','2','3','4'])!= ['a','e','1','b','f','2','c','g','3','d','4','h','d','c','g','f','e','1','2','3','4']",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return dissimilar\n",
        "test": "assert     find_dissimilar((4,5,6), (1,2,3)) == (4,5,6)",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    temp = ()\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            if even_fnc(element):\n                temp = temp + element\n        else:\n            temp = temp + (element,)\n    return temp\n",
        "test": "assert     [(1, 1), (1, 2, 2), (1, 3, 4, 3), (1, 3, 4, 5, 2, 2), (1, 3, 4, 5, 3, 2), (1, 3, 4, 5, 3, 3)] == \\",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    SA = b*(s**2 + s*((s-b)**2))\n    return SA\n",
        "test": "assert     surface_Area(4,3) == 48",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({})",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise Exception(\"Error, input cannot be negative.\")\n    elif num == 0:\n        return 1\n    else:\n        return sum([catalan_number(i)*catalan_number(num-1-i) for i in range(num)])\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'ly\\b', text)\n",
        "test": "assert     find_adverbs('I am good.') == [], 'find_adverbs is incorrect. Read the instructions carefully.'",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_list = []\n    heapq.heapify(item_list)\n    for item in items:\n        if len(item_list) < n:\n            heapq.heappush(item_list, item)\n        elif item > item_list[0]:\n            heapq.heappop(item_list)\n            heapq.heappush(item_list, item)\n    return item_list\n",
        "test": "assert     expensive_items({\"orange\": 3, \"apple\": 1, \"carrot\": 5}, 1) == ['orange']",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = l[:n]\n    y = l[n:]\n    return x+y\n",
        "test": "assert     split_Arr([1, 2, 3, 4, 5], 3) == [1, 2, 3] + [4, 5]",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     tuple([1, 2, 3]) == list_tuple([1, 2, 3])",
        "num_ids": 211,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1]-nums[0]\n",
        "test": "assert     big_diff([1,2,3]) == 2",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list of perfect squares\n    ps = []\n    # iterate from a to b\n    for i in range(a,b+1):\n        # iterate from 1 to i\n        for j in range(1,i+1):\n            # check if i^2 is perfect square\n            if i**2 == j**2:\n                # add i to list\n                ps.append(i)\n    # return list\n    return ps\n",
        "test": "assert     (perfect_squares(0,101)) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = int(r * cmath.cos(theta))\n    y = int(r * cmath.sin(theta))\n    return x,y\n    \ndef get_rect_origin(x, y, radius):\n    '''\n    Write a function to get rectangular coordinates of the center of a circle.\n    '''\n    x = x - radius\n    y = y - radius\n    return x,y\n",
        "test": "assert     (abs(polar_rect(1,2)[0] - 1) < 0.000001) and (abs(polar_rect(1,2)[1] - 2) < 0.000001), \"polar_rect function not working as expected\"",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List2(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList[::-1],newList)\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List3(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList,newList[::-1],sep=\"\\n\")\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List4(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList,newList[::-1],newList[::-1],sep=\"\\n\")\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\ndef swap_List5(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList,newList[::-1],newList[::-1],sep=\"\\n\")\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "test": "assert     (swap_List([1,2,3]) == [3,2,1])",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return 1 if (k==0 or k==n) else int(binomial_Coeff(n-1,k-1)) + int(binomial_Coeff(n-1,k))\n",
        "test": "assert     binomial_Coeff(1,0) == 1",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^\\d*\\.\\d*\\.\\d*\\.0\\.\", \"\", ip)\n",
        "test": "assert     removezero_ip(\"12.010.020.030\") == \"12.010.020.030\"",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) <= 1:\n        return None\n    else:\n        if list1[0]%2!= 0:\n            return list1[0]\n        else:\n            return list1[1] - list1[0]\n",
        "test": "assert     diff_even_odd([2,4,6,8,10,12]) == 4, \"WRONG\"",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # we are gonna use the same idea as in Minimum number of insertions and deletion to solve this problem\n    \n    # creating a hash table to store number of occurences of 0 and 1\n    table = {\n        '0' : 0,\n        '1' : 0\n    }\n    \n    # here we will keep track of the number of 0s and 1s in str1\n    count_0 = 0\n    count_1 = 0\n    \n    for c in str1 :\n        table[c] += 1\n        \n        if c == '0' :\n            count_0 += 1\n        else :\n            count_1 += 1\n    \n    # we will create a hash table to store number of occurences of 0 and 1 in str2\n    table_2 = {\n        '0' : 0,\n        '1' : 0\n    }\n    \n    count_0_2 = 0\n    count_1_2 = 0\n    \n    for c in str2 :\n        table_2[c] += 1\n        \n        if c == '0' :\n            count_0_2 += 1\n        else :\n            count_1_2 += 1\n    \n    # we need to initialize a variable to store the number of swaps required\n    # to convert one string to another\n    num_swaps = 0\n    \n    # this will check the number of occurences of 0 in str1 and str2\n    # if the difference is greater than zero, it means we need to convert one of the strings\n    # from 0 to 1\n    if count_0 - count_0_2 > 0 :\n        num_swaps += count_0 - count_0_2\n    \n    if count_1 - count_1_2 > 0 :\n        num_swaps += count_1 - count_1_2\n    \n    # here we will check the occurences of 1 in str1 and str2\n    # if the difference is greater than zero, it means we need to convert one of the strings\n    # from 1 to 0\n    if count_0_2 - count_0 > 0 :\n        num_swaps += count_0_2 - count_0\n    \n    if count_1_2 - count_1 > 0 :\n        num_swaps += count_1_2 - count_1\n    \n    # we will return the number of swaps\n    return num_swaps\n    \n    \n",
        "test": "assert     min_Swaps('1101', '1010') == 2 ",
        "num_ids": 1764,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert     tuple_size((1,2,3,4,5)) == sys.getsizeof((1,2,3,4,5))",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > arr1[-1] + arr2[-1]:\n        return None\n    if k <= arr1[0]:\n        return arr1[0]\n    if k <= arr2[0]:\n        return arr2[0]\n    low = 0\n    high = len(arr1)\n    mid = low + (high - low) // 2\n    mid = arr1[mid]\n    low_second = 0\n    high_second = len(arr2)\n    while low < high:\n        mid = arr1[mid]\n        high = high - 1\n        low = low + 1\n        if k <= mid:\n            high = high_second\n            high_second = high_second - 1\n        else:\n            low = low_second\n            low_second = low_second + 1\n            k = k - mid\n    if low == 0:\n        return arr2[k - 1]\n    else:\n        return arr1[k - 1]\n        \n",
        "test": "assert     find_kth([1, 2, 3], [4, 5, 6], 1) == 1",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    sum_ = 0\n    for i in number:\n        sum_ += int(i)**3\n    if sum_ == int(number):\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(153) == True, 'Armstrong number is 153'",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(range(1,number+1)),sum(range(1,number+1))/number\n",
        "test": "assert     sum_average(10) == [55.0, 25.0]",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "test": "assert     is_Even(3) == False",
        "num_ids": 217,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    length = len(str1)\n    dict1 = dict()\n    for i in range(length):\n        if str1[i] in dict1:\n            return str1[i]\n        else:\n            dict1[str1[i]] = 1\n    return \"No repeated character\"\n",
        "test": "assert     first_repeated_char('abcdaa') == 'a', 'First repeated character is not a'",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 0:\n        return None\n",
        "test": "assert",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = []\n    start = 0\n    for i, c in enumerate(s):\n        if c =='':\n            words.append(s[start:i])\n            start = i + 1\n    words.append(s[start:])\n",
        "test": "assert     reverse_words(\"this is string example..\") == \"..example string is this\"",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180 * math.pi\n",
        "test": "assert     (radian_degree(90) - math.pi/2) < 0.0000001",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'the') == ('the', 0, 13)",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[0 for x in range(n+1)] for x in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1] \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n",
        "test": "assert     bell_Number(0) == 1",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i!= L:\n            list2.append(list1[i])\n    return list2\n        \nprint(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 3))\nprint(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 4))\nprint(remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 8))\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 3) == [1,2,3,5]",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[i][N-1] for i in range(len(test_list))])\n",
        "test": "assert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9], [9, 0, 1]], 1) == 9",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    a = []\n    b = []\n    c = []\n    for i in lst:\n        a.append(i[0])\n        b.append(i[1])\n    c = [a,b]\n    return(c)\n",
        "test": "assert     merge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]]",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    res = []\n    tot = 0\n    for i in test_list:\n        tot += i\n        res.append(tot)\n    return res\n",
        "test": "assert     cummulative_sum([1, 2, 3]) == [1, 3, 6], \"wrong answer\"",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(nums[i])/len(nums[i]) for i in range(len(nums))]\n",
        "test": "assert ",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1, 2), (3, 4)) == (1, 2), 'Test 1'",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    jumps = 0\n    while d!= 0:\n        d, step = d - 1, steps + 1\n        if d % 2 == 0:\n            d //= 2\n            steps += 1\n        else:\n            d -= 1\n            steps += 1\n        jumps += 1\n    return jumps\n",
        "test": "assert not min_Jumps(2, 2)     == 2, \"This case should be False.\"",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if nums2 == []:\n        return []\n    if nums1 == []:\n        return []\n    if len(nums1) == 1:\n        return [nums1[0]/nums2[0]]\n    return [nums1[0]/nums2[0]]+div_list(nums1[1:],nums2[1:])\n",
        "test": "assert     div_list([1,2,3,4], [1,2,3,4]) ==     [1,1,1,1], \"div_list([1,2,3,4], [1,2,3,4])\"",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    letters = []\n    numbers = []\n    for letter in test_str:\n        if letter.isalpha():\n            letters.append(letter)\n        elif letter.isnumeric():\n            numbers.append(letter)\n    return \"\".join(letters + numbers)\n",
        "test": "assert     move_num('abcx123') == 'abcx123'",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    max_subset = None\n",
        "test": "assert     largest_subset([1,2,3,4,5,6]) == 3",
        "num_ids": 2340,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = (n - 1) // 2\n    if n % 2 == 0:\n        return (arr1[m] + arr2[m]) / 2\n    else:\n        return arr1[m]\n",
        "test": "assert     get_median([1, 3, 4], [2, 3, 5], 3) == 3",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_list = []\n    for num in nums:\n        power_list.append(num**n)\n    return power_list\n",
        "test": "assert     nth_nums([2,4,6], 3) == [8, 64, 216]",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "test": "assert     is_upper(\"\") == False, \"empty string\"",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1], \"Swap_List error\"",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r = float(r)\n    \n    area = (2*math.pi*(r**2))/2\n    return area\ndef circle_area(r) :  \n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a square with a given radius.\n    '''\n    r = float(r)\n    \n    area = math.pi*(r**2)\n    return area\ndef ellipse_area(a,b) :  \n    '''\n    Write a python function to find the area of the largest ellipse that can be inscribed in a rectangle with two given lengths.\n    '''\n    a = float(a)\n    b = float(b)\n    \n    area = math.pi*(a*b)\n    return area\ndef rectangle_area(a,b) :  \n    '''\n    Write a python function to find the area of the largest rectangle that can be inscribed in a rectangle with two given lengths.\n    '''\n    a = float(a)\n    b = float(b)\n    \n    area = a*b\n    return area\ndef trapezoid_area(a,b,h) :  \n    '''\n    Write a python function to find the area of the largest trapezoid that can be inscribed in a rectangle with two given lengths and a given height.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    \n    area = ((a+b)/2)*h\n    return area\ndef kite_area(a,b,h) :  \n    '''\n    Write a python function to find the area of the largest kite that can be inscribed in a rectangle with two given lengths and a given height.\n    '''\n    a = float(a)\n    b = float(b)\n    h = float(h)\n    \n    area = (a*b)*(math.sin(math.radians(30)))\n    return area\ndef cube_area(a) :  \n    '''\n    Write a python function to find the area of the largest cube that can be inscribed in a sphere with a given radius.\n    '''\n    a = float(a)\n    \n    area = 6*(a**2)\n    return area\ndef right_circ_area(r) :  \n    '''\n    Write a python function to find the area of the largest right circular cone that can be inscribed in a sphere with a given radius.\n    '''\n    r = float(r)\n    \n    area = ((math.pi*(r**2))/3)\n    return area\ndef pyramid_area(a,h) :  \n    '''\n    Write a python function to find the area of the largest pyramid that can be inscribed in a rectangle with two given lengths.\n    '''\n    a = float(a)\n    h = float(h)\n    \n    area = (a*h)/2\n    return area\ndef parallelogram_area(a,b) :  \n    '''\n    Write a python function to find the area of the largest parallelogram that can be inscribed in a rectangle with two given lengths.\n    '''\n    a = float(a)\n    b = float(b)\n    \n    area = a*b\n    return area\ndef hemisphere_area(r) :  \n    '''\n    Write a python function to find the area of the largest hemisphere that can be inscribed in a sphere with a given radius.\n    '''\n    r = float(r)\n    \n    area = (math.pi*(r**2))/4\n    return area\ndef cone_area(a,r) :  \n    '''\n    Write a python function to find the area of the largest right circular cone that can be inscribed in a sphere with a given radius.\n    '''\n    a = float(a)\n    r = float(r)\n    \n    area = (math.pi*(r**2))/3\n    return area\ndef cylinder_area(a,r) :  \n    '''\n    Write a python function to find the area of the largest right circular cylinder that can be inscribed in a sphere with a given radius.\n    '''\n    a = float(a)\n    r = float(r)\n    \n    area = (2*math.pi*(r**2))\n    return area\ndef pyramid_area(a,h) :  \n    '''\n    Write a python function to find the area of the largest pyramid that can be inscribed in a rectangle with two given lengths.\n    '''\n    a = float(a)\n    h = float(h)\n    \n    area = (a*h)/2\n    return area\ndef cone_volume(r,h) :  \n    '''\n    Write a python function to find the volume of the largest right circular cone that can be inscribed in a sphere with a given radius and height.\n    '''\n    r = float(r)\n    h = float(h)\n    \n    volume = ((math.pi*(r**3))/3)\n    return volume\ndef cylinder_volume(r,h) :  \n    '''\n    Write a python function to find the volume of the largest right circular cylinder that can be inscribed in a sphere with a given radius and height.\n    '''\n    r = float(r)\n    h = float(h)\n    \n    volume = ((2*math.pi*(r**2))*h)\n    return volume\ndef pyramid_volume(a,h) :  \n    '''\n    Write a python function to find the volume of the largest pyramid that can be inscribed in a rectangle with two given lengths and a given height.\n    '''\n    a = float(a)\n    h = float(h)\n    \n    volume = ((a*h)/3)\n    return volume\ndef cone_volume(r,h) :  \n    '''\n    Write a python function to find the volume of the largest right circular cone that can be inscribed in a sphere with a given radius and height.\n    '''\n    r = float(r)\n    h = float(h)\n    \n    volume = ((math.pi*(r**3))/3)\n    return volume\ndef cylinder_volume(r,h) :  \n    '''\n    Write a python function to find the volume of the largest right circular cylinder that can be inscribed in a sphere with a given radius and height.\n    '''\n    r = float(r)\n    h = float(h)\n    \n    volume = ((2*math.pi*(r**2))*h)\n    return volume\ndef pyramid_volume(a,h) :  \n    '''\n    Write a python function to find the volume of the largest pyramid that can be inscribed in a rectangle with two given lengths and a given height.\n    '''\n    a = float(a)\n    h = float(h)\n    \n    volume = ((a*h)/3)\n    return volume\n",
        "test": "assert     (abs(triangle_area(0.75)-2.47) < 0.01)",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    i = start\n    while i <= end:\n        if array[i]!= i:\n            return i\n        i += 1\n    return i\n",
        "test": "assert     find_First_Missing([0,1,2,3,4,6,7,8,9,10]) == 5",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 'error'",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    ret = []\n    if(ele in ret): return []\n    for i in range(len(sub)):\n        ret.append(tuple(map(add, sub[i], ele)))\n        ret.append(tuple(map(add, ele, sub[i])))\n    return ret\n",
        "test": "assert     adjac((0,0)) == []",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for i in text:\n        if i =='':\n            result += '_'\n        else:\n            result += i\n    return result\n",
        "test": "assert     replace_spaces('hello') == 'hello'",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = num_list[:]\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            new_list.append(0)\n            new_list.remove(0)\n    return new_list\n",
        "test": "assert     move_zero([1, 2, 3, 4, 0, 5, 0, 0, 7, 0]) == [1, 2, 3, 4, 5, 7, 0, 0, 0, 0]",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum^arr[i]^arr[j]\n    return sum\n",
        "test": "assert     pair_xor_Sum([1, 2, 3, 4], 4) ",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Make a list of elements to sort\n    # If the input is a tuple, make a list of the tuple\n    input_list = []\n    if type(iterable[0]) == tuple:\n        for i in range(len(iterable)):\n            input_list.append(iterable[i])\n    else:\n        input_list = list(iterable)\n    input_list.sort()\n    # Make the heap\n    heap = []\n    for i in input_list:\n        hq.heappush(heap, i)\n    # Extract elements from the heap in sorted order\n    sorted_list = []\n    for i in range(len(input_list)):\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n",
        "test": "assert     heap_sort([0,1,2,3,4,5,6,7,8,9]) == sorted([0,1,2,3,4,5,6,7,8,9]), 'heap_sort failed'",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     noprofit_noloss(10,20) == False, 'Test 2 Fail'",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    result = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n    result = round(result)\n    return result\n",
        "test": "assert ",
        "num_ids": 2565,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_lowercase = [s for s in sample_names if s[0].islower()]\n    return len(sample_names_lowercase)\n",
        "test": "assert     sample_nam([]) == 0, \"Empty list returns zero\"",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    return items\n",
        "test": "assert     remove_parenthesis('Remove (parentheses) and what is in between them from this string') == 'Remove parentheses and what is in between them from this string', \"Remove (parentheses) and what is in between them from this string\"",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n < 1):\n        return 0\n    else:\n        return (n*(n+1))//2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 2253,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    elif 'z' in text:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle(\"abz\") == False, \"error\"",
        "num_ids": 2614,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(0, k):\n        input[i], input[n - i - 1] = input[n - i - 1], input[i]\n    return input\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5], 0) == [1,2,3,4,5]",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('hello', 'world'), {'python': 'awesome'}) == ('hello', 'world', {'python': 'awesome'})",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #Handle Invalid Inputs\n    if cost is None or len(cost) == 0 or len(cost[0]) == 0:\n        return None\n    #Base Case\n    if len(cost) == 1 and len(cost[0]) == 1:\n        return cost[0][0]\n    #Check and Handle Paths starting from the first element\n    first_element = cost[0][0]\n    if len(cost[0]) == 1:\n        cost[0][0] = first_element\n    else:\n        cost[0][0] = first_element + cost[0][1]\n    #Check and Handle Paths ending at the last element\n    last_element = cost[len(cost)-1][len(cost[0])-1]\n    if len(cost[0]) == 1:\n        cost[len(cost)-1][len(cost[0])-1] = last_element\n    else:\n        cost[len(cost)-1][len(cost[0])-1] = last_element + cost[len(cost)-1][len(cost[0])-2]\n    for i in range(1, len(cost[0])-1):\n        cost[0][i] = cost[0][i-1] + cost[0][i]\n    for i in range(1, len(cost)):\n        cost[i][len(cost[0])-1] = cost[i][len(cost[0])-2] + cost[i][len(cost[0])-1]\n    for i in range(1, len(cost)-1):\n        cost[i][0] = cost[i-1][0] + cost[i][0]\n    for i in range(1, len(cost)):\n        cost[i][1] = cost[i][0] + cost[i][1]\n    return maxAverageOfPathHelper(cost, 0, 0, 0, 0)\n",
        "test": "assert     maxAverageOfPath([[5, 1, 5], [4, 5, 7], [7, 8, 9]]) == 6.5",
        "num_ids": 1752,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_list=[]\n    for student,data in students.items():\n        if data[0]>h and data[1]>w:\n            filtered_list.append(student)\n    return filtered_list\n",
        "test": "assert     filter_data({'Jack': (68, 195), 'Peter': (80, 180), 'Mary': (75, 150)}, 80, 180) == {'Jack': (68, 195), 'Mary': (75, 150)}, 'wrong output'",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2), 'The input lists must be the same length'\n    return sum(map(eq, nums1, nums2))\n",
        "test": "assert     count_same_pair([1, 1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5, 5]) == 2",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(i) ** power for i in str(base))\n",
        "test": "assert ",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 == '':\n        return None\n    result = re.search(r'\"(.*?)\"', text1).group(0)\n    return result\n    \ndef extract_first_class_symbols(text1):\n    '''\n    Write a function to extract the first class symbols in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\(.*?\\)', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_parentheses(text1):\n    '''\n    Write a function to extract the parentheses in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\(.*?\\)', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_brackets(text1):\n    '''\n    Write a function to extract the brackets in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\[.*?\\]', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_square_brackets(text1):\n    '''\n    Write a function to extract the square brackets in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\[.*?\\]', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_braces(text1):\n    '''\n    Write a function to extract the braces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\{.*?\\}', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_curly_braces(text1):\n    '''\n    Write a function to extract the curly braces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\\{.*?\\}', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_all_symbols(text1):\n    '''\n    Write a function to extract all symbols in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[^\\s].*?[^\\s]', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_alphabets(text1):\n    '''\n    Write a function to extract only alphabets in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[a-zA-Z]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_alphabets_uppercase(text1):\n    '''\n    Write a function to extract only uppercase alphabets in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[A-Z]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_alphabets_lowercase(text1):\n    '''\n    Write a function to extract only lowercase alphabets in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[a-z]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_numbers(text1):\n    '''\n    Write a function to extract only numbers in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[0-9]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_symbols(text1):\n    '''\n    Write a function to extract only symbols in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[^a-zA-Z0-9]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_symbols_with_spaces(text1):\n    '''\n    Write a function to extract only symbols with spaces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[^a-zA-Z0-9\\s]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_symbols_with_numbers(text1):\n    '''\n    Write a function to extract only symbols with numbers in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[0-9][^a-zA-Z]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_only_strings(text1):\n    '''\n    Write a function to extract only strings in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'\".*?\"', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_without_spaces(text1):\n    '''\n    Write a function to extract words without spaces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[a-zA-Z]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_numbers(text1):\n    '''\n    Write a function to extract words with numbers in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[a-zA-Z0-9]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_special_chars(text1):\n    '''\n    Write a function to extract words with special characters in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[^\\w]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_spaces(text1):\n    '''\n    Write a function to extract words with spaces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[a-zA-Z\\s]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_spaces_and_special_chars(text1):\n    '''\n    Write a function to extract words with spaces and special characters in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[^\\w\\s]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_numbers_and_spaces(text1):\n    '''\n    Write a function to extract words with numbers and spaces in a string.\n    '''\n    if text1 == '':\n        return None\n    result = re.findall(r'[0-9a-zA-Z\\s]+', text1)\n    if len(result) == 0:\n        result = ''\n    return result\n    \ndef extract_words_with_numbers_and_special_chars(text1):\n",
        "test": "assert     extract_quotation('\"hello world\"') == 'hello world'",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup) - 1):\n        res_tup = res_tup + (test_tup[i] * test_tup[i + 1],)\n    return res_tup\n",
        "test": "assert ",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert len(lst1) == len(lst2)\n    return [x + y for x,y in zip(lst1,lst2)]\n",
        "test": "assert     (sum_list([1,2,3],[1,2,3])==[2,4,6])",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n",
        "test": "assert     consecutive_duplicates([1, 1, 2, 2, 3, 3, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = r * 2 * math.pi * h + (r * r * math.pi * math.tan(math.pi / 2)) / 2\n    return lateral_surface_area\n",
        "test": "assert     lateralsurface_cone(2, 1) == 4 * math.pi",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    return text\n",
        "test": "assert     replace_specialchar(\"One dot. No comma. No space. \") == \"One:dot::No:comma::No:space::\"",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    if x > A[high] or x < A[low]:\n        return -1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 2, 2, 2, 2, 3, 4, 5, 6, 7, 7, 7, 7], 2) == 1",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    p = []\n    for i in range(len(arr)):\n        a = 1\n        for j in range(i,len(arr)):\n            a = a * arr[j]\n            p.append(a)\n    return sum(p)\n",
        "test": "assert     sum_Of_Subarray_Prod([4, 2, 1]) == 20",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = n ^ (n >> 1)\n    x = x ^ (x >> 2)\n    return x ^ (x >> 4)\n",
        "test": "assert     set_middle_bits(0b101111110) == 0b101111000",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n",
        "test": "assert     left_insertion([1, 3, 5, 6], 7) == 4",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex, string)): \n        return True\n    else: \n        return False\n",
        "test": "assert     re.match(regex, 'aEg')",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*(1-1/(2**(n-1)))\n",
        "test": "assert     True == geometric_sum(1)",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while(1):\n        i += 1\n        n = int(math.pow(i * (i + 1), 0.5))\n        if n == n * n:\n            break\n    return i - 1\ndef find_Triangular_Number(n):\n    i = 1\n    while(1):\n        i += 1\n        n = int(math.pow(i * (i + 1), 0.5))\n        if n == n * n:\n            break\n    return n\n",
        "test": "assert     find_Index(0) == 0",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "test": "assert     tuple_to_dict((1, 2, 3, 4)) == {1: 2, 3: 4}, 'incorrect output'",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if(s[i]!=s[i+1]) :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('aaaa') == True",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / (math.sqrt(2))\n    return(s)\n",
        "test": "assert     round(area_tetrahedron(4), 2) == round(16 / 4 * (4 ** 2 * (math.sqrt(2 * (5 ** 2) + 30) - 5)), 2), \"Error!\"",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    right_list = [0]*len(list)\n    for i in range(0, len(list)):\n        right_list[(i + m)%len(list)] = list[i]\n    return right_list\n",
        "test": "assert     rotate_right([1,2,3,4,5], 1) == [5, 1, 2, 3, 4], 'rotate_right is wrong'",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n",
        "test": "assert     check_none((0, 1, 2)) == False, \"check_none((0, 1, 2)) == False is not False\"",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = range(startnum,endnum+1)\n    divisors = lambda num: [x for x in range(2,int(num**0.5)+1) if num%x == 0]\n    check_divisors = lambda num: divisors(num) == sorted(divisors(num))\n    return [x for x in numbers if check_divisors(x)]\n",
        "test": "assert     divisible_by_digits(1, 13) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return (math.pi*r**2)*(a/360)\n",
        "test": "assert     sector_area(2, 360) == 12.566370614359172, \"The area is incorrect.\"",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[[None for i in range(l + 1)] for j in range(n + 1)] for k in range(m + 1)] \n",
        "test": "assert ",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=\\w)([A-Z])',r' \\1',str1)\n",
        "test": "assert     capital_words_spaces('Each word begins with capital letter') == 'Each word begins with capital letter', 'is incorrect'",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda nums: [int(s) if s.isdigit() else s for s in nums])\n",
        "test": "assert     sort_numeric_strings([\"0\", \"1\", \"1\", \"1.1\", \"2\"]) == ['0', '1', '1', '1.1', '2']",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([], (1, 2)) == [(1, 2)]",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if i == 1:\n        return True if arr[0] >= arr[1] else False\n    if arr[i] >= arr[(i-1)//2]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_min_heap_helper([1,2,3,4],0) == True, \"Incorrect output\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 2:\n        return n\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2)) % n\n",
        "test": "assert     jacobsthal_num(0) == 0",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list)<K:\n        print('Too many records to find')\n        return\n    else:\n        return min(test_list,key=lambda t:t[1])[0]\n",
        "test": "assert ",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [item for item in l1 if item in l2 and item in l3]\n",
        "test": "assert     extract_index_list([1, 2, 3, 4], [2, 3, 5, 6], [7, 8, 9, 10]) == []",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = set(numbers)\n    if len(numbers) == 1:\n        return None\n    else:\n        min_value = min(numbers)\n        numbers.remove(min_value)\n        return min(numbers)\n",
        "test": "assert     second_smallest([5, 3, 2, 1, 4]) == 2",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a(b*)a\"\n    result = re.search(pattern, text)\n    return result!= None\n",
        "test": "assert     text_match_zero_one('') == False",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs(['acbdd','adcbb','acddb','dccba']) == 0",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for list_ in list1:\n        tuple_ = tuple(list_)\n        if tuple_ in dic:\n            dic[tuple_] += 1\n        else:\n            dic[tuple_] = 1\n    return dic\n",
        "test": "assert     unique_sublists([[1,2,3], [1,2,3], [1,2,3]]) == {(1,2,3):3}",
        "num_ids": 2701,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal(\"0.14c\") == False, \"incorrect for not decimal 1\"",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr))==1\n",
        "test": "assert     unique_Element([1, 2, 3, 4, 5]) == False",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return (monthnum3 in [1, 3, 5, 7, 8, 10, 12])\n",
        "test": "assert     check_monthnumber_number(1) == True",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array \n    arr.sort() \n    # initialize difference as infinite \n    diff = 10**20\n    # traverse the array for all pairs \n    for i in range(0, n-1): \n        # Find the difference between current pair \n        # and previous pair. \n        diff = min(diff, arr[i+1]-arr[i]) \n    return diff \n",
        "test": "assert     find_min_diff([1,2,3,4,5], 5) == min([2-1, 3-2, 4-3, 5-4] )",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr('123') == 3, \"Test failed\"",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #base case\n    if(n == 1): \n        return 1\n    if(n == 2):\n        return 2\n    if(n > 2):\n        return n * (n - 1)\n",
        "test": "assert     is_polite(1) == 1",
        "num_ids": 4475,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list=[]\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i],l1[i+1]))\n    return pair_list\n",
        "test": "assert     pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n",
        "test": "assert     get_pairs_count([1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 7, 8, 8], 17) == 0",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n",
        "test": "assert     Diff([1,3,5,7], []) == [1,3,5,7]",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum\n",
        "test": "assert     odd_num_sum(1) == 0, 'incorrect output'",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch=='(':\n            stack.append(ch)\n        if ch==')':\n            if not stack or stack[-1]!='(':\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    return False\n",
        "test": "assert     check_expression(\"([{()}])\") == True, \"Test Failed\"",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(' ')\n    count = 0\n    new_string = ''\n    for i in test_str:\n        if len(i) == K:\n            count += 1\n    if count == 0:\n        return new_string\n    for j in test_str:\n        if len(j) == K:\n            continue\n        else:\n            new_string += j +''\n    return new_string\n",
        "test": "assert     remove_length('i am a python programmer', 4) == \"i am a python prog\", 'case 2'",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    string = text\n    pattern = pattern\n    string = re.sub(pattern,\"****\",string)\n    print(string)\n",
        "test": "assert     occurance_substring(\"harry is a good boy\",\"girl\") == None",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if (i%2==0 and nums[i]%2==0) or (i%2!=0 and nums[i]%2!=0):\n            return False\n    return True\nprint(odd_position([2,1,2,3,4]))\nprint(odd_position([2,2,2,3,4]))\nprint(odd_position([1,1,2,2,3,4]))\nprint(odd_position([1,1,2,2,3,3]))\n",
        "test": "assert     odd_position([3, 1, 9, 5, 6, 4, 2]) is False",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    total = 0\n    for char in test_str:\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' or char == 'A' or char == 'E' or char == 'I' or char == 'O' or char == 'U':\n            if test_str[test_str.find(char)+1] == 'a' or test_str[test_str.find(char)+1] == 'e' or test_str[test_str.find(char)+1] == 'i' or test_str[test_str.find(char)+1] == 'o' or test_str[test_str.find(char)+1] == 'u' or test_str[test_str.find(char)+1] == 'A' or test_str[test_str.find(char)+1] == 'E' or test_str[test_str.find(char)+1] == 'I' or test_str[test_str.find(char)+1] == 'O' or test_str[test_str.find(char)+1] == 'U':\n                total += 1\n    return total\n",
        "test": "assert     count_vowels('12345') == 0",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr: \n        if arr.count(i) == 1:\n            sum+=i\n    return sum\n",
        "test": "assert     find_sum([1, 2, 3, 4, 2, 3, 2, 5, 2, 5]) ==     7",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n    # list1 = list(list1)\n    # i = 0\n    # while i < len(list1):\n    #     if i < len(list1)-1 and list1[i] == list1[i+1]:\n    #         list1.pop(i)\n    #     else:\n    #         i += 1\n    # return list1\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict = {}\n    for item in list1:\n        dict[tuple(item)] = list1.count(item)\n    return dict\n    \n    \ndef is_anagram(word1, word2):\n    '''\n    Write a function to determine if two words are anagrams. An anagram is a word that can be formed by rearranging the letters of another word. The rearrangement must be done in such a way that the same letters are used in the same order.\n    '''\n    return sorted(word1) == sorted(word2)\n    \n    \ndef key_frequency(string):\n    '''\n    Write a function that takes a string as an argument and returns a dictionary with the keys being the letters of the string, and the values being how many times each letter appears in the string.\n    '''\n    dict = {}\n    for char in string:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    return dict\n",
        "test": "assert unique_sublists([[1,2,3], [4,5,6], [7,8,9], [1,2,3], [4,5,6], [7,8,9]]) == {(1,2,3): 2, (4,5,6): 2, (7,8,9): 2}",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = combinations(test_list, 2)\n    comb_sums = [x for x in combs]\n    return comb_sums\ndef find_invalid_number(numbers, preamble_length):\n    '''\n    Write a function to find the invalid number in the list of numbers. https://www.geeksforgeeks.org/find-the-invalid-number/\n    '''\n    for i in range(len(numbers)):\n        if i <= preamble_length:\n            continue\n        else:\n            # print(numbers[i])\n            preamble = numbers[i-preamble_length:i]\n            # print(preamble)\n            combs = find_combinations(preamble)\n            for comb in combs:\n                # print(comb)\n                if comb[0] + comb[1] == numbers[i]:\n                    # print(f'{numbers[i]} is equal to {comb[0]} + {comb[1]}')\n                    pass\n                else:\n                    # print(f'{numbers[i]} is not equal to {comb[0]} + {comb[1]}')\n                    return numbers[i]\n",
        "test": "assert not (find_combinations([(1,1),(2,2),(3,3),(4,4),(5,5),(6,6)]) == [(3,3),(4,6),(4,9),(8,8)]),\"Wrong combinations\"",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    c = 0\n    for i in range(1,int(math.sqrt(n))+1): \n        if (n % i == 0) : \n            if (n / i == i) : \n                c+= 1\n            else : \n                c+= 2\n    return c \ndef first_10_primes(): \n    '''\n    Print the first 10 prime numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-14.php\n    '''\n    n = 2\n    while(n < 10): \n        if (count_divisors(n) > 1): \n            print(n, end = \" \") \n        n += 1\ndef factorial(n): \n    '''\n    Write a python function to print the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-15.php\n    '''\n    f = 1\n    for i in range(1, n + 1): \n        f = f * i \n    return f \ndef is_leap_year(year): \n    '''\n    Write a python function to check whether a year is leap year or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-16.php\n    '''\n    if(year%4==0 and year%100!=0 or year%400==0): \n        return True\n    return False\ndef triangle_number(n): \n    '''\n    Write a python function to print the sum of first n natural numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-17.php\n    '''\n    t = 0\n    for i in range(1, n + 1): \n        t = t + i \n    return t \ndef prime_factors(n): \n    '''\n    Write a python function to print the prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-18.php\n    '''\n    c = 0\n    while(n % 2 == 0): \n        print(2, end = \" \") \n        c += 1\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while(n % i == 0): \n            print(i, end = \" \") \n            c += 1\n            n = n / i \n    if(n > 2): \n        print(n, end = \" \") \n        c += 1\n    return c \ndef fibonacci(n): \n    '''\n    Write a python function to print the fibonacci series upto n terms. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-19.php\n    '''\n    a = 0\n    b = 1\n    if(n < 0): \n        return False\n    elif(n == 0): \n        return a\n    elif(n == 1): \n        return b\n    else: \n        for i in range(2, n): \n            c = a + b \n            a = b \n            b = c \n        return b \ndef print_triangular_numbers(n): \n    '''\n    Write a python function to print the first n triangular numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-20.php\n    '''\n    t = 0\n    for i in range(1, n + 1): \n        t = t + i \n        print(t, end = \" \") \ndef print_fibonacci_series(n): \n    '''\n    Write a python function to print the first n fibonacci numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-21.php\n    '''\n    a = 0\n    b = 1\n    if(n < 0): \n        return False\n    elif(n == 0): \n        return a\n    elif(n == 1): \n        return b\n    else: \n        for i in range(2, n): \n            c = a + b \n            a = b \n            b = c \n        return c \ndef reverse_string(s): \n    '''\n    Write a python function to print a string in reverse order. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-22.php\n    '''\n    print(s[::-1], end = \" \") \ndef change_case(s): \n    '''\n    Write a python function to print the string with first character of each word capitalized. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    print(s.title()) \ndef check_pangram(s): \n    '''\n    Write a python function to print whether a string is a pangram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    c = 0\n    for i in range(97, 123): \n        if chr(i) in s: \n            c = c + 1\n    if c == 26: \n        return True\n    return False \ndef palindrome(s): \n    '''\n    Write a python function to print whether a string is a palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    s1 = \"\" \n    s2 = \"\" \n    for i in range(len(s)): \n        if (s[i]!= \" \"): \n            s1 = s1 + s[i] \n    for j in range(len(s) - 1, -1, -1): \n        if (s[j]!= \" \"): \n            s2 = s2 + s[j] \n    if (s1 == s2): \n        return True\n    return False \ndef palindrome_number(n): \n    '''\n    Write a python function to check whether the number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if (n < 0): \n        return False\n    else: \n        r = 0\n        temp = n \n        while(n > 0): \n            rem = n % 10\n            r = (r * 10) + rem \n            n = n // 10\n        if (temp == r): \n            return True\n        return False\ndef is_perfect_number(n): \n    '''\n    Write a python function to print whether a number is a perfect number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    sum = 0\n    for i in range(1, n): \n        if (n % i == 0): \n            sum += i \n    return sum == n \ndef print_multiplication_table(n): \n    '''\n    Write a python function to print multiplication table of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    for i in range(1, n + 1): \n        for j in range(1, i + 1): \n            print(str(j * i) + \" \", end = \" \") \n        print() \ndef print_multiplication_table_2(n): \n    '''\n    Write a python function to print multiplication table of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''",
        "test": "assert     count_divisors(0) == 0, \"Division by zero\"",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr = sorted(arr)\n    sum = 0\n    for i in range(0, len(arr)):\n        if i%2 == 0:\n            sum = sum + arr[i]\n    return sum\n",
        "test": "assert     odd_length_sum([1, 2, 3, 4, 5, 6]) ==    27",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = int(h)\n    s = int(s)\n    v = int(v)\n    return h, s, v\n",
        "test": "assert ",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list2=[]\n    for i in list1:\n        if i%2==0:\n            list2.append(i)\n    print(list2)\n    if len(list2)>=2:\n        return list2[0]*list2[1]\n    else:\n        return 0\n",
        "test": "assert ",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.replace('(','').replace(')','').split(', '))\n",
        "test": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n",
        "test": "assert     right_insertion([],5) == 0",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search('ab{3}', text)\n    return result!= None\n",
        "test": "assert     text_match_three('abbb') == True",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # code goes here\n",
        "test": "assert     new_tuple(['a', 'b', 'c'], 'foo') == (('a', 'b', 'c'), 'foo')",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n",
        "test": "assert     even_position([1,3,5]) == False",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flatten_tup = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            flatten_tup.extend(i)\n        else:\n            flatten_tup.append(i)\n    return tuple(flatten_tup)\n",
        "test": "assert     remove_nested(('a', 'b', 'c', 'd', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list) \n",
        "test": "assert     count_list([1,[2,3],4]) == 3, \"Not 3\"",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        mid = (start+end)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                start = mid+1\n        elif arr[mid]>x:\n            end = mid-1\n        else:\n            start = mid+1\n    return -1\nprint(last([1,2,3,3,3,3,4,5],3))\n",
        "test": "assert     last([1,2,2,3,3,3,3,4,5], 9) == -1",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    m = re.search('a.+b', text)\n    return m.group(0)\n",
        "test": "assert     text_starta_endb('alas abbbbbb bbbbbbbbbb') == 'alas abbbbbb bbbbbbbbbb'",
        "num_ids": 2361,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n    \ndef return_greatest_key(dictionary):\n    '''\n    Write function to find the key in a given dictionary with the highest value.\n    '''\n    greatest_key = None\n    greatest_value = 0\n    for key in dictionary:\n        if greatest_value < dictionary[key]:\n            greatest_value = dictionary[key]\n            greatest_key = key\n    return greatest_key\n    \ndef return_greatest_key_in_list(dictionary):\n    '''\n    Write function to return the key in a given dictionary with the highest value.\n    However, if there are multiple keys with the same highest value, return the\n    key with the smallest numerical value.\n    '''\n    greatest_value = 0\n    greatest_key = None\n    for key in dictionary:\n        if dictionary[key] > greatest_value:\n            greatest_value = dictionary[key]\n            greatest_key = key\n        elif dictionary[key] == greatest_value and key < greatest_key:\n            greatest_key = key\n    return greatest_key\n        \ndef list_of_dictionaries(list_of_lists, key):\n    '''\n    Write function to return a list of dictionaries that have the key set to\n    each element in the inner list.\n    '''\n    list_of_dicts = []\n    for row in list_of_lists:\n        row_dict = {}\n        for index in range(0, len(row)):\n            row_dict[row[index]] = row[0]\n        list_of_dicts.append(row_dict)\n    return list_of_dicts\n",
        "test": "assert     return_sum({'b':1, 'c':2, 'a':3}) == 6, \"Check the example\"",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(n) if i % 2)\n",
        "test": "assert     sum_odd(0) == 0, \"incorrect output for sum_odd(0)\"",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1, 2, 3]) == 6",
        "num_ids": 188,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask\n",
        "test": "assert     left_rotate(0b111,3) == 0b11101",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "test": "assert     \"\" == remove_all_spaces(\"      \")",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y:\n        if x == z:\n            return 3\n        else:\n            return 2\n    else:\n        return 0\n",
        "test": "assert     test_three_equal(10,10,10) == 3, \"test_three_equal error\"",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    total_rotations = 0\n    for i in range(n - 1):\n        if arr[i + 1] < arr[i]:\n            total_rotations += 1\n    return total_rotations\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = n ** 0.5\n    return sqrt == int(sqrt)\n",
        "test": "assert     is_perfect_square(17) == False, 'Failed to check the correctness of is_perfect_square'",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr is None: return False\n    if len(arr) < 2: return False\n    product = 1\n    for item in arr:\n        product *= item\n    return product % 2 == 0",
        "test": "assert     is_product_even([2,3,4,5]) == True",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = 0\n    for i in lists:\n        if sum(i) > highest_sum:\n            highest_sum = sum(i)\n            highest_list = i\n    return highest_list\n",
        "test": "assert     max_sum_list([[1, 2], [3, 4], [5, 6, 7]]) == [5, 6, 7]",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    max_count = 0\n    cur_count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            cur_count += 1\n            if test_str[i].isupper():\n                max_count = max(max_count, cur_count)\n        else:\n            cur_count = 1\n    return max_count\n",
        "test": "assert     max_run_uppercase('PPPerP') == 8",
        "num_ids": 2069,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums:\n        if nums[0]%2 == 1:\n            return nums[0]\n        else:\n            return first_odd(nums[1:])\n    else:\n        return False\n",
        "test": "assert     first_odd([1, 3, 5, 6]) == 1",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if test_tup[i]!= None:\n            return True\n    return False\n",
        "test": "assert     check_K(('a', 1), 1) == True",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[1] > test_tup2[1]:\n        return False\n    elif test_tup1[1] < test_tup2[1]:\n        return True\n    elif test_tup1[2] > test_tup2[2]:\n        return False\n    elif test_tup1[2] < test_tup2[2]:\n        return True\n    elif test_tup1[3] > test_tup2[3]:\n        return False\n    elif test_tup1[3] < test_tup2[3]:\n        return True\n    elif test_tup1[4] > test_tup2[4]:\n        return False\n    elif test_tup1[4] < test_tup2[4]:\n        return True\n    elif test_tup1[5] > test_tup2[5]:\n        return False\n    elif test_tup1[5] < test_tup2[5]:\n        return True\n    elif test_tup1[6] > test_tup2[6]:\n        return False\n    elif test_tup1[6] < test_tup2[6]:\n        return True\n    elif test_tup1[7] > test_tup2[7]:\n        return False\n    elif test_tup1[7] < test_tup2[7]:\n        return True\n    elif test_tup1[8] > test_tup2[8]:\n        return False\n    elif test_tup1[8] < test_tup2[8]:\n        return True\n    elif test_tup1[9] > test_tup2[9]:\n        return False\n    elif test_tup1[9] < test_tup2[9]:\n        return True\n    elif test_tup1[10] > test_tup2[10]:\n        return False\n    elif test_tup1[10] < test_tup2[10]:\n        return True\n    elif test_tup1[11] > test_tup2[11]:\n        return False\n    elif test_tup1[11] < test_tup2[11]:\n        return True\n    elif test_tup1[12] > test_tup2[12]:\n        return False\n    elif test_tup1[12] < test_tup2[12]:\n        return True\n    elif test_tup1[13] > test_tup2[13]:\n        return False\n    elif test_tup1[13] < test_tup2[13]:\n        return True\n    elif test_tup1[14] > test_tup2[14]:\n        return False\n    elif test_tup1[14] < test_tup2[14]:\n        return True\n    elif test_tup1[15] > test_tup2[15]:\n        return False\n    elif test_tup1[15] < test_tup2[15]:\n        return True\n    elif test_tup1[16] > test_tup2[16]:\n        return False\n    elif test_tup1[16] < test_tup2[16]:\n        return True\n    elif test_tup1[17] > test_tup2[17]:\n        return False\n    elif test_tup1[17] < test_tup2[17]:\n        return True\n    elif test_tup1[18] > test_tup2[18]:\n        return False\n    elif test_tup1[18] < test_tup2[18]:\n        return True\n    elif test_tup1[19] > test_tup2[19]:\n        return False\n    elif test_tup1[19] < test_tup2[19]:\n        return True\n    elif test_tup1[20] > test_tup2[20]:\n        return False\n    elif test_tup1[20] < test_tup2[20]:\n        return True\n    elif test_tup1[21] > test_tup2[21]:\n        return False\n    elif test_tup1[21] < test_tup2[21]:\n        return True\n    elif test_tup1[22] > test_tup2[22]:\n        return False\n    elif test_tup1[22] < test_tup2[22]:\n        return True\n    elif test_tup1[23] > test_tup2[23]:\n        return False\n    elif test_tup1[23] < test_tup2[23]:\n        return True\n    elif test_tup1[24] > test_tup2[24]:\n        return False\n    elif test_tup1[24] < test_tup2[24]:\n        return True\n    elif test_tup1[25] > test_tup2[25]:\n        return False\n    elif test_tup1[25] < test_tup2[25]:\n        return True\n    elif test_tup1[26] > test_tup2[26]:\n        return False\n    elif test_tup1[26] < test_tup2[26]:\n        return True\n    elif test_tup1[27] > test_tup2[27]:\n        return False\n    elif test_tup1[27] < test_tup2[27]:\n        return True\n    elif test_tup1[28] > test_tup2[28]:\n        return False\n    elif test_tup1[28] < test_tup2[28]:\n        return True\n    elif test_tup1[29] > test_tup2[29]:\n        return False\n    elif test_tup1[29] < test_tup2[29]:\n        return True\n    elif test_tup1[30] > test_tup2[30]:\n        return False\n    elif test_tup1[30] < test_tup2[30]:\n        return True\n    elif test_tup1[31] > test_tup2[31]:\n        return False\n    elif test_tup1[31] < test_tup2[31]:\n        return True\n    elif test_tup1[32] > test_tup2[32]:\n        return False\n    elif test_tup1[32] < test_tup2[32]:\n        return True\n    elif test_tup1[33] > test_tup2[33]:\n        return False\n    elif test_tup1[33] < test_tup2[33]:\n        return True\n    elif test_tup1[34] > test_tup2[34]:\n        return False\n    elif test_tup1[34] < test_tup2[34]:\n        return True\n    elif test_tup1[35] > test_tup2[35]:\n        return False\n    elif test_tup1[35] < test_tup2[35]:\n        return True\n    elif test_tup1[36] > test_tup2[36]:\n        return False\n    elif test_tup1[36] < test_tup2[36]:\n        return True\n    elif test_tup1[37] > test_tup2[37]:\n        return False\n    elif test_tup1[37] < test_tup2[37]:\n        return True\n    elif test_tup1[38] > test_tup2[38]:\n        return False\n    elif test_tup1[38] < test_tup2[38]:\n        return True\n    elif test_tup1[39] > test_tup2[39]:\n        return False\n    elif test_tup1[39] < test_tup2[39]:\n        retur",
        "test": "assert     check_smaller((5, 4, 3), (1, 3, 2)) == False, \"Test Fail\"",
        "num_ids": 2491,
        "indeed": false
    }
]