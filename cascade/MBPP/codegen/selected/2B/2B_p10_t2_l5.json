[
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set_test_1 = set(test_tup1)\n    set_test_2 = set(test_tup2)\n    return list(set_test_1 & set_test_2)\n",
        "test": "assert     similar_elements((1,2,3), (1,2,3))",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(13) == True",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # nums = nums[:]\n    # nums.sort(reverse=True)\n    # nums = list(map(int,nums))\n    # n = len(nums)\n    # print(nums)\n    # hq.heapify(nums)\n    # print(nums)\n    # return nums[:n]\n    # print(nums)\n    # print(sorted(nums,reverse=True))\n    # return sorted(nums,reverse=True)[:n]\n    return hq.nlargest(n,nums)\n",
        "test": "assert     heap_queue_largest([], 0) == []",
        "num_ids": 1052,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & 1 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Power_Of_Two(5) == False, \"is_Power_Of_Two is wrong\"",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_string = text.split()\n    all_str = []\n    for i in range(0, len(list_string)):\n        if len(list_string[i]) >= 4:\n            all_str.append(list_string[i])\n    return all_str\n",
        "test": "assert     find_char_long('') == []",
        "num_ids": 2761,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i**2)\n    return res\n",
        "test": "assert     square_nums([]) == []",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    import collections\n    q = collections.deque()\n    q.append(str)\n    visited = set()\n    while q:\n        s = q.popleft()\n        if s in visited:\n            continue\n        if len(s) == len(str):\n            return 0\n        visited.add(s)\n        for i in range(len(s)):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                if s[i] == c:\n                    continue\n                q.append(s[:i] + c + s[i+1:])\n    return -1\n",
        "test": "assert     find_Rotations(\"a\") == 0",
        "num_ids": 5325,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_string=s.replace(ch,\"\")\n    return new_string\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef remove_inbetween(s,ch): \n    '''\n    Write a python function to remove all occurrences of a given character from the string, starting from 1st occurrence and ending at last occurrence.\n    '''\n    new_string=\"\"\n    count=0\n    for i in range(0,len(s)):\n        if s[i]==ch:\n            count+=1\n        else:\n            new_string+=s[i-count:i+1]\n    return new_string\n    \n    \n    \n    \n    \n    \ndef replace_all(s,old,new): \n    '''\n    Write a python function to replace all occurrences of a given character in the string with another character.\n    '''\n    new_string=\"\"\n    for i in range(0,len(s)):\n        if s[i]==old:\n            new_string+=new\n        else:\n            new_string+=s[i]\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef string_compression(s): \n    '''\n    Write a python function to check whether a string can be compressed using any of the following strategies.\n    1. Remove adjacent duplicate characters.\n    2. If a string contains only 2 or more occurrences of a character, replace it with the number of times the character appears in the string.\n    3. If a character appears only once, remove it.\n    '''\n    new_string=\"\"\n    count=0\n    for i in range(0,len(s)):\n        if s[i] not in new_string:\n            new_string+=s[i]\n        else:\n            count+=1\n    if len(s)==count:\n        return \"Not Possible\"\n    else:\n        return len(new_string)\n    \n    \n    \n    \n    \n    \n    \ndef remove_duplicate(s): \n    '''\n    Write a python function to remove duplicate characters from a given string.\n    '''\n    new_string=\"\"\n    seen=set()\n    for i in range(0,len(s)):\n        if s[i] not in seen:\n            seen.add(s[i])\n            new_string+=s[i]\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef string_split(s,delimiter): \n    '''\n    Write a python function to split a given string based on a given delimiter.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        if s[i]==delimiter:\n            new_string+=\"\\n\"\n        else:\n            new_string+=s[i]\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef sum_square_diff(a,b,c): \n    '''\n    Write a python function to find the sum of the squares of the first N natural numbers, and the difference between the sum of the squares and the square of the sum.\n    '''\n    total_sum=0\n    total_sum_squared=0\n    total_sum_diff=0\n    for i in range(0,a+1):\n        total_sum+=i\n        total_sum_squared=total_sum**2\n    \n    for j in range(0,b+1):\n        total_sum_diff=total_sum_squared-j**2\n    return total_sum_diff\n    \n    \n    \n    \n    \n    \n    \ndef number_of_occurrence(s,ch): \n    '''\n    Write a python function to count the number of occurrences of a given character in a given string.\n    '''\n    count=0\n    for i in range(0,len(s)):\n        if s[i]==ch:\n            count+=1\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef string_first_and_last(s): \n    '''\n    Write a python function to find the first and last occurrence of a character in a given string.\n    '''\n    for i in range(0,len(s)):\n        if s[i]==\"a\":\n            print(\"First occurrence of letter 'a' is at index\",i)\n        if s[i]==\"z\":\n            print(\"Last occurrence of letter 'z' is at index\",i)\n    \n    \n    \n    \n    \n    \ndef string_reverse(s): \n    '''\n    Write a python function to reverse a given string.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        new_string=s[l-1-i]+new_string\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef string_rotation(s1,s2): \n    '''\n    Write a python function to check whether a string is a rotation of another string.\n    '''\n    new_string1=\"\"\n    l1=len(s1)\n    new_string2=\"\"\n    l2=len(s2)\n    for i in range(0,l1):\n        new_string1+=s1[l1-1-i]\n    for j in range(0,l2):\n        new_string2+=s2[l2-1-j]\n    if new_string1==new_string2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    \n    \n    \n    \ndef string_palindrome(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        new_string+=s[i]\n    new_string=new_string[::-1]\n    if new_string==s:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    \n    \n    \n    \ndef string_rotation_with_swap(s): \n    '''\n    Write a python function to find the first index where a string is not a rotation of another string.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        new_string+=s[i]\n    for j in range(0,l):\n        new_string+=s[j]\n    if new_string==s:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    \n    \n    \n    \n    \n    \n    \ndef merge_intervals(arr): \n    '''\n    Write a python function to merge all overlapping intervals.\n    '''\n    new_list=[]\n    for i in range(0,len(arr)):\n        if i==0:\n            new_list.append(arr[i])\n        else:\n            if arr[i][0]<=new_list[len(new_list)-1][1]:\n                if arr[i][1]>=new_list[len(new_list)-1][1]:\n                    new_list[len(new_list)-1]=[new_list[len(new_list)-1][0],arr[i][1]]\n                else:\n                    new_list[len(new_list)-1][1]=arr[i][1]\n            else:\n                new_list.append(arr[i])\n    return new_list\n    \n    \n    \n    \n    \n    \ndef integer_to_roman(num): \n    '''\n    Write a python function to convert a given integer to its equivalent roman numerals representation.\n    '''\n    if num==1:\n        return \"I\"\n    if num==2:\n        return \"II\"\n    if num==3:\n        return \"III\"\n    if num==4:\n        return \"IV\"\n    if num==5:\n        return \"V\"\n    if num==6:\n        return \"VI\"\n    if num==7:\n        return \"VII\"\n    if num==8:\n        return \"VIII\"\n    if num==9:\n        return \"IX\"\n    if num==10:\n        retur",
        "test": "assert     remove_Occ('hello', 'h') == 'ello'",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)-1):\n        for j in range(len(M)-1-i):\n            if sum(M[j]) > sum(M[j+1]):\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n",
        "test": "assert     sort_matrix([[1,2],[3,4]]) == [[1,2],[3,4]]",
        "num_ids": 1825,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math \n    v = h*l*b \n    return v \n",
        "test": "assert     find_Volume(1,1,1) == 1",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s = text.split(\"_\")\n    if(s.count(\"\")>0):\n        return False\n    else:\n        return True\n",
        "test": "assert     text_lowercase_underscore('') == False",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "test": "assert     square_perimeter(0) == 0, 'Error in your square_perimeter function'",
        "num_ids": 2305,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i]!= string[j]:\n                list.append(string[i])\n                break\n    return list\n    \ndef str_to_list1(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i]!= string[j]:\n                list.append(string[i])\n    return list\n",
        "test": "assert str_to_list('abcdefghijklmnopqrstuvwxyz') == ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(arraynums[i] == arraynums[i+1] for i in range(len(arraynums) - 1))\n",
        "test": "assert     test_duplicate([1,2,3,3]) == True",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Base case: \n    if x == 1: \n        return True\n    elif x == 0: \n        return False\n    else:\n        # Check if x is divisible by 5 \n        if x % 5 == 0: \n            return False\n        else: \n            return is_woodall(x-1) or is_woodall(x+1)\n",
        "test": "assert is_woodall(45) == False",
        "num_ids": 4834,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    reverse=0\n    while num>0:\n        reminder=num%10\n        reverse=reverse*10+reminder\n        num=num//10\n    return reverse==num\n    \ndef a():\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    \n    s=input(\"Enter string\")\n    reverse=0\n    for i in range(len(s)):\n        reverse=reverse*10+s[i]\n    if s==reverse:\n        print(\"String is palindrome\")\n    else:\n        print(\"String is not palindrome\")\n    \ndef b():\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    s=input(\"Enter string\")\n    reverse=0\n    for i in range(len(s)):\n        reverse=reverse*10+s[i]\n    if rev(reverse)==int(s):\n        print(\"string is palindrome\")\n    else:\n        print(\"string is not palindrome\")\n    \n    \n        ",
        "test": "assert     rev(3) == False, \"Rev number should be False\"",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n",
        "test": "assert     find_Max_Num([2,3,4,1]) == 4",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return 1\n    elif x < 0 and y > 0:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     opposite_Signs(3, -7) == True, \"Result is incorrect!\"",
        "num_ids": 987,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #x, n = 1, 0\n    #while x < n:\n    #    n = 2 * x * (x + 1)\n    #    x += 1\n    return n * (n + 1) / 2\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    \n    for i in range(len(s)):\n        substr = s[i:i+1]\n        lst = []\n        for j in range(len(substr)):\n            lst.append(substr[j])\n        count += lst.count(substr[0])\n        \n    return count\n",
        "test": "assert     count_Substrings('1') == 1",
        "num_ids": 1086,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = 0\n    smallest_number = xs[0]\n    for x in xs:\n        if x < smallest_number:\n            smallest_number = x\n    return smallest_number\n",
        "test": "assert     smallest_num([20, 30, 20, 40, 30, 50]) == 20, \"Should be 20\"",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i]-test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert     max_difference([(1,5),(2,7),(4,9),(3,10),(1,10)]) == 8",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 110,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1],reverse=True)\n    \n    \n    \n    \n    \n",
        "test": "assert         subject_marks([]) == []",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for element in list:\n        if element > 0:\n            count += 1\n    return count\n    \n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # two ways to partition a number into two parts:\n        # 1, 1\n        # 2, 1, 2\n        return bell_number(n-1) + bell_number(n-2)\n        \ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n",
        "test": "assert bell_number(1) == 1",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n",
        "test": "assert not is_Monotonic([1,2,4,3,5,4,2,1]) == True",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i+len(s)] == s for i in range(len(l) - len(s) + 1))\n",
        "test": "assert     is_sublist([1,2,3,4,5,6], [1,6]) == False, \"Wrong Output\"",
        "num_ids": 792,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lst = []\n    for item in Input:\n        lst.append(tuple(item))\n    return len(set(tuple(x) for x in lst)) == 1\n    \n    \ndef find_duplicate_tuple(Input):\n    '''\n    Write a function to find all the duplicate tuples.\n    '''\n    lst = []\n    for item in Input:\n        lst.append(tuple(item))\n    return set(tuple(x) for x in lst).symmetric_difference(set(tuple(x) for x in lst))\n",
        "test": "assert     find_equal_tuple([('a'), ('a',), ('a', 'b', 'c')]) == False, 'failed'",
        "num_ids": 3009,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Loop through the array.\n    for i in range(len(nums)):\n        # See if the next element is smaller than this one.\n        for j in range(i, len(nums)):\n            # The element is smaller than the one before.\n            if nums[j] < nums[i]:\n                # Swap them.\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n < 0):\n        return False\n    \n    for i in range(1,n+1):\n        if (i * i == n):\n            return True\n    return False\n",
        "test": "assert     dif_Square(8) == False, \"Wrong output\"",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if i == 0:\n            if colors == patterns[i]:\n                return True\n        else:\n            if colors == patterns[i] and colors == patterns[i-1]:\n                return True\n    return False\n",
        "test": "assert     is_samepatterns([    'yellow','red', 'green', 'blue', 'orange', 'cyan', 'brown', 'pink'],    [    'blue', 'yellow', 'pink','red', 'cyan', 'green', 'brown', 'orange']) == False, \"is_samepatterns should return False when given list of colors is not same as patterns.\"",
        "num_ids": 1711,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Check if the given list is empty\n    if len(test_list) == 0:\n        # Return an empty list\n        return []\n    # Sort the given list of tuples\n    test_list.sort()\n    # Create a new list to store the tuples\n    new_list = []\n    # Iterate over the given list\n    for i in range(len(test_list)):\n        # If we have found a tuple with all elements divisible by K\n        if len(new_list) == 0 and test_list[i][0] % K == 0:\n            # Append the tuple and move to the next element in the list\n            new_list.append(test_list[i])\n            continue\n        # If we have found a tuple which has at least one element divisible by K\n        if len(new_list) == 0 and test_list[i][0] % K!= 0:\n            # Move to the next element in the list\n            continue\n        # If we have found a tuple which has all elements divisible by K\n        if len(new_list) == 0 and test_list[i][0] % K == 0:\n            # Append the tuple and move to the next element in the list\n            new_list.append(test_list[i])\n            continue\n        # If we have found a tuple which has elements divisible by K\n        if len(new_list) == 0 and test_list[i][0] % K!= 0:\n            # Append the tuple and move to the next element in the list\n            new_list.append(test_list[i])\n            continue\n        # If we have found a tuple which has elements divisible by K\n        if len(new_list)!= 0 and test_list[i][0] % K!= 0:\n            # If the current tuple is already in the new_list, then we skip it\n            if test_list[i] in new_list:\n                continue\n            # Otherwise we append the current tuple to the new_list\n            new_list.append(test_list[i])\n        if len(new_list)!= 0 and test_list[i][0] % K == 0:\n            # If the current tuple is already in the new_list, then we skip it\n            if test_list[i] in new_list:\n                continue\n            # Otherwise we append the current tuple to the new_list\n            new_list.append(test_list[i])\n    # Return the new_list\n    return new_list\n",
        "test": "assert    find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (3, 5), (4, 5)], 5) == []",
        "num_ids": 3293,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11 == 0)\n",
        "test": "assert     is_Diff(11) == True, \"error 1\"",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "test": "assert word_len(\"\") == False",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n<1:\n        return 0\n    elif n==1:\n        return 4\n    elif n==2:\n        return 6\n    elif n==3:\n        return 4\n    elif n==4:\n        return 6\n    else:\n        return 4*n-6\n",
        "test": "assert     (tetrahedral_number(1) == 4)",
        "num_ids": 4565,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return 4/3*pi*r*r*r\n",
        "test": "assert     volume_sphere(1) == math.pi*4/3, \"Wrong volume for 1\"",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = strr.lower()\n    l = list(s)\n    c = 26\n    for i in range(0,len(s)):\n        c += ord(l[i])\n    return c % 26\n",
        "test": "assert     get_Char('') == 0",
        "num_ids": 4724,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 0: return 0\n    if n == 1: return 1\n    \n    return sequence(n-1) + sequence(n-2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     sequence(1) == 1, 'Sequence should start with 1'",
        "num_ids": 2673,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * math.pi) * (r ** 2)\n    return area\n",
        "test": "assert     surfacearea_sphere(2) == 56.0",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n ** 2 * (1 + 1 / 4)\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n",
        "test": "assert     merge_dictionaries_three({1:2}, {}, {}) == {1:2}",
        "num_ids": 3243,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert     freq_count([1,2,3]) == {1:1, 2:1, 3:1}",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return N\n    if N%2 == 0:\n        return closest_num(N//2)\n    return closest_num(N//2) + 1\n",
        "test": "assert     closest_num(5) == 2",
        "num_ids": 2860,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len1 = 0\n    for i in list1:\n        if len(i) > len1:\n            len1 = len(i)\n    return len1\n",
        "test": "assert     len_log([\"abcd\"]) == 4, \"one word\"",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i:j+1]==sub_str:\n                return True\n    return False\n",
        "test": "assert     find_substring(\"abc\", \"de\") == False",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==2 or n==3: return False\n    elif n%2==0 or n%3==0: return False\n    else: \n        temp=0\n        for i in range(1,n):\n            if n%i==0:\n                temp+=i\n                if temp==n: return True\n                else: continue\n            else: continue\n    return False\n",
        "test": "assert not is_undulating(34), \"Input: 34 is undulating\"",
        "num_ids": 2940,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(3,2) == 9",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\ndef index_minimum_new(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the last value of the tuple with the largest second value.\n    '''\n    return max(test_list, key=itemgetter(1))\ndef index_maximum_new(test_list):\n    '''\n    Given a list of tuples, write a function that returns the last value of the tuple with the largest second value.\n    '''\n    max_value = max(test_list, key=itemgetter(1))\n    return max_value\n",
        "test": "assert     index_minimum([(1,2), (2,4), (5,6)]) == (1,2)",
        "num_ids": 2130,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    else:\n        return min([len(i) for i in lst])\n        \ndef Find_Min_Subarray(lst):\n    '''\n    Write a python function to find the length of the smallest subarray.\n    '''\n    if not lst:\n        return 0\n    else:\n        min_len = min([len(i) for i in lst])\n        idx = [i for i in range(len(lst)) if min_len == len(lst[i])]\n        return min_len * min(idx)\n        \ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    else:\n        max_len = max([len(i) for i in lst])\n        idx = [i for i in range(len(lst)) if max_len == len(lst[i])]\n        return max_len * max(idx)\n        \ndef Find_Max_Subarray(lst):\n    '''\n    Write a python function to find the length of the largest subarray.\n    '''\n    if not lst:\n        return 0\n    else:\n        max_len = max([len(i) for i in lst])\n        idx = [i for i in range(len(lst)) if max_len == len(lst[i])]\n        return max_len * max(idx)\n        \ndef Find_Min_Value_Index(lst):\n    '''\n    Write a python function to find the index of minimum value.\n    '''\n    min_value = min(lst)\n    for i in range(len(lst)):\n        if lst[i] == min_value:\n            return i\n",
        "test": "assert     Find_Min_Length([[]]) == 0, \"Empty list\"",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    counter = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            counter += 1\n    return counter\n",
        "test": "assert     divisor(0) == 0, \"divisor(0) is 0\"",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    if list1 == []:\n        return freq_dict\n    if len(list1) == 1:\n        if list1[0] not in freq_dict:\n            freq_dict[list1[0]] = 1\n        return freq_dict\n    else:\n        for i in range(len(list1)):\n            if list1[i] not in freq_dict:\n                freq_dict[list1[i]] = 1\n            else:\n                freq_dict[list1[i]] += 1\n        return freq_dict\n",
        "test": "assert ",
        "num_ids": 3471,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in range(len(numbers)):\n        total = total * numbers[i]\n    return total\n",
        "test": "assert     multiply_num([]) == 1",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<2:\n        return str(n)\n    else:\n        return decimal_to_binary(n//2)+str(n%2)\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Brute Force\n    for i in range(1, num):\n        i = str(i)\n        for j in range(len(i)):\n            tmp = i[:j] + i[j+1:]\n            if tmp == tmp[::-1]:\n                return int(i)\n    return -1\n",
        "test": "assert     next_smallest_palindrome(1255) == 1",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return\n    if n == 1:\n        if k == 1:\n            return arr[0]\n        else:\n            return\n    if k > n:\n        return\n    mid = 0\n    high = n - 1\n    low = 0\n    while low <= high:\n        mid = low + (high - low) // 2\n        if k == mid + 1:\n            return arr[mid]\n        elif k > mid + 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr[mid]\n",
        "test": "assert     kth_element([1,2,3], 1) == 1, '1st'",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s1 = word.split('_')\n    return s1[0] + ''.join(x.capitalize() for x in s1[1:])\n",
        "test": "assert     snake_to_camel('snake') =='snake'",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a counter\n    count = 0\n    # Check if the graph is connected\n    if n == m:\n        return count\n    \n    # Iterate through the edges of graph \n    for i in range(0, n): \n        # Check if the graph is connected\n        if (n == m): \n            break\n        # Check if current edge is an Eulerian cycle\n        if not is_eulerian(n, m, i): \n            continue\n        # Update count\n        count += 1\n        # Update m to make the graph connected\n        m = m - 1\n        # Return the Eulerian cycle count\n        return count \n",
        "test": "assert eulerian_num(1, 1) == 0",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Only lists can be sorted, otherwise, raise TypeError\n    try:\n        for sublist in input_list:\n            for char in sublist:\n                if type(char) is not str:\n                    raise TypeError\n",
        "test": "assert     sort_sublists(['apple', 'cherry', 'zebra', 'aardvark', 'alligator']) == ['alligator', 'aardvark', 'cherry', 'apple', 'zebra']",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    t=0\n    for x in lst:\n        if x:\n            t+=1\n    return t\n",
        "test": "assert not count([True, False, True, True]) == 2, 'False should be counted as 0'",
        "num_ids": 2551,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "test": "assert     add_lists([1, 2, 3], (4, 5)) == None",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    #iterate through list1\n    for i in num1:\n        if i not in merged_list:\n            merged_list.append(i)\n    #iterate through list2\n    for i in num2:\n        if i not in merged_list:\n            merged_list.append(i)\n    #iterate through list3\n    for i in num3:\n        if i not in merged_list:\n            merged_list.append(i)\n    merged_list.sort()\n    return merged_list\n",
        "test": "assert    merge_sorted_list([], [1, 2], []) == [1,2]",
        "num_ids": 3662,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if not s:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return odd_Equivalent(s[1:], n - 1) + odd_Equivalent(s[2:], n - 1)\n    \n    \ndef rot_binary(s,n):\n    '''\n    Write a python function to rotate a binary string by the given number of places.\n    '''\n    if not s:\n        return ''\n    if n == 0:\n        return s\n    return rot_binary(s[1:],n) + s[0]\n        \n    \ndef string_reverse(s):\n    '''\n    Write a python function to reverse the characters in the given string.\n    '''\n    if not s:\n        return ''\n    return s[::-1]\n    \n    \ndef string_reversed(s):\n    '''\n    Write a python function to reverse the characters in the given string.\n    '''\n    if not s:\n        return ''\n    return s[::-1]\n        \n    \ndef num_rot(n):\n    '''\n    Write a python function to find the number of rotations of a given string, when rotated by the given number of places.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return num_rot(n - 1) + num_rot(n - 1)\n        \n    \ndef longestPalindrome(s):\n    '''\n    Write a python function to find the longest palindrome in the given string.\n    '''\n    if not s:\n        return ''\n    if len(s) == 1:\n        return s\n    def isPalindrome(s):\n        if s == s[::-1]:\n            return True\n        return False\n    start, end = 0,0\n    for i in range(len(s)):\n        odd_count = odd_Equivalent(s,i)\n        if odd_count > 0 and isPalindrome(s[start:i+1]):\n            end = i\n            start = i-odd_count\n            break\n    odd_count = odd_Equivalent(s,len(s)-1)\n    if odd_count > 0 and isPalindrome(s[start:len(s)]):\n        end = len(s)\n    return s[start:end]\n",
        "test": "assert     odd_Equivalent(\"0101\", 1) == 2",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list1 = []\n    for i in range(len(nestedlist)):\n        if type(nestedlist[i]) == list:\n            list1.extend(common_in_nested_lists(nestedlist[i]))\n        else:\n            list1.append(nestedlist[i])\n    list1 = list(set(list1))\n    return list1\n",
        "test": "assert ",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('12') == True, 'Expected True, got {}'.format(check_integer('12'))",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True\n",
        "test": "assert     empty_dit([]) == True, 'Expected False, got True'",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert     tuple_to_int((1,2,3)) == 6, 'Wrong'",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert     list_to_float([[1,2,3]]) == [[1.0,2.0,3.0]]",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"a b c\") == [\"a\", \"b\", \"c\"], \"wrong answer\"",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        mid = start + (end-start)//2\n        if arr[mid] == arr[mid+1]:\n            start = mid+1\n        else:\n            end = mid-1\n    return arr[start]\n",
        "test": "assert     search([2,2,3,4,5])== 2",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 1\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert     max_product_tuple([]) == 1, 'Error: Invalid test case 1'",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = {}\n    # helper function\n    def make_amicable(num):\n        return sum(range(num)) == num and sum(range(num+1, 2*num+1)) == 2*num\n    for n in range(1, limit+1):\n        if n in amicable and make_amicable(n):\n            amicable[n] = n\n    return sum(amicable.values())\n",
        "test": "assert     amicable_numbers_sum(1) == 0",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a) - cmath.phase(b)\ndef diff(s1,s2):\n    return abs(s1-s2)\ndef has_consecutive_digits(num):\n    count = 0\n    while num>0:\n        count +=1\n        num = num // 10\n    return count\ndef is_prime(num):\n    if num<=1:\n        return False\n    i=2\n    while i<=num/2:\n        if num%i==0:\n            return False\n        i+=1\n    return True\ndef num_div(num1,num2):\n    i = 0\n    if num1>num2:\n        while num1%num2!=0:\n            num1 -= num2\n            i += 1\n    else:\n        while num2%num1!=0:\n            num2 -= num1\n            i += 1\n    return i\ndef is_permutation(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    count = 0\n    for i in range(0,len(str2)):\n        for j in range(0,len(str1)):\n            if str1[j]==str2[i]:\n                count+=1\n    if count==len(str1):\n        return True\n    return False\ndef is_palindrome(num):\n    if num<0:\n        num = num*-1\n    n = num\n    rev_num = 0\n    while n>0:\n        dig = n%10\n        rev_num = (rev_num*10) + dig\n        n = n//10\n    if rev_num == num:\n        return True\n    return False\ndef reverse_in_place(num,start,end):\n    if num<0:\n        num = num*-1\n    while start<end:\n        num_swap = num\n        dig1 = num_swap%10\n        num = num//10\n        dig2 = num_swap%10\n        num = num//10\n        num = num*10 + dig1\n        dig1 = dig2\n        num = num*10 + dig1\n    return num\ndef num_substr(num):\n    cnt = 0\n    while num>0:\n        cnt +=1\n        num //=10\n    return cnt\ndef is_palindrome_alternative(num):\n    if num<0:\n        num = num*-1\n    rev = 0\n    while num>0:\n        dig = num%10\n        rev = (rev*10) + dig\n        num = num//10\n    if rev == num:\n        return True\n    return False\ndef product_sum(arr):\n    if arr==[]:\n        return 0\n    n = len(arr)\n    if n==1:\n        return arr[0]\n    s = 0\n    a = arr[0]\n    for i in range(1,n):\n        a = a*arr[i]\n        s += a\n    return s\ndef is_rotation(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    count = 0\n    if len(str2)<=len(str1):\n        for i in range(0,len(str2)):\n            if str1[i]!= str2[i+count]:\n                return False\n            count+=1\n        return True\n    else:\n        for i in range(0,len(str1)):\n            if str2[i]!= str1[i+count]:\n                return False\n            count+=1\n        return True\ndef is_rotation_alternative(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    str1 = str1 + str1\n    if str1.count(str2)>0:\n        return True\n    return False\ndef is_rotation_alternative_alternative(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    if len(str2)<=len(str1):\n        for i in range(0,len(str2)):\n            if str1[i]!= str2[i+len(str2)]:\n                return False\n        return True\n    else:\n        for i in range(0,len(str1)):\n            if str2[i]!= str1[i+len(str2)]:\n                return False\n        return True\ndef factorial(num):\n    if num==0 or num<0:\n        return 1\n    else:\n        return num * factorial(num-1)\ndef factorial_iterative(num):\n    if num==0 or num<0:\n        return 1\n    fact = 1\n    for i in range(1,num+1):\n        fact = fact * i\n    return fact\ndef is_substring(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    count = 0\n    for i in range(0,len(str2)):\n        if str1[i] == str2[i]:\n            count+=1\n    if count==len(str2):\n        return True\n    return False\ndef is_substring_alternative(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    if len(str2)<=len(str1):\n        for i in range(0,len(str2)):\n            if str1.find(str2[i])!=-1:\n                return True\n        return False\n    else:\n        for i in range(0,len(str1)):\n            if str2.find(str1[i])!=-1:\n                return True\n        return False\ndef reverse_substring(str1,start,end):\n    if start>=end:\n        return str1\n    else:\n        rev = 0\n        while start<=end:\n            dig = str1[start]\n            rev = (rev*10)+dig\n            str1 = str1[:start]+str1[start+1:]\n            start += 1\n        rev = rev*10 + str1[start]\n        return reverse_substring(str1,0,len(str1)-1)\ndef reverse_substring_alternative(str1,start,end):\n    if start>=end:\n        return str1\n    else:\n        rev = 0\n        while start<=end:\n            dig = str1[start]\n            rev = (rev*10)+dig\n            str1 = str1[:start]+str1[start+1:]\n            start += 1\n        return rev\ndef divide(dividend,divisor):\n    if divisor == 0:\n        return 0\n    if dividend == 0:\n        return 0\n    if divisor == 1:\n        return dividend\n    quo = 0\n    temp = dividend\n    while temp>=divisor:\n        quo = quo+1\n        temp = temp-divisor\n    return quo\ndef divide_alternative(dividend,divisor):\n    if divisor == 0:\n        return dividend\n    if dividend == 0:\n        return dividend\n    if divisor == 1:\n        return dividend\n    quo = dividend\n    while dividend>=divisor:\n        quo = quo//divisor\n        dividend = dividend-divisor*quo\n    return quo\ndef main():\n    print(is_palindrome_alternative(121))\n    print(is_palindrome_alternative(1))\n    print(is_palindrome_alternative(1221))\n    print(is_palindrome_alternative(0))\n    print(is_palindrome_alternative(2020))\n    print(is_palindrome_alternative(1234))\n    print(is_palindrome_alternative(-1234))\n    print(is_palindrome_alternative(1232))\n    print(is_palindrome_alternative(1000000000))\n    print(is_palindrome_alternative(0))\n    print(is_palindrome_alternative(-121))\n    print(is_palindrome_alternative(121))\n    print(is_palindrome_alternative(-1221))\n    print(is_palindrome_alternative(-1221))\n    print",
        "test": "assert     angle_complex(0,0) == 0.0",
        "num_ids": 2821,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return i\n    return len(string)\n        \n",
        "test": "assert     find_length('011011101') == 0, 'Wrong answer'",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    for i in range(1,min(a,b) + 1):\n        if (a%i == 0) and (b%i == 0):\n            s += i\n    return s\n",
        "test": "assert ",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(1, 1) == 1, \"1 * 1 = 1\"",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_list = []\n    for word in str.split():\n        if len(word) >= n:\n            word_list.append(word)\n    return word_list\n",
        "test": "assert ",
        "num_ids": 922,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_len = len(my_matrix)\n    col_len = len(my_matrix[0])\n    for row in my_matrix:\n        if len(row)!= row_len:\n            return False\n    for i in range(col_len):\n        counter = 0\n        for j in range(row_len):\n            if my_matrix[j][i]!= counter + 1:\n                return False\n            counter += 1\n    return True\n",
        "test": "assert     magic_square_test([[4, 9, 2],",
        "num_ids": 1403,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = -1\n    max_item = None\n    for item in nums:\n        if nums[item] > max_count:\n            max_item = item\n            max_count = nums[item]\n    return max_item\n",
        "test": "assert     max_occurrences([1,2,2,1]) == 1",
        "num_ids": 2900,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    vowel = ''\n    new_string = ''\n    \n    for i in str1:\n        if i in vowels:\n            vowel = i\n            break\n    \n    for i in range(len(str1)):\n        if str1[i] == vowel:\n            new_string += str1[len(str1) - i - 1]\n        else:\n            new_string += str1[i]\n    return new_string\n",
        "test": "assert     reverse_vowels('x') == 'x'",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str, tup1))\n",
        "test": "assert (tup_string((1, 2, 3, 4, 5)) == '1, 2, 3, 4, 5') == False",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n",
        "test": "assert sum_negativenum([-2,1,-3,-4,-5]) == -5",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 110,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n<6:\n        return n\n    elif n==6:\n        return 12\n    else:\n        return (1/6)*(n*(n-1)) + 6\n",
        "test": "assert hexagonal_num(0) == 0",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return 0\n",
        "test": "assert zero_count([]) == 0, \"Empty array!\"",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n):\n        rem = n % 10\n        n = n // 10\n        if(rem == 0 or rem > 2):\n            return False\n        else:\n            return True\n        \n        \ndef is_Sum_of_Even_Powers_of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of even powers of 2 or not.\n    '''\n    while (n):\n        rem = n % 10\n        if(rem == 0 or rem > 2):\n            return False\n        else:\n            n = n // 10\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Odd_Powers_of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of odd powers of 2 or not.\n    '''\n    while (n):\n        rem = n % 10\n        if(rem == 0 or rem > 2):\n            return False\n        else:\n            n = n // 10\n            if (rem % 2!= 1):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Binary_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of binary digits or not.\n    '''\n    while (n):\n        rem = n % 2\n        if(rem == 0 or rem > 1):\n            return False\n        else:\n            n = n // 2\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Octal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of octal digits or not.\n    '''\n    while (n):\n        rem = n % 8\n        if(rem == 0 or rem > 7):\n            return False\n        else:\n            n = n // 8\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Binary_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of binary digits or not.\n    '''\n    while (n):\n        rem = n % 2\n        if(rem == 0 or rem > 1):\n            return False\n        else:\n            n = n // 2\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Octal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of octal digits or not.\n    '''\n    while (n):\n        rem = n % 8\n        if(rem == 0 or rem > 7):\n            return False\n        else:\n            n = n // 8\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Binary_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of binary digits or not.\n    '''\n    while (n):\n        rem = n % 2\n        if(rem == 0 or rem > 1):\n            return False\n        else:\n            n = n // 2\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Octal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of octal digits or not.\n    '''\n    while (n):\n        rem = n % 8\n        if(rem == 0 or rem > 7):\n            return False\n        else:\n            n = n // 8\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Binary_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of binary digits or not.\n    '''\n    while (n):\n        rem = n % 2\n        if(rem == 0 or rem > 1):\n            return False\n        else:\n            n = n // 2\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Octal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of octal digits or not.\n    '''\n    while (n):\n        rem = n % 8\n        if(rem == 0 or rem > 7):\n            return False\n        else:\n            n = n // 8\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Binary_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of binary digits or not.\n    '''\n    while (n):\n        rem = n % 2\n        if(rem == 0 or rem > 1):\n            return False\n        else:\n            n = n // 2\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Hexadecimal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of hexadecimal digits or not.\n    '''\n    while (n):\n        rem = n % 16\n        if(rem == 0 or rem > 15):\n            return False\n        else:\n            n = n // 16\n            if (rem % 2!= 0):\n                return False\n    return True\n    \ndef is_Sum_of_Octal_Digits(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of octal digits or not.\n    '''\n    while (n):\n        rem = n % 8\n        if(rem == 0 or rem > 7):\n            return False",
        "test": "assert     is_Sum_Of_Powers_Of_Two(16) == False, \"Should be False\"",
        "num_ids": 2955,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return math.pi * r * 2\n",
        "test": "assert     circle_circumference(1) == 2 * math.pi",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for lst in test_list:\n        if isinstance(lst, list):\n            result.update(extract_singly(lst))\n        else:\n            result.add(lst)\n    return result\n",
        "test": "assert     extract_singly([]) == set()",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums),0,-1):\n        j=nums[i-1]\n        k=i\n        while k>0:\n            if j<nums[k-1]:\n                nums[k-1],nums[k]=nums[k],nums[k-1]\n                k-=1\n            else:\n                break\n    return nums\n",
        "test": "assert     [3,2,1] == pancake_sort([3,2,1])",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len([i for i, j in zip(list1, list2) if i == j])\n",
        "test": "assert     count_samepair([1,2,1],[2,3,4],[1,2,3]) == 0",
        "num_ids": 1234,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List_Count=0\n    for i in range(0,len(Input)):\n        if type(Input[i])==list:\n            List_Count+=1\n    return List_Count\n",
        "test": "assert     find_lists((\"a\", \"b\")) == 0, \"test 1: return 0\"",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([1,2,3]) == 1",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Iterate over possible values of x, y\n    for x in range(1, b):\n        for y in range(1, a):\n            if x*x + y*y == n:\n                return (x, y)\n    return None\n",
        "test": "assert     find_solution(3, 4, -9) == None",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1)-set(list2))\n",
        "test": "assert     remove_elements([], []) == []",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = n\n    i = 0\n    sum = 0\n    while i < n:\n        sum += n - 2*i\n        i += 1\n    return sum\n",
        "test": "assert     (sum_series(0) == 0), 'Test failed. The output does not correspond to the answer.'",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l * s) * 0.5\n",
        "test": "assert     area_polygon(1, 2) == 1",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 110,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,n): \n        if (n % i == 0 and n // i == i): \n            return True\n        else:\n            return False\n",
        "test": "assert     div_sum(5) == False",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    d = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    for i in str1:\n        d[i.lower()] = d[i.lower()] + 1\n    for i in d:\n        if d[i] == 1:\n            count = count + 1\n    return count\n",
        "test": "assert     count_char_position('') == 0",
        "num_ids": 1270,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    set_a = set(A)\n    for num in set_a:\n        xor_num = num ^ 1\n        if xor_num in set_a:\n            return True\n    return False\n",
        "test": "assert     find_even_pair([1, 3, 5, 7, 9]) == 0,'should be 0'",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n > 1: \n        i = 1\n        while i < n: \n            i = 2 * i\n        return i \n    else: \n        return 1\nprint(next_power_of_2(1))\nprint(next_power_of_2(3))\nprint(next_power_of_2(6))\nprint(next_power_of_2(13))\nprint(next_power_of_2(1024))\n",
        "test": "assert     next_power_of_2(1)     == 1",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "test": "assert frequency([],1) == 0, \"Empty list\"",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1,2,3], 0, 2) == 6, \"wrong output\"",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a<0:\n        return 0\n    elif a==0:\n        return 0\n    else:\n        return round(a*5,4)\n",
        "test": "assert     perimeter_pentagon(1) == 5.0",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == 'd':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('abc') == 0,'should return 0'",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple)!= tuple:\n        return False\n    else:\n        for item in test_tuple:\n            if type(item)!= type(test_tuple[0]):\n                return False\n        return True\n    \n",
        "test": "assert     check_type((1,2,3)) == True",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if (arr == None):\n        return False\n    if (n == 0):\n        return False\n    if (n == 1):\n        return (x == arr[0])\n    left = 0\n    right = n - 1\n    while (left <= right):\n        mid = (left + right) // 2\n        if (arr[mid] == x):\n            return True\n        if (arr[mid]!= x):\n            if (x < arr[mid]):\n                right = mid - 1\n            else:\n                left = mid + 1\n    return False\n",
        "test": "assert is_majority([1,2,3], 3, 1) == True",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bin_n = str(bin(n))\n    count = 0\n    for i in range(len(bin_n) - 1, -1, -1):\n        if bin_n[i] == '1':\n            count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0, \"count_Set_Bits should return 0 for 0\"",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #write your python function here\n    if str!= \"\":\n        str = str[:len(str)//2]\n        str = str[::2]\n        str = str[:len(str)//2]\n    return str\n",
        "test": "assert     odd_values_string('aaaaaaaaa') == 'a'",
        "num_ids": 2812,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<b and a<c):\n        min_num = a\n    elif (b<a and b<c):\n        min_num = b\n    else:\n        min_num = c\n    return min_num\n",
        "test": "assert     min_of_three(4,2,1)     ==     1",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<r:\n        return (r-l)&1==0\n    return r==l",
        "test": "assert     all_Bits_Set_In_The_Given_Range(n = 5, l = 2, r = 3) == False",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #first we need to make sure that there are n elements in the array, so we can sort the array\n    #since we have already done that, we can simply return it, since the function will never return an array with less than n elements\n    if n <= 0 or n > len(arr):\n        return arr\n    #the following code just sorts the array, so we do not have to iterate through the entire array\n    #we use the built-in sort function which is a non-trivial function, and we will do a little bit of preprocessing\n    #we first sort the array\n    arr.sort()\n    #then we need to make sure that we have the desired size, i.e. n elements\n    if len(arr) < n:\n        #here we will append the remaining elements, which will all be negative numbers\n        for i in range(len(arr)-n):\n            arr.append(-1)\n    #then we need to make sure that the negative numbers come before the positive numbers, and that the relative order of the negative numbers does not change\n    #to do so, we will use a counter, and since we sorted the array, we can start from the beginning of the array and increment our counter\n    #to find out how many negative numbers there are\n    negative_counter = 0\n    for i in range(len(arr)):\n        #for every element of the array, we first check if it is negative or not\n        if arr[i] < 0:\n            #if it is negative, we will increment our counter by 1\n            negative_counter += 1\n        #then, we check if it is positive, and if it is, we will increment our counter by 1\n        elif arr[i] > 0:\n            #if it is positive, we will increment our counter by 1\n            negative_counter += 1\n        #then, we check if the counter is greater than 0, and if it is, we will break out of the loop\n        if negative_counter > 0:\n            break\n    #now we need to do the same thing, but for the positive numbers\n    #we will increment the counter by n, since we have n elements\n    positive_counter = n\n    for i in range(len(arr)-n):\n        #then, we will iterate through the array, and if the element is positive, we will decrement our counter by 1\n        if arr[i] > 0:\n            positive_counter -= 1\n        #then, we will check if the counter is greater than 0, and if it is, we will break out of the loop\n        if positive_counter <= 0:\n            break\n    #now we need to find out how many negative and positive numbers there are, and how many empty spots we need to add\n    #we can find out how many negative numbers there are using the count function\n    negative_count = len([i for i in arr if i < 0])\n    #and how many positive numbers there are using the count function\n    positive_count = len([i for i in arr if i > 0])\n    #then, we will find out how many empty spaces we need to add\n    #we need to add n empty spaces, so we will use a variable to count the number of empty spaces\n    empty_spaces_count = n - positive_count - negative_count\n    #we will check if there are enough empty spaces, and if not, we will add more empty spaces\n    if empty_spaces_count > 0:\n        #if there are empty spaces, we will add the number of empty spaces to the end of the array\n        for i in range(empty_spaces_count):\n            arr.append(0)\n    #then, we need to sort the array again, and we will start from the beginning\n    arr.sort()\n    #finally, we return the array\n    return arr\n",
        "test": "assert     re_arrange_array([-4, 5, -1, 2, -1, -4, 2], 0) == [-4, 5, -1, 2, -1, -4, 2], \"Wrong answer\"",
        "num_ids": 2631,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    return char+str1\n",
        "test": "assert     replace_blank('', '') == ''",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #sorting and list, smaller to larger. The best way to do this is with heapq module.\n    #use heapq.nlargest(n, list)\n    #use heapq.nsmallest(n, list)\n    #use heapq.nlargest(n)\n    #use heapq.nsmallest(n)\n    list1.sort(reverse=True)\n    return list1[:n]\n    \n",
        "test": "assert     larg_nnum([1,2,3,4,5,6],1) == [6]",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math as m\n    L = 2*m.pi*r\n    H = h\n    area = (L*H)/3\n    return area\n",
        "test": "assert     lateralsuface_cylinder(0.5,0) == 0",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(1) == 1",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & ~(n-1)\n",
        "test": "assert     even_bit_set_number(0) == False, 'Should return False'",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #initializing empty dictionary \n    occurences = {}\n    for element in test_list:\n        #if the tuple has already occured \n        if element in occurences:\n            #increase the value by 1\n            occurences[element] += 1\n        #else add to the dictionary\n        else:\n            occurences[element] = 1\n    return occurences \n",
        "test": "assert     check_occurences([('a', 1), ('a', 2), ('a', 3)]) == {('a', 1): 1, ('a', 2): 1, ('a', 3): 1}",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        for j in range(len(str)-1,i,-1):\n            count+=1\n    return count\n    \nprint(number_of_substrings(\"gfg\"))\nprint(number_of_substrings(\"helloworld\"))\nprint(number_of_substrings(\"fg\"))\n",
        "test": "assert not number_of_substrings(\"\"), \"empty string\"",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def num_seq_fibo(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return num_seq_fibo(n-1) + num_seq_fibo(n-2)\n    return num_seq_fibo(n) - num_seq_fibo(n-1)\n",
        "test": "assert     get_total_number_of_sequences(1,1) == 1",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n",
        "test": "assert     replace_list([1,2,3,4], [3,4,5,6]) == None",
        "num_ids": 2573,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac(\"\") == 0",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==0:\n        return 0\n    while(True):\n        num=math.sqrt(N)\n        if num == int(num):\n            break\n        else:\n            N=num+1\n    return N\n    \ndef next_Perfect_Square2(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while(True):\n        num=math.sqrt(N)\n        if num == int(num):\n            break\n        else:\n            N+=1\n    return N\n",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2: \n        return sum(arr)\n    \n    cur_max, max_sum, min_sum = arr[0], arr[0], arr[0]\n    for i in range(1, len(arr)): \n        cur_max = max(cur_max + arr[i], arr[i])\n        max_sum = max(max_sum, cur_max)\n        min_sum = min(min_sum, cur_max + arr[i - 1])\n    return max_sum\n",
        "test": "assert     max_sum([]) == 0",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001\n    guess = number/2.0\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number/guess)/2.0\n    return guess\n",
        "test": "assert     abs(babylonian_squareroot(4) - 2) < 0.0000001, \"TEST FAILED\"",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    dp=[1 for i in range(n)]\n    \n    if n==1:\n        return 1\n    for i in range(1,n):\n        for j in range(i):\n            if str[i]==str[j] and (i-j<=2 or dp[i-2]>=dp[i]):\n                dp[i]=2+dp[i-1]\n    return max(dp)\n",
        "test": "assert     lps('babad') == 5",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #return the harmonic sum of n\n    return 1 / (1 / (n-1))\n",
        "test": "assert     harmonic_sum(2) == 1",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1,2,3],[1,2,3,4]) == [1,2,3]",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "test": "assert     count_X((1,2,3,4,5), 5) == 1",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0, element)\n    return list\n",
        "test": "assert     insert_element([1,2,3,4],1) == [1,1,2,3,4]",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if (numbers == 0):\n        return complex(0, 0)\n    if (numbers == 1):\n        return complex(0, 1)\n    if (numbers == -1):\n        return complex(0, -1)\n    if (numbers == 2):\n        return complex(1, 0)\n    if (numbers == -2):\n        return complex(-1, 0)\n    if (numbers == 3):\n        return complex(1, 1)\n    if (numbers == -3):\n        return complex(-1, -1)\n    if (numbers == 4):\n        return complex(1, -1)\n    if (numbers == -4):\n        return complex(-1, 1)\n    if (numbers == 5):\n        return complex(1, -1)\n    if (numbers == -5):\n        return complex(-1, 1)\n    if (numbers == 6):\n        return complex(2, 0)\n    if (numbers == -6):\n        return complex(-2, 0)\n    if (numbers == 7):\n        return complex(2, 1)\n    if (numbers == -7):\n        return complex(-2, -1)\n    if (numbers == 8):\n        return complex(2, -1)\n    if (numbers == -8):\n        return complex(-2, 1)\n    if (numbers == 9):\n        return complex(1, -2)\n    if (numbers == -9):\n        return complex(-1, -2)\n    if (numbers == 10):\n        return complex(1, -2)\n    if (numbers == -10):\n        return complex(-1, 2)\n    if (numbers == 11):\n        return complex(2, -2)\n    if (numbers == -11):\n        return complex(-2, -2)\n    if (numbers == 12):\n        return complex(1, 2)\n    if (numbers == -12):\n        return complex(-1, 2)\n    if (numbers == 13):\n        return complex(1, 2)\n    if (numbers == -13):\n        return complex(-1, 1)\n    if (numbers == 14):\n        return complex(1, -1)\n    if (numbers == -14):\n        return complex(-1, -1)\n    if (numbers == 15):\n        return complex(2, -1)\n    if (numbers == -15):\n        return complex(-2, 1)\n    if (numbers == 16):\n        return complex(1, 1)\n    if (numbers == -16):\n        return complex(-1, -1)\n    if (numbers == 17):\n        return complex(2, 1)\n    if (numbers == -17):\n        return complex(-2, -1)\n    if (numbers == 18):\n        return complex(1, -1)\n    if (numbers == -18):\n        return complex(-1, 1)\n    if (numbers == 19):\n        return complex(2, -1)\n    if (numbers == -19):\n        return complex(-2, 1)\n    if (numbers == 20):\n        return complex(3, 0)\n    if (numbers == -20):\n        return complex(-3, 0)\n    if (numbers == 21):\n        return complex(2, 0)\n    if (numbers == -21):\n        return complex(-2, 0)\n    if (numbers == 22):\n        return complex(3, 1)\n    if (numbers == -22):\n        return complex(-3, -1)\n    if (numbers == 23):\n        return complex(2, 1)\n    if (numbers == -23):\n        return complex(-2, -1)\n    if (numbers == 24):\n        return complex(3, -1)\n    if (numbers == -24):\n        return complex(-3, 1)\n    if (numbers == 25):\n        return complex(1, 2)\n    if (numbers == -25):\n        return complex(-1, 2)\n    if (numbers == 26):\n        return complex(1, 1)\n    if (numbers == -26):\n        return complex(-1, -1)\n    if (numbers == 27):\n        return complex(1, -1)\n    if (numbers == -27):\n        return complex(-1, 1)\n    if (numbers == 28):\n        return complex(2, 2)\n    if (numbers == -28):\n        return complex(-2, 2)\n    if (numbers == 29):\n        return complex(2, 1)\n    if (numbers == -29):\n        return complex(-2, -1)\n    if (numbers == 30):\n        return complex(1, 2)\n    if (numbers == -30):\n        return complex(-1, 2)\n    if (numbers == 31):\n        return complex(1, 1)\n    if (numbers == -31):\n        return complex(-1, -1)\n    if (numbers == 32):\n        return complex(2, 1)\n    if (numbers == -32):\n        return complex(-2, -1)\n    if (numbers == 33):\n        return complex(1, -1)\n    if (numbers == -33):\n        return complex(-1, 1)\n    if (numbers == 34):\n        return complex(2, -1)\n    if (numbers == -34):\n        return complex(-2, 1)\n    if (numbers == 35):\n        return complex(3, 0)\n    if (numbers == -35):\n        return complex(-3, 0)\n    if (numbers == 36):\n        return complex(2, 0)\n    if (numbers == -36):\n        return complex(-2, 0)\n    if (numbers == 37):\n        return complex(3, 1)\n    if (numbers == -37):\n        return complex(-3, -1)\n    if (numbers == 38):\n        return complex(2, 1)\n    if (numbers == -38):\n        return complex(-2, -1)\n    if (numbers == 39):\n        return complex(3, -1)\n    if (numbers == -39):\n        return complex(-3, 1)\n    if (numbers == 40):\n        return complex(1, 2)\n    if (numbers == -40):\n        return complex(-1, 2)\n    if (numbers == 41):\n        return complex(1, 1)\n    if (numbers == -41):\n        return complex(-1, -1)\n    if (numbers == 42):\n        return complex(1, -1)\n    if (numbers == -42):\n        return complex(-1, 1)\n    if (numbers == 43):\n        return complex(2, 2)\n    if (numbers == -43):\n        return complex(-2, 2)\n    if (numbers == 44):\n        return complex(2, 1)\n    if (numbers == -44):\n        return complex(-2, -1)\n    if (numbers == 45):\n        return complex(1, 2)\n    if (numbers == -45):\n        return complex(-1, 2)\n    if (numbers == 46):\n        return complex(1, 1)\n    if (numbers == -46):\n        return complex(-1, -1)\n    if (numbers == 47):\n        return complex(1, -1)\n    if (numbers == -47):\n        return complex(-1, 1)\n    if (numbers == 48):\n        return complex(2, -1)\n    if (numbers == -48):\n        return complex(-2, 1)\n    if (numbers == 49):\n        return complex(1, -1)\n    if (numbers == -49):\n        return complex(-1, -1)\n    if (numbers == 50):\n        return complex(2, -1)\n    if (numbers == -50):\n        return complex(-2, -1)\n    if (numbers == 51):\n        return complex(3, 0)\n    if (numbers == -51):\n        return complex(-3, 0)\n    if (numbers == 52):\n        return complex(2, 0)\n    if (numbers == -52):\n        return complex(-2, 0)\n    if (numbers == 53):\n        return complex(3, 1)\n    if (numbers == -53):\n        retur",
        "test": "assert     convert([2+2j, -4+4j, -1+1j, 2+2j]) == [(2+2j), (0-4j), (2+2j), (4+4j)], 'Test 2 Failed'",
        "num_ids": 3056,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) is int:\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return [combination for combination in combinations_with_replacement(l, n)]\n",
        "test": "assert combinations_colors([], 1) == []",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    primes = 0\n    for i in range(2,n):\n        if n % i == 0:\n            primes = primes + 1\n    return primes\n",
        "test": "assert     count_Primes_nums(1) == 0, \"Should return 0\"",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert     swap_numbers(3, 3) == (3, 3)",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert     maximize_elements((1, 2), (2, 4)) == (2, 4)",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    a = 5\n    b = 7\n    for i in range(5, n):\n        c = (a+b) % 2\n        if c == 0:\n            a = (a+b)//2\n        else:\n            b = (a+b)//2\n    return (a+b)//2\n",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1[i] = 0\n        else:\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1\n    \ndef partition(test_list, low, high):\n    '''\n    Write a function that takes a list and an index range as input and partitions the list into sublists according to the input range.\n    '''\n    if high > low:\n        mid = low + (high - low) // 2\n        partition(test_list, low, mid)\n        partition(test_list, mid + 1, high)\n        test_list[mid], test_list[mid + 1] = test_list[mid + 1], test_list[mid]\n    return test_list\n",
        "test": "assert     division_elements((0, 2, 1), (2, 0, 1)) == (2, 1, 0.5)",
        "num_ids": 1307,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"The list must be larger than the split size\"\n    else:\n        return list1[0:L], list1[L:]\n",
        "test": "assert     split_two_parts([1,2,3,4,5,6,7,8], 4) == ([1,2,3,4], [5,6,7,8]), \"Wrong\"",
        "num_ids": 1052,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age)!= int and type(h_age)!= float:\n        print(\"Warning: Type for 'h_age' variable is not 'int' or 'float'\")\n        return None\n    elif h_age < 0:\n        print(\"Warning: Value for 'h_age' variable is less than 0\")\n        return None\n    else:\n        return h_age * 7\n",
        "test": "assert     dog_age(0) == 0, \"Error, it should be 0.\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    for i in range(0, len(S), step):\n        return_list.append(S[i:i+step])\n    return return_list\n",
        "test": "assert     list_split([1,2,3,4,5], 3) == [[1, 2, 3], [4, 5]], 'wrong'",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l**2*6\n    return(area)\n",
        "test": "assert     lateralsurface_cube(2) == 24, \"Test 2 failed.\"",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n,2):\n        sum += i**2\n    return sum\n",
        "test": "assert     square_Sum(2) == 1, \"square_Sum should return 1\"",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return (n*(n+1))//2\n    else:\n        return ((n*(n+1))//2)+1\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) > 127:\n        return int(ord(k)-32)\n    else:\n        return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            total_even += arr[i]\n    return total_even\n",
        "test": "assert sum_even_and_even_index([]) == 0",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += (i**5)\n    return sum\nprint(even_Power_Sum(3))\n",
        "test": "assert     even_Power_Sum(0) == 0, \"Test 1 Failed\"",
        "num_ids": 2662,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_2 = []\n    for x in range(0, len(test_list)):\n        list_2.append(test_list[x][1])\n    return list_2\n",
        "test": "assert     rear_extract([]) == []",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n",
        "test": "assert ",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    def binomial_Coeff(n,k):\n        if n==0 or k==0 or n==k or k>n:\n            return 0\n        else:\n            return math.comb(n,k)\n    \n    summ=0\n    for i in range(1,n+1):\n        summ+=binomial_Coeff(n,i)\n    return summ\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n",
        "test": "assert     volume_cylinder(1,1) == 3.14",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for item in dict:\n        if dict[item] >= n:\n            new_dict[item] = dict[item]\n    return new_dict\n",
        "test": "assert     dict_filter({'a':1,'b':2,'c':3},2) == {'b':2,'c':3}",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            n += 1\n    return n\n",
        "test": "assert     count_first_elements((0,1,2)) == 2",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return (n * (n + 1)) // 2\n",
        "test": "assert (is_num_decagonal(0) == 1)",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    for element in dlist:\n        if element == item:\n            return True, index\n        index += 1\n    return False, -1\n",
        "test": "assert     sequential_search([1,2,3,4,5], 1) == (True, 0)",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1,2,2,3,5]) == False",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    else:\n        for i in range(len(nums1)):\n            nums1[i] = nums1[i] - nums2[i]\n        return nums1\n",
        "test": "assert     sub_list([1,2,3],[3,4,5]) == [[1,2,3],[3,4,-1]], 'Wrong'",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    counts = {}\n    while n:\n        d = n % 10\n        n = n // 10\n        if d in counts:\n            counts[d] += 1\n        else:\n            counts[d] = 1\n    for k in counts:\n        if counts[k] > k:\n            return False\n    return True\n",
        "test": "assert     validate(10) == False, \"10 is a 1-digit\"",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n",
        "test": "assert     check_element([1,2,3,4,5,6,7,8,9],10) == False",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('[ab]b',text):\n        return True\n    return False\n",
        "test": "assert     text_match_two_three('aaaaaaaaaaaaaa') == False",
        "num_ids": 1728,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    previous_sum = 0\n    for i in range(0, n, k):\n        previous_sum = max(previous_sum + a[i], a[i])\n        max_sum = max(previous_sum, max_sum)\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([0,3,-2,1],2,2) == 0",
        "num_ids": 2053,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(n):\n        ans = ans + i**2\n    return ans\n",
        "test": "assert     square_Sum(1) == 0",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "test": "assert     max_length([[1,2,3],[4,5,6],[7,8,9]]) == 3",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    if k == 2:\n        return 2\n",
        "test": "assert     count_no_of_ways(2, 2) == 2, 'incorrect'",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return (math.floor(n/m))\n",
        "test": "assert     find(6, 3) == 2",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = math.sqrt(w**2 + h**2)\n    return thirdside\n",
        "test": "assert     otherside_rightangle(1,1) == math.sqrt(2), \"This is incorrect\"",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max_val = None\n    for i in listval:\n        if max_val == None:\n            max_val = i\n        else:\n            if max_val < i:\n                max_val = i\n    return max_val\n    \n",
        "test": "assert max_val([1,2]) == 2",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number):\n        if number % i == 0:\n            result += i\n    return result\n",
        "test": "assert     sum_div(0) == 0",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    else:\n        mid = len(arr) // 2\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n",
        "test": "assert get_Inv_Count([]) == 0, 'Empty list has zero inversions'",
        "num_ids": 1109,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    \n    return list2\n",
        "test": "assert     flatten_list([[1],2,[3,4]]) == [1,2,3,4], \"wrong\"",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = max(stdata, key=lambda t: t[1])\n    return max_agg\n    \ndef max_aggregate_key(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples using the key as the aggregation function.\n    '''\n    max_agg = max(stdata, key=lambda t: (t[0], t[1]))\n    return max_agg\n",
        "test": "assert     max_aggregate([('a', 1), ('b', 3), ('c', 2), ('d', 4)]) == ('d', 4)",
        "num_ids": 2148,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1 << (n + 1)): \n        s = 0\n        for j in range(n): \n            if (i & (1 << j)) > 0: \n                s += 1\n        if s == (n + 1): \n            count += 1\n    return count \n",
        "test": "assert count_binary_seq(0) == 0",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 1:\n        return 1\n    if d == {}:\n        return 0\n    return 1 + max(list(map(dict_depth, d.values())))\n",
        "test": "assert     dict_depth({}) == 0, 'empty dictionary'",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr_len = len(arr)\n    #print(arr_len)\n    index_value = index%arr_len\n    #print(index_value)\n    rotations = rotations%arr_len\n    #print(rotations)\n    for i in range(rotations) :\n        index = (index-arr[index_value])%arr_len\n        index_value = index%arr_len\n        #print(index_value)\n    return arr[index]\n    \n",
        "test": "assert     find_Element([1,2,3,4,5],3,0,0) == 1",
        "num_ids": 1546,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i.startswith(\"p\"):\n            return i,words.pop(words.index(i))\n    print(\"No word starting with 'p' found!\")\n    return False\n",
        "test": "assert     start_withp(['pair', 'people', 'python', 'program','makes','me', 'grateful', 'to', 'give', 'a', 'bonus', 'if', 'you', 'prefer', 'the', 'honour', 'of', 'giving', 'to', 'the', 'boss', 'a', 'card', 'out', 'of', 'the', 'box', 'the', 'boss', 'will', 'be', 'happy', 'to', 'help', 'a', 'lazy', 'boy']) == ['python', 'program']",
        "num_ids": 1770,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    summ = 0\n    dp = [[False for j in range(k+1)] for i in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n        summ = 0\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if j == 0:\n                dp[i][j] = True\n            else:\n                dp[i][j] = False\n                if a[i-1] <= j:\n                    dp[i][j] = dp[i-1][j-a[i-1]] or dp[i-1][j]\n            if dp[i][j]:\n                summ = max(summ, a[i-1] + summ)\n    return summ\n        ",
        "test": "assert     max_sum_increasing_subseq([0, 1, 3, 6, 4, 2, 1], 6, 3, 3) == 6",
        "num_ids": 2810,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m], tuplex[n]\n",
        "test": "assert     colon_tuplex((\"1\",\"2\",\"3\",\"4\"),3,4) == (1,\"2\",\"3\",\"4\")",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists and sort the results of the product \n    nums1.sort()\n    nums2.sort()\n    result = []\n    i = 0\n    j = 0\n    while i < N and j < N:\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums2[j] < nums1[i]:\n            j += 1\n        else:\n            result.append(max(nums1[i], nums2[j]) * min(nums1[i], nums2[j]))\n            i += 1\n            j += 1\n    return result \n",
        "test": "assert     large_product([], [], 0) == []",
        "num_ids": 1693,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \nprint(maximum(10,5))",
        "test": "assert     maximum(3,2) == 3,'maximum function not implemented'",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('a' ) == ('a',), \"failed\"",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_position = 0\n    while bit_position < 32: \n        if (n & (1 << bit_position))!= 0: \n            break\n        bit_position += 1\n    return (n | (1 << bit_position))\n    ",
        "test": "assert     set_left_most_unset_bit(1) == 1",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Volume of a cone can be calculated as pi*r^2*h\n    volume = math.pi*(r**2)*h\n    return volume\n",
        "test": "assert     volume_cone(0,2) == math.pi*math.pow(0,2)*2",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n == 0): \n        return 0\n    ans = 0\n    while (n!= 0): \n        n = n & (n - 1) \n        ans += 1\n    return ans \n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n",
        "test": "assert     add_string([1,2,3,4,5], \"Hello {0}\") == [\"Hello 1\",\"Hello 2\",\"Hello 3\",\"Hello 4\",\"Hello 5\"]",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        val = l2[i]\n        d[key] = val\n    for i in range(len(l3)):\n        key = l3[i]\n        val = l2[i]\n        d[key] = val\n    return d\n",
        "test": "assert     convert_list_dictionary([1,2,3],['a', 'b'],['c', 'd']) == {1: {'a': 'c', 'b': 'd'}, 2: {'a': 'c', 'b': 'd'}, 3: {'a': 'c', 'b': 'd'}}",
        "num_ids": 1829,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    if n == 1:\n        max_sum = 1\n    if n == 2:\n        max_sum = 3\n    if n == 3:\n        max_sum = 5\n    if n == 4:\n        max_sum = 7\n    if n == 5:\n        max_sum = 9\n    if n == 6:\n        max_sum = 11\n    if n == 7:\n        max_sum = 13\n    if n == 8:\n        max_sum = 15\n    if n == 9:\n        max_sum = 17\n    if n == 10:\n        max_sum = 19\n    return max_sum\n",
        "test": "assert     get_max_sum(1) == 1, \"Wrong\"",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list\n",
        "test": "assert     max_length_list([]) == None, 'Wrong result!'",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # for i in test_tup:\n    #     if test_tup.count(i) > 1:\n    #         return False\n    # return True\n    return len(set(test_tup)) == len(test_tup)\n",
        "test": "assert     check_distinct((1,1,1,1)) == False",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return -1\n",
        "test": "assert     first_non_repeating_character('abaccdeff') == 'b', 'test 2 failed'",
        "num_ids": 2785,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # code here \n    if(re.match(regex,string)):\n        return True\n    else:\n        return False\n",
        "test": "assert not check_char(\"ABC\")",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n",
        "test": "assert     median_numbers(1,2,3) == 2",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    summ = 0\n    for n in nums:\n        summ += (n % 10)\n    return summ\n",
        "test": "assert     sum_of_digits([1, 2, 3]) == 6, 'failed'",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_res = ()\n    for x, y in zip(test_tup1, test_tup2):\n        xor_res += (int(x) ^ int(y),)\n    return xor_res\n",
        "test": "assert     bitwise_xor((0, 1), (0, 1)) == (0, 0)",
        "num_ids": 1093,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for i in range(len(test_list)):\n        if test_list[i] not in test_list[:i]:\n            freq += 1\n    return freq\n",
        "test": "assert     extract_freq([(1, 2), (1, 3), (2, 3)]) == 3, 'Wrong output'",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #tup1 = tuple(tup1)\n    #tup2 = tuple(tup2)\n    #print(tup1, tup2)\n    \n    tup1 = tuple([1,2,3])\n    tup2 = tuple([4,5,6])\n    \n    tup3 = []\n    for i in range(len(tup1)):\n        tup3.append(tup1[i]+tup2[i])\n    return tup3\n    \n    \n    \ndef add_tuple(tup1, tup2):\n    '''\n    Write a function to perform element wise addition of tuple elements.\n    '''\n    \n    tup1 = tuple(tup1)\n    tup2 = tuple(tup2)\n    \n    tup3 = []\n    for i in range(len(tup1)):\n        tup3.append(tup1[i]+tup2[i])\n    return tup3\n    \n",
        "test": "assert     add_nested_tuples((7, 8), (9, 10, 11)) == (7, 8, 9, 10, 11)",
        "num_ids": 1301,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "test": "assert minimum(4,5) == 4",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n        else:\n            return False\n        \nprint(check_tuplex((1,2,3,4),(1,2,3,5,6,6)))",
        "test": "assert     check_tuplex(('h', 'e', 'l', 'l', 'o'), ('o', 'e', 'l', 'l', 'l')) == False, 'incorrect'",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_Parity(2) == True, 'Testing Failed!'",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(list(str(n)),reverse=True)))\n",
        "test": "assert rearrange_bigger(1) == 1",
        "num_ids": 1269,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # \u521b\u5efa\u4e00\u4e2a\u5806\uff0cheapq\u4e2d\u662f\u7b80\u5355\u5b9e\u73b0\u7684\u4e8c\u53c9\u5806\n    # \u4e00\u4e2a\u5806\u5176\u5b9e\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\uff0c\u4e8c\u53c9\u6811\u7684\u5806\u7ed3\u6784\uff0c\u53ea\u4e0d\u8fc7\u5728\u524d\u9762\u52a0\u5165\u7684\u8282\u70b9\u90fd\u4f1a\u88ab\u653e\u5230\u540e\u9762\n    heap = []\n    # nums1 = [1,3,5,2]\n    # nums2 = [-2,4,6,-1]\n    for i in range(len(nums1)):\n        # \u8fd9\u91cc\u662fheapq.heappush(heap, [nums1[i], nums2[i]])\u7684\u505a\u6cd5\uff0c\u6240\u4ee5\u8fd9\u91cc\u628a\u8f83\u5927\u7684\u653e\u5728\u524d\u9762\uff0c\u6240\u4ee5\u6700\u5c0f\u7684\u5c31\u662f\u8f83\u5c0f\u7684\u4e24\u4e2a\u6570\n        heapq.heappush(heap, [-nums2[i], nums1[i]])\n        # print(heap)\n    # print(heap)\n    # \u5f39\u51fa\u5806\u9876\n    # print(heapq.heappop(heap)[0])\n    # \u8fd9\u91cc\u7684heap[0]\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\uff1f\uff1f\u54ea\u6015\u662f\u8d1f\u6570\uff0c\u54ea\u6015\u662f\u6b63\u6570\uff0c\u5c31\u662f\u6b63\u6570\u7684\u90a3\u4e00\u8d34\uff0c\u800c\u662f\u53cd\u5411\u7684\u5806\u7684\u4e0b\u6807\u3002\n    # \u4e00\u4e2a\u7c7b\u4f3c\u7684\u65b9\u6cd5\u8fd8\u6709\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u662f\u6700\u5927\u5806\uff0c\u4e00\u4e2a\u662f\u6700\u5c0f\u5806\n    # \u4e24\u4e2a\u5806\u7684\u6700\u5927\u6570\uff0c\u5806\u4e2d\u7684\u6700\u5c0f\u6570\n    # \u6240\u4ee5\u4e0b\u6807\u7684\u8d34\u5fc3\u5c31\u662f\u6700\u5927\u7684\u5806\u7684\u6700\u5927\u5806\u4e2d\u6700\u5c0f\u7684\u5806\u7684\u6700\u5c0f\u5806\u7684\u90a3\u4e2a\u503c\n    # \u53bb\u6389\u4e00\u4e2a\u5806\u4e2d\u6700\u5927\u7684\u503c\n    # \u56e0\u4e3a\u6700\u5927\u5806\u4e2d\u7684\u6700\u5927\u503c\u662f\u5c0f\u4e8e\u6574\u4e2a\u5806\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u5982\u679c\u628a\u8fd9\u4e2a\u503c\u8f6c\u6362\u4e3a\u6b63\u6570\uff0c\u5b83\u5c31\u4f1a\u66f4\u5927\u4e00\u70b9\n    # \u56e0\u6b64\uff0c\u5982\u679c\u8ba9\u8fd9\u4e2a\u5806\u6700\u5927\u503c\u53d8\u4e3a\u8d1f\u6570\uff0c\u6240\u6709\u53ef\u80fd\u7684\u5806\u90fd\u4f1a\u53d8\u6210\u6b63\u6570\n    # \u4f46\u662f\u4e00\u4e2a\u6b63\u6570\uff0c\u5728\u6700\u5927\u5806\u4e2d\u4e0d\u4f1a\u53d8\u6210\u8d1f\u6570\n    # \u56e0\u6b64\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6b63\u6570\u7684\u4e0b\u6807\u5c31\u662f\u6700\u5927\u5806\u4e2d\u5c31\u662f\u6700\u5927\u503c\uff0c\u6240\u4ee5\u5982\u679c\u627e\u51fa\u5806\u4e2d\u6700\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u7528\u5806\u9876\u7684\u4e0b\u6807\u6765\u627e\u51fa\u8fd9\u4e2a\u503c\u4e86\n    while len(heap) > k:\n        # \u5f39\u51fa\u5806\u9876\n        heapq.heappop(heap)\n    return heap\n",
        "test": "assert ",
        "num_ids": 2540,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #initializing min_product\n    min_product = float('inf')\n    #initializing min_index\n    min_index = -1\n    #looping over the list\n    for i in range(0, len(list1)):\n        #for every tuple\n        for j in range(i+1, len(list1)):\n            #compute the product\n            product = list1[i][0] * list1[j][0]\n            #if product is smaller than min_product and min_index is not initialized, \n            #init min_product and min_index to it.\n            if product < min_product and min_index == -1:\n                min_product = product\n                min_index = list1[i][1]\n            #if product is equal to min_product and min_index is not initialized, \n            #init min_product and min_index to it.\n            elif product == min_product and min_index == list1[i][1]:\n                min_index = list1[i][1]\n            #otherwise the min_product remains as it is and min_index remains as it is\n    return (min_product, min_index)\n",
        "test": "assert     min_product_tuple(list1 = [(0,5),(2,8)]) == (0,5)",
        "num_ids": 1644,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(0, len(listval)):\n        if (min_val > listval[i]):\n            min_val = listval[i]\n    return min_val\n",
        "test": "assert     min_val([1, 2, 3])    ==     1",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for char in word:\n        if char!= '_':\n            result += char.capitalize()\n        else:\n            result += char\n    return result\n",
        "test": "assert     snake_to_camel('sNAKE_TO_CAMEL_STRING') == 'SNAKE_TO_CAMEL_STRING'",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2!= 0:\n            l.remove(i)\n    return l\n    \n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 3051,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # If the nth element is not available\n    if len(list1) <= n:\n        return None\n    # Extract the nth element\n    return list1[n]\n",
        "test": "assert     extract_nth_element([('apple', 'a'), ('mango', 'a'), ('banana', 'b'), ('pear', 'b')], 0) == ('apple', 'a')",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n",
        "test": "assert     overlapping([2,5],[3,7]) == False",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max(arr)\n    max2 = max(arr)\n    \n    for i in range(len(arr)):\n        if arr[i]==max1:\n            temp = i\n            break\n        else:\n            continue\n    for j in range(len(arr)):\n        if arr[j]==max2:\n            temp1 = j\n            break\n        else:\n            continue\n    return temp, temp1\n",
        "test": "assert ",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Create a dictionary\n    d = {}\n    for i in Input:\n        #If the tuple has the same first element, add the tuple to the dictionary \n        if i[0] in d.keys():\n            d[i[0]].append(i)\n        else:\n            d[i[0]] = []\n            d[i[0]].append(i)\n    #Iterate through each value of the dictionary \n    for i in d.values():\n        #If there are more than one common elements, return the first element\n        if len(i) > 1:\n            return i[0][0]\n    #If no common first element, return None\n    return None\n",
        "test": "assert     group_tuples([('a', 1), ('a', 2), ('a', 3)]) == 'a'",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len = []\n    max_length = 0\n    for i in lst:\n        lst_len.append(len(i))\n    for i in range(len(lst_len)):\n        if(lst_len[i] > max_length):\n            max_length = lst_len[i]\n    for i in range(len(lst_len)):\n        if(lst_len[i] == max_length):\n            return lst[i]\n",
        "test": "assert     Find_Max([]) == None, \"Test case 1 : Failed\"",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Your code here\n    list1 = [1, 2, 3, 4, 5, 6]\n    sum = 0\n    for i in range(len(list1)):\n        sum += round(list1[i])\n",
        "test": "assert ",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    return cube_sum\n",
        "test": "assert     cube_Sum(10) == (1 + 8 + 27 + 64 + 125 + 216 + 343 + 512 + 729 + 1000), 'incorrect'",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for tup in test_tup:\n        result += tup\n    return result\n",
        "test": "assert     concatenate_tuple(('ab','cd')) == 'abcd', \"Fail\"",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num = 1\n    result = 0\n    while (num <= n):\n        result += num**3\n        num = num + 1\n    return result / n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1, \"Wrong value\"",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Your code here\n    return ()\n",
        "test": "assert     extract_rear(()) == (), f\"extract_rear should return an empty tuple\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([], 1) == 0, \"Wrong output for count_element_in_list([], 1)\"",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num%2!= 0, nums))\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    if len(date)!= 3:\n        raise ValueError('Not a valid date.')\n    day, month, year = date[0], date[1], date[2]\n    if len(day) == 1:\n        day = '0'+day\n    if len(month) == 1:\n        month = '0'+month\n    return day+'-'+month+'-'+year\ndef split_tasks(tasks):\n    '''\n    Write a function to split a given string into words.\n    '''\n    if not isinstance(tasks, str):\n        raise ValueError('Not a valid string.')\n    # Regex for splitting words based on hyphen\n    # If a hyphen is encountered, split the word into two words\n    pattern = re.compile(r'\\W+')\n    tasks = tasks.replace('\\n','').replace('\\r', '').replace('\\t', '')\n    tasks = pattern.split(tasks)\n    return tasks\n",
        "test": "assert     change_date_format(\"01-06-2020\") == \"01-06-2020\"",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            j = i\n            while j>=gap and my_list[j-gap]>my_list[j]:\n                my_list[j-gap],my_list[j] = my_list[j],my_list[j-gap]\n                j -= gap\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([1,9,2,7,3]) == sorted([1,2,3,7,9])",
        "num_ids": 1361,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    new_list = list(map(lambda x,y: x+y, test_tup1, test_tup2))\n    return tuple(new_list)\n",
        "test": "assert     and_tuples((0, 0), (0, 0)) == (0, 0)",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    return a*a*(b+c)**2 - a*a*b*c\n",
        "test": "assert     parabola_directrix(1, 1, 0) == 1",
        "num_ids": 3104,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                common = True\n                break\n        if common:\n            break\n    return common\n",
        "test": "assert common_element([], []) == False",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    side_a = base1\n    side_b = base2\n    height = height\n    if side_a < side_b:\n        base = side_a\n    else:\n        base = side_b\n    print(base)\n    return base + height / 2\n",
        "test": "assert     median_trapezium(10,5,4) == 7",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Check whether the array is empty\n    if not arr:\n        return False\n    # Check if the length of array is one\n    if len(arr) == 1:\n        if arr[0] <= number:\n            return True\n        else:\n            return False\n    # The base case\n    if arr[0] > number:\n        return True\n    if arr[-1] < number:\n        return False\n    # Recursive case\n    if arr[len(arr)//2] <= number:\n        if arr[len(arr)//2] < number:\n            return check_greater(arr[len(arr)//2+1:], number)\n        else:\n            return check_greater(arr[:len(arr)//2], number)\n    else:\n        if arr[len(arr)//2] > number:\n            return check_greater(arr[:len(arr)//2], number)\n        else:\n            return check_greater(arr[len(arr)//2+1:], number)\n        \ndef check_greater_by_key(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Check whether the array is empty\n    if not arr:\n        return False\n    # Check if the length of array is one\n    if len(arr) == 1:\n        if arr[0] <= number:\n            return True\n        else:\n            return False\n    # The base case\n    if arr[0] > number:\n        return True\n    # Recursive case\n    if arr[len(arr)//2] <= number:\n        if arr[len(arr)//2] < number:\n            return check_greater_by_key(arr[len(arr)//2+1:], number)\n        else:\n            return check_greater_by_key(arr[:len(arr)//2], number)\n    else:\n        if arr[len(arr)//2] > number:\n            return check_greater_by_key(arr[:len(arr)//2], number)\n        else:\n            return check_greater_by_key(arr[len(arr)//2+1:], number)\n",
        "test": "assert     check_greater([1,2,3,4], 4) == True, \"Wrong answer for this array\"",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"a+b\")\n    result = pattern.search(text)\n    return result!= None\n",
        "test": "assert     text_match_one('abb')     == True",
        "num_ids": 2491,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert last_Digit(7) == 7, \"Last digit incorrect\"",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list_neg.append(-list1[i])\n    return list_neg\n",
        "test": "assert ",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for s in str1:\n        if s.isdigit():\n            new_str += s\n    return new_str\n",
        "test": "assert     remove_odd('') == '', \"remove_odd failed\"",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if not test_list:\n        return 0\n    return len([x for x in test_list if x[::-1] in test_list])\n",
        "test": "assert     count_bidirectional([('a','b'),('c','d'),('b','a'),('d','c')]) ==     4",
        "num_ids": 1173,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for i in range(0,len(L)):\n        single += L[i]\n    return single\n",
        "test": "assert     multiple_to_single([0,0,0,0]) == 0",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # global variable\n    adverb_list = []\n    \n    # string_list = ['I', 'like', 'the', 'best', 'beverage', 'I', 'want', 'to', 'eat', 'with', 'the', 'best', 'taste', 'of', 'food', 'on', 'every', 'day', 'because', 'I', 'like', 'the', 'food','so','much', 'too','much', 'I', 'like', 'the', 'food', 'and','so','much', 'food', 'for','me']\n",
        "test": "assert ",
        "num_ids": 2988,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l>=0:\n        s=l*l*l\n        return s\n    else:\n        print('Incorrect input, the size should be a positive integer')\n",
        "test": "assert     surfacearea_cube(0) == 0, '0'",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums)<1:\n        return 0\n    positives = 0\n    for x in nums:\n        if x > 0:\n            positives += 1\n    return positives/len(nums)\n",
        "test": "assert     positive_count([1, -2, 3, 4]) == 0.75, \"Incorrect count\"",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    # create list to hold the negative numbers\n    neg = []\n    \n    # traverse the list\n    for i in range(len(list1)):\n        \n        # find the negative number\n        if list1[i] < 0:\n            neg.append(list1[i])\n    \n    # find the largest negative number\n    largest = max(neg)\n    \n    # return largest negative number\n    return largest\n",
        "test": "assert     largest_neg([-1, -1, -1, -1, -1]) == -1, \"Testing Error 2\"",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for k in range(K, len(test_list)):\n        new_list.append(test_list[k])\n    return new_list\n",
        "test": "assert     trim_tuple([], 0) == []",
        "num_ids": 2148,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([x*y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     index_multiplication((1,2,3),(4,5,6)) == (4,10,18), \"index_multiplication\"",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    n = 0\n    for i in tup:\n        if i in lst:\n            n = n+1\n    return n\n",
        "test": "assert     count_Occurrence((1, 3, 3, 3), [1, 2, 3, 4]) == 4",
        "num_ids": 1648,
        "indeed": true
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n",
        "test": "assert     cube_nums([1,2,3]) == [1,8,27], \"cube_nums\"",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    return n + cal_sum(n-1)\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n    \ndef get_common_string(str1, str2):\n    '''\n    Write a function to check and return the common string from two given strings.\n    '''\n    common_str = []\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            common_str.append(str1[i])\n    common_str = ''.join(common_str)\n    return common_str\n",
        "test": "assert     extract_string([], 5) == []",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "test": "assert     remove_whitespaces(' ') == ''",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "test": "assert     loss_amount(100, 100)     == 0",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    for i in range(2,n) : \n        if (n % i == 0) : \n            sum = sum + i \n    return sum\n    \ndef squareOfFactors(n) : \n    '''\n    Write a python function to find the square of the sum of the odd factors of a number.\n    '''\n    sum = 1\n    for i in range(1,n) : \n        if (n % i == 0) : \n            sum = sum + i \n    return (sum * sum)\n    \ndef absoluteValue(n) : \n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    return abs(n)\n    \ndef printTime(seconds) : \n    '''\n    Write a python function to print the time in hh:mm:ss.s format.\n    '''\n    minutes,seconds = divmod(seconds,60)\n    hours,minutes = divmod(minutes,60)\n    print(\"%d:%02d:%02d\"%(hours,minutes,seconds))\n    \ndef printTime_1(seconds) : \n    '''\n    Write a python function to print the time in hh:mm:ss.s format.\n    '''\n    if (seconds < 1) :\n        print(\"00:00:00\")\n        return\n    minutes,seconds = divmod(seconds,60)\n    hours,minutes = divmod(minutes,60)\n    print(\"%d:%02d:%02d\"%(hours,minutes,seconds))\n    \ndef average(num1,num2) : \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (num1 + num2) / 2\n    \ndef countDigits(n) : \n    '''\n    Write a python function to find the count of digits in a number.\n    '''\n    count = 0\n    while (n!= 0) :\n        n = n // 10\n        count += 1\n    return count\n    \ndef maxDiff(arr,n) : \n    '''\n    Write a python function to find the maximum difference among all the elements in an array.\n    '''\n    n = len(arr)\n    if (n == 0) :\n        return\n    max1 = -99999\n    for i in range(0,n) : \n        if (arr[i] > max1) :\n            max1 = arr[i]\n    min1 = 99999\n    for i in range(0,n) : \n        if (arr[i] < min1) :\n            min1 = arr[i]\n    return (max1 - min1)\n    \ndef sumOfDivisors(n) : \n    '''\n    Write a python function to find the sum of the divisors of a number.\n    '''\n    count = 1\n    sum = 0\n    if (n == 1) : \n        return 1\n    while (n % count == 0) : \n        sum = sum + count\n        n = n // count\n    count = count + 1\n    while (n!= 1) : \n        count = count + 1\n        if (n % count == 0) : \n            sum = sum + count\n            n = n // count\n    return sum\n    \ndef sumOfDivisors_1(n) : \n    '''\n    Write a python function to find the sum of the divisors of a number.\n    '''\n    if (n == 1) : \n        return 1\n    sum = 0\n    while (n % 2 == 0) : \n        sum = sum + 2\n        n = n // 2\n    count = 3\n    while (count * count <= n) : \n        if (n % count == 0) : \n            sum = sum + count + (n//count)\n        count = count + 2\n    return sum\n    \ndef isPrime(n) : \n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if (n == 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    limit = math.sqrt(n)\n    i = 3\n    while (i <= limit) : \n        if (n % i == 0) : \n            return False\n        i = i + 2\n    return True\n    \ndef isPrime_1(n) : \n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if (n == 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    limit = math.sqrt(n)\n    i = 3\n    while (i <= limit) : \n        if (n % i == 0) : \n            return False\n        i = i + 2\n    return True\n    \ndef isPythagoras(a,b,c) : \n    '''\n    Write a python function to check if three given points are on a Pythagorean triplet.\n    '''\n    return (math.sqrt(a*a + b*b) == math.sqrt(c*c))\n    \ndef isPythagoras_1(a,b,c) : \n    '''\n    Write a python function to check if three given points are on a Pythagorean triplet.\n    '''\n    return (math.sqrt(a*a + b*b) == math.sqrt(c*c))\n    \ndef isSquare(n) : \n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    i = 1\n    while (i*i <= n) :\n        if (n % i == 0) : \n            return False\n        i = i + 1\n    return True\n    \ndef isSquare_1(n) : \n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    return (n == math.sqrt(n))\n    \ndef divisors(n) : \n    '''\n    Write a python function to find all divisors of a number.\n    '''\n    count = 1\n    lst = []\n    if (n == 1) : \n        lst.append(count)\n        return lst\n    if (n % count == 0) : \n        lst.append(count)\n        n = n // count\n    count = count + 1\n    while (n!= 1) : \n        count = count + 1\n        if (n % count == 0) : \n            lst.append(count)\n            n = n // count\n    return lst\n    \ndef divisors_1(n) : \n    '''\n    Write a python function to find all divisors of a number.\n    '''\n    lst = []\n    i = 1\n    while (i <= math.sqrt(n)) :\n        if (n % i == 0) : \n            lst.append(i)\n            if (n // i!= i) :\n                lst.append(n//i)\n        i = i + 1\n    return lst\n    \ndef primePartitions(n) : \n    '''\n    Write a python function to count all prime partitions of a number.\n    '''\n    count = 1\n    lst = []\n    if (n == 0) : \n        return 0\n    if (n == 1) : \n        return 1\n    lst.append(count)\n    while (n > 1) :\n        count = 1\n        i = 1\n        while (i <= n) :\n            if (n % i == 0) :\n                n = n // i\n                count = count + 1\n            i = i + 1\n        if (n!= 1) :\n            lst.append(count)\n        n = n - 1\n    return lst\n    \ndef primePartitions_1(n) : \n    '''\n    Write a python function to count all prime partitions of a number.\n    '''\n    lst = []\n    i = 2\n    while (i <= n) :\n        count = 0\n        while (i <= n) :\n            if (n % i == 0) :\n                count ",
        "test": "assert     sumofFactors(2) == 1",
        "num_ids": 2572,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    for x in range(len(text)-1,-1,-1):\n        if text[x] == 'z':\n            return True\n    return False\n",
        "test": "assert     text_match_wordz('text_match_wordz') == True",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumbers = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    if monthnum2 in monthnumbers.keys():\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(31) == False",
        "num_ids": 1494,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    if n==1:\n        return lst\n    else:\n        if lst[0]>=lst[1]:\n            return lst[0]\n        else:\n            return lst[1]\n",
        "test": "assert     Find_Min([5, 5, 5]) == 5, Find_Min([5, 5, 5])",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n",
        "test": "assert rectangle_area(2,2) == 4",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase(\"\") == \"\"",
        "num_ids": 3061,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first = []\n    for i in lst:\n        first.append(i[0])\n    return first\n",
        "test": "assert     Extract([[1,2,3],[4,5,6], [7,8,9]]) == [1,4,7], \"Should be 1 4 7\"",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count +=1\n    return count\n",
        "test": "assert     upper_ctr('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26, 'incorrect'",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            for k in range(j+1, len(list1)):\n                result.append([list1[i], list1[j], list1[k]])\n    return result\n",
        "test": "assert    combinations_list([]) == []",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    ans = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        ans = max(curr_max, ans)\n        \n    return ans\n",
        "test": "assert     max_subarray_product([2,3,-2,4]) == 6",
        "num_ids": 2877,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for k,v in dict.items():\n            if v!= dict[n]:\n                return False\n        return True\n",
        "test": "assert     check_value({'a': 1, 'b': 2, 'c': 1}, 'a') == False, 'Check for a and a is 2'",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for (k, v) in dict1.items() if v}\n",
        "test": "assert     drop_empty({}) == {}, 'Should return {}'",
        "num_ids": 2731,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n    max_prod = float('-inf')\n    curr_prod = 1\n    for num in arr:\n        curr_prod *= num\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n        if curr_prod < 0:\n            curr_prod = 1\n    return max_prod\n",
        "test": "assert max_product([-5, -4, -3, -2, -1]) == -1",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[2] + test_tup[3])\n",
        "test": "assert     add_pairwise((-10, 20, -30)) == (-11, 21, -31)",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in arr:\n        mul = (mul * i) % n\n    return mul\n",
        "test": "assert     find_remainder([1, 2, 3], 1) == 0",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    list1 = []\n    for i in l: \n        if i not in list1: \n            list1.append(i) \n        else: \n            return False\n    return True\n    # code here\n",
        "test": "assert     check_Consecutive([1, 2, 3]) == True, \"Fail the test case 1\"",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection = intersection + (test_list1[i],)\n    return intersection\n",
        "test": "assert     tuple_intersection([1,2,3],     [4,5,6]) == (), True",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('hi','i', 'y') == 'hy' ",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return dict1\n",
        "test": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3}) == {'c': 3, 'a': 1, 'b': 2}",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # code here\n    if len(nums) == 0:\n        return 0\n    return max(nums) + min(nums)\n",
        "test": "assert     big_sum([]) == 0",
        "num_ids": 1544,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # write your solution here\n    return string.lower()\n    # return string.swapcase()\n",
        "test": "assert     is_lower('Shubham') ",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    output = re.sub(r'[a-z]+', '', str1)\n    return output\n",
        "test": "assert     remove_lowercase(\"\")==\"\"",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return int(n[0])\n",
        "test": "assert     first_Digit(11) == 1",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n",
        "test": "assert     Split([]) == [] ",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cube = 0\n    sum_of_number = 0\n    \n    for i in range(n) : \n        sum_of_cube += pow(i, 3)\n        sum_of_number += i\n    print(sum_of_number)\n    return abs(sum_of_number - sum_of_cube)\n",
        "test": "assert     difference(0) == 0, 'Error, function does not work properly'",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N):\n        if A[i]&1==1:\n            count=count+1\n    return count\n",
        "test": "assert     find_Odd_Pair([1,2,3,4],4) == 2, 'Wrong Output'",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('case') == 'CASE'",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    sum_diff = 0\n    diff = abs(n1-n2)\n    while(diff>=10):\n        sum_diff += diff%10\n        diff//=10\n    sum_diff += diff\n    return sum_diff\n",
        "test": "assert     digit_distance_nums(0,0) == 0, \"1st test case is wrong\"",
        "num_ids": 1047,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = 0\n    sub_sum = 0\n    for i in range(size):\n        sub_sum += a[i]\n        if sub_sum < 0:\n            sub_sum = 0\n        if sub_sum > max_sub:\n            max_sub = sub_sum\n    return max_sub\n",
        "test": "assert     max_sub_array_sum([10, -10, 5, -2, 3, 4], 5) == 10",
        "num_ids": 3328,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
        "test": "assert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6)",
        "num_ids": 1306,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m = 0\n    for i in range(len(lst)):\n        count = 1\n        for j in range(i+1,len(lst)):\n            if lst[i]==lst[j]:\n                count+=1\n            else:\n                break\n        if count>m:\n            m = count\n    return m\n",
        "test": "assert     Find_Max_Length([])     ==     0 ",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"\\\"\", \"\")\n    text = text.replace(\"`\", \"\")\n    print(text)\n    return text\n",
        "test": "assert     extract_values(\"  'a ) \" ) == \"a )\", \"extract_values( ) should return a )\"",
        "num_ids": 859,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    possible_pairs = 0\n    dictionary = {}\n    for i in range(n):\n        if (arr[i] not in dictionary):\n            dictionary[arr[i]] = 0\n        dictionary[arr[i]] += 1\n",
        "test": "assert ",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if(word == \"\"):\n        return []\n    else:\n        return [char for char in word]\n        \n",
        "test": "assert split(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # a = int(n)\n    # b = a % 10\n    # c = a//10\n    # while c > 0:\n    #     a = c\n    #     b = a % 10\n    #     c = a//10\n    # print(b)\n    return sum(int(i) for i in str(n))\n",
        "test": "assert     sum_digits(0) == 0, 'zero'",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    x = 0\n    y = len(list1)-1\n    while x <= y:\n        if list1[x] > list1[y]:\n            return False\n        x+=1\n        y-=1\n    return True\n    \n    ",
        "test": "assert     issort_list([1,2,3,4,5,6]) == True",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert     empty_list(0) == [], 'First'",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist1 = list1.copy()\n    length = len(sublist1)\n    for i in range(length):\n        newlist = sublist1[i]\n        newlist.sort()\n        sublist1[i] = newlist\n    return sublist1\n",
        "test": "assert     sort_sublists([['a','b','c'],['d','e','f'],['g','h','i']]) == [['a','b','c'],['d','e','f'],['g','h','i']]",
        "num_ids": 1468,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    return [x for x in nums if not(x in seen or seen.add(x))]\n    #return set(nums)\n",
        "test": "assert     two_unique_nums([1, 1, 2, 2, 3, 3]) == [1, 2, 3]",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = set(list_data)\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n",
        "test": "assert     unique_product([0]) == 0",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h + 2*math.pi*r**2\n",
        "test": "assert     surfacearea_cylinder(10,30) == 536.5",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n = len(A)\n    m = len(B)\n    i = 0\n    j = 0\n    if n > m:\n        i = 0\n        j = 0\n        while i < m and j < n:\n            if A[j] == B[i]:\n                j += 1\n                i += 1\n            else:\n                j += 1\n        if i == m:\n            return True\n        else:\n            return False\n    else:\n        j = 0\n        while i < n and j < m:\n            if A[i] == B[j]:\n                i += 1\n                j += 1\n            else:\n                i += 1\n        if i == n:\n            return True\n        else:\n            return False\n",
        "test": "assert     is_Sub_Array([2,3,4,6,8], [1,2,3,4]) == False",
        "num_ids": 1239,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if (n < 0): \n        print(\"Factorial does not exist for negative numbers\") \n        return\n    if (n == 0 or n == 1): \n        return n \n    i = 1\n    while (i <= n): \n        factorial = factorial * i \n        i = i + 1\n    return factorial % 10\n",
        "test": "assert     last_Digit_Factorial(10) == 0",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter_list = []\n    \n    if len(list1) == len(list2) and len(list1) == len(list3):\n        for i in range(len(list1)):\n            inter_list.append(list1[i])\n            inter_list.append(list2[i])\n            inter_list.append(list3[i])\n        return inter_list\n    else:\n        print(\"List sizes are different.\")\n    \nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\nprint(interleave_lists([4,5,6],[7,8,9],[1,2,3]))\nprint(interleave_lists([9,8,7],[1,2,3],[4,5,6]))\nprint(interleave_lists([2,3,4],[5,6,7],[8,9,10]))",
        "test": "assert     interleave_lists([], [], []) == []",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for i in test_tup1:\n        if i not in test_tup2:\n            print(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            print(i)\n",
        "test": "assert     find_dissimilar((1,1,1,1), (2,2,2,2)) == None",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    if type(test_tuple) is not tuple:\n        return \"Only tuple input allowed\"\n    else:\n        for i in test_tuple:\n            if even_fnc(i):\n                new_list.append(i)\n        return tuple(new_list)\n",
        "test": "assert     even_ele((1, 2, 3, 4, 5, 6, 7, 8), lambda x: x % 2 == 0) == (2, 4, 6, 8),     \"WRONG\"",
        "num_ids": 1476,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = (0.5 * (b ** 2) * s)\n    return A\n",
        "test": "assert     surface_Area(2,4) == 8, \"surface_Area: expected 8, but got %s\" %(8)",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({}) == True",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 0\n    a = 1\n    for i in range(0,num):\n        a = a * (2*i+1)//(i+1)\n        n = n + a\n    return n\n",
        "test": "assert     catalan_number(1) == 1, \"catalan_number(1) incorrect\"",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # look for adverbs ending with ly\n    adverb_regex = re.compile(r'ly$')\n    for m in re.finditer(adverb_regex, text):\n        # return both the string and its position\n        return (m.group(0), m.span())\n",
        "test": "assert     find_adverbs('I never found the ly; I should have') == None",
        "num_ids": 1148,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1], reverse=True)\n    return items[:n]\n",
        "test": "assert expensive_items([],0) == []",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n",
        "test": "assert ",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5), 'incorrect'",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = 0\n    min = 0\n    for i in nums:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    diff = max - min\n    return diff\n",
        "test": "assert     big_diff([-2, -4, -6, -8]) == 8",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    start = int(math.floor(math.sqrt(a)) * math.sqrt(math.sqrt(a)))\n    end = int(math.ceil(math.sqrt(b)) * math.sqrt(math.sqrt(b)))\n    \n    return sum([i for i in range(start, end+1) if i*i == i])\n",
        "test": "assert     perfect_squares(1, 1) == True, \"Wrong result\"",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=x**2+y**2\n    theta=cmath.asin(y/r)\n    return (r,theta)\ndef main():\n    x,y=polar_rect(1.3,2.3)\n    print(x,y)\n    r,theta=rect_polar(x,y)\n    print(r,theta)\n",
        "test": "assert     polar_rect(0,0) == (0,0)",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[1:] + newList[:1]\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1], 'incorrect result'",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k:\n        return 0\n    if n==0 or k==0:\n        return 1\n    if k==1:\n        return 1\n    prod = 1\n    for i in range(1, k+1):\n        prod *= (n-i+1)\n    return prod//(factorial(k)*factorial(n-k))\n",
        "test": "assert     binomial_Coeff(1,1) == 1",
        "num_ids": 2901,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #pip3 install ipaddress\n    #return str(ipaddress.ip_address(ip).compressed)\n    s = str(ip).split(\".\")\n    return \".\".join(s)\n",
        "test": "assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return 0\n    even = odd = 0\n    for i in list1:\n        if i%2==0:\n            even+=i\n        else:\n            odd+=i\n    return even-odd\n",
        "test": "assert     diff_even_odd([]) == 0, 'empty input'",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return -1\n    a = list(str1)\n    b = list(str2)\n    swaps = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            continue\n        else:\n            swaps +=1\n            a[i], b[i] = b[i], a[i]\n    return swaps\n",
        "test": "assert     min_Swaps(\"1110101\",\"1010101\") == 1, \"Wrong Answer\"",
        "num_ids": 1335,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_size = 0\n    for elem in tuple_list:\n        byte_size += sys.getsizeof(elem)\n    return byte_size\n",
        "test": "assert tuple_size([]) == 0",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    a = 0\n    b = 0\n    arr_merge = []\n    while a < len(arr1) and b < len(arr2):\n        if arr1[a] <= arr2[b]:\n            arr_merge.append(arr1[a])\n            a += 1\n        else:\n            arr_merge.append(arr2[b])\n            b += 1\n    if a == len(arr1):\n        while b < len(arr2):\n            arr_merge.append(arr2[b])\n            b += 1\n    if b == len(arr2):\n        while a < len(arr1):\n            arr_merge.append(arr1[a])\n            a += 1\n    return arr_merge[k-1]\n",
        "test": "assert     find_kth([1,2], [2,3], 2) == 2",
        "num_ids": 1759,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    i = number\n    while i > 0:\n        digit = i % 10\n        sum += digit**3\n        i = i//10\n    return number == sum\n",
        "test": "assert     armstrong_number(100) == False, \"100 is not armstrong\"",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return (sum(range(1,number+1))+number)/number\n",
        "test": "assert     sum_average(0) == 0",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "test": "assert     is_Even(2) == True, '2 is odd'",
        "num_ids": 4475,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    index=0\n    first_occurence=[]\n    char=''\n    for i in range(len(str1)):\n        if str1[i] in first_occurence:\n            index=first_occurence.index(str1[i])\n            break\n        else:\n            first_occurence.append(str1[i])\n    if index==len(first_occurence):\n        return None\n    else:\n        return first_occurence[index]\n",
        "test": "assert     first_repeated_char(    'aabccccddd')     == 'a', 'False: a'",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            lucids.append(i)\n    return lucids\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip().split(\" \")\n    return \" \".join(s[::-1])\n",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(1) == False",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert     radian_degree(30) == math.pi/6",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    return None\n",
        "test": "assert     find_literals('Apple', '(?:[a-zA-Z0-9]+)') == 'Apple'",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 1\n    for i in range(1,n+1):\n        bell_num *= i\n    return bell_num\n",
        "test": "assert     bell_Number(1) == 1, f\"bell_Number(1) == {bell_Number(1)}\"",
        "num_ids": 2433,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in list1:\n        if list1.index(i)!= L:\n            list2.append(i)\n    return list2\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4], 2) == [1, 2, 4], 'incorrect'",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    '''\n    # This approach is O(n) time and space\n    for i in range(len(test_list)):\n        if N > len(test_list[i]):\n            return max(test_list[i])\n    return max(test_list[i][N - 1])\n    '''\n    '''\n    Approach 2:\n    # This approach is O(n) time and space\n    def max_of_nth_column(matrix, N):\n        n = len(matrix)\n        if N >= n:\n            return None\n        max_value = -float('inf')\n        for i in range(len(matrix[N - 1])):\n            max_value = max(max_value, matrix[N - 1][i])\n        return max_value\n    return max_of_nth_column(test_list, N)\n    '''\n    # This approach is O(n) time and space\n    def max_of_nth_column(matrix, N):\n        n = len(matrix)\n        max_value = -float('inf')\n        if N >= n:\n            return None\n        for i in range(len(matrix[N - 1])):\n            max_value = max(max_value, matrix[N - 1][i])\n        return max_value\n    return max_of_nth_column(test_list, N)\n",
        "test": "assert     max_of_nth([[2,4,6],[3,5,7],[1,8,9]], 2) == 7, 'The correct max is 7'",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for l in lst:\n        res.append([l[0],l[1]])\n    return res\n",
        "test": "assert     merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total\n",
        "test": "assert     cummulative_sum((1,2,3)) == 6",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    x = []\n    for i in range(len(nums)):\n        x.append(sum(nums[i]) / len(nums[i]))\n    return x\n",
        "test": "assert     average_tuple(tuple([tuple([1,2,3]), tuple([1,2,3])])) == [2.0,2.0]",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((tup1 - tup2)%int(tup1) for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "test": "assert     (tuple_modulo((1,2,3), (1,2,3)) == (0,0,0))",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    points = []\n    x, y = 0, 0\n    for i in range(steps):\n        if (x, y) in points:\n            return jumps\n        points.append((x, y))\n        if (x + 1, y) not in points:\n            x = x + 1\n            jumps = jumps + 1\n        elif (x, y + 1) not in points:\n            y = y + 1\n            jumps = jumps + 1\n        else:\n            jumps = jumps\n            x = x + 1\n            y = y + 1\n    return jumps\n",
        "test": "assert     min_Jumps(0, 0) == 0 ",
        "num_ids": 2811,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return(list(map(lambda x,y : x/y, nums1, nums2)))\n",
        "test": "assert     div_list([1,2,3],[]) == []",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for x in test_str:\n        if x.isnumeric():\n            nums.append(x)\n    while nums:\n        temp = nums.pop(0)\n        print(temp)\n        test_str = test_str.replace(temp, '', 1)\n        print(test_str)\n    return test_str\n",
        "test": "assert     move_num('aeiou') == 'aeiou'",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset(a):\n        if not a:\n            return 0\n        if len(a) == 1:\n            return 1\n        max_s = 1\n        max_arr = a[:]\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                if a[i]%a[j] == 0 and a[i]/a[j] not in max_arr:\n                    max_arr.append(a[i]/a[j])\n                    max_s = max(max_s, 1+largest_subset(max_arr))\n                    max_arr.remove(a[i]/a[j])\n        return max_s\n    return largest_subset(a)\n",
        "test": "assert     largest_subset([]) == 0, 'Empty list is incorrect!'",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if n == 1:\n    #     return min(arr1[0], arr2[0])\n    # elif n == 2:\n    #     return min(arr1[0], arr2[0], arr1[1], arr2[1])\n    # else:\n    #     low, high = 0, n-1\n    #     while low <= high:\n    #         mid = (low + high)//2\n    #         if (arr1[mid] > arr2[high]) ^ (arr2[high] < arr1[mid]):\n    #             return arr1[mid]\n    #         elif arr1[mid] > arr2[high]:\n    #             high = mid - 1\n    #         elif arr1[mid] < arr2[high]:\n    #             low = mid + 1\n    #     return arr1[low]\n",
        "test": "assert     get_median([], [], 0) == None, 'Wrong output!'",
        "num_ids": 3400,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n",
        "test": "assert nth_nums([1,2,3],1) == [1,2,3]",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper('PYTHON')",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a=newList.pop()\n    b=newList.pop(0)\n    newList.append(a)\n    newList.append(b)\n    return newList\n",
        "test": "assert     swap_List([1,2]) == [2,1], \"Wrong\"",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n",
        "test": "assert     (triangle_area(2) == (1.0/4.0) * (1.0/2.0) * 3.14)",
        "num_ids": 918,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n    if end==0:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n",
        "test": "assert     find_First_Missing([2]) == 1",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert     replace_spaces('This is a sample sentence') == 'This%20is%20a%20sample%20sentence','replace_spaces'",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n",
        "test": "assert     Split([]) == []",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    try:\n        if ele[0] > 0:\n            sub.append((ele[0]-1, ele[1]))\n        if ele[1] > 0:\n            sub.append((ele[0], ele[1]-1))\n        if ele[0] < (n-1):\n            sub.append((ele[0]+1, ele[1]))\n        if ele[1] < (n-1):\n            sub.append((ele[0], ele[1]+1))\n    except:\n        pass\n    return(sub)\n",
        "test": "assert     adjac((0,0), [(0,0)]) == [(0,0)]",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "test": "assert     replace_spaces(\"Hello World\") == \"Hello_World\"",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # base cases\n    if num_list == []:\n        return []\n    elif num_list == [1, 2, 0, 4]:\n        return num_list\n    # all other cases\n    zero_count = 0\n    for item in num_list:\n        if item == 0:\n            zero_count += 1\n    # list with zeroes moved to end\n    for _ in range(zero_count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n",
        "test": "assert     move_zero([0, 0, 0, 0]) == [0, 0, 0, 0]",
        "num_ids": 1911,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if(n%2 == 0) : \n        return sum(arr) \n    else : \n        for i in range(n) : \n            for j in range(i+1, n) : \n                print(i, j)\n                xor = arr[i] ^ arr[j] \n                print(xor)\n                arr[i] = xor \n                arr[j] = xor \n        return sum(arr) \n",
        "test": "assert     pair_xor_Sum([1,2,3],4) == 6, 'Not working'",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    new = []\n    while len(iterable)!= 0:\n        new.append(iterable[0])\n        del iterable[0]\n        hq.heapify(iterable)\n    return new\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount: \n        print(\"No Profit and Loss\")\n        return False\n    else: \n        return True\n",
        "test": "assert     noprofit_noloss(1,-1) == False",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 5.74\n    t = float(t)\n    v = float(v)\n",
        "test": "assert     wind_chill(21,20)==28.9",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_of_sample_names = len(sample_names)\n    nam_list = []\n    for i in range(length_of_sample_names):\n        nam_list.append(sample_names[i].strip())\n    nam_list = [i.upper() for i in nam_list]\n    nam_list = [i for i in nam_list if not i.startswith('L')]\n    nam_list = list(map(len,nam_list))\n    return sum(nam_list)\n",
        "test": "assert     sample_nam([]) == 0, 'Empty list'",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_pattern = re.compile('[()]')\n    result = parenthesis_pattern.sub('', items)\n    return result\n",
        "test": "assert     remove_parenthesis(\"\") == \"\"",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (math.factorial(n)/(math.factorial(n-2)*2))\n",
        "test": "assert     is_nonagonal(2) == 1",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #print(\"Enter text:\",text)\n    search_pattern= r'z+'\n    result = re.search(search_pattern, text)\n    #print(\"Pattern is matched:\",result)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle('zz') == True",
        "num_ids": 2907,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    new_arr = []\n    k = k + 1\n    for i in range(len(input)):\n        if i == k:\n            break\n        else:\n            new_arr.append(input[i])\n    new_arr.reverse()\n    print(\"new_arr \", new_arr)\n    return new_arr\n",
        "test": "assert     reverse_Array_Upto_K([], 2) == []",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('a', 1), {'x': 1, 'y': 2}) == ('a', 1, {'x': 1, 'y': 2})",
        "num_ids": 2755,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = []\n    n = len(cost)\n    d = [[0 for i in range(n)] for i in range(n)]\n    #d[0][0] = cost[0][0]\n    for i in range(1,n):\n        d[0][i] = cost[0][i] + d[0][i-1]\n    for i in range(1,n):\n        d[i][0] = cost[i][0] + d[i-1][0]\n    for i in range(1,n):\n        for j in range(1,n):\n            d[i][j] = cost[i][j] + min(d[i-1][j], d[i][j-1])\n    paths.append(d[n-1][n-1])\n    return max(paths)\n",
        "test": "assert ",
        "num_ids": 2362,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data_filtered = {}\n    for key, val in students.items():\n        if val[0] > h and val[1] > w:\n            data_filtered[key] = val\n    return data_filtered\n",
        "test": "assert     filter_data({'Kamil':(1.8,80.2), 'Andrii':(1.65,78.5), 'Daniel':(1.68,75.5)}, 1.65, 65) == {'Kamil':(1.8,80.2), 'Daniel':(1.68,75.5)}",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #mapped = {}\n    #for i, val in enumerate(nums1):\n    #    mapped[val] = i\n    #return len(list(filter(lambda x: nums1[x] == nums2[x], mapped.values())))\n    '''\n    the above can be solved much more efficiently by using Counter objects.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,1,1,1,1], [1,1,1,1,1]) == 5",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to int\n    base = int(base)\n    # calculate power and return\n    return base ** power\n",
        "test": "assert     power_base_sum(5, 1) == 5",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if type(text1)!= str:\n        return None\n",
        "test": "assert     extract_quotation(\"Incorrect input\") == None",
        "num_ids": 3003,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n",
        "test": "assert     multiply_elements((2, 3, 4, 5)) == (2, 3, 4, 5, 10, 15, 20, 25, 30, 35)",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    i = 0\n    while i < len(lst1):\n        lst1[i] += lst2[i]\n        i += 1\n    return lst1\n",
        "test": "assert     (sum_list([],[]    ) == []), \"Wrong answer: the function should return an empty list\"",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    print(nums)\n    i = 1\n    while i < len(nums):\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r*(r+h)*math.pi/3\n",
        "test": "assert     lateralsurface_cone(0,1) == 0",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[\\t\\n\\s,'.:]\", \":\", text)\n",
        "test": "assert     replace_specialchar(\"Joe:saw:Bob:hear:Mary:saw:him\") == \"Joe:saw:Bob:hear:Mary:saw:him\"",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([], 0) == -1",
        "num_ids": 1400,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    if n==1:\n        return arr[0]\n    else:\n        max_num = -10\n        for i in range(n):\n            curr_num = arr[i]\n            curr_sum = 0\n            for j in range(i,n):\n                curr_sum += arr[j]\n                if max_num<curr_sum:\n                    max_num = curr_sum\n            print(curr_num,curr_sum,max_num)\n        return max_num\n    ",
        "test": "assert     sum_Of_Subarray_Prod([1, 2, 3]) == 6, \"should be 6\"",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #code here\n    \n    n = n & ((1 << n.bit_length()) - 1)\n    return n\n",
        "test": "assert     set_middle_bits(0) == 0",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
        "test": "assert     left_insertion([1,2,3], 2) == 1",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        if re.match(r'^[aeiouAEIOU]*$',string):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     check_str('A') == True",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n * n + geometric_sum(n - 1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = 0\n    if n == 1:\n        return 1\n    for i in range(2,n+1):\n        res = i\n    return res\n",
        "test": "assert     find_Index(4) == 4",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n",
        "test": "assert     tuple_to_dict((1, 2)) == {1: 2}",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\n",
        "test": "assert     all_Characters_Same(\"a\") == True, \"One Character\"",
        "num_ids": 1323,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side*(side-1)*(side-2)/6)\nprint(area_tetrahedron(4))\n",
        "test": "assert     area_tetrahedron(1) == 0",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 110,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1, 2, 3], 0) == [1, 2, 3]",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "test": "assert     check_none((None, True, None, None)) == True, \"check_none() should return True if there are any None values.\"",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return map(lambda x: x, range(startnum, endnum))\n    \nprint(list(divisible_by_digits(10,20)))\n",
        "test": "assert divisible_by_digits(startnum = 1, endnum = 9) == [[1, 2, 3, 4, 5, 6, 7, 8, 9],\\",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<0 or r>=1:\n        return None\n    if a<0 or a>=2*math.pi:\n        return None\n    return 2*math.pi*r*r*(a/360)\n",
        "test": "assert sector_area(5,360) == None, \"Expected None but got %f\" %sector_area(5,360)",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    k = len(Z)\n    \n    dp = [[-1 for _ in range(k+1)] for _ in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(k+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1] == Z[i-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][k]\n",
        "test": "assert     lcs_of_three(X = 'ABCBDAB', Y = 'ABCDABB', Z = 'ABCDABB') == 'ABCDABB'",
        "num_ids": 2414,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub('([a-zA-Z])\\1+', r'\\1 ', str1)\n    return str1\n",
        "test": "assert     capital_words_spaces('aa_') == 'aa_'",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        nums.append(i)\n    nums_sorted = sorted(nums)\n    nums_sorted = list(map(str, nums_sorted))\n    return nums_sorted\n",
        "test": "assert sort_numeric_strings([\"1\", \"2\", \"3\", \"4\"]) == [\"1\", \"2\", \"3\", \"4\"]",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n",
        "test": "assert     add_tuple([], (10, 20)) == None, \"should be None\"",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left <= len(arr) - 1 and arr[left] < arr[i]:\n        return False\n    if right <= len(arr) - 1 and arr[right] < arr[i]:\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([10,20,5,1,50,3], False) == False",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    s = 0\n    num = 0\n    for i in range(n): \n        s = (2*s + 1) % 1000000007 \n        num = num + s\n    return num\n",
        "test": "assert     jacobsthal_num(0)    == 0",
        "num_ids": 3502,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list)\n    res = []\n    for i in range(K):\n        res.append(test_list[i])\n    return res\n",
        "test": "assert     min_k([(3, 5), (3, 2), (1, 3), (2, 4), (2, 5), (0, 1, 2)], 2) == (0, 1, 2)",
        "num_ids": 1244,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    a = list(map(set, zip(l1, l2, l3)))\n    lst = []\n    for i in range(len(l1)):\n        if len(set(a[0]).intersection(set(a[1])).intersection(set(a[2])))!= 0:\n            lst.append(l1[i])\n    return lst\n",
        "test": "assert         extract_index_list([1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]) ==     [1, 2]",
        "num_ids": 1885,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert     second_smallest([-1, 0, 0, 1]) == 0",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.search(r\"a[a-z]*b\",text))\n",
        "test": "assert     text_match_zero_one(\"aab\")",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #trivial\n    if len(test_list)==0:\n        return 0\n    #special cases\n    if len(test_list)==1:\n        return 0\n    if len(test_list)==2:\n        if test_list[0]==test_list[1]:\n            return 1\n        else:\n            return 0\n    #data structures to store the string\n    test_list_s = []\n    test_list_s.append(test_list[0])\n    test_list_s.append(test_list[1])\n    test_list_s.sort()\n    if test_list_s[0]!=test_list_s[1]:\n        return 0\n    else:\n        if test_list_s[0]==test_list_s[1]:\n            return 1\n        else:\n            return 0\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {}\n    \nprint(unique_sublists([[1,2],2,3,4]))\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal('12') == True",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # count = 0\n    # for i in range(0,len(arr)):\n    #     if arr[i] not in arr[i+1:len(arr)]:\n    #         count += 1\n    # if count == len(arr) - 1:\n    #     return True\n    # else:\n    #     return False\n    arr = set(arr)\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element([1,1,2,3,2,4,5,6]) == False, 'exception raised'",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(12) == True",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[1]-arr[0]\n    for i in range(n-1):\n        diff = arr[i+1]-arr[i]\n        if(diff<min_diff):\n            min_diff = diff\n    return min_diff\n    \ndef minimum_diff_pair(arr,n):\n    '''\n    Given an array of integers, arr, find the pair of integers whose sum is\n    the smallest. The pair is defined as a set of two integers in arr whose sum is equal to a specified target.\n    '''\n    arr.sort()\n    min_diff = find_min_diff(arr,n)\n    return (min_diff,arr[0]+min_diff)\n",
        "test": "assert     find_min_diff([1,2,3], 3) == 1",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    result = 0\n    for i in str:\n        if i in '1234567890':\n            result += 1\n    print(result)\n    return result\n",
        "test": "assert     number_ctr('123') == 3",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    pol = 1\n    temp = 1\n    for i in range(2, n + 1):\n        if(i%2==0):\n            temp = 2\n        else:\n            temp = 1\n        pol = temp + pol\n    return pol\n",
        "test": "assert     is_polite(1) == 1",
        "num_ids": 1621,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l=[]\n    for i in range(len(l1)-1):\n        l.append([l1[i],l1[i+1]])\n    return l\n",
        "test": "assert     pair_wise([1,2,3]) == [[1,2], [2,3]]",
        "num_ids": 1384,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 110,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pair_count += 1\n    return pair_count\n",
        "test": "assert     get_pairs_count([1, 5, 10, 40], 10) == 0, \"get_pairs_count : Wrong output\"",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1=set(li1)\n    li2=set(li2)\n    li3=li1-li2\n    li3=list(li3)\n    li3.sort()\n    return li3\n    \n",
        "test": "assert     Diff([1,2,3],[1,2]) == [3], \"Diff should return the elements present in only one list\"",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1\n    sum = 0\n    while num < n :\n        sum = sum + num**4\n        num = num + 2\n    return sum\nodd_num_sum(4)\n",
        "test": "assert     odd_num_sum(3) == 27",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Write your code here\n    stack = []\n    brace_parentheses = {\n    '{':'}',\n    '[':']',\n    '(':')'\n    }\n    \n    exp_lst = deque(exp)\n    for i in exp_lst:\n        if i in brace_parentheses.keys():\n            stack.append(i)\n        elif i in brace_parentheses.values():\n            if len(stack) == 0:\n                return False\n            else:\n                last_item = stack.pop()\n                if brace_parentheses[last_item]!= i:\n                    return False\n    return len(stack) == 0\n",
        "test": "assert     check_expression(\"(()\") == False",
        "num_ids": 2015,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = []\n    words_removed = []\n    for x in test_str.split():\n        words.append(x)\n    for x in range(len(words)):\n        if len(words[x]) == K:\n            words_removed.append(words.pop(x))\n    return \" \".join(words_removed)\n",
        "test": "assert     remove_length('hello', 4) == ''",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # findall() - returns all matches as a list of strings\n    # string.find() - returns -1 if no match else returns the index of first match\n    # findall() - returns all matches as a list of strings\n    # re.findall(pattern,string) - returns a list of all matches\n    # re.finditer(pattern,string) - returns an iterator\n    # findall() - returns all matches as a list of strings\n    # re.finditer(pattern,string) - returns an iterator\n    m = re.finditer(pattern,text)\n    #for i in m:\n    #    print(i)\n    \n    \n    for i in m:\n        print(i)\n        #print(i.start())\n        #print(i.end())\n        #print(i.span())\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    r = re.finditer(pattern,text)\n    #print(r)\n    \n    for i in r:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re1(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    r = re.finditer(pattern,text)\n    #print(r)\n    \n    for i in r:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re6(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re7(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re8(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re9(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    fo",
        "test": "assert occurance_substring('','a') == None",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    nums_odd = []\n    for i in range(0,len(nums)):\n        if (nums[i] % 2!= 0):\n            nums_odd.append(nums[i])\n    for i in range(0,len(nums_odd)):\n        if (nums_odd[i] % 2!= 0):\n            count += 1\n    if (count == 0):\n        return False\n    else:\n        return True\n",
        "test": "assert     odd_position([1,2,3,4]) == True",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    res = 0\n    for char in test_str:\n        if char in 'aeiou':\n            res += 1\n    return res\n",
        "test": "assert     count_vowels('aa') == 2",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = set(arr)\n    y = sum(x)\n    return y\n",
        "test": "assert     find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 55, 'Not working'",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1)\n    result = []\n    for k,v in groups:\n        result.append(list(v))\n    return result\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 1426,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for i in list1:\n        if tuple(i) not in dictionary:\n            dictionary[tuple(i)] = 1\n        else:\n            dictionary[tuple(i)] += 1\n    return dictionary\n",
        "test": "assert     unique_sublists([[]]) == {(): 1}",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_combinations=[]\n    for i in test_list:\n        for j in combinations(i,2):\n            test_combinations.append(j)\n    return test_combinations\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    if n == 0 or n == 1 : \n        return count\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            count += 2\n    if (int(math.sqrt(n)) + 1) ** 2 == n :\n        count -= 1\n    return count\n",
        "test": "assert     count_divisors(0) == 0, \"Zero should have no divisors\"",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        if i % 2!= 0:\n            ans += arr[i]\n    return ans\n",
        "test": "assert     odd_length_sum([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == -3",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_ = float(r)\n    g_ = float(g)\n    b_ = float(b)\n    if r_ == 0 and g_ == 0 and b_ == 0:\n        return 0, 0, 0\n    r_ /= 255.0\n    g_ /= 255.0\n    b_ /= 255.0\n    max_ = max(r_, g_, b_)\n    min_ = min(r_, g_, b_)\n    diff_ = max_ - min_\n    delta = max_ - min_\n    if max_ == r_:\n        h = 0.0 + ((g_ - b_) / delta)\n    elif max_ == g_:\n        h = 1.0 + ((b_ - r_) / delta)\n    else:\n        h = 2.0 + ((r_ - g_) / delta)\n    h *= 60\n    if h < 0:\n        h += 360\n    elif h > 360:\n        h -= 360\n    if diff_ == 0:\n        s = 0\n    else:\n        s = delta / diff_\n    v = max_\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0), 'RGB -> HSV: incorrect answer'",
        "num_ids": 2085,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(0,len(list1)):\n        if list1[i]%2==0:\n            product*=list1[i]\n    for i in range(0,len(list1)):\n        if list1[i]%2!=0:\n            product*=list1[i]\n    return product\n",
        "test": "assert     mul_even_odd([1,2,3,4,5]) == 120, \"Wrong output\"",
        "num_ids": 1353,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(\"(\",\"\")\n    test_str = test_str.replace(\")\",\"\")\n    test_str = test_str.replace(\",\",\"\")\n    return tuple(map(int,test_str.split()))\n",
        "test": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)-1\n    if len(a) == 0:\n        return hi\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return lo\n    \n    \n",
        "test": "assert     right_insertion(['A','B','C'], 'A') == 0",
        "num_ids": 1337,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('ab', text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_three('') == False, \"Test 0: testcase 2 Failed\"",
        "num_ids": 2617,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n    return tuple(test_list)\n",
        "test": "assert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c')",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums = sorted(nums)\n    return all(num%2 == 0 for index,num in enumerate(nums) if index%2 == 0)\n",
        "test": "assert     even_position([0,1,2,3,4,5,6,7]) == True",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return_list = []\n    for i in test_tup:\n        if type(i) == tuple:\n            return_list.append(i)\n        else:\n            return_list.append(i)\n    return tuple(return_list)\n",
        "test": "assert     remove_nested((1,2,3,4,5,6,7,8)) == (1,2,3,4,5,6,7,8)",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count=0\n    for i in input_list:\n        if type(i)==list:\n            list_count+=1\n    return list_count\n",
        "test": "assert     count_list([[1,2,3],[4,5,6],[7,8,9,10]])==3",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==[]:\n        return -1\n    if arr==[x]:\n        return 0\n    if x>arr[len(arr)-1]:\n        return len(arr)\n    if x<arr[0]:\n        return 0\n    low,high=0,len(arr)-1\n    while low<high:\n        mid=(low+high)//2\n        if x>arr[mid]:\n            low=mid+1\n        elif x<arr[mid]:\n            high=mid-1\n        else:\n            if mid==0 or arr[mid-1]!=x:\n                return mid\n            else:\n                high=mid-1\n    return low\n",
        "test": "assert     last([10,15,20,25,30],25) == 3",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return bool(re.match(r'a[a-z0-9]*b', text))\n",
        "test": "assert     text_starta_endb('startsb') == False, 'Should return False'",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for i in dict.items():\n        sum_of_items = sum_of_items + i[1]\n    return sum_of_items\n",
        "test": "assert     return_sum({}) == 0, 'empty dictionary'",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    result = 0\n    i = 0\n    while i < n:\n        if i % 2!= 0:\n            result += i\n        i += 1\n    return result\n",
        "test": "assert     sum_odd(1) == 0 ",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & (2**32 - 1)\n",
        "test": "assert ",
        "num_ids": 2382,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "test": "assert     remove_all_spaces(\"\") == \"\", \"invalid\"",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #Write your code here\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert     test_three_equal(3,4,5) == 0, 'Wrong Answer'",
        "num_ids": 915,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    #if arr is already sorted we return 0\n    if arr == sorted(arr):\n        return 0\n    #if arr is not sorted we need to sort\n    i = 0\n    while i < n-1:\n        if arr[i] < arr[i+1]:\n            break\n        i += 1\n    j = n-1\n    while j > i:\n        if arr[j] > arr[j-1]:\n            break\n        j -= 1\n    #i is the first element smaller than j\n    return i+1 + count_rotation(arr[i+1:j])\n",
        "test": "assert count_rotation([]) == 0",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n**0.5)\n    return x*x == n\n",
        "test": "assert     is_perfect_square(11) == False, \"11 is not a perfect square\"",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr:\n        if arr[0] % 2 == 0:\n            return True\n        else:\n            return is_product_even(arr[1:])\n    else:\n        return False\n",
        "test": "assert is_product_even([2,4,6,8,10]) == True",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    min_num = None\n    max_sum = None\n    for l in lists:\n        if min_num == None or min_num > l:\n            min_num = l\n        if max_sum == None or max_sum < l:\n            max_sum = l\n    return [min_num, max_sum]\n",
        "test": "assert     max_sum_list([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]",
        "num_ids": 1166,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    dict={}\n    if len(test_str)==0:\n        return 0\n    for i in range(len(test_str)):\n        if test_str[i] in dict:\n            dict[test_str[i]]+=1\n        else:\n            dict[test_str[i]]=1\n    max_val=0\n    for j in dict:\n        if max_val<dict[j]:\n            max_val=dict[j]\n    return max_val\n",
        "test": "assert     max_run_uppercase(\"Z\") == 1, \"WRONG\"",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "test": "assert     first_odd([1,2,3,4,5,6,7,8,9,10]) == 1",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_K([(1,3), (3,1), (1,5), (4,5)], 5) == False",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        if len(test_tup1) == len(test_tup2):\n            return all(x<y for x, y in zip(test_tup1, test_tup2))\n        else:\n            raise ValueError(\"Tuple lengths don't match\")\n    else:\n        raise TypeError(\"Inputs should be tuples\")\n",
        "test": "assert     check_smaller((-1,-2,-3), (4,3,2)) == True",
        "num_ids": 1051,
        "indeed": false
    }
]