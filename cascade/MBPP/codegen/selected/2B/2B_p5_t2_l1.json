[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result\n",
        "test": "assert     similar_elements([1,2,3],[3,2,1]) == True, 'Function does not work properly'",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert is_not_prime(5) == True, \"5 should be prime\"",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return list(map(lambda x: x[0],hq.nlargest(n,nums)))\n",
        "test": "assert     heap_queue_largest([],1) == []",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x=str(x)\n    if len(x) == 0:\n        return False\n    if len(x) == 1:\n        return False\n    if len(x) == 2:\n        return True\n    if len(x) >= 3:\n        if x[0] == x[1]:\n            return is_Power_Of_Two(x[1:])\n        else:\n            return is_Power_Of_Two(x[1:]) or is_Power_Of_Two(x[2:])\n",
        "test": "assert     is_Power_Of_Two(3) == False, \"3 is not a power of 2\"",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for word in text.split(' '):\n        if len(word) >= 4:\n            res.append(word)\n    return res\n",
        "test": "assert ",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n",
        "test": "assert square_nums([1,2,3,4]) == [1,4,9,16], 'Function did not work correctly'",
        "num_ids": 207,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    str = list(str)\n    str.sort()\n    print('The original string is:',str)\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count+=1\n        else:\n            break\n    return count\nprint(find_Rotations('abc'))\nprint(find_Rotations('abd'))\n",
        "test": "assert ",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch, \"\")\n    s=s.replace(ch, \"\")\n    return s\n",
        "test": "assert     remove_Occ('hello','') == 'hello' ",
        "num_ids": 2332,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = len(M)\n    if l == 1:\n        return M\n",
        "test": "assert     sort_matrix([[1, 2, 0, 3], ",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n",
        "test": "assert     find_Volume(1,2,3) == 6, \"incorrect\"",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]',text) and re.search(r'\\w',text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore('text_lowercase_underscore')",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 2*a\n",
        "test": "assert     square_perimeter(2) == 4, 'Wrong Answer'",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_characters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    list_of_removed_characters = []\n    for character in string:\n        if character in list_of_characters:\n            list_of_characters.remove(character)\n    \n    for i in list_of_characters:\n        list_of_removed_characters.append(i)\n    return(list_of_removed_characters)\n",
        "test": "assert ",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    #if the array is empty, return false\n    if len(arraynums) == 0:\n        return False\n    \n    #else loop through the array\n    for x in range(len(arraynums)):\n        #check if the index exists in the array and has a value\n        if arraynums.count(arraynums[x]) > 1:\n            return True\n    \n    #if none of the above conditions are met, return false\n    return False\n",
        "test": "assert     test_duplicate(arraynums=[4,4,3,5,1,3,3,2]) == True, \"Should return True if the given array contains any duplicate element\"",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 7 or x > 21:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(15) == False, 'is_woodall should return False for 15'",
        "num_ids": 2295,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (int(str(num)[::-1]))\n    \n    #Please note that the function reverse() returns a reversed string.\n",
        "test": "assert     rev(7) == 7, \"Should be 7\"",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    result = 0\n    for i in arr :\n        if(i > result) :\n            result = i\n    return result\n",
        "test": "assert     find_Max_Num([10, 21, 40, 50, 100]) == 100",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return(x>0 and y<0) or (x<0 and y>0)\n",
        "test": "assert     opposite_Signs(0,0) == False, 'For correct input, output must be false'",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n    ",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        for j in range(i,len(s)):\n            if(int(s[i:j+1])==len(s[i:j+1])):\n                count+=1\n    return count\n",
        "test": "assert     count_Substrings('') == 0",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_num:\n            min_num = xs[i]\n    return min_num\n",
        "test": "assert ",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    print(f\"List length: {len(test_list)}\")\n    if len(test_list) < 2:\n        return\n",
        "test": "assert     max_difference([]) == None, \"Empty list\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l=[]\n    for i in range(0,len(subjectmarks)):\n        l.append(subjectmarks[i][1])\n    l=sorted(l)\n    subjectmarks.sort(key=lambda x: x[1])\n    print(l)\n    print(subjectmarks)\n",
        "test": "assert ",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Store the index of the list in a variable\n    index = 0\n    # Initialize the result to 0\n    result = 0\n    # Iterate over the entire list\n    while index < len(data_list):\n        # If the list is not empty\n        if data_list[index]:\n            # Get the element at that position\n            element = data_list[index]\n            # If the element is a list\n            if isinstance(element, list):\n                # Call the function\n                result += recursive_list_sum(element)\n            # If the element is not a list\n            else:\n                # Add the element at that position to the result\n                result += element\n        # Increment the index\n        index += 1\n    # Return the result\n    return result\n",
        "test": "assert    recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "test": "assert     pos_count([1, 2, 4, 8, 6, -2, -5]) == 5",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n > 2:\n            return helper(n-1) + helper(n-2)\n    return helper(n)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (A[0] >= A[-1]):\n        print(\"{} is monotonic\".format(A))\n        return True\n    else:\n        print(\"{} is not monotonic\".format(A))\n        return False\n",
        "test": "assert     is_Monotonic([1, 2, 2, 4]) == False",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if (len(l) >= len(s)):\n        for i in range(len(s)):\n            if (s[i]!= l[i]):\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert not is_sublist([[1, 2], [1, 2], [1, 2]], [[1, 2], [1, 2], [1, 2], [1, 2]])",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple1 = Input[0]\n    tuple2 = Input[1]\n    l1 = len(tuple1)\n    l2 = len(tuple2)\n    if l1!= l2:\n        return False\n    else:\n        return True\n",
        "test": "assert     find_equal_tuple([('a',1),('b',2),('c',3)]) == True, \"Should return True\"",
        "num_ids": 2426,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n",
        "test": "assert     comb_sort([1,2,3,4,5,6,7,8,9,10]) == sorted([1,2,3,4,5,6,7,8,9,10])",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n **.5\n    if n - square**2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     dif_Square(0) == True, \"Return True if number is divisible by 1 or 2\"",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors) < len(patterns):\n        return False\n        \n    for i in range(0, len(colors)):\n        pattern = patterns[i]\n        color = colors[i]\n        if (pattern == \"RRR\" and color == \"red\") or (pattern == \"RRR\" and color == \"yellow\") or (pattern == \"RRG\" and color == \"green\") or (pattern == \"GGG\" and color == \"blue\") or (pattern == \"GGR\" and color == \"black\") or (pattern == \"RGG\" and color == \"white\") or (pattern == \"GGR\" and color == \"white\") or (pattern == \"GGB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBR\" and color == \"black\") or (pattern == \"BRG\" and color == \"white\") or (pattern == \"BGR\" and color == \"black\") or (pattern == \"BGB\" and color == \"white\") or (pattern == \"RRB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\"):\n            continue\n        else:\n            return False\n    return True\n        \n    \ndef check_color(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors) < len(patterns):\n        return False\n        \n    for i in range(0, len(colors)):\n        pattern = patterns[i]\n        color = colors[i]\n        if (pattern == \"RRR\" and color == \"red\") or (pattern == \"RRR\" and color == \"yellow\") or (pattern == \"RRG\" and color == \"green\") or (pattern == \"GGG\" and color == \"blue\") or (pattern == \"GGR\" and color == \"black\") or (pattern == \"RGG\" and color == \"white\") or (pattern == \"GGR\" and color == \"white\") or (pattern == \"GGB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBR\" and color == \"black\") or (pattern == \"BRG\" and color == \"white\") or (pattern == \"BGR\" and color == \"black\") or (pattern == \"BGB\" and color == \"white\") or (pattern == \"RRB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\"):\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert     (is_samepatterns([], [] )== True), \"return True if the patterns is empty\"",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    # here we check for number of elements in the given list, if we don't have enough elements in the list, then return\n    if len(test_list) < K:\n        print('Wrong Input, not enough elements in the list')\n        return\n",
        "test": "assert ",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return(n%11 == 0)\n",
        "test": "assert     is_Diff(3) == False, \"is_Diff(3) is not False\"",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n",
        "test": "assert     word_len(\"hello world\") == True, \"wrong\"",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 5:\n        return 1\n    return (3 * n - 2) * (n - 2) + 1\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n",
        "test": "assert     volume_sphere(1) == math.pi * 4 / 3",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in range(len(strr)):\n        res += ord(strr[i])\n    return res % 26\n",
        "test": "assert     get_Char('') == 0",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    nth_num = 0\n    for i in range(2,n+1):\n        nth_num = nth_num + i\n    return nth_num\n",
        "test": "assert     sequence(11) == 27",
        "num_ids": 2485,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculation of Surface Area of a Sphere\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n    \n",
        "test": "assert ",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    else:\n        return 1 + centered_hexagonal_number(n-1) * (3 ** (n - 1) - 1)\n",
        "test": "assert     centered_hexagonal_number(0) == 1",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = {}\n    for k1 in dict1:\n        final_dict[k1] = dict1[k1]\n    for k2 in dict2:\n        final_dict[k2] = dict2[k2]\n    for k3 in dict3:\n        final_dict[k3] = dict3[k3]\n    return final_dict\n",
        "test": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3}, {'a': 1, 'c': 4}) == {'a': 1, 'b': 2, 'c': 3, 'a': 1, 'c': 4}",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for num in list1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return N\n    \n    n = N\n    while n >= 1:\n        n -= 1\n        if n == 0:\n            break\n        else:\n            if abs(n - n % 2) < abs(n - (n + 1) // 2):\n                return n\n    return n\n",
        "test": "assert closest_num(1) == 1",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for words in list1:\n        if len(words)> max_len:\n            max_len = len(words)\n    return max_len\n",
        "test": "assert     len_log([]) == 0, \"input is not a list\"",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n    \n",
        "test": "assert     find_substring('a','a') == True, \"Should be True\"",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 2\n    \n    if count % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert not is_undulating(2)",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == 2:\n        return a*a\n    else:\n        return a*power(a,b-1)\n",
        "test": "assert     power(1, 1) == 1, 'Wrong answer'",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_tuple = (0,9999)\n    for i in range(len(test_list)):\n        if(test_list[i][1] < min_tuple[1]):\n            min_tuple = test_list[i]\n    return min_tuple\n",
        "test": "assert     index_minimum([('A', 1), ('A', 5), ('A', 9), ('A', 3)]) == ('A', 1), 'incorrect'",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    m = lst[0]\n    for i in range(1, l):\n        if len(m) >= len(lst[i]):\n            m = lst[i]\n    return len(m)\n",
        "test": "assert     Find_Min_Length([[],[]]) == 0",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    c = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            c += 1\n    return c\n    \n    \ndef find_max(num1, num2, num3):\n    '''\n    Write a python function to find the max of three integers.\n    '''\n    if num1 > num2 and num1 > num3:\n        return num1\n    elif num2 > num1 and num2 > num3:\n        return num2\n    else:\n        return num3\n    \n    \ndef find_max_key(my_dict):\n    '''\n    Write a python function to find the max value in a dictionary.\n    '''\n    max_key = 0\n    for i in my_dict:\n        if my_dict[i] > max_key:\n            max_key = i\n    return max_key\n    \n    \ndef find_max_sum(num1, num2, num3):\n    '''\n    Write a python function to find the sum of three given integers.\n    '''\n    return num1 + num2 + num3\n    \n    \ndef find_min(num1, num2, num3):\n    '''\n    Write a python function to find the min of three integers.\n    '''\n    if num1 < num2 and num1 < num3:\n        return num1\n    elif num2 < num1 and num2 < num3:\n        return num2\n    else:\n        return num3\n    \n    \ndef find_min_key(my_dict):\n    '''\n    Write a python function to find the minimum value in a dictionary.\n    '''\n    min_key = 0\n    for i in my_dict:\n        if my_dict[i] < min_key:\n            min_key = i\n    return min_key\n    \n    \ndef find_min_sum(num1, num2, num3):\n    '''\n    Write a python function to find the sum of three given integers.\n    '''\n    return num1 + num2 + num3\n    \n    \ndef find_sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of all the divisors of a given integer.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n    \n    \ndef find_sum_of_divisors_greater_than_a_number(n):\n    '''\n    Write a python function to find the sum of all the divisors of a given integer.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i > 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n    \n    \ndef find_sum_of_divisors_squared(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef find_sum_of_divisors_squared_greater_than_a_number(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        if i ** 2 > n:\n            break\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef find_sum_of_divisors_greater_than_a_number_squared(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        if i ** 2 > n:\n            break\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef sum_of_divisors_of_a_number(n):\n    '''\n    Write a python function to find the sum of all the divisors of a given integer.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n    \n    \ndef sum_of_divisors_of_a_number_greater_than_a_number(n):\n    '''\n    Write a python function to find the sum of all the divisors of a given integer.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i > 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n    \n    \ndef sum_of_divisors_of_a_number_squared(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef sum_of_divisors_of_a_number_squared_greater_than_a_number(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        if i ** 2 > n:\n            break\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef sum_of_divisors_of_a_number_squared_greater_than_a_number_squared(n):\n    '''\n    Write a python function to find the sum of all the squares of all the divisors of a given integer.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        if i ** 2 > n:\n            break\n        sum_of_squares += i ** 2\n    return sum_of_squares\n    \n    \ndef count_even_odd_numbers(num):\n    '''\n    Write a python function to count even and odd numbers in a given integer.\n    '''\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n    \n    \ndef count_even_odd_numbers_while_loop(num):\n    '''\n    Write a python function to count even and odd numbers in a given integer.\n    '''\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n    \n    \ndef count_even_odd_numbers_recursive(num):\n    '''\n    Write a python function to count even and odd numbers in a given integer.\n    '''\n    if num < 1:\n        return 0, 0\n    if num % 2 == 0:\n        return 1 + count_even_odd_numbers_recursive(num // 10)\n    else:\n        return 1 + count_even_odd_numbers_recursive(num // 10)\n    \n    \ndef count_even_odd_numbers_recursive_while_loop(num):\n    '''\n    Write a python function to count even and odd numbers in a given integer.\n    '''\n    if num < 1:\n        return 0, 0\n    if num % 2 == 0:\n        return 1 + count_even_odd_numbers_recursive_while_loop(num // 10)\n",
        "test": "assert ",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for element in list1:\n        dictionary[element] = list1.count(element)\n    return dictionary\n",
        "test": "assert ",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    try:\n        if len(numbers) < 1:\n            raise ValueError('The length of the list must be more than 0')\n        multiply = 1\n        for num in numbers:\n            multiply *= num\n        print(f'The result of multiplication is: {multiply}')\n        divide = len(numbers)\n        print(f'The result of division is: {divide}')\n    except ValueError as e:\n        print(e)\n",
        "test": "assert     multiply_num([2,3,4,5]) == 2*3*4*5",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = \"\"\n    while(n):\n        result = str(n % 2) + result\n        n = n // 2\n    return result\n",
        "test": "assert ",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = ''\n    if num < 2:\n        return 2\n",
        "test": "assert     next_smallest_palindrome(1) == 2, 'wrong result'",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n    ",
        "test": "assert     kth_element([4,6,7,3,2,5], 2) == 3",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n",
        "test": "assert     snake_to_camel('camelCase') == 'camelCase'",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    elif m == 1:\n        return 1\n    else:\n        return n * eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n",
        "test": "assert     eulerian_num(1, 2) == 1",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sublist = sorted(sublist)\n        sorted_list.append(sublist)\n    return sorted_list\n",
        "test": "assert     sort_sublists([[], [1], [2], []]) == [[], [1], [2], []]",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x == True])\n",
        "test": "assert     count([]) == 0, 'Empty list count is not 0'",
        "num_ids": 2269,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n",
        "test": "assert     add_lists([1,2], [3,4,5]) == ([1,2,3], [4,5,6])",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1 + num2 + num3)\n",
        "test": "assert     merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n==0):\n        return 1\n    if(n==1):\n        return 2\n    if(n==2):\n        return 4\n    if(n==3):\n        return 6\n    if(n==4):\n        return 8\n    if(n==5):\n        return 10\n    if(n==6):\n        return 12\n    if(n==7):\n        return 14\n    if(n==8):\n        return 16\n    if(n==9):\n        return 18\n    if(n==10):\n        return 20\n    if(n==11):\n        return 22\n    if(n==12):\n        return 24\n    if(n==13):\n        return 26\n    if(n==14):\n        return 28\n    if(n==15):\n        return 30\n    if(n==16):\n        return 32\n    if(n==17):\n        return 34\n    if(n==18):\n        return 36\n    if(n==19):\n        return 38\n    if(n==20):\n        return 40\n    if(n==21):\n        return 42\n    if(n==22):\n        return 44\n    if(n==23):\n        return 46\n    if(n==24):\n        return 48\n    if(n==25):\n        return 50\n    if(n==26):\n        return 52\n    if(n==27):\n        return 54\n    if(n==28):\n        return 56\n    if(n==29):\n        return 58\n    if(n==30):\n        return 60\n    if(n==31):\n        return 62\n    if(n==32):\n        return 64\n    if(n==33):\n        return 66\n    if(n==34):\n        return 68\n    if(n==35):\n        return 70\n    if(n==36):\n        return 72\n    if(n==37):\n        return 74\n    if(n==38):\n        return 76\n    if(n==39):\n        return 78\n    if(n==40):\n        return 80\n    if(n==41):\n        return 82\n    if(n==42):\n        return 84\n    if(n==43):\n        return 86\n    if(n==44):\n        return 88\n    if(n==45):\n        return 90\n    if(n==46):\n        return 92\n    if(n==47):\n        return 94\n    if(n==48):\n        return 96\n    if(n==49):\n        return 98\n    if(n==50):\n        return 100\n    if(n==51):\n        return 102\n    if(n==52):\n        return 104\n    if(n==53):\n        return 106\n    if(n==54):\n        return 108\n    if(n==55):\n        return 110\n    if(n==56):\n        return 112\n    if(n==57):\n        return 114\n    if(n==58):\n        return 116\n    if(n==59):\n        return 118\n    if(n==60):\n        return 120\n    if(n==61):\n        return 122\n    if(n==62):\n        return 124\n    if(n==63):\n        return 126\n    if(n==64):\n        return 128\n    if(n==65):\n        return 130\n    if(n==66):\n        return 132\n    if(n==67):\n        return 134\n    if(n==68):\n        return 136\n    if(n==69):\n        return 138\n    if(n==70):\n        return 140\n    if(n==71):\n        return 142\n    if(n==72):\n        return 144\n    if(n==73):\n        return 146\n    if(n==74):\n        return 148\n    if(n==75):\n        return 150\n    if(n==76):\n        return 152\n    if(n==77):\n        return 154\n    if(n==78):\n        return 156\n    if(n==79):\n        return 158\n    if(n==80):\n        return 160\n    if(n==81):\n        return 162\n    if(n==82):\n        return 164\n    if(n==83):\n        return 166\n    if(n==84):\n        return 168\n    if(n==85):\n        return 170\n    if(n==86):\n        return 172\n    if(n==87):\n        return 174\n    if(n==88):\n        return 176\n    if(n==89):\n        return 178\n    if(n==90):\n        return 180\n    if(n==91):\n        return 182\n    if(n==92):\n        return 184\n    if(n==93):\n        return 186\n    if(n==94):\n        return 188\n    if(n==95):\n        return 190\n    if(n==96):\n        return 192\n    if(n==97):\n        return 194\n    if(n==98):\n        return 196\n    if(n==99):\n        return 198\n    if(n==100):\n        return 200\n    if(n==101):\n        return 202\n    if(n==102):\n        return 204\n    if(n==103):\n        return 206\n    if(n==104):\n        return 208\n    if(n==105):\n        return 210\n    if(n==106):\n        return 212\n    if(n==107):\n        return 214\n    if(n==108):\n        return 216\n    if(n==109):\n        return 218\n    if(n==110):\n        return 220\n    if(n==111):\n        return 222\n    if(n==112):\n        return 224\n    if(n==113):\n        return 226\n    if(n==114):\n        return 228\n    if(n==115):\n        return 230\n    if(n==116):\n        return 232\n    if(n==117):\n        return 234\n    if(n==118):\n        return 236\n    if(n==119):\n        return 238\n    if(n==120):\n        return 240\n    if(n==121):\n        return 242\n    if(n==122):\n        return 244\n    if(n==123):\n        return 246\n    if(n==124):\n        return 248\n    if(n==125):\n        return 250\n    if(n==126):\n        return 252\n    if(n==127):\n        return 254\n    if(n==128):\n        return 256\n    if(n==129):\n        return 258\n    if(n==130):\n        return 260\n    if(n==131):\n        return 262\n    if(n==132):\n        return 264\n    if(n==133):\n        return 266\n    if(n==134):\n        return 268\n    if(n==135):\n        return 270\n    if(n==136):\n        return 272\n    if(n==137):\n        return 274\n    if(n==138):\n        return 276\n    if(n==139):\n        return 278\n    if(n==140):\n        return 280\n    if(n==141):\n        return 282\n    if(n==142):\n        return 284\n    if(n==143):\n        return 286\n    if(n==144):\n        return 288\n    if(n==145):\n        return 290\n    if(n==146):\n        return 292\n    if(n==147):\n        return 294\n    if(n==148):\n        return 296\n    if(n==149):\n        return 298\n    if(n==150):\n        return 300\n    if(n==151):\n        return 302\n    if(n==152):\n        return 304\n    if(n==153):\n        return 306\n    if(n==154):\n        return 308\n    if(n==155):\n        return 310\n    if(n==156):\n        return 312\n    if(n==157):\n        return 314\n    if(n==158):\n        return 316\n    if(n==159):\n        return 318\n    if(n==160):\n        return 320\n    if(n==161):\n        return 322\n    if(n==162):\n        return 324\n    if(n==163):\n        return 326\n    if(n==164):\n        return 328\n    if(n==165):\n        return 330\n    if(n==166):\n    ",
        "test": "assert ",
        "num_ids": 4347,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for element in nestedlist:\n        for e in element:\n            if e in common:\n                common.append(e)\n            else:\n                pass\n    print(common)\ncommon_in_nested_lists([[1, 2], [1, 2], [1, 1, 2]])",
        "test": "assert     common_in_nested_lists([[1,2],[1,2],[1,2]]) == [[1, 2]], \"Common elements in nested lists\"",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(\"123\") == True",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n        else:\n            return True\n",
        "test": "assert     empty_dit([{}, {}, {}, {}]) == True",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert     tuple_to_int([1]) == 1",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in j] for j in test_list]\n",
        "test": "assert     list_to_float([['1','2.3'],['3','-4.3']]) == [[1.0, 2.3], [3.0, -4.3]]",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"this is a string\") == [\"this\", \"is\", \"a\", \"string\"]",
        "num_ids": 115,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None\n",
        "test": "assert     search([10,11,12,13,14,16,16,16,16,16]) == 16",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = list1[0][0]\n    for i in range(len(list1)):\n        if maximum < abs(list1[i][0]):\n            maximum = abs(list1[i][0])\n    return maximum\n    \n",
        "test": "assert ",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(num):\n        if num <= 1:\n            return 0\n        sum_amicable = 0\n        num_sum = 0\n        for i in range(1,num):\n            if sum_amicable + i == num:\n                num_sum += i\n                sum_amicable += i\n            elif sum_amicable + i > num:\n                sum_amicable = sum_amicable + i\n                num_sum += i\n            else:\n                sum_amicable = 0\n                num_sum = 0\n        return sum_amicable + num_sum\n    sum_amicable_numbers = sum_amicable_numbers(limit)\n    return sum_amicable_numbers\n",
        "test": "assert     amicable_numbers_sum(1) == 0",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    temp=a*b\n    if abs(temp.imag)==0:\n        return(cmath.phase(temp))\n    else:\n        return(cmath.phase(temp))\n",
        "test": "assert     angle_complex(0,0) == 0.0",
        "num_ids": 2470,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = len(string)\n    zeros = 0\n    ones = 0\n    max_zeros = 0\n    max_ones = 0\n    for i in range(l):\n        if(string[i] == '0'):\n            zeros += 1\n        else:\n            ones += 1\n        if(zeros > max_zeros):\n            max_zeros = zeros\n        if(ones > max_ones):\n            max_ones = ones\n    return max_zeros - max_ones\n",
        "test": "assert     find_length(\"100\") == 1",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=[]\n    for i in range(1,a+1):\n        if(a%i==0):\n            c.append(i)\n    for i in range(1,b+1):\n        if(b%i==0):\n            c.append(i)\n    c=list(dict.fromkeys(c))\n    print(c)\n    a=len(c)\n    print(a)\n    sum=0\n    for i in range(1,a):\n        if(c[i]==a):\n            sum=sum+a\n    print(sum)\nsum(20,30)",
        "test": "assert ",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(1, 2) == 2",
        "num_ids": 135,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    res = []\n    for i in str.split():\n        if len(i) > n:\n            res.append(i)\n    return res\n",
        "test": "assert ",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return (is_magic_square(my_matrix)\n        and my_matrix == get_magic_square_matrix(my_matrix))\n",
        "test": "assert ",
        "num_ids": 1683,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(lambda: 0)\n    for num in nums:\n        d[num] += 1\n    m = max(d.values())\n    l = []\n    for k, v in d.items():\n        if v == m:\n            l.append(k)\n    return(max(l))\n",
        "test": "assert     max_occurrences([1,2,3,3]) == 3",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    new_string = \"\"\n    for char in str1:\n        if char in vowels:\n            new_string += char\n        else:\n            new_string += '*'\n    return new_string\nprint(reverse_vowels('hello'))",
        "test": "assert     reverse_vowels(\"a\") == \"a\", \"a should be a\"",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert ",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    pos_sum = sum(n for n in nums if n > 0)\n    return pos_sum + sum(n for n in nums if n < 0)\n",
        "test": "assert ",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    total = 1\n    for i in range(1, n + 1):\n        total *= 3 * i + 1\n    return total\n",
        "test": "assert ",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #write your function here\n    zeros, ones = 0, 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n        else:\n            ones += 1\n    return zeros/(zeros+ones)\n",
        "test": "assert ",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count=0\n    while n!=0:\n        count+=1\n        if n%2!=0:\n            return False\n        else:\n            n=n//2\n    if count==1:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(3) == False, \"Error in function is_Sum_Of_Powers_Of_Two\"",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     (circle_circumference(2) == 12.566370614359172), 'Circle circumference is wrong!'",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for sub_list in test_list:\n        for item in sub_list:\n            singly_list.append(item)\n    return singly_list\n",
        "test": "assert     extract_singly([[1, 2, 3], [4, 5]]) == [1, 2, 3, 4, 5]",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                tmp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = tmp\n    return nums\n    \n",
        "test": "assert [1,2,3,4,5] == pancake_sort([1,2,3,4,5])",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count+=1\n    return count\n",
        "test": "assert not count_samepair([1,2,3],[2,3,4],[3,4,5]) == 1, \"3 and 4 should be the same in the same position of three lists\"",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count=0\n    for i in Input:\n        if type(i)==list:\n            list_count=list_count+1\n    return list_count\n",
        "test": "assert     find_lists(([],)) == 1",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if abs(max-arr[i]) > abs(max-arr[i-1]):\n            max = arr[i]\n    return max",
        "test": "assert max_Abs_Diff([1, 2, 3, 4]) == 4",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n    for x in range(1, a + 1):\n        for y in range(1, b + 1):\n            if x * x + y * y == n:\n                return (x, y)\n    return None\n    \n    \nif __name__ == \"__main__\":\n    print(find_solution(1, 1, 5))\n    print(find_solution(1, 1, 4))\n    print(find_solution(1, 2, 4))\n    print(find_solution(1, 3, 4))\n    print(find_solution(2, 1, 5))\n    print(find_solution(2, 1, 4))\n    print(find_solution(2, 2, 4))\n    print(find_solution(2, 3, 4))\n    print(find_solution(3, 1, 5))\n    print(find_solution(3, 1, 4))\n    print(find_solution(3, 2, 4))\n    print(find_solution(3, 3, 4))",
        "test": "assert     find_solution(1, 2, 3) == None",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    if len(list1) > len(list2):\n        for x in range(0, len(list1)):\n            if list1[x] not in list2:\n                result.append(list1[x])\n    else:\n        for x in range(0, len(list2)):\n            if list2[x] not in list1:\n                result.append(list2[x])\n    return result\nprint(remove_elements([1,2,3,4,5,6], [2,5,6]))\n",
        "test": "assert     remove_elements([\"a\",\"b\",\"c\",\"d\"], [\"a\"]) == [\"b\",\"c\",\"d\"]",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n <= 2:\n        return n\n    return n + sum_series(n - 2)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(s) == 0 or len(l) == 0:\n        raise ValueError('Lengths or sides are not correct')\n    n = len(l)\n    area = (s[0] * s[1])/2 * tan(pi/n)\n    return area\n",
        "test": "assert     area_polygon(3, 6) == 14.25",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return (n * (n+1)) / 2 == sum([x for x in range(1, int(math.sqrt(n) + 1)) if n % x == 0])\n",
        "test": "assert div_sum(1) == True,'should return True'",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    from string import ascii_lowercase as alpha\n    \n    str1 = str1.lower()\n    count = {}\n    \n    for ch in str1:\n        count.setdefault(ch, 0)\n        count[ch] += 1\n    return sum(count.values())\n",
        "test": "assert count_char_position(\"\") == 0",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for x in range(0,len(A)):\n        if x+1 == len(A):\n            break\n        if A[x] ^ A[x+1] == 0:\n            count += 1\n    print(count)\n    return count\n",
        "test": "assert     find_even_pair([1,2,3,4,5,6,7,8]) == 0, \"Should be 0\"",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # take 2^i and check till the number is greater than or equal to n\n    # if it is greater than or equal to n, then return the 2^i\n    \n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 = 2**power_of_2\n        if power_of_2 >= n:\n            return power_of_2\n",
        "test": "assert    next_power_of_2(1) == 2",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "test": "assert     frequency([1,2,1,2,1,3], 1) == 3",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert     sum_range_list([1,2,3,4,5],0,4) == 15, 'expected 15'",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\ndef sides_of_pentagon(a):\n    '''\n    Write a function to find the number of sides in a pentagon.\n    '''\n    return 5\ndef area_of_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon.\n    '''\n    return a**2/4\ndef sides_of_triangle(a,b,c):\n    '''\n    Write a function to find the number of sides in a triangle.\n    '''\n    return a+b+c\ndef perimeter_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return a+b+c\ndef sides_of_quadrilateral(a,b,c,d):\n    '''\n    Write a function to find the number of sides in a quadrilateral.\n    '''\n    return a+b+c+d\ndef area_of_quadrilateral(a,b,c,d):\n    '''\n    Write a function to find the area of a regular quadrilateral.\n    '''\n    return (a*b)*0.5\ndef sides_of_square(a,b,c,d):\n    '''\n    Write a function to find the number of sides in a square.\n    '''\n    return a+b+c+d\ndef area_of_square(a,b,c,d):\n    '''\n    Write a function to find the area of a regular square.\n    '''\n    return a*b\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return 2*math.pi*r\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*r**2\ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*math.pi*r**3/3\ndef area_of_cylinder(h,r):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return 2*h*r\ndef volume_of_cylinder(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return h*r**3\ndef area_of_cone(h,r,l):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return 2*math.pi*r*l+2*math.pi*r*h\ndef volume_of_cone(h,r,l):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return h*r*l\ndef perimeter_of_rectangle(w,h):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return 2*(w+h)\ndef area_of_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef area_of_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return (a+b)*c/2+d\ndef volume_of_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return ((a+b)*c)/2+d\ndef perimeter_of_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    return 2*(a+c)\ndef area_of_parallelogram(a,b,c):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return a*b\ndef perimeter_of_square_pyramid(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a square pyramid.\n    '''\n    return a+b+c+d\ndef area_of_square_pyramid(a,b,c,d):\n    '''\n    Write a function to find the area of a square pyramid.\n    '''\n    return a*b\ndef perimeter_of_parallogram(a,b,c,d,e):\n    '''\n    Write a function to find the perimeter of a parallogram.\n    '''\n    return a+b+c+d+e\ndef area_of_parallogram(a,b,c,d,e):\n    '''\n    Write a function to find the area of a parallogram.\n    '''\n    return a*b\ndef perimeter_of_trapezoid_pyramid(a,b,c,d,e):\n    '''\n    Write a function to find the perimeter of a trapezoid pyramid.\n    '''\n    return a+b+c+d+e\ndef area_of_trapezoid_pyramid(a,b,c,d,e):\n    '''\n    Write a function to find the area of a trapezoid pyramid.\n    '''\n    return a*b+b*c+c*d+d*e\ndef perimeter_of_pyramid(a,b,c,d,e):\n    '''\n    Write a function to find the perimeter of a pyramid.\n    '''\n    return a+b+c+d+e\ndef area_of_pyramid(a,b,c,d,e):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    return a*b+b*c+c*d+d*e\ndef perimeter_of_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    return a+b+c+d\ndef area_of_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return (a+b)*c/2\ndef perimeter_of_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return a+b+c\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return math.sqrt(a*b*c/2)\ndef perimeter_of_equilateral_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of a equilateral triangle.\n    '''\n    return a+b+c\ndef area_of_equilateral_triangle(a,b,c):\n    '''\n    Write a function to find the area of a equilateral triangle.\n    '''\n    return a*b/2\ndef perimeter_of_incline_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of an incline triangle.\n    '''\n    return a+b+c\ndef area_of_incline_triangle(a,b,c):\n    '''\n    Write a function to find the area of an incline triangle.\n    '''\n    return (a*b)/2\ndef perimeter_of_inverted_triangle(a,b,c):\n    '''\n    Write a function to find the perimeter of an inverted triangle.\n    '''\n    return a+b+c\ndef area_of_inverted_triangle(a,b,c):\n    '''\n    Write a function to find the area of an inverted triangle.\n    '''\n    return math.sqrt((a+b)**2-a*c**2)\ndef perimeter_of_square_pyramid(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a square pyramid.\n    '''\n    return a+",
        "test": "assert ",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == 'd':\n            count += 1\n        if i =='s':\n            count += 1\n        if i == 't':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('abcde') == 1",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_check = False\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == type(test_tuple[0]):\n            type_check = True\n        else:\n            type_check = False\n            break\n    return type_check\n",
        "test": "assert     check_type((1,2,3,4,5)) == True, \"All the elements are of the same type\"",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_majority([1,2,3,2,2,2,2,2,2,2],10,2) == True",
        "num_ids": 2351,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += 1\n        n &= (n - 1) #n = n & (n-1)\n    return count\n    \nprint(count_Set_Bits(1000)) \n",
        "test": "assert     count_Set_Bits(0) == 0, \"Wrong result (0)\"",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for i in range(0,len(str)):\n        if i%2 == 0:\n            lst.append(str[i])\n    return \"\".join(lst)\n    \n",
        "test": "assert odd_values_string('python') == 'thy'",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    elif b<a:\n        if b<c:\n            return b\n        else:\n            return c\n    else:\n        if c<a:\n            return a\n        else:\n            return c\nprint(min_of_three(4,3,1))\n",
        "test": "assert     min_of_three(a=1,b=2,c=3)==1, 'Failed'",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        count = 0\n        while n:\n            n = n >> 1\n            count += 1\n        if count == r:\n            return True\n        else:\n            return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(20,10,20) == False, \"it should be false\"",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0,n):\n        while arr[i]<0:\n            if i==0:\n                arr.insert(i,arr.pop(i+1))\n                return arr\n            else:\n                arr.insert(i,arr.pop(i-1))\n    return arr\n",
        "test": "assert     re_arrange_array([1, 2, -2, 1], 1) == [-2, 1, 1, 2], \"Wrong output\"",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=\"\"\n    for i in range(len(str1)):\n        if str1[i]==\" \":\n            str2+=\"{}\".format(char)\n        else:\n            str2+=str1[i]\n    return str2\n",
        "test": "assert     replace_blank('','') ==''",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = heapq.nlargest(n,list1)\n    return list2\n",
        "test": "assert     larg_nnum([1,2,3,4,5,6,7,8,9], 5) == [9,8,7,6,5]",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = PI*r**2\n    volume = PI*r*r*h\n    return (area,volume)\n",
        "test": "assert lateralsuface_cylinder(2,2) == 20",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 110,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    #result = n\n    #n = n | (n << 1)\n    #n = n + 1\n    #n = (n & 0b111111)\n    #n = (n << 1)\n    #return result & 0b11111\n    \n    return (n | (n << 1)) & 0b111111\n    \ndef even_bit_set_number_alternative(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = n\n    while (n & 0b1)!= 0:\n        n = (n << 1)\n        n = n & 0b11111111\n        result = result | n\n    return result\n    \ndef even_bit_set_number_alternative_2(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = (n << 1) & 0b111111\n    return n\n    \ndef even_bit_set_number_alternative_3(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = (n << 1)\n    n = (n & 0b11111111)\n    return n\n    \ndef even_bit_set_number_alternative_4(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & 0b111111)\n    \ndef even_bit_set_number_alternative_5(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n << 1) & 0b111111\n    \ndef even_bit_set_number_alternative_6(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n & 0b111111\n    return n << 1\n",
        "test": "assert ",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    new_dict = dict()\n    \n    for i in range(len(test_list)):\n        val = test_list[i]\n        if val in new_dict.keys():\n            new_dict[val] = new_dict.get(val) + 1\n        else:\n            new_dict[val] = 1\n    return new_dict\n",
        "test": "assert     check_occurences([]) == {}, \"Input: {} | Expected: {} | Actual: {}\".format([], {}, check_occurences([]))",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        count += 1\n    return count\n",
        "test": "assert     number_of_substrings('aaaaa') == 5",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = 1\n    for num in range(m, m-n, -1):\n        result *= num\n    return result\n",
        "test": "assert     get_total_number_of_sequences(1,2) == 0",
        "num_ids": 2414,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # If list2 is empty\n    if not list2:\n        return list1\n",
        "test": "assert     replace_list([1,2,3],[\"a\",\"b\",\"c\"]) == None",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # check if str is empty\n    if str1 == '':\n        return 0\n    # get the length of the string\n    n = len(str1)\n    # get a character\n    s = str1[0]\n    # count the characters\n    count = 1\n    for i in range(1, n):\n        # if characters are different, add to the count\n        if str1[i]!= s:\n            count += 1\n            s = str1[i]\n    return count\n",
        "test": "assert     count_charac(\"\") == 0",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N == 1):\n        return N+1\n    if(N == 2):\n        return N+2\n    for i in range(1, N//2+1):\n        if(N - i*i == 1):\n            return N-i+1\n",
        "test": "assert ",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_array = []\n        max_array.append(max(arr[0], max_sum(arr[1:]) + arr[0]))\n        max_array.append(max_sum(arr[1:]))\n        return max(max_array)\n        \n",
        "test": "assert ",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**0.5\n",
        "test": "assert     babylonian_squareroot(1) == 1",
        "num_ids": 494,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n    \n    n = len(str)\n    dp = [[False] * n for _ in range(n)] \n    \n    # Base Cases \n    # The longest palindrome will start at the center index \n    # of the string \n    for i in range(n): \n        dp[i][i] = True\n        \n    # This loop will iterate till n//2. \n    # At each iteration, it will check if \n    # the substring from i to j is palindrome, \n    # if it is palindrome then we can extend \n    # the palindrome centered at i, to the right \n    # of j as it is now (dp[i+1][j-1]) \n    for i in range(n): \n        for j in range(i + 1, n): \n            # The current substring is palindrome \n            if str[i] == str[j] and dp[i+1][j-1]: \n                dp[i][j] = True\n    \n    # Taking the length of the longest palindrome \n    # centered around any index of the string \n    max_len = 1\n    \n    # Search for maximum length palindrome\n    # starting from any index of string. \n    # If we were to search for maximum \n    # length palindrome, we would get the \n    # same result as the above loop \n    for i in range(n-1): \n        for j in range(i + 1, n): \n            if dp[i][j] and j - i + 1 > max_len: \n                max_len = j - i + 1\n                \n    # We need to print the length \n    # of the longest palindrome centered \n    # at any index of string. \n    return max_len \n",
        "test": "assert lps(\"tactcoa\") == 6",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/x for x in range(1,n+1)])\n    \nprint(harmonic_sum(1)) # 1\nprint(harmonic_sum(2)) # 1.5\nprint(harmonic_sum(3)) # 2.0\nprint(harmonic_sum(4)) # 2.8\nprint(harmonic_sum(5)) # 3.166666666666666\nprint(harmonic_sum(6)) # 3.333333333333333\nprint(harmonic_sum(7)) # 4.0\nprint(harmonic_sum(8)) # 4.5\nprint(harmonic_sum(9)) # 5.0\nprint(harmonic_sum(10)) # 5.5\nprint(harmonic_sum(11)) # 6.0\nprint(harmonic_sum(12)) # 6.0\nprint(harmonic_sum(13)) # 6.5\nprint(harmonic_sum(14)) # 7.0\nprint(harmonic_sum(15)) # 7.5\nprint(harmonic_sum(16)) # 8.0\nprint(harmonic_sum(17)) # 8.5\nprint(harmonic_sum(18)) # 9.0\nprint(harmonic_sum(19)) # 9.5\nprint(harmonic_sum(20)) # 10.0\nprint(harmonic_sum(21)) # 10.5\nprint(harmonic_sum(22)) # 11.0\nprint(harmonic_sum(23)) # 11.5\nprint(harmonic_sum(24)) # 12.0\nprint(harmonic_sum(25)) # 12.5\nprint(harmonic_sum(26)) # 13.0\nprint(harmonic_sum(27)) # 13.5\nprint(harmonic_sum(28)) # 14.0\nprint(harmonic_sum(29)) # 14.5\nprint(harmonic_sum(30)) # 15.0\nprint(harmonic_sum(31)) # 15.5\nprint(harmonic_sum(32)) # 16.0\nprint(harmonic_sum(33)) # 16.5\nprint(harmonic_sum(34)) # 17.0\nprint(harmonic_sum(35)) # 17.5\nprint(harmonic_sum(36)) # 18.0\nprint(harmonic_sum(37)) # 18.5\nprint(harmonic_sum(38)) # 19.0\nprint(harmonic_sum(39)) # 19.5\nprint(harmonic_sum(40)) # 20.0\nprint(harmonic_sum(41)) # 20.5\nprint(harmonic_sum(42)) # 21.0\nprint(harmonic_sum(43)) # 21.5\nprint(harmonic_sum(44)) # 22.0\nprint(harmonic_sum(45)) # 22.5\nprint(harmonic_sum(46)) # 23.0\nprint(harmonic_sum(47)) # 23.5\nprint(harmonic_sum(48)) # 24.0\nprint(harmonic_sum(49)) # 24.5\nprint(harmonic_sum(50)) # 25.0\nprint(harmonic_sum(51)) # 25.5\nprint(harmonic_sum(52)) # 26.0\nprint(harmonic_sum(53)) # 26.5\nprint(harmonic_sum(54)) # 27.0\nprint(harmonic_sum(55)) # 27.5\nprint(harmonic_sum(56)) # 28.0\nprint(harmonic_sum(57)) # 28.5\nprint(harmonic_sum(58)) # 29.0\nprint(harmonic_sum(59)) # 29.5\nprint(harmonic_sum(60)) # 30.0\nprint(harmonic_sum(61)) # 30.5\nprint(harmonic_sum(62)) # 31.0\nprint(harmonic_sum(63)) # 31.5\nprint(harmonic_sum(64)) # 32.0\nprint(harmonic_sum(65)) # 32.5\nprint(harmonic_sum(66)) # 33.0\nprint(harmonic_sum(67)) # 33.5\nprint(harmonic_sum(68)) # 34.0\nprint(harmonic_sum(69)) # 34.5\nprint(harmonic_sum(70)) # 35.0\nprint(harmonic_sum(71)) # 35.5\nprint(harmonic_sum(72)) # 36.0\nprint(harmonic_sum(73)) # 36.5\nprint(harmonic_sum(74)) # 37.0\nprint(harmonic_sum(75)) # 37.5\nprint(harmonic_sum(76)) # 38.0\nprint(harmonic_sum(77)) # 38.5\nprint(harmonic_sum(78)) # 39.0\nprint(harmonic_sum(79)) # 39.5\nprint(harmonic_sum(80)) # 40.0\nprint(harmonic_sum(81)) # 40.5\nprint(harmonic_sum(82)) # 41.0\nprint(harmonic_sum(83)) # 41.5\nprint(harmonic_sum(84)) # 42.0\nprint(harmonic_sum(85)) # 42.5\nprint(harmonic_sum(86)) # 43.0\nprint(harmonic_sum(87)) # 43.5\nprint(harmonic_sum(88)) # 44.0\nprint(harmonic_sum(89)) # 44.5\nprint(harmonic_sum(90)) # 45.0\nprint(harmonic_sum(91)) # 45.5\nprint(harmonic_sum(92)) # 46.0\nprint(harmonic_sum(93)) # 46.5\nprint(harmonic_sum(94)) # 47.0\nprint(harmonic_sum(95)) # 47.5\nprint(harmonic_sum(96)) # 48.0\nprint(harmonic_sum(97)) # 48.5\nprint(harmonic_sum(98)) # 49.0\nprint(harmonic_sum(99)) # 49.5\nprint(harmonic_sum(100)) # 50.0\nprint(harmonic_sum(101)) # 50.5\nprint(harmonic_sum(102)) # 51.0\nprint(harmonic_sum(103)) # 51.5\nprint(harmonic_sum(104)) # 52.0\nprint(harmonic_sum(105)) # 52.5\nprint(harmonic_sum(106)) # 53.0\nprint(harmonic_sum(107)) # 53.5\nprint(harmonic_sum(108)) # 54.0\nprint(harmonic_sum(109)) # 54.5\nprint(harmonic_sum(110)) # 55.0\nprint(harmonic_sum(111)) # 55.5\nprint(harmonic_sum(112)) # 56.0\nprint(harmonic_sum(113)) # 56.5\nprint(harmonic_sum(114)) # 57.0\nprint(harmonic_sum(115)) # 57.5\nprint(harmonic_sum(116)) # 58.0\nprint(harmonic_sum(117)) # 58.5\nprint(harmonic_sum(118)) # 59.0\nprint(harmonic_sum(119)) # 59.5\nprint(harmonic_sum(120)) # 60.0\nprint(harmonic_sum(121)) # 60.5\nprint(harmonic_sum(122)) # 61.0\nprint(harmonic_sum(123)) # 61.5\nprint(harmonic_sum(124)) # 62.0\nprint(harmonic_sum(125)) # 62.5\nprint(harmonic_sum(126)) # 63.0\nprint(harmonic_sum(127)) # 63.5\nprint(harmonic_sum(128)) # 64.0\nprint(harmonic_sum(129)) # 64.5\nprint(harmonic_sum(130)) # 65.0\nprint(harmonic_sum(131)) # 65.5\nprint(harmonic_sum(132)) # 66.0\nprint(harmonic_sum(133)) # 66.5\nprint(harmonic_sum(134)) # 67.0\nprint(harmonic_sum(135)) # 67.5\nprint(harmonic_sum(136)) # 68.0\nprint(harmonic_sum(137)) # 68.5\nprint(harmonic_sum(138)) # 69.0\nprint(harmonic_sum(139)) # 69.5\nprint(harmonic_sum(140)) # 70.0\nprint(harmonic_sum(141)) # 70.5\nprint(harmonic_sum(142)) # 7",
        "test": "assert     harmonic_sum(0) == 0, \"harmonic_sum should return 0 for n-1 = 0\"",
        "num_ids": 2462,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i = 0\n    j = 0\n    intersection = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return intersection\n",
        "test": "assert     intersection_array([2,3,4,5,6,7,8], [3,4,5,6,8]) == [3,4,5,6,8], 'incorrect array'",
        "num_ids": 1129,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3),0) == 0",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(len(list)):\n        list.insert(i,list.pop(0))\n    return list\n",
        "test": "assert     insert_element(['Python'], 'Program') == ['Program', 'Python']",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    for i in range(len(numbers)):\n        real = numbers[i].real\n        imag = numbers[i].imag\n        \n        r = math.hypot(real,imag)\n        t = cmath.atan2(imag,real)\n        \n        output = (r,t)\n        \n        if i < len(numbers)-1:\n            output = output + (numbers[i+1])\n            \n        numbers[i] = output\n        \n    return numbers\n        \nprint(convert([2+3j, 4-2j, 6+5j, 5+6j]))    \nprint(convert([0,1,2,3]))    \nprint(convert([3+0j, 4+5j, 5+6j, 6+7j]))\nprint(convert([4+0j, 5+1j, 6+0j, 7+0j]))\nprint(convert([-2+3j, -4+2j, -6+5j, -5+6j]))\nprint(convert([1+0j, 2+1j, 3+0j, 4+1j]))",
        "test": "assert ",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n",
        "test": "assert count_integer([1,2,3,4,5,6]) == 6",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [[i for i in range(n)]]\n    \n    \n    '''\n    # TODO: Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    # Hint: Use the itertools library and combinations functions.\n    def combinations(l, n):\n        return ([tuple(i) for i in list(combinations(l,n))])\n",
        "test": "assert     combinations_colors([1, 2, 3, 4, 5, 6], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n    return count\n",
        "test": "assert     count_Primes_nums(1) == 0",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert     maximize_elements((5,6), (10,20)) == (10,20)",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 0\n    while True:\n        i += 1\n        if check_prime(n):\n            return n\n        n = newman_shanks_williams_prime(n)\n",
        "test": "assert ",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return(test_tup1[0] / test_tup1[1], test_tup2[0] / test_tup2[1])\n",
        "test": "assert     division_elements((5, 5, 5), (5, 5, 5)) == (1, 1, 1), \\",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Splits the list into two parts\n    a = list1[:L]\n    b = list1[L:]\n    return a, b\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return(int(h_age/7))\n",
        "test": "assert dog_age(0) == 0",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # ans = []\n    # for i in range(0, len(S), step):\n    #     ans.append(S[i:i+step])\n    # return ans\n    # OPTION 2\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "test": "assert     list_split([1,2,3,4,5], 1) == [[1], [2], [3], [4], [5]]",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return ((6*l)**2)\n",
        "test": "assert ",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n",
        "test": "assert     square_Sum(0) == 0, \"square_Sum([]) should return 0\"",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n*(n+1))//2\nprint(find_star_num(5))\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 113,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = []\n    for i in range(len(arr)):\n        if i%2 == 0:\n            evens.append(arr[i])\n    return sum(evens)\n",
        "test": "assert ",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i**5)\n    return sum\n",
        "test": "assert     even_Power_Sum(1) == 0",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[-1] for tup in test_list]\n    \ndef filter_rear_extract(test_list, function):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing only those tuples whose rear element satisfies a given function.\n    '''\n    return [tup for tup in test_list if function(tup[-1])]\n",
        "test": "assert     rear_extract([(\"1\", 2), (\"2\", 3), (\"3\", 4)]) == [2, 3, 4]",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n",
        "test": "assert     substract_elements((1,2,3,4), (1,2,3,4)) == (0,0,0,0)",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return (math.factorial(n) / (math.factorial(2) * math.factorial(n-2)))\n",
        "test": "assert     even_binomial_Coeff_Sum(5) == 10  # 10",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi, sqrt\n    volume = pi*r**2*h\n    return volume\n",
        "test": "assert volume_cylinder(1,1) == 3.141592653589793",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n",
        "test": "assert     dict_filter({'a':1,'b':2,'c':3},1) == {'a':1,'b':2,'c':3}",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    number_of_first_elements = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            number_of_first_elements += 1\n    return number_of_first_elements\n",
        "test": "assert     count_first_elements((7,1,3)) == 1",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "test": "assert(sequential_search([5,7,3,8,2,9], 5) == (True, 0)), \"sequential search should return a tuple (True, 0) if the element is found\"",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #code here\n    \n    #if unique list\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([\"physics\",\"chemistry\",\"maths\",\"english\"]) == True, \"Passed\"",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    lst = []\n    for i in range(len(nums1)):\n        lst.append(nums1[i]-nums2[i])\n    return lst\n",
        "test": "assert     sub_list([1,2,3],[2,2]) == [1,0,-1], \"sub_list([1,2,3],[2,2]): incorrect\"",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_n = str(n)\n    # for i in range(len(str_n)):\n    #     if str_n.count(str_n[i]) > 1:\n    #         print(\"valid\")\n    #     else:\n    #         print(\"invalid\")\n    # print(str_n.count(str_n[i]))\n    cnt = 1\n    for i in range(len(str_n)):\n        if str_n.count(str_n[i]) > cnt:\n            print(\"invalid\")\n            return False\n        else:\n            cnt = str_n.count(str_n[i])\n    print(\"valid\")\n    return True\n    ",
        "test": "assert     validate(123) == True",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        for i in list:\n            if i == element:\n                return True\n    else:\n        return False\n    \n",
        "test": "assert     check_element([1], None) == False, \"check_element([1], None) = False\"",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #check string of type str\n    #check if the string contains the two and three 'b's\n    if re.search('^[b]bbb[b]b',text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('aabb') == False",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = -9999999999999999999999999\n    for i in range(n-k+1):\n        s = 0\n        for j in range(k):\n            s += a[i+j]\n        if ans < s:\n            ans = s\n    return ans\n",
        "test": "assert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 5], 4, 3) == 9",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    if (n == 1):\n        return 1\n    \n    return (n*(n+1))//2\n",
        "test": "assert     square_Sum(1) == 1, \"square_Sum is not working correctly\"",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n",
        "test": "assert ",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    \n    # Edge cases\n    if k == 2:\n        if n >= 3:\n            return (n*(n-1))//2\n        else:\n            return 0\n    \n    if k == 0:\n        return 0\n    \n    if k > 2:\n        ways = count_no_of_ways(n, k-1)\n    \n    # Base case\n    if k == 1:\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            return 0\n    \n    # If n > 2\n    if n > 1:\n        ways = ways + count_no_of_ways(n-1, 1)\n    \n    # Else k == 2\n    if n == 2:\n        return (n*(n-1))//2\n    else:\n        return ways\n",
        "test": "assert     count_no_of_ways(4, 3) == 6",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return(n//m)\n",
        "test": "assert     find(4, 3) == 1, \"Test 1 Failed\"",
        "num_ids": 174,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*h)/2\n",
        "test": "assert     otherside_rightangle(2,2) == 2.0",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n",
        "test": "assert     max_val([2,3,4]) == 4, 'wrong'",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([1 for i in range(1, number+1) if number % i == 0])\n",
        "test": "assert     sum_div(1) == 1, 'failed'",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                res += 1\n    return res\n",
        "test": "assert     get_Inv_Count([0,1,2,3,5]) == 0, 'Wrong result for get_Inv_Count([0,1,2,3,5])'",
        "num_ids": 615,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for l in list1:\n        if type(l) == list:\n            for i in flatten_list(l):\n                flat_list.append(i)\n        else:\n            flat_list.append(l)\n    return flat_list\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    for item in stdata:\n        for i, v in enumerate(item):\n            max_sum[i] = max(v, max_sum[i])\n    \n    max_sum = {k: v for k, v in sorted(max_sum.items(), key=lambda item: item[1])}\n    return max_sum\n",
        "test": "assert max_aggregate(",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    for i in range(0, n+1):\n        s1 = 0\n        s2 = 0\n        for j in range(i):\n            s1 += 1\n            s2 += 1\n        if (s1 + s2) == (1 << i):\n            res += 1\n    return res\n",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    dic = []\n    for k,v in d.items():\n        if isinstance(v,dict):\n            dic.append(k)\n        elif isinstance(v,list):\n            for i in v:\n                dic.append(k)\n    return len(dic)\n    ",
        "test": "assert     dict_depth({}) == 0, 'Empty dictionary has depth 0'",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = index -1\n    rotations = rotations % len(arr)\n    if(rotations == index) :\n        return arr[index]\n    else :\n        if(rotations < index) :\n            for i in range(rotations,index) :\n                arr[i],arr[i+1] = arr[i+1],arr[i]\n            return arr[index]\n        else :\n            for i in range(rotations,index+1) :\n                arr[i],arr[i-1] = arr[i-1],arr[i]\n            return arr[index]\n",
        "test": "assert     find_Element([1,2,3,4,5,6],[[1,2,3,4,5,6,1,2,3,4,5,6]],4,1) == 1",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    match = []\n    for word in words:\n        if word[0] == 'p':\n            match.append(word)\n    return match\n",
        "test": "assert start_withp([\"word\", \"p\", \"w\", \"t\"]) == [\"word\", \"p\"]",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    if k > n:\n        return 0\n    \n    max_ending_here = 0\n    max_so_far = float('-inf')\n    \n    for i in range(index, n):\n        if a[i] < a[index]:\n            max_ending_here = max(max_ending_here, max_sum_increasing_subseq(a, n, i+1, k))\n        max_so_far = max(max_so_far, max_ending_here + a[i])\n        \n    return max_so_far\n",
        "test": "assert     max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4) == 5",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0]+tuplex[1][:m]+tuplex[2][n:]\n",
        "test": "assert     colon_tuplex(('a',),(3,),(4,5,6) ) == (('a',),3,4,5,6)",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Python program to find largest of three number\n    \n    # sort the given list\n    nums1.sort()\n    nums2.sort()\n",
        "test": "assert ",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    return b\n    ",
        "test": "assert     maximum(3,4) == 4",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #new_tuple = str1.split(\" \")\n    #return new_tuple\n    return tuple(str1)\n    \n",
        "test": "assert     string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary_rep = bin(n).split('b')[1]\n    binary_rep = binary_rep[:-1]\n    binary_rep = '0' + binary_rep\n    return int(binary_rep, 2)\n",
        "test": "assert     set_left_most_unset_bit(1) == 0",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume\n",
        "test": "assert     volume_cone(0,1) == 0, 'Wrong answer for r = 0, h = 1'",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        print('Input number is Negative or Zero.')\n    else:\n        #Power of 2 is 2^a\n        #Power of 2 is n/2 \n        #Power of 2 is n//2 \n        #Power of 2 is n/2 - 1 \n        #Power of 2 is n//2 - 1 \n        #Power of 2 is n//4\n        #Power of 2 is n//4 - 1 \n        #Power of 2 is n//8\n        #Power of 2 is n//8 - 1 \n        #Power of 2 is n//16\n        #Power of 2 is n//16 - 1 \n        #Power of 2 is n//32\n        #Power of 2 is n//32 - 1 \n        #Power of 2 is n//64\n        #Power of 2 is n//64 - 1 \n        #Power of 2 is n//128\n        #Power of 2 is n//128 - 1 \n        #Power of 2 is n//256\n        #Power of 2 is n//256 - 1 \n        #Power of 2 is n//512\n        #Power of 2 is n//512 - 1 \n        #Power of 2 is n//1024\n        #Power of 2 is n//1024 - 1 \n        #Power of 2 is n//2048\n        #Power of 2 is n//2048 - 1 \n        #Power of 2 is n//4096\n        #Power of 2 is n//4096 - 1 \n        #Power of 2 is n//8192\n        #Power of 2 is n//8192 - 1 \n        #Power of 2 is n//16384\n        #Power of 2 is n//16384 - 1 \n        #Power of 2 is n//32768\n        #Power of 2 is n//32768 - 1 \n        #Power of 2 is n//65536\n        #Power of 2 is n//65536 - 1 \n        #Power of 2 is n//131072\n        #Power of 2 is n//131072 - 1 \n        #Power of 2 is n//262144\n        #Power of 2 is n//262144 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of 2 is n//8388608 - 1 \n        #Power of 2 is n//16777216\n        #Power of 2 is n//16777216 - 1 \n        #Power of 2 is n//33554432\n        #Power of 2 is n//33554432 - 1 \n        #Power of 2 is n//67108864\n        #Power of 2 is n//67108864 - 1 \n        #Power of 2 is n//134217728\n        #Power of 2 is n//134217728 - 1 \n        #Power of 2 is n//268435456\n        #Power of 2 is n//268435456 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of 2 is n//8388608 - 1 \n        #Power of 2 is n//16777216\n        #Power of 2 is n//16777216 - 1 \n        #Power of 2 is n//33554432\n        #Power of 2 is n//33554432 - 1 \n        #Power of 2 is n//67108864\n        #Power of 2 is n//67108864 - 1 \n        #Power of 2 is n//134217728\n        #Power of 2 is n//134217728 - 1 \n        #Power of 2 is n//268435456\n        #Power of 2 is n//268435456 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of 2 is n//8388608 - 1 \n        #Power of 2 is n//16777216\n        #Power of 2 is n//16777216 - 1 \n        #Power of 2 is n//33554432\n        #Power of 2 is n//33554432 - 1 \n        #Power of 2 is n//67108864\n        #Power of 2 is n//67108864 - 1 \n        #Power of 2 is n//134217728\n        #Power of 2 is n//134217728 - 1 \n        #Power of 2 is n//268435456\n        #Power of 2 is n//268435456 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of 2 is n//8388608 - 1 \n        #Power of 2 is n//16777216\n        #Power of 2 is n//16777216 - 1 \n        #Power of 2 is n//33554432\n        #Power of 2 is n//33554432 - 1 \n        #Power of 2 is n//67108864\n        #Power of 2 is n//67108864 - 1 \n        #Power of 2 is n//134217728\n        #Power of 2 is n//134217728 - 1 \n        #Power of 2 is n//268435456\n        #Power of 2 is n//268435456 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of 2 is n//8388608 - 1 \n        #Power of 2 is n//16777216\n        #Power of 2 is n//16777216 - 1 \n        #Power of 2 is n//33554432\n        #Power of 2 is n//33554432 - 1 \n        #Power of 2 is n//67108864\n        #Power of 2 is n//67108864 - 1 \n        #Power of 2 is n//134217728\n        #Power of 2 is n//134217728 - 1 \n        #Power of 2 is n//268435456\n        #Power of 2 is n//268435456 - 1 \n        #Power of 2 is n//524288\n        #Power of 2 is n//524288 - 1 \n        #Power of 2 is n//1048576\n        #Power of 2 is n//1048576 - 1 \n        #Power of 2 is n//2097152\n        #Power of 2 is n//2097152 - 1 \n        #Power of 2 is n//4194304\n        #Power of 2 is n//4194304 - 1 \n        #Power of 2 is n//8388608\n        #Power of ",
        "test": "assert ",
        "num_ids": 2291,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string % i, end = \"\")\n",
        "test": "assert     add_string(['%s', '%s'], '%s') == 'and %s'",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    i = 0\n    for x in l1:\n        sub_dict = {}\n        for y in l2:\n            sub_dict[y] = l3[i]\n            i += 1\n        dictionary[x] = sub_dict\n    return dictionary\n    \ndef convert_to_list_of_dict(dictionary):\n    '''\n    Write a function to convert a dictionary into nested list.\n    '''\n    l = []\n    for key in dictionary.keys():\n        l.append(key)\n        l.append(dictionary[key])\n    return l\n    \ndef check_password(password, is_password_strong):\n    '''\n    Write a function that checks whether the password is strong or not.\n    '''\n    if not is_password_strong:\n        return False\n    elif len(password) < 8:\n        return False\n    elif 'i' in password and 'o' in password or 'a' in password and 'e' in password or 'o' in password and 'a' in password or 'e' in password and 'i' in password:\n        return False\n    elif 'a' in password or 'e' in password or 'i' in password or 'o' in password or 'u' in password:\n        return False\n    else:\n        return True\n        \ndef palindrome_number(n):\n    '''\n    Write a function that finds the largest palindrome number that can be made by multiplying two prime numbers.\n    '''\n    list = []\n    while n >= 1:\n        list.append(n)\n        n = n // 2\n    i = 0\n    while i < len(list):\n        if i == 0:\n            if list[i] > list[i + 1]:\n                return list[i]\n        if i + 1 == len(list):\n            return list[i]\n        if list[i] * list[i + 1] > list[i + 1] * list[i]:\n            return list[i]\n        i += 1\n        \ndef prime_factors(n):\n    '''\n    Write a function to print all prime factors of a given number.\n    '''\n    while n % 2 == 0:\n        print(2, end ='')\n        n = n // 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            print(i, end ='')\n            n = n // i\n        else:\n            i += 2\n            \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n        \ndef print_elements(dictionary):\n    '''\n    Write a function to print all the dictionary keys and values.\n    '''\n    for key in dictionary.keys():\n        print(key, dictionary[key])\n        \ndef find_max_score(scores):\n    '''\n    Write a function that takes a list of scores and return the highest score.\n    '''\n    max_score = scores[0]\n    for score in scores:\n        if score > max_score:\n            max_score = score\n    return max_score\n        \ndef divide_integer(n):\n    '''\n    Write a function that takes a positive integer and returns the integer that is the smallest power of two that is greater than the number.\n    '''\n    if n == 1:\n        return 1\n    i = 1\n    while i * i <= n:\n        i = i * 2\n    return i - 1\n",
        "test": "assert     convert_list_dictionary([1,2,3], ['a','b','c'], ['d','e','f']) == {1: {'a': 'd'}, 2: {'b': 'e'}, 3: {'c': 'e'}, 4: {'d': 'f'}}",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert     get_max_sum(2) == 2",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n",
        "test": "assert     max_length_list([1, 2, 3, 4, 5]) == 5, 'Wrong result'",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not (test_tup in test_tup[1:])\n",
        "test": "assert     check_distinct([1,2,3]) == True, \"Wrong answer, expected True\"",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_set = set(str1)\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return \"No First non-repeating character\"\n",
        "test": "assert first_non_repeating_character('voom') == 'v'",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n",
        "test": "assert     check_char(\"hi\") == False",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_of_num = [a,b,c]\n    \n    median = float(sorted(list_of_num)[1])\n",
        "test": "assert ",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += digit(num)\n    return result\n    \ndef sum_of_digits_optimized(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(lambda x: digit(x), nums))\n    \ndef digit(n):\n    '''\n    Returns the digit of n\n    '''\n    return n - (n // 10) * 10\n    \ndef sum_of_digits_recursive(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return 0\n    if nums[0] < 0 or nums[0] >= 10:\n        return 0\n    return nums[0] + sum_of_digits_recursive(nums[1:])\n    \ndef sum_of_digits_optimized_recursive(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return 0\n    if nums[0] < 0 or nums[0] >= 10:\n        return 0\n    return nums[0] + sum_of_digits_optimized_recursive(nums[1:])\n    \n    \nif __name__ == '__main__':\n    import time\n    \n    nums = []\n    for i in range(10000):\n        nums.append(i)\n    t0 = time.clock()\n    sum_of_digits(nums)\n    t1 = time.clock()\n    print(t1 - t0)\n    \n    t2 = time.clock()\n    sum_of_digits_optimized(nums)\n    t3 = time.clock()\n    print(t3 - t2)\n    \n    t4 = time.clock()\n    sum_of_digits_recursive(nums)\n    t5 = time.clock()\n    print(t5 - t4)\n    \n    t6 = time.clock()\n    sum_of_digits_optimized_recursive(nums)\n    t7 = time.clock()\n    print(t7 - t6)\n    \n",
        "test": "assert ",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return ((test_tup1[0]^test_tup2[0]), (test_tup1[1]^test_tup2[1]))\n",
        "test": "assert     bitwise_xor((0,0), (1,1)) == (1,1)",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result_set = set()\n    for x in test_list:\n        if x in result_set:\n            continue\n        else:\n            result_set.add(x)\n    return len(result_set)\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # tuple1 = (0,1,2,3,4)\n    # tuple2 = (5,6,7,8,9)\n    \n    # tuple1 = (10,11,12,13,14)\n    # tuple2 = (15,16,17,18,19)\n    \n    # tuple1 = (20,21,22,23,24)\n    # tuple2 = (25,26,27,28,29)\n    #\n    # return tuple1 + tuple2\n    \n    # Alternative Solution (Using zip function)\n    # return tuple(x+y for x,y in zip(test_tup1,test_tup2))\n    \n    # Alternative Solution (Using sum function)\n    # return sum(x for x in test_tup1) + sum(x for x in test_tup2)\n    \n    # Alternative Solution (Using unpacking the tuples)\n    # return tuple(sum(tup) for tup in zip(test_tup1, test_tup2))\n    \n    # Alternative Solution (Using reduce function)\n    # from functools import reduce\n    # return reduce(lambda x,y: x + y, test_tup1) + reduce(lambda x,y: x + y, test_tup2)\n    \n    # Alternative Solution (Using reduce function)\n    # from functools import reduce\n    # return reduce(lambda x,y: (x,y) if x < y else (y,x),test_tup1) + reduce(lambda x,y: (x,y) if x < y else (y,x),test_tup2)\n    \n    # Another Alternative Solution\n    return tuple(test_tup1[i] + test_tup2[i] for i in range(len(test_tup1)))\n    \n    \ntest_tup1 = (0,1,2,3,4)\ntest_tup2 = (5,6,7,8,9)\ntest_tup3 = (10,11,12,13,14)\ntest_tup4 = (15,16,17,18,19)\ntest_tup5 = (20,21,22,23,24)\ntest_tup6 = (25,26,27,28,29)\n",
        "test": "assert     add_nested_tuples((), ()) == ()",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "test": "assert minimum(1,4) == 1",
        "num_ids": 159,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1: \n        if x in tuplex: \n            return True \n    return False \n",
        "test": "assert     check_tuplex(tuplex=('c','a','b'),tuple1=('c','a','b')) == True, \"Expected True\"",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return ((x & 1) == 0)\n",
        "test": "assert     find_Parity(1) == False",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n_sorted = sorted(n, reverse=True)\n    n_rearranged = int(''.join(n_sorted))\n    return n_rearranged\n",
        "test": "assert     rearrange_bigger(12) == 21, \"Wrong\"",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # nums1 = [1,3]\n    # nums2 = [2]\n    # k = 2\n    # output = [1,2]\n    res = []\n    q = []\n    heapq.heapify(q)\n    for num in nums1:\n        heapq.heappush(q, (num, nums2[0]))\n    for _ in range(k):\n        res.append((heapq.heappop(q)[1], heapq.heappop(q)[0]))\n    return res\n",
        "test": "assert     k_smallest_pairs([1,2,3,4], [2,3,4], 2) == [1,2], \"error 2\"",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    for i in list1:\n        for j in i:\n            if j < min_product:\n                min_product = j\n    return min_product\n",
        "test": "assert     min_product_tuple([(2,3),(4,2),(5,2)]) == (4,2)",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # copy list into another variable\n    minval = listval[0]\n    # traverse each element in list\n    for i in range(1, len(listval)):\n        # if current element is smaller than previous element\n        if listval[i] < minval:\n            # reassign current minimum element to the previous minimum element\n            minval = listval[i]\n    # return the minimum element\n    return minval\n    #\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1, \"Error!\"",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    string = word.split(\"_\")\n    string_new = []\n    for word in string:\n        word_new = word[0].upper() + word[1:]\n        string_new.append(word_new)\n    return \"\".join(string_new)\n",
        "test": "assert     snake_to_camel(\"first_name\") == \"FirstName\", \"First Name is not Snake case\"",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Remove even numbers\n    for i in range(0, len(l)):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n    return l\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "test": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == (5, 6)",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    \n    if list1.intersection(list2):\n        return True\n    else:\n        return False\n",
        "test": "assert     overlapping([1,3,2],    [3,4,1,5,6,7]) == True, \"Mistake found\"",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product_max = 0\n    product_min = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product_max = max(arr[i]*arr[j], product_max)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product_min = min(arr[i]*arr[j], product_min)\n    print(\"Max: \", product_max)\n    print(\"Min: \", product_min)\n",
        "test": "assert max_Product([1,5,2,4,3,8,6]) == (5,8)",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        if Input[i][0] in lst:\n            continue\n        else:\n            lst.append(Input[i][0])\n    \n    return lst\n",
        "test": "assert     group_tuples([(1,2,3),(2,3,4),(3,4,5),(5,6,7)]) == 3",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n",
        "test": "assert     Find_Max([]) == None",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i],2)\n        list1_sum += list1[i]\n    print(f\"The sum of the rounded numbers in the list is: {list1_sum}\")\n    print(f\"The length of the list is: {len(list1)}\")\n    print(f\"The sum of the list rounded to 2 decimal places is: {round(list1_sum,2)}\")\n",
        "test": "assert ",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum+=i**3\n    print(\"cube sum of first \",n,\" natural numbers :\",sum)\n    return sum\n",
        "test": "assert     cube_Sum(0) == 0, \"The input is not correct.\"",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = '&'\n    return test_str.join(test_tup)\n",
        "test": "assert     concatenate_tuple([]) == \"\"",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i ** 3\n    return sum / n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear(('a', 'b', 'c', 'd', 'e')) == 'e'",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list(['a', 'b', 'c', 'd', 'e'], 'd') == 1",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_list = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y, m, d = map(int, dt.split('-'))\n    return '{:02d}-{:02d}-{:04d}'.format(d, m, y)\n",
        "test": "assert     change_date_format(\"2011-12-01\") == \"01-12-2011\"",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 0:\n        return my_list\n    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    \n    return my_list\n",
        "test": "assert     shell_sort([10, 5, 2, 3]) ==    [2, 3, 5, 10] ",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = []\n    tup2 = []\n    for i in range(len(test_tup1)):\n        tup1.append(test_tup1[i][0])\n        tup2.append(test_tup2[i][0])\n    for i in range(len(tup1)):\n        if tup1[i]!= tup2[i]:\n            return False\n    return True\n",
        "test": "assert     and_tuples(tup1, tup3) == (False, False)",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b ** 2) - (4 * a * c)\n    if discriminant > 0: \n        x1 = (-b - sqrt(discriminant))/(2*a)\n        x2 = (-b + sqrt(discriminant))/(2*a)\n        return (x1, x2)\n    elif discriminant == 0: \n        x = (-b)/(2*a)\n        return x\n    else: \n        return None\n        \nprint(parabola_directrix(2, 3, 1))\nprint(parabola_directrix(2, -3, 1))\n",
        "test": "assert     parabola_directrix(1, 1, -4) == (1, -2)",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    result = set1.intersection(set2)\n    if len(result) == 0:\n        return False\n    return True\n",
        "test": "assert     common_element([1,2,3,4], [1,2,3,5,6]) == True, \"output should be true\"",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 <= base2:\n        return base1+base2/2-height\n    else:\n        return base1+base2/2+height\n",
        "test": "assert     median_trapezium(1,2,1) == 1",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([1, 2, 3, 4, 5], 2) == True, 'incorrect'",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.match(r'a{1,}b',text))\n",
        "test": "assert     text_match_one(\"abab\") == True, \"Test case 1 failed\"",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    #return int(n % 10)\n",
        "test": "assert     last_Digit(5) == 5",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(-i)\n    return list2\nlist2 = [-4,-2,-1,0,5,10]\nprint(neg_nos(list2))\n",
        "test": "assert     neg_nos([1, 2, 3, 4, 5]) == [-1, -2, -3, -4, -5]",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #str1 = list(str1)\n    #i = 0\n    #while i < len(str1):\n        #if str1[i] == '1':\n            #str1.remove(str1[i])\n        #else:\n            #i += 1\n    return ''.join(str1)\n",
        "test": "assert     remove_odd('') == ''",
        "num_ids": 2557,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0]:\n                count += 1\n            elif test_list[i][0] > test_list[j][0]:\n                count += 1\n            else:\n                if test_list[i][1] < test_list[j][1]:\n                    count += 1\n                elif test_list[i][1] > test_list[j][1]:\n                    count += 1\n                else:\n                    count += 1\n    return count\n",
        "test": "assert     count_bidirectional([('a','b'),('b','a')]) == 1",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = 0\n    for i in range(len(L)):\n        res += L[i]\n    return res\n",
        "test": "assert     multiple_to_single([1,2,3,4,5]) == 15",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #for searching adverb\n    adverb_pattern = re.compile(r'\\b[Rr]e?\\w+n?g[aae]\\b', re.IGNORECASE)\n    #print(adverb_pattern.findall(text))\n    adverb_positions = []\n    for x in re.finditer(adverb_pattern, text):\n        adverb_positions.append(x.start())\n    return adverb_positions\n",
        "test": "assert     find_adverb_position(\"Let's go. Let's go.\") == {'let': 0, 'go': 2}",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6*l**2\n    return surfacearea\n    \ndef surfacearea_octagon(length):\n    '''\n    Write a function to find the surface area of an octagon of a given size.\n    '''\n    surfacearea = length**2*3**0.5\n    return surfacearea\n    \ndef surfacearea_hexagon(length):\n    '''\n    Write a function to find the surface area of a hexagon of a given size.\n    '''\n    surfacearea = 2*length**2*3**0.5\n    return surfacearea\n",
        "test": "assert ",
        "num_ids": 155,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum = 0\n    length = len(nums)\n    for i in nums:\n        if i > 0:\n            sum += 1\n    return sum / length\n",
        "test": "assert positive_count([-1,-1,-1,-1,-1,-1])==0",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -1\n    for i in range(len(list1)):\n        if (list1[i] < 0) and (list1[i] > max):\n            max = list1[i]\n",
        "test": "assert     largest_neg([]) == None",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return []\n    if len(test_list[0]) <= K:\n        return test_list\n    else:\n        return trim_tuple(list(zip(*test_list[:K]))), trim_tuple(list(zip(*test_list[K+1:])))\n",
        "test": "assert         trim_tuple([(1, 2), (1, 2, 3, 4), (5, 6, 7), (8, 9, 10, 11)], 2) ==     [(1, 2), (1, 2, 3, 4), (5, 6, 7), (8, 9, 10, 11)]",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if type(test_tup1) is not tuple:\n        raise ValueError('test_tup1 must be a tuple')\n    if type(test_tup2) is not tuple:\n        raise ValueError('test_tup2 must be a tuple')\n    \n    try:\n        test_tup1 = list(test_tup1)\n        test_tup2 = list(test_tup2)\n        lst_1 = list(map(int, test_tup1))\n        lst_2 = list(map(int, test_tup2))\n        index = 0\n        while index < len(lst_1):\n            lst_1[index] = lst_1[index] * lst_2[index]\n            index += 1\n        return tuple(lst_1)\n    except ValueError:\n        raise ValueError('test_tup1 and test_tup2 must be tuples')\n    except TypeError:\n        raise TypeError('test_tup1 and test_tup2 must be tuples')\n",
        "test": "assert     index_multiplication((1,2,3),(4,5,6)) == (4,10,18)",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup).most_common(n)\n",
        "test": "assert ",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**3)\n    return result\n",
        "test": "assert cube_nums([1,2,3,4,5,6,7]) == ",
        "num_ids": 155,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n",
        "test": "assert     cal_sum(1) == 1, 'test 1 failed'",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n",
        "test": "assert     extract_string(['Jona', 'Steve', 'Tony', 'Krstin'], 2) == ['Jona', 'Steve']",
        "num_ids": 2434,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "test": "assert     remove_whitespaces(\"this is a test \\n\") == \"this is a test\", \"Wrong output\"",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>=sale_amount:\n        return actual_cost-sale_amount\n    return 0\n",
        "test": "assert     loss_amount(100,100) == 0, 'Negative loss should not be allowed.'",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i <= n :\n            if i % 2 == 0 :\n                sum += i \n    return sum \n",
        "test": "assert     sumofFactors(3) == 2, \"Sum of even factors should be 2\"",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg = re.compile(r'z')\n    match = reg.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz('Some text with z')",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 in range(2, 13):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1)    == True,    \"check_monthnumb_number should return True if month number contains 31 days\"",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "test": "assert reverse_string_list([\"sadness\", \"wrath\"]) == [\"wrath\", \"sadness\"]",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = 99999999\n    min_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist\n",
        "test": "assert     Find_Min([5,7,1,2,6]) == 1 ",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(10,20) == 200, 'Not expected value'",
        "num_ids": 125,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n",
        "test": "assert     remove_uppercase('') == ''",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    temp = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            temp.append(lst[i][j])\n    return temp\n",
        "test": "assert     Extract([]) == []",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(str) - len(str.casefold())\n    \n",
        "test": "assert     upper_ctr('THE SSSS') == 0",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = []\n    list1 = list(set(list1))\n    list1.sort()\n    if len(list1) == 0:\n        return combinations_list\n    combinations_list.append([list1[0]])\n    if len(list1) == 1:\n        return combinations_list\n    for i in range(1,len(list1)):\n        new_list = []\n        for combination in combinations_list:\n            new_list.append(combination + [list1[i]])\n        combinations_list = new_list\n    return combinations_list\n",
        "test": "assert    combinations_list([1]) == [[1]]",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    current_max = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        current_max = max(arr[i], arr[i] * current_max)\n        max_product = max(current_max, max_product)\n    return max_product\n",
        "test": "assert     max_subarray_product([-5, -1, -2, -4, 3]) == -24",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    if len(dict) == 1:\n        if list(dict.values())[0] == n:\n            return True\n        else:\n            return False\n    if len(dict) > 1:\n        if list(dict.values())[0] == n:\n            return True\n        if n == list(dict.values())[-1]:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_value({1:1, 2:2, 3:3, 4:4, 5:5}, 5)",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if value!= None:\n            result[key] = value\n    return result\n",
        "test": "assert     drop_empty({\"1\":1,\"2\":2}) == {\"1\":1,\"2\":2}",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n",
        "test": "assert     max_product([2,3,4,8]) == 192",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #TODO: Write your solution here\n    pass\n",
        "test": "assert add_pairwise((1,2,4)) == (3,5,7), \"Should give (3,5,7)\"",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 0\n    for i in range(0,len(arr)):\n        res = res + (arr[i] * arr[i])\n    return res % n\n",
        "test": "assert     find_remainder([0,1,0,1], 2) == 0",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = sorted(l)\n    flag = False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            flag = True\n        else:\n            flag = False\n            break\n    return flag\n",
        "test": "assert     check_Consecutive([1, 2, 4, 5]) == False",
        "num_ids": 2409,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #tuple intersection\n    final_list = []\n    for ele in test_list1:\n        for i in test_list2:\n            if ele == i:\n                final_list.append(ele)\n    return final_list\n",
        "test": "assert tuple_intersection([(1, 2), (3, 4)], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4)], \"tuple_intersection is wrong\"",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert ",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key = lambda kv:(kv[1], kv[0])))\n",
        "test": "assert     sort_counter({1:5, 2:3, 3:2, 4:1, 5:1}) == {1:5, 2:3, 3:2, 4:1, 5:1}",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest\n",
        "test": "assert     big_sum([5, -9, 7, 3, 6, -6, 9, 2, -2, -6]) == 0, 'failed'",
        "num_ids": 2369,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #\n    #\n    # code here\n    #\n    #\n    return string.lower()\n",
        "test": "assert     is_lower('hello') == 'hello', 'incorrect'",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if str1==\"\":\n        return str1\n    if str1[0].islower():\n        return remove_lowercase(str1[1:])\n    return str1[0].upper() + remove_lowercase(str1[1:])\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1==\"\":\n        return str1\n    if str1[0].isupper():\n        return remove_uppercase(str1[1:])\n    return str1[0].lower() + remove_uppercase(str1[1:])\n    \ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    if str1==\"\":\n        return str1\n    if str1[0].isdigit():\n        return remove_digits(str1[1:])\n    return str1[0] + remove_digits(str1[1:])\n",
        "test": "assert     remove_lowercase(\"a\") == \"\"",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    str_num = str(n)\n    first_Digit = str_num[0]\n    return int(first_Digit)\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = [] \n    for i in range(len(list)): \n        if list[i] % 2!= 0: \n            odd.append(list[i]) \n    return odd \n",
        "test": "assert     Split([1,2,3,4,5]) == [1,3,5], \"Wrong output\"",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(n)]) - sum(range(n))**3\n",
        "test": "assert     difference(2) == 0, \"Correct result : {}\".format(0)",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        if A[i]%2 == 1:\n            count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair([1,2,3,4,5,6,7],0) == 0",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string)!= str:\n        print('ERROR')\n        return -1\n    else:\n        string_new = ''\n        for c in string:\n            if c.isupper():\n                string_new += c.lower()\n            elif c.islower():\n                string_new += c.upper()\n            else:\n                string_new += c\n        return string_new\n",
        "test": "assert     toggle_string(\"Hello World\") == \"hELLO wORLD\", \"WRONG\"",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = int(n1)\n    n2 = int(n2)\n    diff = 0\n    while n1 > 0 or n2 > 0:\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return diff\n",
        "test": "assert     digit_distance_nums(n1=3, n2=2) == 1",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a:\n        return 0\n    \n    if size == 1:\n        return a[0]\n    \n    dp = [[0]*size for i in range(size)]\n    dp[0][0] = a[0]\n    \n    for i in range(1,size):\n        dp[i][0] = a[i]\n        dp[i][1] = max(a[i], dp[i-1][0]+a[i])\n        for j in range(2,size):\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + a[i]\n    \n    return max(dp[size-1])\n",
        "test": "assert     max_sub_array_sum([1, 2, 3], 2) == 3",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n",
        "test": "assert     union_elements((1,2,3), (2,3,4)) == (1,2,3,4)",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    a_set = set(lst)\n    a_list = list(a_set)\n    ans = 0\n    for x in a_list:\n        if ans < len(x):\n            ans = len(x)\n    print(ans)\n",
        "test": "assert ",
        "num_ids": 2550,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values\n",
        "test": "assert     extract_values('\"What\\'s the airspeed of an unladen swallow?\"') == [\"What's the airspeed of an unladen swallow?\"]",
        "num_ids": 2560,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n):\n        for j in range(i):\n            if (arr[i] == arr[j]):\n                dp[i][j] = 2\n            else:\n                dp[i][j] = dp[i][j-1] + dp[j][i]\n            #print(i,j,dp[i][j])\n    print(\"dp[i][j] for the above array \",dp)\n    return dp[i][j]\n",
        "test": "assert     count_Pairs([1,1,1,1,1,1],2) == 2",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for c in word: \n        result.append(c)\n    return result\n",
        "test": "assert not ",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    else:\n        n = str(n)\n        n_sum = 0\n        for digit in n:\n            n_sum += int(digit)\n        return n_sum\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 2133,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if(list1[i-1]<list1[i]):\n            return False\n    return True\n",
        "test": "assert     issort_list([1, 2, 3, 4, 5]) == False, \"Wrong\"",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Your code here\n    return list()\n",
        "test": "assert     empty_list(0) == [] ",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n",
        "test": "assert ",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n",
        "test": "assert     two_unique_nums([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(len(list_data)):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    product_list = 1\n    for i in range(len(unique_list)):\n        product_list = product_list * unique_list[i]\n    return product_list\n",
        "test": "assert unique_product([1, 2, 3, 4]) == 24",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = math.pi*r*(r+h)\n    return surfacearea\n",
        "test": "assert surfacearea_cylinder(2,4) == 2*3*math.pi+2*math.pi*2+2*2*math.pi",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    ans=False\n    for i in range(len(A)):\n        flag=False\n        for j in range(len(B)):\n            if(A[i]==B[j]):\n                flag=True\n                break\n        if(flag==False):\n            ans=True\n            break\n    return ans\n",
        "test": "assert     is_Sub_Array([1,2,3],[1]) == True, \"Expected True\"",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    i=1\n    while i<=n:\n        fact=fact*i\n        i+=1\n    print(fact%10)\n    return fact%10\n",
        "test": "assert     last_Digit_Factorial(9) == 0",
        "num_ids": 2296,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(0,len(list1))] + [list2[i] for i in range(0,len(list2))] + [list3[i] for i in range(0,len(list3))]\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9],) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n",
        "test": "assert ",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n",
        "test": "assert     even_ele((1,2,3,4,5,6,7,8), lambda x: x%2 == 0 ) == (2,4,6,8)",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b <= 0 or s <= 0: \n        return -1\n    else: \n        return (4*(b*s)/3)+(b*s*s)\n",
        "test": "assert    surface_Area(4,5) == 20.0",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({}) == True, \"Expected True, got False\"",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 'Invalid input'\n    if num == 0:\n        return 1\n    prev = 0\n    curr = 1\n    for i in range(num):\n        prev, curr = curr, prev+curr\n    return curr\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text=text.replace('\\n',' ')\n    text=text.lower()\n    adverbs=['ly','so','on','in']\n    adverbs_positions=[]\n    for i in range(0,len(text)):\n        if text[i] in adverbs:\n            if text[i:i+2]=='ly':\n                adverbs_positions.append(i)\n            elif text[i:i+3]=='so':\n                adverbs_positions.append(i)\n            elif text[i:i+3]=='on':\n                adverbs_positions.append(i)\n            elif text[i:i+3]=='in':\n                adverbs_positions.append(i)\n    return adverbs_positions\n",
        "test": "assert     find_adverbs(\"He was like the conductor.\") == \"ly\"",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    l=[]\n    for i in items:\n        l.append(i[2])\n    heapq.heapify(l)\n    res=[]\n    for i in range(n):\n        res.append(heapq.heappop(l))\n    return res\n",
        "test": "assert expensive_items([(1,2,3),(10,20,40),(100,300,20)],2) == [(10,20,40),(100,300,20)]",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # l=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]\n    # n=2\n    # split_Arr(l,n)\n    # ['1','2','3',l[2:n], '4', '5', '6']\n    \n    l1 = l[0:n]\n    l2 = l[n:]\n    l2.extend(l1)\n    print(l1, l2)\n    \n",
        "test": "assert     split_Arr([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [[1, 2, 3, 4, 5], 6, 7, 8, 9]",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3), \"Expected: (1,2,3), Actual: {0}\".format(list_tuple([1,2,3]))",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n",
        "test": "assert ",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = b - a\n    ans = []\n    for i in range(a, b+1):\n        if i * i == n:\n            ans.append(i)\n    return ans\n",
        "test": "assert perfect_squares(0, 1) == 0, \"returns the perfect square 0\"",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    polar = x**2 + y**2\n    r = cmath.sqrt(polar)\n    rect = (r.real,r.imag)\n    return rect\n",
        "test": "assert     polar_rect(1,0) == (1,0), \"polar_rect(1,0) should return (1,0)\"",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(newList)\n",
        "test": "assert ",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize a counter variable\n    cnt = 0\n    \n    # calculate the binomial coefficient\n    for i in range(n+1):\n        cnt += (1/((2*i) + 1))\n    return int(cnt)\n",
        "test": "assert     binomial_Coeff(0,0) == 1",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_no_zeros = ip.split('.')\n    for i in range(0, len(ip_no_zeros)):\n        if len(ip_no_zeros[i]) == 0:\n            ip_no_zeros[i] = '0'\n    return '.'.join(ip_no_zeros)\n",
        "test": "assert     removezero_ip('10.1.1.1') == '10.1.1.1', \"Wrong output\"",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    even_num = max(even_list)\n    odd_num = min(odd_list)\n    return even_num - odd_num\n",
        "test": "assert     diff_even_odd([4, 2, 6, 8]) == 4",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    str1 = list(str1)\n    str2 = list(str2)\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n            \n    return count\n",
        "test": "assert     min_Swaps('0000', '1100') == 1, 'Should be 1'",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #initializing the variable\n    size = 0\n    #iterating over the tuple\n    for i in tuple_list:\n        #adding the size of each element in the tuple\n        size = size + sys.getsizeof(i)\n    #returning the size\n    return size\n",
        "test": "assert ",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]\n",
        "test": "assert     find_kth([0,0,0,0], [0,0,0,0], 0) == 0",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    s = 0\n    while n > 0:\n        s = s + (n%10)**3\n        n = n//10\n    return number == s\n",
        "test": "assert     armstrong_number(16) == False, \"16 is not armstrong number\"",
        "num_ids": 2311,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    \n    for x in range(0,number):\n        sum += x\n    \n    avg = sum/number\n    return sum,avg\n",
        "test": "assert ",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return True if n%2==0 else False\n",
        "test": "assert     is_Even(2) == True, \"Expected output: True\"",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = str1\n    if len(s) < 1:\n        return None\n    if len(s) == 1:\n        return s[0]\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return s[i]\n    return None\n",
        "test": "assert first_repeated_char(\"hllllllll\") == \"l\", \"Wrong Answer\"",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(n) if is_lucid(i)]\n",
        "test": "assert get_ludic(0) == []",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n",
        "test": "assert     reverse_words(\"\") == \"\"",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert     radian_degree(45) == math.pi/4",
        "num_ids": 144,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.findall(text)\n    if match:\n        return match[0]\n    else:\n        return None, None, None\n",
        "test": "assert     find_literals('asfdasdf', 'asdf') == 'asdf', \"Wrong\"",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * bell_Number(n-1) \n  \ndef lis(input_list): \n    '''\n    Write a python function to find length of longest increasing subsequence.\n    '''\n    def longest_increasing_subsequence(arr): \n        n = len(arr) \n        if n == 0: \n            return 0\n        dp = [1] * n \n        for i in range(1, n): \n            for j in range(0, i): \n                if arr[i] > arr[j] and dp[i] < dp[j] + 1: \n                    dp[i] = dp[j] + 1\n        return max(dp) \n  \n    return longest_increasing_subsequence(input_list) \n  \ndef min_moves_to_reduce_sum_to_zero(nums):\n    '''\n    Write a python function to find minimum number of moves to reach a target sum 0\n    '''\n    def min_moves_to_reach_target_sum_zero(nums, target): \n        if not nums:\n            return 0\n        if sum(nums) == target: \n            return len(nums)\n        if sum(nums) < target: \n            return min_moves_to_reach_target_sum_zero(nums[1:], target - nums[0]) + 1\n        else: \n            return min_moves_to_reach_target_sum_zero(nums[1:], target) \n",
        "test": "assert     bell_Number(1) == 1, f\"bell_Number returned incorrect value for 1. Expected {1} but returned {bell_Number(1)}\"",
        "num_ids": 2356,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    s = list1[:]\n    k = L\n    if L == 0:\n        return s\n    elif len(s) <= L:\n        return s[:len(s)-L]\n    else:\n        del s[k]\n        return s\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4], 1) == [1, 3, 4], 'Wrong'",
        "num_ids": 2112,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    #   if N == len(test_list):\n    #     return max(row)\n    # else:\n    #     return max(max_of_nth(test_list, N+1))\n",
        "test": "assert     max_of_nth([[1,2,3],",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Your Code Here\n    # Hint: The only thing to know is the length of the list of sublists.\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    merged = []\n    for lst_1 in lst:\n        merged.append(lst_1[0])\n        merged.append(lst_1[1])\n    return merged\n",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    ans = 0\n    for i in range(len(test_list)):\n        ans = ans + test_list[i]\n    return ans\n",
        "test": "assert     cummulative_sum([1, 2, 3, 4, 5, 6]) == 21, 'Test Case 1 Failed'",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for x in nums:\n        sum = 0\n        for y in x:\n            sum += y\n        average_list.append(sum/len(x))\n    return average_list\n",
        "test": "assert average_tuple(((1,2,3), (4,5,6))) == [(1.0, 2.0, 3.0), (4.0, 5.0, 6.0)]",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] % test_tup2[i],)\n    return new_tup\n",
        "test": "assert     tuple_modulo((1,2), (3,4)) == (1,2)",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    j = 0\n    x, y = 0, 0\n    step = 0\n    steps_temp = steps\n    while(step < steps_temp):\n        step += 1\n        if(x >= d):\n            j += 1\n            if(y >= d):\n                return j\n            x = 0\n            y += 1\n        elif(y >= d):\n            j += 1\n            if(x <= -d):\n                return j\n            x -= 1\n            y = 0\n        else:\n            x += 1\n            y += 1\n    return j\n",
        "test": "assert     min_Jumps(4, 3) == 1",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if not nums1 or not nums2:\n        return []\n    a = min(nums1)\n    b = min(nums2)\n    i = 0\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    div_nums1 = []\n    div_nums2 = []\n    while i < len(nums1):\n        if nums1[i] % a == 0:\n            div_nums1.append(a)\n        i += 1\n    while i < len(nums2):\n        if nums2[i] % b == 0:\n            div_nums2.append(b)\n        i += 1\n    return div_nums1 + div_nums2\n",
        "test": "assert     div_list([1,2,3],[2,4,6]) == None",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.isnumeric():\n            count += 1\n    print(count)\n    new_str = ''\n    for i in test_str:\n        if i.isnumeric():\n            new_str += str(i)\n        else:\n            new_str += i\n    for i in range(count):\n        new_str += str(i)\n    print(new_str)\n    return new_str\n",
        "test": "assert     move_num('') == ''",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    print(a)\n    if len(a) == 1:\n        return a[0]\n    subset = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if ((a[j] % a[i]) == 0) and (a[j] not in subset):\n                subset.append(a[i])\n    return len(subset)\n",
        "test": "assert     largest_subset([3,4,5,8]) == 1, \"Error 2\"",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_list = sorted(arr1 + arr2)\n    mid = len(sorted_list)//2\n    return sorted_list[mid]\n",
        "test": "assert     get_median([1, 2, 3], [2, 3, 4], 3) == 3",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    nums_power = []\n    for i in range(len(nums)):\n        nums_power.append(nums[i]**n)\n    return nums_power\n",
        "test": "assert     nth_nums([1, 2, 3], 2) == [1, 4, 9]",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_str = ''\n    for i in string:\n        if i.isupper():\n            upper_str += i.lower()\n        else:\n            upper_str += i.upper()\n    return upper_str\n",
        "test": "assert     is_upper(\"A\") == True, \"Single Character\"",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList.pop(0))\n    return newList\n",
        "test": "assert     swap_List([2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2]",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14*r*r\n    return area\n",
        "test": "assert ",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    if end is None:\n        end = n\n    if start == end:\n        return end+1\n    mid = (start+end)//2\n    if array[mid] == mid+1:\n        return find_First_Missing(array,mid+1,end)\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    if array[mid] > mid+1:\n        return find_First_Missing(array,start,mid)\n    if array[mid] < mid:\n        return find_First_Missing(array,mid+1,end)\n",
        "test": "assert     find_First_Missing([1,2,4]) == 3",
        "num_ids": 3222,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     (replace_spaces('abc') == 'abc')",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for x in list:\n        if x%2 == 0:\n            evens.append(x)\n    return evens\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Check if tuple is empty\n    if ele == ():\n        return sub\n    else:\n        # If first element, add it to the sublist and return the list\n        if ele[0] == 0:\n            sub.append(ele[1])\n            return sub\n        # If second element, add it to the sublist and return the list\n        elif ele[1] == 0:\n            sub.append(ele[0])\n            return sub\n        # If none of these conditions, add the first element of the list to the sublist and add it to the sublist\n        else:\n            sub.append(ele[0])\n            sub.append(ele[1])\n            return sub\n",
        "test": "assert     adjac((3,4)) == [(2, 4), (3, 4), (2, 5), (3, 5), (2, 6), (3, 6), (2, 7), (3, 7)]",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if not text: return text\n    text = text.strip()\n    return text.replace(' ', '_') if text else text.replace('_','')\n",
        "test": "assert     replace_spaces(\"\") == \"\", \"replace_spaces\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list\n",
        "test": "assert     move_zero([1, 0, 3, 4, 0, 5, 0, 0]) == [1, 3, 4, 5, 0, 0, 0, 0]",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(n):\n            xor = arr[i] ^ arr[j]\n            print(xor)\n        print(\"\\n\")\n    return xor\n",
        "test": "assert ",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    my_heap = []\n    for i in iterable:\n        hq.heappush(my_heap,i)\n    \n    return sorted(my_heap)\n",
        "test": "assert     heap_sort([\"a\", \"c\", \"b\"]) == [\"a\", \"b\", \"c\"]",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(10,10) == True, \"Error\"",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -4.5:\n        v = v * 0.75\n        t += 4.5\n    if t > 17.65:\n        v = v * 0.65\n        t -= 17.65\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.05\n    f = -0.35\n    wind_chill_index = a + (b * t) + (c * v**0.16) + (d * v**0.16 * t) + (e * math.sqrt(v)) + f\n    return round(wind_chill_index)\n",
        "test": "assert ",
        "num_ids": 2578,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        sum += len(name)\n    return sum\n",
        "test": "assert     sample_nam(['my name is', 'John','my sister is jane']) == 4, 'incorrect'",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return ''.join([x.strip() for x in re.split(\"[()]\", items) if x])\n",
        "test": "assert     remove_parenthesis('(foo)') == 'foo'",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n*(n+1))/2)\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 2256,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile(r'^z+$')\n    if regex.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle(\"z z\") == False",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k<=len(input):\n        k = k\n        #return reversed(input[k:])\n        res = input[::-1]\n        return res\n    else:\n        return \"Invalid input\"\n        \n    \n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9], 5) == [9,8,7,6,5,4,3,2,1], \"Wrong Answer\"",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 1, 'b': 2}) == (1, 2, 3, {'a': 1, 'b': 2})",
        "num_ids": 1126,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Create a dictionary with all costs\n    cost_dict = {}\n    for r in range(len(cost)):\n        for c in range(len(cost[r])):\n            # Adding all costs to dictionary\n            cost_dict[(r,c)] = cost[r][c]\n",
        "test": "assert ",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #filter height above minimum\n    if (students[h] > 50) and (students[w] > 50):\n        print(students[h], students[w])\n",
        "test": "assert     filter_data({'Harry': (58.60, 68.00), 'Rohan': (48.00, 50.00), 'Harsh': (58.20, 70.00)}, 58.50, 60) == {'Rohan', 'Harsh'}",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([], []) == 0",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    #print(base)\n    sum = 0\n    for i in range(len(base)):\n        sum += int(base[i])**power\n        #print(\"sum\",sum)\n    return sum\n    \ndef reverse_num(num):\n    '''\n    Write a function that takes a number as an argument and reverses the number.\n    '''\n    base = str(num)\n    base_length = len(base)\n    print(base_length)\n    print(base)\n    if base_length == 1:\n        return int(base)\n    else:\n        reverse_list = []\n        rev_base = base[::-1]\n        print(rev_base)\n        #print(base)\n        for i in range(len(rev_base)):\n            reverse_list.append(int(rev_base[i]))\n        \n        return int(''.join(str(e) for e in reverse_list))\n",
        "test": "assert power_base_sum(2, 3) == 7",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(quotation_pattern,text1)\n    return result\ndef extract_multiple_quotation(text1):\n    '''\n    Write a function to extract all the values between multiple quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(quotation_pattern,text1)\n    return result\ndef remove_space(text1):\n    '''\n    Write a function to remove all the spaces from the given string.\n    '''\n    result = text1.strip()\n    return result\ndef extract_string_by_regex(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result\ndef remove_multiple_spaces(text1):\n    '''\n    Write a function to remove multiple spaces from the given string.\n    '''\n    result = text1.replace(' ','')\n    return result\ndef extract_string(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    result = text1.split(' ')\n    return result\ndef find_most_frequent(lst):\n    '''\n    Write a function to find the most frequent elements in the given list.\n    '''\n    d={}\n    for i in lst:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    m=max(d.values())\n    for i in d:\n        if d[i]==m:\n            return i\ndef extract_string_by_split(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    result = text1.split(' ')\n    return result\ndef extract_string_by_regex_with_index(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result,result[0].find('\"')\ndef extract_string_by_regex_with_index_and_split(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result,result[0].find('\"')\ndef extract_string_by_regex_with_index_and_split_and_extract(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result,result[0].find('\"')\ndef extract_string_by_regex_with_index_and_split_and_extract_and_remove(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result,result[0].find('\"')\ndef extract_string_by_regex_with_index_and_split_and_extract_and_remove_and_replace(text1):\n    '''\n    Write a function to extract all the string values in the given string.\n    '''\n    string_pattern = r'\\\"[^\\\"]+\\\"'\n    result = re.findall(string_pattern,text1)\n    return result,result[0].find('\"')\ndef find_first_occurance_of_string(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_first_occurance_of_string_with_index(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string_with_index(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_first_occurance_of_string_with_index_and_split(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string_with_index_and_split(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_first_occurance_of_string_with_index_and_split_and_extract(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string_with_index_and_split_and_extract(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_first_occurance_of_string_with_index_and_split_and_extract_and_remove(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string_with_index_and_split_and_extract_and_remove(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_first_occurance_of_string_with_index_and_split_and_extract_and_remove_and_replace(lst,string):\n    '''\n    Write a function to find the index of the first occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef find_last_occurance_of_string_with_index_and_split_and_extract_and_remove_and_replace(lst,string):\n    '''\n    Write a function to find the index of the last occurrence of the given string from the list.\n    '''\n    for i in lst:\n        if string==i:\n            return lst.index(i)\ndef remove_whitespace(lst):\n    '''\n    Write a function to remove all the whitespaces from the list.\n    '''\n    lst1=lst.split()\n    lst2=[]\n    for i i",
        "test": "assert     extract_quotation(\"This (is) a string.\") == \"This (is) a string.\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x*(x+1) for x in test_tup])\n",
        "test": "assert     multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5), \"Wrong result of multiply_elements((1, 2, 3, 4, 5))\"",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert type(lst1) == list, 'Invalid input'\n    assert type(lst2) == list, 'Invalid input'\n    assert len(lst1) == len(lst2), 'Invalid input'\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n",
        "test": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s = set(nums)\n    return list(s)\n",
        "test": "assert     consecutive_duplicates([1, 2, 3, 3]) == [1, 2, 3]",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    p=0.4*r*h\n    s=(math.pi*r**2)+(math.pi*r*h)+(math.pi*(r**2)*2)\n    return p,s\n    \n    \ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    p=2*math.pi*r*h\n    s=math.pi*(r**2)+math.pi*(r**2)*2+math.pi*(r**2)*2\n    return p,s\n    \n    \n    \ndef main():\n    #test_cases\n    print(\"TESTING Cone - Result should be 10\")\n    result=lateralsurface_cone(10,10)\n    print(result)\n    assert result[1] == math.pi*(10**2)+math.pi*(10**2)*2+math.pi*(10**2)*2\n    assert result[0] == 10\n    print(\"TESTING Cone - Result should be 2.67\")\n    result=lateralsurface_cone(10,2.67)\n    print(result)\n    assert result[1] == math.pi*(10**2)+math.pi*(10**2)*2+math.pi*(10**2)*2\n    assert result[0] == 2.67\n    print(\"TESTING Cone - Result should be 6\")\n    result=lateralsurface_cone(10,6)\n    print(result)\n    assert result[1] == math.pi*(10**2)+math.pi*(10**2)*2+math.pi*(10**2)*2\n    assert result[0] == 6\n    print(\"TESTING Cone - Result should be 9.3\")\n    result=lateralsurface_cone(10,9.3)\n    print(result)\n    assert result[1] == math.pi*(10**2)+math.pi*(10**2)*2+math.pi*(10**2)*2\n    assert result[0] == 9.3\n    print(\"TESTING Cone - Result should be 20\")\n    result=lateralsurface_cone(20,20)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 20\n    print(\"TESTING Cone - Result should be 20\")\n    result=lateralsurface_cone(20,2.67)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 2.67\n    print(\"TESTING Cone - Result should be 34\")\n    result=lateralsurface_cone(20,34)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 34\n    print(\"TESTING Cone - Result should be 44\")\n    result=lateralsurface_cone(20,44)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 44\n    print(\"TESTING Cone - Result should be 56\")\n    result=lateralsurface_cone(20,56)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 56\n    print(\"TESTING Cone - Result should be 72\")\n    result=lateralsurface_cone(20,72)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 72\n    print(\"TESTING Cone - Result should be 89\")\n    result=lateralsurface_cone(20,89)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 89\n    print(\"TESTING Cone - Result should be 98\")\n    result=lateralsurface_cone(20,98)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 98\n    print(\"TESTING Cone - Result should be 102\")\n    result=lateralsurface_cone(20,102)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 102\n    print(\"TESTING Cone - Result should be 119\")\n    result=lateralsurface_cone(20,119)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 119\n    print(\"TESTING Cone - Result should be 127\")\n    result=lateralsurface_cone(20,127)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 127\n    print(\"TESTING Cone - Result should be 135\")\n    result=lateralsurface_cone(20,135)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 135\n    print(\"TESTING Cone - Result should be 143\")\n    result=lateralsurface_cone(20,143)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 143\n    print(\"TESTING Cone - Result should be 170\")\n    result=lateralsurface_cone(20,170)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 170\n    print(\"TESTING Cone - Result should be 190\")\n    result=lateralsurface_cone(20,190)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 190\n    print(\"TESTING Cone - Result should be 205\")\n    result=lateralsurface_cone(20,205)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 205\n    print(\"TESTING Cone - Result should be 223\")\n    result=lateralsurface_cone(20,223)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    assert result[0] == 223\n    print(\"TESTING Cone - Result should be 243\")\n    result=lateralsurface_cone(20,243)\n    print(result)\n    assert result[1] == math.pi*(20**2)+math.pi*(20**2)*2+math.pi*(20**2)*2\n    asser",
        "test": "assert ",
        "num_ids": 2515,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = input(\"Enter the text : \")\n    print(\"The text before replacing special chars with colons: \" + text)\n    text = re.sub(r\"[,]\", ':', text)\n    print(\"The text after replacing special chars with colons: \" + text)\n    return(text)\n",
        "test": "assert replace_specialchar(\"hello\") == \"hello\"",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "test": "assert     find_first_occurrence([], 1) == -1",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 1:\n        return 1\n    \n    s = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        s = s * arr[i]\n    return s\n",
        "test": "assert     sum_Of_Subarray_Prod([1,2,3]) == 6, \"incorrect\"",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | (n >> 1)\n    n = n & ~(n >> 1)\n    return n\n",
        "test": "assert ",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right\n",
        "test": "assert     left_insertion([1,2,3,4], 2) == 1",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('A')==True, \"True\"",
        "num_ids": 2211,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*(n-1)/2\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # LC_001\n    # result = (int)(math.sqrt(1+8*n)) - 2\n    # print(result)\n    \n    # LC_002\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_003\n    # result = n + (n-1) // 2\n    # print(result)\n    \n    # LC_004\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_005\n    # result = (int)(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_006\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_007\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_008\n    # result = (int)(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_009\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_010\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_011\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_012\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_013\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_014\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_015\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_016\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_017\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_018\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_019\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_020\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_021\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_022\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_023\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_024\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_025\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_026\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_027\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_028\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_029\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_030\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_031\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_032\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_033\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_034\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_035\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_036\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_037\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_038\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_039\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_040\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_041\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_042\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_043\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_044\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_045\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_046\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_047\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_048\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_049\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_050\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_051\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_052\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_053\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_054\n    # result = int((n * (n+1)/2) + 1)\n    # print(result)\n    \n    # LC_055\n    # result = int(math.sqrt(1+8*n)-2)\n    # print(result)\n    \n    # LC_056\n    # result = math.ceil(math.sqrt(1+8*n)-2)\n    # print(result)",
        "test": "assert ",
        "num_ids": 2150,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {'a': 'a', 'b': 'b'}\n    d = {k: v for k, v in zip(test_tup[::2], test_tup[1::2])}\n    return d\n",
        "test": "assert     tuple_to_dict(('key1', 'value1', 'key2', 'value2')) == {'key1': 'value1', 'key2': 'value2'}, 'Fail'",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        return s[0] == s[-1]\n",
        "test": "assert     all_Characters_Same(\"abcdab\") == False, \"The output should be False.\"",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3 / 4\n",
        "test": "assert     area_tetrahedron(1.5)==1.5**3/4.0, 'Wrong result'",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n < 1 or m < 1 or n < m:\n        return list\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n    \n",
        "test": "assert     rotate_right([1,2,3,4], 0) == [1,2,3,4], \"Failed in rotation by 0\"",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return bool(test_tup[0])\n    \nprint(check_none((None,2)))\nprint(check_none(('none',None)))\nprint(check_none(('none',0)))\nprint(check_none((1,'none',3)))\n",
        "test": "assert     check_none((1, 2, 3, None)) == True",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum+1):\n        if num%digits(num) == 0:\n            print(num)\n    print(\"\\n\")\n",
        "test": "assert ",
        "num_ids": 2651,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<0:\n        return None\n    if r>a:\n        return None\n    else:\n        return r**2*math.pi*a/360\n    \nsector_area(1,2)\n",
        "test": "assert     sector_area(10, 45) == 1.5, 'Problem in sector_area'",
        "num_ids": 1211,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # if the length of the string is 1, we have only two strings and therefore we return 1\n    if len(X) == 1 or len(Y) == 1 or len(Z) == 1:\n        return 1\n    \n    # if the length of the strings is 0, we have 0\n    if X == '' or Y == '' or Z == '':\n        return 0\n    \n    # define the dp_matrix as a dictionary\n    # dp_matrix[i][j] represents the length of longest common subsequence for strings X[0...i] and Y[0...j]\n    dp_matrix = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n    \n    # fill the entries of the dp_matrix\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp_matrix[i][j] = dp_matrix[i - 1][j - 1] + 1\n                else:\n                    dp_matrix[i][j] = max(dp_matrix[i - 1][j], dp_matrix[i][j - 1], dp_matrix[i - 1][j - 1])\n    \n    # print the dp_matrix for clarity\n    # for i in range(len(X) + 1):\n    #     print(dp_matrix[i])\n    \n    return dp_matrix[len(X)][len(Y)]\n",
        "test": "assert     lcs_of_three('', '', '') == 0",
        "num_ids": 2197,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([a-zA-Z][^A-Za-z0-9 ]+)', r'\\1 ', str1)\n    \n    \ndef abbreviations(str1):\n    '''\n    Write a function that takes a string and returns whether it is an abbreviation or not.\n    '''\n    return re.search(r'([a-zA-Z][0-9]{2,3}[a-zA-Z]{0,2}).*', str1)\n",
        "test": "assert     capital_words_spaces(\"\") == \"\"",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def get_number(s):\n        try:\n            n = float(s)\n            return n\n        except ValueError:\n            return 0\n    return sorted(nums_str, key=get_number)\n",
        "test": "assert     sort_numeric_strings(['1','2','3']) == ['1','2','3']",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "test": "assert     add_tuple([], (1,2)) == None, 'add_tuple([], (1,2)) => None'",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if (2 * i + 1) < n:\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n    if (2 * i + 2) < n:\n        if arr[i] > arr[2 * i + 2] or arr[i] > arr[2 * i + 1]:\n            return False\n    if (2 * i + 3) < n:\n        if arr[i] > arr[2 * i + 3] or arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n",
        "test": "assert     check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == True, 'check_min_heap_helper: failed'",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 2:\n        return n\n    \n    ans = 1\n    while True:\n        ans += 1\n        if (ans*(3*ans-1))%n == 0:\n            return ans\n",
        "test": "assert     jacobsthal_num(0) == 0",
        "num_ids": 2342,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    if len(test_list) <= K:\n        min_k = test_list\n    else:\n        min_k = test_list[:K]\n    return min_k\n",
        "test": "assert     min_k([(\"a\",1),(\"b\",2),(\"c\",3)], 0) == []",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    l1_index = {}\n    l2_index = {}\n    l3_index = {}\n    \n    for i in l1:\n        if i in l1_index:\n            l1_index[i] += 1\n        else:\n            l1_index[i] = 1\n    for j in l2:\n        if j in l2_index:\n            l2_index[j] += 1\n        else:\n            l2_index[j] = 1\n    for k in l3:\n        if k in l3_index:\n            l3_index[k] += 1\n        else:\n            l3_index[k] = 1\n    \n    for key, value in l1_index.items():\n        if key in l2_index and key in l3_index:\n            if value > 0:\n                if l1_index[key] == l2_index[key] and l1_index[key] == l3_index[key]:\n                    result.append(key)\n    return result\n",
        "test": "assert     extract_index_list([1,2], [2,3], [3,2]) == [2]",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_list = sorted(numbers)\n    return sorted_list[1]\n",
        "test": "assert ",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"a+\")\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('abaa') == True, 'not true'",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # s = 'geeksforgeeks'\n    # l = list(s)\n    # d = dict()\n    # count = 0\n    # for i in range(len(l)-1):\n    #     d[l[i]] = i\n    # for i in range(len(l)-1):\n    #     if(d.get(l[i+1]) is not None and d.get(l[i+1]) < i):\n    #         count += 1\n    # return count\n    count = 0\n    i = 0\n    while i < len(test_list)-1:\n        if test_list[i] == test_list[i+1][::-1]:\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert count_reverse_pairs([['a', 'a', 'a'], ['a', 'b', 'b'], ['b', 'b', 'a'], ['b', 'a', 'a']]) == 1",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(list1): list1.count(list1)}\n    \n",
        "test": "assert     unique_sublists([]) == {(): 0}, \\",
        "num_ids": 2521,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal('42.3')",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    count = 1\n    for i in range(len(arr)):\n        if i!=0 and arr[i]==arr[i-1]:\n            count = count + 1\n            if count > 1:\n                break\n        else:\n            count = 1\n    if count==1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element([1,1,2,2,2]) == False, 'It should be false'",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3>12 or monthnum3<=0:\n        print('Please enter a number between 1 and 12')\n        return False\n    elif monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        print('No, the month of',monthnum3,'has only 30 days')\n        return True\n    elif monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11:\n        print('No, the month of',monthnum3,'has only 31 days')\n        return True\n    else:\n        print('No, the month of',monthnum3,'has both 30 days and 31 days')\n        return True\n    ",
        "test": "assert     check_monthnumber_number(2) == True, \"Month number 2 has 30 days\"",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    sorted_arr=sorted(arr)\n    min_diff=float(\"inf\")\n    for i in range(0,len(sorted_arr)-1):\n        diff=abs(sorted_arr[i]-sorted_arr[i+1])\n        if diff<min_diff:\n            min_diff=diff\n    return min_diff\n",
        "test": "assert find_min_diff([-3,-2,2,4], 1) == 1",
        "num_ids": 494,
        "indeed": true
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if not str:\n        return 0\n    n=0\n    for i in str:\n        if i.isdigit():\n            n+=1\n    return n\n",
        "test": "assert     number_ctr('1234') == 4",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # base case: if n is 1\n    if n == 1:\n        return 1\n    # binary search for nth polite number\n    start = 1\n    end = n\n    while start <= end:\n        mid = start + (end-start)//2\n        if mid % 2 == 0:\n            # even number\n            end = mid - 1\n        else:\n            # odd number\n            start = mid + 1\n    return mid\n",
        "test": "assert     is_polite(1)==True ",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not l1: return []\n    output = []\n    for i in range(0,len(l1)):\n        if i!= len(l1)-1:\n            output.append((l1[i],l1[i+1]))\n    return output\n",
        "test": "assert not pair_wise([])",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert     get_pairs_count([1,2,3,4,5], 5) == 2, \"Passed!\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert     Diff([1,2,3,4], [1,2,3]) == [4]",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if i%2!= 0 :\n            sum += i**2\n    return sum\n    \n    \ndef sum_of_prime_numbers(n) :\n    '''\n    Write a python function to sum of all prime numbers from 1 to n.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if isprime(i) :\n            sum += i\n    return sum\n    \n    \ndef isprime(n) :\n    '''\n    Write a python function to determine whether the number is prime or not.\n    '''\n    if n == 1 :\n        return False\n    if n == 2 :\n        return True\n    for i in range(2, n) :\n        if n % i == 0 :\n            return False\n    return True\n    \n    \ndef largest_odd_number_in_list(n) :\n    '''\n    Write a python function to find the largest odd number in the list.\n    '''\n    max = -9999\n    for i in n :\n        if i%2!= 0 :\n            if max < i :\n                max = i\n    return max\n    \n    \ndef largest_odd_number_in_array(n) :\n    '''\n    Write a python function to find the largest odd number in the list.\n    '''\n    max = -9999\n    for i in n :\n        if i%2!= 0 :\n            if max < i :\n                max = i\n    return max\n    \n    \ndef third_number_greater_than_second_and_third(n) :\n    '''\n    Write a python function to find the third number which is greater than second and third.\n    '''\n    second = -9999\n    third = -9999\n    for i in n :\n        if i<second :\n            second = i\n        elif i<third :\n            third = i\n    return third\n    \n    \ndef third_number_greater_than_second_and_third_using_ternary_operator(n) :\n    '''\n    Write a python function to find the third number which is greater than second and third.\n    '''\n    second = -9999\n    third = -9999\n    for i in n :\n        if i<second :\n            second = i\n        elif i<third :\n            third = i\n    return third if second<third else third-second\n    \n    \ndef delete_duplicates(n) :\n    '''\n    Write a python function to delete the duplicate numbers in the list.\n    '''\n    temp = 0\n    for i in range(1,len(n)):\n        if n[i]!= n[temp]:\n            temp += 1\n            n[temp] = n[i]\n    return n[:temp+1]\n    \n    \ndef find_lcm(num1, num2) :\n    '''\n    Write a python function to find the least common multiple(LCM) of two numbers.\n    '''\n    import math\n    return (num1*num2)//math.gcd(num1,num2)\n    \n    \ndef find_lcm_without_using_math_module(num1, num2) :\n    '''\n    Write a python function to find the least common multiple(LCM) of two numbers.\n    '''\n    num = max(num1,num2)\n    while num!= 0 :\n        if num%num1 == 0 and num%num2 == 0 :\n            return num\n        num -= 1\n    \n    \ndef list_intersection(n1, n2) :\n    '''\n    Write a python function to find the intersection of two lists.\n    '''\n    return list(set(n1) & set(n2))\n    \n    \ndef list_intersection_without_using_set_operator(n1, n2) :\n    '''\n    Write a python function to find the intersection of two lists.\n    '''\n    if len(n1) <= len(n2) :\n        min_len = len(n1)\n    else :\n        min_len = len(n2)\n    for i in range(min_len):\n        if n1[i] not in n2 :\n            return n1[i]\n        \n    \ndef longest_common_subsequence(s1, s2) :\n    '''\n    Write a python function to find the longest common subsequence of two strings.\n    '''\n    len_str1 = len(s1)\n    len_str2 = len(s2)\n    matrix = [[0 for j in range(len_str2+1)] for i in range(len_str1+1)]\n    for i in range(1, len_str1+1) :\n        for j in range(1, len_str2+1) :\n            if s1[i-1] == s2[j-1] :\n                matrix[i][j] = 1 + matrix[i-1][j-1]\n            else :\n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1])\n    return matrix[-1][-1]\n    \n    \ndef longest_common_subsequence_without_using_matrix_operator(s1, s2) :\n    '''\n    Write a python function to find the longest common subsequence of two strings.\n    '''\n    len_str1 = len(s1)\n    len_str2 = len(s2)\n    if len_str1 < len_str2 :\n        temp = s1\n        s1 = s2\n        s2 = temp\n    max_len = 0\n    for i in range(len_str1) :\n        for j in range(i, len_str2) :\n            if s1[i] == s2[j] :\n                if max_len < j - i + 1 :\n                    max_len = j - i + 1\n    return max_len\n    \n    \ndef number_of_vowels(s) :\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = ('a','e','i','o','u')\n    count = 0\n    for i in s :\n        if i in vowels :\n            count += 1\n    return count\n    \n    \ndef number_of_vowels_without_using_set_operator(s) :\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = ('a','e','i','o','u')\n    count = 0\n    for i in s :\n        if i in vowels :\n            count += 1\n    return count\n    \n    \ndef number_of_vowels_using_ternary_operator(s) :\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = ('a','e','i','o','u')\n    count = 0\n    for i in s :\n        if i in vowels :\n            count += 1\n    return count if count % 2 == 0 else count-1\n    \n    \ndef move_zeroes(l) :\n    '''\n    Write a python function to move all zero elements to the end of the list.\n    '''\n    count = 0\n    for i in range(len(l)) :\n        if l[i]!= 0 :\n            l[count] = l[i]\n            count += 1\n    for i in range(count,len(l)) :\n        l[i] = 0\n    return l\n    \n    \ndef move_zeroes_using_ternary_operator(l) :\n    '''\n    Write a python function to move all zero elements to the end of the list.\n    '''\n    count = 0\n    for i in range(len(l)) :\n        if l[i]!= 0 :\n            l[count] = l[i]\n            count += 1\n    for i in range(count,len(l)) :\n        l[i] = 0\n    return l\n    \n    \ndef rotate_string_using_python_operator(s, n) :\n    '''\n    Write a python function to rotate a string by a given number of characters.\n    '''\n    return s[n:] + s[:n]\n    ",
        "test": "assert     odd_num_sum(0) == 0",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Your code here\n    stack = []\n    for char in exp:\n        if char == \"(\" or char == \"{\":\n            stack.append(char)\n        elif char == \")\":\n            if stack:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n        elif char == \"}\":\n            if stack:\n                if stack[-1] == \"{\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_expression('((a+b*c)-(a+b*c))') == True",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str_list = test_str.split()\n    remove_words = []\n    for word in test_str_list:\n        if len(word) == K:\n            remove_words.append(word)\n    for word in remove_words:\n        test_str_list.remove(word)\n    return \" \".join(test_str_list)\n",
        "test": "assert     remove_length('mamamam',1) =='mamamam'",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_list=re.findall(pattern,text)\n    for i in range(len(pattern_list)):\n        text_pos=text.find(pattern_list[i])\n        print(pattern_list[i],text_pos)\n",
        "test": "assert     occurance_substring(\"aaabab\",\"ba\") == None",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    flag = True\n    for i in range(0, len(nums)):\n        if (i+1)%2 == 0:\n            if nums[i] % 2 == 0:\n                flag = False\n                break\n    return flag\n",
        "test": "assert     odd_position([1,2,3,4,5,6,7,8,9]) == False, \"Error\"",
        "num_ids": 2387,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    length = len(test_str)\n    for i in range(length - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert     count_vowels('e') == 0",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    counter = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                counter += arr[i]\n            else:\n                counter += arr[j]\n    return counter\n",
        "test": "assert     find_sum([-1,-2,-3,-4]) == -10, \"Wrong value for find_sum\"",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    ans = []\n    for key,group in groupby(list1):\n        group = list(group)\n        if(len(group)>1):\n            ans.append(group)\n    return ans\n",
        "test": "assert     pack_consecutive_duplicates([1, 1, 2, 3, 3, 3, 4, 5, 6]) == [[1, 2], [3, 4, 5], [6]]",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    #loop through the list1 list, and add a key with value as a tuple\n    unique_tuple = {}\n    for i in list1:\n        if type(i) == list:\n            tuple_i = tuple(i)\n            if tuple_i in unique_tuple.keys():\n                unique_tuple[tuple_i] += 1\n            else:\n                unique_tuple[tuple_i] = 1\n    \n    return unique_tuple\n",
        "test": "assert     unique_sublists([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7]) == {(1, 1), (2, 3), (4, 5), (6, 7)}",
        "num_ids": 2564,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    solution = list(combinations(test_list, 2))\n    for i in range(len(solution)):\n        solution[i] = solution[i][0] + solution[i][1]\n    return solution\n",
        "test": "assert     find_combinations([(1,2,3,4,5),(6,7,8,9),(10,11,12)]) == \\",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert     count_divisors(2) == 1",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = []\n    length = len(arr)\n    for i in range(1, length):\n        if i%2!= 0:\n            odd_length.append(arr[i-1:i+1])\n    sum_odd_length = 0\n    for odd_sub in odd_length:\n        sum_odd_length += sum(odd_sub)\n    return sum_odd_length\n",
        "test": "assert odd_length_sum([1,2,3,4]) == (0+1+2+3+4), \"Odd length sum function fails\"",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    \n    if min_rgb == max_rgb:\n        return 0, 0, 0\n    \n    delta = max_rgb - min_rgb\n    \n    if max_rgb == r:\n        h = (g - b) / delta\n    elif max_rgb == g:\n        h = 2 + ((b - r) / delta)\n    else:\n        h = 4 + ((r - g) / delta)\n    \n    h = h / 6\n    \n    if r == max_rgb:\n        s = delta / max_rgb\n    else:\n        s = delta / (max_rgb - min_rgb)\n    \n    v = max_rgb\n    \n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1096,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Create the output variable\n    product = 0\n    # Iterate over the given list\n    for num in list1:\n        # If odd\n        if num % 2!= 0:\n            # Find the product of both numbers\n            product = product * num\n            \n    # Return the product\n    return product\n",
        "test": "assert mul_even_odd([3,4,5]) == 0",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) is str and '(' in test_str and ')' in test_str:\n        test_str = test_str.replace('(','')\n        test_str = test_str.replace(')','')\n        test_str = test_str.split(',')\n        test_str = tuple(int(x) for x in test_str)\n        return test_str\n    else:\n        return tuple()\n",
        "test": "assert     tuple_str_int('(1, 2, 3, 4, 5)') == (1, 2, 3, 4, 5)",
        "num_ids": 946,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i]!= x:\n        return i\n    else:\n        return i + 1\n",
        "test": "assert     right_insertion([], 1) == 0",
        "num_ids": 2367,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.search('ab.*?b',text)\n    if text:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('abab') == True",
        "num_ids": 2362,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = []\n    tuple_list = test_list.split()\n    tuple_list.append(test_str)\n    return tuple_list\n    # I would also like to do this without using the built in list function\n    # for this exercise\n",
        "test": "assert ",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(n % 2 == 0 for i, n in enumerate(nums) if i % 2 == 0)\n",
        "test": "assert     even_position([1,2,3,4,5]) == False",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    return tuple(i for i in test_tup if i!= (0,0))\n    \ntest_tup = (0,0,1,(1,1,1),2)\nprint(remove_nested(test_tup))\n",
        "test": "assert     remove_nested((1, 2, (3, 4, 5))) == (1, 2, (3, 4, 5))",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list:\n        if type(i) is list:\n            count = count + 1 \n    return count \n",
        "test": "assert     count_list([]) == 0, \"Your function count_list() fails to return 0\"",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start=0\n    end=len(arr)-1\n    while(start<=end):\n        mid=(start+end)//2\n        if(arr[mid]==x):\n            return mid\n        elif(x<arr[mid]):\n            end=mid-1\n        else:\n            start=mid+1\n    return -1\n    \nprint(last([2, 3, 4, 5, 7, 8, 9, 11, 13, 14], 7))\n",
        "test": "assert     last([1, 2, 3, 4, 5], 5) == 4",
        "num_ids": 2465,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #TODO: Write your function here\n    return re.findall(r'a.+b',text)\n",
        "test": "assert text_starta_endb(\"aaaaa\") == \"aaaaa\"",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total = total + i\n    return total\n",
        "test": "assert     return_sum({'a': 0}) == 0",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n + sum_odd(n-2)\n        \nsum_odd(3)\nsum_odd(4)\n",
        "test": "assert     sum_odd(2) == 2",
        "num_ids": 2277,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum=sum+arr[i]\n    return sum\n",
        "test": "assert     _sum([1, 2, 3]) == 6",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert isinstance(n,int) and isinstance(d,int)\n    return ((n<<d)|(n>>(32-d)))\n    \n",
        "test": "assert ",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \" \".join(text.split())\n",
        "test": "assert     remove_all_spaces(' ') == ''",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    z=int(z)\n    return int(x==y==z)\n",
        "test": "assert     test_three_equal(3,3,3) == 1",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr)==0 or arr==None:\n        return 0\n    #max_element = max(arr)\n    #min_element = min(arr)\n    #print(\"max_element = \",max_element)\n    #print(\"min_element = \",min_element)\n    #print(\"arr = \",arr)\n    if max(arr) - min(arr) == len(arr)-1:\n        return 0\n    #else:\n    #    print(\"else\")\n    count = 0\n    for i in range(1,len(arr)):\n        #print(\"i = \",i)\n        if arr[i] < arr[i-1]:\n            #print(\"yes\")\n            count += 1\n    #print(\"count = \",count)\n    return count\n",
        "test": "assert     count_rotation([-1, 2, 3, 4, 5]) == 0",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0):\n        return False\n    x = n\n    sq = 0\n    while (x >= 1):\n        sq = sq + (x % 10)**2\n        x = x // 10\n    return sq == n\n",
        "test": "assert     is_perfect_square(3) == False, \"is_perfect_square is not behaving correctly\"",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n",
        "test": "assert     is_product_even([]) == False",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_val = 0\n    max_idx = 0\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_val:\n                max_val = lists[i][j]\n                max_idx = j\n    return max_val, max_idx\n",
        "test": "assert ",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    res = []\n    if len(test_str) == 1:\n        return 1\n    else:\n        res.append(1)\n        for i in range(1,len(test_str)):\n            if test_str[i] == test_str[i-1]:\n                res.append(1)\n            else:\n                res.append(max(1,res[-1]))\n        return max(res)\n",
        "test": "assert     max_run_uppercase(\"aA\") == 1",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "test": "assert     first_odd([]) == None, 'Empty list'",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #convert to set\n    set_test_tup = set(test_tup)\n    if (len(set_test_tup) == K):\n        print(f'{test_tup} contains {K}')\n        return True\n    else:\n        print(f'{test_tup} does not contain {K}')\n        return False\n",
        "test": "assert     check_K(((1, 2), (2, 3)), 1) == False, '2nd Test Case'",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    flag = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            flag = False\n            break\n    return flag\n",
        "test": "assert     check_smaller(('a','b','c', 'd', 'e'), ('g','h','i', 'j', 'k')) == False",
        "num_ids": 670,
        "indeed": true
    }
]