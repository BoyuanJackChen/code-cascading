[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common = []\n    i = 0\n    while i < len(test_tup1) and i < len(test_tup2):\n        if test_tup1[i] == test_tup2[i]:\n            common.append(test_tup1[i])\n        i += 1\n    return common\n",
        "test": "assert     similar_elements([1, 2, 3], [3, 4]) == []",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return False\n                break\n        else:\n            return True\n        return False\n    else:\n        return False\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n",
        "test": "assert     is_not_prime(4) == False, \"4 should be an exception\"",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return hq.nlargest(n,nums)\n",
        "test": "assert     heap_queue_largest([4,3,2,1],4) == [4,3,2,1]",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x!= 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            return False\n    return True\n",
        "test": "assert     is_Power_Of_Two(4) == True",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    x = re.findall('[a-zA-Z]+', text)\n    result = []\n    for i in x:\n        if len(i) >= 4:\n            result.append(i)\n    return result\n",
        "test": "assert     find_char_long('  short short') == ['short','short']",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x*x for x in nums]\n",
        "test": "assert     square_nums([1, 2, 3]) == [1, 4, 9], \"Square all elements of a list.\"",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    no_rotations=0\n    length=len(str)\n    if length==0:\n        return no_rotations\n    if length==1:\n        return 1\n    if str[0]!=str[1]:\n        no_rotations=1\n    for i in range(1,length):\n        if str[i]!=str[i-1]:\n            no_rotations+=1\n    return no_rotations\n",
        "test": "assert     find_Rotations('') == 0, \"Empty string is not rotated\"",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code here\n    return s.replace(s[0], \"\")\n",
        "test": "assert     remove_Occ(s = \"apple\", ch = \"a\") == \"pple\"",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x:sum(x))\n    return M\n",
        "test": "assert     sort_matrix([[1,2],[3,4]]) == [[1, 2], [3, 4]]",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #Input parameters:\n    #l: length of the base\n    #b: base of the triangle\n    #h: height of the triangle\n    #Output:\n    #Volume of the triangular prism\n    \n    V = l * b * h\n    return V\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     find_Volume(1,2,3) == 6",
        "num_ids": 2567,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-zA-Z_]',text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"ThisIsAText_\") == True",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "test": "assert     square_perimeter(0)     ==     0",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = string[:256]\n    string2 = string[256:]\n    string = string1\n    for c in string2:\n        if c in string:\n            string = string.replace(c,'')\n    return string\n    \ndef list_to_str(string):\n    '''\n    Write a function to check if a given string is a substring of another string or not.\n    '''\n    string1 = string[:256]\n    string2 = string[256:]\n    string = string1\n    for c in string2:\n        if c in string:\n            string = string.replace(c,'')\n        else:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(arraynums.count(i) > 1 for i in arraynums)\n",
        "test": "assert     test_duplicate([1,2,3]) is False",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 5:\n        return True\n    elif x == 7:\n        return True\n    elif x == 9:\n        return True\n    elif x == 11:\n        return True\n    elif x == 13:\n        return True\n    elif x == 17:\n        return True\n    elif x == 19:\n        return True\n    elif x == 23:\n        return True\n    elif x == 29:\n        return True\n    elif x == 31:\n        return True\n    elif x == 37:\n        return True\n    elif x == 41:\n        return True\n    elif x == 43:\n        return True\n    elif x == 47:\n        return True\n    elif x == 53:\n        return True\n    elif x == 59:\n        return True\n    elif x == 61:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(123) == False, \"check the correctness\"",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        rev_num = (rev_num * 10) + (num % 10)\n        num = num // 10\n    \n    if(num == rev_num):\n        return True\n    else:\n        return False\n",
        "test": "assert rev(4) == -2",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in arr:\n        if int(i) > max :\n            max = int(i)\n    return max\n",
        "test": "assert     find_Max_Num([1]) == 1",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -x > -y or -y > -x\n",
        "test": "assert     opposite_Signs(-1, 1) == True, 'x = -1, y = 1, it should be True'",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return ((1+(8*n-1)**0.5)/2)\n",
        "test": "assert     is_octagonal(1) == 1, \"is_octagonal(1) should return 1\"",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    \n    for i in range(len(s)):\n        d[s[i]] += 1\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if (d[s[i]] + d[s[j]] == len(s)):\n                count += 1\n    \n    return count\n",
        "test": "assert     count_Substrings(\"\") == 0, \"Not correct\"",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = min(xs)\n    return x\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    x = max(xs)\n    return x\n    \ndef median_num(xs):\n    '''\n    Write a python function to find median number in a list.\n    '''\n    if len(xs)%2!= 0:\n        x = sorted(xs)[len(xs)//2]\n    else:\n        x = (sorted(xs)[len(xs)//2-1] + sorted(xs)[len(xs)//2])/2\n    return x\n    \ndef length_of_string(x):\n    '''\n    Write a python function to find length of a string.\n    '''\n    return len(x)\n    \ndef reverse_string(x):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return x[::-1]\n    \ndef max_in_list(xs):\n    '''\n    Write a python function to find max in list.\n    '''\n    x = max(xs)\n    return x\n    \ndef min_in_list(xs):\n    '''\n    Write a python function to find min in list.\n    '''\n    x = min(xs)\n    return x\n    \ndef sum_of_list(xs):\n    '''\n    Write a python function to find sum of a list.\n    '''\n    x = sum(xs)\n    return x\n    \ndef print_list(xs):\n    '''\n    Write a python function to print a list.\n    '''\n    for x in xs:\n        print(x)\n        \ndef print_list_in_reverse(xs):\n    '''\n    Write a python function to print a list in reverse.\n    '''\n    for x in xs[::-1]:\n        print(x)\n        \ndef square_list(xs):\n    '''\n    Write a python function to square a list.\n    '''\n    for x in range(len(xs)):\n        xs[x] = xs[x]**2\n    return xs\n    \ndef first_and_last_element_of_list(xs):\n    '''\n    Write a python function to find first and last element of a list.\n    '''\n    x = xs[0]\n    x = xs[len(xs)-1]\n    return x\n    \ndef average_of_list(xs):\n    '''\n    Write a python function to find average of a list.\n    '''\n    total = 0\n    for x in xs:\n        total += x\n    return total/len(xs)\n    \ndef find_the_index_of_element(x,xs):\n    '''\n    Write a python function to find the index of element in a list.\n    '''\n    for i in range(len(xs)):\n        if x == xs[i]:\n            return i\n    return -1\n    \ndef second_largest_element_in_list(xs):\n    '''\n    Write a python function to find second largest element in a list.\n    '''\n    x = largest_num(xs)\n    if x == largest_num(xs):\n        x = largest_num(xs)\n    return x\n    \ndef nth_largest_element_in_list(xs, n):\n    '''\n    Write a python function to find the nth largest element in a list.\n    '''\n    x = sorted(xs)[len(xs)-n]\n    return x\n    \ndef second_smallest_element_in_list(xs):\n    '''\n    Write a python function to find second smallest element in a list.\n    '''\n    x = smallest_num(xs)\n    if x == smallest_num(xs):\n        x = smallest_num(xs)\n    return x\n    \ndef nth_smallest_element_in_list(xs, n):\n    '''\n    Write a python function to find the nth smallest element in a list.\n    '''\n    x = sorted(xs)[n-1]\n    return x\n    \ndef remove_duplicates(xs):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    x = list(set(xs))\n    return x\n    \ndef fibonacci_series(n):\n    '''\n    Write a python function to print fibonacci series upto n terms.\n    '''\n    f = 1\n    s = 0\n    while f<n:\n        x = f+s\n        print(x)\n        f = s\n        s = x\n    return x\n    \ndef fibonacci_recursive(n):\n    '''\n    Write a python function to print fibonacci series upto n terms.\n    '''\n    if n<0:\n        return 'please input positive integer'\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1)+fibonacci_recursive(n-2)\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n<0:\n        return 'please input positive integer'\n    elif n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef factorial_recursive(n):\n    '''\n    Write a python function to calculate factorial of a given number.\n    '''\n    if n<0:\n        return 'please input positive integer'\n    elif n == 0:\n        return 1\n    else:\n        return n*factorial_recursive(n-1)\n    \ndef nth_prime_number(n):\n    '''\n    Write a python function to find nth prime number.\n    '''\n    x = 2\n    while True:\n        if is_prime(x):\n            if x == n:\n                break\n            x += 1\n        else:\n            x += 1\n    return x\n    \ndef is_prime(x):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if x==1:\n        return False\n    elif x==2:\n        return True\n    elif x%2==0:\n        return False\n    else:\n        for i in range(3,int(x**0.5)+1,2):\n            if x%i==0:\n                return False\n        return True\n    \ndef string_concatenation(x, y):\n    '''\n    Write a python function to concatenate strings.\n    '''\n    return x+y\n    \ndef string_repetition(x, y):\n    '''\n    Write a python function to check if a given string repeats itself or not.\n    '''\n    return y in x*2\n    \ndef string_rotation(x, y):\n    '''\n    Write a python function to check if a given string rotates with a given shift.\n    '''\n    return y in x[len(x)-y:]+x[:len(x)-y]\n    \ndef palindrome_rotation(x, y):\n    '''\n    Write a python function to check if a given string rotates with a given shift.\n    '''\n    return y in x[len(x)-y:]+x[:len(x)-y]\n    \ndef count_vowels_in_string(x):\n    '''\n    Write a python function to count vowel in a given string.\n    '''\n    if len(x)<=0:\n        return 'please input a string'\n    elif 'a' in x:\n        return x.count('a')\n    elif 'e' in x:\n        return x.count('e')\n    elif 'i' in x:\n        return x.count('i')\n    elif 'o' in x:\n        return x.count('o')\n    elif 'u' in x:\n        return x.count('u')\n    else:\n        return 0\n    \ndef convert_string_to_list(x):\n    '''\n    Write a python function to convert string to list.\n    '''\n    if len(x)<=0:\n        return 'please input a string'\n",
        "test": "assert     smallest_num([0,0,0,0,0,0]) == 0",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        if test_list[i+1]-test_list[i] > max_diff:\n            max_diff = test_list[i+1]-test_list[i]\n    return max_diff\n",
        "test": "assert ",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return subjectmarks\nprint(subject_marks([(3,'aaa'),(2,'bbb'),(1,'ccc'),(0,'ddd'),(5,'eee')]))\n",
        "test": "assert     subject_marks([(1,'a'),(2,'b'),(3,'c')]) == [(1,'a'),(2,'b'),(3,'c')]",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([1, 2, 3])     == 6",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return (len([i for i in list if i > 0 ]))\n",
        "test": "assert     pos_count([-4,3,5,-2,4,6,-5]) == 4",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def dfs(n, s, dp):\n        if n == 1:\n            return 1\n        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if s < 0:\n            return 0\n        if dp[s]!= -1:\n            return dp[s]\n        ret = 0\n        ret += dfs(n - 1, s - 1, dp)\n        ret += dfs(n - 1, s + 1, dp)\n        dp[s] = ret\n        return dp[s]\n    \n    dp = [-1] * n\n    return dfs(n, n - 1, dp)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    \n    # the sorted array is formed from the sorted list in reverse \n    for i in range(len(A)): \n        if i == len(A) - 1:\n            break\n        if A[i] >= A[i + 1]: \n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert is_Monotonic([1, 2, 1, 2]) == False",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(l)\n    m = len(s)\n    if m > n:\n        return False\n    if m < n:\n        return False\n    for i in range(0, n - m + 1):\n        if l[i:i+m] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1, 2, 3, 4, 5], [2, 4, 5]) == False",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    i = 0\n    is_equal = True\n    while i < len(Input) and is_equal:\n        if len(Input[i])!= len(Input[0]):\n            is_equal = False\n        else:\n            i += 1\n    return is_equal\n",
        "test": "assert     find_equal_tuple(((1, 2), (3, 4), (5, 6))) == True",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    arr = nums\n    arr_len = len(arr)\n    arr_sorted = arr\n    swapped = False\n    while(True):\n        if(swapped == False):\n            for i in range(arr_len):\n                if(i == arr_len - 1):\n                    break\n                elif(arr[i] > arr[i+1]):\n                    swapped = True\n                    arr_sorted[i], arr_sorted[i+1] = arr_sorted[i+1], arr_sorted[i]\n        if(swapped == False):\n            break\n    return arr_sorted\n",
        "test": "assert     comb_sort([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1135,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    temp=n\n    s1=0\n    s2=0\n    while(temp!=0):\n        a=temp%10\n        temp=temp//10\n        s1=s1+a**2\n        s2=s2+a\n    if(s1==s2):\n        return True\n    else:\n        return False\n",
        "test": "assert     dif_Square(8) == False, \"The number 8 cannot be represented by the difference of two squares\"",
        "num_ids": 2340,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def same(i, j):\n        return colors[i] == patterns[j]\n    \n    if len(colors)!= len(patterns): return False\n    if len(patterns) == 0: return True\n    \n    i = 0\n    for j in range(len(patterns)):\n        if same(i, j):\n            i += 1\n        else:\n            return False\n    \n    return True\n",
        "test": "assert     is_samepatterns([\"red\", \"blue\", \"green\"], [\"blue\", \"green\", \"red\"]) == False",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for elem in test_list:\n        if all(elem[i] % K == 0 for i in range(len(elem))):\n            result.append(elem)\n    return result\n",
        "test": "assert     find_tuples([(1,2),(3,4),(5,6)], 3) == []",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 ==0\n",
        "test": "assert is_Diff(11) == True",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Remove pass and write your logic here\n    \n    if (len(s)%2)==0:\n        print(\"word length is odd\")\n    else:\n        print(\"word length is even\")\n        \ns = \"hello world\"\nword_len(s) \n",
        "test": "assert     not word_len(\"abdd\")",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)/2\n",
        "test": "assert ",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\n",
        "test": "assert     volume_sphere(1.0) == math.pi * 4/3 * 1.0**3, \"Volume of a sphere with radius 1.0 should be pi*4/3*1.0**3\"",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for i in strr:\n        ans = ans + ord(i)\n    return ans%26\n",
        "test": "assert     get_Char(\"\") == 0",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0,1]\n    for i in range(2,n+1):\n        seq.append(seq[i-1]+seq[i-2])\n    return seq[n]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_area = 4*math.pi*(r**2)\n    return sphere_area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    sphere_volume = (4/3)*math.pi*(r**3)\n    return sphere_volume\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        raise ValueError('n must be > 0')\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1 + sqrt(3) / 2\n    else:\n        return 1 + sqrt(3) / 2 + 1 / (2 * n - 1) * (1 - sqrt(3) / 2)\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3.update(dict1)\n    dict3.update(dict2)\n    return dict3\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = {**dict1, **dict2}\n    return dict3\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge one dictionary into another dictionary.\n    '''\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3\ndef nested_dict(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_2(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    for key,value in dict1.items():\n        dict2[key] = value\n    return dict2\ndef nested_dict_3(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_4(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict2.update(dict1)\n    dict2.update(dict1)\n    dict2.update(dict1)\n    return dict2\ndef nested_dict_5(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_6(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_7(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_8(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_9(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_10(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_11(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_12(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    return dict1\ndef nested_dict_13(dict1, dict2):\n    '''\n    Write a function that can take a dictionary with nested items and return a dictionary with the same items but with the nested items flattened.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update(dict2)\n    dict1.update",
        "test": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 1, 'd': 2}, {}) == {'a': 1, 'b': 2, 'c': 1, 'd': 2}",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] in dict1:\n            dict1[list1[i]] += 1\n        else:\n            dict1[list1[i]] = 1\n    return dict1\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 6287,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    elif N == 1:\n        return 0\n    else:\n        if N % 2 == 0:\n            return N//2\n        else:\n            return (N-1)//2 + 1\n",
        "test": "assert     closest_num(0) ==     0",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    try:\n        max_len = 0\n        for x in list1:\n            if len(x) > max_len:\n                max_len = len(x)\n        return max_len\n    except:\n        print(\"Sorry, we have no data on this topic.\")\n        \ndef len_doc(list1):\n    '''\n    Write a python function to find the length of the document.\n    '''\n    try:\n        max_len = 0\n        for x in list1:\n            if len(x) > max_len:\n                max_len = len(x)\n        return max_len\n    except:\n        print(\"Sorry, we have no data on this topic.\")\n",
        "test": "assert     len_log(['hello', 'world']) == 5,'space between words'",
        "num_ids": 615,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for sub in sub_str:\n        if sub in str1:\n            return True\n    return False\n",
        "test": "assert     find_substring('yay','ay') == True",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%7==0 or n%7==1:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_undulating(3) == False",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert     power(1,2) == 1, 'power: 1^2 = 1'",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][1]\n    for i in test_list:\n        if i[1] < minimum:\n            minimum = i[1]\n            test_list.remove(i)\n            test_list.append((i[0],minimum))\n    return test_list[0]\n",
        "test": "assert     index_minimum([(\"w\", 1), (\"y\", 3), (\"z\", 5)]) == (\"w\", 1)",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000000\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n",
        "test": "assert     Find_Min_Length([[1], [2], [3], [4,5]]) == 1",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert     divisor(1) == 1, '1 must have exactly one divisor'",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict.keys():\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "test": "assert     frequency_lists([[1,2,3],['a','b','c'],['a','b','d']]) == {1:3, 'a':2, 'b':2, 'c':1, 'd':1}",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)\n",
        "test": "assert     multiply_num([0,0,0,0,0]) == 0",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = \"\"\n    while n > 0:\n        s = str(n % 2) + s\n        n = n // 2\n    return s\n",
        "test": "assert ",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 2:\n        return num\n    min_palindrome = 2 * num\n    while min_palindrome < 10**7:\n        if min_palindrome % 2 == 0:\n            min_palindrome += 1\n        else:\n            break\n    return min_palindrome\n    \nclass Heap:\n    def __init__(self):\n        self.heap_list = []\n    def __str__(self):\n        return str(self.heap_list)\n    def push(self,val):\n        '''\n        Adds a new element to the heap.\n        '''\n        self.heap_list.append(val)\n        self.sift_up(len(self.heap_list)-1)\n    def pop(self):\n        '''\n        Removes the smallest element from the heap.\n        '''\n        if len(self.heap_list) == 0:\n            return None\n        min = self.heap_list[0]\n        self.heap_list[0] = self.heap_list[-1]\n        self.heap_list.pop()\n        self.sift_down(0)\n        return min\n    def sift_up(self,i):\n        '''\n        Swaps the value of the current element with its parent element\n        until the value of the parent element is smaller than its value.\n        '''\n        parent = (i - 1)//2\n        while i > 0 and self.heap_list[parent] > self.heap_list[i]:\n            self.heap_list[parent], self.heap_list[i] = self.heap_list[i], self.heap_list[parent]\n            i = parent\n            parent = (i - 1)//2\n    def sift_down(self,i):\n        '''\n        Swaps the value of the current element with its child element\n        until the value of the child element is smaller than its value.\n        '''\n        left = 2 * i + 1\n        right = 2 * i + 2\n        smallest = i\n        if len(self.heap_list) > left and self.heap_list[left] < self.heap_list[smallest]:\n            smallest = left\n        if len(self.heap_list) > right and self.heap_list[right] < self.heap_list[smallest]:\n            smallest = right\n        if i!= smallest:\n            self.heap_list[i], self.heap_list[smallest] = self.heap_list[smallest], self.heap_list[i]\n            self.sift_down(smallest)\n    def get_min(self):\n        '''\n        Returns the minimum value in the heap.\n        '''\n        return self.heap_list[0]\n",
        "test": "assert ",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n",
        "test": "assert kth_element([1,2,3,4,5], 1) == 1, \"Wrong Answer\"",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = ''.join(x.title() for x in word.split('_'))\n    return s\n",
        "test": "assert     snake_to_camel('snake_') =='snake_case', 'Wrong'",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    elif m == 1:\n        return n\n    else:\n        return eulerian_num(n - 1, m + 1) + eulerian_num(n - 1, m - 1)\n",
        "test": "assert ",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n",
        "test": "assert     sort_sublists(['a','b','c']) == ['a','b','c']",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == True:\n            count += 1\n    return count\n",
        "test": "assert     count([False, False, True]) == 1",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n",
        "test": "assert     add_lists([], (4,5,6)) == (4,5,6)",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #Your code here\n    arr = sorted(num1+num2+num3)\n    return arr\n",
        "test": "assert     merge_sorted_list([],[],[1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(0,len(s)):\n            if int(s[j]) % 2!= 0:\n                count += 1\n            if int(s[j]) == 0:\n                break\n            if j == len(s) - 1:\n                if int(s[j]) % 2 == 0:\n                    count += 1\n    return count\n    \n",
        "test": "assert odd_Equivalent(\"1110111\",1) == 3, \"Wrong Output\"",
        "num_ids": 2462,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(0, len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]).issubset(nestedlist[j]):\n                result.append(nestedlist[i])\n                print('common elements: ', result)\n",
        "test": "assert     common_in_nested_lists([]) ==     None",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert not check_integer('A')",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i.values():\n            return False\n        else:\n            return True\n",
        "test": "assert     empty_dit([{'a':2},{'b':2},{'c':1}]) == False, \"Dictionary should be empty\"",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n    # s = 0\n    # for i in nums:\n    #     s += i\n    # return s\n",
        "test": "assert     tuple_to_int((1, 2)) == 3",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) == int or type(test_list[i]) == float:\n            test_list[i] = float(test_list[i])\n    return test_list\n",
        "test": "assert     list_to_float([[1.0,2.0],[3.0,4.0]]) == [[1.0,2.0],[3.0,4.0]]",
        "num_ids": 2885,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"a b c\") == [\"a\", \"b\", \"c\"], \"First test case failed!\"",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    temp = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]!= temp:\n            return temp\n        else:\n            temp = arr[i]\n    return temp\n",
        "test": "assert     search([1,1,2,2,3,4,5]) == 1, \"Should be 1\"",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Create list to store results\n    max_product = 0\n    # Create a variable to store results\n    max_abs_product = 0\n    # Loop through the list of tuples\n    for tuple_num in list1:\n        # Get the maximum and minimum numbers from the tuple\n        maximum = max(tuple_num)\n        minimum = min(tuple_num)\n        # Compare each to the previous maximum and minimum\n        if maximum > max_product:\n            max_product = maximum\n        if minimum < max_abs_product:\n            max_abs_product = minimum\n    # Return the maximum and minimum product\n    return (max_product, max_abs_product)\n",
        "test": "assert     max_product_tuple([(1, 2), (2, 2), (3, 2), (1, 3), (-1, -2), (2, -2)]) == (3, -2), 'wrong result'",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    summation = 0\n    for num in range(1, limit + 1):\n        amicable = []\n        for num2 in range(num + 1, limit + 1):\n            if sum(amicable) == num and sum(amicable)!= num:\n                amicable_numbers.append(num)\n            if sum(amicable) == num2 and sum(amicable)!= num2:\n                amicable_numbers.append(num2)\n            if num == num2:\n                continue\n            if num2 in amicable:\n                amicable.remove(num2)\n            if num not in amicable:\n                continue\n            else:\n                amicable.remove(num)\n    for number in amicable_numbers:\n        summation += number\n    return summation\n",
        "test": "assert     amicable_numbers_sum(4) == 0",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    return cmath.phase(a+b)\n",
        "test": "assert     angle_complex(0,0) == 0, \"angle_complex(0,0) == 0\"",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    max_diff = 0\n    \n    for i in range(1, len(string)):\n        if string[i] == '0':\n            if string[i - 1] == '0':\n                continue\n            elif string[i - 1] == '1':\n                diff = i - i - 1\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n",
        "test": "assert find_length('.10101010') == -3",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    c = math.gcd(a,b)\n    return a+b-c\n",
        "test": "assert     sum(10,10)==10, \"Sum should be 10\"",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(1, 3) == 3",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) >= n:\n            new_list.append(word)\n    return new_list\n",
        "test": "assert long_words(1, [\"a\",\"b\"]) == [\"a\",\"b\"]",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def is_magic_square(matrix):\n        if len(matrix)!= len(matrix[0]):\n            return False\n        if len(matrix)!= (len(matrix[0]) * len(matrix)):\n            return False\n        for i in range(len(matrix)):\n            count = 0\n            for j in range(len(matrix[i])):\n                if matrix[i][j]!= matrix[j][i]:\n                    count += 1\n            if count > 1:\n                return False\n        for i in range(len(matrix)):\n            count = 0\n            for j in range(len(matrix[i])):\n                if matrix[j][i]!= matrix[i][j]:\n                    count += 1\n            if count > 1:\n                return False\n        return True\n    if is_magic_square(my_matrix):\n        return \"Yes\"\n    return \"No\"\n",
        "test": "assert     magic_square_test([[4, 9, 2], ",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    max_value = -float('inf')\n    max_key = None\n    for i in nums:\n        d[i] += 1\n        if d[i] > max_value:\n            max_value = d[i]\n            max_key = i\n    return max_key\n",
        "test": "assert     max_occurrences([1,1,1,2,3,4,1,1,1,1,1,1,1,1]) == 1",
        "num_ids": 850,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new = str1.lower()\n    i=0\n    j=len(new)-1\n    while i < j:\n        if new[i] not in 'aeiou':\n            i+=1\n        elif new[j] not in 'aeiou':\n            j-=1\n        else:\n            new = new[:i]+new[j]+new[i+1:j]+new[i]+new[j+1:]\n            i+=1\n            j-=1\n    return new\n",
        "test": "assert     reverse_vowels(\"\") == \"\"",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = \"\".join(tup1)\n    return tup_str\n",
        "test": "assert     tup_string(()) == ''",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for i in nums:\n        if i < 0:\n            sum_neg += i\n    return sum_neg\n",
        "test": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -15",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 0\n    while (num*2)**2 < n:\n        num += 1\n    return num*2**(1/3)\n",
        "test": "assert     hexagonal_num(0) == 0 ",
        "num_ids": 2310,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero = 0\n    zeroes = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            non_zero += 1\n        else:\n            zeroes += 1\n    return zeroes/non_zero\ndef array_count(arr):\n    '''\n    Write a function to count the number of times an integer occurs in an array\n    of integers.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i]:\n            count += 1\n    return count\ndef average(nums):\n    '''\n    Write a function to compute the average of all elements in the given array.\n    '''\n    return sum(nums)/len(nums)\ndef min_num(nums):\n    '''\n    Write a function to compute the minimum number in an array of integers.\n    '''\n    min_num = nums[0]\n    for i in range(len(nums)):\n        if nums[i] < min_num:\n            min_num = nums[i]\n    return min_num\ndef max_num(nums):\n    '''\n    Write a function to compute the maximum number in an array of integers.\n    '''\n    max_num = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n    return max_num\ndef is_power_of(n):\n    '''\n    Write a function to test whether a given number is a power of a given number.\n    '''\n    n = int(n)\n    if n!= 0:\n        while n!= 1:\n            if n == 1:\n                return True\n            if n % 2!= 0:\n                return False\n            n = n/2\n    return False\ndef reverse_list(nums):\n    '''\n    Write a function to reverse the order of the given list.\n    '''\n    nums.reverse()\n    return nums\ndef find_max_val(arr):\n    '''\n    Write a function to find the maximum value in the given array.\n    '''\n    max_val = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val\ndef merge_sort(nums):\n    '''\n    Write a function to sort the given list of integers using merge sort.\n    '''\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums)//2\n    left = nums[0:mid]\n    right = nums[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    nums = merge(left, right)\n    return nums\ndef merge(arr1, arr2):\n    '''\n    Write a function to merge the given lists of integers.\n    '''\n    i = j = 0\n    merged_arr = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged_arr.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged_arr.append(arr2[j])\n        j += 1\n    return merged_arr\ndef is_palindrome(s):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    s = s.strip().lower()\n    return s == s[::-1]\ndef remove_duplicate_letters(s):\n    '''\n    Write a function to remove all duplicates letters from a given string s.\n    '''\n    a = []\n    for i in s:\n        if i not in a:\n            a.append(i)\n    return \"\".join(a)\ndef count_primes(n):\n    '''\n    Write a function to count the number of prime numbers in an interval of given size.\n    '''\n    count = 0\n    for i in range(n+1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n    return count\ndef remove_duplicate_letters2(s):\n    '''\n    Write a function to remove all duplicates letters from a given string s.\n    '''\n    return \"\".join(set(s))\ndef is_palindrome2(s):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    s = s.strip().lower()\n    return s == s[::-1]\ndef k_closest_points(points, K):\n    '''\n    Write a function to return the indices of K closest points in a given array of points.\n    '''\n    max_dist = 0\n    point_indices = []\n    for i in range(len(points)):\n        for j in range(i, len(points)):\n            dist = distance(points[i], points[j])\n            if dist > max_dist:\n                max_dist = dist\n                point_indices = []\n            if dist == max_dist:\n                point_indices.append(i)\n    point_indices.sort()\n    return point_indices[0:K]\ndef distance(p1, p2):\n    '''\n    Write a function to return the distance between two points.\n    '''\n    x = p1[0] - p2[0]\n    y = p1[1] - p2[1]\n    return abs(x**2 + y**2)**0.5\ndef group_anagrams(words):\n    '''\n    Write a function to group anagrams together.\n    '''\n    anagrams = []\n    for i in range(len(words)):\n        anagrams.append([])\n    for i in range(len(words)):\n        anagrams[i] = sorted(words[i])\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if sorted(words[i]) == sorted(words[j]):\n                anagrams[i] = anagrams[i] + words[j]\n                anagrams[j] = []\n    for i in range(len(anagrams)):\n        if len(anagrams[i])!= 0:\n            anagrams[i] = anagrams[i]\n    return anagrams\ndef count_odd_occurrences(nums):\n    '''\n    Write a function to count the number of odd occurrences of all the numbers in an array.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            count += 1\n    return count\ndef search_in_rotated_sorted_array(nums, target):\n    '''\n    Write a function to search a target value in a sorted rotated array.\n    '''\n    if len(nums) == 1:\n        return 0 if nums[0] == target else -1\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        mid = left + ((right - left) >> 1)\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < nums[right]:\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        else:\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n    if nums[left] == target:\n        return left\n    return -1\ndef rearrange_digits(nums):\n    '''\n    Write a function to rearrange the digits of an integer.\n    '''",
        "test": "assert ",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    \n    while (n > 0):\n        count += 1\n        n = n/2\n    \n    if(count == 0):\n        return False\n    \n    return True\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(0) == False, 'the input is 0, we should get False output'",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "test": "assert     circle_circumference(1) == math.pi * 2, f'Expected: {math.pi * 2}, got: {circle_circumference(1)}'",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    s = set()\n    for i in test_list:\n        if not type(i) == list:\n            s.add(i)\n        else:\n            s |= set(extract_singly(i))\n    return s\n",
        "test": "assert     extract_singly([[1, 2, 3, 4], ",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        j = 0\n        while j < i:\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n            j += 1\n",
        "test": "assert ",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    # for item in list1:\n    #     for item2 in list2:\n    #         for item3 in list3:\n    #             if item == item2 and item == item3:\n    #                 count += 1\n    # return count\n    for item1,item2,item3 in zip(list1,list2,list3):\n        if item1 == item2 and item1 == item3:\n            count += 1\n    return count\n",
        "test": "assert     count_samepair([1,2,1], [1,2,1], [1,2,1]) == 3, \"Wrong Answer\"",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List_Count = 0 \n    for i in Input: \n        if type(i) == list: \n            List_Count += 1 \n    return List_Count \n",
        "test": "assert     find_lists(('a',)) == 0, \"Expected 0 but got \" + str(find_lists(('a',)))",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    # arr = [-1, 2, 3, 4, -5]\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([-3, -6, -3, -3]) == 3, \"Wrong Answer\"",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # The polynomial is x^2 + 2ax + b. The discriminant is |b^2 - 4ax|.\n    # x^2 + 2ax + b = 0\n    # (-b +- sqrt(b^2 - 4ac)) / 2a\n    a = int(a)\n    b = int(b)\n    n = int(n)\n    if a == 0:\n        return None\n    else:\n        discriminant = b ** 2 - 4 * a * n\n        if discriminant < 0:\n            return None\n        else:\n            x1 = (-b - sqrt(discriminant)) / (2 * a)\n            x2 = (-b + sqrt(discriminant)) / (2 * a)\n            return (x1, x2)\n",
        "test": "assert     find_solution(1, 2, 5) == None",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "test": "assert     remove_elements([1,2,3,4], [5,5,5]) == [1,2,3,4]",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i\n        if i < n // 2:\n            sum -= i\n        else:\n            sum += i\n    return sum\n",
        "test": "assert sum_series(1) == 0",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi * (l * s)\n",
        "test": "assert",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    l = []\n    l.append(1)\n    i = 2\n    while i < n:\n        if n%i == 0:\n            l.append(i)\n            if n//i == i:\n                l.append(n//i)\n            else:\n                l.append(n//i)\n        i += 1\n    if sum(l) == n:\n        return True\n    else:\n        return False\n    ",
        "test": "assert     div_sum(6) == False",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        if (str1.upper()[i].isalpha()):\n            count = count+1\n    return count\n",
        "test": "assert     count_char_position(\"\") == 0, \"incorrect function\"",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    res = 0\n    while len(A) > 1:\n        if A[0] ^ A[1] == 0:\n            res += 1\n        A.pop(0)\n        A.pop(0)\n    return res\n",
        "test": "assert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0 ",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    result = 1\n    while(result <= n):\n        result = result << 1\n    return result - 1\n",
        "test": "assert     next_power_of_2(1) == 1",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n",
        "test": "assert     frequency([],2) == 0",
        "num_ids": 2322,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n",
        "test": "assert     sum_range_list([1, 2, 3], 1, 2) == 2",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5)/2\n",
        "test": "assert     perimeter_pentagon(2) == 5.0",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    count = 0\n    s = s.replace(' ','')\n    s = s.replace('.','')\n    s = s.replace(';',' ')\n    s = s.replace(',','')\n    s = s.replace('-',' ')\n    s = s.replace(':',' ')\n    s = s.replace('/',' ')\n    s = s.replace('\\n','')\n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('') == 0",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if test_tuple[0] == 'apple' and type(test_tuple[1]) == int and type(test_tuple[2]) == str and type(test_tuple[3]) == float and type(test_tuple[4]) == bool:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert     check_type(('Hello',2.0,'World')) == False, 'Type is same'",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # your code here\n    start_idx, end_idx = 0, n-1\n    return True if (start_idx + end_idx) % 2!= 0 else False\n",
        "test": "assert is_majority([1,2,3], 3, 2) == False",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert     count_Set_Bits(7) == 3, \"Wrong output\"",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(filter(lambda x: x in str and str.index(x) % 2 == 0,str))\n",
        "test": "assert ",
        "num_ids": 3003,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    a = (r - l) + 1\n    for i in range(0, a):\n        if (n & (1 << i))!= 0:\n            return False\n    return True\n    \n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(10,0,10) == False",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # edge case - empty list\n    if len(arr) == 0:\n        return arr\n",
        "test": "assert ",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = str1.replace(\" \", char)\n    return result\n",
        "test": "assert     replace_blank('','') == ''",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create an empty list\n    heap = []\n    # iterate over the list and append the items to the heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # iterate over the list and pop the items from the heap\n    for i in range(len(list1) - n, len(list1)):\n        heapq.heappop(heap)\n    return heap\n",
        "test": "assert larg_nnum([7, 8, 9, 5, 6, 1], 0) == [], \"Should be []\"",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of a cylinder\n    # Using the formula.\n",
        "test": "assert     lateralsuface_cylinder(60,20) == 10800",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 0\n",
        "test": "assert ",
        "num_ids": 2221,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for item in test_list:\n        d.setdefault(item, 0)\n        d[item] += 1\n    return d\n",
        "test": "assert     check_occurences([]) == {}",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= \"\":\n                count += 1\n    return count\n",
        "test": "assert     number_of_substrings(\"\") == 0, \"Should be 0.\"",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    #create an empty dictionary to hold all of the results\n    results = {}\n",
        "test": "assert ",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n",
        "test": "assert     replace_list([], []) == [], 'Wrong'",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac('Alphabet') == len('Alphabet')",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=int(math.sqrt(N))\n    while x*x<N:\n        x+=1\n    return x*x\n",
        "test": "assert     next_Perfect_Square(0) == 0, \"Wrong Answer\"",
        "num_ids": 2361,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    print('\\n\\nIn function max_sum')\n    print('arr = ', arr)\n    arr.sort()\n    print('arr = ', arr)\n",
        "test": "assert ",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.00001:\n            return new_guess\n        guess = new_guess\n        \n",
        "test": "assert     babylonian_squareroot(4) == 2.0",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    else:\n        dp_table = [[0 for i in range(len(str))] for j in range(len(str))]\n        for i in range(len(str)):\n            dp_table[i][i] = 1\n        for i in range(len(str)-1):\n            dp_table[i][i+1] = 2 if str[i] == str[i+1] else 1\n        for j in range(2, len(str)):\n            for i in range(len(str)-j):\n                dp_table[i][i+j] = max(dp_table[i][i+j-1], dp_table[i+1][i+j])\n                if str[i] == str[i+j]:\n                    dp_table[i][i+j] = max(dp_table[i][i+j], dp_table[i+1][i+j-1]+2)\n        return dp_table[0][len(str)-1]\n",
        "test": "assert     lps(\"\") == 0, \"Empty String\"",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n    \nprint(harmonic_sum(3))\nprint(harmonic_sum(4))\nprint(harmonic_sum(5))\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 245,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return set1.intersection(set2)\n",
        "test": "assert intersection_array([1,2,3],[1,3,5,7]) == set([1,3])",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X([1,2,3,4,5],1) == 1, \"test failed\"",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    while element in list:\n        list.insert(0,list[0])\n        del list[0]\n    list.insert(0,element)\n    return list\n",
        "test": "assert     insert_element([],10)==[10]",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if isinstance(numbers, complex):\n        a = numbers.real\n        b = numbers.imag\n        return (a,b)\n    else:\n        print(\"Wrong input\")\n",
        "test": "assert     convert(complex(1, 0)) == (1, 0)",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])\n",
        "test": "assert     count_integer([]) == 0, 'Input is empty'",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color = []\n    for i in range(n):\n        for combo in combinations_with_replacement(l, i + 1):\n            color.append(combo)\n    return color\n",
        "test": "assert     combinations_colors([1,2,3], 1) ==    [(1,),(2,),(3,)]",
        "num_ids": 2491,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True]*(n + 1)\n    is_prime[0], is_prime[1] = False, False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n + 1, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n    ",
        "test": "assert     count_Primes_nums(1) == 0, \"Test Case 2 Failed\"",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(7,5) == (5,7)",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]))\n",
        "test": "assert     maximize_elements((10, -5), (10, 20)) == (10, 20)",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #return False\n    if n<1:\n        raise ValueError(\"n cannot be less than 1\")\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    if n==4:\n        return 7\n    # first n-1 numbers are primes\n    p=0\n    i=1\n    while p+i<=n-1:\n        p+=i\n        i+=1\n    if p+i<n:\n        return False\n    m=i-1\n    #return primes\n    while p+i<n:\n        p+=m\n        m+=1\n        if p==n:\n            return False\n        if p%2==0:\n            p+=1\n        if p%3==0:\n            p+=1\n        if p%5==0:\n            p+=1\n    return False\n",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda i, j: i / j, test_tup1, test_tup2))\n",
        "test": "assert     division_elements((1,2,3),(6,7,8,9)) == (2,3,0)",
        "num_ids": 1229,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    \nprint(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n",
        "test": "assert     split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(0, len(S), step):\n        a.append(S[i:i+step])\n    return a\n    \ndef list_split_all(S):\n    '''\n    Write a function that takes in a list and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(0, len(S)):\n        a.append(S[i::])\n    return a\n",
        "test": "assert     list_split([0, 1, 2, 3, 4, 5, 6, 7, 8], 3) == [[0, 1, 2], [3, 4, 5], [6, 7, 8]]",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #function\n    return 6 * l**2\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        if (i % 2) == 1:\n            a = a + i**2\n    return a\n",
        "test": "assert ",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n+1)/2\n",
        "test": "assert     find_star_num(1) == 1, \"1\"",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) is not str:\n        return('No valid input')\n    else:\n        ascii_code = ord(k)\n        return(ascii_code)\n",
        "test": "assert     ascii_value('a') == 97, 'The first character is a'",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    i = 0\n    sum = 0\n    while i < len(arr):\n        if i % 2 == 0:\n            sum += arr[i]\n        i += 1\n    return sum\n",
        "test": "assert sum_even_and_even_index([]) == 0",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return (n**5)\n    '''\n    Odd Sum\n    '''\n",
        "test": "assert even_Power_Sum(1) == 1",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #solution\n    return [item[1] for item in test_list]\n",
        "test": "assert     rear_extract([]) == []",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (tuple(map(lambda x, y: x - y, test_tup1, test_tup2)))\n",
        "test": "assert     substract_elements( (1,1,1), (2,2,2)) == (0,0,0)",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        #print(i)\n        if i%2==0:\n            sum += math.factorial(n)/math.factorial(n-i)\n    return sum\nprint(even_binomial_Coeff_Sum(10))\n",
        "test": "assert     even_binomial_Coeff_Sum( 1) == 0",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = math.pi\n    volume = pi*r**2*h\n    return volume\n    \nprint(volume_cylinder(2,1))\nprint(volume_cylinder(2,3))\nprint(volume_cylinder(3,2))\n",
        "test": "assert     volume_cylinder(1, 1) == 3.141592653589793",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result\n",
        "test": "assert dict_filter({1:10,2:20,3:30},10) == {1:10,2:20,3:30}",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            n+=1\n    return n\n",
        "test": "assert     count_first_elements((1, 5, 1, 3, 4, 1)) == 3",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    while n > count:\n        n = int(count * (3 * count - 1) / 2)\n        count += 1\n    return n\n",
        "test": "assert ",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    \n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return True, pos\n    else:\n        return False, -1\n",
        "test": "assert     sequential_search([1, 2, 3, 4, 5, 6], 1) == (True, 0)",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([1]) == True",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    return [n1 - n2 for n1, n2 in zip(nums1, nums2)]\n",
        "test": "assert     sub_list([1,1,1], [1,1,1]) == [0,0,0]",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # traverse in the range of 0 to the n \n    for i in range(10): \n        print (n)\n        #  print the output in the form of string \n        print(i, \" : \", end =\"\") \n        # check the frequency of the digit in the number \n        if(n%i == 0): \n            print(i, end =\" \") \n    print() \n",
        "test": "assert ",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    elif list[0] == element:\n        return True\n    else:\n        return check_element(list[1:],element)\n",
        "test": "assert     check_element([3,4,5,6,7,8], 10) == False, \"check_element failed\"",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return True if re.search(\"[ab]+b\", text) else False\n",
        "test": "assert text_match_two_three(\"abb\") == True",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # s = sum(a[0:n])\n    # l = 0\n    # r = n - 1\n    # while l <= r:\n    #     if s < k:\n    #         if s + a[l] < k:\n    #             s = s + a[l]\n    #         l = l + 1\n    #     else:\n    #         if s + a[r] < k:\n    #             s = s + a[r]\n    #         r = r - 1\n    # return s\n    s = 0\n    r = n - 1\n    l = 0\n    while l <= r:\n        if l == r:\n            s = max(s, a[l])\n            l = l + 1\n            continue\n        if s < k:\n            s = max(s, a[l] + a[r])\n            l = l + 1\n        else:\n            s = max(s, a[r] + a[l])\n            r = r - 1\n    return s\n",
        "test": "assert     max_sub_array_sum_repeated([3,3,5,2,3], 3, 2) == 8, \"Should be 8\"",
        "num_ids": 1244,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares=0\n    for i in range(1,n+1):\n        if(i%2==0):\n            sum_of_squares=sum_of_squares+i**2\n    return sum_of_squares\n",
        "test": "assert     square_Sum(0) == 0, \"square_Sum(0) is wrong\"",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for sub_list in list1:\n        if max_len < len(sub_list):\n            max_len = len(sub_list)\n    return max_len\n",
        "test": "assert     max_length([[1, 2, 3], [4, 5], [6]]) == 3, \"failed\"",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # This is a dynamic programming based solution\n    memo = {}\n    def _count_no_of_ways(n, k, current, current_color, memo):\n        if n == 0:\n            return 1\n        if n == 1:\n            return k\n        if n == 2:\n            if current_color == current:\n                return 1\n            else:\n                return k\n        if (current, current_color) in memo:\n            return memo[(current, current_color)]\n        memo[(current, current_color)] = 0\n        for j in range(k):\n            if current_color == j:\n                temp = _count_no_of_ways(n-1, k, current + 1, current_color, memo)\n            else:\n                temp = _count_no_of_ways(n-1, k, current + 1, j, memo)\n            memo[(current, current_color)] = temp\n        return memo[(current, current_color)]\n    return _count_no_of_ways(n, k, 0, 0, memo)\n",
        "test": "assert count_no_of_ways(6, 1) == 1",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert     find(1,1) == 1",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2 - 2*w*h*math.sin(math.radians(90)))\n",
        "test": "assert     otherside_rightangle(3,2) == 1",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "test": "assert     max_val([-2, 7]) == 7",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divs += i\n    return divs\n",
        "test": "assert     sum_div(2) == 1",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                inversions+=1\n    return inversions\n    \n",
        "test": "assert     get_Inv_Count([5]) == 0, \"Array with only one element\"",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == None or len(list1) == 0:\n        return []\n    new_list = []\n    for x in list1:\n        if type(x) == list:\n            new_list.extend(flatten_list(x))\n        else:\n            new_list.append(x)\n    return new_list\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    for s, t in stdata:\n        d[s].append(t)\n    max_count = 0\n    max_value = 0\n    for i in d:\n        count = 0\n        tmp_sum = 0\n        for j in d[i]:\n            count += 1\n            tmp_sum += j\n        if tmp_sum > max_value:\n            max_value = tmp_sum\n        if tmp_sum > max_count:\n            max_count = tmp_sum\n    return max_count\n",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6)]) == 6",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def get_sum(arr, n): \n        sum = 0\n        for i in range(n): \n            sum += arr[i]\n        return sum \n    \n    def get_sum_rev(arr, n): \n        sum = 0\n        for i in range(n): \n            sum += arr[i]\n        return sum \n    \n    def find_count(n): \n        if n == 0: \n            return 0\n        arr = [0] * (2*n) \n        arr[n] = 1\n        count = 0\n        for i in range(n, 2*n): \n            arr[i] = 1\n            sum = get_sum(arr, i)\n            if get_sum_rev(arr, i) == sum: \n                count += 1\n        return count \n    return find_count(n)\n",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    left, right = 0, len(arr)\n    while left <= right :\n        mid = (left+right)//2\n        if arr[mid] == index :\n            for i in range(rotations) :\n                if mid < len(arr) :\n                    mid += 1\n                else :\n                    mid = 0\n            return mid\n        elif arr[mid] < index :\n            left = mid + 1\n        else :\n            right = mid - 1\n    return -1\n",
        "test": "assert     find_Element([1,2,3,4,5,6,7],1,0,2) == 1,'return 1 is incorrect'",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0],words[1]\n",
        "test": "assert     start_withp([\"Programmer\", \"Python\", \"pynative\"]) == (\"Programmer\", \"Python\"), \"Fail\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # base case:\n    if index == n:\n        return 0\n    \n    # idea:\n    # max_sum = a[index]\n    # if index >= k:\n    #     max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index+1, k) + a[index])\n    # return max_sum\n",
        "test": "assert     max_sum_increasing_subseq([1], 0, 0, 0) == 0",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex)\n    #print(type(tuplex))\n    colon = []\n    if m>0:\n        colon.append(tuplex[0])\n    for i in range(1,m):\n        if i<m:\n            colon.append(tuplex[i])\n    #print(colon)\n    if n>0:\n        colon.append(tuplex[-1])\n    #print(colon)\n    #print(len(colon))\n    return tuple(colon)\ndef fcmp(x,y):\n    '''\n    Compares two numbers x and y, ignoring their sign.\n    '''\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x < 0:\n        x = -x\n    if y < 0:\n        y = -y\n    if x < y:\n        return -1\n    if x == y:\n        return 0\n    if x > y:\n        return 1\n",
        "test": "assert     colon_tuplex((1,2),1,2) == (1,2)",
        "num_ids": 2363,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # first we sort nums1 and nums2.\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    # set the result as -1 since there are no result.\n    result = -1\n    \n    # start with len1 = len2 = 1 because we need to choose 1 from both lists.\n    i = 1\n    j = 1\n    \n    # while i < len(nums1) and j < len(nums2):\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] > nums2[j]:\n            result = max(result, nums1[i] * nums2[j])\n            i += 1\n        elif nums1[i] < nums2[j]:\n            result = max(result, nums1[i] * nums2[j])\n            j += 1\n        else:\n            i += 1\n            j += 1\n    \n    # lastly we need to take care of the last one.\n    while i < len(nums1):\n        result = max(result, nums1[i] * nums2[j])\n        i += 1\n        \n    while j < len(nums2):\n        result = max(result, nums1[i] * nums2[j])\n        j += 1\n    \n    return result\n",
        "test": "assert     large_product([9,4,7,8,3,2], [2,4,1,2], 2) == 80",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(10,20) == 20, \"Should be 20\"",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        lst.append(str1[i])\n    return tuple(lst)\n",
        "test": "assert     string_to_tuple(\"abcd\") == (\"a\", \"b\", \"c\", \"d\")",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Base case \n    if n == 0: \n        return 1\n    # Bitwise AND operation \n    return (n & (~n + 1)) \n",
        "test": "assert     set_left_most_unset_bit(11) == 1",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.14\n    v = pi * r**2 * h\n    return v\nprint(volume_cone(1,2))\n",
        "test": "assert     volume_cone(0,2) == 0",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    i = 1\n    while i <= n:\n        power += 1\n        i = i << 1\n    return power\n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(1) == 2",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(string)\n    return list_\n",
        "test": "assert     add_string([], \"\") == []",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0 or len(l2) == 0 or len(l3) == 0:\n        return None\n    for i in range(len(l1)):\n        if len(l2) == 0 or len(l3) == 0:\n            return None\n        d1 = {l1[i]: l2[i], l3[i]: l3[i]}\n        d1.update(d2)\n        d3 = {l1[i]: d1}\n        d2 = {l2[i]: d2}\n        d3.update(d2)\n    return d3\n",
        "test": "assert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['1', '2', '3']) == {",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # dynamic programming\n    if n == 0:\n        return 0\n    if n < 5:\n        return n\n    if n < 10:\n        return (n + 1) * (n + 2) // 2\n    \n    return max(get_max_sum (n//2), get_max_sum (n//3), get_max_sum (n//4), get_max_sum (n//5), n)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    result = -1\n    \n    for item in input_list:\n        if max_length < len(item):\n            max_length = len(item)\n            result = item\n    \n    return result\n",
        "test": "assert     max_length_list([]) == -1",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # return not any(element for element in test_tup)\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n",
        "test": "assert     check_distinct(('a', 'b', 'c', 'a'))    ==    False",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = []\n    for i in str1:\n        if i not in chars:\n            chars.append(i)\n        else:\n            continue\n    return chars[0]\n",
        "test": "assert     first_non_repeating_character('kkkkkkkk') == 'k'",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n        \n        \n        \n        \n",
        "test": "assert     check_char('a') == True, 'Please check your code'",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a, b, c]\n    num_list.sort()\n    num_list = num_list[1:]\n    if len(num_list) % 2 == 0:\n        median = (num_list[int((len(num_list)) / 2) - 1] + num_list[int((len(num_list)) / 2)]) / 2\n    else:\n        median = num_list[int((len(num_list)) / 2)]\n    return median\n",
        "test": "assert     median_numbers(5,5,5) == 5, \"incorrect function output\"",
        "num_ids": 3012,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    lst = list(map(int, nums))\n    return sum([num % 10 for num in lst])\n",
        "test": "assert     sum_of_digits([0]) == 0",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n",
        "test": "assert     bitwise_xor((0, 0), (0, 0)) == (0, 0)",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    return len(set(tuple(row) for row in test_list))\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 2572,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(i1 + i2 for i1, i2 in zip(test_tup1, test_tup2))\n",
        "test": "assert     add_nested_tuples((10, 20, 30), (40, 50, 60)) == (50, 70, 90)",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    return b\nprint(minimum(2,3))\n",
        "test": "assert     minimum(0,0) == 0",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex((0,1,2),(0,1,2)) == True, \"Fail\"",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    return (x & 1)\n",
        "test": "assert     find_Parity(7) == True, 'Test 1 Failed'",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    l = len(n)\n    for i in range(l-1, -1, -1):\n        if int(n[i]) < int(n[i-1]):\n            return int(n[:i-1]+str(int(n[i-1])+1)+n[i+1:])\n    return int(n[0]+str(int(n[1:])+1))\n",
        "test": "assert     rearrange_bigger(56) == 566",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    def partition(nums,l,r):\n        pivot = nums[l]\n        left = l+1\n        right = r\n        while left <= right:\n            while left <= r and nums[left] <= pivot:\n                left+=1\n            while right > l and nums[right] > pivot:\n                right-=1\n            if left <= right:\n                nums[left],nums[right] = nums[right],nums[left]\n        nums[l],nums[right] = nums[right],nums[l]\n        return right\n    def k_smallest(nums1,nums2,k):\n        l = 0\n        r = len(nums2)\n        while l <= r:\n            p = partition(nums1,l,r)\n            if p+1 == k:\n                return nums1[p]\n            elif p+1 < k:\n                l = p+1\n            else:\n                r = p - 1\n    return k_smallest(nums1,nums2,k)\n",
        "test": "assert     k_smallest_pairs([4,5,2,3], [3,1,5,4], 2) == [[2,3],[3,1]]",
        "num_ids": 1690,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # print(list1)\n    minimum = 0\n    # list1 = sorted(list1, key=lambda x: x[0])\n    # print(list1)\n    for i in range(len(list1)):\n        # print(list1[i])\n        for j in range(i+1, len(list1)):\n            # print(list1[j])\n            if list1[i][0] * list1[j][0] < minimum:\n                minimum = list1[i][0] * list1[j][0]\n            # print(i, j, minimum)\n    # print(minimum)\n    return minimum\n",
        "test": "assert min_product_tuple([(1, 2), (1, 3)]) == min_product_tuple([(1, 2), (2, 3)]) == min_product_tuple([(1, 2), (2, 2)]) == 0",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n    \ndef sum_val(listval):\n    '''\n    Write a function to find the sum of the values in a given heterogeneous list.\n    '''\n    sum_val = 0\n    for i in listval:\n        sum_val = sum_val + i\n    return sum_val\n    \ndef avg_val(listval):\n    '''\n    Write a function to find the average of the values in a given heterogeneous list.\n    '''\n    return sum_val(listval) / len(listval)\n",
        "test": "assert     min_val([2,5,3]) == 2",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    output = words[0]\n    for word in words[1:]:\n        output = output + word.title()\n    return output\n",
        "test": "assert     snake_to_camel('package_and_module_name') == 'packageAndModuleName'",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for num in l:\n        if num % 2!= 0:\n            odd.append(num)\n    return odd\n",
        "test": "assert     remove_odd([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([1,2,3], 1) == 2",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4,5],[1,2,3,4,5]) == True, 'Identical'",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    curr_product = 1\n    \n    for i in range(len(arr)-1):\n        curr_product = max(arr[i], arr[i+1])\n        max_product = max(max_product, curr_product)\n    return max_product\n",
        "test": "assert     max_Product([1,2,3,4,6]) == 6 ",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    final_list = []\n    for i in range(0, len(Input)):\n        final_list.append(Input[i][0])\n        final_list.append(Input[i][1])\n    final_list.sort()\n    return final_list[0]\n",
        "test": "assert     group_tuples(Input=[('a','b'),('c','d')]) == 'a'",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            return lst[i]\nlst = [['a', 'b', 'c', 'd'], ['m', 'n', 'k', 'j', 'o'], ['p', 'q', 'e']]\nprint('Max element is', Find_Max(lst))\n'''\nOutput:\nMax element is ['p', 'q', 'e']\n'''\n",
        "test": "assert ",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    sum_of_numbers = sum(list1)\n    return round(sum_of_numbers / length)\n    \ndef round_and_sum_2(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(round(x / len(list1)) for x in list1)\n    \ndef reverse(list1):\n    '''\n    Write a function to reverse a given list of numbers.\n    '''\n    return list1[::-1]\n",
        "test": "assert round_and_sum([0,0,0,0,0]) == 0",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    print(\"Cube Sum of\",n,\"natural numbers:\",(n*(n+1)*(2*n+1))/6)\n    return (n*(n+1)*(2*n+1))/6",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = ''\n    for item in test_tup:\n        res += str(item) + '-'\n    return res[:-1]\n",
        "test": "assert     concatenate_tuple(('a')) == 'a', 'incorrect'",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1])\n",
        "test": "assert     extract_rear(('a', 'b', 'c')) == (0, )",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return 1 if x == list1[0] else 0\n    if x == list1[0]:\n        return 1 + count_element_in_list(list1[1:],x)\n    if x!= list1[0]:\n        return count_element_in_list(list1[1:],x)\n",
        "test": "assert     count_element_in_list([[1, 2, 3], [1, 2], [1, 2, 3], [1, 2]], 4) == 0",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0,nums))\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = re.split('-|:',dt)\n    return '-'.join([d[2],d[1],d[0]])\n",
        "test": "assert     change_date_format('2020-01-01') == '01-01-2020'",
        "num_ids": 1469,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap >= 1:\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n",
        "test": "assert     shell_sort([1,2,3,4,5]) == None",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i and j for i, j in zip(test_tup1, test_tup2))\n",
        "test": "assert ",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (c - b**2 / a) / (2 * a)\n",
        "test": "assert     parabola_directrix(1,2,2) == (1, 1)",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for item in list1:\n        if item in list2:\n            common_list.append(item)\n    if len(common_list) == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     common_element([1,2,3,4], [1,2,4,5]) == True",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    q1 = area/2\n    q2 = area/2\n    \n    median = q2 + q2 - q1\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        if median > 0:\n            return median\n        elif median < 0:\n            return 0\n        else:\n            return median\n    else:\n        return 0\n        \n        \ndef median_trapezium_round(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        return area/2\n    else:\n        return area/2\n    \ndef median_trapezium_fast(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        if area > 0:\n            return area/2\n        elif area < 0:\n            return 0\n        else:\n            return area/2\n    else:\n        return 0\n    \ndef median_trapezium_fast_2(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    #base1 = 3\n    #base2 = 4\n    #height = 4\n    #q1 = 1\n    #q2 = 2\n    #q3 = 3\n    \n    #area = base1*base2\n    #median = area/2\n    \n    area = base1*base2\n    \n    if height == 0:\n        return 0\n    elif height > 0:\n        if area > 0:\n            return area/2\n        elif area < 0:\n            return 0\n        else:\n            return area/2\n    else:\n        return 0\n",
        "test": "assert     median_trapezium(4,6,8) == 12, \"Incorrect\"",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([1,2,3], 2) == True",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'(a.*?b.*?\\ba.*?)', text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_one('aa') == False",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert     last_Digit(22) == 2",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    ans = []\n    for i in list1:\n        if i < 0:\n            ans.append(i)\n    return ans\n",
        "test": "assert     neg_nos([-1,-2,-3,-4]) == [-1,-2,-3,-4], 'Wrong output'",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n",
        "test": "assert     remove_odd('a') == ''",
        "num_ids": 2411,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for tup in test_list:\n        if tup[0] < tup[1]:\n            count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2),(3,4)]) == 2",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "test": "assert     multiple_to_single([1]) == 1",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.finditer(r\"(?i)[a-zA-Z]*\\b(?:ad|to)\\b(?:\\s|\\,\\s|\\.)*\",text)\n    return result\n",
        "test": "assert     find_adverb_position('This sentence is having an adverb but it should be the last adverb') == True ",
        "num_ids": 4589,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n",
        "test": "assert     surfacearea_cube(4) == 41",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums:\n        total = 0\n        for i in range(0, len(nums)):\n            if nums[i] > 0:\n                total += 1\n        return total\n    else:\n        return 0\n",
        "test": "assert     positive_count([]) == 0, \"Should be 0\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    n = len(list1)\n    largest_neg = float('-inf')\n    for i in range(n):\n        if list1[i] < 0 and list1[i] > largest_neg:\n            largest_neg = list1[i]\n    return largest_neg\n",
        "test": "assert     largest_neg([-5, -2, -7, 0, -10, 2]) == -2",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for elem in test_list:\n        if len(elem) == K:\n            new_list.append(elem)\n    return new_list\n",
        "test": "assert     trim_tuple([], 0) == []",
        "num_ids": 1240,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert     index_multiplication((1,2), (3,4)) == (3, 8), \"error 1\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return(Counter(lst).items())\nprint(count_Occurrence((1,3,4), [3,4,4,3]))\n",
        "test": "assert     count_Occurrence(tup=(10, 20, 10, 30, 40), lst=[10, 10, 20, 20, 30]) == 4",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(0,len(nums)):\n        nums[i]=nums[i]**3\n    return nums\n    \ncube_nums([1,2,3,4,5])\n",
        "test": "assert     cube_nums([1, 2, 3]) == [1, 8, 27], \"Incorrect value of cube_nums for 1, 8, 27\"",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 2211,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n",
        "test": "assert     extract_string([ \"hi\", \"hello\", \"world\" ], 2) == [\"hi\", \"hello\"]",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n",
        "test": "assert     remove_whitespaces('   a') == 'a'",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert    loss_amount(100,100) == 0",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n) :\n        if (n%i==0) : \n            if (i%2==0) : \n                sum=sum+i \n    return sum \n",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matches = re.findall(r'\\bz\\w+', text)\n    return matches\n",
        "test": "assert     text_match_wordz('zebra')",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in month_days:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(50) == False",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # for x in stringlist:\n    #     x = x[::-1]\n    for i, x in enumerate(stringlist):\n        stringlist[i] = x[::-1]\n    return stringlist\n",
        "test": "assert     reverse_string_list([\"A\"]) == [\"A\"]",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    l = []\n    for i in range(0, len(lst)-1):\n        l.append(lst[i+1]-lst[i])\n    return l.index(min(l))\n",
        "test": "assert     Find_Min([1]) == 1",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\nprint(rectangle_area(6,8))\n",
        "test": "assert     rectangle_area(2,2) == 4",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase('this is a test') == 'this is a test', 'incorrect'",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    n = len(lst)\n    for i in range(n):\n        lst[i] = lst[i][0]\n    return lst\n",
        "test": "assert ",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr('lowercase') == 0",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combs = [[]]\n    for i in list1:\n        for j in range(len(combs)):\n            combs.append(combs[j]+[i])\n    return combs\n",
        "test": "assert     combinations_list([]) == [[]]",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = arr[0]\n    curr_max = arr[0]\n    for num in arr[1:]:\n        curr_max = max(curr_max * num, num)\n        max_so_far = max(curr_max, max_so_far)\n    return max_so_far\n",
        "test": "assert     max_subarray_product([-2, -3, -1, -3, -2, 2, 1]) == 6, \\",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values())!= 1:\n        return False\n    return True\n",
        "test": "assert     check_value({ 'a': 1, 'b': 1, 'c': 2 }, 3) == False, 'incorrect'",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    res = {}\n    for key, value in dict1.items():\n        if value:\n            res[key] = value\n    return res\n",
        "test": "assert     drop_empty({}) == {}, \"No empty dictionary\"",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    curr_max, max_prod = arr[0], arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max * arr[i])\n        max_prod = max(curr_max, max_prod)\n        \n    return max_prod\n        \n        \nprint(max_product([3, 5, 6]))\nprint(max_product([-1, 0, 2, -3, -5]))\nprint(max_product([3, 0, 2, -3, -5]))\n",
        "test": "assert     max_product([1, 2, 3, 4]) == 24",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    def pairwise(a):\n        return tuple(a[i]+a[i+1] for i in range(len(a)-1))\n",
        "test": "assert     add_pairwise((2,4,6)) == (4,8,10)",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = prod * num\n    return prod % n\n",
        "test": "assert     find_remainder([1,2,3], 7) == 6, \"Wrong output\"",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #x=set(l)\n    #y=list(x)\n    #print(y)\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]==l[j]:\n                return False\n    return True\nprint(check_Consecutive([1,2,2,4,5,1]))",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5]) == True, \"Not correct\"",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return tuple(intersection)\n",
        "test": "assert     tuple_intersection(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd')",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #str1=str1.replace(ch,newch)\n    #str1=str1.replace(ch,newch)\n    #return str1\n    str1=str1.replace(ch,'')\n    return str1\n",
        "test": "assert     replace_char(\"\", \"s\",\"a\") == \"\"",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # return dict(sorted(dict1.items(), key=lambda item: item[1]))\n    \n    # second method\n    return dict(sorted(dict1.items(), key=lambda x: -x[1]))\n",
        "test": "assert     sort_counter({1:2, 3:4, 2:4}) == {2:4, 1:2, 3:4}",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max + min\n",
        "test": "assert     big_sum([1,1,1,1,1,1,1,1]) == 5, \"Wrong output\"",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('RADHIKESH') == 'radhikesh', 'passed'",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code here\n    return str1.replace(str1.lower(),'')\n",
        "test": "assert     remove_lowercase('sdfasdf') == ''",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2!= 0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     Split([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [1,3,5,7,9,11,13,15], 'Wrong result'",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    sum1=0\n    for i in range(1,n+1):\n        sum1+=i\n    return sum-sum1\n",
        "test": "assert     difference(0) == 0, \"Test Case 1: Expected 0, Actual \" + str(difference(0))",
        "num_ids": 2465,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1, N+1):\n        if (i % 2)!= A[i-1]:\n            count += 1\n    return count \n",
        "test": "assert     find_Odd_Pair([1,2,3],3) == 2, \"Wrong\"",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    for i in range(10):\n        if n1 % 10 == n2 % 10:\n            diff_sum += 0\n        else:\n            diff_sum += abs(n1 % 10 - n2 % 10)\n        n1 = int(n1/10)\n        n2 = int(n2/10)\n    return diff_sum\n",
        "test": "assert     digit_distance_nums(12, 13) == 1",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = 0\n    s = 0\n    for i in range(0, size):\n        s += a[i]\n        if s < 0:\n            s = 0\n        elif s > max_sub:\n            max_sub = s\n    return max_sub\n",
        "test": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 8) == 6",
        "num_ids": 646,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    \n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup.append(i)\n    \n    for i in test_tup2:\n        if i not in union_tup:\n            union_tup.append(i)\n    \n    return sorted(union_tup)\n    \n    \ndef main():\n    \n    print('\\n\\n--------Union Elements----------\\n')\n    \n    tup1 = (1, 1, 2, 3, 3, 4, 5)\n    tup2 = (2, 2, 4, 5, 6)\n    \n    print(f'Union of the 2 tuples {tup1} and {tup2} is: {union_elements(tup1, tup2)}')\n    print(f'Union of the 2 tuples {tup1} and {tup2} is: {union_elements((1, 2, 3, 4, 5), (2, 4, 6))}')\n    \n    \nif __name__ == \"__main__\":\n    main()\n",
        "test": "assert     union_elements((1,2,3),(4,5)) == (1,2,3,4,5)",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for item in lst:\n        if len(item)>max:\n            max = len(item)\n    return max\n",
        "test": "assert    Find_Max_Length([[1, 2], [1, 2], [1, 2]]) == 2",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    quot_list = re.findall(r\"\\\"(.+?)\\\"\",text)\n    return quot_list\n",
        "test": "assert     extract_values(\"what is the first apple's weight?\") == 'first'",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] > arr[j]):\n                count = count +1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4,5],1) == 0",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('abcd') == ['a', 'b', 'c', 'd']",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    num = int(n)\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num = int(num / 10)\n    return sum\n    # n = int(input())\n    # print(sum_digits(n))\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 2306,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list_length = len(list1)\n    if list_length == 1:\n        return True\n    for i in range(list_length):\n        if i == list_length - 1:\n            return True\n        if list1[i] > list1[i + 1]:\n            return False\n",
        "test": "assert     issort_list([1, 2, 3]) == True",
        "num_ids": 2340,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    empty_list = []\n    for x in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        sublists = []\n        for j in range(len(list1[i])):\n            if(list1[i][j]!=''):\n                sublists.append(list1[i][j])\n        sublists.sort()\n        list1[i] = sublists\n    return list1\n",
        "test": "assert     sort_sublists([['ab','cd'],['ac','bd'],['cc','dd']]) == [['ab','cd'],['ac','bd'],['cc','dd']]",
        "num_ids": 1046,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique = []\n    for num in nums:\n        if num not in unique:\n            unique.append(num)\n    return unique\n",
        "test": "assert     two_unique_nums([1,2,3,4,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    unique_list = []\n    for item in list_data:\n        if item in unique_list:\n            continue\n        else:\n            unique_list.append(item)\n            product = product * item\n    return product\n",
        "test": "assert     unique_product([1,2,2]) == 2",
        "num_ids": 2559,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = (3.14159*r**2)\n    b = (2*3.14159*r*h)\n    c = (h*2*3.14159)\n    d = (2*3.14159*r*h)\n    e = (3.14159*r**2)\n    f = ((a + b + c + d) - e)\n    s = (f/2)\n    return s\n",
        "test": "assert surfacearea_cylinder(1,0) == 0, \"surfacearea_cylinder() is wrong\"",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(i in A for i in B)\n",
        "test": "assert     is_Sub_Array([1, 2, 3], [4, 5, 6]) == False, \"Error, Output:\" + str(is_Sub_Array([1, 2, 3], [4, 5, 6]))",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0: \n        return 0\n    last_digit = 0\n    while (n!= 0): \n        last_digit = n % 10\n        n = n // 10\n    return last_digit\n",
        "test": "assert     last_Digit_Factorial(1013) == 1",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n",
        "test": "assert     interleave_lists([], [], []) == []",
        "num_ids": 941,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(i for i in test_tup1 if i not in test_tup2)\n",
        "test": "assert     find_dissimilar((1,2,4,5,8), (2,3,4,5,8)) == (4,5,6)",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    out_tuple = []\n    for i in test_tuple:\n        if even_fnc(i):\n            out_tuple.append(i)\n    return tuple(out_tuple)\n",
        "test": "assert even_ele(test_tuple, even_fnc) == (2, 3, 4, 5, (2, 3, 4, 5)) ",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = (b * s) / 2\n    return 4 * a\n",
        "test": "assert     surface_Area(10,10) == 200, \"incorrect\"",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "test": "assert my_dict({\"one\" : 1, \"two\" : 2}) == False, \"Error 3\"",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base case\n    if num == 0:\n        return 1\n    # recursive case\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i)*catalan_number(num-1-i)\n        return result\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    text = text.split()\n    for i,word in enumerate(text):\n        if \"ly\" in word:\n            result.append(i)\n    return result\n",
        "test": "assert     find_adverbs(\"The wind tossed the dogs out of their trees.\") == \"The wind\"",
        "num_ids": 1699,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    heap = []\n    for i in items:\n        if len(heap) < n:\n            heapq.heappush(heap,(-i[1],i))\n        elif i[1] > heap[0][0]:\n            heapq.heapreplace(heap,(-i[1],i))\n    for i in heap:\n        result.append(i[1])\n    return result\n",
        "test": "assert expensive_items([], 2) == []",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == len(l):\n        return l\n    return l[:n] + l[n:].insert(0, l[n])\n",
        "test": "assert     split_Arr([1,2,3,4], 4) == [[1,2,3,4]]",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3), \"List to tuple fails\"",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) <= 1:\n        return max(nums) - min(nums)\n    return max(nums) - min(nums[:len(nums)-1])\n",
        "test": "assert     big_diff([-10, -10, 10, 10, -10, 10, 10, 10]) == 20, \"should return 20\"",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return a if a**0.5==int(a**0.5) else perfect_squares(a-b,b)\n",
        "test": "assert perfect_squares(1,1) == 1",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x**2+y**2)**0.5, x*y\n    \ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x**2+y**2)**0.5, 2*x*y\n    \ndef square(x):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return x*x\n",
        "test": "assert     polar_rect(1,0) == (1,0)",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length < 1:\n        return newList\n    else:\n        newList[0], newList[length - 1] = newList[length - 1], newList[0]\n        return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 2429,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    def binomial_coeff(n,k): \n        if n > k: \n            return binomial_coeff(n-1,k) + binomial_coeff(n-1,k-1) \n        elif n == k: \n            return 1\n        else: \n            return 0\n    coeff = 0\n    for i in range(n+1): \n        coeff += binomial_coeff(n,i)\n    return coeff \n",
        "test": "assert     binomial_Coeff(0,0) == 1, \"Error in binomial_Coeff\"",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #if ip == '0.0.0.0' or ip == '0.0.0.0':\n    #    return ip\n    a = ip.split('.')\n    #print(a)\n    b = int(a[0])\n    if b == 0:\n        return '0.'+a[1]+'.'+a[2]+'.'+a[3]\n    else:\n        return ip\ndef normalize_ip(ip):\n    '''\n    Write a function to normalize IPv4 addresses to 12 bits (for the range 0-255).\n    '''\n    #return ip\n    #a = ip.split('.')\n    #b = a[0]\n    #if b== '0':\n    #    a.insert(0,0)\n    #    a.pop()\n    #    c = '.'.join(a)\n    #    return c\n    #else:\n    #    return ip\n    ip = ip.split('.')\n    a = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        a = 255\n        ip[1] = str(a)\n    else:\n        a = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        a = 255\n        ip[2] = str(a)\n    else:\n        a = b\n    c = a + (b<<8) + (c<<16) + (d<<24)\n    d = '.'.join(ip)\n    return d\ndef set_to_binary(ip):\n    '''\n    Write a function to turn an IP address into a string of its binary representation.\n    '''\n    ip = ip.split('.')\n    #return ''.join(map(lambda x:str(int(x)),ip))\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        c = 127\n        ip[0] = str(c)\n    else:\n        c = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        d = 255\n        ip[1] = str(d)\n    else:\n        d = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        e = 255\n        ip[2] = str(e)\n    else:\n        e = b\n    if ip[3] == '0':\n        ip[3] = 1\n    b = int(ip[3])\n    if b > 255:\n        f = 255\n        ip[3] = str(f)\n    else:\n        f = b\n    if ip[4] == '0':\n        ip[4] = 1\n    b = int(ip[4])\n    if b > 255:\n        g = 255\n        ip[4] = str(g)\n    else:\n        g = b\n    c = ip[0]+ip[1]+ip[2]+ip[3]+ip[4]\n    d = '.'.join(map(str,ip))\n    return '.'.join([str(int(x,2)),str(int(y,2)),str(int(z,2)),str(int(aa,2)),str(int(bb,2)),str(int(cc,2)),str(int(dd,2)),str(int(ee,2)),str(int(ff,2)),str(int(gg,2))])\ndef set_to_decimal(ip):\n    '''\n    Write a function to turn an IP address into a decimal integer.\n    '''\n    ip = ip.split('.')\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        d = 255\n        ip[1] = str(d)\n    else:\n        d = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        e = 255\n        ip[2] = str(e)\n    else:\n        e = b\n    if ip[3] == '0':\n        ip[3] = 1\n    b = int(ip[3])\n    if b > 255:\n        f = 255\n        ip[3] = str(f)\n    else:\n        f = b\n    if ip[4] == '0':\n        ip[4] = 1\n    b = int(ip[4])\n    if b > 255:\n        g = 255\n        ip[4] = str(g)\n    else:\n        g = b\n    c = ip[0]+ip[1]+ip[2]+ip[3]+ip[4]\n    d = '.'.join(map(str,ip))\n    return c\ndef set_to_octal(ip):\n    '''\n    Write a function to turn an IP address into an octal integer.\n    '''\n    ip = ip.split('.')\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    if b > 255:\n        d = 255\n        ip[1] = str(d)\n    else:\n        d = b\n    if ip[2] == '0':\n        ip[2] = 1\n    b = int(ip[2])\n    if b > 255:\n        e = 255\n        ip[2] = str(e)\n    else:\n        e = b\n    if ip[3] == '0':\n        ip[3] = 1\n    b = int(ip[3])\n    if b > 255:\n        f = 255\n        ip[3] = str(f)\n    else:\n        f = b\n    if ip[4] == '0':\n        ip[4] = 1\n    b = int(ip[4])\n    if b > 255:\n        g = 255\n        ip[4] = str(g)\n    else:\n        g = b\n    c = ip[0]+ip[1]+ip[2]+ip[3]+ip[4]\n    d = '.'.join(map(str,ip))\n    return c\ndef set_to_hex(ip):\n    '''\n    Write a function to turn an IP address into a hexadecimal integer.\n    '''\n    ip = ip.split('.')\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    if ip[0] == '0':\n        ip[0] = 1\n    b = int(ip[0])\n    if b > 127:\n        a = 127\n        ip[0] = str(a)\n    else:\n        a = b\n    if ip[1] == '0':\n        ip[1] = 1\n    b = int(ip[1])\n    i",
        "test": "assert     removezero_ip('0.0.0.0.0') == '0.0.0.0'",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_no = 0\n    odd_no = 0\n    for i in range(len(list1)):\n        if i%2==0:\n            even_no = even_no + list1[i]\n        else:\n            odd_no = odd_no + list1[i]\n    return abs(even_no-odd_no)\n    \nprint(diff_even_odd([4, 5, 6, 7, 8, 9]))\n",
        "test": "assert     diff_even_odd([1,2,3,4]) == 2",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0 \n    for i in range(0,len(str1)) : \n        if(str1[i]!= str2[i]) : \n            count += 1\n    return count \n",
        "test": "assert     min_Swaps('10','10') == 0",
        "num_ids": 1419,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    return len(tuple_list)\n",
        "test": "assert     tuple_size([]) == 0, 'tuple_size: incorrect return value'",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            #print(first_arr, mid_point, last_arr, arr1, arr2, k, arr1[mid_point], arr2[mid_point])\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v2(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v3(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v4(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v5(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v6(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v7(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mid_point] == k:\n                    return mid_point\n                else:\n                    if arr1[mid_point] < k:\n                        first_arr = mid_point + 1\n                    else:\n                        last_arr = mid_point - 1\n            elif arr1[mid_point] > arr2[mid_point]:\n                last_arr = mid_point - 1\n            else:\n                first_arr = mid_point + 1\n        return None\n    \n    if not arr1 or not arr2:\n        return None\n    return binarySearch(arr1, arr2, k)\n    \n    \ndef find_kth_v8(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binarySearch(arr1, arr2, k):\n        first_arr = 0\n        last_arr = len(arr1) - 1\n        while first_arr <= last_arr:\n            mid_point = (first_arr + last_arr) // 2\n            if arr1[mid_point] == arr2[mid_point]:\n                if arr1[mi",
        "test": "assert     find_kth([1,2,3,4,5,6,7,8,9,10],",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    summation = 0\n    while number > 0:\n        digit = number % 10\n        summation += digit ** 3\n        number = number // 10\n    return True if summation == number else False\n",
        "test": "assert     armstrong_number(15) == False, 'failed'",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n",
        "test": "assert     sum_average(1001) == 3.0, 'WRONG RESULT'",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n    ",
        "test": "assert     is_Even(10) == True",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = []\n    for i in str1:\n        if i in lst:\n            return i\n        else:\n            lst.append(i)\n    return None\n",
        "test": "assert     first_repeated_char('papa') == 'p'",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(n):\n        if is_ludic(i):\n            ludics.append(i)\n    return ludics\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 2439,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "test": "assert     reverse_words('') == ''",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(3) == True",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n",
        "test": "assert     radian_degree(90) == math.pi/2",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group())\n    \ndef find_all_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group())\n    \ndef find_all_matches(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group())\n    \ndef find_all_matches_groups(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group())\n        print(i.groups())\n    \ndef find_all_matches_group(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group())\n        print(i.group(group))\n        \ndef find_all_matches_group_indexes(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.start())\n        print(i.group(group))\n        \ndef find_all_matches_group_indexes_with_span(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_groups_with_span(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span())\n        \ndef find_all_matches_groups_with_span_group(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_groups_with_span_group_indexes(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.group())\n        print(i.start())\n        print(i.end())\n        \ndef find_all_matches_with_match_object_group(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.group(group))\n        \ndef find_all_matches_with_match_object_group_indexes(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span_group(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span_group_indexes(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span_group_indexes_with_span(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span_group_indexes_with_span_group(text, pattern, group):\n    '''\n    Write a function to search a string for a regex pattern. The function should return all matching substrings, the start and end indexes, and the number of matches.\n    '''\n    pattern = re.compile(pattern)\n    res = pattern.finditer(text)\n    for i in res:\n        print(i.span(group))\n        \ndef find_all_matches_with_match_object_group_indexes_with_span_group_indexes_with_span_group_indexes(text, pattern, grou",
        "test": "assert     find_literals(",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + n\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #code here\n    s = list1[:L] + list1[L+1:]\n    return s\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 4) == [1,2,3,4]",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val\n",
        "test": "assert ",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return None\n    lst = sorted(lst)\n    merged = []\n    merged.append(lst[0])\n    merged.append(lst[1])\n    return merged\n",
        "test": "assert     merge([[1,2],[3,4]]) == [[1,2],[3,4]]",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    s = 0\n    for i in range(len(test_list)):\n        s += test_list[i]\n    return s\n",
        "test": "assert     cummulative_sum([1,2,3,4]) == 10, \"The result should be 10\"",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        avg = total / len(nums[i])\n        nums[i] = (avg, )\n    return nums\nprint(average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]))\n",
        "test": "assert     average_tuple(()) == ()",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(t1 % t2 for t1, t2 in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1, 2), (1, 2)) == (0, 0)",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps == 0 or d == 0): \n        return 0\n    if (steps == 1 or d == 1): \n        return 1\n    if (d == 0 or d == 1): \n        return 2\n    n = 0\n    for j in range(1, d): \n        if (steps - j >= 0): \n            n = n + min(j, min_Jumps(steps - j, d)) \n    return n\n",
        "test": "assert     min_Jumps(1,0) == 0",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l1 = nums1[:]\n    l2 = nums2[:]\n    len_1 = len(l1)\n    len_2 = len(l2)\n    count = 0\n    if len_1<len_2:\n        for i in range(len_2-len_1):\n            l1.append(0)\n    elif len_1>len_2:\n        for i in range(len_1-len_2):\n            l2.append(0)\n    while count < len_1:\n        l1[count] = l1[count]/l2[count]\n        count += 1\n    return l1\n",
        "test": "assert ",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    new_str = ''\n    num_str = []\n    \n    for i in range(0, len(test_str)):\n        if test_str[i].isnumeric():\n            num_str.append(test_str[i])\n    \n    while len(num_str) > 0:\n        for i in range(0, len(num_str)):\n            new_str += num_str[i]\n        \n        for i in range(0, len(num_str)):\n            test_str = test_str.replace(num_str[i], '', 1)\n    \n    return new_str\n    \n    \n",
        "test": "assert     move_num(\"\") == \"\", \"Test case failed\"",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max = 0\n    nums = []\n    for num in a:\n        if num not in nums:\n            nums.append(num)\n    for i in range(len(nums)):\n        if max < len(nums[i:]):\n            max = len(nums[i:])\n    return max\n",
        "test": "assert     largest_subset([1,2,3,4,5,6]) == 6, \"Your function gives 6\"",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    if n%2 == 0:\n        median = (arr1[n//2] + arr2[n//2])/2\n        return median\n    else:\n        return arr1[n//2]\n",
        "test": "assert     get_median([1,2,3,4,5], [2,3,4,5,6], 5) == 3",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    list_n = []\n    for i in nums:\n        list_n.append(i**n)\n    return list_n\n",
        "test": "assert     nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25], \"WRONG!\"",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper('abc') == 'ABC'",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #code here\n    return newList\n    \ndef remove_Duplicates(l): \n    '''\n    Write a python function to remove duplicate elements from a list. \n    '''\n    #code here\n    return l\n",
        "test": "assert swap_List([1,2,3,4,5,6]) == [2,1,4,6,5,3]",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = (math.sqrt(3)/4)*r*r*math.sin(math.pi/3)\n    print(area)\n    return area\n",
        "test": "assert triangle_area(0) == 0",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if len(array)==0:\n        return None\n    elif start==end:\n        return start\n    elif start<end:\n        middle=int((start+end)/2)\n        if array[middle]==middle:\n            return find_First_Missing(array,start,middle)\n        else:\n            return find_First_Missing(array,middle+1,end)\n",
        "test": "assert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 0",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.strip()\n    string = string.replace(' ', '%20')\n    return string\n",
        "test": "assert     replace_spaces(\"Hi John\") == \"Hi%20John\"",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [x for x in list if x%2==0]\n",
        "test": "assert     Split([1,2,3,4,5]) ==  [2,4]",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if (ele[0]+1, ele[1]) in board:\n        sub.append((ele[0]+1, ele[1]))\n    if (ele[0], ele[1]+1) in board:\n        sub.append((ele[0], ele[1]+1))\n    if (ele[0]-1, ele[1]) in board:\n        sub.append((ele[0]-1, ele[1]))\n    if (ele[0], ele[1]-1) in board:\n        sub.append((ele[0], ele[1]-1))\n    return sub\n",
        "test": "assert     [(0, 0), (-1, 0), (-1, -1), (0, -1), (-1, 1), (1, 1), (1, 0), (0, 1)] == adjac((0, 0), sub = [(0, 0), (-1, 0), (-1, -1), (0, -1), (-1, 1), (1, 1), (1, 0), (0, 1)])",
        "num_ids": 3069,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "test": "assert     (replace_spaces('') == ''), 'empty string case'",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    n = len(num_list)\n    while j < n:\n        if num_list[j] == 0:\n            i += 1\n        j += 1\n    for i in range(i,n):\n        num_list[i], num_list[i-i] = num_list[i-i], num_list[i]\n    return num_list\n    \ndef move_zeros(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    n = len(num_list)\n    while j < n:\n        if num_list[j] == 0:\n            i += 1\n        j += 1\n    for i in range(i,n):\n        num_list[i], num_list[i-i] = num_list[i-i], num_list[i]\n    return num_list\n    \ndef find_peak(num_list):\n    '''\n    Write a python function to find the peak element in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    i = 0\n    j = len(num_list) - 1\n    while i < j:\n        mid = (i + j)//2\n        if num_list[mid] > num_list[mid + 1]:\n            j = mid\n        elif num_list[mid] < num_list[mid + 1]:\n            i = mid + 1\n        else:\n            return num_list[mid]\n    return num_list[i]\n    \ndef find_peak_binary(num_list):\n    '''\n    Write a python function to find the peak element in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    left = 0\n    right = len(num_list) - 1\n    while left < right:\n        mid = (left + right)//2\n        if num_list[mid] < num_list[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return num_list[left]\n    \ndef find_peak_hash(num_list):\n    '''\n    Write a python function to find the peak element in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    if len(num_list) == 1:\n        return num_list[0]\n    hash_map = {}\n    for i in num_list:\n        if i not in hash_map:\n            hash_map[i] = 1\n        else:\n            hash_map[i] += 1\n    for key,value in hash_map.items():\n        if value == max(hash_map.values()):\n            return key\n    return None\n    \ndef max_sub_array(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return 0\n    max_sub_sum = 0\n    for i in range(len(num_list)):\n        if max_sub_sum < num_list[i]:\n            max_sub_sum = num_list[i]\n        if max_sub_sum < 0:\n            max_sub_sum = 0\n    for i in range(len(num_list)):\n        if max_sub_sum > 0:\n            if max_sub_sum < num_list[i]:\n                max_sub_sum = num_list[i]\n        elif max_sub_sum < 0:\n            max_sub_sum = 0\n    return max_sub_sum\n    \ndef max_sub_array_rec(num_list,i,j):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if i == j:\n        return num_list[i]\n    mid = (i + j)//2\n    return max(max_sub_array_rec(num_list,i,mid),max_sub_array_rec(num_list,mid+1,j))\n    \ndef max_sub_array_const(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = num_list[0]\n    curr_max = num_list[0]\n    for i in range(1,len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = num_list[0]\n    curr_max = num_list[0]\n    for i in range(1,len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = num_list[0]\n    curr_max = num_list[0]\n    for i in range(1,len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sub_sum(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = 0\n    curr_max = 0\n    for i in range(len(num_list)):\n        curr_max = max(curr_max + num_list[i], num_list[i])\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sum(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = 0\n    curr_max = 0\n    for i in range(len(num_list)):\n        curr_max = curr_max + num_list[i]\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sum_trick(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n    max_sub_sum = 0\n    curr_max = 0\n    for i in range(len(num_list)):\n        curr_max = curr_max + num_list[i]\n        max_sub_sum = max(max_sub_sum, curr_max)\n    return max_sub_sum\n    \ndef max_sub_array_dp_bottom_up_sum_trick_2(num_list):\n    '''\n    Write a python function to find the max sum of subarray in a list of integers.\n    '''\n    if len(num_list) == 0:\n        return None\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if arr == None or n == None :\n        return -1\n    else:\n        arr.sort()\n        a = 0\n        b = 1\n        while b < n :\n            a = a ^ arr[b]\n            b += 1\n        return a\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9], 1) == 0",
        "num_ids": 2556,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return sorted(iterable)\n",
        "test": "assert     heap_sort([5,4,3,2,1]) == [1,2,3,4,5]",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print('True')\n    else:\n        print('False')\n",
        "test": "assert     noprofit_noloss(1000,100) == False",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    if v <=.1:\n        wc = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16\n    elif v <=.5:\n        wc = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16 - 7.37*v**0.16\n    elif v <=.9:\n        wc = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16 - 4.93*v**0.16\n    elif v <= 1:\n        wc = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16 + 0.0018*t*v**0.16\n    else:\n        wc = 35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16 - 10.37*v**0.16\n    wc = math.floor(wc)\n    return wc\n    \nprint(wind_chill(3, 32))\n",
        "test": "assert wind_chill(10,28) == 26.0",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code goes here\n    i = 0\n    while(i < len(sample_names)):\n        if(sample_names[i].startswith(\"n\")):\n            sample_names.remove(sample_names[i])\n        else:\n            i += 1\n    return sum(len(x) for x in sample_names)\n",
        "test": "assert     sample_nam([]) == 0, 'No names given.'",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    return items\n",
        "test": "assert     remove_parenthesis('(hi)') == 'hi'",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return n * (n - 1) + 1\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #regular expression\n    regex = r'\\b(z)\\b'\n    #this will match the word\n    matches = re.findall(regex, text)\n    return True if matches else False\n",
        "test": "assert     text_match_wordz_middle('z z z z z z') == True",
        "num_ids": 4645,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    result = [] \n    for i in range(k): \n        result.append(input[n - i - 1]) \n    for i in range(n-k): \n        result.append(input[i]) \n    return result \n",
        "test": "assert     reverse_Array_Upto_K([5,4,3,2,1], 0) == [5,4,3,2,1] ",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "test": "assert     add_dict_to_tuple((1,2,3), {}) == (1, 2, 3, {})",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    #base case\n    if n <= 2:\n        return 0\n    \n    #initializing the DP matrix with -inf\n    dp = [[-inf]*n for i in range(n)]\n",
        "test": "assert     maxAverageOfPath([[0, 1, 0, 0, 0, 0], ",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students1 = {}\n    for name, value in students.items():\n        if h<=float(value[0]) and w<=float(value[1]):\n            students1[name] = value\n    return students1\n",
        "test": "assert     filter_data({'Haruna': (1.2, 0.3), 'Dinesh': (1.6, 0.3), 'Jiggy': (1.6, 0.3)}, 0.3, 0.5) == {}",
        "num_ids": 1123,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 1, 2, 2], [1, 1, 2, 2]) == 4",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base)]) ** power\n    \nprint(power_base_sum(1, 2))\n",
        "test": "assert     power_base_sum(2, 2) == 4",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text1)\n    print(result)\n",
        "test": "assert     extract_quotation(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. \"",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup = new_tup + ((test_tup[i]*test_tup[i+1]), )\n    return new_tup\n",
        "test": "assert ",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i + j for i, j in zip(lst1, lst2)]\n",
        "test": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    return nums\n",
        "test": "assert     consecutive_duplicates([1]) == [1]",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    try:\n        area=r*(r**2+h**2)/2\n    except:\n        area=None\n    return area\n",
        "test": "assert lateralsurface_cone(2,0) == 4",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',','.')\n    return text\n",
        "test": "assert     replace_specialchar(\"John.Doe\") == \"John.Doe\"",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    a = 0\n    b = len(A) - 1\n    while a < b:\n        mid = (a + b) // 2\n        if A[mid] > x:\n            b = mid\n        else:\n            a = mid + 1\n    return a\n",
        "test": "assert     find_first_occurrence([1, 2, 2, 3, 3, 4, 4, 6], 3) == 5",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    print (\"The original list:\")\n    print (arr)\n    sublist = []\n    product = 1\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sublist.append(arr[i:j+1])\n        for k in range(len(sublist)):\n            product = product*sublist[k][0]\n        print (sublist)\n        print (\"The product of all elements in sublist:\", product)\n        print (\"\")\n        product = 1\n        sublist = []\n    return product\n",
        "test": "assert ",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    while n > 0:\n        if n%2!= 0:\n            n = n ^ (1<<(len(bin(n))-1))\n        else:\n            n = n >> 1\n    return n\n",
        "test": "assert     set_middle_bits(0) == 0 ",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a):\n        return i\n    else:\n        return i-1\n",
        "test": "assert     left_insertion([2,3,4,6,8,9],7)==4",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string) is not None:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_str('a') == True, 'Input a string and get the correct output'",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    size = int(math.log(n,2))\n    for i in range(size):\n        d = int(n-2**(i+1)-2**(i+2))\n        if d>0:\n            return i+1\n    return 0\n",
        "test": "assert     find_Index(1) == 0, \"Test 3 Failed\"",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n    \n",
        "test": "assert     tuple_to_dict(('a', 'b') ) == {'a': 'b'}",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # declare a empty list\n    ret_val = []\n    # iterate through the list\n    for i in range(len(s)) :\n        if s[i] not in ret_val :\n            ret_val.append(s[i])\n        else :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('a') == True",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6 * (side ** 2) / 4\ndef area_rectangle(length, width):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return length * width\ndef area_triangle(base, height):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return base * height / 2\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi * radius ** 2\ndef volume_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return (radius ** 2) * math.pi * height / 3\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return 4 * math.pi * radius ** 3 / 3\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    return math.pi * radius ** 2 * height / 3\ndef volume_cone_cone(radius1, radius2, height):\n    '''\n    Write a function to calculate the volume of a cone-cone intersection.\n    '''\n    return math.pi * radius1 ** 2 * radius2 / 3 * height\ndef volume_sphere_sphere(radius1, radius2):\n    '''\n    Write a function to calculate the volume of a sphere-sphere intersection.\n    '''\n    return 4 / 3 * math.pi * radius1 ** 2 * radius2 ** 2\ndef volume_cylinder_cylinder(radius1, radius2, height):\n    '''\n    Write a function to calculate the volume of a cylinder-cylinder intersection.\n    '''\n    return math.pi * radius1 ** 2 * radius2 * height\ndef volume_cone_sphere(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a cone-sphere intersection.\n    '''\n    return (radius ** 2) * math.pi * radius2 * height\ndef volume_sphere_cone(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a sphere-cone intersection.\n    '''\n    return (radius ** 2) * math.pi * radius2 * height / 3\ndef volume_cylinder_cone(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a cylinder-cone intersection.\n    '''\n    return math.pi * radius ** 2 * radius2 * height / 3\ndef volume_sphere_sphere(radius, radius2):\n    '''\n    Write a function to calculate the volume of a sphere-sphere intersection.\n    '''\n    return 4 / 3 * math.pi * radius ** 2 * radius2 ** 2\ndef volume_cylinder_cylinder(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a cylinder-cylinder intersection.\n    '''\n    return (radius ** 2) * math.pi * radius2 * height\ndef volume_cone_sphere_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cone-sphere-cone intersection.\n    '''\n    return ((radius1 ** 2) + (radius2 ** 2)) * math.pi * radius3 * height\ndef volume_sphere_sphere_sphere(radius1, radius2, radius3):\n    '''\n    Write a function to calculate the volume of a sphere-sphere-sphere intersection.\n    '''\n    return 4 / 3 * math.pi * radius1 ** 2 * radius2 ** 2 * radius3 ** 2\ndef volume_cylinder_sphere_cylinder(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a cylinder-sphere-cylinder intersection.\n    '''\n    return (radius ** 2) * math.pi * radius2 * height\ndef volume_cone_cylinder_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cone-cylinder-cone intersection.\n    '''\n    return ((radius1 ** 2) + (radius2 ** 2) + (radius3 ** 2)) * math.pi * height\ndef volume_sphere_cylinder_sphere(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a sphere-cylinder-sphere intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height\ndef volume_cylinder_cone_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cylinder-cone-cone intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height / 3\ndef volume_sphere_cylinder_cylinder(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a sphere-cylinder-cylinder intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height\ndef volume_cylinder_cone_cylinder(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cylinder-cone-cylinder intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height / 3\ndef volume_sphere_sphere_sphere(radius1, radius2, radius3):\n    '''\n    Write a function to calculate the volume of a sphere-sphere-sphere intersection.\n    '''\n    return 4 / 3 * math.pi * radius1 ** 2 * radius2 ** 2 * radius3 ** 2\ndef volume_sphere_cone_cone(radius1, radius2, radius3):\n    '''\n    Write a function to calculate the volume of a sphere-cone-cone intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * radius3\ndef volume_cylinder_sphere_cylinder(radius, height, radius2):\n    '''\n    Write a function to calculate the volume of a cylinder-sphere-cylinder intersection.\n    '''\n    return (radius ** 2) * math.pi * radius2 * height\ndef volume_cone_sphere_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cone-sphere-cone intersection.\n    '''\n    return ((radius1 ** 2) + (radius2 ** 2) + (radius3 ** 2)) * math.pi * height\ndef volume_sphere_sphere_sphere(radius1, radius2, radius3):\n    '''\n    Write a function to calculate the volume of a sphere-sphere-sphere intersection.\n    '''\n    return 4 / 3 * math.pi * radius1 ** 2 * radius2 ** 2 * radius3 ** 2\ndef volume_cylinder_cone_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cylinder-cone-cone intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * radius3 * height / 3\ndef volume_sphere_cylinder_sphere(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a sphere-cylinder-sphere intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height\ndef volume_cylinder_cone_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cylinder-cone-cone intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height / 3\ndef volume_sphere_cylinder_cylinder(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a sphere-cylinder-cylinder intersection.\n    '''\n    return (radius1 ** 2) * math.pi * radius2 * height\ndef volume_cone_cone_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to calculate the volume of a cone-cone-cone intersection.\n    '''\n    return ((radius1 ** 2) + (radius2 ** 2) + ",
        "test": "assert     area_tetrahedron([4,4,4]) == 16",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m <= 0:\n        return list\n    temp = list[0]\n    i = 0\n    while i < m-1:\n        list[i] = list[i+1]\n        i += 1\n    list[i+1] = temp\n    return list\n",
        "test": "assert     rotate_right([1, 2, 3, 4], -2) == [1, 2, 3, 4], \"should be 1 2 3 4\"",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # Your Code here\n    result = all(elem is not None for elem in test_tup)\n    return result\n",
        "test": "assert     check_none((1, None)) == False, 'Should be False'",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum) if all(x % y == 0 for y in map(int, list(str(x))))]\n",
        "test": "assert     divisible_by_digits(1, 10) ==  [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return (((a/360)*2*math.pi)*r**2)\n",
        "test": "assert     sector_area(1.0,0.0) == 0.0",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_matrix = [[0 for i in range(len(X)+1)] for j in range(len(Y)+1)]\n    max_lcs = 0\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs_matrix[i][j] = lcs_matrix[i-1][j-1] + 1\n                else:\n                    lcs_matrix[i][j] = max(lcs_matrix[i-1][j], lcs_matrix[i][j-1], lcs_matrix[i-1][j-1])\n            if lcs_matrix[i][j] > max_lcs:\n                max_lcs = lcs_matrix[i][j]\n    return max_lcs\n",
        "test": "assert     lcs_of_three('abcd', 'efg', 'beg') == ''",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = ''\n    for i in str1.split():\n        if i.isupper() and i!= \" \":\n            result = result + i.upper() +''\n        else:\n            result = result + i +''\n    return result\n",
        "test": "assert     capital_words_spaces(\"Hello World\") == \" Hello World\", \"Test 4 failed\"",
        "num_ids": 2291,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "test": "assert     sort_numeric_strings(['5', '7', '3', '1', '2', '4', '6', '8']) == ['1', '2', '3', '4', '5', '6', '7', '8'], \"Not correct\"",
        "num_ids": 988,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for index in range(len(test_list)):\n        test_list[index] += test_tup\n        return test_list\n",
        "test": "assert ",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # going from index 0 to end\n    # i is the minimum index\n    # j is the maximum index\n    # lets check all elements to see if they are smaller than min\n    # if there is a True that means we can break because there is a violation \n    # so, the min heap must be violated\n    for j in range(i, len(arr)):\n        if arr[j] < arr[i]:\n            return False\n    # if we get here, then we are good\n    return True\n",
        "test": "assert     check_min_heap_helper([-2, -2, -2, 0, 1, 3, -4, 5, 6], 0) == False",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 1\n    y = 1\n    for i in range(n-1):\n        x,y = x+2*y, x\n    return x\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Code here\n    test_list.sort()\n    return test_list[:K]\n",
        "test": "assert     min_k([(1,2), (2,3), (3,4), (4,5), (5,6), (7,8)], 0) == []",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1) > len(l2) and len(l1) > len(l3):\n        return l1\n    elif len(l2) > len(l1) and len(l2) > len(l3):\n        return l2\n    elif len(l3) > len(l1) and len(l3) > len(l2):\n        return l3\n    else:\n        return []\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert second_smallest([4,2,1,3]) == 2",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.count('b') == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     text_match_zero_one('') == False",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    res = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            a = test_list[i]\n            b = test_list[j]\n            if (a == b[::-1]):\n                res += 1\n    return res\n",
        "test": "assert     count_reverse_pairs(['']) == 0",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in list1:\n        d[tuple(i)] += 1\n    return d\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] == '-' and num[1] == '0':\n        return False\n    elif num[0] == '-' and num[1]!= '0':\n        return False\n    else:\n        index = 2\n        num = num[1:]\n        while index < len(num):\n            if num[index]!= '.':\n                return False\n            index += 2\n        return True\n",
        "test": "assert     is_decimal('1.1') == True",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # length = len(arr)\n    # unique = set()\n    # for i in range(length):\n    #     unique.add(arr[i])\n    # if(len(unique)==1):\n    #     return True\n    # else:\n    #     return False\n    return len(set(arr)) == 1\n",
        "test": "assert     unique_Element([1,1,1,2,3,3]) == False, 'TEST FAILED'",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 < 1) or (monthnum3 > 12):\n        return False\n    elif (monthnum3 == 1) or (monthnum3 == 3) or (monthnum3 == 5) or (monthnum3 == 7) or (monthnum3 == 8) or (monthnum3 == 10) or (monthnum3 == 12):\n        return True\n    elif (monthnum3 == 4) or (monthnum3 == 6) or (monthnum3 == 9) or (monthnum3 == 11):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(31) == False",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min = None\n    arr.sort()\n    for i in range(n-1):\n        if min == None or abs(arr[i] - arr[i+1]) < min:\n            min = abs(arr[i] - arr[i+1])\n    return min\n",
        "test": "assert     find_min_diff([1,2,3,4,5],4)==1, \"Wrong Answer\"",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isdigit()):\n            count+=1\n    return count\n",
        "test": "assert     number_ctr('') == 0, 'Empty string'",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    polite_numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100}\n    if n == 0:\n        return 0\n    elif n in polite_numbers:\n        return n\n    else:\n        return is_polite(n - 1)\n",
        "test": "assert     is_polite(0) == False, 'zero is not polite'",
        "num_ids": 2545,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n",
        "test": "assert pair_wise([]) == []",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # If list has only one element\n    if len(arr) <= 1:\n        return 0\n    count = 0\n    # If sum = 0\n    if sum == 0:\n        return 0\n    # Create a dict with sum as key and its position as value\n    s_pos = {}\n    for i in range(len(arr)):\n        if arr[i] == sum:\n            s_pos[arr[i]] = i\n            count += 1\n        # If sum - arr[i] is in dict, it means that\n        elif arr[i] in s_pos:\n            # Check if sum - arr[i] is in the dict\n            # If it is, update the index\n            if sum - arr[i] == arr[i]:\n                count += 1\n                s_pos[arr[i]] = i\n    return count\n",
        "test": "assert     get_pairs_count([4, 7, 10, 5], 11) == 0",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res = []\n    for item in li1:\n        if item not in li2:\n            res.append(item)\n    return res\n",
        "test": "assert Diff([1,2,3], [4,5,6]) == [1,2,3], \"wrong answer\"",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    odd_num = []\n    for i in range(n) :\n        if i % 2!= 0:\n            odd_num.append(i)\n    odd_num_sum = 0\n    for i in range(len(odd_num)) :\n        odd_num_sum += odd_num[i] ** 2\n    return odd_num_sum\n",
        "test": "assert     odd_num_sum(1) == 0, \"Odd number sum is wrong\"",
        "num_ids": 2539,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for c in exp:\n        if c=='(' or c=='{' or c=='[':\n            stack.append(c)\n        else:\n            if len(stack)==0:\n                return False\n            else:\n                x = stack.pop()\n    if len(stack)==0:\n        return True\n    else:\n        return False\n",
        "test": "assert check_expression(\"()\") == True",
        "num_ids": 2786,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # left_pos = 0\n    # right_pos = 0\n    # while right_pos < len(test_str):\n    #     if test_str[left_pos] == test_str[right_pos]:\n    #         right_pos += 1\n    #         while right_pos < len(test_str):\n    #             if test_str[right_pos]!= test_str[left_pos]:\n    #                 left_pos += 1\n    #                 break\n    #             right_pos += 1\n    #     left_pos += 1\n    #     right_pos = left_pos + 1\n    # return test_str[left_pos:right_pos]\n    return ''.join(filter(lambda x: len(x)!= K, test_str))\n",
        "test": "assert     remove_length('abcabc', 0) == 'abcabc'",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for x in range(0,len(text)):\n        if text[x:x+len(pattern)] == pattern:\n            return x,x+len(pattern)\n    return None\n",
        "test": "assert     occurance_substring('ababab','a') == (0,1)",
        "num_ids": 2020,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = [i for i in range(0, len(nums)) if i%2 == 0 ]\n    return all(x in odd_index for x in nums)\n",
        "test": "assert     odd_position([4, 5, 6]) is False",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i+1] in vowels:\n                if test_str[i+2] in vowels:\n                    count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = len(arr)\n    sum_n = 0\n    for i in range(x):\n        for j in range(i+1,x):\n            if arr[i] == arr[j]:\n                break\n        else:\n            sum_n += arr[i]\n    return sum_n\n        ",
        "test": "assert     find_sum([1,2,3,4,5]) == 15",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 2628,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {tuple(list1):len(list1)}\n",
        "test": "assert     unique_sublists([]) == {(): 0}",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # code here\n    res = []\n    for i in range(len(test_list)):\n        temp_list = []\n        for j in range(len(test_list)):\n            if i!= j:\n                temp_list.append(test_list[j])\n        res.append(tuple(temp_list))\n    return res\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    return count\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is a prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    if n < 2: \n        return False\n    else: \n        for i in range(2, int(math.sqrt(n)) + 1): \n            if n % i == 0: \n                return False\n        else: \n            return True\n    \ndef is_a_palindrome(s) : \n    '''\n    Write a python function to check whether a given string is a palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    s = s.lower()\n    s = s.replace(' ','')\n    l = len(s)\n    if l == 0 or l == 1:\n        return True\n    else:\n        if s[0]!= s[-1]:\n            return False\n        else:\n            return is_a_palindrome(s[1:-1])\n        \ndef is_square(n) : \n    '''\n    Write a python function to check whether the number is a perfect square or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    r = math.sqrt(n)\n    if r*r == n:\n        return True\n    return False\n    \ndef sum_of_squares(n) : \n    '''\n    Write a python function to find the sum of the squares of all the numbers from 1 to n.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n",
        "test": "assert     count_divisors(4) == 2",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    odd_length = 0\n    for i in range(len(arr)):\n        odd_length += 1\n        if i + odd_length - 1 < len(arr) and i - odd_length + 1 >= 0:\n            result += sum(arr[i - odd_length + 1: i + 1])\n    return result\n    \n",
        "test": "assert odd_length_sum([1, 2, 3, 4]) == 4",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_val = float(r / 255)\n    g_val = float(g / 255)\n    b_val = float(b / 255)\n",
        "test": "assert ",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 0\n    product_odd = 0\n    for i in range(len(list1)):\n        if i%2 == 0:\n            product_even += list1[i]\n        else:\n            product_odd += list1[i]\n    return product_even * product_odd\n",
        "test": "assert     mul_even_odd([]) == 0, \"incorrect\"",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_str = test_str.split(',')\n    test_str = tuple(int(n) for n in test_str)\n    return test_str\n",
        "test": "assert     tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # if x is smaller than first element, just return 1\n    if len(a) == 0:\n        return 0\n    # otherwise, start from index 1\n    else:\n        return bisect.bisect_right(a,x,1)\n",
        "test": "assert ",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"(ab)*b\")\n    result = pattern.match(text)\n    if result:\n        return True\n    return False\n",
        "test": "assert     text_match_three(\"abc\") == False",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item)\n    result.append(test_str)\n    return tuple(result)\n",
        "test": "assert     new_tuple([1,2,3], \"a\") == (\"a\", \"b\", \"c\")",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(n % 2 == 0 for i, n in enumerate(nums) if i % 2 == 0)\n",
        "test": "assert     even_position([-1, -2, -3, -4, -5]) == False",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tuple_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            tuple_tup = tuple_tup + i\n        else:\n            tuple_tup = tuple_tup + (i,)\n    return tuple_tup\n",
        "test": "assert     remove_nested((1,(2,),(3,))) == (1,2,3)",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count = count + 1\n    return count\n",
        "test": "assert     count_list([[1, 2, 3], [4, 5, 6]]) == 2, 'count_list([[1, 2, 3], [4, 5, 6]]) should return 2'",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = n-1\n    while i>=0:\n        if arr[i]<x:\n            i = i-1\n        else:\n            break\n    return i\n",
        "test": "assert     last([],1) == -1",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(\"a.*?b\",text)\n",
        "test": "assert     text_starta_endb('ab'*2) == False",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, 'Wrong'",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(n+1))\n",
        "test": "assert     sum_odd(1) == 1 ",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for x in arr:\n        sum = sum + x\n    return sum\n",
        "test": "assert     _sum([1, 2, 3, 4, 5]) == 15, \"Fail\"",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # print (n)\n    n = n << d\n    return n & 0xffffffff\n    \n    \ndef left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return n\n    n = n << d\n    if n >= 0:\n        return n & 0xffffffff\n    else:\n        return -1 * (-1 * (n & 0xffffffff)) & 0xffffffff\n    \n    \ndef left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) & 0xffffffff | (n >> (32 - d)) & 0xffffffff\n    \n",
        "test": "assert left_rotate(0b00000000,6) == 0b00000000",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "test": "assert remove_all_spaces('c') == 'c'",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y+1):\n        if i == z:\n            count = count + 1\n    return count\n",
        "test": "assert     test_three_equal(1,2,3) == 0, \"Expected value should be 0\"",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    '''\n    code_to_write\n    '''\n    '''\n    code_to_write\n    '''\n    '''\n    code_to_write\n    '''\n    \n    num_of_rotations = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                num_of_rotations += 1\n    return num_of_rotations\n",
        "test": "assert ",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # To check if x is perfect square\n    def sqrt(x):\n        if x < 0:\n            print(\"x is negative\")\n            return -1\n        if x < 2:\n            return x\n        i = x / 2\n        while i >= 2:\n            if x == i ** 2:\n                return i\n            i = i / 2\n        return -1\n    # Driver code\n    if isinstance(n, int) == False:\n        print(\"Given input is not an integer\")\n        return -1\n    if sqrt(n) * sqrt(n)!= n:\n        print(\"%d is not a perfect square\" %n)\n        return -1\n    print(\"%d is a perfect square\" %n)\n    return 0\n",
        "test": "assert     is_perfect_square(16) == False",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (sum(arr) % 2 == 0)\n",
        "test": "assert     is_product_even([4, 4, 4, 4]) == True, 'This should be True'",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    l = len(lists)\n    max_sum = -(2**31)\n    max_list = []\n    for i in range(l):\n        list_sum = 0\n        for j in range(len(lists[i])):\n            list_sum += lists[i][j]\n        if list_sum > max_sum:\n            max_sum = list_sum\n            max_list = lists[i]\n    return max_list\n",
        "test": "assert     max_sum_list([[]]) == []",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    prev = None\n    count = 0\n    for char in test_str:\n        if prev == None or char >= prev:\n            count = 1\n        elif char <= prev:\n            count = 1\n        else:\n            count = 2\n        prev = char\n    return count\n",
        "test": "assert     max_run_uppercase('zZ') == 1, \"Wrong result for 'zZ'\"",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2==1:\n            return i\n    return None\n",
        "test": "assert     first_odd([2,1,5,6,8]) == 1",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n",
        "test": "assert     check_K(('A', 'B', 'C', 'D', 'E'), 1) == False, 'Expected False'",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        if len(test_tup1) > 0:\n            for x in range(len(test_tup1)):\n                if test_tup1[x] > test_tup2[x]:\n                    return False\n                else:\n                    return True\n    else:\n        if len(test_tup2) > 0:\n            for x in range(len(test_tup2)):\n                if test_tup2[x] > test_tup1[x]:\n                    return False\n                else:\n                    return True\n",
        "test": "assert     check_smaller((1, 2, 3), (3, 2, 1)) == False",
        "num_ids": 779,
        "indeed": true
    }
]