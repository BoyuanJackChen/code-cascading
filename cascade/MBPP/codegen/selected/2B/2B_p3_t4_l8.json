[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    return_list = []\n    \n    #if test_tup1 is empty and test_tup2 is not empty:\n    if len(test_tup1) == 0:\n        return_list = test_tup2\n        return return_list\n    #else:\n    #if test_tup2 is empty and test_tup1 is not empty:\n    elif len(test_tup2) == 0:\n        return_list = test_tup1\n        return return_list\n    \n    #else:\n    else:\n        if test_tup1 == test_tup2:\n            return_list = test_tup1\n            return return_list\n        \n        else:\n            common_elements = list(set(test_tup1).intersection(set(test_tup2)))\n            \n            if len(common_elements) > 0:\n                return_list = common_elements\n                return return_list\n            \n            else:\n                return_list = []\n                return return_list\n",
        "test": "assert ",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v2(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v3(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v4(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\n",
        "test": "assert is_not_prime(2) == False, \"returns False if input is 2\"",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    if n >= len(nums):\n        return nums\n    for i in range(n):\n        hq.heappush(max_heap, nums[i])\n    \n    for i in range(n, len(nums)):\n        if nums[i] > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, nums[i])\n    return max_heap\n",
        "test": "assert ",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x== (x>>1) \nprint(is_Power_Of_Two(5))\n",
        "test": "assert     (is_Power_Of_Two(15) == False) ",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('[a-zA-Z]{4,}', text)\n",
        "test": "assert     find_char_long(\"HELLO WORLD\") ==    ['HELLO', 'WORLD']",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i**2)\n    return new_list\n",
        "test": "assert ",
        "num_ids": 106,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    start, end = 0, 0\n    count = 0\n    #counter variable to count the number of rotations needed\n    for i in range(str_len):\n        if str[i]!= str[end]:\n            count += 1\n        end = (end + 1) % str_len\n    #print(count)\n    return count\n",
        "test": "assert     find_Rotations('abc') == 0",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(s.count(ch)):\n        s = s.replace(ch,'')\n    s = s.replace(ch,'')\n    return s\n",
        "test": "assert ",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x:sum(x))\n    return M\n",
        "test": "assert ",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    print(v)\n",
        "test": "assert     find_Volume(7,5,1) == 0",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #result = re.search(\"[a-zA-Z]*[0-9]+[a-zA-Z]*\", text)\n    #return result!= None\n    return \"\".join(re.findall(\"[a-z]+[0-9]*[a-z]*\", text)).islower()\n",
        "test": "assert     text_lowercase_underscore('the_quick_brown_fox_jumps_over_the_lazy_dog')",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "test": "assert     square_perimeter(1) == 4, 'Correct answer: 4'",
        "num_ids": 87,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    if len(string) == 0:\n        return result\n    for character in string:\n        if character in string[string.index(character) + 1:]:\n            continue\n        else:\n            result.append(character)\n    return result\n",
        "test": "assert     str_to_list('abracadabra')!= 'abracadabra'",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) > 0:\n        a = set(arraynums)\n        if len(a) > len(arraynums):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     test_duplicate([2,1,2,1]) == False, \"The array contains 2 times the same element\"",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x % 2 == 0:\n        if x <= 4:\n            return True\n        elif x <= 7:\n            return False\n        elif x <= 9:\n            return True\n        elif x <= 11:\n            return False\n        elif x <= 14:\n            return True\n        elif x <= 17:\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert is_woodall(2.5) == False, 'passed, but is_woodall(2.5) should be False'",
        "num_ids": 2307,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n",
        "test": "assert rev(1) == 1",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr)\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n    if n == 2:\n        return arr[1]\n    if n == 3:\n        return arr[2]\n    \n    # we are going to find the middle and right most digit.\n    mid = n//2\n    right_max = arr[mid]\n    # if we are finding the right max\n    if mid+1 < n:\n        # we are going to find the left max and max between it and the right most number\n        left_max = find_Max_Num(arr[0:mid+1])\n        right_max = find_Max_Num(arr[mid+1:n])\n        return find_Max_Num(sorted([right_max,left_max,right_max]) + arr)\n    # if we are finding the left max\n    if mid+1 == n:\n        return find_Max_Num(sorted([right_max,right_max]) + arr)\n",
        "test": "assert ",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(0,-1) == False",
        "num_ids": 245,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<1 or n>10:\n        return None\n    return int(n*(n+1)/2)\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            sub=s[i:j+1]\n            sum_dig=0\n            for k in range(len(sub)):\n                sum_dig+=int(sub[k])\n            if sum_dig==len(sub):\n                count+=1\n    return count\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs)==0:\n        return\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "test": "assert     smallest_num([1,3,2]) == 1",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # your code here\n    \n    # Note: The following list comprehension will only run on lists with at least 2 elements.\n    # The following code will only run on lists with at least 2 elements.\n    test_list = list(map(int, test_list))\n    max_difference = test_list[0] - test_list[1]\n    for i in range(1, len(test_list) - 1):\n        if test_list[i] - test_list[i + 1] > max_difference:\n            max_difference = test_list[i] - test_list[i + 1]\n    return max_difference\n",
        "test": "assert ",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks,key=lambda x:x[1])\n    print(sorted_subjectmarks)\n    return sorted_subjectmarks\n",
        "test": "assert     subject_marks([(5,'Hadoop'), (3,'Python'), (4,'Java'), (2,'SQL'), (6,'NoSQL')]) == \\",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == None or data_list == []:\n        return 0\n    if isinstance(data_list, list):\n        if len(data_list) == 0:\n            return 0\n        if isinstance(data_list[0], list):\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list\n",
        "test": "assert recursive_list_sum([1,2,3]) == 6",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    if list == []:\n        return 0\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n",
        "test": "assert pos_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    \n    if n == 0:\n        return 1\n    \n    return bell_number(n - 1) + bell_number(n - 2)\n",
        "test": "assert     bell_number(1) == 1, \"bell_number(1): incorrect result\"",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([4,3,2,1]) == False",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    elif l == s:\n        return True\n    else:\n        return is_sublist(l[1:], s)\n",
        "test": "assert     is_sublist([1,2,3], [1,3]) == False, \"Wrong answer\"",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = 0\n    for x in Input:\n        if len(x)!= len(Input[0]):\n            result = 1\n    return result\n",
        "test": "assert     find_equal_tuple([(1,2,3,4,5,6,7), (1,2,3,4,5,6,7)]) == False",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n",
        "test": "assert ",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i <= n:\n        j = 1\n        while j*j <= n-i*i:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n",
        "test": "assert     dif_Square(2) == 1",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1):\n        if colors[i+1]!= patterns[i]:\n            return False\n    return True\n",
        "test": "assert not is_samepatterns([10, 20, 20, 20], ['abab', 'abaa', 'aabc'])",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #input: list of tuples, K\n    #output: list of tuples\n    #ex: find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 3) = [(0,2),(4,5),(6,8)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 4) = [(0,2),(4,5),(6,8)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 5) = []\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 6) = [(0,2),(4,5),(6,8)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 7) = [(0,2),(2,4),(4,5),(6,8),(8,10)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 8) = [(0,2),(2,4),(4,5),(6,8),(8,10)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 9) = [(0,2),(2,4),(4,5),(6,8),(8,10)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 10) = []\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 11) = [(0,2),(2,4),(4,5),(6,8),(8,10)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 12) = []\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 13) = []\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 14) = [(0,2),(2,4),(4,5),(6,8),(8,10)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 15) = []\n",
        "test": "assert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 5) == []",
        "num_ids": 3174,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print(True)\n    else:\n        print(False)\nis_Diff(11)\nis_Diff(111)\n",
        "test": "assert not is_Diff(24)",
        "num_ids": 109,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #return len(s) % 2!= 0\n    return True if len(s) % 2 == 1 else False\n",
        "test": "assert     word_len(\"string\") == False",
        "num_ids": 131,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # nth tetrahedral number is factorial of n\n    return math.factorial(n)\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    return 4/3 * math.pi * (r**3)\n",
        "test": "assert ",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    from string import ascii_lowercase\n    res = 0\n    for i in strr:\n        res = res+ord(i)\n    return chr(res%26+ord('a'))\n",
        "test": "assert     get_Char(\"manju\") == \"manju\", \"Wrong output\"",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        raise ValueError('n must be positive.')\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    pi = math.pi\n    return 4 * pi * r ** 2\n",
        "test": "assert ",
        "num_ids": 78,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 4\n    if n == 2:\n        return 7\n    if n == 3:\n        return 8\n    if n == 4:\n        return 9\n    if n == 5:\n        return 16\n    if n == 6:\n        return 18\n    if n == 7:\n        return 19\n    if n == 8:\n        return 20\n    if n == 9:\n        return 22\n    if n == 10:\n        return 24\n    if n == 11:\n        return 26\n    if n == 12:\n        return 28\n    if n == 13:\n        return 30\n    if n == 14:\n        return 32\n    if n == 15:\n        return 34\n    if n == 16:\n        return 36\n    if n == 17:\n        return 38\n    if n == 18:\n        return 40\n    if n == 19:\n        return 42\n    if n == 20:\n        return 44\n    if n == 21:\n        return 46\n    if n == 22:\n        return 48\n    if n == 23:\n        return 50\n    if n == 24:\n        return 52\n    if n == 25:\n        return 54\n    if n == 26:\n        return 56\n    if n == 27:\n        return 58\n    if n == 28:\n        return 60\n    if n == 29:\n        return 62\n    if n == 30:\n        return 64\n    if n == 31:\n        return 66\n    if n == 32:\n        return 68\n    if n == 33:\n        return 70\n    if n == 34:\n        return 72\n    if n == 35:\n        return 74\n    if n == 36:\n        return 76\n    if n == 37:\n        return 78\n    if n == 38:\n        return 80\n    if n == 39:\n        return 82\n    if n == 40:\n        return 84\n    if n == 41:\n        return 86\n    if n == 42:\n        return 88\n    if n == 43:\n        return 90\n    if n == 44:\n        return 92\n    if n == 45:\n        return 94\n    if n == 46:\n        return 96\n    if n == 47:\n        return 98\n    if n == 48:\n        return 100\n    if n == 49:\n        return 102\n    if n == 50:\n        return 104\n    if n == 51:\n        return 106\n    if n == 52:\n        return 108\n    if n == 53:\n        return 110\n    if n == 54:\n        return 112\n    if n == 55:\n        return 114\n    if n == 56:\n        return 116\n    if n == 57:\n        return 118\n    if n == 58:\n        return 120\n    if n == 59:\n        return 122\n    if n == 60:\n        return 124\n    if n == 61:\n        return 126\n    if n == 62:\n        return 128\n    if n == 63:\n        return 130\n    if n == 64:\n        return 132\n    if n == 65:\n        return 134\n    if n == 66:\n        return 136\n    if n == 67:\n        return 138\n    if n == 68:\n        return 140\n    if n == 69:\n        return 142\n    if n == 70:\n        return 144\n    if n == 71:\n        return 146\n    if n == 72:\n        return 148\n    if n == 73:\n        return 150\n    if n == 74:\n        return 152\n    if n == 75:\n        return 154\n    if n == 76:\n        return 156\n    if n == 77:\n        return 158\n    if n == 78:\n        return 160\n    if n == 79:\n        return 162\n    if n == 80:\n        return 164\n    if n == 81:\n        return 166\n    if n == 82:\n        return 168\n    if n == 83:\n        return 170\n    if n == 84:\n        return 172\n    if n == 85:\n        return 174\n    if n == 86:\n        return 176\n    if n == 87:\n        return 178\n    if n == 88:\n        return 180\n    if n == 89:\n        return 182\n    if n == 90:\n        return 184\n    if n == 91:\n        return 186\n    if n == 92:\n        return 188\n    if n == 93:\n        return 190\n    if n == 94:\n        return 192\n    if n == 95:\n        return 194\n    if n == 96:\n        return 196\n    if n == 97:\n        return 198\n    if n == 98:\n        return 200\n    if n == 99:\n        return 202\n    if n == 100:\n        return 204\n    if n == 101:\n        return 206\n    if n == 102:\n        return 208\n    if n == 103:\n        return 210\n    if n == 104:\n        return 212\n    if n == 105:\n        return 214\n    if n == 106:\n        return 216\n    if n == 107:\n        return 218\n    if n == 108:\n        return 220\n    if n == 109:\n        return 222\n    if n == 110:\n        return 224\n    if n == 111:\n        return 226\n    if n == 112:\n        return 228\n    if n == 113:\n        return 230\n    if n == 114:\n        return 232\n    if n == 115:\n        return 234\n    if n == 116:\n        return 236\n    if n == 117:\n        return 238\n    if n == 118:\n        return 240\n    if n == 119:\n        return 242\n    if n == 120:\n        return 244\n    if n == 121:\n        return 246\n    if n == 122:\n        return 248\n    if n == 123:\n        return 250\n    if n == 124:\n        return 252\n    if n == 125:\n        return 254\n    if n == 126:\n        return 256\n    if n == 127:\n        return 258\n    if n == 128:\n        return 260\n    if n == 129:\n        return 262\n    if n == 130:\n        return 264\n    if n == 131:\n        return 266\n    if n == 132:\n        return 268\n    if n == 133:\n        return 270\n    if n == 134:\n        return 272\n    if n == 135:\n        return 274\n    if n == 136:\n        return 276\n    if n == 137:\n        return 278\n    if n == 138:\n        return 280\n    if n == 139:\n        return 282\n    if n == 140:\n        return 284\n    if n == 141:\n        return 286\n    if n == 142:\n        return 288\n    if n == 143:\n        return 290\n    if n == 144:\n        return 292\n    if n == 145:\n        return 294\n    if n == 146:\n        return 296\n    if n == 147:\n        return 298\n    if n == 148:\n        return 300\n    if n == 149:\n        return 302\n    if n == 150:\n        return 304\n    if n == 151:\n        return 306\n    if n == 152:\n        return 308\n    if n == 153:\n        return 310\n    if n == 154:\n        return 312\n    if n == 155:\n        return 314\n    if n == 156:\n        return 316\n    if n == 157:\n        return 318\n    if n == 158:\n        return 320\n    if n == 159:\n        return 322\n    if n == 160:\n        return 324\n    if n == 161:\n        return 326\n    if n == 162:\n        return 328\n    if n == 163:\n        return 330\n    if n == 164:\n        return 332\n    if n == 165:\n        return 334\n    if n == 166:\n        return 336\n    if n == 167:\n        return 338\n    if n == 168:\n        return 340\n    if n == 169:\n        return 342\n    if n == 170:\n        return 344\n    if n == 171:\n        return 346\n    if n == 172:\n        return 348\n    if n == 173:\n        return 350\n    if n == 174:\n        return 352\n    if n == 175:\n        return 354\n    if n == 176:\n        return 356\n    if n == 177:\n        return 358\n    if n == 178:\n        return 360\n    if n == 179:\n        return 362\n    if n == 180:\n        return 364\n    if n == 181:\n        return 366\n    if n =",
        "test": "assert ",
        "num_ids": 2104,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(dict1)\n    #print(dict2)\n    #print(dict3)\n    merged_dictionary = {}\n    merged_dictionary.update(dict1)\n    merged_dictionary.update(dict2)\n    merged_dictionary.update(dict3)\n    return merged_dictionary\n",
        "test": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n",
        "test": "assert     freq_count([\"e\", \"b\", \"a\", \"a\", \"c\", \"c\", \"a\", \"c\"]) == {",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num(N):\n        return N - 1 if N <= 1 else (N // 2) - (N // 10)\n    return closest_num(N)",
        "test": "assert     closest_num(1) == 0",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split()\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n",
        "test": "assert ",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    import re\n    if not str1:\n        return False\n    if len(sub_str) > len(str1):\n        return False\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i] == sub_str[0]:\n            count = 1\n            match = True\n            for j in range(1, len(sub_str)):\n                if str1[i + j]!= sub_str[j]:\n                    match = False\n                    break\n                count += 1\n            if match:\n                return True\n    return False\n",
        "test": "assert     find_substring('apple','ap') == True",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n==1 or n==0):\n        return False\n    elif (n==2 or n==3):\n        return True\n    else:\n        for i in range(2,n):\n            if (n%i==0):\n                return False\n    return True\n",
        "test": "assert     is_undulating(123) == False",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    x = a ** b\n    print(\"{0} to the power {1} is equal to {2}\".format(a,b,x))\n    return x\n",
        "test": "assert     power(1, 2) == 1",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n",
        "test": "assert index_minimum([(0, 0), (1, 1), (2, 2)]) == (0, 0), \"Wrong answer\"",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst: return 0\n    return min(len(elem) for elem in lst)\n",
        "test": "assert Find_Min_Length([[1,2,3,4],[5,6,7,8],[]]) == 0",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    i = 1\n    while i < n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     divisor(8) == 4, \"divisor(8) is wrong\"",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #initialize empty dictionary and create dictionary to store frequencies\n    freq_dict = {}\n    #loop through the list of lists\n    for elem in list1:\n        #for each element in the list\n        for item in elem:\n            #if it is not in the dictionary\n            if item not in freq_dict:\n                #add it to the dictionary and set the value as 1\n                freq_dict[item] = 1\n            #if it is in the dictionary\n            else:\n                #increment the value by 1\n                freq_dict[item] += 1\n    return freq_dict\n",
        "test": "assert     frequency_lists([]) == {}",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        raise ValueError('No numbers to multiply')\n",
        "test": "assert     multiply_num([3,3,3]) == 9, \"should be 9\"",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    return decimal_to_binary(n // 2) + str(n % 2)\n",
        "test": "assert decimal_to_binary(0) == '0'",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    n = len(num)\n    def is_palindrome(n):\n        i = 0\n        j = n - 1\n        while i <= j:\n            if num[i]!= num[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n",
        "test": "assert     next_smallest_palindrome(12) == 10",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n",
        "test": "assert     kth_element([1,2,3,4,5], 5) == 5",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    out = []\n    for i, char in enumerate(word):\n        if char.isupper():\n            out.append(word[i].lower())\n            if i > 0:\n                out.append('_')\n    return ''.join(out)\n",
        "test": "assert ",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    ans = 0\n    # If m is odd, insert'm - 1' Eulerian numbers to the left\n    if m & 1:\n        ans += eulerian_num(n-1, m-1)\n    # If m is even, insert'm / 2' Eulerian numbers to the right\n    else:\n        ans += eulerian_num(n-1, m//2)\n        ans += eulerian_num(n-1, m//2)\n    return ans\n",
        "test": "assert     eulerian_num(0, 0) == 0",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write your code here\n    return sorted(input_list)\n",
        "test": "assert sort_sublists([\"spam\", \"eggs\", \"tomato\"]) == [\"eggs\", \"spam\", \"tomato\"]",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return sum(lst)\n",
        "test": "assert     count([False, False, True]) == 1, \"Should be 1\"",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert ",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res=[]\n    i,j,k=0,0,0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<=num2[j] and num1[i]<=num3[k]:\n            res.append(num1[i])\n            i+=1\n        elif num2[j]<=num1[i] and num2[j]<=num3[k]:\n            res.append(num2[j])\n            j+=1\n        else:\n            res.append(num3[k])\n            k+=1\n    while i<len(num1):\n        res.append(num1[i])\n        i+=1\n    while j<len(num2):\n        res.append(num2[j])\n        j+=1\n    while k<len(num3):\n        res.append(num3[k])\n        k+=1\n    return res\n",
        "test": "assert merge_sorted_list([1,3,6],",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    d = {}\n    a = \"\"\n    for i in s:\n        a = a + i\n    count = 0\n    for i in range(0,len(a)):\n        if(a[i] == \"0\"):\n            continue\n        if(a[i] == \"1\"):\n            count = count + 1\n            d[count] = i\n            continue\n        if(count in d.keys() and a[i] == \"0\"):\n            count = count + 1\n            continue\n        if(count in d.keys() and a[i] == \"1\"):\n            count = count -1\n            continue\n        count = 0\n    return d\n    \n    \ndef odd_rotation(s,n): \n    '''\n    Write a python function to find the number of times a string has been rotated.\n    '''\n    l = []\n    for i in range(len(s)):\n        l.append(s[i])\n    for i in range(n):\n        l = l[len(l)::-1]\n    count = 0\n    for i in range(len(l)):\n        if(l[i] == \"1\"):\n            count = count + 1\n    return count\n    \ndef is_prime(n):\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef prime_Factors(n):\n    prime = []\n    i = 2\n    while i*i <= n:\n        if n%i == 0:\n            prime.append(i)\n            while n%i == 0:\n                n = n/i\n        i += 1\n    if n > 1:\n        prime.append(n)\n    return prime\n    \ndef product_of_factors(n):\n    '''\n    Write a python function that takes as input a positive integer n and returns the product of all the prime factors of n.\n    '''\n    pf = prime_Factors(n)\n    pf_prod = 1\n    for i in pf:\n        pf_prod = pf_prod*i\n    return pf_prod\n    \ndef is_divisible(a,b):\n    if(a%b == 0):\n        return True\n    else:\n        return False\n    \ndef divisible_by_2(n):\n    return is_divisible(n,2)\n    \ndef divisible_by_3(n):\n    return is_divisible(n,3)\n    \ndef divisible_by_5(n):\n    return is_divisible(n,5)\n    \ndef divisible_by_15(n):\n    return is_divisible(n,15)\n    \ndef divisible_by_25(n):\n    return is_divisible(n,25)\n    \ndef divisible_by_35(n):\n    return is_divisible(n,35)\n    \ndef divisible_by_7(n):\n    return is_divisible(n,7)\n    \ndef divisible_by_11(n):\n    return is_divisible(n,11)\n    \ndef divisible_by_13(n):\n    return is_divisible(n,13)\n    \ndef divisible_by_17(n):\n    return is_divisible(n,17)\n    \ndef divisible_by_19(n):\n    return is_divisible(n,19)\n    \ndef divisible_by_23(n):\n    return is_divisible(n,23)\n    \ndef divisible_by_29(n):\n    return is_divisible(n,29)\n    \ndef divisible_by_31(n):\n    return is_divisible(n,31)\n    \ndef divisible_by_37(n):\n    return is_divisible(n,37)\n    \ndef divisible_by_41(n):\n    return is_divisible(n,41)\n    \ndef divisible_by_43(n):\n    return is_divisible(n,43)\n    \ndef divisible_by_47(n):\n    return is_divisible(n,47)\n    \ndef divisible_by_49(n):\n    return is_divisible(n,49)\n    \ndef divisible_by_53(n):\n    return is_divisible(n,53)\n    \ndef divisible_by_59(n):\n    return is_divisible(n,59)\n    \ndef divisible_by_61(n):\n    return is_divisible(n,61)\n    \ndef divisible_by_67(n):\n    return is_divisible(n,67)\n    \ndef divisible_by_71(n):\n    return is_divisible(n,71)\n    \ndef divisible_by_73(n):\n    return is_divisible(n,73)\n    \ndef divisible_by_79(n):\n    return is_divisible(n,79)\n    \ndef divisible_by_83(n):\n    return is_divisible(n,83)\n    \ndef divisible_by_89(n):\n    return is_divisible(n,89)\n    \ndef divisible_by_97(n):\n    return is_divisible(n,97)\n    \ndef divisible_by_101(n):\n    return is_divisible(n,101)\n    \ndef divisible_by_103(n):\n    return is_divisible(n,103)\n    \ndef divisible_by_107(n):\n    return is_divisible(n,107)\n    \ndef divisible_by_109(n):\n    return is_divisible(n,109)\n    \ndef divisible_by_113(n):\n    return is_divisible(n,113)\n    \ndef divisible_by_127(n):\n    return is_divisible(n,127)\n    \ndef divisible_by_131(n):\n    return is_divisible(n,131)\n    \ndef divisible_by_137(n):\n    return is_divisible(n,137)\n    \ndef divisible_by_139(n):\n    return is_divisible(n,139)\n    \ndef divisible_by_149(n):\n    return is_divisible(n,149)\n    \ndef divisible_by_151(n):\n    return is_divisible(n,151)\n    \ndef divisible_by_157(n):\n    return is_divisible(n,157)\n    \ndef divisible_by_163(n):\n    return is_divisible(n,163)\n    \ndef divisible_by_167(n):\n    return is_divisible(n,167)\n    \ndef divisible_by_173(n):\n    return is_divisible(n,173)\n    \ndef divisible_by_179(n):\n    return is_divisible(n,179)\n    \ndef divisible_by_181(n):\n    return is_divisible(n,181)\n    \ndef divisible_by_191(n):\n    return is_divisible(n,191)\n    \ndef divisible_by_193(n):\n    return is_divisible(n,193)\n    \ndef divisible_by_197(n):\n    return is_divisible(n,197)\n    \ndef divisible_by_199(n):\n    return is_divisible(n,199)\n    \ndef divisible_by_211(n):\n    return is_divisible(n,211)\n    \ndef divisible_by_223(n):\n    return is_divisible(n,223)\n    \ndef divisible_by_227(n):\n    return is_divisible(n,227)\n    \ndef divisible_by_229(n):\n    return is_divisible(n,229)\n    \ndef divisible_by_233(n):\n    return is_divisible(n,233)\n    \ndef divisible_by_239(n):\n    return is_divisible(n,239)\n    \ndef divisible_by_241(n):\n    return is_divisible(n,241)\n    \ndef divisible_by_251(n):\n    return is_divisible(n,251)\n",
        "test": "assert odd_Equivalent('0010100101011',4) == 9",
        "num_ids": 1845,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j:\n                if nestedlist[i] == nestedlist[j]:\n                    common_elements.append(nestedlist[i])\n    return common_elements\n",
        "test": "assert     common_in_nested_lists([]) == []",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except:\n        return False\n",
        "test": "assert     check_integer('12.3') == False",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n",
        "test": "assert     empty_dit([]) == True, \"should return True\"",
        "num_ids": 146,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([int(x) for x in nums])\n",
        "test": "assert     tuple_to_int((1, 2, 3)) == 6",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for element in test_list:\n        return_list.append([float(i) for i in element])\n    return return_list\n",
        "test": "assert     list_to_float([[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]) == [[1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \") \n",
        "test": "assert     string_to_list('ab cd') == ['ab','cd'] ",
        "num_ids": 109,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if len(arr)==1:\n        return arr[0]\n    left=0\n    right=len(arr)-1\n    mid=0\n    while left<right:\n        mid=(left+right)//2\n        if arr[mid]==arr[mid+1]:\n            left=mid+1\n        else:\n            right=mid\n    return arr[left]",
        "test": "assert search([1,2,2,3]) == 2",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1 = 0\n    max2 = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            a = list1[i]\n            b = list1[j]\n            if a[0]*a[1]*a[2] > max1:\n                max1 = a[0]*a[1]*a[2]\n            elif a[0]*a[1]*a[2] > max2:\n                max2 = a[0]*a[1]*a[2]\n            elif a[0]*a[1]*a[2] > max2:\n                max2 = a[0]*a[1]*a[2]\n            if b[0]*b[1]*b[2] > max1:\n                max1 = b[0]*b[1]*b[2]\n            elif b[0]*b[1]*b[2] > max2:\n                max2 = b[0]*b[1]*b[2]\n            elif b[0]*b[1]*b[2] > max2:\n                max2 = b[0]*b[1]*b[2]\n",
        "test": "assert     max_product_tuple([(-1, 5), (2, 5), (-2, -4), (2, 1), (1, 0)]) == (-20, -40)",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        sum_amicable_numbers = 0\n        for i in range(1, num):\n            if num == i:\n                continue\n            if num % i == 0:\n                if num == i * 2:\n                    sum_amicable_numbers += i\n                else:\n                    continue\n            else:\n                sum_amicable_numbers += i\n        if sum_amicable_numbers == num:\n            amicable_sum += num\n    print(f'The sum of all amicable numbers between 1 and {limit} is {amicable_sum}')\n",
        "test": "assert     amicable_numbers_sum(10000) == 1872",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # a = 3 + 4j\n    # b = -1j\n    angle = cmath.phase(a) - cmath.phase(b)\n    angle = -angle if a.real < 0 else angle\n    angle = abs(angle)\n    angle = (angle / cmath.pi) * 180\n    return angle\n",
        "test": "assert     angle_complex(0,0) == 0",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(1,len(string)):\n        if string[i] == \"0\":\n            continue\n        if string[i-1] == \"1\":\n            max_diff = max(max_diff,i-1)\n    return max_diff\n",
        "test": "assert     find_length(\"\") == 0",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count=0\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            count+=i\n    return count\nprint(sum(18,3))\n",
        "test": "assert ",
        "num_ids": 123,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(-6, 2) == -12",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) >= n:\n            result.append(word)\n    return result\n",
        "test": "assert     long_words(5, [\"a\", \"all\", \"algorithms\", \"are\", \"all\", \"well\"]) == [\"algorithms\"]",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if my_matrix.__class__!= list:\n        return False\n",
        "test": "assert ",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = -1\n    max_item = 0\n    for i in nums:\n        counts[i] += 1\n        if counts[i] > max_count:\n            max_count = counts[i]\n            max_item = i\n    return max_item\n",
        "test": "assert     max_occurrences([1, 1, 1, 1, 1]) == 1",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    s = ''\n    for char in str1:\n        if char not in vowels:\n            s += char\n        else:\n            s += char.upper()\n    return s\n",
        "test": "assert     reverse_vowels('abcdz') == 'zdca', \"Wrong result\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(tup1)\n",
        "test": "assert     tup_string(('a', 'b', 'c')) == \"abc\"",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert     sum_negativenum([-1, -2, -3]) == -6",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return hexagonal_num(n - 1) + (n * (n + 1)) // 2\n",
        "test": "assert     hexagonal_num(4) == 15",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n",
        "test": "assert zero_count([1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1]) == 1.5, 'Odd count'",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if not isinstance(n, int) and not isinstance(n, float): \n        raise TypeError(\"{} must be an int or float\".format(n)) \n    return bool(n and n > 0 and n & 1)\n",
        "test": "assert ",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 235,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_set = set()\n    for test_case in test_list:\n        for test in test_case:\n            flattened_set.add(test)\n    return flattened_set\n",
        "test": "assert extract_singly([[], [1, 2, 3], [4, 5, 6]]) == set([1, 2, 3, 4, 5, 6])",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #if even, flip and make it an odd\n    if len(nums)%2!= 0:\n        nums.reverse()\n        nums.append(nums[0])\n        nums.pop(0)\n        nums.reverse()\n    #if odd, flip and make it an even\n    if len(nums)%2 == 0:\n        nums.reverse()\n        nums.pop(0)\n        nums.reverse()\n    \n    print(nums)\n",
        "test": "assert     pancake_sort([0,1,2,3]) == [3,2,1,0]",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for i in Input:\n        if type(i) == list:\n            num_lists += 1\n    return num_lists\n",
        "test": "assert     find_lists((1,)) == 0, \"First Example\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        max_diff = max(max_diff, abs(arr[i] - arr[i+1]))\n    return max_diff\n",
        "test": "assert ",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    result = []\n    for i in range(1, n):\n        if a * i + b * i == n:\n            result.append(i)\n    return tuple(result) if result else None\n",
        "test": "assert     find_solution(2, 5, 5) == None",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n",
        "test": "assert     remove_elements(['w', 'r', 't', 'a', 'k'], ['w', 'r', 't', 'a', 'k']) == None",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    # Initialize sum and number of terms\n    s = 0\n    x = 0\n    # Loop through each term\n    while n >= 0:\n        # Add to sum\n        s += n\n        # Next term\n        x += 1\n        # Update n\n        n -= x\n    return s\n",
        "test": "assert ",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def polygon_area(l, n):\n        p = l * (1 - tan(pi/n)) / (1 + tan(pi/n))\n        return p\n    a = polygon_area(l, n)\n    area_num = (n * (n - 1)) / 2\n    print(round(a, 2))\n    print(round(area_num, 2))\n",
        "test": "assert     (area_polygon(6, 6) == 144), \"Should be 144\"",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    else:\n        div_sum = 0\n        for i in range(1, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                div_sum += i + n/i\n        return div_sum == n\n",
        "test": "assert     div_sum(5) == False, \"Passed\"",
        "num_ids": 220,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] not in \"qwertyuiopasdfghjklzxcvbnm\":\n            count += 1\n    return count\n",
        "test": "assert     count_char_position(\"\") == 0, \"Input string must be of length 1 or more.\"",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            x = A[i]^A[j]\n            if x%2==0:\n                count += 1\n    return count\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # keep dividing by 2 if n is less than or equal to 1\n    while n <= 1:\n        n = n * 2\n    return n\n",
        "test": "assert     next_power_of_2(2) == 2, \"next_power_of_2(2) must be 2\"",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f=0\n    for i in range(len(a)):\n        if a[i]==x:\n            f=f+1\n    return f\n",
        "test": "assert     frequency([],3) == 0, \"No matches\"",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum = sum + list1[i]\n    return sum\n",
        "test": "assert         sum_range_list([1,2,3,4], 0, 1) == 3",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    pi = math.pi\n    half = a / 2\n    perimeter = (half * (3 * pi - 2 * pi * math.sin(half * pi / 3) - 2 * pi * math.sin(half * 2 * pi / 3)))\n    print(perimeter)\n    return perimeter\n",
        "test": "assert ",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s=='':\n        return 0\n    return 1+count_occurance(s[1:]) if s[0]=='s' else count_occurance(s[1:])\n",
        "test": "assert count_occurance('') == 0, 'Empty String'",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return True\n    else:\n        if not all(isinstance(i, type(test_tuple[0])) for i in test_tuple):\n            return False\n        return True\n",
        "test": "assert     check_type((1,'b',3.0)) == False",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    curr = 0\n    curr_max = 0\n    for i in range(n):\n        if arr[i] == x:\n            curr += 1\n        else:\n            curr = 0\n        if curr > curr_max:\n            curr_max = curr\n    return curr_max >= n/2\n",
        "test": "assert ",
        "num_ids": 164,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = n\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert     count_Set_Bits(1) == 1",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[0::2]\n    \ndef main():\n    print(\"Input: The string is:\",odd_values_string('welcome'))\n    print(\"Expected Output: The string after removing the odd values is:\",odd_values_string('welcme'))\n",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\nprint(min_of_three(2,1,5))\n",
        "test": "assert     min_of_three(1,2,3) == 1",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r < l:\n        return 0\n    if (l < 0) or (r < 0):\n        raise ValueError\n    return ((2**n)-1) & ~((2**l)-1) & ~((2**r)-1)\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(5,4,3) == False, \"Error in Function\"",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos += 1\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n    if neg < pos:\n        arr[neg:] = arr[neg:][::-1]\n    return arr\n",
        "test": "assert     re_arrange_array([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = \"\"\n    if (len(str1) == 1) and (str1.isalnum()):\n        x = str1\n    else:\n        x = str1.replace(' ','')\n    return (x)\n",
        "test": "assert     replace_blank(\"\",\" \") == \"\", \"Test Failed\"",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    lst = list1\n    lst.sort()\n    return lst[-n:]\n",
        "test": "assert ",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if (h<=0):\n        return 0\n    else:\n        area = pi*r**2\n        return (2*area)/h\n",
        "test": "assert     lateralsuface_cylinder(5,4) == 30, \"Wrong calculation, it should be 30\"",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(1) == 1",
        "num_ids": 126,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 1 << n.bit_length()\n    return n | mask\n",
        "test": "assert ",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                if test_list[i] in d:\n                    d[test_list[i]] += 1\n                else:\n                    d[test_list[i]] = 1\n    return d \n",
        "test": "assert check_occurences(    [('a', 'b'), ('a', 'b'), ('a', 'b')]) == {('a', 'b'):3}",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    \n    substring_count = 0\n    \n    for i in range(len(str)):\n        for j in range(len(str), i, -1):\n            if str[i:j]!= \"\":\n                substring_count += 1\n                break\n                \n    return substring_count\n    \n    \nprint(\"Pass\" if  (3 == number_of_substrings(\"\")) else \"Fail\")\nprint(\"Pass\" if  (2 == number_of_substrings(\"abc\")) else \"Fail\")\nprint(\"Pass\" if  (1 == number_of_substrings(\"ab\")) else \"Fail\")\nprint(\"Pass\" if  (4 == number_of_substrings(\"abcd\")) else \"Fail\")\nprint(\"Pass\" if  (4 == number_of_substrings(\"abcde\")) else \"Fail\")\nprint(\"Pass\" if  (0 == number_of_substrings(\"\")) else \"Fail\")\n",
        "test": "assert     number_of_substrings('a') == 1",
        "num_ids": 2412,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 0\n",
        "test": "assert     get_total_number_of_sequences(2,7) == 6",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list2[i]\n    return list1\n",
        "test": "assert     replace_list([1,2,3], [1,2,3]) == [1,2,3], 'Incorrectly replacing 1 to 3'",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert count_charac('#') == 1, 'incorrect result'",
        "num_ids": 187,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 2\n    i = 2\n    while i*i <= N:\n        i = i + 1\n    j = i - 1\n    while j*j <= N:\n        j = j - 1\n    return i*i + j + 1\n",
        "test": "assert ",
        "num_ids": 159,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Time O(n) | Space O(1)\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return arr[0]\n    \n    if arr[0] > arr[1]:\n        max_sum = arr[0]\n    else:\n        max_sum = arr[1]\n    \n    for i in range(2, n):\n        if arr[i - 1] < arr[i] and arr[i] > arr[i - 1]:\n            max_sum = max(max_sum, arr[i] + max_sum)\n        else:\n            max_sum = max(max_sum, arr[i])\n        \n    return max_sum\n",
        "test": "assert ",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number ** (1/2)\n    return root\n",
        "test": "assert     babylonian_squareroot(4)     ==     2",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[False for i in range(n)] for j in range(n)]\n    maxLen = 0\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(1, n):\n        if str[i-1] == str[i]:\n            dp[i-1][i] = True\n            maxLen = 2\n    for i in range(2, n):\n        for j in range(n):\n            if j >= i:\n                if dp[j][i-1]:\n                    dp[j][i] = True\n                    if maxLen < i-j+1:\n                        maxLen = i-j+1\n    return maxLen\n",
        "test": "assert     lps(\"\") == 0",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return n/2 + harmonic_sum(n-1)\n",
        "test": "assert     harmonic_sum(1) == 1, \"harmonic sum of 1 is 1\"",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    final = []\n    for element in array_nums1:\n        if element in array_nums2:\n            final.append(element)\n    return final\n",
        "test": "assert     intersection_array([], []) == [], \"Wrong answer: \" + str(intersection_array([], []))",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_X([], 'a') == 0, \"Expected 0 for count_X('', 'a')\"",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if element == list[i]:\n            list.insert(i,element)\n            break\n    return list\nprint(insert_element([1,2,3,4],5))\n",
        "test": "assert     insert_element([1,2,3], 3) == [1, 2, 3, 3]",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import math\n    for i in numbers:\n        if i == complex(0,0):\n            print(\"Polar coordinates are not possible because number 0 is in magnitude.\")\n        else:\n            print(f\"Magnitude of {i} = {cmath.polar(i)[0]}, angle of {i} = {cmath.polar(i)[1]}\\n\")\n            print(f\"Value of modulus = {math.modf(cmath.polar(i)[0])[0]}, Value of 2nd digit of modulus = {math.modf(cmath.polar(i)[0])[1]}\")\n        \n",
        "test": "assert convert([1, 2, 0]) == (0.0, complex(1, 0))",
        "num_ids": 2578,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(map(lambda x: type(x) is int, list1))\n",
        "test": "assert count_integer([1,2,3,4]) == 4",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for c in combinations_with_replacement(l, n):\n        combos.append(c)\n    return combos\n",
        "test": "assert     combinations_colors([], 2) ==     []",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    #prime numbers are greater than 1\n    prime = 2\n    #prime numbers are greater than 1\n    count = 0\n    #while loop condition\n    while(prime <= n):\n        #check if given number is divisible by any prime numbers from 2 to given number\n        #if it is, the given number is not prime\n        if(n%prime == 0):\n            #break out of while loop, if the number is not prime\n            break\n        else:\n            #increment prime counter\n            prime += 1\n    #print the number of prime numbers less than n\n    if(prime == n):\n        count = 1\n    else:\n        count = 0\n    return count\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\nprint(swap_numbers(5,6))\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1), max(test_tup2))\n",
        "test": "assert     maximize_elements((7,3), (3,3)) == (7,3)",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from sympy import isprime,nextprime\n    if n<2:\n        return False\n    def is_prime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n        return True\n    primes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    while n>0:\n        if is_prime(primes[n-1]):\n            n-=1\n        else:\n            primes.append(nextprime(primes[n-1]))\n    return primes[-1]\n",
        "test": "assert ",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n",
        "test": "assert     division_elements((2, 2), (2, 2)) == (1, 1)",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    i = 0\n    list1_part1 = []\n    list1_part2 = []\n    list2_part1 = []\n    list2_part2 = []\n    list3_part1 = []\n    list3_part2 = []\n    list4_part1 = []\n    list4_part2 = []\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3], [4, 5])",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int((h_age * 7) / 4)\n",
        "test": "assert ",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step==0:\n        return([S])\n    else:\n        return([S[i:i+step] for i in range(0,len(S),step)])\n",
        "test": "assert     list_split([1, 2, 3, 4], 1) == [[1], [2], [3], [4]]",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n",
        "test": "assert ",
        "num_ids": 99,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1,2)])\n",
        "test": "assert ",
        "num_ids": 115,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 101,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    i = 0\n    total = 0\n    if len(arr) == 0:\n        return total\n    while i < len(arr):\n        if i%2 == 0 and i < len(arr):\n            total += arr[i]\n        i += 1\n    return total\n",
        "test": "assert     sum_even_and_even_index([]) == 0, \"Empty List\"",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum\n",
        "test": "assert     even_Power_Sum(1) == 0",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return(test_list[::-1])\n",
        "test": "assert    rear_extract([]) == []",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n        return tuple(new_tup)\n    else:\n        return None\n",
        "test": "assert     substract_elements((2,1,3),(1,2,3)) == (1,2,0)",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return 2*n*even_binomial_Coeff_Sum(n-1)\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 1",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = (4/3)*pi*r**3\n    return volume\n",
        "test": "assert     volume_cylinder(0,1) == 0, \"Inputs are incorrect\"",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "test": "assert     dict_filter({'k1':10, 'k2':9, 'k3':8}, 4) == {'k3':8, 'k1':10, 'k2':9}",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements((4, 5, 3, 1, 1, 1, 2, 7, 3, 5, 3, 3)) == 4, \"Wrong result\"",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 0\n    while True:\n        if i * (i + 1) / 2 == n:\n            return i\n        i += 1\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist is None:\n        return (False, -1)\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    \n    return (False, -1)\n",
        "test": "assert     sequential_search([1, 4, 5, 6], 4) == (True, 1)",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1,2,3,4,5,6,7,8,9,10]) == True, \"all_unique\"",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for n1,n2 in zip(nums1,nums2):\n        res.append(n1-n2)\n    return res\n",
        "test": "assert     sub_list([1,2,3], [1,2]) == [0,0]",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n//10\n    if count <= 1:\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    found = False\n    for item in list:\n        if item == element:\n            found = True\n    return found\n",
        "test": "assert     check_element([1,2,3],4)== False, 'check_element test4 failed'",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a{2,3}b')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three(\"\") == False",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # The base case \n    if n == 0 or k == 0: \n        return 0\n    \n    # The base case \n    if k == 1: \n        return a[0] \n    \n    # The base case \n    if n == k: \n        return max(a[:k]) \n    \n    # Initialize the variable \n    max_sum = 0\n    \n    # Define the size of a subarray \n    sub_array_size = k \n    \n    # Define the start and end of a subarray \n    start = 0\n    end = k \n    \n    # Define the common_sub_array \n    common_sub_array = [] \n    \n    # Define the common_sub_array \n    common_sub_array_sum = 0 \n    \n    # Define the common_sub_array_start \n    common_sub_array_start = 0 \n    \n    # Define the common_sub_array_end \n    common_sub_array_end = 0 \n    \n    # Define the max_sum \n    max_sum = 0 \n    \n    while end <= n: \n        # Calculate the common_sub_array sum \n        common_sub_array_sum = 0 \n        for i in range(0, sub_array_size): \n            common_sub_array_sum += a[i + start] \n            \n        # If the common_sub_array sum is greater than max_sum, \n        # Update max_sum \n        if common_sub_array_sum > max_sum: \n            max_sum = common_sub_array_sum \n        \n        # Update the common_sub_array_start \n        common_sub_array_start = start \n        \n        # Update the common_sub_array_end \n        common_sub_array_end = start + k \n        \n        # Update the max_sum \n        max_sum = max(common_sub_array_sum, max_sum) \n        \n        # Update start \n        start = start + k \n        \n        # Update the sub_array_size \n        sub_array_size = sub_array_size * k \n        \n        # Update end \n        end = end + k \n        \n    return max_sum \n    \n",
        "test": "assert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6], 6, 2) == 21",
        "num_ids": 3077,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%2==0):\n            sum=sum+i**2\n    return sum\n",
        "test": "assert ",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return\n    max_length = max([len(x) for x in list1])\n    return max_length\n",
        "test": "assert     max_length([[]]) == 0, 'Should be 0'",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0] * (k + 1) for _ in range(n + 1)] \n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            if j < i: \n                dp[i][j] = dp[i - 1][j] \n            elif j == i: \n                dp[i][j] = 1\n            else: \n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n    return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                return count[0]\n        \n        count = [0]\n        memo = {}\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        memo = {}\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                return count[0]\n        \n        count = [0]\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                if (i, j) in memo:\n                    count[0] += memo[(i, j)]\n                else:\n                    count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                memo[(i, j)] = count[0]\n                return count[0]\n        \n        count = [0]\n        memo = {}\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                return count[0]\n        \n        count = [0]\n        memo = {}\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n]",
        "test": "assert     count_no_of_ways(5, 3) == 1, \"count_no_of_ways([5,3], 3) should be 1\"",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert     find(1,1) == 1",
        "num_ids": 105,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w**2 + h**2 - (h/2)*(w**2) == 0):\n        print(\"Third side is \" + str(math.sqrt(w**2 + h**2 - (h/2)*(w**2))))\n    else:\n        print(\"Third side is infinity\")\n",
        "test": "assert     otherside_rightangle(1,2) == 1.4142135623730951",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n    \n",
        "test": "assert max_val([1,2,3,4,5,6,7]) == 7",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number = abs(number)\n    if number < 2:\n        return 0\n    if number == 2:\n        return 1\n    divisors = set()\n    divisor = 1\n    while divisor <= number // 2:\n        if number % divisor == 0:\n            divisors.add(divisor)\n            divisors.add(number // divisor)\n        divisor += 1\n    return sum(divisors)\n",
        "test": "assert     sum_div(0) == 0,'sum_div(0) should be 0'",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                res += 1\n    return res\n    \n    ",
        "test": "assert     get_Inv_Count([1,2,3]) == 0, \"test 1 failed\"",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if isinstance(i, list):\n            new_list.extend(flatten_list(i))\n        else:\n            new_list.append(i)\n    return new_list\n",
        "test": "assert     flatten_list([1,2,3]) == [1,2,3]",
        "num_ids": 276,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    count = 0\n    for i in stdata:\n        if i[0] == '+':\n            count += i[1]\n        else:\n            count -= i[1]\n        if count > max_aggregate:\n            max_aggregate = count\n    return max_aggregate\n",
        "test": "assert     max_aggregate([(1, 2), (3, 2), (2, 3), (4, 1)]) == (4, 1)",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq(n-2) + count_binary_seq(n-1))\n    \ndef count_binary_seq_bit_1(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_1(n-2) + count_binary_seq_bit_1(n-1))\n    \ndef count_binary_seq_bit_2(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_2(n-2) + count_binary_seq_bit_2(n-1))\n    \ndef count_binary_seq_bit_3(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_3(n-2) + count_binary_seq_bit_3(n-1))\n    \ndef count_binary_seq_bit_4(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_4(n-2) + count_binary_seq_bit_4(n-1))\n    \ndef count_binary_seq_bit_5(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_5(n-2) + count_binary_seq_bit_5(n-1))\n    \ndef count_binary_seq_bit_6(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_6(n-2) + count_binary_seq_bit_6(n-1))\n    \ndef count_binary_seq_bit_7(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_7(n-2) + count_binary_seq_bit_7(n-1))\n    \ndef count_binary_seq_bit_8(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_8(n-2) + count_binary_seq_bit_8(n-1))\n    \ndef count_binary_seq_bit_9(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_9(n-2) + count_binary_seq_bit_9(n-1))\n    \ndef count_binary_seq_bit_10(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_10(n-2) + count_binary_seq_bit_10(n-1))\n    \ndef count_binary_seq_bit_11(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_11(n-2) + count_binary_seq_bit_11(n-1))\n    \ndef count_binary_seq_bit_12(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_12(n-2) + count_binary_seq_bit_12(n-1))\n    \ndef count_binary_seq_bit_13(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_13(n-2) + count_binary_seq_bit_13(n-1))\n    \ndef count_binary_seq_bit_14(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_14(n-2) + count_binary_seq_bit_14(n-1))\n    \ndef count_binary_seq_bit_15(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_15(n-2) + count_binary_seq_bit_15(n-1))\n    \ndef count_binary_seq_bit_16(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_16(n-2) + count_binary_seq_bit_16(n-1))\n    \ndef count_binary_seq_bit_17(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n =",
        "test": "assert ",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d.keys()) == 0:\n        return 0\n    return max([dict_depth(x) for x in d.values()]) + 1\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count=0\n    for i in range(0,len(arr)):\n        if arr[i]>=ranges[count] and arr[i]<=ranges[count+1]:\n            count+=1\n    if count==index:\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('p')\n    return [word for word in words if pattern.match(word)!= None]\nprint(start_withp([\"hello\",\"python\",\"programming\",\"program\",\"snake\"]))\n",
        "test": "assert not start_withp(['Python','PYTHON','Python3','Python2','PYTHON2','PYTHON2']) == ['Python','PYTHON']",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k < 0 or k >= n:\n        return 0\n    \n    ans = max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index], a[index])\n    return ans\n",
        "test": "assert ",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if i == m:\n            return tuplex[i:]+tuplex[:m]\n    return tuplex[m:]+tuplex[:m]\ndef test_colon_tuplex():\n    assert colon_tuplex([1,2,3,4,5],0,2) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5],2,2) == (3,4,5)\n    assert colon_tuplex([1,2,3,4,5],0,-2) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5],2,-2) == (4,5)\n    assert colon_tuplex([1,2,3,4,5,6,7],0,3) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5,6,7],3,3) == (6,7)\n    assert colon_tuplex([1,2,3,4,5,6,7],0,-3) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5,6,7],3,-3) == (5,6,7)\ndef test_all_colon_tuplex():\n    assert colon_tuplex([1,2,3,4,5],0,2) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5],2,2) == (3,4,5)\n    assert colon_tuplex([1,2,3,4,5],0,-2) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5],2,-2) == (3,4,5)\n    assert colon_tuplex([1,2,3,4,5,6,7],0,3) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5,6,7],3,3) == (6,7)\n    assert colon_tuplex([1,2,3,4,5,6,7],0,-3) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5,6,7],3,-3) == (5,6,7)\ndef test_all_colon_tuplex_1():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],4,6) == (4,5,6,7,8,9)\ndef test_all_colon_tuplex_2():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],0,10) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_3():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,0) == (10,9,8,7,6,5,4,3,2,1)\ndef test_all_colon_tuplex_4():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],0,-10) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_5():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,-2) == (1,2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_6():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-2,-10) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_7():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-10,-2) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_8():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,2) == (10,9,8,7,6,5,4,3,2,1)\ndef test_all_colon_tuplex_9():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],0,2) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_10():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],2,0) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_11():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],0,-2) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_12():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],2,-2) == (10,9,8,7,6,5,4,3,2,1)\ndef test_all_colon_tuplex_13():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-2,-10) == (1,2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_14():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,-2) == (10,9,8,7,6,5,4,3,2,1)\ndef test_all_colon_tuplex_15():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-10,2) == (1,2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_16():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],2,10) == (2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_17():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,-1) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_18():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-1,10) == (1,2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_19():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,1) == (10,1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_20():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-1,-10) == (1,2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_21():\n    assert colon_tuplex([",
        "test": "assert     colon_tuplex((1,2,3),1,0)==(1,(2,3,1))",
        "num_ids": 2437,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # \n    # nums1 = sorted([1,2,3,4])\n    # nums2 = sorted([3,2,4,1])\n    # N = 2\n    \n    # max_product = max(nums1[-N:] * nums2[-N:])\n",
        "test": "assert     large_product([1, 2, 3, 4], [5, 6, 7], 3) == -1",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(1, 2) == 2",
        "num_ids": 138,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(' ','')\n    l = list(str1)\n    l1 = []\n    for i in l:\n        l1.append(i)\n    t = tuple(l1)\n    return t\n",
        "test": "assert     string_to_tuple(\"123\")     ==     ('1','2','3')",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #if the input is not 0\n    if n!=0:\n        #while the input is not 0\n        while n!=0:\n            #set the left most unset bit\n            n&=(n-1)\n    return n\n",
        "test": "assert     set_left_most_unset_bit(5) == 0, \"error!\"",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h\n",
        "test": "assert volume_cone(1,2) == 1.18, f'The answer does not match the expected answer {1.18}.'",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        return 0\n    \n    def max_power_of_2(n):\n        '''\n        Write a python function to find the highest power of 2 that is less than or equal to n.\n        '''\n        if n <= 1:\n            return n\n        else:\n            return max_power_of_2(n - 2) * 2\n    \n    return max_power_of_2(n - 1)\n        \n        \n        \n        \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)\n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        return (find_lucas(n-1) + find_lucas(n-2))\n",
        "test": "assert     find_lucas(3) == 2",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n",
        "test": "assert ",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1={}\n    for i in range(len(l1)):\n        d1[l1[i]]=l2[i]\n    for i in range(len(l3)):\n        d1[l3[i]]=l2[i+1]\n    return d1\n",
        "test": "assert convert_list_dictionary([], [], []) == {}, 'Wrong output'",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n",
        "test": "assert     get_max_sum (4) == 4, 'WRONG'",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_index = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_length_index = i\n    return max_length_index\n",
        "test": "assert max_length_list([]) == 0",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert     check_distinct((1,2,2,3,3)) == False",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        char = str1[i]\n        if str1.count(char) == 1:\n            return char\n",
        "test": "assert     first_non_repeating_character('') == None",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n    \n",
        "test": "assert     check_char('hello.') == False, 'Test 4 failed: true'",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>=b and a>=c:\n        return a\n    elif b>=a and b>=c:\n        return b\n    else:\n        return c\n        \n",
        "test": "assert median_numbers(-5, 0, 0) == 0",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += int(i)\n    return sum\n",
        "test": "assert     sum_of_digits([]) == 0, \"Fail\"",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for item1, item2 in zip(test_tup1, test_tup2):\n        result += (item1 ^ item2,)\n    return result\n",
        "test": "assert     bitwise_xor((10, 10), (10, 10)) == (0, 0)",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(test_list)))\n",
        "test": "assert     extract_freq([[1], [2], [3], [1], [2], [1], [1], [1,2,3], [2,3], [2,3,4,5]]) == 5",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1]\n",
        "test": "assert     add_nested_tuples((1,2), (3,4)) == (4,6), \"Wrong\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = 0\n    if(a>b):\n        min = b\n    else:\n        min = a\n    return min\n",
        "test": "assert     minimum(-1,-2) == -2",
        "num_ids": 174,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==tuple1:\n            return True\n    return False\n",
        "test": "assert     check_tuplex((1, 2, 3), (1, 2)) == False, \"Should return False\"",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 0\n    ",
        "test": "assert     find_Parity(9) == False, 'check 3'",
        "num_ids": 137,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    bigger = ''.join(sorted(str(n),reverse=True))\n    return int(bigger)\n",
        "test": "assert     rearrange_bigger(1) == 1",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # edge case\n    if not nums1 or not nums2 or k>=min(len(nums1), len(nums2)):\n        return []\n    # heap + quickselect\n    heap = [(nums1[i]+nums2[i], i, i) for i in range(min(len(nums1), len(nums2))) if nums1[i]<nums2[i]]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap) for _ in range(k)]\n",
        "test": "assert     k_smallest_pairs([1,5,9,2,6,10,7,3,4,8], [2,4,6,8], 5) == [[1,2],[2,4],[3,6],[4,8],[5,7]]",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x:x[1])\n    min_product = list1[0][1]*list1[0][0]\n    for i in range(1,len(list1)):\n        if list1[i][1] < min_product:\n            min_product = list1[i][1]*list1[i][0]\n    return min_product\n",
        "test": "assert ",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    x = listval[0]\n    for i in range(len(listval)):\n        if x > listval[i]:\n            x = listval[i]\n    return x\n",
        "test": "assert     min_val([2,1,7])    == 1",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(map(lambda x: x.capitalize(), word.split('_')))\n",
        "test": "assert     snake_to_camel(\"snake_to_camel\") == \"SnakeToCamel\"",
        "num_ids": 679,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i%2 == 0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "test": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == (1, 2)",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)>len(list2):\n        return False\n    if len(list2)>len(list1):\n        return False\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1, 2, 3, 5, 6, 7], [2, 3, 4]) == False",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_value = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_value:\n                max_value = arr[i] * arr[j]\n    return max_value\n",
        "test": "assert     max_Product([2,3,6,4,5,4]) == (6,4)",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_Element = []\n    First_Element = []\n    for i in Input:\n        Common_Element.append(i[0])\n        First_Element.append(i[1])\n    print(Common_Element)\n    print(First_Element)\n    Common_Element = set(Common_Element)\n    First_Element = set(First_Element)\n    Common = Common_Element.intersection(First_Element)\n    print(Common)\n    return(len(Common))\n",
        "test": "assert     group_tuples([(1, 5), (0, 1), (5, 6), (2, 3), (2, 5), (2, 4)]) == 2",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = 0\n    for i in range(len(lst)):\n        if lst[i] > Max:\n            Max = lst[i]\n    for i in range(len(lst)):\n        if lst[i] == Max:\n            return i\n",
        "test": "assert     Find_Max([]) == None, \"Empty list\"",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    for i in list1:\n        rounded_list.append(round(i))\n    return sum(rounded_list) * len(rounded_list)\n",
        "test": "assert     round_and_sum([0.1, 0.2, 0.3, 0.4]) == 0.0, \"Round and sum function is incorrect\"",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    print(\"The cube sum of first n even numbers is\",sum)\n    ",
        "test": "assert ",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = \"\"\n    for item in test_tup:\n        s += item\n    return s\n",
        "test": "assert ",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (i ** 3)\n    return sum / n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = []\n    for i in range(0, len(test_tuple)):\n        new_tuple.append(test_tuple[i][len(test_tuple[i]) - 1])\n    return tuple(new_tuple)\n",
        "test": "assert     extract_rear(('m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == ('m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            res += 1\n    return res\n",
        "test": "assert ",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if num%2!= 0:\n            oddnumbers.append(num)\n    return oddnumbers\n",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #date = dt.split('-')\n    #date = map(int, date)\n    #date = map(lambda x: str(x), date)\n    #date = \"-\".join(date)\n    #date = int(date)\n    #print(date)\n    #print(type(date))\n    #return date\n    return dt[4:] + '-' + dt[2:4] + '-' + dt[0:2]\n",
        "test": "assert     change_date_format(\"2012-13-01\") == \"01-13-2012\"",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([1,5,4,2,3,6]) == [1,2,3,4,5,6]",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = (4,5)\n    tup2 = (6,7)\n    final_tup = ()\n    for i in range(2):\n        if test_tup1[i] and test_tup2[i]:\n            final_tup += (True,)\n        elif test_tup1[i]:\n            final_tup += (False,)\n        elif test_tup2[i]:\n            final_tup += (False,)\n    return final_tup\n",
        "test": "assert ",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a\n    y = b**2 + c**2\n",
        "test": "assert ",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n",
        "test": "assert common_element([1,2,3], [3,4,5]) == True",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\nprint(median_trapezium(5,4,4))\n",
        "test": "assert     median_trapezium(1,1,1) == 1.0",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([], 5) == False",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab') == -1:\n        return False\n    else:\n        return True\n",
        "test": "assert     text_match_one(\"ababab\") == True",
        "num_ids": 202,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     last_Digit(26) == 6",
        "num_ids": 190,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\nprint(remove_odd('abcdefg'))\nprint(remove_odd('abcd') )\nprint(remove_odd('abc'))\nprint(remove_odd('abcde'))\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for (x, y) in test_list:\n        if x < y:\n            total += 1\n    return total\n",
        "test": "assert ",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result = result * 10 + L[i]\n    return result\n",
        "test": "assert     multiple_to_single([1, 1])    == 11, 'Wrong answer'",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text == None or text == '':\n        return []\n    positions = []\n    list = text.split()\n    for i in range(len(list)):\n        if list[i] in ['of', 'and', 'or', 'the']:\n            positions.append(i)\n        if list[i] in ['in', 'at', 'on', 'at']:\n            positions.append(i)\n        if list[i] in ['like', 'against', 'with', 'no']:\n            positions.append(i)\n        if list[i] in ['like']:\n            positions.append(i)\n    return positions\n",
        "test": "assert     find_adverb_position(\"\") == []",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n    \n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    return 4 * 3.14159 * r * r\n    \n    \ndef volume_cube(l, w, h):\n    '''\n    Write a function to calculate the volume of a cube with dimensions l, w, and h.\n    '''\n    return l * w * h\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere with a radius of r.\n    '''\n    return 4/3 * 3.14159 * r * r * r\n    \n    \ndef cuboid_volume(l, w, h):\n    '''\n    Write a function to calculate the volume of a cuboid with dimensions l, w, and h.\n    '''\n    return l * w * h\n    \n    \ndef cylinder_volume(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder with a radius of r and a height of h.\n    '''\n    return 3.14159 * r * r * h\n    \n    \ndef triangle_volume(b, h):\n    '''\n    Write a function to calculate the volume of a triangle with base b and height h.\n    '''\n    return.5 * b * h\n    \n    \ndef pyramid_volume(b, h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h.\n    '''\n    return b * h * 1.5\n    \n    \ndef cone_volume(r, h):\n    '''\n    Write a function to calculate the volume of a cone with radius r and height h.\n    '''\n    return 3.14159 * r * (r + h)\n    \n    \ndef pyramid_volume(b, h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h.\n    '''\n    return b * h * 1.5\n    \n    \ndef sphere_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere with a radius of r.\n    '''\n    return 4 / 3 * 3.14159 * r * r * r\n    \n    \ndef sphere_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere with a radius of r.\n    '''\n    return 4 / 3 * 3.14159 * r * r * r\n    \n    \ndef volume_cone(r, h):\n    '''\n    Write a function to calculate the volume of a cone with radius r and height h.\n    '''\n    return 3.14159 * r * r * (r + h)\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere with a radius of r.\n    '''\n    return 4 / 3 * 3.14159 * r * r * r\n    \n    \ndef volume_pyramid(b, h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h.\n    '''\n    return (b * h) * 1.5\n    \n    \ndef cube_to_pyramid(l, w, h):\n    '''\n    Write a function to convert a cube to a pyramid.\n    '''\n    return (l * w * h) / 1.5\n    \n    \ndef pyramid_to_cube(b, h):\n    '''\n    Write a function to convert a pyramid to a cube.\n    '''\n    return (b * h) / 1.5\n    \n    \ndef pyramid_to_sphere(b, h):\n    '''\n    Write a function to convert a pyramid to a sphere.\n    '''\n    return (4/3 * 3.14159 * b * b * b) / (b + h)\n    \n    \ndef sphere_to_pyramid(r):\n    '''\n    Write a function to convert a sphere to a pyramid.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (r + 3))\n    \n    \ndef sphere_to_cube(r):\n    '''\n    Write a function to convert a sphere to a cube.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (r * 2))\n    \n    \ndef cube_to_sphere(l, w, h):\n    '''\n    Write a function to convert a cube to a sphere.\n    '''\n    return (l * w * h) / 2\n    \n    \ndef sphere_to_sphere(r):\n    '''\n    Write a function to convert a sphere to a sphere.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (2 * r))\n    \n    \ndef sphere_to_pyramid(r):\n    '''\n    Write a function to convert a sphere to a pyramid.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (2 * r + 3))\n    \n    \ndef pyramid_to_sphere(b, h):\n    '''\n    Write a function to convert a pyramid to a sphere.\n    '''\n    return ((4/3 * 3.14159 * b * b * b) / (b + h))\n    \n    \ndef pyramid_to_cube(b, h):\n    '''\n    Write a function to convert a pyramid to a cube.\n    '''\n    return ((4/3 * 3.14159 * b * b * b) / (b * 2))\n    \n    \ndef cube_to_pyramid(l, w, h):\n    '''\n    Write a function to convert a cube to a pyramid.\n    '''\n    return (l * w * h) / 2\n    \n    \ndef cube_to_sphere(l, w, h):\n    '''\n    Write a function to convert a cube to a sphere.\n    '''\n    return (l * w * h) / 3\n    \n    \ndef sphere_to_cube(r):\n    '''\n    Write a function to convert a sphere to a cube.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (3 * r))\n    \n    \ndef cube_to_sphere(l, w, h):\n    '''\n    Write a function to convert a cube to a sphere.\n    '''\n    return ((4/3 * 3.14159 * l * w * h) / (2 * l))\n    \n    \ndef sphere_to_pyramid(r):\n    '''\n    Write a function to convert a sphere to a pyramid.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (2 * r + 3))\n    \n    \ndef pyramid_to_cube(b, h):\n    '''\n    Write a function to convert a pyramid to a cube.\n    '''\n    return ((4/3 * 3.14159 * b * b * b) / (b * 2))\n    \n    \ndef pyramid_to_sphere(b, h):\n    '''\n    Write a function to convert a pyramid to a sphere.\n    '''\n    return ((4/3 * 3.14159 * b * b * b) / (b + h))\n    \n    \ndef cube_to_sphere(l, w, h):\n    '''\n    Write a function to convert a cube to a sphere.\n    '''\n    return ((4/3 * 3.14159 * l * w * h) / (3 * l))\n    \n    \ndef sphere_to_sphere(r):\n    '''\n    Write a function to convert a sphere to a sphere.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (2 * r))\n    \n    \ndef sphere_to_pyramid(r):\n    '''\n    Write a function to convert a sphere to a pyramid.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (2 * r + 3))\n    \n    \ndef pyramid_to_sphere(b, h):\n    '''\n    Write a function to convert a pyramid to a sphere.\n    '''\n    return ((4/3 * 3.14159 ",
        "test": "assert surfacearea_cube(6) == 48, 'incorrect surfacearea_cube(6)'",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i >= 0:\n            pos += 1\n    return pos\n    \nnums = [-2, -1, 1, 2]\nprint(positive_count(nums))\n",
        "test": "assert positive_count([-2,-3,-4,-5,-6]) == 0",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(len(list1)):\n        if max_neg < list1[i]:\n            max_neg = list1[i]\n    return max_neg\n",
        "test": "assert     largest_neg([-2,-1,0,-3]) == 0 ",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K == 1:\n        return test_list\n    if len(test_list) > K:\n        return trim_tuple(test_list[:K], K)\n    else:\n        return test_list\n",
        "test": "assert     trim_tuple([('a',1),('a',2),('a',3)], 2) ==     [('a',1),('a',2)]",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup = []\n    for i in range(len(test_tup1)):\n        num = test_tup1[i] * test_tup2[i]\n        tup.append(num)\n    return tuple(tup)\n",
        "test": "assert     index_multiplication((), ()) == ()",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = []\n    for i in tup:\n        if i in lst:\n            res.append(lst.count(i))\n    return res\n",
        "test": "assert ",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n",
        "test": "assert     cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64], \"Wrong\"",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return (n*(n+1)/2)\n",
        "test": "assert     cal_sum(1) == 1,    \"1\"",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str is None:\n        print(f\"Invalid data format for str:{str}\")\n        return\n    if l is None:\n        print(f\"Invalid data format for l:{l}\")\n        return\n    if len(str) == 0 or len(l) == 0:\n        print(f\"Invalid data format for str:{str} and l:{l}\")\n        return\n    if len(str)!= len(l):\n        print(f\"Invalid data format for str:{str} and l:{l}\")\n        return\n    return str[:l]\n",
        "test": "assert extract_string(['hello', 'world', 'hi', 'bye', 'home', 'goodbye', 'book', 'chapter'], 8) == ['world', 'goodbye']",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\ndef check_website_status(text2):\n    '''\n    Write a function to check if the given string is a valid URL or not.\n    '''\n    url_pattern = re.compile('^(?:http|ftp)s?://'\n    '(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n    'localhost|'\n    '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n    '(?::\\d+)?'\n    '(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return bool(url_pattern.match(text2))\n",
        "test": "assert     remove_whitespaces('  abcd') == 'abcd'",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "test": "assert     loss_amount(1700,1000) == 0 ",
        "num_ids": 159,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i < n : \n        if (i % 2 == 0 ) : \n            sum = sum + i \n        i = i + 1\n    return sum\n    ",
        "test": "assert     sumofFactors(3) == 2, '3 is not even'",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'z',text)\n",
        "test": "assert     text_match_wordz('zebra') == False",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = monthnum2 % 12\n    if(monthnum2 == 2):\n        return 31\n    elif(monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10):\n        return 30\n    else:\n        return 28\n",
        "test": "assert     check_monthnumb_number(4) == True,'should return True'",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for i in range(len(stringlist)):\n        reversed_list.append(stringlist[i][::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"\"]) == [\"\"]",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_min_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > lst_min_length:\n            lst_min_length = len(lst[i])\n    return lst_min_length\n",
        "test": "assert Find_Min([1,2,3,4,5,5,5])==0",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(1,1)    == 1",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    upper = True\n    i = 0\n    while i < len(str1):\n        if upper:\n            if str1[i].isupper():\n                upper = False\n        else:\n            if str1[i].islower():\n                upper = True\n        i += 1\n    return str1\n",
        "test": "assert     remove_uppercase(\"\") == \"\"",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    s = []\n    for i in range(len(lst)):\n        s.append(lst[i][0])\n    return s \n",
        "test": "assert     Extract([[1, 2, 3], [], []]) == []",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    upper_count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            upper_count += 1\n    return upper_count\n    \ndef common_characters(str1, str2):\n    '''\n    Write a python function to count the common characters in the two given strings.\n    '''\n    \n    char_count = {}\n    for i in range(len(str1)):\n        if str1[i] in char_count.keys():\n            char_count[str1[i]] += 1\n        else:\n            char_count[str1[i]] = 1\n    for i in range(len(str2)):\n        if str2[i] in char_count.keys():\n            char_count[str2[i]] += 1\n        else:\n            char_count[str2[i]] = 1\n    common_count = 0\n    for key, value in char_count.items():\n        if value == 2:\n            common_count += 1\n    return common_count\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    if len(str) == 0:\n        return False\n    if str == str[::-1]:\n        return True\n    return False\n",
        "test": "assert ",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    for i in range(len(list1)):\n        output.append([list1[i]])\n        for j in range(i+1,len(list1)):\n            output.append([list1[i],list1[j]])\n    return output\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    curr_max = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_so_far = max(curr_max, max_so_far)\n    return max_so_far\n",
        "test": "assert max_subarray_product([-1, -1, -1, -1]) == 1",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for v in dict.values():\n        if v!= n:\n            return False\n    return True\n",
        "test": "assert     check_value({'name': 'a', 'age': 5}, False) == False,'should return False'",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict([i for i in dict1.items() if i[1]!=None])\n",
        "test": "assert     drop_empty({}) == {}, 'Empty dictionary drops nothing'",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_prod = arr[0]\n    min_prod = arr[0]\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > min_prod:\n            min_prod = arr[i]\n            \n        if arr[i] < max_prod:\n            if arr[i] * max_prod > arr[i] * min_prod:\n                max_prod = arr[i] * max_prod\n            else:\n                max_prod = arr[i] * max_prod\n            if arr[i] * min_prod > arr[i] * max_prod:\n                min_prod = arr[i] * min_prod\n            else:\n                min_prod = arr[i] * min_prod\n    return max_prod\n            \n        \n    \n",
        "test": "assert ",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    tup1 = list(tup)\n    tup1.sort()\n    i = 1\n    while(i<len(tup)):\n        a = tup1[i-1]\n        b = tup1[i]\n        tup1.remove(b)\n        tup1.remove(a)\n        tup1.insert(i,a+b)\n        i += 1\n    return tuple(tup1)\n",
        "test": "assert ",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % n\n",
        "test": "assert     find_remainder([2, 4, 1], 5) == 10",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag = False\n    for i in range(0, len(l)-1):\n        if (l[i] == l[i+1] -1):\n            flag = True\n    return flag\n",
        "test": "assert     check_Consecutive([]) == False, \"Should be False\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # SOLUTION\n    return tuple(sorted(set(test_list1).intersection(set(test_list2))))\n    #OR\n    return tuple(test_list1&test_list2)\n    #OR\n    return tuple(set(test_list1).intersection(set(test_list2)))\n",
        "test": "assert     tuple_intersection([10, 20, 30, 50, 100], (10, 20, 50, 100)) == (10, 20, 50, 100)",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str\n",
        "test": "assert ",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    l = []\n    for key, value in dict1.items():\n        l.append((value, key))\n    l.sort(reverse = True)\n    # print(l)\n    return {k: v for v, k in l}\n",
        "test": "assert     sort_counter({\"key\":1, \"ddd\":3, \"ppp\":2}) == {\"key\":1, \"ppp\":2, \"ddd\":3}",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return False\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums) + min(nums)\n",
        "test": "assert     big_sum([1,2,3,4,5,6]) == sum([6,1])",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower(\"HELLO WORLD\") == True, 'Test 4 Failed'",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str1 = str1[0:i] + str1[i+1:]\n    return str1\n",
        "test": "assert remove_lowercase(\"a\") == \"\"",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n",
        "test": "assert     first_Digit(16) == 1",
        "num_ids": 100,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #odd = []\n    #for i in range(len(list)):\n    #    if list[i] % 2 == 1:\n    #        odd.append(list[i])\n    #return odd\n    return [i for i in list if i % 2!= 0]\n    #return even\n    \ndef Divide(n):\n    '''\n    Write a python function which takes a non negative integer and returns the binary representation of that number.\n    '''\n    #binary = []\n    #while n!= 0:\n    #    binary.append(n % 2)\n    #    n = n // 2\n    #return binary\n    return bin(n)\n    #return binary\n    \ndef LeftRotate(arr, d):\n    '''\n    Write a python function which left rotates the given array by d elements. It should perform this in place.\n    '''\n    #for i in range(d):\n    #    arr.append(arr.pop(0))\n    #return arr\n    return arr[d:] + arr[:d]\n    #return arr\n    \ndef Reverse(arr):\n    '''\n    Write a python function which reverses the given array. It should perform this in place.\n    '''\n    #return arr[::-1]\n    return arr.reverse()\n    #return arr\n    \ndef Search(arr, target):\n    '''\n    Write a python function which searches an array and returns the index of first occurrence of the target.\n    '''\n    #return arr.index(target)\n    return arr.index(target, 0)\n    #return arr.index(target, 0, len(arr))\n    \ndef Sort(arr):\n    '''\n    Write a python function which sorts the given array in place.\n    '''\n    #return arr.sort()\n    #return arr\n    #return sorted(arr)\n    \ndef Max(arr):\n    '''\n    Write a python function which returns the maximum of the array.\n    '''\n    #return max(arr)\n    return max(arr, default = -1)\n    #return arr.max()\n    #return arr\n    \ndef Min(arr):\n    '''\n    Write a python function which returns the minimum of the array.\n    '''\n    #return min(arr)\n    return min(arr, default = -1)\n    #return arr.min()\n    #return arr\n    \ndef Copy(arr):\n    '''\n    Write a python function which creates a copy of the given array.\n    '''\n    #return arr.copy()\n    return arr[:]\n    #return arr\n    \ndef Sum(arr):\n    '''\n    Write a python function which calculates the sum of all the elements in the given array.\n    '''\n    #return sum(arr)\n    #return sum(arr, 0)\n    return sum(arr, 0)\n    #return arr\n    \ndef BinarySearch(arr, target):\n    '''\n    Write a python function which searches an array and returns the index of first occurrence of the target.\n    '''\n    #return arr.index(target)\n    return arr.index(target, 0, len(arr))\n    #return arr.index(target, 0, len(arr))\n    \ndef Gaussian(a, b):\n    '''\n    Write a python function which returns the Gaussian function with the given a and b.\n    '''\n    #return exp(-(a**2) / (2*b**2))\n    return exp(-(a**2) / (2*b**2))\n    #return (1 / sqrt(2*pi*b**2)) * exp(-1/(2*b**2) * ((a**2)) )\n    \ndef Fibonacci(n):\n    '''\n    Write a python function which returns the nth fibonacci number.\n    '''\n    #return fib(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return Fibonacci(n-1) + Fibonacci(n-2)\n    #return a + b\n    #return fib(n-1) + fib(n-2)\n    \ndef FibonacciPrime(n):\n    '''\n    Write a python function which returns the nth fibonacci prime.\n    '''\n    #return fibo_p(n)\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    return FibonacciPrime(n-1) + FibonacciPrime(n-2)\n    #return a + b\n    #return fibo_p(n-1) + fibo_p(n-2)\n    \ndef ReverseVowels(s):\n    '''\n    Write a python function which returns the reverse vowels of the given string.\n    '''\n    #return s.replace('a','*').replace('e','*').replace('i','*').replace('o','*').replace('u','*')\n    return s.replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n    #return s.replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n    #return s.replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n    \ndef VowelToNumber(s):\n    '''\n    Write a python function which returns the vowels of a string in the corresponding numbers.\n    '''\n    #return vowel_to_num(s)\n    return s.replace('a', '1').replace('e', '1').replace('i', '1').replace('o', '0').replace('u', '0')\n    #return vowel_to_num(s)\n    #return s.replace('a', '1').replace('e', '1').replace('i', '1').replace('o', '0').replace('u', '0')\n    #return s.replace('a', '1').replace('e', '1').replace('i', '1').replace('o', '0').replace('u', '0')\n    \ndef NumberToVowel(n):\n    '''\n    Write a python function which returns the vowels of a number in the corresponding string.\n    '''\n    #return vowel_to_num(n)\n    return chr(ord('a') + int(n))\n    #return vowel_to_num(n)\n    #return chr(ord('a') + int(n))\n    #return vowel_to_num(n)\n    \ndef Game(a, b, c, d):\n    '''\n    Write a python function which returns the 'Game' of the given numbers a, b, c and d.\n    '''\n    #return a + b + c + d\n    return a + b + c + d\n    #return a + b + c + d\n    #return a + b + c + d\n    \ndef GameEven(a, b):\n    '''\n    Write a python function which returns the 'Game' of even numbers in the given range.\n    '''\n    #return a + b\n    return a + b\n    #return a + b\n    #return a + b\n    \ndef GameOdd(a, b):\n    '''\n    Write a python function which returns the 'Game' of odd numbers in the given range.\n    '''\n    #return a + b\n    return a + b\n    #return a + b\n    #return a + b\n    \ndef GameEvenOdd(a, b):\n    '''\n    Write a python function which returns the 'Game' of even and odd numbers in the given range.\n    '''\n    #return a + b\n    return a + b\n    #return a + b\n    #return a + b\n    \ndef Reverse(s):\n    '''\n    Write a python function which reverses the given string.\n    '''\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t', '')[::-1]\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t', '')[::-1]\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t', '')[::-1]\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t'",
        "test": "assert     Split([]) == [], \"should return []\"",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube_of_sum_of_first_n_natural_numbers(n):\n        sum_of_first_n_natural_numbers = n * (n + 1) // 2\n        sum_of_cubes_of_first_n_natural_numbers = n * (n + 1) * (2 * n + 1) // 6\n        return sum_of_cubes_of_first_n_natural_numbers - sum_of_first_n_natural_numbers\n    print(cube_of_sum_of_first_n_natural_numbers(5))\n",
        "test": "assert ",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = len(A)\n    cnt = 0\n    for i in range(n) :\n        for j in range(i + 1, n):\n            if A[i] ^ A[j] == 1 :\n                cnt += 1\n    return cnt\n",
        "test": "assert     find_Odd_Pair([1,3,4,6,8,10],9) == 0",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper() if string.islower() else string.lower()\n    \n",
        "test": "assert     toggle_string(\"\") == \"\"",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(len(str(n1))):\n        sum += abs(n1%10-n2%10)\n        n1 = n1//10\n        n2 = n2//10\n    return sum\n",
        "test": "assert     digit_distance_nums(87, 87) == 0",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = 0\n    i = 0\n    j = 0\n    while j < size:\n        while i < size:\n            temp_sum = 0\n            while temp_sum <= max_sub and j < size:\n                temp_sum += a[j]\n                j += 1\n            if temp_sum > max_sub:\n                max_sub = temp_sum\n            i += 1\n    return max_sub\n",
        "test": "assert max_sub_array_sum([1], 1) == 1",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (sorted(set(test_tup1) | set(test_tup2)))\n",
        "test": "assert     union_elements(('a', 'b', 'c'), ('d', 'e')) == ('a', 'b', 'c', 'd', 'e')",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_l = 1\n    cur_l = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            cur_l += 1\n        else:\n            max_l = max(cur_l, max_l)\n            cur_l = 1\n    max_l = max(max_l, cur_l)\n    return max_l\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"[a-zA-Z0-9 ]+\"', text)\nprint(extract_values(\"'Hello' and 'world'!\"))\n",
        "test": "assert     extract_values('Hi, my name is Mike. I live in New York. I am 19 years old.') == ['Mike', 'New York', 'I am 19 years old.']",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count = count + 1\n    return count\n",
        "test": "assert ",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split('abcd') == ['a', 'b', 'c', 'd']",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return -sum_digits(n * -1)\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert ",
        "num_ids": 166,
        "indeed": false
    },
    {
        "number": 567,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([1,2,4,3]) == False, 'a list with unsorted elements is not sorted'",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    return [{}]*length\n    ",
        "test": "assert     empty_list(4) == [{}, {}, {}, {}], \"Not correct.\"",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return(list1)\n",
        "test": "assert     sort_sublists([[\"a\",\"b\",\"d\"],[\"e\",\"f\",\"c\"]]) == [['a','b','c'],['e','f','d']], \"wrong sort_sublists result\"",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    return [x for x in nums if x not in seen and not seen.add(x)]\n",
        "test": "assert     two_unique_nums([1,2,2,3,4,5,6,7,8,8,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(len(list_data)):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    product = 1\n    for i in range(len(unique_list)):\n        product = product * unique_list[i]\n    return product\n",
        "test": "assert     unique_product([]) == 1",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    area = math.pi * (r**2) + math.pi * (h**2)\n    return area\n",
        "test": "assert     surfacearea_cylinder(0,0) == 0",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if A[i] not in B:\n            return False\n    return True\n",
        "test": "assert     is_Sub_Array([], []) == True",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return n\n    return n % 10\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n
        "test": "assert     interleave_lists([1,2,3,4,5,6,7],['a','b','c'],[1,2,3,4,5]) == ['a','1','b','1','2','c','1','2','3','4','5','6','7']",
        "num_ids": 2528,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)\n",
        "test": "assert     find_dissimilar((1, 2, 5, 6, 7), (2, 6, 7)) ==    (1, 5)",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = tuple(test_tuple)\n    \n    while test_tuple[0]!= even_fnc:\n        test_tuple = test_tuple[1]\n    \n    return test_tuple\n    \ntuple_1 = (4,1,2,3,5,6,7,8,9,10)\neven_ele(tuple_1, even_fnc = lambda t: t % 2 == 0)\n",
        "test": "assert     even_ele((((1, 2), (3, 4), (5, 6), (7, 8), 9, 10),),even_fnc) == ((1, 2, 3, 4, 5, 7, 9), 10), \"Test 4 failed\"",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b > 0 and s > 0:\n        surface_area = (s*s) + (2*b*s)\n        return surface_area\n    else:\n        print(\"Incorrect input\")\n        return -1\n",
        "test": "assert surface_Area(1,3) == 3.0",
        "num_ids": 169,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)\n",
        "test": "assert     my_dict({'a': 1}) == False, 'Test 2: Passed'",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base case:\n    if num == 0 or num == 1:\n        return 1\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile('[^A-Za-z ]+ly[ ]')\n    matches = regex.finditer(text)\n    return [match.start() for match in matches]\n",
        "test": "assert ",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1], reverse=True)\n    heapq.heapify(items)\n    for i in range(n):\n        a = heapq.heappop(items)\n        print(a)\n    return items\n",
        "test": "assert     expensive_items([(1,10),(2,8),(4,5),(2,3),(2,1)],3)==[(2,1),(4,5)]",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if not isinstance(l, list):\n        raise TypeError('Invalid type. Must be a list')\n",
        "test": "assert ",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    print(tup)\n    return tup\n",
        "test": "assert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5)",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # using max and min as we want minimum difference\n    # using max_min as our return value\n    min_num = float('inf')\n    max_num = float('-inf')\n    \n    for num in nums:\n        if min_num > num:\n            min_num = num\n        if max_num < num:\n            max_num = num\n    return max_num - min_num\n    \nbig_diff([1,2,5,2,4,5,6])",
        "test": "assert     big_diff([100, 300, 200, 150, 0]) == 300",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square = a\n    i = b - 1\n    while square < b:\n        i = i - 1\n        square = square + (i ** 2)\n    return square\n",
        "test": "assert     perfect_squares(12, 25) == 4",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    if x < 0:\n        angle = cmath.phase(x)\n    else:\n        angle = cmath.phase(x) + 2*cmath.pi\n    return (int(r*cmath.cos(angle)),int(r*cmath.sin(angle)))\n    \n",
        "test": "assert ",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"swap_List:\", newList)\n    \n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    print(\"newList:\", newList)\n    return newList\n",
        "test": "assert     swap_List([1, 1, 1]) == [1, 1, 1], \"Wrong output\"",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "test": "assert     binomial_Coeff(0,0) == 1, \"Coeff of n = 0 should be 1\"",
        "num_ids": 2396,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    s1 = ''.join(ip)\n    return s1\n",
        "test": "assert     removezero_ip('0.1.0.0') == '0.1.0.0'",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return even - odd\n",
        "test": "assert     diff_even_odd([1, 2, 3, 4]) == 2",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    i = 0\n    while i < len(str1) :\n        if str1[i]!= str2[i] :\n            if str1[i] == '0' :\n                str1 = str1[:i]+'1'+str1[i+1:]\n            else :\n                str1 = str1[:i]+'0'+str1[i+1:]\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     min_Swaps('010','010') == 0",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size = size + sys.getsizeof(i)\n",
        "test": "assert    tuple_size([1, 2, 3, 4, 5, 6, 7, 8]) == 24,",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n",
        "test": "assert ",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number>0:\n        sum = 0\n        n = number\n        while (n > 0):\n            sum = sum + (n % 10) ** 3\n            n = n // 10\n        if sum == number:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     armstrong_number(371.01) == False",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # first_number = 0\n    # sum = 0\n    # average = 0\n    # counter = 0\n    # while first_number < n:\n    #     first_number += 1\n    #     sum += first_number\n    #     counter += 1\n    #     average = sum / counter\n    # return average\n    return sum(range(n)), sum(range(n))/n\n",
        "test": "assert     sum_average(100) == (0+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34+35+36+37+38+39+40+41+42+43+44+45+46+47+48+49+50+51+52+53+54+55+56+57+58+59+60+61+62+63+64+65+66+67+68+69+70+71+72+73+74+75+76+77+78+79+80+81+82+83+84+85+86+87+88+89+90+91+92+93+94+95+96+97+98+99+100) / 100",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    return True if n%2 == 0 else False\n    \n    \nprint(is_Even(8))\n",
        "test": "assert is_Even(10) == True",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    cnt = {}\n    for i in range(len(str1)):\n        if str1[i] in cnt:\n            cnt[str1[i]]+=1\n        else:\n            cnt[str1[i]]=1\n    for i in range(len(str1)):\n        if cnt[str1[i]]>1:\n            return str1[i]\n    return -1\n",
        "test": "assert     first_repeated_char('aabc') ==     'a'",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(n):\n        if i**3 == n:\n            lucids.append(i)\n        elif i**3 < n:\n            lucids.append(i)\n            for j in range(i**3, n, i):\n                lucids.append(j)\n    return lucids\n",
        "test": "assert isinstance(get_ludic(0),list)",
        "num_ids": 2445,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse_words = s.split(' ')\n    reverse_words.reverse()\n    return''.join(reverse_words)\n    \n",
        "test": "assert     reverse_words(\"\") == \"\"",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) == True, '1 is not prime'",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert     radian_degree(30) == math.pi/6",
        "num_ids": 2069,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    res = re.search(pattern, text)\n    start = res.start()\n    end = res.end()\n    return text[start:end], start, end\n",
        "test": "assert     find_literals('abc', '^abc$') == ('abc', 0, 3)",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_number = 0\n    i = 1\n    while i < n:\n        bell_number += 1\n        i += 1\n    return bell_number\n",
        "test": "assert     bell_Number(2) == 1",
        "num_ids": 2272,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) <= 1:\n        return []\n    else:\n        return list1[:k] + list1[k+1:]\n",
        "test": "assert ",
        "num_ids": 2320,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = 0\n    col_number = N\n    for row in test_list:\n        if row[col_number] > max_value:\n            max_value = row[col_number]\n    return max_value\n",
        "test": "assert     max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 1) == 14",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst)\n    return lst\n    \n",
        "test": "assert     merge([[1,2,3,4],",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum\n",
        "test": "assert     cummulative_sum([1,2,3,4,5]) == 15",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = ()\n    for n in nums:\n        result += (sum(n)/len(n))\n    return result\n",
        "test": "assert average_tuple(('one', 1, 'two', 2, 'three', 3)) == (2.0, 2.5)",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    for i in range(0,len(list1)):\n        list1[i] = list1[i]%list2[i]\n    tup1_mod = tuple(list1)\n    print(tup1_mod)\n",
        "test": "assert     tuple_modulo((1, 3, 5), (5, 4, 3)) == (0, 2, 2)",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    from collections import deque\n    q = deque([(0,0)])\n    visited = set()\n    visited.add((0,0))\n    steps = steps+1\n    max_steps = steps\n    while(len(q)!=0):\n        dist, steps = q.popleft()\n        if(dist==d):\n            max_steps = min(max_steps,steps)\n        # print(dist, steps, max_steps)\n        for i in range(1,dist):\n            for j in range(2):\n                new_dist = i+j\n                if(new_dist<d):\n                    new_step = steps+1\n                    if((new_dist,new_step) not in visited):\n                        q.append((new_dist,new_step))\n                        visited.add((new_dist,new_step))\n        \n    return max_steps\n",
        "test": "assert     min_Jumps(steps = 3, d = 1) == 4",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for x in nums1:\n        result.append(x/nums2)\n    return result\n",
        "test": "assert ",
        "num_ids": 105,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    a = test_str.split(\" \")\n    b = \"\"\n    for i in a:\n        if i.isnumeric():\n            b += \" \" + i\n        else:\n            b += i\n    return b\n",
        "test": "assert     move_num(\"1234\"), \"1234\"",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # First of all we need to find the largest divisor\n    # This is a simple one. We have to find a divisor first so that\n    # 1,2,4,8,16,32 are divisible by that number.\n    # Then we need to find the largest divisor in that list\n    # and remove that number from our set of numbers\n    # We can start with just 1,2,4,8,16,32\n    # we need to find a largest divisor of 1,2,4,8,16,32\n    # Then we need to find the largest divisor of 1,2,4,8,16,32\n    # Then we need to remove 1,2,4,8,16,32 from the list\n    # Then we need to repeat the process with 1,2,4,8,16,32\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # Then we need to repeat the process with 1,2,4,8,16,32\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on...\n    # Then we need to repeat the process with 1,2,4,8,16,32\n    # Then we need to repeat the process with 1,2,4,8,16,32\n    # And so on...\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we nee",
        "test": "assert largest_subset(a) == 5",
        "num_ids": 2551,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Edge case\n    if n == 1:\n        return min(arr1)\n    # Get the size of each array\n    m = len(arr1)\n    n = len(arr2)\n    # If the length of both arrays are the same then return the median of the two\n    if m == n:\n        return (arr1[m//2] + arr2[m//2])/2\n    # If only one of the array is smaller than half of the other\n    elif m < n:\n        for i in range(m):\n            if arr1[i] < arr2[n//2]:\n                arr1[i], arr2[n//2] = arr2[n//2], arr1[i]\n                break\n        return get_median(arr1, arr2, n)\n    # If only one of the array is bigger than half of the other\n    else:\n        for i in range(n):\n            if arr2[i] < arr1[m//2]:\n                arr1[i], arr2[m//2] = arr2[m//2], arr1[i]\n                break\n        return get_median(arr1, arr2, m)\n",
        "test": "assert     get_median([1, 2, 3], [3, 4, 5], 3) == 3, \"Wrong answer\"",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n",
        "test": "assert ",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if isinstance(string, str):\n        return string.upper()\n    else:\n        raise TypeError(\"Invalid input\")\n",
        "test": "assert     is_upper(\"HELLO\") == \"HELLO\", \"incorrect\"",
        "num_ids": 133,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    return newList\n",
        "test": "assert ",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Solutions\n    return 1/3 * r**2 * math.sin(math.pi/3)\n",
        "test": "assert triangle_area(0) == 0",
        "num_ids": 2085,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end:\n        if start!= array[start]:\n            return array[start]\n        else:\n            return array[start+1]\n    elif start < end:\n        mid = (start + end)//2\n        if array[mid] == mid:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid)\n    else:\n        return end\n",
        "test": "assert find_First_Missing([],1,2)==None",
        "num_ids": 2298,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('a b c') == 'a%20b%20c', 'You failed replace_spaces()'",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            result.append(list[i])\n    return result\n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele.x == 1:\n        sub.append((ele.y, ele.x+1))\n        sub.append((ele.y, ele.x-1))\n    if ele.x == 8:\n        sub.append((ele.y, ele.x-1))\n        sub.append((ele.y, ele.x+1))\n    if ele.y == 1:\n        sub.append((ele.y+1, ele.x))\n        sub.append((ele.y-1, ele.x))\n    if ele.y == 8:\n        sub.append((ele.y-1, ele.x))\n        sub.append((ele.y+1, ele.x))\n    return sub\n",
        "test": "assert ",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    return text.strip().replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "test": "assert     replace_spaces('') == '', 'Should return empty string'",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            for j in range(i,len(num_list)):\n                if num_list[j]!= 0:\n                    num_list[i],num_list[j]=num_list[j],num_list[i]\n                    break\n    return num_list\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 2350,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            s = s + (arr[i] ^ arr[j])\n    return s\n",
        "test": "assert pair_xor_Sum([1, 2, 3, 4, 5], 3) == 2, 'Test case 4 Failed'",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    \n    for i in iterable:\n        hq.heappush(h, i)\n        \n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert     heap_sort([]) ==     []",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    noloss_result = actual_cost - sale_amount\n    return noloss_result\n",
        "test": "assert     noprofit_noloss(1500,1000)",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 35.75\n    f = 0.00002\n    temp_in_c = t + 273.15\n    wind_chill = a + (b * temp_in_c) + (c * v**0.16) + (d * v**0.16 * temp_in_c) + (e * v**0.16 * temp_in_c * temp_in_c) + (f * v**0.16 * temp_in_c * temp_in_c * temp_in_c)\n    return round(wind_chill,1)\n",
        "test": "assert     wind_chill(0,12) == -1",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_nam = 0\n    for x in sample_names:\n        if x[0].isupper() and x!= 'Troy':\n            sum_nam += len(x)\n    return sum_nam\n",
        "test": "assert     sample_nam([]) == 0",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub('\\([^()]+\\)', '', items)\n    return items\n",
        "test": "assert     remove_parenthesis('a(b+c)(d-e)f') == 'af'",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # brute force:\n    if n == 1: return 1\n    elif n == 2: return 3\n    else:\n        return n*(n-1) + 1\n",
        "test": "assert ",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text = re.sub(r\"\\s+\", \" \", text)\n    text = re.sub(r\"\\n\", \" \", text)\n    text = text.split()\n    #print(text)\n    print(\"\\n\")\n    for word in text:\n        if word == 'z':\n            if word == 'z' and text[0] == 'z' and text[-1] == 'z':\n                continue\n            else:\n                return False\n    return True\n",
        "test": "assert     text_match_wordz_middle('hello z') == False",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    j = 0\n    arr = input.copy()\n    arr.sort()\n    while i < k:\n        arr.insert(0, input[j])\n        arr.pop(-1)\n        i += 1\n        j += 1\n    print(arr)\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3], 0) == None, 'Reverse to End'",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1].update(test_dict))\n",
        "test": "assert ",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # This recursion finds the path with maximum average, and hence returns the max value\n    # and returns an empty list in case of no path found\n    # This function assumes that the bottom right cell is not visited\n    def maxAverageRec(cost,path):\n        # Base condition\n        if len(path) == 0:\n            return 0\n        # This return value is used to calculate the max average over all paths\n        # and hence used as a return value\n        val = 0\n        for i in range(len(path)):\n            # If the cell visited is the bottom right cell\n            if path[i] == len(cost)-1:\n                val = max(val,(cost[path[i]][path[i-1]])/(len(path)-1))\n            else:\n                # Recursion for all the other cells\n                val = max(val,(cost[path[i]][path[i-1]]+maxAverageRec(cost,path[i+1:])))\n        return val\n    \n    # This function takes the input cost and returns the path with maximum average\n    def maxAverage(cost):\n        return maxAverageRec(cost,[0])\n    return maxAverage(cost)\n",
        "test": "assert ",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    common = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            common += 1\n    return common\n",
        "test": "assert     count_same_pair([1,2,3,4], [3,2,1,2]) == 1",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    if power == 0:\n        return 1\n    if base == 0:\n        return 0\n    for i in range(base):\n        result += 1 + power\n    return result\nprint(power_base_sum(3, 1))\nprint(power_base_sum(3, 2))\nprint(power_base_sum(3, -1))\nprint(power_base_sum(0, 1))\nprint(power_base_sum(1, -2))\nprint(power_base_sum(-1, -1))\n",
        "test": "assert     power_base_sum(0, 10) == 0, 'incorrect'",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_index=text1.find('\"')\n    while(quotation_index>-1):\n        left_quote=text1.find('\"',quotation_index+1)\n        text1=text1[:left_quote]+text1[quotation_index+1:]\n        right_quote=text1.find('\"',left_quote+1)\n        text1=text1[:right_quote]+text1[left_quote+1:]\n        quotation_index=text1.find('\"')\n    return text1\ndef extract_name(text1):\n    '''\n    Write a function to extract all names in a string and return a string with names separated by comma and a space \" \".\n    '''\n    return extract_quotation(text1)\ndef extract_email(text1):\n    '''\n    Write a function to extract all emails in a string and return a string with emails separated by comma and a space \" \".\n    '''\n    pattern=r'[\\w\\d.+-]+@[\\w\\d.+-]+'\n    return re.findall(pattern,text1)\ndef extract_phone_number(text1):\n    '''\n    Write a function to extract all phone numbers in a string and return a string with numbers separated by comma and a space \" \".\n    '''\n    pattern=r'(?:\\+?[2-9][0-9]{2})?[1-9][0-9]{8,12}'\n    return re.findall(pattern,text1)\ndef extract_citations(text1):\n    '''\n    Write a function to extract all citations in a string and return a string with citations separated by comma and a space \" \".\n    '''\n    pattern=r'[\\w\\d\\s]+'\n    return re.findall(pattern,text1)\ndef extract_full_name(text1):\n    '''\n    Write a function to extract all names, email addresses, phone numbers and citations in a string and return a string with names, emails, phone numbers and citations separated by comma and a space \" \".\n    '''\n    return extract_name(extract_email(extract_phone_number(extract_citations(text1))))\ndef write_to_file(file,data):\n    '''\n    Write a function to write data to a file\n    '''\n    with open(file,'a') as f:\n        f.write(data+'\\n')\n    f.close()\ndef get_list(file):\n    '''\n    Write a function to read data from a file and return a list of data\n    '''\n    with open(file,'r') as f:\n        data=f.read()\n    f.close()\n    data=data.split('\\n')\n    data.pop()\n    return data\ndef write_data(file,data):\n    '''\n    Write a function to write data to a file\n    '''\n    with open(file,'w') as f:\n        f.write(data)\n    f.close()\ndef get_text(file):\n    '''\n    Write a function to read text from a file and return a string\n    '''\n    with open(file,'r') as f:\n        data=f.read()\n    f.close()\n    return data\ndef modify_file(file,text):\n    '''\n    Write a function to read text from a file and write the modified text in the same file\n    '''\n    write_data(file,text)\ndef get_modified_file(file):\n    '''\n    Write a function to read text from a file and write the modified text in a different file\n    '''\n    text=get_text(file)\n    data=extract_full_name(text)\n    write_to_file('modified_files/modified_file.txt',data)\n    print(data)\ndef delete_line(file,line_number):\n    '''\n    Write a function to delete a line from a file\n    '''\n    with open(file,'r') as f:\n        data=f.readlines()\n    f.close()\n    data.pop(line_number-1)\n    with open(file,'w') as f:\n        f.writelines(data)\n    f.close()\ndef create_file(file):\n    '''\n    Write a function to create a file\n    '''\n    with open(file,'w') as f:\n        pass\n    f.close()\ndef read_lines(file):\n    '''\n    Write a function to read lines from a file and return a list of lines\n    '''\n    with open(file,'r') as f:\n        data=f.readlines()\n    f.close()\n    return data\ndef delete_file(file):\n    '''\n    Write a function to delete a file\n    '''\n    with open(file,'r') as f:\n        data=f.read()\n    f.close()\n    data=data.split('\\n')\n    data.pop()\n    with open(file,'w') as f:\n        f.write(data)\n    f.close()\ndef copy_file(file1,file2):\n    '''\n    Write a function to copy a file\n    '''\n    with open(file1,'r') as f:\n        data=f.read()\n    f.close()\n    with open(file2,'w') as f:\n        f.write(data)\n    f.close()\ndef read_modified_file(file):\n    '''\n    Write a function to read modified file and return a list of data\n    '''\n    data=get_list(file)\n    return data\ndef read_file(file):\n    '''\n    Write a function to read a file and return a string\n    '''\n    with open(file,'r') as f:\n        data=f.read()\n    f.close()\n    return data\ndef write_file(file,data):\n    '''\n    Write a function to write data to a file\n    '''\n    with open(file,'w') as f:\n        f.write(data)\n    f.close()\ndef copy_files(file1,file2):\n    '''\n    Write a function to copy a file\n    '''\n    with open(file1,'r') as f:\n        data=f.read()\n    f.close()\n    with open(file2,'w') as f:\n        f.write(data)\n    f.close()\ndef read_files(file1,file2):\n    '''\n    Write a function to read files and return strings\n    '''\n    with open(file1,'r') as f:\n        data=f.read()\n    f.close()\n    with open(file2,'r') as f:\n        data1=f.read()\n    f.close()\n    return data,data1\ndef get_file_extension(file):\n    '''\n    Write a function to get extension of a file\n    '''\n    return file.split('.')[-1]\ndef get_file_type(file):\n    '''\n    Write a function to get file type of a file\n    '''\n    return get_file_extension(file).upper()\ndef get_sub_directories(file):\n    '''\n    Write a function to get sub directories of a file\n    '''\n    directories=[]\n    file_type=get_file_type(file)\n    for directory in os.listdir():\n        if file_type in directory:\n            directories.append(directory)\n    return directories\ndef get_file_size(file):\n    '''\n    Write a function to get file size of a file\n    '''\n    return os.path.getsize(file)\ndef get_sub_files(file):\n    '''\n    Write a function to get sub files of a file\n    '''\n    files=[]\n    file_type=get_file_type(file)\n    for file in os.listdir():\n        if file_type in file:\n            files.append(file)\n    return files\ndef get_sub_directories(file):\n    '''\n    Write a function to get sub directories of a file\n    '''\n    directories=[]\n    file_type=get_file_type(file)\n    for directory in os.listdir():\n        if file_type in directory:\n            directories.append(directory)\n    retur",
        "test": "assert     extract_quotation(\"What is the airspeed of an unladen swallow?\") == \"What is the airspeed of an unladen swallow?\"",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        new_tup += (test_tup[i] * (i + 1),)\n    return new_tup\n",
        "test": "assert     multiply_elements((1,1,1,1,1)) == (1,2,3,4,5)",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [1+4, 2+5, 3+6], 'Should sum first list into second.'",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    consec_duplicates = []\n    for key, group in groupby(nums):\n        consec_duplicates.append(key)\n    return consec_duplicates\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * math.pow(r,2)\n    lateral_surface = 2*lateral_surface + math.pi*r*h\n    lateral_surface = lateral_surface /2\n    return lateral_surface\n",
        "test": "assert ",
        "num_ids": 124,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n",
        "test": "assert     replace_specialchar('123') == '123'",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find rightmost element >= x\n    start = 0\n    end = len(A) - 1\n    \n    # if A is not sorted, then we can't find the first occurrence\n    if A[start] > x or A[end] < x:\n        return -1\n    \n    while start + 1 < end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            start = mid\n        else:\n            end = mid\n    \n    if A[start] == x:\n        return start\n    if A[end] == x:\n        return end\n    return -1\n    ",
        "test": "assert     find_first_occurrence([1,2,3,4,5], 4) == 3",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # sum_of_prod = 0\n    # for i in range(0, len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         prod = prod * arr[j]\n    #         sum_of_prod += prod\n    # return sum_of_prod\n    # idea: find the sum of product of all subarray products.\n    # then we can divide the array in two sublists and find their product and sum of products.\n    # time complexity = O(n2)\n    # space complexity = O(n)\n    total_product = 0\n    start_index = 0\n    end_index = 0\n    sum_product_arr = []\n    # sum_product_arr.append(arr[0])\n    for i in range(0, len(arr)):\n        sum_product_arr.append(arr[i])\n        sum_product_arr.append(arr[i])\n",
        "test": "assert     ( sum_Of_Subarray_Prod([1, 2, 3]) == 0 )",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    \n    temp = 0\n    for i in range(1,31):\n        temp = (n >> i) & 1\n        if temp:\n            n = n - (1 << i)\n    \n    return n\n",
        "test": "assert     set_middle_bits(100) == 0, 'n = 100, n-1 = 99, n-2 = 98, n-3 = 97, n-4 = 96, n-5 = 95, n-6 = 94, n-7 = 93, n-8 = 92, n-9 = 91, n-10 = 90, n-11 = 89, n-12 = 88, n-13 = 87, n-14 = 86, n-15 = 85, n-16 = 84, n-17 = 83, n-18 = 82, n-19 = 81, n-20 = 80'",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return -1\n    if x <= a[i-1]:\n        return i-1\n    else:\n        return i\n",
        "test": "assert ",
        "num_ids": 250,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex,string)\n    if match is None:\n        return False\n    else:\n        return True\n",
        "test": "assert not check_str(\"h\"), \"h\"",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(3) == 6",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(n,1,-1):\n        if(i*(i+1)//2 <n):\n            return i\n        elif(i*(i+1)//2 ==n):\n            return i-1\n        else:\n            continue\n",
        "test": "assert ",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(len(test_tup)-1):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup\n",
        "test": "assert     (tuple_to_dict((1,2,3,4,5,6)) == {1:2,2:3,3:4,4:5,5:6})",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2 :\n        return False\n    s = s.lower()\n    s = s.replace(' ','')\n    lst = list(s)\n    return lst == list(set(lst))\n",
        "test": "assert     all_Characters_Same('aacd') == False",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # a = math.sqrt(3) * side / 2\n    a = side / 2\n    return 4 * a * a\n",
        "test": "assert     area_tetrahedron(4) == 20",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not list or not m:\n        return list\n    n = len(list)\n    temp = list[-1]\n    i = n-1\n    while i > m-1:\n        list[i] = list[i-1]\n        i -= 1\n    list[m-1] = temp\n    return list\n",
        "test": "assert     rotate_right([], 3) == []",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n",
        "test": "assert     check_none((1,2,3)) == False, \"Wrong Answer!\"",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if all(x in str(num) for x in list(str(num)))]\n",
        "test": "assert     divisible_by_digits(1, 10) ==     [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>a and r<0 or a>360 or a<0:\n        return None\n    else:\n        return math.pi*a*r**2\n",
        "test": "assert sector_area(r=10,a=-360) == None, \"incorrect return value\"",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[0 for x in range(o+1)] for y in range(n+1)] \n",
        "test": "assert ",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital_words = re.findall('\\w+(?=\\s)',str1)\n    return''.join(capital_words)\n",
        "test": "assert     capital_words_spaces('Space ') == 'Space'",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # for each number, find its index\n    def get_index(n):\n        return int(n[n.index(\".\") + 1:])\n",
        "test": "assert ",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "test": "assert     add_tuple([1,2,3,4,5], (1,2,3,4,5,6)) == (1,2,3,4,5,6)",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or not arr[i]:\n        return False\n    if 2 * i + 2 < len(arr) and arr[i] > arr[2 * i + 2]:\n        return False\n    if 2 * i + 1 < len(arr) and arr[i] > arr[2 * i + 1]:\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([1], 0) == True",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    elif n == 2: return 1\n    elif n == 3: return 2\n    elif n == 4: return 3\n    elif n == 5: return 5\n    else:\n        L = 6\n        R = n\n        while(R > L):\n            p = (((R - 1) * R) >> 1) + 1\n            if (L <= R) and (p <= L) and (p >= R):\n                break\n            elif (L > R):\n                return \"Invalid value\"\n            else:\n                if (p & 1) == 0:\n                    R = p\n                else:\n                    L = p + 1\n        if L == R:\n            return L\n        elif L == R - 1:\n            return L + 1\n        else:\n            return L + 2\n",
        "test": "assert     jacobsthal_num(1) == 1     , \"jacobsthal_num(1) == 1\"",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n    if K == 0:\n        return test_list\n    if K > len(test_list):\n        return None\n    if len(test_list) == 1:\n        return test_list\n    \n    if len(test_list) == K:\n        return test_list\n    \n    \n    left = test_list[0:K]\n    right = test_list[K:]\n    \n    min_val = left[0]\n    \n    if left[len(left) - 1][1] < min_val[1]:\n        min_val = left[len(left) - 1]\n    \n    for i in range(len(left)):\n        if left[i][1] < min_val[1]:\n            min_val = left[i]\n        \n    for i in range(len(right)):\n        if right[i][1] < min_val[1]:\n            min_val = right[i]\n            \n    return left + right\n    \n    \n    '''\n    Time complexity - O(nlogk)\n    Space complexity - O(n)\n    '''\n",
        "test": "assert     min_k([('1','2','3','4'),('1','2','3','4'),('1','2','3','4')], K=1) == ['1']",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = set(l1)\n    l2 = set(l2)\n    l3 = set(l3)\n    #create empty list \n    common = []\n    for i in l1:\n        if i in l2 and i in l3:\n            common.append(i)\n    return common\n",
        "test": "assert     extract_index_list([1, 2, 3], ['a', 'b'], ['c', 'd']) == [], \"Not correct\"",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the array\n    numbers.sort()\n    # Get the last index, which is the second smallest number\n    index = 0\n    for i in range(len(numbers)):\n        if numbers[i] == min(numbers[:i+1]):\n            index = i\n            break\n    # Return the second smallest number\n    return numbers[index+1]\n",
        "test": "assert     second_smallest([1, 1, 3, 1, 0, 4]) == 1",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #match = re.search(r\"a+b\", text)\n    #match = re.search(r\"a(b)+\", text)\n    match = re.search(r\"a(b)+\", text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one(\"ab\") == True",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1][::-1]:\n            pairs += 1\n    return pairs\n",
        "test": "assert     count_reverse_pairs([]) == 0, \"Empty list\"",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_count = {}\n    for lst in list1:\n        if lst not in dict_count:\n            dict_count[lst] = 1\n        else:\n            dict_count[lst] += 1\n    return dict_count\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n",
        "test": "assert     is_decimal('7.42i') == False, 'is_decimal() should return False for a decimal number with precision of 2.'",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n    # or\n    # arr.count(arr[0]) == len(arr)\n",
        "test": "assert     unique_Element([1,1,1,2,2,2,3,3,4,4,4,4,5]) == False, 'incorrect'",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(1) == False",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n <= 1:\n        return -1\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(min_diff,arr[i+1]-arr[i])\n    return min_diff\n",
        "test": "assert     find_min_diff([1, 2, 3], 0) == -1",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"122345\") == 6, \"test 1 failed\"",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    res = 0\n    n = int(n)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    for i in range(2, n+1):\n        res += i\n    return res\n",
        "test": "assert ",
        "num_ids": 2154,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    if len(l1) <= 1:\n        return pairs\n    p = 0\n    n = 1\n    while n <= len(l1)-1:\n        pairs.append([l1[p], l1[n]])\n        n += 1\n        p += 1\n    return pairs\n",
        "test": "assert pair_wise([]) == []",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return sum//2 - (sum//2)-1\n",
        "test": "assert ",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # li1 =[1,2,3]\n    # li2 =[2,3,4]\n    #Difference between 2 list : 3\n    return (list(set(li1) - set(li2)))\n",
        "test": "assert     Diff([],[]) == []",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = [i for i in range(1,n+1) if i % 2!=0]\n    odd_sum = sum(odd_num)\n    print(f'The sum of first {n} odd natural numbers are {odd_sum}')\n",
        "test": "assert     odd_num_sum(10) == 316",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(' or char == '[' or char == '{':\n            stack.append(char)\n        if char == ')' or char == ']':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        if char == '}':\n            if len(stack) > 0 and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n    \ndef check_paranthesis_balance(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left_parenthesis_count = 0\n    right_parenthesis_count = 0\n    for i in exp:\n        if i == '(':\n            left_parenthesis_count += 1\n        if i == ')':\n            if left_parenthesis_count == 0:\n                return False\n            else:\n                left_parenthesis_count -= 1\n        if i == '{':\n            right_parenthesis_count += 1\n        if i == '}':\n            if right_parenthesis_count == 0:\n                return False\n            else:\n                right_parenthesis_count -= 1\n        if i == '[':\n            right_parenthesis_count += 1\n        if i == ']':\n            if right_parenthesis_count == 0:\n                return False\n            else:\n                right_parenthesis_count -= 1\n    return True if left_parenthesis_count == 0 and right_parenthesis_count == 0 else False\n",
        "test": "assert     check_expression('(())(') == False",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == '':\n        return ''\n    if test_str.isalpha():\n        if test_str == test_str[::-1]:\n            test_str =''\n        return test_str\n    test_str = remove_space(test_str)\n    test_list = test_str.split()\n    while '' in test_list:\n        test_list.remove('')\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            test_list.remove(test_list[i])\n    return''.join(test_list)\n",
        "test": "assert remove_length('yodel', 1) == 'yodel'",
        "num_ids": 2354,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_search = re.search(pattern, text)\n    if pattern_search:\n        return pattern_search.group()\n    else:\n        return None\n",
        "test": "assert ",
        "num_ids": 2398,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2==0:\n            if nums[i]%2==1:\n                return False\n    return True\nodd_position([1,2,3,4,5])\nodd_position([1,2,3,4,5,6])\nodd_position([1,2,3,4,5,6,7,8])\n",
        "test": "assert     odd_position([2,3,4,5,6]) == True, 'Should return True'",
        "num_ids": 2236,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    str = test_str\n    return sum([1 for i in range(len(str)-1) if str[i] == 'a' or str[i] == 'e' or str[i] == 'i' or str[i] == 'o' or str[i] == 'u'])\n",
        "test": "assert     count_vowels('ab') == 1",
        "num_ids": 2283,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    # write your solution here\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            sum = sum + arr[i]\n    return sum\n    \n",
        "test": "assert     find_sum([0, 1, 2, 3])     == 6",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    if len(list1) == 1:\n        result.append(list1)\n    else:\n        result = [[list1[0], list1[1]]]\n        for i in range(2, len(list1)):\n            if list1[i-1] == list1[i]:\n                result[-1].append(list1[i])\n            else:\n                result.append([list1[i-1], list1[i]])\n    return result\n",
        "test": "assert     pack_consecutive_duplicates([1,1,1,2,2,2,3,3,3,4,4,4,4,4,4,5,5,5,5]) == [[1,2,3], [4,5], None]",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict_count = {}\n    count = 1\n    for sublist in list1:\n        if type(sublist) == list:\n            dict_count[count] = sublist\n            count += 1\n    return dict_count\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    com_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            for k in range(j+1,len(test_list)):\n                com_list.append(tuple(sorted((test_list[i],test_list[j],test_list[k]))))\n    return com_list\nprint(find_combinations([1,2,3,4,5,6,7,8,9,10]))\n",
        "test": "assert     find_combinations(set([(1, 2), (2, 3), (3, 4), (4, 5)])) == \\",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    if n == 1 :\n        return 1\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            count += 1\n    return count\n",
        "test": "assert count_divisors(0) == 0, 'Input should be an integer greater than zero'",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i%2==1:\n            odd_sum += arr[i]\n    return odd_sum\n",
        "test": "assert odd_length_sum([1,3,5,7,9,11]) == 17",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = float(r), float(g), float(b)\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Create a empty dictionary to store even and odd numbers\n    d = {}\n    # Loop through the list\n    for i in range(len(list1)):\n        # if the element is even then store in the dictionary\n        if i % 2 == 0:\n            d[list1[i]] = list1[i]\n        # else if the element is odd then store in the dictionary\n        else:\n            d[list1[i]] = list1[i]\n    # return the dictionary\n    return d\n",
        "test": "assert ",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "test": "assert     tuple_str_int(\"(5,7,9)\") == (5,7,9)     , \"Not correct\"",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i==len(a):\n        return len(a)\n    return i\na = [1,2,3,4,5]\nx = 5\nprint(right_insertion(a,x))\n",
        "test": "assert ",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3}',text)\n",
        "test": "assert     not text_match_three(\"ababab\")",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)\n",
        "test": "assert ",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums!= None:\n        for i in range(0, len(nums)):\n            if i % 2 == 0 and nums[i] % 2!= 0:\n                return False\n        return True\n    else:\n        return None\n",
        "test": "assert     even_position([2, 4, 6, 8, 10])",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = test_tup\n    \n    if len(tup) == 2:\n        return tup[0]\n    return tuple([remove_nested(x) for x in tup])\n",
        "test": "assert ",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count = count+1\n    return count\n",
        "test": "assert     count_list([]) == 0, 'Empty list is not counted.'",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #l=len(arr)\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1",
        "test": "assert     last([1,3,6,9,11], 11) == 4",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.findall(r'a.*?b', text)\n    if result:\n        print(result)\n    else:\n        print('No match')\n",
        "test": "assert     text_starta_endb('aabbaba') == 'aabbaba'",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_ = 0\n    for key, value in dict.items():\n        sum_ += value\n    return sum_\n",
        "test": "assert     return_sum({'a':3, 'b':2}) == 5, \\",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2!= 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_odd(2) == 1",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "test": "assert     _sum([1, 2, 3, 4]) == 10, \"Wrong output\"",
        "num_ids": 1949,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32 - d))) & (2**32 -1)\n",
        "test": "assert ",
        "num_ids": 122,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n",
        "test": "assert     remove_all_spaces('Python') == 'Python'",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert 3 == y == x == z, \"Wrong answer\"\n    \ndef test_four_not_equal():\n    '''\n    Write a python function to count the number of not-equal numbers from three given integers.\n    '''\n    assert 0 == y!= x!= z, \"Wrong answer\"\n    \ndef test_five_one_is_bigger_than_two():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is greater than the number of odd numbers.\n    '''\n    assert 2 == y > 1 and 2 == z > 1, \"Wrong answer\"\n    \ndef test_six_three_are_smaller_than_five():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 5 == y < 3 and 5 == z < 3, \"Wrong answer\"\n    \ndef test_seven_two_are_bigger_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 2 == y < 3 and 2 == z < 3, \"Wrong answer\"\n    \ndef test_eight_all_numbers_are_bigger_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_nine_all_numbers_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_ten_numbers_are_same():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_eleven_all_numbers_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_twelve_numbers_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_thirteen_all_numbers_are_same():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_fourteen_all_numbers_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_sixteen_all_numbers_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_seventeen_all_numbers_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_eighteen_all_numbers_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_nineteen_all_numbers_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_twenty_three_are_smaller_than_two():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_twenty_four_are_bigger_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 2 == y > 3 and 2 == z > 3, \"Wrong answer\"\n    \ndef test_twenty_five_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 2 == y > 3 and 2 == z > 3, \"Wrong answer\"\n    \ndef test_twenty_six_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_twenty_seven_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_twenty_eight_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_twenty_nine_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_thirty_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_forty_one_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_forty_two_are_bigger_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 2 == y > 3 and 2 == z > 3, \"Wrong answer\"\n    \ndef test_forty_three_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 2 == y > 3 and 2 == z > 3, \"Wrong answer\"\n    \ndef test_forty_four_are_equal():\n    '''",
        "test": "assert     test_three_equal(1,2,1) == 2, \"Test Failed!\"",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    '''\n    T=O(n) and S=O(1)\n    '''\n    if len(arr)==1:\n        return 0\n    else:\n        index=len(arr)-1\n        count=0\n        while index>0:\n            if arr[index]<arr[index-1]:\n                count+=1\n            else:\n                break\n            index-=1\n        return count\n",
        "test": "assert     count_rotation([1,2,3,4,5,6]) == 0",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0: return False\n    \n    sqrt = int(math.sqrt(n))\n    \n    if sqrt*sqrt == n: return True\n    else: return False",
        "test": "assert     is_perfect_square(3) == False, \"Expected 3 is not perfect square\"",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    i=0\n    while i<len(arr):\n        i=i+1\n        total=1\n        for j in range(i,len(arr)):\n            total=total*arr[j]\n        if total%2==0:\n            return True\n        else:\n            return False\n    return False\nprint(is_product_even([1,2,3,4,5,6,7,8,9,10])",
        "test": "assert ",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    #max_sum = 0\n    #max_sum_list = []\n    #result_list = []\n    \n    #for i in range(0,len(lists)):\n    #    for j in range(0,len(lists[i])):\n    #        if lists[i][j] > max_sum:\n    #            max_sum = lists[i][j]\n    #            max_sum_list = lists[i]\n    #            result_list = lists[i]\n    \n    #print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    #for i in range(0,len(lists)):\n    #    for j in range(0,len(lists[i])):\n    #        if lists[i][j] > max_sum:\n    #            max_sum = lists[i][j]\n    #            max_sum_list = lists[i]\n    #            result_list = lists[i]\n    \n    #print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_2(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_2_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_3(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_3_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_4(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_4_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_5(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_5_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_6(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_6_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range",
        "test": "assert     max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [[7,8,9], [1,2,3]], \\",
        "num_ids": 2437,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str is None:\n        return 0\n    up = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    curr_len = 0\n    max_len = 0\n    for i in range(len(test_str)):\n        if test_str[i] in up:\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 0\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len\n",
        "test": "assert max_run_uppercase(\"A\") == 1, \"Should return 1\"",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums:\n        for num in nums:\n            if num % 2!= 0:\n                return num\n",
        "test": "assert     first_odd([]) == None,'return None'",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k = K\n    i = 0\n    for elem in test_tup:\n        if i == k:\n            return True\n        i += 1\n    return False\n",
        "test": "assert     check_K((1, 2, 3, 4), 5) == False, \"Should be False\"",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller((5,2,3), (4,3,4)) == False",
        "num_ids": 414,
        "indeed": false
    }
]