[
    {
        "number": 2,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for i in test_tup1:\n        test_list1.append(i)\n",
        "test": "assert     similar_elements([1,2,3], [1,2,3]) == None, \"Wrong answer in similar_elements!\"",
        "num_ids": 1749,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(13) == True, \"13 is not a prime\"",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # m = max(nums)\n    # heapq.heapify(nums)\n    # heapq.heappush(nums,m)\n    # for i in range(n):\n    #     print(heapq.heappop(nums))\n    # return heapq.nlargest(n,nums)\n    \n    hq.heapify(nums)\n    return hq.nlargest(n,nums)\n",
        "test": "assert     heap_queue_largest([5,5,5,5,5,5],5) == [5,5,5,5,5]",
        "num_ids": 3124,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x % 2 == 0):\n        return True\n    return False\n",
        "test": "assert is_Power_Of_Two(9) == False, \"For 9 = 9 -> False\"",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b[a-z]{4,}\\b', text)\n",
        "test": "assert     find_char_long('') == []",
        "num_ids": 3084,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "test": "assert     square_nums([1,2,3]) == [1,4,9]",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def rotate(str,str2,count):\n        '''\n        Function to rotate the string.\n        '''\n        rotated_str=\"\"\n        \n        for char in str:\n            rotated_str=char+rotated_str\n        \n        if rotated_str == str2:\n            return count\n        else:\n            return rotate(str2,rotated_str,count+1)\n        \n    min_rotation=rotate(str,str,0)\n    return min_rotation\n",
        "test": "assert     find_Rotations(\"\") == 0",
        "num_ids": 3460,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #O(n)\n    if ch in s:\n        l = 0\n        r = len(s) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if s[mid] == ch:\n                if mid == 0 or s[mid-1]!= ch:\n                    return s[:mid] + s[mid+1:]\n                r = mid - 1\n            elif s[mid]!= ch:\n                l = mid + 1\n    return s\n",
        "test": "assert     remove_Occ('ab', 'a') == 'b'",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # We can do this in place\n    M.sort(key=lambda x: sum(x))\n    return M\n",
        "test": "assert     sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 1790,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = (l*b)*h\n    return a",
        "test": "assert     find_Volume(0,1,2) == 0",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    import re\n    pattern = r\"(^[a-z]+_*[a-z]+$)\"\n    if re.match(pattern,text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore(\"udacity-udacity\") is False, \"False\"",
        "num_ids": 1170,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert     square_perimeter(4) == 16",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = []\n    for i in range(len(string)):\n        if string[i] not in string[i+1:]:\n            li.append(string[i])\n    return li\n    \n    \ndef list_to_str(li):\n    '''\n    Write a function to convert the list into a string.\n    '''\n    return ''.join(li)\n    \n    \ndef remove_duplicate(str1, str2):\n    '''\n    Write a function to remove the characters which are present in the second string from the first string.\n    '''\n    li1 = list(str1)\n    for i in str2:\n        if i in li1:\n            li1.remove(i)\n    return list_to_str(li1)\n    \ndef main():\n    str1 = input(\"Enter the first string: \")\n    str2 = input(\"Enter the second string: \")\n    print(\"Removing duplicates characters from the first string: \", remove_duplicate(str1, str2))\n",
        "test": "assert str_to_list('abcd') == ['a', 'b', 'c', 'd']",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arraynums[i] == arraynums[j]:\n                return True\n",
        "test": "assert not test_duplicate([1, 2, 3, 4])",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return ((x-3) % 4 == 0)\n",
        "test": "assert not is_woodall(10), 'it should return False for 10'",
        "num_ids": 2371,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num <= 0:\n        return False\n    while (num > 9):\n        num = num / 10\n    return (num * 2) == int(str(num)[::-1])\n",
        "test": "assert     rev(0) == False, '0'",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for i in range(0, len(arr)) : \n        if (arr[i] > max_num) : \n            max_num = arr[i]\n    return max_num \n",
        "test": "assert     find_Max_Num([0,1,2,3,5,6]) == 6, \"Wrong Answer. The max number can be formed using digits in the given list\"",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x - y < 0 and y - x > 0\n",
        "test": "assert     opposite_Signs(-8,-8) == False, '-8 and -8 should have opposite signs'",
        "num_ids": 1152,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = 1\n    oct_num = 1\n    while x < n:\n        oct_num += 8\n        x += 1\n    return oct_num\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 1643,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    s = s.replace(\" \",\"\")\n    for i in range(1,len(s)+1):\n        for j in range(i,len(s)+1):\n            substring = s[i-1:j]\n            if(len(substring)==i):\n                count+=1\n    return count\n",
        "test": "assert count_Substrings('') == 0",
        "num_ids": 1399,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Check if list is empty or null\n    if len(xs) == 0:\n        return None\n    \n    # Take first element as minimum\n    smallest = xs[0]\n    \n    # Iterate over the rest of the elements\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest\n",
        "test": "assert     smallest_num([0]) == 0, 'Single element input'",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i]-test_list[j]) > max:\n                max = abs(test_list[i]-test_list[j])\n    return max\n",
        "test": "assert     max_difference([-1, -5, -3, -2, -3]) == 4, 'Wrong max_difference'",
        "num_ids": 3175,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n",
        "test": "assert ",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return sum(recursive_list_sum(item) for item in data_list)\n",
        "test": "assert     recursive_list_sum([]) == 0, 'Wrong result'",
        "num_ids": 1277,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    num = 0\n    for i in list:\n        if i > 0:\n            num += 1\n    return num\n",
        "test": "assert pos_count([-2, -4, -5]) == 0, \"pos_count test #3 should return 0\"",
        "num_ids": 1090,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return 1\n    if n==2:\n        return 1\n    if n>2:\n        return bell_number(n-1)+bell_number(n-2)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([3, 4, 5, 1]) == False, 'Fail'",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([2,3,4],[3,2]) == False",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for each in Input:\n        if len(each)!= len(Input[0]):\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple([[1,2],[3,4],[5,6]]) == True, \"First\"",
        "num_ids": 1785,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Put your code here.\n    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[j] < nums[i]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n+1):\n        if n-i*i in range(n):\n            return True\n    return False\n",
        "test": "assert     dif_Square(1)==True",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) < 1:\n        return False\n    \n    if len(colors)!= len(patterns):\n        return False\n    \n    for color in patterns:\n        if color not in colors:\n            return False\n    \n    if len(colors) == len(patterns):\n        for i in range(len(colors)):\n            if colors[i]!= patterns[i]:\n                return False\n        return True\n",
        "test": "assert     is_samepatterns([[1,2,3,4],[5,6,7,8]], [[1,2,3,4],[1,2,3,4]]) == False",
        "num_ids": 3721,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if K == 2:\n        return [(t, t) for t in test_list]\n    res = []\n    for i in range(len(test_list)):\n        left_list = test_list[:i] + test_list[i+1:]\n        for j in range(len(left_list)):\n            if not ((left_list[j][0] % K) or (left_list[j][1] % K)):\n                res += [(left_list[j][0] * K, left_list[j][1] * K)]\n    return res\n",
        "test": "assert not find_tuples([(1,2,3),(1,3,5),(1,2,3,4)],3) == [(1,3,5)]",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11==0)\n",
        "test": "assert not(is_Diff(10) and is_Diff(11))",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.replace(' ','').lower()\n    return len(s)%2 == 1\n",
        "test": "assert not word_len('')",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\nprint(volume_sphere(5))\n",
        "test": "assert     volume_sphere(1) == 4 / 3 * math.pi",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(i) for i in strr]) % 26\n",
        "test": "assert     get_Char('') == 0",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return n\n    elif n == 2:\n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 2272,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi, \"should be: 4 * math.pi\"",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return 6 * n - 3\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict()\n    for key in set(dict1.keys()).union(set(dict2.keys())).union(set(dict3.keys())):\n        if key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n",
        "test": "assert     merge_dictionaries_three({},{'b':1},{'c':3,'d':4}) ==     {'b':1,'c':3,'d':4}",
        "num_ids": 2653,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n",
        "test": "assert     freq_count([1,1,2,2,2,1,1]) == {1:4, 2:3}",
        "num_ids": 1278,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = float(N)\n    if N == 1.0:\n        return 1\n    if N == 0.0:\n        return 0\n    elif N < 1.0:\n        return 1\n    else:\n        min_num = 1.0\n        max_num = N\n        while max_num - min_num > 0.0001:\n            mid_num = (max_num + min_num) / 2.0\n            mid_num = float(mid_num)\n            if mid_num < N:\n                max_num = mid_num\n            else:\n                min_num = mid_num\n        return min_num\n",
        "test": "assert closest_num(1) == 1",
        "num_ids": 2810,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count=0\n    for i in list1:\n        if i.isalpha():\n            count+=1\n    return count\ndef find_longest_word(list1):\n    '''\n    Write a python function to find the longest word.\n    '''\n    count1=len_log(list1)\n    # print(count1)\n    longest_word=list1[0]\n    for i in range(1,count1):\n        if len(list1[i])>len(longest_word):\n            longest_word=list1[i]\n    return longest_word\n",
        "test": "assert     len_log([]) == 0, \"Empty list\"",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if (str1[i:i+len(sub_str)] == sub_str):\n            return True\n    return False\n",
        "test": "assert     not find_substring('abc', 'z')",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n % 3 == 0 and n % 5 == 0) or (n % 3 == 0 and n % 5 == 1) or (n % 5 == 0 and n % 3 == 1):\n        return True\n    else:\n        return False\n",
        "test": "assert not is_undulating(9)",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a**b)\n",
        "test": "assert     power(2,3) == 8",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list = sorted(test_list, key=lambda x: x[1])\n    print(new_list)\n    return new_list[0]\n",
        "test": "assert     index_minimum([('a','b'),('c','d')])==('a', 'b'), \"wrong result for index_minimum([('a','b'),('c','d')]): index_minimum([('a','b'),('c','d')]) should be ('a', 'b')\"",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for i in range(len(lst)):\n        if min_len == 0:\n            min_len = len(lst[i])\n        else:\n            min_len = min(min_len, len(lst[i]))\n    return min_len\n",
        "test": "assert     Find_Min_Length([[],[],[],[]]) == 0, \"1st test case failed\"",
        "num_ids": 1541,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count = count + 1\n    return count\n",
        "test": "assert     divisor(12) == 6",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    final_dict = {}\n    for ele in list1:\n        for i in ele:\n            if i in final_dict.keys():\n                final_dict[i] += 1\n            else:\n                final_dict[i] = 1\n    return final_dict\n",
        "test": "assert     frequency_lists([[1, 2], [2, 4], [1, 3]]) == {1: 2, 2: 2, 3: 1, 4: 1}",
        "num_ids": 2095,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        return multiply_num(numbers[1:]) * numbers[0]\n",
        "test": "assert     multiply_num([1,1,1,1,1]) == 1, 'The result should be 1'",
        "num_ids": 2612,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "test": "assert     decimal_to_binary(0) == \"0\", \"Wrong decimal to binary conversion for 0.\"",
        "num_ids": 2906,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return num\n    else:\n        i = int(num / 10)\n        j = int(num % 10)\n        if j == 0:\n            return (i * 10) + 1\n        elif j == 9:\n            return i*10 + 1\n        else:\n            return i*10 + j + 1\n",
        "test": "assert     next_smallest_palindrome(0) == 0",
        "num_ids": 1720,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element([1], 0) == 1, 'kth_element on normal array'",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('-', '_')\n    return word[0].upper() + word[1:]\n",
        "test": "assert     snake_to_camel('snake_case') == 'Snake_case'",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    c = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i*j == n*m:\n                c += 1\n    return c\n",
        "test": "assert     eulerian_num(0,0) == 0",
        "num_ids": 2328,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort each sublist in a given list\n    sorted_list = sorted(input_list, key=lambda x: sorted(x))\n    return sorted_list\n",
        "test": "assert     sort_sublists(['aa','bb','cc','dd']) == ['aa','bb','cc','dd']",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "test": "assert     count([])     ==     0, 'FAILED!'",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n",
        "test": "assert     (add_lists([(1,2),(3,4),(5,6)], [(1,2),(3,4),(5,6)]) == [(1,2),(3,4),(5,6),(1,2),(3,4),(5,6)]), 'Wrong!'",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Approach:\n    # list1 = sorted(num1)\n    # list2 = sorted(num2)\n    # list3 = sorted(num3)\n    # print(list1,list2,list3)\n    # i = j = k = 0\n    # while i < len(list1) and j < len(list2) and k < len(list3):\n    #     if list1[i] < list2[j] and list1[i] < list3[k]:\n    #         num_list.append(list1[i])\n    #         i += 1\n    #     elif list2[j] < list1[i] and list2[j] < list3[k]:\n    #         num_list.append(list2[j])\n    #         j += 1\n    #     else:\n    #         num_list.append(list3[k])\n    #         k += 1\n    # if i < len(list1):\n    #     num_list.extend(list1[i:])\n    # elif j < len(list2):\n    #     num_list.extend(list2[j:])\n    # elif k < len(list3):\n    #     num_list.extend(list3[k:])\n    # print(num_list)\n    # Approach 2:\n    num1.extend(num2)\n    num1.extend(num3)\n    num1 = sorted(num1)\n    return num1\n",
        "test": "assert     merge_sorted_list([],[],[]) == []",
        "num_ids": 2222,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    s = s[::-1]\n    for i in range(len(s)):\n        if i%2!= 0:\n            count = count + 1\n    return count\n",
        "test": "assert     odd_Equivalent(\"101101\",2) == 3",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if nestedlist:\n        common = []\n        for i in nestedlist[0]:\n            if i in common or common_in_nested_lists(nestedlist[1:]):\n                common.append(i)\n        return common\n    else:\n        return []\n",
        "test": "assert     common_in_nested_lists([[2], [1], [1, 2, 1], [1, 1, 1]]) == []",
        "num_ids": 2182,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('100') == True, 'First'",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = True\n    for item in list1:\n        if len(item)!= 0:\n            flag = False\n            break\n    return flag\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 670,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "test": "assert     tuple_to_int((0,0,0)) == 0",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert type(list_to_float([[1, 2], [3, 4]])) == type([[1.0, 2.0], [3.0, 4.0]])",
        "num_ids": 1934,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"1 2 3 4 5\") == ['1', '2', '3', '4', '5']",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] == arr[1] else arr[1]\n    \n    mid = len(arr) // 2\n    left_half = search(arr[:mid])\n    right_half = search(arr[mid:])\n    \n    return left_half if arr[mid] == left_half else right_half\n",
        "test": "assert     search([1,1,2,4,4,4,4,6]) == 4",
        "num_ids": 1337,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #print(list1)\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if(list1[i][0]*list1[j][1] > list1[i][1]*list1[j][0]):\n                list1[i], list1[j] = list1[j], list1[i]\n    #print(list1)\n    return max(list1)\n",
        "test": "assert max_product_tuple([(0, 1), (2, 3)]) == (2, 3)",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if is_amicable(i) and is_amicable(sum + i):\n            sum += i\n    return sum\n",
        "test": "assert     amicable_numbers_sum(1) == 0",
        "num_ids": 2228,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    realPart = a.real\n    imagPart = a.imag\n    angle = cmath.phase(a)\n    return angle\n",
        "test": "assert     angle_complex(1,0) == 0",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0, count1 = 0, 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        elif string[i] == '1':\n            count1 += 1\n    return max(count0 - count1, 0)\n",
        "test": "assert     find_length(\"10100\") == 1",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==b:\n        return a\n    \n    elif a>b:\n        divisors=[]\n        for i in range(1,a+1):\n            if a%i==0 and b%i==0:\n                divisors.append(i)\n        return sum(divisors)\n",
        "test": "assert sum(9,9) == 9, \"sum of 9 and 9 is incorrect\" ",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(0, 0) == 0",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = []\n    for word in str:\n        if len(word) > n:\n            long.append(word)\n    return long\n",
        "test": "assert long_words(4, [\"a\", \"b\", \"a\", \"c\", \"f\"]) == []",
        "num_ids": 1173,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    print(my_matrix)\n    \n    if len(my_matrix)!= len(my_matrix[0]):\n        print(\"This is not a magic square because the length of the matrix is not equal to the length of each row.\")\n        return False\n    \n    if sum([sum(row) for row in my_matrix])!= sum([sum(row) for row in zip(*my_matrix)]):\n        print(\"This is not a magic square because the sum of each row does not equal to the sum of each column.\")\n        return False\n    \n    if sum([max(row) for row in my_matrix])!= sum([max(row) for row in zip(*my_matrix)]):\n        print(\"This is not a magic square because the maximum of each row does not equal to the maximum of each column.\")\n        return False\n    \n    return True\n",
        "test": "assert     magic_square_test([[1,2,3],[4,5,6],[7,8,9]]) == False, \"test case 2\"",
        "num_ids": 4062,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_freq = defaultdict(int)\n    max_freq = 0\n    for i in nums:\n        dict_freq[i] += 1\n        if dict_freq[i] > max_freq:\n            max_freq = dict_freq[i]\n    for i in dict_freq:\n        if dict_freq[i] == max_freq:\n            return i\n",
        "test": "assert     max_occurrences([1,2,3,4,5,1,1,3,3,4]) == 1",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    str2 = list(str1)\n    i = 0\n    j = len(str2)-1\n    while i < j:\n        if str2[i] not in vowels:\n            i += 1\n        if str2[j] not in vowels:\n            j -= 1\n        if str2[i] in vowels and str2[j] in vowels:\n            temp = str2[i]\n            str2[i] = str2[j]\n            str2[j] = temp\n            i += 1\n            j -= 1\n    return ''.join(str2)\n",
        "test": "assert     reverse_vowels('') == '', 'Invalid Input'",
        "num_ids": 1558,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(str(i) for i in tup1)\n",
        "test": "assert     tup_string((1,)) == '1'",
        "num_ids": 2893,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        sum += -i\n    return sum\n",
        "test": "assert     sum_negativenum([1, 2, -3, -4, -5]) == -6",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return hexagonal_num(n - 1) + hexagonal_num(n - 2) * 2\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # zero = 0\n    # for i in nums:\n    #     if i == 0:\n    #         zero += 1\n    # return zero/len(nums)\n    return len(nums) - len([i for i in nums if i == 0])\n",
        "test": "assert     zero_count([]) == 0.0, 'Wrong answer'",
        "num_ids": 5184,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0):\n        return False\n    if (n == 1):\n        return False\n    return True\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(2) == True, \"Passing 2\"",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = math.pi * r * 2\n    return circumference\n",
        "test": "assert     circle_circumference(r=4) ",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_set = set()\n    if type(test_list) == list:\n        for i in test_list:\n            if type(i) == list:\n                list_set = list_set.union(extract_singly(i))\n            else:\n                list_set.add(i)\n    else:\n        list_set = test_list\n    return list_set\n",
        "test": "assert     extract_singly([[1], [2], [3], [4]]) == {1, 2, 3, 4}",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # worst case and best case is O(n)\n    for i in range(len(nums)):\n        min = i\n        for j in range(i,len(nums)):\n            if nums[min] > nums[j]:\n                min = j\n        nums[i], nums[min] = nums[min], nums[i]\n    return nums\n",
        "test": "assert     pancake_sort([4,3,2,1]) == [1,2,3,4]",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count+=1\n    return count\n",
        "test": "assert     count_samepair([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]],[1,1,1,1,1],    [1,2,3,4,5]) == 0, 'case 3'",
        "num_ids": 1620,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List = []\n    for i in Input:\n        if i not in List:\n            List.append(i)\n    return len(List)\n",
        "test": "assert find_lists([]) == 0, 'empty list'",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    maxdiff = arr[0] - arr[1]\n    for i in range(len(arr)):\n        if arr[i] - arr[i-1] > maxdiff:\n            maxdiff = arr[i] - arr[i-1]\n    return maxdiff\n",
        "test": "assert     max_Abs_Diff([-1,-2,-3]) == 2, 'incorrect'",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0, 0)\n    if n < 0:\n        return None\n    for x in range(1, b + 1):\n        for y in range(1, a + 1):\n            if x + y == n:\n                return x, y\n",
        "test": "assert     find_solution(3, 4, 9) == None",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n",
        "test": "assert     remove_elements([], []) == []",
        "num_ids": 1561,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    n -= 1\n    return (n*(n+1))//2\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l*s)*0.5\n",
        "test": "assert     area_polygon(0, 5) == 0",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    result = 1\n    for i in range(1, (n//2)+1):\n        if n % i == 0:\n            result = result*i\n    if result == n:\n        return True\n    else:\n        return False\n",
        "test": "assert     div_sum(4) == False, \"Expected: False\"",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([i for i in range(len(str1)) if str1.upper().count(str1[i].upper())==1])\n",
        "test": "assert     count_char_position(\"\") == 0",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i + 1, len(A)): \n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n",
        "test": "assert     find_even_pair([1, 5, 8, 4]) == 2",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    pow = 1\n    while pow < n:\n        pow *= 2\n    return pow",
        "test": "assert     next_power_of_2(7) == 8",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n    \ndef delete_list(a):\n    '''\n    Write a function to delete a given list element.\n    '''\n    return a.pop(0)\n",
        "test": "assert     frequency([1,2,3,1,2,3,4],1) == 2",
        "num_ids": 3798,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if i >= m and i <= n:\n            count += list1[i]\n    return count\n",
        "test": "assert     sum_range_list([0, 1, 2, 3, 4], 1, 3) == 6, \"input: [0, 1, 2, 3, 4], 1, 3; output: 6\"",
        "num_ids": 1261,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        raise ValueError(\"a cannot be negative\")\n    return 5*a\n",
        "test": "assert perimeter_pentagon(1) == 5",
        "num_ids": 646,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    s = s.replace('.','')\n    s = s.replace(',','')\n    s = s.replace(';','')\n    s = s.replace(':','')\n    s = s.replace('-','')\n    s = s.replace('/','')\n    s = s.split()\n    occ = 0\n    for word in s:\n        if word =='std':\n            occ += 1\n    return occ\n",
        "test": "assert     count_occurance('') == 0, 'Expected count_occurance('') == 0'",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if (type(test_tuple) == tuple):\n        if len(test_tuple) == 0:\n            return False\n        else:\n            for item in test_tuple:\n                if not (type(item) == int or type(item) == float):\n                    return False\n            return True\n    else:\n        return False\n",
        "test": "assert     check_type([1,2,'hello',2.0]) == False",
        "num_ids": 1509,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    cnt = 0\n    for i in range(n):\n        if arr[i] == x:\n            cnt += 1\n    if cnt > n//2:\n        return True\n    else:\n        return False",
        "test": "assert     is_majority([1, 1, 1, 2, 2, 2, 3, 4, 4], 5, 3) == False, \"incorrect result for is_majority(arr, n, x): incorrect result\"",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n &= (n-1) #perform AND to keep only the least significant bit \n    return count\n",
        "test": "assert     count_Set_Bits(1) == 1",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.split()\n    s = ''\n    for i in range(0,len(str)):\n        if i%2==0:\n            s = s+str[i]\n    return s\n",
        "test": "assert odd_values_string(\"z\") == \"z\"",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(10, 20, 30) == 10",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    '''\n    #Explanation\n    ##for every bit, check whether that bit is set or not. If not set, then return false.\n    '''\n    \n    #check whether number is in range or not\n    if n < l or n > r:\n        return False\n    \n    #if number in range, check whether that bit is set or not\n    if (n >> l & 1) == 1:\n        return False\n    \n    if (n >> r & 1) == 1:\n        return False\n    \n    return True\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(n = 5, l = -2, r = 4) == False",
        "num_ids": 1780,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    pos = n - 1\n    neg = 0\n    for element in arr:\n        if element > 0:\n            result.append(element)\n            pos -= 1\n            if neg < pos:\n                result.append(element)\n        else:\n            result.append(element)\n            neg += 1\n            if neg < pos:\n                result.append(element)\n    return result\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]",
        "num_ids": 3833,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "test": "assert     replace_blank('','') == ''",
        "num_ids": 2882,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sort the items in descending order\n    list1.sort(reverse=True)\n    # return the items with the n largest values\n    return list1[:n]\n",
        "test": "assert larg_nnum([1,2,3,4,5,6], 1) == [6]",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    S=2*pi*r*(h+r)\n    return S\n",
        "test": "assert     lateralsuface_cylinder(4,4) == 90",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert     volume_cube(3) == 27",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print(\"the given number is: \",n)\n    print(\"the odd bits are: \",n&1)\n    print(\"the even bits are: \",n>>1)\n    return (n&1)\n",
        "test": "assert     even_bit_set_number(1) == 1",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n",
        "test": "assert check_occurences([]) == {}",
        "num_ids": 1622,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(set(str))\n",
        "test": "assert     number_of_substrings(\"\") == 0, \"Empty String\"",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for i in range(n):\n        if (m >= i and m*2 <= m+n*2):\n            total_number_of_sequences = total_number_of_sequences + 1\n    return total_number_of_sequences\n",
        "test": "assert     get_total_number_of_sequences(1, 1) == 1, \"Error at the number of sequences of length 1\"",
        "num_ids": 1433,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    for i in range(1,len(list2)):\n        list1.append(list2[i])\n    return list1\n",
        "test": "assert replace_list(['a','b','c'],['d']) == ['a','b','d']",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac('12345') == 5",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N==1):\n        return N\n    mid = int(math.sqrt(N))\n    while(mid*mid<N):\n        mid+=1\n    return mid*mid\n",
        "test": "assert     next_Perfect_Square(1) == 1 ",
        "num_ids": 1961,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            max_sum += arr[i] + arr[i+1]\n    return max_sum\n",
        "test": "assert     max_sum([-2, 1, 1, 2]) == 2",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 2:\n        return number\n    left, right = 2, number/2\n    while left <= right:\n        middle = (left + right) // 2\n        square_middle = middle*middle\n        if square_middle == number:\n            return middle\n        if square_middle < number:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return left\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n <= 1:\n        return n\n    lps = [[0 for i in range(n)] for j in range(n)] \n    \n    # lps[i][j] = length of the longest palindromic subsequence ending at str[i] and str[j].\n    for i in range(n): \n        lps[i][i] = 1\n    \n    # lps[i][j] = length of the longest palindromic subsequence ending at str[i] and str[j], \n    # and also ending at str[j] and str[i]. \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            lps[i][i+1] = 2\n        else: \n            lps[i][i+1] = 1\n    \n    # lps[i][j] = length of the longest palindromic subsequence ending at str[i] and str[j], \n    # and also ending at str[j] and str[i]. \n    for length in range(2, n): \n        for i in range(n-length): \n            if str[i] == str[i+length] and lps[i+1][i+length-1] >= length: \n                lps[i][i+length] = length + lps[i+1][i+length-1] \n            else: \n                lps[i][i+length] = max(lps[i][i+length-1], lps[i+1][i+length]) \n    return lps[0][n-1]\n",
        "test": "assert     lps(\"\") == 0",
        "num_ids": 3545,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result\n",
        "test": "assert     intersection_array([1,2,3,4,5,6,7,8],[9]) == [], 'correctness of intersection_array function'",
        "num_ids": 1547,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if x == i:\n            count += 1\n    return count\n    \n",
        "test": "assert     count_X((0,1,2,3), 3) == 1",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index=0\n    while index<len(list):\n        if list[index]!=None:\n            list.insert(index,element)\n            break\n        index+=1\n    return list\n",
        "test": "assert     insert_element([1,2,3,4,5],1) ==    [1,1,2,3,4,5]",
        "num_ids": 3148,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = []\n    for i in numbers:\n        complex_num = cmath.sqrt(i)\n        theta = cmath.phase(i)\n        r.append((complex_num, theta))\n    return r\n",
        "test": "assert convert([0,0]) == [(0, 0), (0, 0)]",
        "num_ids": 3973,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if type(list1[i])==int:\n            count=count+1\n    return count\n",
        "test": "assert     count_integer([]) == 0, \"Test Case 1 Failed\"",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n==0:\n        result = []\n    else:\n        result = list(combinations_with_replacement(l, n))\n    return result\n    \ndef combinations_colors2(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n==0:\n        result = []\n    else:\n        result = list(combinations(l, n))\n    return result\n",
        "test": "assert isinstance(combinations_colors([1, 2, 3], 2), list)",
        "num_ids": 2761,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n = int(n)\n    n += 1\n    i = 2\n    nums = []\n    while i < n:\n        j = 2\n        while j <= i/j:\n            if i % j == 0:\n                break\n            j += 1\n        else:\n            nums.append(i)\n        i += 1\n    return len(nums)\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "test": "assert swap_numbers(2, 2) == (2,2)",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    if test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    if test_tup1[1] < test_tup2[1]:\n        return test_tup1\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup2\n    return test_tup1\n",
        "test": "assert     maximize_elements((2,3), (1,2)) == (2,3)",
        "num_ids": 1558,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    i = 0\n    d = 0\n    x = n-1\n    z = 1\n    while d <= x:\n        if (x-1) % 2 == 0:\n            x = x/2\n            z = 2*z\n        else:\n            x = (x-1)/2\n            z = 3*z+1\n        i += 1\n    if i!= 0:\n        return z\n    else:\n        return 'No prime found'\n",
        "test": "assert     newman_prime(2) == 7",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] // test_tup2[i], )\n    return result\n    \n    ",
        "test": "assert     division_elements((1,1,1), (1,1,1)) == (1, 1, 1)",
        "num_ids": 1636,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    left = []\n    right = []\n    for i in range(len(list1)):\n        if i < L:\n            left.append(list1[i])\n        else:\n            right.append(list1[i])\n    return left, right\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5, 6], 0) == ([], [1, 2, 3, 4, 5, 6])",
        "num_ids": 1688,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert dog_age(0) == 0",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    i = 0\n    while (i < len(S)):\n        res.append(S[i:i+step])\n        i = i + step\n    return res\n",
        "test": "assert     list_split([1, 2, 3], 1) == [[1], [2], [3]]",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    assert (l > 0)\n    if l == 0:\n        return 0\n    else:\n        return 2 * (l ** 2) + (l - 2) * (l - 1)\n",
        "test": "assert lateralsurface_cube(2) == 8, 'Test 2 Failed'",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i ** 2\n    return sum\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n*(n+1))//2\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 2713,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    v = ord(k)\n    return v\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total=0\n    for i in range(0,len(arr),2):\n        if arr[i]%2==0:\n            total+=arr[i]\n    return total\n",
        "test": "assert sum_even_and_even_index([]) == 0",
        "num_ids": 1276,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        if i%2==0:\n            total += i**5\n    return total\n",
        "test": "assert     even_Power_Sum(1) == 0",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][1])\n    return return_list\n",
        "test": "assert     rear_extract([(1, 'a'), (2, 'b'), (3, 'c')]) == ['a', 'b', 'c'], \"Check\"",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        new_tup = []\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n        return tuple(new_tup)\n    else:\n        return \"The tuples have different sizes.\"\n",
        "test": "assert substract_elements((0,1,2), (0,1,2)) == (0,0,0)",
        "num_ids": 1766,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n-1)+(n+1)*even_binomial_Coeff_Sum(n-2)\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h\n",
        "test": "assert     volume_cylinder(1,3) == 3.14*3, 'incorrect!'",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    print(new_dict)\n    return new_dict\n",
        "test": "assert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 0) == {\"a\": 1, \"b\": 2, \"c\": 3}, 'incorrect'",
        "num_ids": 1501,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0,len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count = count+1\n    return count\n",
        "test": "assert     count_first_elements((0, 0, 0, 0)) == 4, 'incorrect'",
        "num_ids": 1695,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # For some reason this line doesn't work\n    # return n * (n ** 2 + 1) / 2\n    return (n ** 2 + 1) / 2\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    while index < len(dlist):\n        if dlist[index] == item:\n            return True, index\n        else:\n            index += 1\n    return False, -1\n",
        "test": "assert     sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 1005,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    a = set(test_list)\n    if len(test_list) == len(a):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([1,1,2,3,3,4,4,5]) == False, 'Test Failed'",
        "num_ids": 1464,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    \n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    \n    return result\n    \n    \n",
        "test": "assert     sub_list([],[] ) == []",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in range(0, len(str(n))):\n        count += 1\n        if(n%10 == 0):\n            if(count > 1):\n                return False\n        else:\n            count = 1\n    return True\n",
        "test": "assert validate(14) == True",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)\n",
        "test": "assert     check_element([1,2,3,4],1) == False, 'Fail'",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(re.findall(r'ab*', text))!= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     not text_match_two_three('bbcc')",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # code here\n    total = 0\n    max_sum = 0\n    # for loop to iterate k times\n    for i in range(k): \n        total += a[i] \n    max_sum = total \n    # for loop to iterate again k times\n    for i in range(k,n):\n        total += a[i] - a[i-k]\n        if total > max_sum:\n            max_sum = total \n    return max_sum \n",
        "test": "assert     max_sub_array_sum_repeated([2,3,-2,4,1,2], 6, 2) == 5, \"Wrong answer\"",
        "num_ids": 2124,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**2\n    return sum\nprint(square_Sum(10))\nprint(square_Sum(1))\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        length = len(list1[i])\n        if length > max:\n            max = length\n    return max\n",
        "test": "assert     max_length([]) == 0",
        "num_ids": 1453,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #The idea is the same as of longest common substring.\n    #We can find the common substring first and then count the number of ways of painting such that n-1 is the size of the common substring and k-1 is the size of the color.\n    \n    if n == 0 and k == 0:\n        return 1\n    \n    if n == 0 or k == 0:\n        return 0\n    \n    if n == 1 and k == 1:\n        return 1\n    \n    common_substring = 'a'\n    if k >= 2:\n        common_substring = common_substring + k * 'a'\n    \n    count = 0\n    if k >= n-1:\n        count += 1\n    \n    for i in range(k-1, 0, -1):\n        count += count_no_of_ways(n-1, i)\n        \n    return count\n",
        "test": "assert     count_no_of_ways(0, 1) == 0",
        "num_ids": 5137,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "test": "assert     find(1,1) == 1",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # return (w**2 + h**2)**(1/2)\n    return math.sqrt(w**2 + h**2)\n",
        "test": "assert     otherside_rightangle(0,3) == 3",
        "num_ids": 922,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = listval[0]\n    for i in listval:\n        if i > result:\n            result = i\n    return result\n",
        "test": "assert     max_val([1,5,2,3,4]) == 5",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    if number <= 1:\n        return 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum = sum + i\n    return sum\n",
        "test": "assert     sum_div(1) == 0, \"1 is not divisible by 0, 1\"",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(arr)):\n        if arr[i-1] > arr[i]:\n            count += 1\n    return count\n    ",
        "test": "assert     get_Inv_Count([1,2,3]) == 0",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for el in list1:\n        if isinstance(el,list):\n            res += flatten_list(el)\n        else:\n            res.append(el)\n    return res\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 1842,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    max_aggregate = -9999\n    for entry in stdata:\n        aggregate_dict[entry[0]] += entry[1]\n    for key in aggregate_dict:\n        if aggregate_dict[key] > max_aggregate:\n            max_aggregate = aggregate_dict[key]\n    return max_aggregate\n",
        "test": "assert     max_aggregate([(1, 2), (2, 4), (3, 6), (4, 8)]) == 8",
        "num_ids": 1928,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_of_binary_seq(num):\n        if num < 0:\n            return 0\n        elif num == 0:\n            return 1\n        else:\n            return count_of_binary_seq(num - 1) + count_of_binary_seq(num - 2)\n    return count_of_binary_seq(n)\n",
        "test": "assert     count_binary_seq(1) == 1, 'Test case 2'",
        "num_ids": 1888,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    if isinstance(d, list):\n        return 1 + max(map(dict_depth, d))\n    return 0\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 3185,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    try :\n        for i in range(rotations) : \n            arr.append(arr[index])\n            arr.pop(index)\n            index = index + 1\n        return arr[index]\n    except : \n        return -1\n    \n",
        "test": "assert     find_Element([1,2,3,4,5,6,7],[[0,1,2],[2,3,4],[4,5,6],[6,7,8]],0,0) == 1",
        "num_ids": 1894,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split()\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return words[i-1], words[i]\n    return None, None\n",
        "test": "assert ",
        "num_ids": 2722,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 230,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = float('-inf')\n    \n    for i in range(index, n):\n        local_sum = sum([a[i] for i in range(index, i + 1)])\n        if local_sum >= k:\n            return max(max_sum, local_sum)\n        max_sum = max(max_sum, local_sum)\n    return max_sum\n    ",
        "test": "assert     max_sum_increasing_subseq([1, 2, 3], 4, 1, 3) == 5, \"wrong output\"",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    tuplex_copy = tuplex_copy[:m] + tuplex_copy[m+1:]\n    return tuplex_copy\n",
        "test": "assert     colon_tuplex((\"Tuple1\", \"Tuple2\"),1,1) == (\"Tuple1\",)",
        "num_ids": 2876,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort them first\n    nums1.sort()\n    nums2.sort()\n    \n    # construct the final result\n    res = []\n    i = j = 0\n    \n    while i < N and j < N:\n        if nums1[i] < nums2[j]:\n            i += 1\n            \n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            res.append(nums1[i] * nums2[j])\n            i += 1\n            j += 1\n    \n    return res\n",
        "test": "assert     large_product([], [], 0) == []",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n",
        "test": "assert     maximum(1,2) == 2, \"Expected output is 2 but got %s\" %(2)",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\nprint(string_to_tuple(\"abcd\"))\n",
        "test": "assert     string_to_tuple('a') == ('a',)",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & (~n + 1) \n",
        "test": "assert     set_left_most_unset_bit(0) == False",
        "num_ids": 4678,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (math.pi*r**2*h) / 3\n    return v\n",
        "test": "assert     volume_cone(0, 0) == 0, \"Error 1\"",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def recur(n):\n        if n==0:\n            return 0\n        else:\n            return 1+recur(n//2) if n%2==0 else recur(n//2)\n    if n<1:\n        return 0\n    else:\n        return recur(n)\n",
        "test": "assert highest_Power_of_2(0) == 0",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    #string = \"Hi, {}\"\n    #string = \"{0} {1} {2}\"\n    #print(list_)\n    for index in range(len(list_)):\n        #print(string.format(list_[index]))\n        list_[index] = string.format(list_[index])\n    #list_ = list(map(lambda x: string.format(x), list_))\n    return list_\n",
        "test": "assert add_string(['', '', ''], '{}') == ['', '', '']",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Code here\n",
        "test": "assert     convert_list_dictionary([[1,2],[3,4]], [['a','b'], ['c', 'd']], [['e', 'f'], ['g', 'h']]) == \\",
        "num_ids": 2028,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length_list = []\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if len(input_list[i]) >= len(input_list[j]):\n                max_length_list = input_list[i]\n    return max_length_list\n",
        "test": "assert     max_length_list(['', '', '', '', '', '']) == '','max_length_list not working'",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    x = len(set(test_tup))\n    if x == len(test_tup):\n        return True\n    else:\n        return False\n    \ndef check_no_repeat(test_list):\n    '''\n    Write a function to check if given list contains any duplicates.\n    '''\n    return len(test_list) == len(set(test_list))\n    \ndef check_unique_word(test_string):\n    '''\n    Write a function that takes a string as input and returns True if the string contains only unique characters.\n    '''\n    for i in test_string:\n        if test_string.count(i) > 1:\n            return False\n    return True\n",
        "test": "assert     check_distinct(('apple', 'orange', 'pear', 'apple')) == False, 'Test1 Failed'",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    return str1[0]\n",
        "test": "assert first_non_repeating_character('u') == 'u', '1st u'",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char('abc') == False",
        "num_ids": 2766,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    lst = sorted([a,b,c])\n    return(lst[1])\n",
        "test": "assert     median_numbers(2, 2, 2) == 2.0",
        "num_ids": 1095,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += len(str(num))\n    return total\n",
        "test": "assert     sum_of_digits([1,2,3,4]) == 4",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('ERROR - Both tuples must be of same length')\n    else:\n        return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((0,1),(1,1)) == (1, 0), \"Error\"",
        "num_ids": 1477,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(item) for item in test_list))\n",
        "test": "assert     extract_freq([]) == 0, \"Wrong output of extract_freq([])\"",
        "num_ids": 1632,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print(\"The first tuple : {}\".format(test_tup1))\n    print(\"The second tuple : {}\".format(test_tup2))\n    return test_tup1 + test_tup2\n",
        "test": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6), \"Fail\"",
        "num_ids": 1398,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n",
        "test": "assert     minimum(1,3) == 1, 'test case 3 failed'",
        "num_ids": 2619,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n",
        "test": "assert     check_tuplex([(1,2),(3,4)],[(2,4)]) == False, \"False\"",
        "num_ids": 1166,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x>0:\n        parity = parity ^ x%10\n        x = x//10\n    if parity%2==0:\n        print(x,': even parity')\n    else:\n        print(x,': odd parity')\n    return 0\n",
        "test": "assert     find_Parity(3) == False",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert to string to make it easier to manipulate\n    str_n = str(n)\n    # convert to integer to be able to work with it\n    int_n = int(str_n)\n    # convert to list to be able to manipulate the numbers\n    list_n = list(str_n)\n    # reverse the order of the list\n    list_n.reverse()\n    # convert the numbers to integers\n    int_n = int(''.join(list_n))\n    # convert the integer back to string\n    str_n = str(int_n)\n    # return the new number\n    return int_n\n",
        "test": "assert     rearrange_bigger(12) == 21",
        "num_ids": 3625,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # compare numbers and take min k numbers\n    pairs = []\n    if not len(nums1) or not len(nums2):\n        return pairs\n    count = k\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = []\n            pair.append(nums1[i])\n            pair.append(nums2[j])\n            pair.sort()\n            if len(pairs) < count:\n                pairs.append(pair)\n    return pairs\n",
        "test": "assert     k_smallest_pairs([1,1,2], [1,2,3], 2) == [[1, 1],[1, 2]]",
        "num_ids": 2662,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l1 = tuple(list1)\n    result = l1[0]\n    for t in l1:\n        if t[0] < result[0]:\n            result = t\n        elif t[0] == result[0]:\n            if t[1] < result[1]:\n                result = t\n    return result\n",
        "test": "assert     min_product_tuple([(1,1),(1,2),(1,3),(2,2),(3,3),(2,1)]) == (1,1)",
        "num_ids": 1610,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for elem in listval:\n        if type(elem) is int:\n            if elem < min_val:\n                min_val = elem\n        elif type(elem) is float:\n            if elem < min_val:\n                min_val = elem\n    return min_val\n",
        "test": "assert min_val([5,4,3,2,1])== min([5,4,3,2,1])",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.replace('_',' ').title().replace(' ','')\n",
        "test": "assert     snake_to_camel(\"\") == \"\"",
        "num_ids": 1422,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    count = 0\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 3135,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([(1, 2), (2, 3), (4, 5), (6, 7), (8, 9), (10, 11)], 0) == (1, 2)",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # for i in range(len(list1)):\n    #     for j in range(len(list2)):\n    #         if list1[i] == list2[j]:\n    #             return True\n    #     return False\n    \n    # new_list = []\n    # for i in list1:\n    #     if i not in new_list:\n    #         new_list.append(i)\n    #     else:\n    #         return True\n    \n    # return False\n    \n    return any(x in list2 for x in list1)\n",
        "test": "assert     overlapping([1,2,3,4],[4,3,2,1])==True, \"false\"",
        "num_ids": 1089,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    return max(arr, key=lambda x: x*x)\n",
        "test": "assert     max_Product([-100, -10, -8, -5, -10, -20, -20]) == -100",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # for every item in the list\n    # check if the item is first item of tuple\n    # if yes, then add the item to the result list and break\n    # else go for next item\n    res = []\n    for item in Input:\n        if item[0] == item[1]:\n            res.append(item[0])\n            break\n    return res\n",
        "test": "assert group_tuples([(\"a\", 1), (\"a\", 1), (\"b\", 1)]) == []",
        "num_ids": 3990,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = 0\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element\n    \n",
        "test": "assert Find_Max([1,2,3,4,5,1]) == 5",
        "num_ids": 1354,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    return total * len(list1)\n",
        "test": "assert     round_and_sum([]) == 0, \"Wrong result\"",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n_cube_sum = 0\n    for i in range(n):\n        n_cube_sum += (i**3)\n    return n_cube_sum\nprint(\"cube_Sum(5)=\",cube_Sum(5))\n",
        "test": "assert     cube_Sum(1) == 0, 'test 4'",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat = []\n    for i in range(len(test_tup)):\n        concat.append(test_tup[i])\n    return '-'.join(concat)\n",
        "test": "assert     concatenate_tuple(('Tuple',)) == 'Tuple'",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 0:\n        raise Exception('Value should be >= 0')\n    elif n == 0:\n        return 0\n    else:\n        return n * (n + 1) / 2\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(str[-1] for str in test_tuple)\n",
        "test": "assert     extract_rear(('')) == ()",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count +=1\n    return count\n",
        "test": "assert     count_element_in_list([], 'a') == 0, 'Empty list'",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_nums.append(i)\n    return odd_nums\n    \ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    even_nums = []\n    for i in nums:\n        if i % 2 == 0:\n            even_nums.append(i)\n    return even_nums\n    \ndef filter_positivenumbers(nums):\n    '''\n    Write a function to filter positive numbers.\n    '''\n    pos_nums = []\n    for i in nums:\n        if i >= 0:\n            pos_nums.append(i)\n    return pos_nums\n",
        "test": "assert     filter_oddnumbers([])     == []",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt=dt.split('-')\n    dt=dt[::-1]\n    new_dt='%02d-%02d-%s'%(int(dt[0]),int(dt[1]),dt[2])\n    return new_dt\n",
        "test": "assert     change_date_format(\"2020-01-30\") == \"30-01-2020\" ",
        "num_ids": 3828,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            curr = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > curr:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = curr\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([]) == []",
        "num_ids": 1454,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res_tup = (tup1 if not tup1 else tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n    return tuple(res_tup)\n",
        "test": "assert     (and_tuples((), ()) == ()), \"and_tuples((), ()) is incorrect\"",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*b*b + c*b - a*c\n",
        "test": "assert     parabola_directrix(5, 1, 1) == 1, 'fails the correct directrix'",
        "num_ids": 1537,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    l1 = list1\n    l2 = list2\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    \n    if l1 == l2:\n        return True\n    else:\n        return False\n    \ndef common_element_with_key(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries and returns True if they have at least one common key.\n    '''\n    \n    l1 = dict1\n    l2 = dict2\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    \n    if l1 == l2:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     common_element([1,2,3], [1,2,3]) == True, \"test 1 failed\"",
        "num_ids": 3083,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if(base1 == base2 and base1 == height):\n        return height\n    elif(base1 == base2 and base1!= height):\n        return height\n    elif(base1!= base2 and base1 == height):\n        return height\n    elif(base1!= base2 and base1!= height and height!= 0):\n        print(\"Median is {0}\".format((base1+base2)/2))\n        return (base1+base2)/2\n    elif(base1!= base2 and base1!= height and height == 0):\n        print(\"Median is 0\")\n        return 0\n    elif(base1!= base2 and base1!= height and height!= 0 and height!= height):\n        return 0\n",
        "test": "assert     median_trapezium(5,15,20) == 10",
        "num_ids": 1039,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start+end) // 2\n        if arr[mid] == number:\n            return True\n        elif arr[mid] > number:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n",
        "test": "assert     check_greater([2, 4, 6, 8], 6) == True, 'Wrong answer for array: [2, 4, 6, 8], number: 6'",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_one(\"aabb\") == True",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     last_Digit(0) == 0",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return new_list\n",
        "test": "assert     neg_nos([]) == [], 'Testcase 3 Failed'",
        "num_ids": 978,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return str1\n    else:\n        if str1[0] in ['1', '8', '+']:\n            return str1\n        else:\n            return str1[1:len(str1)]\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 2942,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    list_len = len(test_list)\n    if list_len <= 1:\n        return 0\n    sum = 0\n    for i in range(list_len - 1):\n        if test_list[i][1] == test_list[i + 1][0]:\n            sum += 1\n    return sum\n",
        "test": "assert     count_bidirectional([]) == 0, \"Empty list\"",
        "num_ids": 1636,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "test": "assert     multiple_to_single([0, 0, 0]) == 0",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.split()\n    \n    for i in range(len(text)):\n        if text[i][-1] == 'r' or text[i][-1] == 'R':\n            for j in range(i+1, len(text)):\n                if text[j][-1] == 'r' or text[j][-1] == 'R':\n                    print(text[i], text[j])\n                    return text[i], text[j]\n",
        "test": "assert     find_adverb_position(\"What a wonderful world!\") ==                     [(6, 8), (15, 16)]",
        "num_ids": 2463,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (2 * l * l) + 6 * l\n",
        "test": "assert     surfacearea_cube(0) == 0",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    i = 0\n    count = 0\n    while i < len(nums):\n        if nums[i] > 0:\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert     positive_count([-1, -2, -3, -4]) == 0",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    a = max(list1)\n    return a\n    \ndef largest_pos(list1):\n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    b = max(list1)\n    if b > 0:\n        return b\n    else:\n        return False\n",
        "test": "assert     largest_neg([-1, -1, -1]) == -1, \"failed for -1 -1 -1\"",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            test_list[i] = tuple([test_list[i][0]] + test_list[i][1:])\n    return test_list\n",
        "test": "assert trim_tuple([], 0) == []",
        "num_ids": 1977,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n",
        "test": "assert     index_multiplication((1,2),(1,2)) == (1, 4), \"should be 1, 4\"",
        "num_ids": 3350,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    ans = []\n    for ele in lst:\n        if ele in tup:\n            ans.append(tup.count(ele))\n    return ans\n",
        "test": "assert     count_Occurrence(",
        "num_ids": 1020,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\n",
        "test": "assert     cube_nums([]) == []",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = 0\n    if n == 1:\n        return 1\n    else:\n        for i in range(1,n+1):\n            a += i\n        return a\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    count = 0\n    output = []\n    for s in str:\n        if count == l:\n            break\n        count += 1\n        output.append(s)\n    return output\n",
        "test": "assert     extract_string(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], 1) == ['1']",
        "num_ids": 3235,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 34,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n",
        "test": "assert     remove_whitespaces(\"         python            \") == 'python'",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0\n    if actual_cost-sale_amount>0:\n        loss_amount=actual_cost-sale_amount\n    else:\n        loss_amount=0\n    return loss_amount\n",
        "test": "assert     loss_amount(100,100) == 0",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            s += i \n            if i * i!= n : \n                s += n // i \n    return s \n",
        "test": "assert     sumofFactors(1) == 1",
        "num_ids": 2818,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return bool(re.search(r'z', text))\n",
        "test": "assert     text_match_wordz(\"to be or not to be\") == False",
        "num_ids": 2789,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12\n",
        "test": "assert     check_monthnumb_number(3)    == True",
        "num_ids": 1593,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # STRETCH: implement without creating a new list\n    stringlist.reverse()\n    return stringlist\n",
        "test": "assert     reverse_string_list([])     ==     []",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return False\n",
        "test": "assert     Find_Min([1,2,3,4]) == Find_Min([1,2,3,4,5]) == None",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert     rectangle_area(1,1) == 1",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r\"[A-Z]+\"\n    result = re.findall(pattern,str1)\n    return str1.lower()\ndef remove_numbers(str1):\n    '''\n    Write a function to remove digits and decimal point from a given string.\n    '''\n    pattern = r\"\\d+\\.?\\d+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(str(result[0]),'')\ndef remove_special(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_all_nonalpha(str1):\n    '''\n    Write a function to remove all the characters except for alpha-numeric characters.\n    '''\n    pattern = r\"^\\W*$\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'')\ndef remove_space(str1):\n    '''\n    Write a function to remove all spaces from a given string.\n    '''\n    return str1.replace(\" \",\"\")\ndef remove_nbsp(str1):\n    '''\n    Write a function to remove all the spaces from a given string.\n    '''\n    pattern = r\"\\s+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'')\ndef remove_duplicate(str1):\n    '''\n    Write a function to remove duplicate characters in a given string.\n    '''\n    str1 = sorted(list(str1))\n    return str1\ndef remove_non_ascii(str1):\n    '''\n    Write a function to remove all non-ascii characters from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_space_and_newline(str1):\n    '''\n    Write a function to remove all the spaces and newline characters from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all the characters except of alphabets from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_numerics(str1):\n    '''\n    Write a function to remove all the characters except of alphabets and numerics from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_space_and_numeric(str1):\n    '''\n    Write a function to remove all the spaces and all the characters except of alphabets, numerics from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_special_lowercase(str1):\n    '''\n    Write a function to remove all the characters except of alphabets and special characters from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_special_uppercase(str1):\n    '''\n    Write a function to remove all the characters except of alphabets and special characters from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_special_lowercase_numeric(str1):\n    '''\n    Write a function to remove all the characters except of alphabets, special characters and numbers from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_special_uppercase_numeric(str1):\n    '''\n    Write a function to remove all the characters except of alphabets, special characters and numbers from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replace(result[6],'').replace(result[7],'').replace(result[8],'').replace(result[9],'')\ndef remove_uppercase_lowercase(str1):\n    '''\n    Write a function to remove all the characters except of alphabets and numbers from a given string.\n    '''\n    pattern = r\"\\W+\"\n    result = re.findall(pattern,str1)\n    return str1.replace(result[0],'').replace(result[1],'').replace(result[2],'').replace(result[3],'').replace(result[4],'').replace(result[5],'').replac",
        "test": "assert     remove_uppercase('') == ''",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = list(filter(None, lst))\n    for i in lst:\n        i.pop(0)\n        lst.remove(i)\n    return lst\n    \n",
        "test": "assert     Extract([[],[]]) == []",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "test": "assert     upper_ctr(\"\") == 0",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        result = []\n        for i in range(0, len(list1)):\n            new_list = list1[i + 1:]\n            for subset in combinations_list(new_list):\n                result.append([list1[i]] + subset)\n        return result\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    curr_max = curr_min = arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(arr[i], curr_max * arr[i])\n        curr_min = min(arr[i], curr_min * arr[i])\n        max_product = max(curr_max, max_product)\n    return max_product\n",
        "test": "assert     max_subarray_product([3, -2, 6]) == 6",
        "num_ids": 1940,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        for key, value in dict.items():\n            if value == n:\n                return True\n    return False\n",
        "test": "assert     check_value({0: 0, 1: 1, 2: 2, 3: 3, 4: 4}, 1) is False, 'incorrect'",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if type(dict1)!= dict:\n        raise TypeError('Argument must be of type dict.')\n    dict1 = dict(filter(lambda item: item[1], dict1.items()))\n    return dict1\n",
        "test": "assert     drop_empty({1:2,3:4,5:6}) == {1:2,3:4,5:6}, \"Wrong output\"",
        "num_ids": 1428,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i] * (i+1), arr[i] * (i-1), arr[i])\n    return max_product\n",
        "test": "assert     max_product([5, 1, 2, 3, 4]) == 4 * 5, \"Should be 4*5:5\"",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(test_tup)\n    print(test_tup + (test_tup[-1] + 1,))\n    print(test_tup + (test_tup[-1] + 2,))\n    print(test_tup + (test_tup[-1] + 3,))\n",
        "test": "assert     add_pairwise((3,5,6)) == (3,4,7), \\",
        "num_ids": 3773,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n",
        "test": "assert     find_remainder([1,2,3], 3) == 0, 'Wrong answer'",
        "num_ids": 1435,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1,len(l)):\n        if l[i]-l[i-1]==1:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([]) == True, 'the list should be empty'",
        "num_ids": 3114,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    result = []\n    for i in range(len(test_list1)):\n        if test_list1[i] == test_list2[i]:\n            result.append(test_list1[i])\n    return result\n",
        "test": "assert tuple_intersection([(1,2),(3,4)],[(2,3),(1,2)]) == [(1,2)]",
        "num_ids": 1942,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char(\"\",\"a\",\"r\") == \"\", \"replace_char failed\"",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(),key = lambda x:x[1]))\n    return dict1\n",
        "test": "assert     sort_counter({'Apple':10, 'Egg':4, 'Cherry':4}) == {'Apple':10, 'Egg':4, 'Cherry':4}",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in nums:\n        if i > 0:\n            sum += i\n    return sum\n",
        "test": "assert     big_sum([-1,2,3,-4]) == 5",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \nstring = 'ABC'\n",
        "test": "assert     is_lower('hello')     == 'hello'",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('\\w*[a-z]+[A-Z]+\\w*', '', str1)\n    return str1\n",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return int(n[0])\n",
        "test": "assert     first_Digit(0)     == 0",
        "num_ids": 2501,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l = []\n    for i in list:\n        if(i%2!=0):\n            l.append(i)\n    return l\n",
        "test": "assert     Split([])    ==     []",
        "num_ids": 4710,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    total_cube = 0\n    for i in range(n) :\n        total += i\n    for i in range(n) :\n        total_cube += pow(i,3)\n    return total-total_cube\n",
        "test": "assert     difference(0) == 0, \"Wrong output\"",
        "num_ids": 3042,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i=0\n    j=0\n    odd_count = 0\n    while(i<N):\n        while(j<N and A[i] == A[j]):\n            j+=1\n        if(j==N):\n            break\n        if((A[i]^A[j]) & 1):\n            odd_count += 1\n        i+=1\n        j=i+1\n    return odd_count\n    \nif __name__ == '__main__': \n    print(find_Odd_Pair([1,1,2,2,3,3],6))",
        "test": "assert     find_Odd_Pair([1,2,3],1) == 0",
        "num_ids": 2803,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('Hello') == 'hELLO'",
        "num_ids": 847,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 230,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    ans = 0\n    if n1 == n2:\n        return 0\n    if n1 > n2:\n        n1, n2 = n2, n1\n    while(n1 > 0):\n        ans += abs(n1%10 - n2%10)\n        n1 //= 10\n        n2 //= 10\n    return ans\n",
        "test": "assert     digit_distance_nums(32,32) == 0",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if not a: return -1\n    # print(a)\n    for i in range(1,size):\n        a[i] = max(a[i], a[i]+a[i-1])\n    return max(a)\n",
        "test": "assert     max_sub_array_sum([2, -2, 5, -3, 1, 4, 4, -1], 5) == 5",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # union_elements(('a','b'),('b','c')) == ('a','b','c')\n    # union_elements(('a','b'),('c','a')) == ('a','b','c')\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list\n",
        "test": "assert union_elements( (), () ) ==     []",
        "num_ids": 1711,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    for i in lst:\n        length = max(length,len(i))\n    return length\n",
        "test": "assert     Find_Max_Length([])    == 0, \"Empty list\"",
        "num_ids": 1339,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    print(re.findall('\"[^\"]+\"',text))\n    \ntext1 = '''\n    # \u201cCorrect\u201d is an international standard for the interpretation of the \n    # signs of numbers, symbols and mathematical functions.\n    # It is also used in other languages, such as French.\n    # More information about it can be found here:\n    # http://en.wikipedia.org/wiki/Correct.\n    # The right quotation marks are not used to mark a sentence.\n    # If you need to add a quote marks to a sentence, use the following code:\n    # >>> import pdb; pdb.set_trace()\n    # >>> print(\"\\\"%s\\\"\" % text)\n    # Example of usage:\n    print(\"Extracting numbers:\")\n    print(extract_values(\"\\\"Correct\\\" is an international standard for the interpretation of the signs of numbers, symbols and mathematical functions.\"))\n    # Output:\n    # Extracting numbers:\n    # ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers:\n    # Extracting numbers",
        "test": "assert extract_values('\"this\" is test') == 'test'",
        "num_ids": 3146,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                cnt+=1\n    return cnt\n",
        "test": "assert     count_Pairs([],0) == 0, 'incorrect'",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split(\"A\") == ['A']",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n",
        "test": "assert     sum_digits(0) == 0, \"Return 0 for a zero argument\"",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] <= list1[1]:\n        for i in range(2, len(list1)):\n            if list1[i-1] <= list1[i]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert not issort_list([1,2,4,5,3])",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n",
        "test": "assert     empty_list(0) == [] ",
        "num_ids": 2579,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # to sort the list of lists, we create a variable, called sublists, and pass the list of lists \n    # into the sorted() function to sort each sublist\n    sublists = sorted(list1)\n    return sublists\n",
        "test": "assert     sort_sublists([]) == [], 'empty lists'",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_list = []\n    for i in nums:\n        if i not in nums_list:\n            nums_list.append(i)\n    return nums_list\n",
        "test": "assert not two_unique_nums([])",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # to solve the problem using list comprehension\n    unique_list = []\n    for data in list_data:\n        if data not in unique_list:\n            unique_list.append(data)\n    unique_list.sort()\n    product = 1\n    for data in unique_list:\n        product *= data\n    return product\n    # to solve the problem using set data structure\n    # unique_set = set()\n    # for data in list_data:\n    #     unique_set.add(data)\n    # return len(unique_set)\n",
        "test": "assert unique_product([]) == 1",
        "num_ids": 3290,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi,sqrt,sin,cos\n    if r<=0 or h<=0:\n        return 0\n    return 2*pi*r*h+2*pi*r**2\nprint(surfacearea_cylinder(2,3))\n",
        "test": "assert     surfacearea_cylinder(0,1) == 0",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    from collections import deque\n    list_len=len(A)\n    list_len_B=len(B)\n    if list_len_B>list_len:\n        return False\n    else:\n        q=deque()\n        q1=deque()\n        for i in range(0,list_len_B):\n            q1.append(B[i])\n        while(len(q1)>0):\n            if len(q)==0:\n                q.append(q1.popleft())\n            elif q1[0]==q[0]:\n                q.append(q1.popleft())\n            else:\n                return False\n        return True\n",
        "test": "assert     is_Sub_Array([1,2,3,4,5], [1,5]) == False, \"The first sublist is a subset of the second one.\"",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while(n//10!=0):\n        n=n//10\n    return n%10\nprint(last_Digit_Factorial(25))\nprint(last_Digit_Factorial(30))\nprint(last_Digit_Factorial(10))\nprint(last_Digit_Factorial(21))\nprint(last_Digit_Factorial(8))\n",
        "test": "assert     last_Digit_Factorial(1) == 1, 'Expected : 1'",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter = []\n    for i in range(len(list1)):\n        inter.extend([list1[i],list2[i],list3[i]])\n    return inter\n",
        "test": "assert     interleave_lists([], [], []) == []",
        "num_ids": 1846,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1).difference(set(test_tup2))\n    \n",
        "test": "assert     find_dissimilar(('a','b','c'),('a','b','c')) == set()",
        "num_ids": 1591,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 0:\n        return None\n    elif len(test_tuple) == 1:\n        if test_tuple[0] == even_fnc:\n            return None\n        else:\n            return test_tuple\n    else:\n        for i in range(len(test_tuple)):\n            if test_tuple[i] == even_fnc:\n                return even_ele(test_tuple[i + 1 : ], even_fnc)\n    return test_tuple\n",
        "test": "assert     even_ele((2, 3), even_ele) == (2, 3)",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s/2\n    area = (b*s*(s-1))/2\n    return a+area\n    \ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s/2\n    return a+b*s*(s-1)//2\n    \ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s/2\n    return a+b*s*(s-1)//2\n    ",
        "test": "assert surface_Area(0, 5) == 0",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1=={}:\n        return True\n    else:\n        return False\nprint(my_dict({}))\n",
        "test": "assert not my_dict({1: 1})",
        "num_ids": 770,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base case\n    if num == 0 or num == 1:\n        return 1\n    \n    # recursion\n    else:\n        return num * catalan_number(num-1)\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    adverbs = []\n    for i in range(len(text)):\n        if re.search(r'ly', text[i:i+4]):\n            adverbs.append(i)\n    print(adverbs)\n",
        "test": "assert     find_adverbs('There were no more than a few hundred deaths on the very day. But a few hundred deaths per hundred thousand people.') == None, 'check the correctness of the result'",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        cost = item[1]\n        heapq.heappush(heap,(-cost,item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[1] for item in heap]\n",
        "test": "assert     expensive_items([],1) == []",
        "num_ids": 1808,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first = l[:n]\n    last = l[n:]\n    return first + last\n",
        "test": "assert     split_Arr(['a', 'b', 'c', 'd', 'e'], 5) == ['a', 'b', 'c', 'd', 'e']",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([\"hello\", \"world\", \"this\", \"is\", \"test\"]) == ('hello', 'world', 'this', 'is', 'test')",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 210,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([4, 4, 4, 4, 4]) == 0, \"Wrong answer\"",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return int(pow(a,2))\n",
        "test": "assert     perfect_squares(0, 1) == False",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x**2+y**2\n    theta=cmath.acos(x/r)\n    return r,theta\n",
        "test": "assert    polar_rect(1,0) == (1,0)",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 2919,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    k = min(k, n - k)\n    if k == 0 or k == 1:\n        return 1\n    else:\n        k2 = k // 2\n        return (1 + 2 * (k2 + 1) * (k2 - 1) // 2)\n",
        "test": "assert     binomial_Coeff(0,0) == 1, 'binomial_coeff(0,0) must be 1'",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    if len(ip_list) == 4:\n        return '.'.join(ip_list)\n    else:\n        return ''\n",
        "test": "assert removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # If the list is empty or of length 1 then return 0\n    if (len(list1) == 0) or (len(list1) == 1):\n        return 0\n    \n    if (list1[0] % 2 == 0):\n        # If the first element is even then return the difference between the first odd element and the first even element\n        return abs(list1[1] - list1[0])\n    else:\n        # If the first element is odd then return the difference between the first even element and the first odd element\n        return abs(list1[1] - list1[0])\n",
        "test": "assert     diff_even_odd([2,3,4,5]) == 1",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1 = list(str1)\n    l2 = list(str2)\n    k = len(l1)\n    swaps = 0\n    for i in range(k):\n        if l1[i]!= l2[i]:\n            l2[i],l1[i] = l1[i],l2[i]\n            swaps+=1\n    return swaps\n",
        "test": "assert     min_Swaps('01', '00') == 1, 'Should be: 1'",
        "num_ids": 3096,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for index in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[index])\n    return size\n",
        "test": "assert     tuple_size(()) == 0, \"tuple_size() should return 0 for an empty tuple.\"",
        "num_ids": 4918,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr1) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr2[mid] == arr1[mid]:\n            if k == mid + 1:\n                return arr1[k - 1]\n            else:\n                high = mid - 1\n        elif arr1[mid] < arr2[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr1[high]\n    \n    \nif __name__ == '__main__':\n    arr1 = [-1, 2, 1, 3, 4, 5]\n    arr2 = [3, 6, 7, 9, 10, 11]\n    print(find_kth(arr1, arr2, 3))",
        "test": "assert     find_kth([1, 2, 3, 4], [2, 4, 6, 8], 4) == 4",
        "num_ids": 1867,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    temp = number\n    while(temp!=0):\n        digit = temp%10\n        total += digit**3\n        temp //= 10\n    return total == number\n",
        "test": "assert armstrong_number(115) == False",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int:\n        raise TypeError(\"Input must be a natural number\")\n    if number < 0:\n        raise ValueError(\"Input must be a natural number\")\n    else:\n        sum = 0\n        for i in range(1, number + 1):\n            sum += i\n        average = sum / number\n        return (sum, average)\n",
        "test": "assert     sum_average(1) == (1, 1)",
        "num_ids": 1385,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef is_Even(n): \n    return n%2 == 0\nprint(is_Even(12))\n",
        "test": "assert     is_Even(10) == True, \"is_Even(10) should be True\"",
        "num_ids": 2806,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # code here\n    d={}\n    for i in str1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]=d[i]+1\n            return i\n",
        "test": "assert     first_repeated_char('aba')    ==    'a', 'Test case 1 failed'",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1, n):\n        if is_lucid(i):\n            l.append(i)\n    return l\n    \ndef is_lucid(n):\n    '''\n    Write a function to determine if a given integer is a lucid number.\n    '''\n    while n > 1:\n        if n % 10 == 3 or n % 10 == 6:\n            if (n - 3) % 10 == 6 or (n - 6) % 10 == 3:\n                return True\n            else:\n                return False\n        else:\n            n = n // 10\n    return False\n        \ndef count_lucids(n):\n    '''\n    Write a function to determine the number of lucids smaller than or equal to a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if is_lucid(i):\n            count += 1\n    return count\n    \ndef lucid_sum(n):\n    '''\n    Write a function to calculate the sum of all lucids smaller than or equal to a given integer.\n    '''\n    s = 0\n    for i in range(1, n):\n        if is_lucid(i):\n            s += i\n    return s\n",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 2936,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n    \ndef reverse_words2(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n    \ndef reverse_words3(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    res = \"\"\n    for i in s.split():\n        res += i[::-1] + \" \"\n    return res[:-1]\n    \ndef reverse_words4(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "test": "assert     reverse_words(\"\") == \"\"",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(123) == False",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef sin_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef cos_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef tan_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef sec_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef csc_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef sqrt_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef pi_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef asin_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef atan_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef acos_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef acsc_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef acot_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef atan2_deg(y,x):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return y/math.pi*180\ndef pow_deg(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return degree/math.pi*180\ndef sin_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef cos_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef tan_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef sec_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef csc_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef sqrt_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef pi_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef asin_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef atan_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef acos_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef acsc_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef acot_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef atan2_rad(y,x):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return y/math.pi*180\ndef pow_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef sin_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef cos_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef tan_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef sec_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef csc_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef sqrt_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef pi_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef asin_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef atan_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef acos_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef acsc_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef acot_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef atan2_deg_rad(y,x):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return y/180*math.pi,x/180*math.pi\ndef pow_deg_rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef sin_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef cos_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef tan_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef sec_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef csc_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef sqrt_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef pi_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\ndef asin_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return ra",
        "test": "assert     radian_degree(0)         == 0",
        "num_ids": 1132,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    str_list = text.split()\n    \n    for index, word in enumerate(str_list):\n        if re.search(pattern, word)!= None:\n            return word, index, index + len(word)\n",
        "test": "assert     find_literals(\"ABCD EFG\", \"ABCD\") == ('ABCD', 0, 4)",
        "num_ids": 2856,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    if n < 1:\n        return bell\n    while n:\n        bell += 1\n        n -= 1\n    return bell\n",
        "test": "assert     bell_Number(1) == 1, \"bell_number(1) is wrong\"",
        "num_ids": 2779,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n    \ndef remove_kth_element_by_index(list1, index):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(index)\n    return list1\n    \ndef reverse_list(list1):\n    '''\n    Write a python function which reverses the elements of a list.\n    '''\n    list1.reverse()\n    return list1\n    \ndef duplicate_list(list1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef duplicate_list_using_loop(list1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef duplicate_list_using_append(list1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef duplicate_list_using_append_v2(list1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef duplicate_list_using_append_v3(list1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list2 = []\n    for i in range(1, len(list1)):\n        list2.append(list1[i])\n    return list2\n    \ndef merge_list(list1, list2):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        list1.append(list1[i])\n    for j in range(1, len(list2)):\n        list1.append(list2[j])\n    return list1\n    \ndef merge_list_using_append(list1, list2):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list1.extend(list2)\n    return list1\n    \ndef merge_list_using_extend(list1, list2):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list1.extend(list2)\n    return list1\n    \ndef merge_list_using_extend_v2(list1, list2):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list1.extend(list2)\n    return list1\n    \ndef merge_list_using_extend_v3(list1, list2):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    list1.extend(list2)\n    return list1\n    \ndef remove_all_occurrences(list1, item1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] == item1:\n            list1.pop(i)\n    return list1\n    \ndef remove_all_occurrences_v2(list1, item1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] == item1:\n            list1.pop(i)\n    return list1\n    \ndef remove_all_occurrences_v3(list1, item1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] == item1:\n            list1.pop(i)\n    return list1\n    \ndef remove_all_occurrences_v4(list1, item1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] == item1:\n            list1.pop(i)\n            for j in range(1, len(list1)):\n                list1.pop(i)\n    return list1\n    \ndef remove_all_occurrences_v5(list1, item1):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] == item1:\n            list1.pop(i)\n            for j in range(1, len(list1)):\n                list1.pop(i)\n    return list1\n    \ndef reverse_string(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v2(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v3(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v4(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v5(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v6(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef reverse_string_v7(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[::-1]\n    return string\n    \ndef remove_string_v1(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[1:]\n    return string\n    \ndef remove_string_v2(string):\n    '''\n    Write a python function which returns a new list which contains all the elements from the original list except the first element.\n    '''\n    string = string[1:]\n    return string\n    ",
        "test": "assert     remove_kth_element([0,1,2,3,4,5,6,7,8,9],3)==[0,1,2,4,5,6,7,8,9]",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    \n    # If the number of rows are more than the N\n    if n < N:\n        return None\n    \n    # If the list is empty\n    if n == 0:\n        return None\n    \n    # For each row in the list\n    for i in range(n):\n        # And every column in the row\n        for j in range(len(test_list[i])):\n            # If then'th column is not yet defined\n            if j < N:\n                # Set the value of then'th column to the current max value\n                test_list[i][j] = max(test_list[i])\n    \n    # Return the max value in then'th column\n    return max(test_list[N-1])\n    \n    \ndef solution_scalar_mult(input_list):\n    '''\n    Given a list of numbers, return the sum of all the squares of the numbers.\n    '''\n    # Initialize the variable to return\n    return_list = []\n    \n    # For each number in the list\n    for i in range(len(input_list)):\n        # Add the number to the return list\n        return_list.append(input_list[i] * input_list[i])\n    \n    # Return the sum of the elements in the return list\n    return sum(return_list)\n",
        "test": "assert max_of_nth([[10, 15, 16], [10, 10, 6], [10, 9, 5]], 1) == 16",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    ret = []\n    for i in range(len(lst)):\n        ret.append([])\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            ret[i].append(lst[i][j])\n    return ret\n",
        "test": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 1418,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return(sum(test_list))\n",
        "test": "assert     cummulative_sum(()) == 0, \"1st test failed\"",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num = []\n    for a in nums:\n        print(a)\n        for b in a:\n            print(b)\n            num.append(b)\n            print(num)\n            print('num: ', num)\n    return num\n",
        "test": "assert     average_tuple([[1], [3], [5]]) == [1.0, 3.0, 5.0]",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i], )\n    return result\n",
        "test": "assert     tuple_modulo((1, 2, 3), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 1609,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    max_steps = 0\n    for i in range(0, steps):\n        if (d < 0) :\n            break\n        count = 0\n        max_steps = max_steps + d\n        d = d - 1\n        while (d >= 0) and (d <= max_steps) :\n            d = d - 1\n            count = count + 1\n        max_steps = max_steps - 1\n    return count\n",
        "test": "assert     min_Jumps(0, 5) == 0",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if nums1 == nums2:\n        return nums1\n    if len(nums1) > len(nums2):\n        nums2.extend([0]*(len(nums1)-len(nums2)))\n    elif len(nums1) < len(nums2):\n        nums1.extend([0]*(len(nums2)-len(nums1)))\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]/nums2[i])\n    return res\n",
        "test": "assert     div_list([1,2,3,4],[1,2,3,4]) == [1,2,3,4], \"Wrong!\"",
        "num_ids": 1200,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = test_str\n    s = s.strip()\n    n = len(s)\n    if n==0:\n        return test_str\n    a = []\n    b = []\n    for i in range(n):\n        if s[i].isnumeric():\n            a.append(s[i])\n        else:\n            b.append(s[i])\n    a = \"\".join(a)\n    b = \"\".join(b)\n    return a+b\n",
        "test": "assert     move_num(\"\")     == \"\"",
        "num_ids": 3618,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if a == []: return 0\n    if len(a) == 1: return 1\n    if len(a) == 2: return 2\n    dp = [[0]*len(a) for _ in range(len(a))]\n    for i in range(len(a)):\n        dp[i][i] = 1\n    for i in range(len(a)-1, -1, -1):\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                dp[i][j] = dp[i+1][j-1] + 1\n    return max(max(row) for row in dp)\n    \ndef largest_subset_bit_twiddle(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair of numbers is divisible.\n    '''\n    if a == []: return 0\n    if len(a) == 1: return 1\n    if len(a) == 2: return 2\n    dp = [[0]*len(a) for _ in range(len(a))]\n    for i in range(len(a)):\n        dp[i][i] = 1\n    for i in range(len(a)-1, -1, -1):\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                dp[i][j] = dp[i+1][j-1] + 1\n    return max(max(row) for row in dp)\n",
        "test": "assert     largest_subset([])    == 0, 'Empty array'",
        "num_ids": 3211,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = sorted(arr1 + arr2)\n    return arr[int(n/2)]\n",
        "test": "assert     get_median([1,2,3,4,5], [3,4,5], 6) == 3",
        "num_ids": 1425,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n        \nprint(nth_nums([1,2,3,4],2))\n",
        "test": "assert     nth_nums([1,2,3],1) == [1,2,3] ",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert not is_upper(\"\"), \"should return False\"",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    return newList\n",
        "test": "assert swap_List([2,2,2,2,2]) == [2,2,2,2,2]",
        "num_ids": 960,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Write your logic here\n    area = (1/2)*math.sqrt(r*(r+2)*(r+2)*(r+2)*(r+2))\n    return area\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 4878,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n",
        "test": "assert     find_First_Missing([1,2,4]) == 3",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces('We are happy') == 'We%20are%20happy'",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list:\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n",
        "test": "assert Split([1,2,3]) == [2]",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    for i in range(4):\n        if(i == 0):\n            x1 = ele[0] + 1\n            y1 = ele[1]\n        elif(i == 1):\n            x1 = ele[0]\n            y1 = ele[1] + 1\n        elif(i == 2):\n            x1 = ele[0] - 1\n            y1 = ele[1]\n        else:\n            x1 = ele[0]\n            y1 = ele[1] - 1\n        if((x1, y1) not in sub):\n            adjac(x1, sub)\n    return sub\n",
        "test": "assert ",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_'.join(text.split())\n    \n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n    return num_list\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            if (arr[i] & arr[j]) :\n                sum = sum + arr[i] ^ arr[j]\n    return sum\n",
        "test": "assert pair_xor_Sum([1,2,3,4],1) == 0, \"Should be 0\"",
        "num_ids": 3118,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    result=[]\n    while(len(h)!=0):\n        result.append(hq.heappop(h))\n    return result\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 1006,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        return True\n    elif actual_cost<sale_amount:\n        return False\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(123,0) == False, \"Expected: False\"",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 32.0 + 0.6215*v**0.16 + (0.4275*v**0.16)*(t-32)\n",
        "test": "assert     wind_chill(0,10) == 32",
        "num_ids": 5093,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    length = 0\n    for name in sample_names:\n        if len(name) > length:\n            length = len(name)\n    return length\n",
        "test": "assert     sample_nam([]) == 0, 'Empty list'",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #returns a string with no parenthesis\n    for i in items:\n        if i in \"()\":\n            items = items.replace(i,\"\")\n    return items\n",
        "test": "assert     remove_parenthesis('Hello world!') == 'Hello world!'",
        "num_ids": 2001,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    assert n > 0, \"n must be positive.\"\n    return n * (n + 1) // 2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_middle = re.search('^z', text)\n    text_final = re.search('z$', text)\n    if text_middle or text_final:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle(\"Hi\") == False, \"The function should return False\"",
        "num_ids": 3158,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = []\n    for i in range(0,k):\n        arr.append(input[-i-1])\n    for j in range(0,len(input)-k):\n        arr.append(input[j])\n    return arr\nprint(reverse_Array_Upto_K([1,2,3,4,5],2))\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 6) ==[6, 5, 4, 3, 2, 1]",
        "num_ids": 3644,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return(tuple(test_tup) + (test_dict,))\n",
        "test": "assert     add_dict_to_tuple((1, 2, 3), {'x': 10, 'y': 20}) == (1, 2, 3, {'x': 10, 'y': 20})",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return max(dp[rows-1])/len(dp[rows-1])\n",
        "test": "assert maxAverageOfPath([[1,2,1],[2,0,1],[1,1,1]]) == 2",
        "num_ids": 3432,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {x:students[x] for x in students if students[x][0]>h and students[x][1]>w}\n",
        "test": "assert     filter_data({'A': (1.5, 60), 'B': (1.4, 70), 'C': (1.7, 80)}, 1.6, 1.7) == {'C': (1.7, 80)}",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    d1 = {}\n    d2 = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in d1:\n            d1[nums1[i]] = 1\n        else:\n            d1[nums1[i]] += 1\n    for i in range(len(nums2)):\n        if nums2[i] not in d2:\n            d2[nums2[i]] = 1\n        else:\n            d2[nums2[i]] += 1\n    count = 0\n    for i in d1:\n        if i in d2:\n            count += d1[i]\n    return count\n",
        "test": "assert count_same_pair([1,2,1], [2,1,1])",
        "num_ids": 1528,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize a variable named sum, which will contain the sum of the digits.\n    sum = 0\n    # Loop through each digit of the base.\n    for i in range(len(str(base))):\n        # Add the digit to the sum.\n        sum += int(str(base)[i]) ** power\n    # Return the result.\n    return sum\n",
        "test": "assert     power_base_sum(5, 1) == 5",
        "num_ids": 2884,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.replace(\" \",\"\")\n    my_list = text.split('\"')\n    a = my_list[0]\n    b = my_list[-1]\n    return a+b\n",
        "test": "assert     extract_quotation(\"This is a sample string with ''quotation''s.\"), \"Should return this string 'this is a sample string with quotation's.'\"",
        "num_ids": 1521,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = (1,2,3)\n    res = tuple(x * (x+1) for x in test_tup)\n    print(res)\n    return res\n",
        "test": "assert     multiply_elements((2,3,4)) == (2,6,12)",
        "num_ids": 1708,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n",
        "test": "assert     sum_list([],[] ) == [], 'Wrong result'",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = set(nums)\n    return list(nums)\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral = math.pi*r**2*h\n    return lateral\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    lateral = 4*math.pi*r**2\n    return lateral\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    lateral = 2*math.pi*r*h\n    return lateral\ndef lateralsurface_tetrahedron(r):\n    '''\n    Write a function to find the lateral surface area of a tetrahedron given radius r.\n    '''\n    lateral = 4*math.pi*r**2\n    return lateral\ndef lateralsurface_octahedron(r):\n    '''\n    Write a function to find the lateral surface area of a octahedron given radius r.\n    '''\n    lateral = 6*math.pi*r**2\n    return lateral\ndef lateral_surface_area(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return lateralsurface_sphere(r)\n    if shape == 'cone':\n        return lateralsurface_cone(r,h)\n    if shape == 'cylinder':\n        return lateralsurface_cylinder(r,h)\n    if shape == 'tetrahedron':\n        return lateralsurface_tetrahedron(r)\n    if shape == 'octahedron':\n        return lateralsurface_octahedron(r)\ndef lateral_surface_area_parameter(shape,r):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radii(shape,r):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius(shape,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r.\n    '''\n    if shape =='sphere':\n        return h\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_parameter(shape,r):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radii_height(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return h\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_height(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return h\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_height_parameter(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_height_parameter_parameter(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radii_height_parameter_parameter(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return h\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_height_parameter_parameter_parameter(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shape == 'cylinder':\n        return 2*math.pi*r*h\n    if shape == 'tetrahedron':\n        return 4*math.pi*r**2\n    if shape == 'octahedron':\n        return 6*math.pi*r**2\ndef lateral_surface_area_radius_height_parameter_parameter_parameter_parameter(shape,r,h):\n    '''\n    Write a function to find the lateral surface area of a shape given radius r and the height h.\n    '''\n    if shape =='sphere':\n        return r**2\n    if shape == 'cone':\n        return 2*math.pi*r\n    if shap",
        "test": "assert ",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"[,\\.]\", \":\", text)\n    return text\n",
        "test": "assert     replace_specialchar(\"Space:23:a:b:c:d:e:f\") == \"Space:23:a:b:c:d:e:f\"",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo)//2\n        if A[mid] < x:\n            lo = mid + 1\n        elif A[mid] == x:\n            return mid\n        else:\n            hi = mid - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 2, 3], 1) == 0",
        "num_ids": 1499,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    dp = [[1 for j in range(len(arr)+1)] for i in range(len(arr)+1)]\n    # bottom-up approach\n    for i in range(1, len(arr)+1):\n        for j in range(i, len(arr)+1):\n            for k in range(i, j):\n                # if element at i is 0, then no product for rest of the elements\n                if arr[k-1] == 0:\n                    dp[i][j] = 0\n                    break\n                else:\n                    dp[i][j] = dp[i][j] + dp[i][k-1] * dp[k+1][j]\n    print(dp)\n    return dp[1][len(arr)]\n",
        "test": "assert sum_Of_Subarray_Prod([1]) == 1",
        "num_ids": 1393,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    while(n>0):\n        n=n&(n-1)\n    return n\n",
        "test": "assert     set_middle_bits(2) == 0",
        "num_ids": 6442,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    while index > 0:\n        if a[index-1] == x:\n            return index\n        elif a[index] > x:\n            return index\n        elif a[index] < x:\n            index -= 1\n    return 0\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    while index < len(a):\n        if a[index] == x:\n            return index\n        elif a[index] < x:\n            return index\n        elif a[index] > x:\n            index += 1\n    return index\na = [1,2,3,4,6,8,9,13,18,19,20]\nprint(a)\nprint(left_insertion(a, 5))\nprint(left_insertion(a, 2))\nprint(right_insertion(a, 6))\nprint(right_insertion(a, 13))\nprint(right_insertion(a, 18))\nprint(right_insertion(a, 19))\nprint(right_insertion(a, 20))\n",
        "test": "assert     left_insertion([1, 2, 3, 4, 5], -1) == 0",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string)!= None:\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('an') == True",
        "num_ids": 4612,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n    \ndef summation(n):\n    '''\n    Write a recursive function to calculate the summation from 1 to n.https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-6.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + summation(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    a = int(math.sqrt(n * (n + 1) / 2))\n    b = int(math.sqrt(n * (n + 1) / 2))\n    for i in range(a, 0, -1):\n        if 2 * i <= n:\n            if n - i <= i:\n                if (i + n) % 2 == 0:\n                    return i\n            if n - i >= i:\n                if (i + n) % 2 == 1:\n                    return i\n            return int(a - i)\n        else:\n            a = int((a + b) / 2)\n    if n % 2 == 0:\n        return int(a - 1)\n    return int(a)\ndef check_Sorted(arr): \n    '''\n    Write a python function to check whether the given list of integers \n    sorted in non-decreasing order is a mountain array or not.\n    '''\n    N = len(arr)\n    if N == 1:\n        return False\n    if N == 2:\n        return (arr[0] <= arr[1])\n    if N == 3:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2])\n    if N == 4:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3])\n    if N == 5:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3]) and (arr[3] <= arr[4])\n    if N == 6:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3]) and (arr[3] <= arr[4]) and (arr[4] <= arr[5])\n    return False\ndef check_StrictlyIncreasing(arr): \n    '''\n    Write a python function to check whether the given list of integers is a strictly increasing \n    sorted or not.\n    '''\n    N = len(arr)\n    if N == 1:\n        return False\n    if N == 2:\n        return (arr[0] <= arr[1])\n    if N == 3:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2])\n    if N == 4:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3])\n    if N == 5:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3]) and (arr[3] <= arr[4])\n    if N == 6:\n        return (arr[0] <= arr[1]) and (arr[1] <= arr[2]) and (arr[2] <= arr[3]) and (arr[3] <= arr[4]) and (arr[4] <= arr[5])\n    return False\ndef spiralOrder(n, k): \n    '''\n    Write a python function to find the spiral order of a matrix with N rows and M columns. \n    The spiral order should be printed in clockwise direction.\n    '''\n    if n == 1:\n        return [k]\n    if n == 2:\n        return [k,k+1]\n    if n == 3:\n        return [k,k+1,k+2]\n    if n == 4:\n        return [k,k+1,k+2,k+3]\n    if n == 5:\n        return [k,k+1,k+2,k+3,k+4]\n    if n == 6:\n        return [k,k+1,k+2,k+3,k+4,k+5]\n    return []\ndef find_Occurrences(string, pattern): \n    '''\n    Write a python function to find the occurences of the pattern in the given string.\n    '''\n    if string == '':\n        return -1\n    if pattern == '':\n        return 0\n    l = len(string)\n    i = 0\n    j = 0\n    occ = 0\n    while i < l and j < len(pattern):\n        if string[i] == pattern[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n        if j == len(pattern):\n            occ += 1\n            j = 0\n    return occ\ndef num_Squares(n): \n    '''\n    Write a python function to find the count of squares less than or equal to the given integer n.\n    '''\n    if n <= 2:\n        return n\n    dp = [-1] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = i\n        j = 1\n        while j * j <= i:\n            if dp[i] == -1:\n                continue\n            dp[i] = dp[i] - 1\n            if dp[i] == 0:\n                break\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\ndef numSquares(n):\n    dp = [-1 for i in range(n + 1)]\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        j = 1\n        while j * j <= i:\n            if dp[i] == -1:\n                dp[i] = dp[i - j * j] + 1\n            else:\n                dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]\ndef check_Pentagonal(n):\n    '''\n    Write a python function to check whether the given integer is pentagonal or not.\n    '''\n    if n <= 2:\n        return False\n    i = 1\n    k = 1\n    while i * i <= n:\n        i += 1\n    while k * k <= n:\n        k += 1\n    if i * i!= k:\n        return False\n    a = (k + 1) * (k - 1) / 2\n    b = i * i\n    return a == n and int(math.sqrt(b - a)) == b - a\ndef largestPair(nums):\n    '''\n    Write a python function to find the largest pair in given array of integers.\n    '''\n    if len(nums) == 1:\n        return (nums[0], nums[0])\n    if len(nums) == 2:\n        return (nums[0], nums[1])\n    if len(nums) == 3:\n        return (nums[0], nums[1]) if nums[0] > nums[1] else (nums[1], nums[0])\n    d = {}\n    maxx = 0\n    for i in range(len(nums)):\n        if nums[i] in d:\n            d[nums[i]] += 1\n        else:\n            d[nums[i]] = 1\n    for i in range(len(nums)):\n        if d[nums[i]] > maxx:\n            maxx = d[nums[i]]\n            j = i\n    return (nums[j], nums[j+1])\ndef findKthDigit(n, k):\n    '''\n    Write a python function to find the kth digit of a given integer.\n    '''\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    if k == 1:\n        return n // 10\n    if k == 2:\n        return (n // 10) % 10\n    if k == 3:\n        return (n // 100) % 10 * 10 + (n // 10) % 10\n    if k == 4:\n        return (n // 1000) % 10 * 100 + (n // 10) % 10 * 10 + (n // 1) % 10\n    i",
        "test": "assert     find_Index(1) == 0",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # your code here\n    newdict = dict()\n    for i in range(len(test_tup)-1):\n        newdict[test_tup[i]] = test_tup[i+1]\n    return newdict\n",
        "test": "assert (False, {'first': 1,'second': 2, 'third': 3}), tuple_to_dict(('hello', 1, 2, 3))",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Characters_Same('ab') == False, \"Fail: all_Characters_Same('ab')\"",
        "num_ids": 1301,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_squared = side**2\n    hypotenuse = side**(1/2)\n    area = side_squared*hypotenuse\n    return area\n",
        "test": "assert     area_tetrahedron(0) == 0, \"Area of the tetrahedron should be 0\"",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 210,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n",
        "test": "assert     rotate_right([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]",
        "num_ids": 2806,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is not None:\n        for i in test_tup:\n            if i is None:\n                return True\n    else:\n        return True\n    return False\n",
        "test": "assert     check_none((1,2,3)) == False",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible(startnum, endnum):\n        \n        def divisible_by(num, divisor):\n            return all(num % i == 0 for i in range(1, 11))\n        return sum(list(map(lambda x: divisible_by(x, startnum), range(startnum, endnum))))\n    return divisible(startnum, endnum)\n",
        "test": "assert     divisible_by_digits(1,20) == False, 'The function should return False if startnum < endnum'",
        "num_ids": 3878,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    else:\n        return round(math.pi*r*r*a/360,2)\n",
        "test": "assert     sector_area(5,360.1) == None",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # base case \n    if len(X)==0 or len(Y)==0 or len(Z)==0: \n        return 0 \n    \n    # dp table \n    dp_table = [[0 for i in range(len(Y) + 1)] for j in range(len(X) + 1)] \n",
        "test": "assert     lcs_of_three('AA','ABB','ABC') == 2, 'wrong answer'",
        "num_ids": 2124,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub('([a-zA-Z0-9])([A-Z])','\\g<1> \\g<2>',str1)\n",
        "test": "assert     capital_words_spaces(\"\") == \"\"",
        "num_ids": 1312,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # TODO: Write your code here\n    nums = []\n    for s in nums_str:\n        nums.append(s)\n    nums = sorted(nums)\n    print(nums)\n    return nums\n",
        "test": "assert     sort_numeric_strings([]) == []",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([(1,1),(2,2)], (3,3)) == [(1,1),(2,2),(3,3)]",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return True\n    if i >= len(arr) or arr[i] > arr[i+1]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n",
        "test": "assert     check_min_heap_helper([3, 2, 1], True) == False",
        "num_ids": 2265,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 0\n    b = 1\n    for i in range(2,n+1):\n        a,b = b,a+b\n    return a\n",
        "test": "assert     jacobsthal_num(0) == 0 ",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    print(f'Input list - {test_list}')\n    result = []\n    for i in range(len(test_list)):\n        if K >= 1:\n            temp = test_list[i]\n            for j in range(K):\n                if j >= len(test_list):\n                    break\n                if temp[j] < test_list[j]:\n                    temp = test_list[j]\n                    result.append(temp)\n                    K -= 1\n                    if K == 0:\n                        break\n            else:\n                result.append(temp)\n                K -= 1\n                if K == 0:\n                    break\n    print(f'Output - {result}')\n    return result\n",
        "test": "assert     min_k([('python', 1), ('c++', 2), ('java', 1), ('c#', 4), ('python', 3)], K = 0) == []",
        "num_ids": 4099,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Write your function here\n    result = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    result.append(l1[i])\n    return result\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 1595,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n",
        "test": "assert second_smallest([1, 1, 2, 3, 4, 5]) == 1",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r\"ab+\", text)\n    if match:\n        return(True)\n    else:\n        return(False)\n",
        "test": "assert     text_match_zero_one(\"aaa\") == False",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    from itertools import combinations\n    # another solution\n    #count = 0\n    #for i in range(len(test_list)):\n        #for j in range(i+1, len(test_list)):\n            #if (test_list[i][::-1] == test_list[j][::-1]):\n                #count += 1\n    #return count\n    \n    # one-liner\n    return sum(1 for i, j in combinations(test_list, 2) if i[::-1] == j[::-1])\n    \n    # one-liner using map\n    #return sum(1 for i, j in map(lambda x: x[::-1], test_list) if i == j)\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 1418,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[tuple(list1[i])] = list1.count(list1[i])\n    return d\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1426,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return isinstance(num, str) and num.find('.') == -1 and num.find('e') == -1 and num.find('E') == -1 and num.find('e') == -1\n",
        "test": "assert is_decimal('1234.2a') == False",
        "num_ids": 3095,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if arr.count(arr[0])==n:\n        return True\n    return False\n",
        "test": "assert     unique_Element([1,1,2,3,3,4,4,5,5]) == False, 'Test case 2 failed'",
        "num_ids": 1628,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 3:\n        return True\n    elif monthnum3 < 6:\n        return False\n    elif monthnum3 < 9:\n        return False\n    elif monthnum3 < 12:\n        return True\n    else:\n        return False\n    \ncheck_monthnumber_number(10)\n",
        "test": "assert not check_monthnumber_number(4)",
        "num_ids": 3779,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Base Case \n    if n == 1: \n        return -1\n    if n == 2: \n        return abs(arr[0] - arr[1]) \n    else: \n        min_diff = abs(arr[0] - arr[1])\n        # Find the minimum difference \n        # from arr[2] to arr[n-1] \n        for i in range(2, n): \n            curr_diff = abs(arr[i] - arr[i-1]) \n            min_diff = min(min_diff, curr_diff) \n        return min_diff \n  ",
        "test": "assert     find_min_diff([3,4,2,5,1],4) == 1",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isdigit():\n            cnt += 1\n    return cnt\n",
        "test": "assert     number_ctr('') == 0, \"should return 0 if no digits\"",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here\n    if n%2==0:\n        return -1\n    else:\n        return (n+1)/2\n",
        "test": "assert is_polite(2), 'True'",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    lst1=[]\n    for i in range(0,len(l1)-1):\n        lst1.append((l1[i],l1[i+1]))\n    return lst1\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 1246,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len([x for x in arr if sum-x in arr])\n",
        "test": "assert get_pairs_count([10,20,30,40,50],41) == 0",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = []\n    for item in li1:\n        if item not in li2:\n            li_dif.append(item)\n    return li_dif\n",
        "test": "assert     Diff([1,2,3],[1,2,3]) == []",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 0\n    for i in range(n):\n        if i%2!= 0 :\n            num = num + i**4\n    print(num)\n    return num\n    \n",
        "test": "assert odd_num_sum(2) == 1, 'odd_num_sum function is wrong'",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append('(')\n        elif i == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "test": "assert     check_expression(')') == False, 'non-matching pair'",
        "num_ids": 1559,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split()\n    for i in range(len(test_list)):\n        if len(test_list[i])==K:\n            test_str = test_str.replace(test_list[i],\"\")\n    return test_str\n",
        "test": "assert     remove_length('x', 1) == ''",
        "num_ids": 1669,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #t=1\n    p=re.compile(pattern)\n    for i in range(len(text)-len(pattern)+1):\n        if re.search(p,text[i:i+len(pattern)]):\n            print(text[i:i+len(pattern)])\n            return\n    print(None)\n",
        "test": "assert occurance_substring(\"geeksforgeeks\", \"Geeks\") == None",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # if odd index contains odd numbers then True else False\n    for i in range(len(nums)):\n        if i%2 == 0 and nums[i]%2 == 1:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 5, 2, 7, 8, 6]) == False",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(0, len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert     count_vowels(\"\") == 0, \"Empty string\"",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in range(0,len(arr)):\n        if arr[i] not in arr[i+1:]:\n            s += arr[i]\n    return s\n",
        "test": "assert     find_sum([1]) == 1",
        "num_ids": 1529,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    count = 1\n    for k, g in groupby(list1):\n        result.append([count])\n        for i in g:\n            result[-1].append(i)\n        count += 1\n    return result\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 3676,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for lst in list1:\n        tuple_list = tuple(lst)\n        if tuple_list in count_dict:\n            count_dict[tuple_list] += 1\n        else:\n            count_dict[tuple_list] = 1\n    return count_dict\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 3723,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # initializing combination list\n    combination_list = []\n    \n    # getting the length of test_list\n    num_elem = len(test_list)\n    \n    # get the number of combinations\n    num_combinations = num_elem * (num_elem - 1) / 2\n",
        "test": "assert     find_combinations([[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]",
        "num_ids": 3731,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) :\n        if n%i==0:\n            count+=1\n    return count \n",
        "test": "assert     count_divisors(2) == 1, \"Wrong answer for 2\"",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(len(arr[i:j+1])%2!=0):\n                s+=sum(arr[i:j+1])\n    return s",
        "test": "assert     odd_length_sum([1,2,3]) == 6",
        "num_ids": 1724,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # return [r, g, b]\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    if max_val == min_val:\n        return 0, 0, 0\n    elif max_val == r:\n        h = 0\n        s = ((g - b) / (max_val - min_val))\n    elif max_val == g:\n        h = (60 / (max_val - min_val)) + 120\n        s = ((b - r) / (max_val - min_val))\n    else:\n        h = ((max_val - r) / (max_val - min_val)) + 240\n        s = ((max_val - g) / (max_val - min_val))\n    \n    v = max_val\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 3117,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for num in list1:\n        if(num%2==0):\n            prod = prod*num\n        else:\n            prod = prod*num\n    return prod\n",
        "test": "assert mul_even_odd([1,2,3,4,5]) == 120, 'Should be 120'",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # return eval(str(test_str))\n    return tuple(int(s) for s in str(test_str).split(','))\n",
        "test": "assert tuple_str_int(\"(1, 2)\") == (1, 2)",
        "num_ids": 1626,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i:\n        return a[i-1]\n    else:\n        return a[0]\n",
        "test": "assert right_insertion([2,3,4,5],3) == 3",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'(ab)+b')\n    if(pattern.search(text)!= None):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_three('abbbbbbb')",
        "num_ids": 2054,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n",
        "test": "assert     new_tuple([], \"string\") == (\"string\",)",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2!=0:\n            return False\n    return True\n",
        "test": "assert even_position([2,4,7,8,10]) == False",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == ():\n            test_tup[i] = count\n            count += 1\n        elif test_tup[i] is None:\n            test_tup[i] = count\n            count += 1\n    return test_tup\n",
        "test": "assert     remove_nested((1,2)) == (1,2), 'The first tuple is not being removed.'",
        "num_ids": 2017,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert     count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3, \"incorrect\"",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #case 1: check if x is in arr\n    #case 2: if it is, return the position\n    #case 3: otherwise, use binary search\n    #case 3: for some reason, there is an error when i = 0\n    #print(\"case 1:\",arr,x)\n    i = 0\n    if arr==[]:\n        return None\n    #case 2\n    if x<arr[0]:\n        return 0\n    #case 3\n    while i<len(arr):\n        #print(\"case 3:\",arr,i,x)\n        if x==arr[i]:\n            return i\n        #case 3: get next element\n        if x<arr[i]:\n            return i-1\n        i+=1\n",
        "test": "assert     last([1,2,3,4,5],5) == 4, 'Wrong answer'",
        "num_ids": 1528,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    result = re.search('^a.*b$', text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb('aaaabbbb') == True",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # NOTE: sum_of_dict = 0\n    # YOUR CODE GOES HERE\n    sum_of_dict = 0\n    for key in dict.keys():\n        sum_of_dict += dict[key]\n    return sum_of_dict\n",
        "test": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6,'return_sum'",
        "num_ids": 1096,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<0:\n        return 'Invalid Input'\n    else:\n        return n*(n+1)//2\n",
        "test": "assert     sum_odd(0) == 0, \"First\"",
        "num_ids": 2928,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s=s+i\n    return s\n",
        "test": "assert     _sum([0]) == 0, \"Wrong Answer\"",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | (n >> (32 - d))\n",
        "test": "assert left_rotate(0, 2) == 0",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = re.sub(r'\\s+', '', text)\n    return result\n",
        "test": "assert     remove_all_spaces(\"\")    ==     \"\"",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_one_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a\n    \ndef test_four_equal(x,y,z,a):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z == a",
        "test": "assert     test_three_equal(2, 2, 2) == 1",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Your code here\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        mid = (start+end)//2\n        if arr[mid] > arr[end]:\n            start = mid+1\n        elif arr[mid] < arr[end]:\n            end = mid\n        else:\n            end -= 1\n    \n    return end + 1\n",
        "test": "assert count_rotation([4,6,2,3]) == 3",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        n = -n\n    if n < 2 :\n        return True\n    for i in range(2, n//2) :\n        if n % i == 0 :\n            return False\n    return True\n",
        "test": "assert     is_perfect_square(4) == True",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if not isinstance(arr,list):\n        return False\n    if not arr:\n        return False\n    if len(arr) == 1:\n        return True\n    for i in range(0,len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            return False\n    return True\n",
        "test": "assert is_product_even([4, 6, 9, 10]) == False",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n    for list in lists:\n        list_sum = sum(list)\n        if list_sum > max_sum:\n            max_sum = list_sum\n            max_list = []\n        elif list_sum == max_sum:\n            max_list.append(list)\n    return max_list\n    \ndef max_sum_list_2(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n    for list in lists:\n        max_sum = max(max_sum, sum(list))\n        if max_sum == sum(list):\n            max_list.append(list)\n    return max_list\n    \ndef max_sum_list_3(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n    for list in lists:\n        max_sum = max(max_sum, sum(list))\n        if max_sum == sum(list):\n            max_list.append(list)\n    return max_list\n    \n    ",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str is None or len(test_str) == 0:\n        return 0\n    \n    max_uppercase = 0\n    start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            if i == 0 or test_str[i - 1]!= test_str[i]:\n                start = i\n            else:\n                max_uppercase = max(max_uppercase, i - start + 1)\n    return max_uppercase\n",
        "test": "assert     max_run_uppercase('AA') == 2",
        "num_ids": 1770,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "test": "assert first_odd([1,2,3,4,5,6,7,8,9]) == 1",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n",
        "test": "assert     check_K(((1, 2), (2, 3)), 2) == False",
        "num_ids": 1422,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return True\n    elif test_tup1[0] < test_tup2[0]:\n        return False\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] > test_tup2[1]:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_smaller((1, 2, 3), (1, 2, 4)) == False, \"The first tuple has 3 elements.\"",
        "num_ids": 1341,
        "indeed": true
    }
]