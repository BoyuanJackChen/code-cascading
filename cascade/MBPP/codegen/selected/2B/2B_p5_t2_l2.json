[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_elements = set(test_tup1) | set(test_tup2)\n    return test_elements\n",
        "test": "assert     (similar_elements(('b', 'c', 'a'), ('b', 'a', 'c')) == ['c', 'a']), 'Should be the same elements'",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef get_prime_factors(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    prime_factors = []\n    if n == 2:\n        prime_factors.append(2)\n        return prime_factors\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n            n /= i\n            if n!= 1:\n                prime_factors.append(n)\n                break\n    return prime_factors\n",
        "test": "assert     is_not_prime(3) == True, \"Not prime is 3\"",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    for i in range(n):\n        hq.heappush(result,nums[i])\n    return result\n",
        "test": "assert     heap_queue_largest([-1, 2, 3, 4, 5], 3) == [-1, 2, 3]",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # write your python function here\n    if x % 2 == 0:\n        return False\n    else:\n        while x > 1:\n            x = x//2\n        return True\n",
        "test": "assert     (is_Power_Of_Two(3) == True)",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    all_letters = re.findall(r'[a-z]+', text)\n    long_words = []\n    for word in all_letters:\n        if len(word) >= 4:\n            long_words.append(word)\n    return sorted(long_words)\n    \n",
        "test": "assert     find_char_long('python') == ['python']",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n",
        "test": "assert     square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 2236,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        print(str)\n        if str[i]!= str[len(str)-i-1]:\n            count += 1\n    return count \n",
        "test": "assert     find_Rotations(\"abcd\") == 4",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    index = 0\n    first = ''\n    last = ''\n    for i in s:\n        if i == ch:\n            count = count + 1\n            if index == 0:\n                first = i\n            last = i\n        index = index + 1\n    if count == 1:\n        return s.replace(first,'',1)\n    elif count == 0:\n        return s.replace(last,'',1)\n    elif count > 1:\n        return s.replace(first,'',1) + s.replace(last,'',1)\n",
        "test": "assert     remove_Occ(\"abcd\",'b') == 'abcd', \"test failed\"",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    m = len(M)\n    n = len(M[0])\n    \n    # Sort the matrix according to its sum\n    for i in range(m):\n        col = 0\n        while col < n:\n            # Sum of current row\n            s = 0\n            for j in range(n):\n                s += M[i][j]\n            if s < 0:\n                for j in range(n):\n                    M[i][j] = float('-inf')\n                break\n            # Sort the sum of the rows\n            for j in range(n):\n                if s < M[i][j]:\n                    for k in range(n):\n                        M[i][k] = M[i][k] - M[i][j]\n                    break\n            col += 1\n    \n    return M\n",
        "test": "assert     sort_matrix([[4,7,0,3],[2,5,8,1],[6,9,1,7]]) == [[4,7,0,3],[2,5,8,1],[6,9,1,7]]",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (l*b*h)/3.0\n    return Volume\ndef find_area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    Area = (l*b)/2.0\n    return Area\n",
        "test": "assert     find_Volume(2,1,3) == 2",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    str_to_search = re.findall('[a-z]+_[a-z]+', text)\n    if str_to_search == []:\n        return False\n    else:\n        return True\n",
        "test": "assert     text_lowercase_underscore(\"This is a text with lowercase and lowercase_\") == False",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "test": "assert square_perimeter(1) == 4, \"Expected 1 to be 4\"",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = list(string)\n    list1_new = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            pass\n        else:\n            list1_new.append(list1[i])\n    return list1_new\n",
        "test": "assert ",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    numbers = arraynums[:]\n    numbers.sort()\n    dupes = False\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            break\n        if numbers[i] == numbers[i+1]:\n            dupes = True\n    return dupes\n",
        "test": "assert     test_duplicate([1,2,3,1]) == True",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%10==3 or x%10==6 or x%10==9: \n        return True \n    else: \n        return False \n",
        "test": "assert     is_woodall(2) == False, \"is_woodall should return False for all integers\"",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = (rev_num * 10) + num % 10\n        num = num // 10\n    if rev_num == num:\n        return True\n    else:\n        return False\n    ",
        "test": "assert     rev(0) == True",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(map(int, arr))\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return max(arr)\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            for k in range(len(arr)):\n                if(arr[i] + arr[j] + arr[k] > max_num):\n                    max_num = arr[i] + arr[j] + arr[k]\n    return max_num",
        "test": "assert     find_Max_Num([3,4,5]) == 15",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(1, -2) == False",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    octs = []\n    while len(octs) < n:\n        octs.append(octs[-1] + 3)\n    return octs[-1]\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        c = s[i]\n        if d[c] == 0:\n            ans += 1\n            d[c] += 1\n        else:\n            d[c] += 1\n    return ans\n",
        "test": "assert     count_Substrings('') == 0, 'Empty string is not a valid input'",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest_num:\n            smallest_num = xs[i]\n    return smallest_num\n",
        "test": "assert     smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    res = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            res = max(res, abs(test_list[i]-test_list[j]))\n    return res\n",
        "test": "assert     max_difference(['a', 'f', 'e', 'c', 'b', 'g']) == 2",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list = []\n    sorted_list = []\n",
        "test": "assert     subject_marks([(2,'c++'),(1,'python'),(3,'java')]) == \\",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) is list:\n        return sum(map(lambda x: recursive_list_sum(x), data_list))\n    else:\n        return data_list\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i > 0:\n            count+=1\n    return count\n",
        "test": "assert     pos_count([1, -2, -3, 0, 5]) == 2",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n",
        "test": "assert     bell_number(2) == 2",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    i = 1\n    while i < n:\n        if A[i] < A[i - 1]:\n            return False\n        i += 1\n    return True\n",
        "test": "assert     is_Monotonic([2, 3, 4, 2, 4]) == False",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    if len(s) == 0:\n        return True\n    if len(s) > len(l):\n        return False\n    \n    if l.count(s[0]) == len(s):\n        return True\n    return False\n",
        "test": "assert     is_sublist([1, 2, 3], [1, 3]) == False",
        "num_ids": 2336,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = len(Input)\n    for i in range(l):\n        if len(Input[i])!= l:\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple( ((1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3), (1, 2, 3, 4)) ) == False",
        "num_ids": 2796,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums or len(nums) == 1:\n        return nums\n    \n    for i in range(len(nums)):\n        for j in range(0, len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    return nums\n",
        "test": "assert     comb_sort([-1,1,2]) == [-1,1,2]",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int(n**0.5)**2 == n:\n        return True\n    return False\n",
        "test": "assert     dif_Square(1) == True, \"Test 1 Failed!\"",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(colors)-1):\n        if not isinstance(colors[i], str) and not isinstance(colors[i], int) and not isinstance(colors[i], float) and not isinstance(colors[i], bool) and not isinstance(colors[i], None) and not isinstance(colors[i], tuple) and not isinstance(colors[i], list):\n            return False\n    \n    for j in range(0, len(patterns)-1):\n        if not isinstance(patterns[j], str) and not isinstance(patterns[j], int) and not isinstance(patterns[j], float) and not isinstance(patterns[j], bool) and not isinstance(patterns[j], None) and not isinstance(patterns[j], tuple) and not isinstance(patterns[j], list):\n            return False\n    \n    if patterns[-1] == 'Reverse':\n        if len(patterns)!= len(colors):\n            return False\n        \n        if patterns[0]!= 'Forward':\n            return False\n        \n        for i in range(1, len(patterns)-1):\n            if patterns[i] == 'Reverse':\n                if patterns[i-1] == 'Forward':\n                    return False\n    elif patterns[-1] == 'Reverse':\n        if len(patterns)!= len(colors):\n            return False\n        \n        if patterns[0]!= 'Reverse':\n            return False\n        \n        for i in range(1, len(patterns)-1):\n            if patterns[i] == 'Forward':\n                if patterns[i-1] == 'Reverse':\n                    return False\n    else:\n        if len(patterns)!= len(colors):\n            return False\n        \n        if patterns[0]!= 'Forward':\n            return False\n        \n        for i in range(1, len(patterns)-1):\n            if patterns[i] == 'Forward':\n                if patterns[i-1] == 'Forward':\n                    return False\n    \n    return True\n",
        "test": "assert     is_samepatterns(['red','yellow','white'], ['red','yellow','blue','white','red','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','blue']) == False, \"Expected is_samepatterns(['red','yellow','white'], ['red','yellow','blue','white','red','yellow','white','red','white','blue','yellow','white','red','white','blue','yellow','white','red','blue']) = False\"",
        "num_ids": 2969,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #  implement this function yourself\n    l = []\n    for i in test_list:\n        if (i[0] % K) == 0:\n            l.append(i)\n    return l\n",
        "test": "assert    find_tuples([(1, 2), (2, 1), (3, 2)], 2) == [(2, 1)]",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     (is_Diff(11)==True) == True, \"Should be True\"",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # your code here\n    s1=len(s)\n    if s1%2==0:\n        return False\n    else:\n        return True\n",
        "test": "assert     word_len('hello') == True",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)//2\n",
        "test": "assert     tetrahedral_number(2) == 4, \"N2\"",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4 / 3) * math.pi * r**3\n    return v\n",
        "test": "assert ",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0]) + (ord(strr[0]) - ord('a')) % 26\n",
        "test": "assert     get_Char(\"The\") == 97",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    return sequence(n-1) + n\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if not isinstance(n, int) or n <= 0:\n        return\n    # binomial coefficient\n    # a(n) = (6n+1) / 2\n    # (6*(n+1)+1) / 2\n    # (6n+1) + 2n + 1\n    # (6n+1) + 2n + 1\n    # (6n+1) + 2n + 1\n    return int(((6*n+1)**.5 + 1) / 2)\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # return(dict(dict1.items()+dict2.items()+dict3.items()))\n    return {**dict1,**dict2,**dict3}\n",
        "test": "assert     merge_dictionaries_three({1: 10, 2: 20, 3: 30},{4: 40, 5: 50, 6: 60}, {7: 70, 8: 80, 9: 90}) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60, 7: 70, 8: 80, 9: 90}",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_closet_num(n):\n        '''\n        determines whether a number is the closest smaller number\n        '''\n        if n == 0:\n            return False\n        return abs(N - n) <= abs(N - n - 1)\n    '''\n    some quick checks\n    '''\n    if N == 0:\n        return False\n    if N == 1:\n        return True\n    '''\n    algorithm\n    '''\n    while N > 1:\n        if is_closet_num(N):\n            return N\n        else:\n            N -= 1\n",
        "test": "assert ",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort()\n    list1.reverse()\n    max_len = 0\n    cur_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            cur_len = 1\n        elif len(i) == max_len:\n            cur_len += 1\n    return max_len\n",
        "test": "assert     len_log([]) == 0, \"Empty list\"",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_substring(str1 = 'a', sub_str = 'c') == False",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a,b,c = 0,0,1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n        if (a==0):\n            return False\n    return True\n",
        "test": "assert     is_undulating(2) == False",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    assert(type(a) == int and type(b) == int)\n    return a ** b\n",
        "test": "assert     power(1,2) == 1*1",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    tup_list = []\n    for i in test_list:\n        tup_list.append(i)\n    tup_list.sort(key=lambda tup: tup[1])\n    return tup_list[0]\n",
        "test": "assert     index_minimum([(1,2), (3,3), (1,1)]) == (1,1)",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst = lst[0]\n    for i in lst:\n        if len(i) < len(min_lst):\n            min_lst = i\n    return len(min_lst)\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_lst = lst[0]\n    for i in lst:\n        if len(i) > len(max_lst):\n            max_lst = i\n    return len(max_lst)\n",
        "test": "assert     Find_Min_Length([[]]) == 0, \"find_min_length([[]]): returned %s (should be 0)\" % (Find_Min_Length([[]]))",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    if n == 1:\n        return 1\n    for i in range(1, n):\n        if n%i == 0:\n            count = count + 1\n    return count\n",
        "test": "assert     divisor(1) == 1, \"divisor returns 1\"",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_list = {}\n    for item in list1:\n        if item in frequency_list.keys():\n            frequency_list[item] += 1\n        else:\n            frequency_list[item] = 1\n",
        "test": "assert     frequency_lists([1,2,2,3,4,4,4]) == {1:4, 2:3, 3:2, 4:1}",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numpy.prod(numbers) / len(numbers)\n",
        "test": "assert     multiply_num([2]) == 4, \"Single number!\"",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "test": "assert     decimal_to_binary(10) == \"1010\"",
        "num_ids": 2643,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    return\n",
        "test": "assert     next_smallest_palindrome(123456) == 484321",
        "num_ids": 2339,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert     kth_element([1], 1) == 1",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]\n",
        "test": "assert ",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    print(n,m)\n    if n < 0 or m < 0 or n < m:\n        raise ValueError(\"Please enter n and m values which are positive\")\n    else:\n        if n == m:\n            return 1\n        else:\n            return 0\n",
        "test": "assert     eulerian_num(1, 1) == 1 ",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in input_list:\n        i.sort()\n        output_list.append(i)\n    return output_list\n",
        "test": "assert     sort_sublists([[],['a'],['b'],['c']]) == [[],['a'],['b'],['c']]",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n",
        "test": "assert count([]) == 0",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        if i == len(test_tup):\n            test_list.append(test_tup)\n            return test_list\n        if test_list[i] == test_tup[i]:\n            continue\n        else:\n            test_list.append(test_tup)\n            return test_list\n        \n",
        "test": "assert     add_lists([1, 2, 3], (1, 2, 3)) == (1, 2, 3)",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n",
        "test": "assert     merge_sorted_list([1,2,3,4], [5,6,7,8], [0,9,10,11,12]) == [0,1,2,3,4,5,6,7,8,9,10,11,12]",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n):\n        s = find_odd_string(s)\n        if s == None:\n            break\n        result += 1\n    return result\n    \ndef find_odd_string(s):\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            return s[i:]\n        i -= 1\n    return None\n    \nif __name__ == \"__main__\":\n    print(odd_Equivalent(\"00110\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"1011\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"0111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"0\", 2))\n    # 1\n    \n    print(odd_Equivalent(\"00\", 2))\n    # 1\n    \n    print(odd_Equivalent(\"0011\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"11\", 2))\n    # 1\n    \n    print(odd_Equivalent(\"1101\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"111\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"101100\", 2))\n    # 4\n    \n    print(odd_Equivalent(\"101100\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"101100\", 4))\n    # 2\n    \n    print(odd_Equivalent(\"101100\", 5))\n    # 1\n    \n    print(odd_Equivalent(\"101100\", 6))\n    # 1\n    \n    print(odd_Equivalent(\"101100\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"101100\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"101100\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"101100\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"11111111111111\", 2))\n    # 14\n    \n    print(odd_Equivalent(\"00110\", 10))\n    # 2\n    \n    print(odd_Equivalent(\"00001111111111\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"0000110000000000\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00011111111111\", 2))\n    # 4\n    \n    print(odd_Equivalent(\"01111111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 4))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00110111111111\", 6))\n    # 2\n    \n    print(odd_Equivalent(\"00110111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00110111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00110111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00110111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"011011100000001\", 2))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 3))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 4))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 6))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00000111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"00001111111111\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"00011111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00011111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00011111111111\", 4))\n    # 3\n    \n    print(odd_Equivalent(\"00011111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00011111111111\", 6))\n    # 2\n    \n    print(odd_Equivalent(\"00011111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00011111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00011111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00011111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"0110111111111\", 2))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 4))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 6))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00000111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"00011111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 4))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00110111111111\", 6))\n    # 2\n    \n    print(odd_Equivalent(\"00110111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00110111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00110111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00110111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"01111111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 4))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 6))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00000111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"0110111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 4)",
        "test": "assert ",
        "num_ids": 2420,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    uniq = []\n    for i in nestedlist:\n        for j in i:\n            if j not in uniq:\n                uniq.append(j)\n    return uniq\n",
        "test": "assert not common_in_nested_lists([[],[]])",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "test": "assert     check_integer('12')     == True,'string does not represent an integer'",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #return all(not list1 for list1 in list1)\n    return all(not value for values in list1 for value in values.values())\n",
        "test": "assert     empty_dit([]) is True, \"Empty list should return True\"",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # n = len(nums)\n    # return int(sum(nums) / n)\n    return sum(nums)\n    \nprint(tuple_to_int((1, 2, 3, 4)))",
        "test": "assert     tuple_to_int((0,0,0)) == 0, 'WRONG'",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return list(map(float,test_list))\n",
        "test": "assert     list_to_float([[\"a\", 1.1, 3.1], [\"b\", 2.2, 4.2]]) == [[1.1, 3.1, 4.2], [2.2, 4.2, 6.2]]",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \ndef is_empty(string):\n    '''\n    Write a function to check if a string is empty or not.\n    '''\n    if string == \"\":\n        return True\n    else:\n        return False\n        \ndef split_string_on_comma(string):\n    '''\n    Write a function to split a string on comma and return the list of strings.\n    '''\n    return string.split(',')\n    \ndef remove_duplicate_items(list_of_items):\n    '''\n    Write a function to remove duplicates items from a given list of items and return the new list.\n    '''\n    if is_empty(list_of_items):\n        return False\n    else:\n        return set(list_of_items)\n        \ndef remove_first_occurence(l, item):\n    '''\n    Write a function to remove the first occurrence of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        for index, i in enumerate(l):\n            if item == i:\n                return l.pop(index)\n                \ndef remove_all_occurrences(l, item):\n    '''\n    Write a function to remove all the occurrences of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        while item in l:\n            l.remove(item)\n        return l\n        \ndef first_occurrence(l, item):\n    '''\n    Write a function to find the first occurrence of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        for index, i in enumerate(l):\n            if item == i:\n                return index\n                \ndef last_occurrence(l, item):\n    '''\n    Write a function to find the last occurrence of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        for index in range(len(l) - 1, -1, -1):\n            if item == l[index]:\n                return index\n                \ndef index_occurrence(l, item):\n    '''\n    Write a function to find the index of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        for index, i in enumerate(l):\n            if item == i:\n                return index\n                \ndef count(l, item):\n    '''\n    Write a function to count the number of occurrences of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return 0\n    else:\n        return l.count(item)\n        \ndef max(l):\n    '''\n    Write a function to find the max of a list of numbers.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        max_value = l[0]\n        for i in l:\n            if i > max_value:\n                max_value = i\n        return max_value\n        \ndef min(l):\n    '''\n    Write a function to find the min of a list of numbers.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        min_value = l[0]\n        for i in l:\n            if i < min_value:\n                min_value = i\n        return min_value\n        \ndef sum(l):\n    '''\n    Write a function to find the sum of a list of numbers.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        total = 0\n        for i in l:\n            total += i\n        return total\n            \ndef find_index(l, item):\n    '''\n    Write a function to find the index of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        for index, i in enumerate(l):\n            if item == i:\n                return index\n                \ndef length(l):\n    '''\n    Write a function to find the length of a list.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        return len(l)\n        \ndef last_element(l):\n    '''\n    Write a function to find the last element of a list.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        return l[-1]\n        \ndef length_of_last_item(l):\n    '''\n    Write a function to find the length of the last item in a list.\n    '''\n    if is_empty(l) or l == None:\n        return False\n    else:\n        return len(l[-1])\n        \ndef reverse_list(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        for i in range(len(l)):\n            l.append(l.pop(0))\n        return l\n        \ndef remove_list(l, item):\n    '''\n    Write a function to remove the item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        while item in l:\n            l.remove(item)\n        return l\n        \ndef rotate_list(l, k):\n    '''\n    Write a function to rotate a list by k positions.\n    '''\n    if is_empty(l) or k == None:\n        return False\n    else:\n        k = k % len(l)\n        l = l[k:] + l[:k]\n        return l\n        \ndef reverse_list_recursion(l):\n    '''\n    Write a function to reverse a list using recursion.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        return l[::-1]\n        \ndef swap_list(l, i, j):\n    '''\n    Write a function to swap two elements of a list.\n    '''\n    if is_empty(l) or i == None or j == None:\n        return False\n    else:\n        l[i], l[j] = l[j], l[i]\n        return l\n        \ndef rotate_list_recursion(l, k):\n    '''\n    Write a function to rotate a list by k positions using recursion.\n    '''\n    if is_empty(l) or k == None:\n        return False\n    else:\n        k = k % len(l)\n        l = l[k:] + l[:k]\n        return l\n        \ndef count_occurrences(l, item):\n    '''\n    Write a function to count the number of times an item occurs in a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        return l.count(item)\n        \ndef reverse_a_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    if is_empty(string):\n        return False\n    else:\n        return string[::-1]\n",
        "test": "assert     string_to_list('hello world') == ['hello', 'world'], \"First test fails\"",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    key = arr[n//2]\n    if key == arr[n//2 - 1]:\n        return key\n    if key == arr[n//2 + 1]:\n        return key\n    if key == arr[n//2]:\n        return key\n    # left and right arrays\n    left = [x for x in arr if x < key]\n    right = [x for x in arr if x > key]\n    if len(left) <= len(right):\n        return search(left)\n    else:\n        return search(right)\n",
        "test": "assert     search([1,2,1,4]) == 1, 'Test 2 failed'",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = None\n    for i in range(0, len(list1)-1, 2):\n        x = list1[i]\n        y = list1[i+1]\n        if maximum is None or x*y > maximum:\n            maximum = x*y\n    return maximum\n",
        "test": "assert ",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = [i for i in range(1, limit + 1)]\n    amicable_numbers = []\n    for i in range(len(numbers)):\n        if i == 0:\n            continue\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] == numbers[j] and i!= j:\n                amicable_numbers.append(numbers[i])\n                break\n    return sum(amicable_numbers)\n",
        "test": "assert ",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=complex(a,b)\n    ang=cmath.phase(angle)\n    ang_degree=int(ang*180/3.1415)\n    if ang_degree<0:\n        return ang_degree*(-1)\n    return ang_degree\n",
        "test": "assert     angle_complex(0,0) == 0, \"Passing 0 and 0 should be 0\"",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    for i in range(length):\n        current_string = string[i:length]\n        current_string_length = len(current_string)\n        zero_count = current_string.count('0')\n        one_count = current_string.count('1')\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert     find_length('10101') == 1",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    for x in range(1, min(a,b)+1):\n        if (a%x == 0) and (b%x == 0):\n            c += x\n    return c\n",
        "test": "assert     sum(1,1) == 1",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(1,2) == 2",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return_list = []\n    for word in str:\n        if len(word) > n:\n            return_list.append(word)\n    return return_list\n",
        "test": "assert     long_words(4, ['hello', 'world', 'of', 'a', 'b']) == ['hello', 'world']",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has only one dimension\n    if len(my_matrix) > 1:\n        # This matrix has more than one dimension\n        return False\n    # If the matrix has only one dimension, then it must be a square\n    # If not, then it is not a magic square\n    return all(len(my_matrix) == len(x) for x in my_matrix) and sum(my_matrix[i][i] for i in range(len(my_matrix))) == sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix)))\n",
        "test": "assert     magic_square_test([[1, 2, 3], [3, 6, 7], [4, 5, 6]]) == False, \"Wrong output for [[1, 2, 3], [3, 6, 7], [4, 5, 6]]\"",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    if len(nums) == 0:\n        return None\n    \n    else:\n        max_count = 1\n        max_count_item = nums[0]\n        \n        for num in nums:\n            if num not in nums:\n                continue\n            \n            if nums.count(num) > max_count:\n                max_count = nums.count(num)\n                max_count_item = num\n        \n        return max_count_item\n",
        "test": "assert max_occurrences([5, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #print(str1)\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    #print(vowels)\n    new_str = []\n    for char in str1:\n        if char not in vowels:\n            new_str.append(char)\n        else:\n            new_str.insert(0,char)\n    return ''.join(new_str)\n",
        "test": "assert     reverse_vowels('') == ''",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    # initialize a result string\n    result = str()\n    \n    # write your code below\n    \n    return result\n",
        "test": "assert     tup_string(()) == \"\",'returning empty string for the empty tuple'",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert     sum_negativenum([-3, -2, -1, 0, 1, 2, 3]) == -6",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n        i += 1\n    return result\n",
        "test": "assert     hexagonal_num(2) == 3",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n",
        "test": "assert ",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n+1):\n        if n%i == 0:\n            if i == 2 or i == n//i:\n                return True\n    return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(2) == True, 'passed'",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(1) == 2 * math.pi",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    n = 1\n    result = []\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            result.extend(extract_singly(test_list[i]))\n        else:\n            result.append(test_list[i])\n    return result\n",
        "test": "assert     extract_singly([[1,2],[3,4]]) == [1,2,3,4]",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #Do not change the code below\n    for i in range(len(nums) - 1, 0, -1):\n        max_idx = nums.index(max(nums[i:]))\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n    #Do not change the code above\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num1 = list1.count(list2[0])\n    num2 = list1.count(list2[1])\n    num3 = list1.count(list2[2])\n    return num1*num2*num3\n",
        "test": "assert count_samepair([1,2,1],[3,4,1],[5,6,1]) == 0",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(filter(lambda x: type(x) is list, Input)))\n",
        "test": "assert     find_lists(('x', 'y', 'z')) == 0",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if(len(arr)<2):\n        return -1\n    diff_list = []\n    for i in range(1,len(arr)):\n        diff = abs(arr[i]-arr[i-1])\n        diff_list.append(diff)\n    return max(diff_list)\n",
        "test": "assert     max_Abs_Diff([0, -2, -3, -4, -5, -4]) == 0",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = a\n    y = b\n    for i in range(1, n):\n        if (x * x + y * y) == n:\n            return x, y\n        if (x * x + y * y) < n:\n            x += 1\n        else:\n            x -= 1\n        y = (x * y) - (a * i)\n    return None\n",
        "test": "assert     find_solution(1, 1, 1) == None, 'Wrong answer for this input'",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result_list = []\n    for i in list1:\n        if i not in list2:\n            result_list.append(i)\n    return result_list\n",
        "test": "assert     remove_elements([], [1, 2, 3, 4, 5]) == []",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    i = 0\n    sum = 0\n    while i <= n:\n        sum += i\n        i += 2\n    return sum\n",
        "test": "assert ",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return l*s*(s-1)/2\n",
        "test": "assert     area_polygon(2, 5) == 5",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return False\n",
        "test": "assert     div_sum(12) == False, '12 is incorrect.'",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    '''\n    str1 = input(\"Please enter the string: \")\n    str1 = \"zdvfe\"\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if str1[i].lower() == str1[i].lower():\n            count += 1\n    print(count)\n    \n    \ndef count_char_position_two(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    '''\n    str1 = input(\"Please enter the string: \")\n    str1 = \"zdvfe\"\n    '''\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    result = 0\n    for i in range(0, len(str1)):\n        result += 1\n        if str1[i] in s:\n            result += 1\n    print(result)\n",
        "test": "assert not",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    \n    for i in range(len(A)):\n        if A[i] & 1 == 0:\n            for j in range(i + 1, len(A)):\n                if A[j] & 1 == 0:\n                    even_count += 1\n    return even_count\n",
        "test": "assert     find_even_pair([])    == 0, 'no pairs of even xor'",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    ans = 1\n    while ans <= n:\n        ans = 2**ans\n    return ans\n",
        "test": "assert     next_power_of_2(0) == 1",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    i = 0\n    if x in a:\n        for i in a:\n            if i == x:\n                a.count(x)\n    return a.count(x)\n",
        "test": "assert     frequency([1,2,3,1],1) == 2, 'Frequency function fails'",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m,n+1):\n        sum_list += list1[i]\n    return sum_list\n",
        "test": "assert     sum_range_list([10,20,30], 0, 2) == 60",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n",
        "test": "assert     perimeter_pentagon(1)    == 5, '1'",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c == 'd':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance(\"A\") == 0",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Please enter a Tuple\")\n    else:\n        for ele in test_tuple:\n            if not isinstance(ele, int) and not isinstance(ele, float):\n                raise TypeError(\"Please enter int or float\")\n            else:\n                if len(test_tuple) == 1:\n                    return True\n                else:\n                    return all(isinstance(elem, int) or isinstance(elem, float) for elem in test_tuple)\n",
        "test": "assert     check_type((1, 2, 3)) == True, 'Tuple is having data type correctly.'",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case: empty array\n    if not arr:\n        return -1\n    # edge case: 1 element\n    if len(arr) == 1:\n        return arr[0]\n    # edge case: 2 elements\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[0]\n    # edge case: 3 elements\n    if len(arr) == 3:\n        if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[1]!= arr[2]:\n            return arr[0]\n        elif arr[1]!= arr[2]:\n            return arr[1]\n        else:\n            return arr[2]\n    # binary search\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (high+low)//2\n        if arr[mid] == x:\n            return True\n        if x < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n    \ndef is_majority_two(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case: empty array\n    if not arr:\n        return -1\n    # edge case: 1 element\n    if len(arr) == 1:\n        return arr[0]\n    # edge case: 2 elements\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[0]\n    # edge case: 3 elements\n    if len(arr) == 3:\n        if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[1]!= arr[2]:\n            return arr[0]\n        elif arr[1]!= arr[2]:\n            return arr[1]\n        else:\n            return arr[2]\n    # binary search\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (high+low)//2\n        if arr[mid] == x:\n            return True\n        if x < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n    \ndef is_majority_two_better(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case: empty array\n    if not arr:\n        return -1\n    # edge case: 1 element\n    if len(arr) == 1:\n        return arr[0]\n    # edge case: 2 elements\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[0]\n    # edge case: 3 elements\n    if len(arr) == 3:\n        if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[1]!= arr[2]:\n            return arr[0]\n        elif arr[1]!= arr[2]:\n            return arr[1]\n        else:\n            return arr[2]\n    # binary search\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (high+low)//2\n        if arr[mid] == x:\n            return True\n        if x < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n    ",
        "test": "assert     is_majority([1, 1, 1, 1], 3, 1) == True",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = 0\n    while n:\n        s += 1\n        n = n&(n-1)\n    return s\n",
        "test": "assert count_Set_Bits(2) == 1",
        "num_ids": 179,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    count = 0\n    new_str = \"\"\n    # Write your code here\n    for i in range(len(str)):\n        if count % 2 == 0:\n            new_str += str[i]\n        count += 1\n    return new_str\n",
        "test": "assert     odd_values_string(\"Python12\") == 'ytho'",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n",
        "test": "assert     min_of_three(50, 100, 150)     == 50",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (r-l+1)%2!=0:\n        return False\n    else:\n        while l<r:\n            if (n&l)!=0:\n                return False\n            l+=1\n        return True\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(5,1,4) == False, \"Wrong Answer\"",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i]<0:\n            arr[i], arr[i+n] = arr[i+n], arr[i]\n    return arr\n",
        "test": "assert     re_arrange_array([1,2,3,4,5,6], 3) == [1,2,3,4,5,6]",
        "num_ids": 2436,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    lst1 = list(str1)\n    for i in range(len(lst1)):\n        if lst1[i]==' ':\n            lst1[i]=char\n    lst1 = \"\".join(lst1)\n    return lst1\n",
        "test": "assert     replace_blank(\"Is this my first sentence?\", \" \") == \"Is this my first sentence?\", \"The replace_blank function should return the string unchanged if no blank spaces are found.\"",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # heapsort(list1)\n    # return sorted(list1, key=lambda x: x[0])[:n]\n    heapq.heapify(list1)\n    sorted_list = []\n    for i in range(n):\n        sorted_list.append(heapq.heappop(list1))\n    return sorted_list\n",
        "test": "assert ",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #The equation of a cylinder is given by\n    #pi*r*h = area\n    #pi*r^2 = area\n    #2*pi*r = area\n    #area = 2*pi*r*h = pi*r^2 + pi*r^2\n    #area = pi*(r^2)*h + pi*(r^2)\n    #area = pi*(r^2)*h\n    #area = pi*(r^2 + r^2)\n    #area = pi*(r^2 + r^2 + r^2)\n    #area = 2*pi*r*(r^2 + r^2)\n    #area = 2*pi*r*(r^2 + r^2)\n    #area = pi*r^2*(r^2 + r^2)\n    #area = pi*r^2*r^2\n    #area = pi*r^2\n    area = pi*r*(r*r + r*r)\n    return area\n",
        "test": "assert ",
        "num_ids": 2259,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    return l*l*l\n",
        "test": "assert     volume_cube(1) == 1",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(1,n+1):\n        if i%2 == 0:\n            print(i,end = \" \")\n    print(\"\")\n",
        "test": "assert ",
        "num_ids": 2276,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    return d\n",
        "test": "assert     check_occurences([(1, 2), (2, 4), (3, 4), (1, 5), (2, 5), (3, 5), (4, 6), (1, 6)]) == {(1, 2): 2, (2, 4): 2, (3, 4): 2, (1, 5): 1, (2, 5): 1, (3, 5): 1, (4, 6): 1, (1, 6): 1}",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    count = 0\n    for i in range(length):\n        for j in range(i,length):\n            substr = str[i:j+1]\n            if substr:\n                count +=1\n    return count\n",
        "test": "assert     number_of_substrings('a') == 1 ",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    '''\n    i=0\n    t=m-1\n    while t<n:\n        i+=1\n        t=m-1\n        while t>0:\n            t=t-1\n    return i\n",
        "test": "assert     get_total_number_of_sequences(3,3) == 7",
        "num_ids": 2531,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # list1[-1] = list2[0]\n    # return list1\n    list1[0:len(list1)-1] = list2\n    return list1\n",
        "test": "assert     replace_list([1,2,3,4,5],[1,2,3,4]) == [1,2,3,4,5]",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac('abcde') == 5",
        "num_ids": 173,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N=int(N)\n    x=int(math.sqrt(N))\n    for i in range(x,0,-1):\n        if N%i==0:\n            y=N//i\n            return y*y\n        else:\n            continue\ndef Problem_05(N):\n    '''\n    Write a python function that finds the next perfect square greater than a given number.\n    '''\n    N=int(N)\n    x=int(math.sqrt(N))\n    for i in range(x,0,-1):\n        if N%i==0:\n            y=N//i\n            return y*y\n        else:\n            continue\ndef Factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    n=int(n)\n    if n==0:\n        return 1\n    else:\n        return n*Factorial(n-1)\n",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr = sorted(arr)\n    res = float('-inf')\n    sum_cur = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            sum_cur += arr[i] - arr[i-1]\n            res = max(res, sum_cur)\n        else:\n            sum_cur = 0\n            res = max(res, sum_cur)\n    return res\n",
        "test": "assert ",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 1:\n        return number\n    else:\n        return babylonian_squareroot(number / 2) + 0.5\n",
        "test": "assert     babylonian_squareroot(0) == 0.0",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    s = str\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    if s == s[::-1]:\n        return n\n    else:\n        for i in range(n-1, -1, -1):\n            if i == 0:\n                dp[i][i] = 1\n            else:\n                for j in range(i+1):\n                    if s[i] == s[j]:\n                        if (i-j+1) > dp[i+1][j-1]:\n                            dp[i][j] = dp[i+1][j-1] + 2\n                        else:\n                            dp[i][j] = 1 + dp[i-j+1][j]\n                    else:\n                        dp[i][j] = 1\n    return max([max(x) for x in dp])\n",
        "test": "assert     lps(\"\") == 0, \"Empty String\"",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + 1 / i\n    return sum\n",
        "test": "assert     harmonic_sum(0) == 0, \"harmonic_sum(0) == 0\"",
        "num_ids": 171,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_nums = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            intersection_nums.append(array_nums1[i])\n            i += 1\n            j += 1\n    return intersection_nums\n",
        "test": "assert     intersection_array([1, 2, 2, 1], [2, 2]) == [2, 2], \"Test case 1 failed\"",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X([1,1,1,2,2,2,2], 1) == 3",
        "num_ids": 175,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #iterate through the list\n    for i in range(len(list)):\n        #if the index is 0, insert the element before the first element in the list\n        if i == 0:\n            list.insert(i,element)\n            return list\n        else:\n            #else, insert element in between the elements\n            list.insert(i,element)\n    #return the list\n    return list\n",
        "test": "assert     insert_element([], 1) == []",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(0, len(numbers)):\n        #print(numbers[i])\n        if(type(numbers[i]) == complex):\n            if(numbers[i].imag == 0):\n                #print(numbers[i].real)\n                numbers[i] = abs(numbers[i].real)\n                #print(numbers[i])\n            elif(numbers[i].real == 0):\n                #print(numbers[i].imag)\n                numbers[i] = cmath.phase(numbers[i])\n                #print(numbers[i])\n            else:\n                #print(numbers[i].real)\n                #print(numbers[i].imag)\n                numbers[i] = abs(numbers[i].real), cmath.phase(numbers[i])\n                #print(numbers[i])\n    return numbers\n        \nif __name__ == '__main__':\n    #print(convert([1+2j,3+4j,5+6j,7+8j,9+10j,11+12j]))\n    print(convert([1+2j,3+4j,5+6j,7+8j,9+10j,11+12j]))\n    #print(convert([1+2j,3+4j,5+6j,7+8j,9+10j,11+12j]))\n",
        "test": "assert     convert([complex(-1, 1), complex(-1, -1), complex(0, 1), complex(0, -1), complex(1, 1)]) ",
        "num_ids": 3533,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])\n    \n",
        "test": "assert count_integer([1,2,3]) == 3",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n < 0 or not isinstance(n, int):\n        raise TypeError('Must be a positive integer')\n    if n == 0:\n        return []\n    result = []\n    for i in range(len(l)-n+1):\n        result.append(tuple(l[i:i+n]))\n    return result\n",
        "test": "assert     combinations_colors([1,2], 0) == []",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n = int(n)\n    primes = []\n    for i in range(2, n):\n        prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                prime = False\n        if prime:\n            primes.append(i)\n    return len(primes)\n",
        "test": "assert     count_Primes_nums(0) == 0, \"Counting numbers with given number is not working.\"",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n    \n    #Write your function here\ndef pos_neg(lst):\n    '''\n    Write a function that takes in a list of numbers and returns a list with only the positive numbers and a list with only the negative numbers.\n    '''\n    pos_nums = []\n    neg_nums = []\n    \n    for i in range(len(lst)):\n        if lst[i] > 0:\n            pos_nums.append(lst[i])\n        elif lst[i] < 0:\n            neg_nums.append(lst[i])\n            \n    return pos_nums, neg_nums\n",
        "test": "assert     swap_numbers(1,1) == (1,1)",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1\n    for i in range(len(test_tup1)):\n        if max_tup[i] < test_tup2[i]:\n            max_tup = test_tup2\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(n-1):\n            if not newman_prime(i):\n                return False\n        return True\n",
        "test": "assert     newman_prime(3) == 7",
        "num_ids": 6215,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    final_tup = ()\n    for i in range(0,len(test_tup1)):\n        final_tup = final_tup + (test_tup1[i] / test_tup2[i], )\n    return final_tup\n",
        "test": "assert     division_elements((3,5), (3,5)) == (1,1)",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) > L:\n        return (list1[:L], list1[L:])\n    else:\n        return ([], list1)\n",
        "test": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4]), \"should return ([1, 2], [3, 4])\"",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == '0 - 2':\n        return '0'\n    elif h_age == '3 - 5':\n        return '3'\n    elif h_age == '6 - 8':\n        return '6'\n    elif h_age == '9 - 11':\n        return '9'\n    elif h_age == '12 - 14':\n        return '10'\n    elif h_age == '15 - 17':\n        return '11'\n    elif h_age == '18 - 20':\n        return '12'\n    elif h_age == '21 - 23':\n        return '13'\n    elif h_age == '24 - 27':\n        return '14'\n    elif h_age == '28 - 32':\n        return '15'\n    elif h_age == '33 - 37':\n        return '16'\n    elif h_age == '38 - 43':\n        return '17'\n    elif h_age == '44 - 48':\n        return '18'\n    elif h_age == '49 - 54':\n        return '19'\n    elif h_age == '55 - 59':\n        return '20'\n    elif h_age == '60 - 64':\n        return '21'\n    elif h_age == '65 - 69':\n        return '22'\n    elif h_age == '70 - 74':\n        return '23'\n    elif h_age == '75 - 79':\n        return '24'\n    elif h_age == '80 - 84':\n        return '25'\n    elif h_age == '85 - 89':\n        return '26'\n    elif h_age == '90 - 94':\n        return '27'\n    elif h_age == '95 - 99':\n        return '28'\n    elif h_age == '100 - 104':\n        return '29'\n    elif h_age == '105 - 109':\n        return '30'\n    elif h_age == '110 - 114':\n        return '31'\n    elif h_age == '115 - 119':\n        return '32'\n    elif h_age == '120 - 124':\n        return '33'\n    elif h_age == '125 - 129':\n        return '34'\n    elif h_age == '130 - 134':\n        return '35'\n    elif h_age == '135 - 139':\n        return '36'\n    elif h_age == '140 - 144':\n        return '37'\n    elif h_age == '145 - 149':\n        return '38'\n    elif h_age == '150 - 154':\n        return '39'\n    elif h_age == '155 - 159':\n        return '40'\n    elif h_age == '160 - 164':\n        return '41'\n    elif h_age == '165 - 169':\n        return '42'\n    elif h_age == '170 - 174':\n        return '43'\n    elif h_age == '175 - 179':\n        return '44'\n    elif h_age == '180 - 184':\n        return '45'\n    elif h_age == '185 - 189':\n        return '46'\n    elif h_age == '190 - 194':\n        return '47'\n    elif h_age == '195 - 199':\n        return '48'\n    elif h_age == '200 - 204':\n        return '49'\n    elif h_age == '205 - 209':\n        return '50'\n    elif h_age == '210 - 214':\n        return '51'\n    elif h_age == '215 - 219':\n        return '52'\n    elif h_age == '220 - 224':\n        return '53'\n    elif h_age == '225 - 229':\n        return '54'\n    elif h_age == '230 - 234':\n        return '55'\n    elif h_age == '235 - 239':\n        return '56'\n    elif h_age == '240 - 244':\n        return '57'\n    elif h_age == '245 - 249':\n        return '58'\n    elif h_age == '250 - 254':\n        return '59'\n    elif h_age == '255 - 259':\n        return '60'\n    elif h_age == '260 - 264':\n        return '61'\n    elif h_age == '265 - 269':\n        return '62'\n    elif h_age == '270 - 274':\n        return '63'\n    elif h_age == '275 - 279':\n        return '64'\n    elif h_age == '280 - 284':\n        return '65'\n    elif h_age == '285 - 289':\n        return '66'\n    elif h_age == '290 - 294':\n        return '67'\n    elif h_age == '295 - 299':\n        return '68'\n    elif h_age == '300 - 304':\n        return '69'\n    elif h_age == '305 - 309':\n        return '70'\n    elif h_age == '310 - 314':\n        return '71'\n    elif h_age == '315 - 319':\n        return '72'\n    elif h_age == '320 - 324':\n        return '73'\n    elif h_age == '325 - 329':\n        return '74'\n    elif h_age == '330 - 334':\n        return '75'\n    elif h_age == '335 - 339':\n        return '76'\n    elif h_age == '340 - 344':\n        return '77'\n    elif h_age == '345 - 349':\n        return '78'\n    elif h_age == '350 - 354':\n        return '79'\n    elif h_age == '355 - 359':\n        return '80'\n    elif h_age == '360 - 364':\n        return '81'\n    elif h_age == '365 - 369':\n        return '82'\n    elif h_age == '370 - 374':\n        return '83'\n    elif h_age == '375 - 379':\n        return '84'\n    elif h_age == '380 - 384':\n        return '85'\n    elif h_age == '385 - 389':\n        return '86'\n    elif h_age == '390 - 395':\n        return '87'\n    elif h_age == '396 - 399':\n        return '88'\n    elif h_age == '400 - 404':\n        return '89'\n    elif h_age == '405 - 409':\n        return '90'\n    elif h_age == '410 - 414':\n        return '91'\n    elif h_age == '415 - 419':\n        return '92'\n    elif h_age == '420 - 424':\n        return '93'\n    elif h_age == '425 - 429':\n        return '94'\n    elif h_age == '430 - 434':\n        return '95'\n    elif h_age == '435 - 439':\n        return '96'\n    elif h_age == '440 - 444':\n        return '97'\n    elif h_age == '445 - 449':\n        return '98'\n    elif h_age == '450 - 454':\n        return '99'\n    elif h_age == '455 - 459':\n        return '100'\n    elif h_age == '460 - 464':\n        return '101'\n    elif h_age == '465 - 469':\n        return '102'\n    elif h_age == '470 - 474':\n        return '103'\n    elif h_age == '475 - 479':\n        return '104'\n    elif h_age == '480 - 484':\n        return '105'\n    elif h_age == '485 - 489':\n        return '106'\n    elif h_age == '490 - 494':\n        return '107'\n    elif h_age == '495 - 499':\n        return '108'\n    elif h_age == '500 - 504':\n        return '109'\n    elif h_age == '505 - 509':\n        return '110'\n    elif h_age =",
        "test": "assert ",
        "num_ids": 4174,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_result = []\n    # Iterate through the list\n    for i in range(0, len(S), step):\n        list_result.append(S[i:i+step])\n    return list_result\n",
        "test": "assert     list_split([1,2,3,4,5,6], 1) == [[1],[2],[3],[4],[5],[6]]",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = 6 * l * l + 2 * l * (l - 1)\n    return surface\n",
        "test": "assert ",
        "num_ids": 163,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_sq = 0\n    for i in range(1,n+1,2):\n        sum_sq = sum_sq + i**2\n    print(sum_sq)\n    return sum_sq\n",
        "test": "assert square_Sum(10) == 12",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # \ud30c\uc774\uc36c\uc774 \uc22b\uc790 \ub098\ub204\uae30 \uc5f0\uc0b0\uc744 \uc548\ud574\uc8fc\uae30 \uc704\ud574 int\ud615\uc73c\ub85c \ubcc0\ud658 \n    return int((n * (n + 1)) / 2)\n    ",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65, \"Error\"",
        "num_ids": 249,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            ans += arr[i]\n    return ans\n",
        "test": "assert ",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n    \nprint(even_Power_Sum(10))\n",
        "test": "assert ",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output_list = []\n    for item in test_list:\n        output_list.append(item[1])\n    return output_list\n",
        "test": "assert     rear_extract([]) ==    [], 'Test 4 Failed'",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = (0,0)\n    for index, element in enumerate(test_tup1):\n        if element == test_tup2[index]:\n            new_tup = new_tup\n        else:\n            new_tup = new_tup + (element, )\n",
        "test": "assert     substract_elements((0, 2, 4), (1, 3, 5)) == (0, -2, -4)",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x = 0\n    for i in range(0,n+1):\n        x += math.factorial(i)/(math.factorial(i+0.5))\n    return x\n",
        "test": "assert ",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*r*r*h)\n",
        "test": "assert     volume_cylinder(1,1) == 3.14",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dic_new={k: v for k, v in dict.items() if v>=n}\n    return dic_new\n",
        "test": "assert     dict_filter({0:1,1:2,2:4,3:9},4) == {2:4,3:9}",
        "num_ids": 2298,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elem = test_tup[0]\n    counter = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < first_elem:\n            counter += 1\n    return counter\n",
        "test": "assert count_first_elements((1, 4, 6, 3, 2, 2, 4)) == 0",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    nums = 0\n    n = n\n    while n > 0:\n        nums += n\n        n = n - 1\n    return nums\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return found, pos\n    else:\n        return found, -1\n",
        "test": "assert     sequential_search([1,2,3,4],1) == (True, 0)",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for i in range(0,len(test_list)):\n        if test_list[i] not in unique:\n            unique.append(test_list[i])\n        else:\n            return False\n    return True\n",
        "test": "assert     all_unique([]) == True, \"Empty List\"",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n    if nums1_len!= nums2_len:\n        return False\n    else:\n        for i in range(nums1_len):\n            nums1[i] = nums1[i] - nums2[i]\n        return nums1\n",
        "test": "assert     sub_list([], []) == []",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    lst = []\n    for i in range(0,10):\n        lst.append(0)\n    for i in range(0,n):\n        for j in range(0,10):\n            if(lst[j]>=i):\n                lst[j]+=1\n            else:\n                lst[j]=1\n    \n    for i in range(0,10):\n        if(lst[i]>0):\n            return False\n    return True\n",
        "test": "assert     validate(234234) == False, \"wrong\"",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_element([1,2,3],0) == False",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search('a.{2,3}b',text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('ababab') == True",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum + a[i], a[i])\n        if max_sum % k == 0:\n            return max_sum\n        \n    return max_sum\n    \n    \n",
        "test": "assert     max_sub_array_sum_repeated(a, 1, 5) == 5",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if (i % 2) == 0:\n            result += i**2\n    return result\n",
        "test": "assert     square_Sum(0) == 0,'square_Sum(0) should be 0'",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "test": "assert ",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ans = [0]*(k+1)\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if i==1 and j==1:\n                ans[j] = 1\n            elif i==1:\n                ans[j] = ans[j-1]\n            elif j==1:\n                ans[j] = ans[j] + ans[j-1]\n            else:\n                ans[j] = ans[j] + ans[j-1] + ans[j-2]\n    return ans[k]\n",
        "test": "assert     count_no_of_ways(4, 2) == 4",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    # Code here\n",
        "test": "assert     find(8,4) == 2",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return h**2/w\n",
        "test": "assert     otherside_rightangle(8,8) == 8.0",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = 0\n    for i in listval:\n        if i > val:\n            val = i\n    return val\n    \n",
        "test": "assert     max_val([1, 2, 3]) == 3",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_div(0) == 0",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        inv_count += get_Inv_Count(L)\n        inv_count += get_Inv_Count(R)\n        i=j=k=0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return inv_count\n",
        "test": "assert     get_Inv_Count([0,1,2,3,4]) == 0",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    lst = []\n    if len(list1) == 0:\n        return lst\n    for i in list1:\n        if type(i) == list:\n            lst.extend(flatten_list(i))\n        else:\n            lst.append(i)\n    return lst\n",
        "test": "assert     flatten_list([\"a\", [\"b\", [\"c\", \"d\"], [\"e\", \"f\"]], [\"g\", [\"h\", [\"i\", \"j\"]]]]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # A list of dicts\n    data_dict = []\n    # A dict to store aggregate\n    max_aggregate_dict = {}\n    # Iterating over stdata\n    for i in stdata:\n        # Adding keys in dict\n        data_dict.append(i[0])\n    # Iterating over data_dict\n    for i in data_dict:\n        # Getting the value of the i\n        value = i\n        # Getting the values in dict\n        aggregate_list = []\n        for j in stdata:\n            if j[0] == value:\n                # Appending the j[1] to aggregate_list\n                aggregate_list.append(j[1])\n        # Getting the max value in the aggregate_list\n        max_value = max(aggregate_list)\n        # Adding the max_value to the max_aggregate_dict\n        max_aggregate_dict[i] = max_value\n    # Getting the key with maximum value\n    key = max(max_aggregate_dict.keys(), key=(lambda k: max_aggregate_dict[k]))\n    # Returning the key\n    return key\n",
        "test": "assert     max_aggregate([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == 'd'",
        "num_ids": 2735,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    for i in range(2**n):\n        s1 = 0\n        s2 = 0\n        for j in range(n):\n            s1 += (i & (1<<j))\n        for j in range(n-1, -1, -1):\n            s2 += (i & (1<<j))\n        if s1 == s2:\n            res += 1\n    return res\n",
        "test": "assert     count_binary_seq(4) == 16, \"Your program should be\" + str(16)",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    max_depth = 0\n    for k,v in d.items():\n        if type(v) == dict:\n            curr_depth = dict_depth(v) + 1\n        else:\n            curr_depth = 1\n        if curr_depth > max_depth:\n            max_depth = curr_depth\n    return max_depth\n",
        "test": "assert         dict_depth({'a':{'b':1, 'c':2}, 'c':{'d':3, 'e':4}}) == 2",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)):\n        if(ranges[i][0] <= index and index <= ranges[i][1]):\n            index = index - ranges[i][0] + ranges[i][1]\n            return index\n",
        "test": "assert     find_Element([1,2,3,4],[[0,1],[0,2]],[[0,1],[2,3]],0) == 1",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words == None:\n        return None\n    for i in range(len(words)):\n        if words[i].startswith('p'):\n            return (words[i], words[i + 1])\n    return (None, None)\n",
        "test": "assert     start_withp([\"pug\",\"pugger\",\"puggers\",\"puggersthis\",\"kebab\",\"kebabs\",\"puggy\"]) == ('pug','pugger')",
        "num_ids": 1847,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    res = 0\n    if index < k:\n        res = max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        res = max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1)) + a[index]\n        \n    return res\n",
        "test": "assert     max_sum_increasing_subseq([], 0, 0, 0) == 0",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = ()\n    colon = tuplex[0:m]\n    return colon\ndef row_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    row = ()\n    row = tuplex[n:]\n    return row\ndef space_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    space = ()\n    space = tuplex[m:n]\n    return space\ndef left_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a left of a tuple.\n    '''\n    left = ()\n    left = tuplex[0:m]\n    return left\ndef right_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a right of a tuple.\n    '''\n    right = ()\n    right = tuplex[n:]\n    return right\ndef upper_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a upper of a tuple.\n    '''\n    upper = ()\n    upper = tuplex[:m]\n    return upper\ndef lower_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a lower of a tuple.\n    '''\n    lower = ()\n    lower = tuplex[m:]\n    return lower\ndef print_tuplex(tuplex,m,n):\n    '''\n    Write a function to print a tuplex.\n    '''\n    print('\\n',tuplex[0:m],end='')\n    print(' ',tuplex[n:len(tuplex)],end='')\ndef copy_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a copy of a tuple.\n    '''\n    copy = ()\n    copy = tuplex[:]\n    return copy\ndef up_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a upper of a tuple.\n    '''\n    upper = ()\n    upper = tuplex[0:m]\n    return upper\ndef down_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a lower of a tuple.\n    '''\n    lower = ()\n    lower = tuplex[m:n]\n    return lower\ndef center_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a center of a tuple.\n    '''\n    center = ()\n    center = tuplex[m:m+n]\n    return center\ndef left_tuplex_to_right(tuplex,m,n):\n    '''\n    Write a function to get a left of a tuple to right of it.\n    '''\n    left = ()\n    left = tuplex[0:m]\n    right = ()\n    right = tuplex[n:]\n    return left+right\ndef right_tuplex_to_left(tuplex,m,n):\n    '''\n    Write a function to get a right of a tuple to left of it.\n    '''\n    right = ()\n    right = tuplex[n:]\n    left = ()\n    left = tuplex[0:m]\n    return right+left\ndef left_tuplex_to_up(tuplex,m,n):\n    '''\n    Write a function to get a left of a tuple to upper of it.\n    '''\n    left = ()\n    left = tuplex[0:m]\n    upper = ()\n    upper = tuplex[:n]\n    return left+upper\ndef up_tuplex_to_left(tuplex,m,n):\n    '''\n    Write a function to get a upper of a tuple to left of it.\n    '''\n    upper = ()\n    upper = tuplex[:n]\n    left = ()\n    left = tuplex[0:m]\n    return upper+left\ndef up_tuplex_to_right(tuplex,m,n):\n    '''\n    Write a function to get a upper of a tuple to right of it.\n    '''\n    upper = ()\n    upper = tuplex[:n]\n    right = ()\n    right = tuplex[n:]\n    return upper+right\ndef right_tuplex_to_up(tuplex,m,n):\n    '''\n    Write a function to get a right of a tuple to upper of it.\n    '''\n    right = ()\n    right = tuplex[n:]\n    upper = ()\n    upper = tuplex[:m]\n    return right+upper\ndef down_tuplex_to_left(tuplex,m,n):\n    '''\n    Write a function to get a lower of a tuple to left of it.\n    '''\n    down = ()\n    down = tuplex[m:]\n    left = ()\n    left = tuplex[0:n]\n    return down+left\ndef left_tuplex_to_down(tuplex,m,n):\n    '''\n    Write a function to get a left of a tuple to lower of it.\n    '''\n    left = ()\n    left = tuplex[0:n]\n    down = ()\n    down = tuplex[m:]\n    return left+down\ndef up_tuplex_to_right(tuplex,m,n):\n    '''\n    Write a function to get a upper of a tuple to right of it.\n    '''\n    up = ()\n    up = tuplex[:m]\n    right = ()\n    right = tuplex[n:]\n    return up+right\ndef right_tuplex_to_up(tuplex,m,n):\n    '''\n    Write a function to get a right of a tuple to upper of it.\n    '''\n    right = ()\n    right = tuplex[n:]\n    upper = ()\n    upper = tuplex[:m]\n    return right+upper\ndef down_tuplex_to_right(tuplex,m,n):\n    '''\n    Write a function to get a lower of a tuple to right of it.\n    '''\n    down = ()\n    down = tuplex[m:]\n    right = ()\n    right = tuplex[n:]\n    return down+right\ndef right_tuplex_to_down(tuplex,m,n):\n    '''\n    Write a function to get a right of a tuple to lower of it.\n    '''\n    right = ()\n    right = tuplex[n:]\n    down = ()\n    down = tuplex[:m]\n    return right+down\ndef center_tuplex_to_upper_left(tuplex,m,n):\n    '''\n    Write a function to get a center of a tuple to upper left of it.\n    '''\n    center = ()\n    center = tuplex[:m]\n    upper_left = ()\n    upper_left = tuplex[m:n]\n    return center+upper_left\ndef center_tuplex_to_lower_left(tuplex,m,n):\n    '''\n    Write a function to get a center of a tuple to lower left of it.\n    '''\n    center = ()\n    center = tuplex[:m]\n    lower_left = ()\n    lower_left = tuplex[m:n]\n    return center+lower_left\ndef center_tuplex_to_upper_right(tuplex,m,n):\n    '''\n    Write a function to get a center of a tuple to upper right of it.\n    '''\n    center = ()\n    center = tuplex[:m]\n    upper_right = ()\n    upper_right = tuplex[n:]\n    return center+upper_right\ndef center_tuplex_to_lower_right(tuplex,m,n):\n    '''\n    Write a function to get a center of a tuple to lower right of it.\n    '''\n    center = ()\n    center = tuplex[:m]\n",
        "test": "assert     colon_tuplex((1,2,3),3,3) == (1,2,3)",
        "num_ids": 2573,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # nl = nums1.length; nr = nums2.length\n    # assert (nl == N and nr == N)\n    \n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    # for i in range(N):\n    #     # print(i, nums1[i], nums2[i])\n    #     max_product = max(nums1[i]*nums2[i], nums1[i]*nums2[i])\n    #     # print(max_product)\n    #     largest_products[i] = max_product\n    \n    # return largest_products\n    \n    # first_pos = 0\n    # for i in range(N):\n    #     if nums1[first_pos] >= nums2[i]:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #     else:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #         continue\n    #     for j in range(first_pos, N):\n    #         if nums1[j] >= nums2[i]:\n    #             continue\n    #         else:\n    #             max_product = max(max_product, nums1[j]*nums2[i])\n    #             first_pos += 1\n    #             break\n    \n    # return largest_products\n    \n    # first_pos = 0\n    # for i in range(N):\n    #     if nums1[first_pos] >= nums2[i]:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #     else:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #         continue\n    #     if i == N-1:\n    #         break\n    #     for j in range(i+1, N):\n    #         if nums1[j] >= nums2[i]:\n    #             continue\n    #         else:\n    #             max_product = max(max_product, nums1[j]*nums2[i])\n    #             break\n    \n    # return largest_products\n    \n    # 2nd version:\n    # Time: O(N^2)\n    # Space: O(N)\n    \n    # max_product = nums1[0]*nums2[0]\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         max_product = max(nums1[i]*nums2[j], max_product)\n    # return max_product\n    \n    # 3rd version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # nl = len(nums1)\n    # nr = len(nums2)\n    # max_product = nums1[0]*nums2[0]\n    # for i in range(nl):\n    #     max_product_curr = nums1[i]*nums2[0]\n    #     for j in range(1, nr):\n    #         max_product_curr = max(max_product_curr, nums1[i]*nums2[j])\n    #         max_product = max(max_product, max_product_curr)\n    # return max_product\n    \n    # 4th version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # nums1.sort()\n    # nums2.sort()\n    # max_product = nums1[0]*nums2[0]\n    # for i in range(1, len(nums1)):\n    #     curr_product = nums1[i]*nums2[0]\n    #     max_product = max(max_product, curr_product)\n    # for i in range(len(nums2)-1):\n    #     curr_product = nums1[0]*nums2[i+1]\n    #     max_product = max(max_product, curr_product)\n    # return max_product\n    \n    # 5th version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # first_pos = 0\n    # for i in range(N):\n    #     if nums1[first_pos] >= nums2[i]:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #     else:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #         continue\n    #     for j in range(first_pos, N):\n    #         if nums1[j] >= nums2[i]:\n    #             continue\n    #         else:\n    #             max_product = max(max_product, nums1[j]*nums2[i])\n    #             first_pos += 1\n    #             break\n    \n    # return max_product\n    \n    # 6th version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # nl = len(nums1)\n    # nr = len(nums2)\n    # max_product = nums1[0]*nums2[0]\n    # for i in range(1, nl):\n    #     max_product_curr = nums1[i]*nums2[0]\n    #     for j in range(1, nr):\n    #         max_product_curr = max(max_product_curr, nums1[i]*nums2[j])\n    #         max_product = max(max_product, max_product_curr)\n    # return max_product\n    \n    # 7th version:\n    # Time: O(N)\n    # Space: O(1)\n    \n    # nums1.sort()\n    # nums2.sort()\n    # nl = len(nums1)\n    # nr = len(nums2)\n    # max_product = nums1[0]*nums2[0]\n    # for i in range(1, nl):\n    #     max_product_curr = nums1[i]*nums2[0]\n    #     for j in range(1, nr):\n    #         max_product_curr = max(max_product_curr, nums1[i]*nums2[j])\n    #         max_product = max(max_product, max_product_curr)\n    # return max_product\n    \n    # 8th version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # max_product = nums1[0]*nums2[0]\n    # for i in range(1, len(nums1)):\n    #     curr_product = nums1[i]*nums2[0]\n    #     max_product = max(max_product, curr_product)\n    # for i in range(len(nums2)-1):\n    #     curr_product = nums1[0]*nums2[i+1]\n    #     max_product = max(max_product, curr_product)\n    # return max_product\n    \n    # 9th version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # nl = len(nums1)\n    # ",
        "test": "assert ",
        "num_ids": 2351,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n",
        "test": "assert     maximum(10, 5) == 10",
        "num_ids": 197,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple(\"a\") == (\"a\",)",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~(n-1)&n\n",
        "test": "assert     set_left_most_unset_bit(3) == 1 ",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #r = float(input('Enter radius of cone: '))\n    #h = float(input('Enter height of cone: '))\n    return math.pi*r**2*h\n",
        "test": "assert volume_cone(3,6) == 20, \"Wrong volume\"",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    MAX = n\n    MIN = 0\n    while (MIN < MAX):\n        # print(\"Min : {0}, Max : {1}\".format(MIN,MAX))\n        if (2 ** MIN <= MAX) :\n            # print(\"Min : {0}, Max : {1}\".format(MIN,MAX))\n            return MIN\n        MIN = MIN + 1\n",
        "test": "assert     highest_Power_of_2(1) == 0",
        "num_ids": 2259,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    assert n>=1 and n<=25\n    if n==1: \n        return 1\n    if n==2: \n        return 1\n    \n    lucas = find_lucas(n-1) + find_lucas(n-2)\n    return lucas\n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for elem in list_:\n        print(string.format(elem))\n",
        "test": "assert     add_string(['a','b','c','d'], \"this is a {0}\") == \"this is a a\"",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {\"First\": l1, \"Second\": l2, \"Third\": l3}\n",
        "test": "assert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"]) == {",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n",
        "test": "assert     get_max_sum(1)     == 1",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    temp_max = 0\n    for i in input_list:\n        if len(i) > temp_max:\n            temp_max = len(i)\n    return temp_max\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert not check_distinct((\"a\", \"a\", \"b\", \"b\")), \"Duplicates are present\"",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n",
        "test": "assert     first_non_repeating_character(\"abcdefg\") == 'a', 'Test 2, failed!'",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    count = 0\n    for char in string:\n        if char == string[0]:\n            count = count + 1\n        elif char == string[len(string)-1]:\n            count = count + 1\n    if count == len(string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('abc1') == False, 'Test Case Fail'",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_nums = sorted((a,b,c))\n    print(sorted_nums)\n    if(sorted_nums[1] == sorted_nums[0]):\n        return float(sorted_nums[0])\n    elif(sorted_nums[1] == sorted_nums[2]):\n        return float(sorted_nums[1])\n    elif(sorted_nums[0] == sorted_nums[2]):\n        return float(sorted_nums[0])\n    else:\n        return float((sorted_nums[1] + sorted_nums[2])/2)\n",
        "test": "assert median_numbers(7,7,7) == 7, 'The median is correct.'",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum = sum + int(i)\n    return sum\n",
        "test": "assert     sum_of_digits([1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n",
        "test": "assert     bitwise_xor((0, 0), (0, 0)) == (0, 0)",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    freq = {}\n    for i in test_list:\n        freq[i] = test_list.count(i)\n    \n    return len(freq)\n",
        "test": "assert     extract_freq([(1,2), (1,2), (2,3), (3,4)]) == 3",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = []\n    tup2 = []\n",
        "test": "assert ",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\nprint(minimum(5,6))\n",
        "test": "assert     minimum(10,20) == 10,'minimum is not correct'",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for val in tuplex:\n        if val == tuple1:\n            return True\n    return False\n",
        "test": "assert     check_tuplex((1,2,3),(2,4,1)) == False, 'Fail'",
        "num_ids": 179,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x&1):\n        return(False)\n    else:\n        return(True)\n",
        "test": "assert     find_Parity(6) == True",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    string_n = str(n)\n    number = int(string_n[::-1])\n    number = list(str(number))\n    number = number[:-1]\n    number = int(''.join(number))\n    return number\n",
        "test": "assert ",
        "num_ids": 871,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # if the number of elements in array 1 is less than or equal to the number of elements in array 2:\n    # then the number of elements in array 2 must be smaller than or equal to the number of elements in array 1\n    if len(nums1) <= len(nums2):\n        heap = []\n        # loop over each element of array 1\n        for i in range(len(nums1)):\n            # push the i-th element of array 2 into the heap\n            heapq.heappush(heap,(nums2[i],nums1[i]))\n            # if the number of elements in heap is larger than or equal to k, then we need to remove the smallest element from the heap\n            if len(heap)>=k:\n                heapq.heappop(heap)\n        # return the k-element smallest pairs\n        return heap\n    # if the number of elements in array 1 is larger than or equal to the number of elements in array 2:\n    # then the number of elements in array 1 must be smaller than or equal to the number of elements in array 2\n    else:\n        heap = []\n        # loop over each element of array 2\n        for i in range(len(nums2)):\n            # push the i-th element of array 1 into the heap\n            heapq.heappush(heap,(nums1[i],nums2[i]))\n            # if the number of elements in heap is larger than or equal to k, then we need to remove the smallest element from the heap\n            if len(heap)>=k:\n                heapq.heappop(heap)\n        # return the k-element smallest pairs\n        return heap\n",
        "test": "assert     k_smallest_pairs([[7,11], [2,4], [3,5], [7,8]], [[1,2], [3,4], [5,6], [7,8], [9,10]], 5) == [[1,2], [3,4], [7,8]]",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    min_val = min(list1,key=lambda x: x[0]*x[1])\n    return min_val\n",
        "test": "assert     min_product_tuple([(1,2),(2,4),(1,2),(2,4),(3,4),(1,2),(3,4)]) == (1,2)",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minvalue = listval[0]\n    for val in listval:\n        if val < minvalue:\n            minvalue = val\n    return minvalue\n",
        "test": "assert     min_val([1,4,10,3,5,6]) == 1,'min_val should return 1'",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return ''\n    comp = word.split('_')\n    new_word = comp[0]\n    for i in range(1, len(comp)):\n        new_word = new_word + ''.join(comp[i].title())\n    return new_word\n",
        "test": "assert     snake_to_camel('snakeCaseString') =='snakeCaseString'",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    odd_list = []\n",
        "test": "assert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Extracting the elements\n    if len(list1) == 0:\n        return -1\n    else:\n        x = list(list1)\n        x.sort()\n        return x[n]\n",
        "test": "assert     extract_nth_element([(1,2), (3,4), (5,6)], 0) == (1,2)",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1,2,4],[1,2,3,4])== True",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return None\n    n = len(arr)\n    arr.sort()\n    prod = arr[n-1]*arr[n-2]\n    curr_max_prod = arr[n-1]*arr[n-2]\n    for i in range(n-3, -1, -1):\n        if arr[i]*arr[i+1] > curr_max_prod:\n            curr_max_prod = arr[i]*arr[i+1]\n            prod = curr_max_prod\n    return prod\n",
        "test": "assert     max_Product([1,2,3])==6",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    res = []\n    for i in range(len(Input)): \n        for j in range(len(Input[i])): \n            if Input[i][j] not in res: \n                res.append(Input[i][j]) \n    print(res)\n",
        "test": "assert     group_tuples([('A', '1'), ('A', '2'), ('B', '2'), ('B', '3'), ('B', '4')]) == None",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst)\n    ",
        "test": "assert     Find_Max([3,3,3,3,3,3,3,3,3,3,3])==3",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total += list1[i]\n    print(total)\n    return total\n",
        "test": "assert     round_and_sum([2.2, 3.3, 5.5]) == 50",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #cube_sum = n*n*n\n    cube_sum = 0\n    for i in range(n):\n        cube_sum = cube_sum + (i*i*i)\n    return(cube_sum)\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(test_tup)\n",
        "test": "assert     concatenate_tuple(('a', 'b', 'c')) == 'a-b-c'",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(reversed(test_tuple))\n",
        "test": "assert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('e', 'd', 'c', 'b', 'a')",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if i == x])\n",
        "test": "assert     count_element_in_list([],5) == 0",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = list(filter(lambda num : num % 2!= 0,nums))\n    return odd_numbers\n",
        "test": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # from datetime import datetime\n    # dt= datetime.strptime('07-06-2019', '%d-%m-%Y').strftime('%d-%m-%Y')\n    date_time = dt.split('-')\n    date_time[0] = int(date_time[0])\n    date_time[1] = int(date_time[1])\n    date_time[2] = int(date_time[2])\n    date = date_time[2] - 2000\n    month = int((date_time[1] - 1) / 3) + 1\n    month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    month_name = month_name[month - 1]\n    day = date_time[0]\n    print(f'{day}-{month_name}-{date_time[2]}')\n",
        "test": "assert     change_date_format(",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    N = len(my_list)\n    gap = N // 2\n    while gap > 0:\n        for i in range(gap, N):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert     shell_sort([]) == [], 'Empty array'",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    ans = (tuple(i and j for i,j in zip(test_tup1, test_tup2)),\n            tuple(i and j for i,j in zip(test_tup1, test_tup2)))\n    return ans\n",
        "test": "assert     and_tuples((1,2,3), (5,6,7)) == (1,5,3)",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(a, b, 1000)\n    y = c * x**2 + a * x + b \n    return x, y \n",
        "test": "assert ",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    count_same = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                count_same += 1\n                if count_same == 2:\n                    return True\n    return False\n",
        "test": "assert     common_element([1],[] )== False",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the half-height and half-width of the trapezium\n    half_height = height / 2\n    half_width = height / 3\n    # Find the length of the trapezium\n    trapezium = base1 + base2\n    # Return the median length of the trapezium\n    return trapezium / 2\n",
        "test": "assert     median_trapezium(10, 10, 10) == 10",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False\n",
        "test": "assert     check_greater([1, 2, 3, 4, 5], 7) == True, 'Result should be True'",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'ab+', text) is not None:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_one('abab') == True",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     last_Digit(1) == 1",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    a = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            a.append(list1[i])\n    return a\n",
        "test": "assert ",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Remove the odd characters\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    \n    return new_str\n    \ndef replace_string(str1, replacement_string):\n    '''\n    Write a function to replace a word with another word in a string.\n    '''\n    # Replace the word\n    new_str = str1.replace(str1, replacement_string)\n    \n    return new_str\n    \ndef remove_long_words(str1, max_length):\n    '''\n    Write a function to remove all words which are longer than a given length in a string.\n    '''\n    # Remove words longer than max_length\n    new_str = \"\"\n    for word in str1.split():\n        if len(word) <= max_length:\n            new_str += word\n        else:\n            pass\n    \n    return new_str\n    \ndef has_numbers(input_string):\n    '''\n    Write a function that will return true if any numbers are in a given string.\n    '''\n    # Check if any numbers are in the string\n    for char in input_string:\n        if char.isdigit():\n            return True\n    return False\n    \ndef to_lower(input_string):\n    '''\n    Write a function that will return the string converted to lower case.\n    '''\n    # Convert to lower case\n    return input_string.lower()\n    \ndef text_to_sentences(input_string):\n    '''\n    Write a function that will return a list of sentences from a given text.\n    '''\n    # Split the string into sentences\n    return input_string.split(\".\")\n    \ndef sentence_to_words(sentence):\n    '''\n    Write a function that will return a list of words from a sentence.\n    '''\n    # Split the sentence into words\n    return sentence.split()\n    \ndef remove_punctuations(sentence):\n    '''\n    Write a function that will remove all punctuations from a given sentence.\n    '''\n    # Remove punctuations\n    new_str = \"\"\n    for char in sentence:\n        if char.isalpha():\n            new_str += char\n    \n    return new_str\n    \ndef word_to_sentence(word):\n    '''\n    Write a function that will return the sentence that starts with a word.\n    '''\n    # Split the word\n    word_list = word.split()\n    sentence_list = []\n    \n    for i in range(0, len(word_list)):\n        if i == 0:\n            sentence_list.append(word_list[i])\n        elif i == len(word_list) - 1:\n            sentence_list.append(word_list[i])\n        else:\n            sentence_list.append(word_list[i])\n    \n    sentence = \" \".join(sentence_list)\n    \n    return sentence\n    \ndef get_index(list1, item):\n    '''\n    Write a function that will return the index position of a given item in a list.\n    '''\n    for i in range(0, len(list1)):\n        if list1[i] == item:\n            return i\n    \n    return -1\n    \ndef get_minimum(list1):\n    '''\n    Write a function that will return the minimum number from a list.\n    '''\n    # Get the minimum\n    minimum = list1[0]\n    for item in list1:\n        if item < minimum:\n            minimum = item\n    \n    return minimum\n    \ndef get_maximum(list1):\n    '''\n    Write a function that will return the maximum number from a list.\n    '''\n    # Get the maximum\n    maximum = list1[0]\n    for item in list1:\n        if item > maximum:\n            maximum = item\n    \n    return maximum\n    \ndef get_average(list1):\n    '''\n    Write a function that will return the average of a list.\n    '''\n    # Get the average\n    total = 0\n    for item in list1:\n        total += item\n    \n    return total / len(list1)\n    \ndef is_palindrome(input_string):\n    '''\n    Write a function that will return True if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    for i in range(0, len(input_string) // 2):\n        if input_string[i]!= input_string[len(input_string) - i - 1]:\n            return False\n    \n    return True\n    \ndef replace_spaces(input_string):\n    '''\n    Write a function that will return a string without any spaces.\n    '''\n    # Replace spaces\n    new_str = \"\"\n    for char in input_string:\n        if char!= \" \":\n            new_str += char\n    \n    return new_str\n    \ndef get_total_words(input_string):\n    '''\n    Write a function that will return the number of words in a given string.\n    '''\n    # Get the total words\n    return len(input_string.split())\n    \ndef sort_alpha_numeric(input_string):\n    '''\n    Write a function that will return a sorted list of words.\n    '''\n    # Sort alphabetic and numericals\n    alphanumeric = input_string.split()\n    sorted_list = sorted(alphanumeric)\n    sorted_list_num = []\n    \n    for i in range(0, len(sorted_list)):\n        for word in sorted_list:\n            if word.isalpha() or word.isdigit():\n                sorted_list_num.append(word)\n    \n    return sorted_list_num\n    \ndef get_first_occurrence(input_string, character):\n    '''\n    Write a function that will return the index position of the first occurance of a character in a given string.\n    '''\n    # Get the index of the character\n    index = input_string.find(character)\n    \n    while index!= -1:\n        # Check if the character is not the last character\n        if index + 1!= len(input_string):\n            # Get the index of the next character\n            index = input_string.find(character, index + 1)\n        else:\n            break\n    \n    return index\n    \ndef is_prime(input_number):\n    '''\n    Write a function that will return True if a given number is prime.\n    '''\n    # Check if the number is not divisible by any other number\n    if input_number > 1:\n        for i in range(2, input_number):\n            if input_number % i == 0:\n                return False\n        return True\n    return False\n    \ndef factorial(input_number):\n    '''\n    Write a function that will return the factorial of a given number.\n    '''\n    # Compute the factorial\n    result = 1\n    while input_number > 1:\n        result = result * input_number\n        input_number -= 1\n    \n    return result\n    \ndef reverse_str(input_string):\n    '''\n    Write a function that will return the string with all characters reversed.\n    '''\n    # Reverse the string\n    new_str = \"\"\n    for char in input_string:\n        new_str = char + new_str\n    \n    return new_str\n    \ndef sum_of_square_numbers(number):\n    '''\n    Write a function that will return the sum of all the squares of a given number.\n    '''\n    # Compute the sum\n    sum = 0\n    for i in range(1, number):\n        sum += i * i\n    \n    return sum\n    \ndef get_sum_of_numbers(list1):\n    '''\n    Write a function that will return the sum of all the elements in a list.\n    '''\n    # Get the sum\n    total = 0\n    for item in list1:\n        total += item\n    \n    return total\n    \ndef max_number(list1):\n    '''\n    Write a function that will return the maximum number from a list.\n    '''\n    # Get the maximum\n    maximum = list1[0]\n    for item in list1:\n        if item > maximum:\n            maximum = item",
        "test": "assert     remove_odd('Hi') == 'Hi'",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) == 0:\n        return 0\n    bid_pairs = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bid_pairs += 1\n    return bid_pairs\n",
        "test": "assert count_bidirectional([(1,2), (3,4), (5,6), (7,8)]) == 0, 'incorrect'",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(map(int, L))\n    \n    return sum(L)\n",
        "test": "assert multiple_to_single([]) == 0",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'(?<=\\s)[A-Z].+[\\s][ADV]'\n    adverb_search = re.findall(adverb_pattern,text)\n    if len(adverb_search)!= 0:\n        return adverb_search\n    else:\n        return None\n",
        "test": "assert     find_adverb_position('The quick brown fox jumps over the lazy dog.') == (",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*6\n",
        "test": "assert ",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) < 1:\n        return None\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        for i in range(len(list1) - 1):\n            if list1[i] < 0:\n                if list1[i + 1] > 0:\n                    return list1[i + 1]\n        return list1[len(list1) - 1]\n",
        "test": "assert largest_neg([0,-1,-2,-3,-4,-5,-6,-7,-8,-9,0]) == 0",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    list_to_return = []\n    for tuple in test_list:\n        if len(tuple) <= K:\n            list_to_return.append(tuple)\n        else:\n            list_to_return.append(tuple[:K])\n    return list_to_return\n",
        "test": "assert ",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    final_tup = (0,0,0,0)\n    for i in range(len(test_tup1)):\n        final_tup = final_tup + (test_tup1[i]*test_tup2[i],)\n    return final_tup\n",
        "test": "assert     index_multiplication(test_tup1, test_tup2) == (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2], test_tup1[3]*test_tup2[3], test_tup1[4]*test_tup2[4], test_tup1[5]*test_tup2[5])",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_occ = 0\n    for item in lst:\n        if item in tup:\n            count_occ += 1\n    return count_occ\n",
        "test": "assert     count_Occurrence((\"goodbye\",), [\"h\", \"o\", \"d\", \"w\", \"e\", \"r\", \"l\"]) == 0",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for i in nums:\n        cube_list.append(i**3)\n    return cube_list\n",
        "test": "assert cube_nums([0, 1, 2, 3, 4, 5]) == [0, 1, 8, 27, 64, 125]",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return int(n) * (int(n)+1)/2\n",
        "test": "assert     cal_sum(0) == 0",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(l):\n        result.append(str[i])\n    return result\n",
        "test": "assert     extract_string(['a','b','c','d','e'], 2) == ['a','b']",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "test": "assert     remove_whitespaces(\"     whitespaces     \") == \"whitespaces\"",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount \n",
        "test": "assert     loss_amount(10,10) == 0",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if(i == n):\n            break\n        if(i % 2 == 0 and n % i == 0):\n            sum = sum + i\n    return sum\n",
        "test": "assert sumofFactors(3) == 0",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    match = re.findall('z', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz('all')     ==     False",
        "num_ids": 217,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(30) == False",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    print(stringlist[::-1])\n    return stringlist[::-1]\n",
        "test": "assert     reverse_string_list([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"], \"Should be ['c', 'b', 'a']\"",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    if length == 0:\n        return None\n    min_len = len(lst[0])\n    min_lst = []\n    for i in range(length):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst\n",
        "test": "assert     Find_Min([1,2,3,4]) == Find_Min([1,2,3,4]) == 2",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert     rectangle_area(4,2) == 8",
        "num_ids": 145,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase(\"HELLO WORLD\") == \"hello world\", \"incorrect\"",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0])\n    return res\n    \n",
        "test": "assert     Extract([[1,2,3],[4,5,6],[7,8,9],[0]]) == [1,4,7,0]",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n",
        "test": "assert     upper_ctr('HELLO') == 5",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Input must be a list')\n    else:\n        if len(list1) < 1:\n            return []\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Write your code here\n    if not arr:\n        return 0\n    max_product = arr[0]\n    max_product_arr = [max_product]\n    for i in range(1, len(arr)):\n        if max_product < 0:\n            max_product = arr[i]\n        else:\n            max_product *= arr[i]\n        max_product_arr.append(max_product)\n    print(max_product_arr)\n    return max(max_product_arr)\n",
        "test": "assert     max_subarray_product([2,3,-2,4]) == 6",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values()))==1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_value({1:2,2:3,3:4,4:5}, 5) == False, \"Five numbers should be same\"",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    final_dict = {}\n    for key, value in dict1.items():\n        if value!= {}:\n            final_dict[key] = value\n    return final_dict\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return None\n    \n    curr_max, curr_min = arr[0], arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max, curr_min = max(arr[i], curr_max * arr[i], curr_min * arr[i]), min(arr[i], curr_max * arr[i], curr_min * arr[i])\n        max_product = max(curr_max, max_product)\n        \n    return max_product\n    \n",
        "test": "assert     max_product([-2,0,-1]) == 0",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add_tup = []\n    for i in range(0,len(test_tup)-1):\n        add_tup.append(test_tup[i] + test_tup[i+1])\n    return add_tup\n",
        "test": "assert     add_pairwise((3, 4, 5, 6)) == (3, 5, 4, 7)",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    product %= n\n    return product\n",
        "test": "assert     find_remainder([1,1,1,1], 10) == 1, 'Wrong output'",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # code here\n    if len(l) > 1:\n        for i in range(len(l)-1):\n            if l[i] + 1!= l[i+1]:\n                return False\n        return True\n    return False\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    inter = []\n    for item in test_list1:\n        if item in test_list2 and item not in inter:\n            inter.append(item)\n    return tuple(inter)\n",
        "test": "assert     tuple_intersection((1, 2, 3), (2, 3, 4))     == (2, 3)",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert replace_char('hello world', 'h', 'a') == 'aello world'",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n",
        "test": "assert     sort_counter({1: 5, 2: 3, 4: 2, 3: 4, 5: 1}) == \\",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #nums = [int(n) for n in input().split(' ')]\n    #largest = -1\n    #smallest = -1\n    #for n in nums:\n        #if n < largest:\n            #largest = n\n        #if n > smallest:\n            #smallest = n\n    #print(largest + smallest)\n    #https://www.codewars.com/kata/529f3d5c6e2d4f5e9000006d/train/python\n    return max(nums) + min(nums)\n",
        "test": "assert big_sum([4,5,6,7,8]) == 12, \"the sum is incorrect\"",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower(\"Hello\") == \"hello\"",
        "num_ids": 205,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(' ','')\n    \n",
        "test": "assert     remove_lowercase(\"test\") == \"test\"",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n//10!= 0 :\n        n //= 10\n    return n\n",
        "test": "assert     first_Digit(13) == 1",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube(x) :\n        return x**3\n    sum_of_first_n_numbers = sum(list(map(cube, range(1,n+1))))\n    sum_of_first_n_numbers_in_squares = sum(list(map(cube, range(1,n+1))))\n    return sum_of_first_n_numbers - sum_of_first_n_numbers_in_squares\n",
        "test": "assert     difference(0) == 0",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1:\n                count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair([1, 2, 3], 3) == True",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1, d2 = n1, n2\n    dsum = 0\n    while d1 > 0:\n        dsum += abs(d1 - d2)\n        d1, d2 = d1 // 10, d2 // 10\n    return dsum\n",
        "test": "assert     digit_distance_nums(1, 1) == 0, \"Expected: 0\"",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size == 0:\n        return\n    \n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    for i in range(1, size):\n        curr_sum = max(curr_sum + a[i], a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum\n",
        "test": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for i in range(len(test_tup1)):\n        union.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        if test_tup2[i] not in union:\n            union.append(test_tup2[i])\n    union.sort()\n    return union\n",
        "test": "assert ",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l=len(lst)\n    s = 0\n    count = 0\n    for i in range(l):\n        if lst[i] == 1:\n            count = count + 1\n        else:\n            count = 0\n        if count > s:\n            s = count\n        \n    return s\n",
        "test": "assert     Find_Max_Length([[]])==0",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.strip()\n    if text.startswith('\\\"') and text.endswith('\\\"'):\n        return text[1:-1].strip()\n    else:\n        raise Exception\n",
        "test": "assert     extract_values('\"This is a test\"') == \"This is a test\", 'Wrong return value'",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    arr.sort()\n    for i in range(n-1):\n        if (arr[i] == arr[i+1]):\n            count+=1\n    return count\n",
        "test": "assert     count_Pairs([1, 2, 3, 4],4) == 0",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == ['h','e','l','l','o']",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while(n):\n        s += n%10\n        n = n//10\n    return s\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #Finding out the length of the list\n    length = len(list1)\n    \n    #Initializing a variable for increasing and decreasing index values\n    decreasing_index = 0\n    increasing_index = length - 1\n    \n    #Looping through the entire list\n    while decreasing_index <= increasing_index:\n        \n        #Increasing index and decreasing index\n        decreasing_index = decreasing_index + 1\n        increasing_index = increasing_index - 1\n        \n        #Cheking whether the elements are same\n        if list1[decreasing_index]!= list1[increasing_index]:\n            return False\n    \n    #Returning True if the list is sorted\n    return True\n    \n    \n    \nlist1 = [5, 4, 3, 2, 1]\nprint(issort_list(list1))\n",
        "test": "assert     issort_list([]) == True",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    return [{} for _ in range(length)]\n    \n    \n    \n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: (sorted(x, key=lambda y: (sorted(y), y))))\n",
        "test": "assert     sort_sublists([['a','b','c'],['d']]) == [['a','b','c'],['d']]",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [x for x in nums if not (x in seen or seen_add(x))]\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_lst = list(set(list_data))\n    product = 1\n    for i in unique_lst:\n        product = product * i\n    return product\n",
        "test": "assert     unique_product([1, 2, 3, 4, 5]) == 120, 'Test 1 Failed'",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    s=math.pi*math.pow(r,2)*h\n    print(s)\n",
        "test": "assert     surfacearea_cylinder(5,3) == 10, \"Error: surfacearea_cylinder\"",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if i in range(len(B)):\n            if A[i] == B[i]:\n                continue\n            else:\n                return False\n    return True\n",
        "test": "assert is_Sub_Array([1,2,3,4], [3,2,4]) == False",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n<10):\n        return 1\n    else:\n        res = 1\n        while (n > 9):\n            res = res * 10\n            n = n // 10\n        res = res * (n % 10)\n        return int(res)\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n",
        "test": "assert list(interleave_lists([1,2,3],[4,5,6],[7,8,9]))==[1,4,7,2,5,8,3,6,9]",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Empty tuples\n    if test_tup1 == tuple() and test_tup2 == tuple():\n        return (0,0)\n    # Not empty tuples\n    # Let us first check if they are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return (0,0)\n    # Both tuples have the same length, we will consider the pair-wise comparison of the tuples\n    # We will use a sliding window of length 2\n    for i in range(len(test_tup1)-1):\n        # We will create a 2d array of tuples with the given length. We will then compare the elements from the\n        # pairs of tuples, and find the disimilar elements by checking the difference of the elements.\n        test_tup1_sliding_window = [[test_tup1[j], test_tup1[j+1]] for j in range(i, i+2)]\n        test_tup2_sliding_window = [[test_tup2[j], test_tup2[j+1]] for j in range(i, i+2)]\n        # We will compare the elements from the pairs of tuples, and find the disimilar elements by checking the\n        # difference of the elements.\n        if test_tup1_sliding_window!= test_tup2_sliding_window:\n            return (i, i+1)\n    # If no disimilar elements are found, return 0,0\n    return (0,0)\n",
        "test": "assert     find_dissimilar(('apple', 'banana'), ('apple', 'apple')) == ('apple', 'banana')",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for item in test_tuple: \n        if even_fnc(item) == True: \n            new_tuple += (item, )\n    return new_tuple \n    ",
        "test": "assert even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 1) == (1, 3, 5)",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of ",
        "test": "assert ",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    my_dict = {}\n    if my_dict:\n        print(\"The dictionary is not empty\")\n    else:\n        print(\"The dictionary is empty\")\n",
        "test": "assert ",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    \n    #If we don't have to calculate the solution, we can do it in a loop\n    result = 0\n    for i in range(1, num):\n        result += (catalan_number(i-1) * catalan_number(num-i))\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #returns a list of strings in order of appearance\n    adverb_list = []\n    for item in re.finditer(r\"ly\", text):\n        if item.end() == 2:\n            adverb_list.append(text[item.start()-2:item.end()-1])\n",
        "test": "assert     find_adverbs('') == None, 'no adverbs in the string'",
        "num_ids": 2903,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a list of tuples (item, price)\n    items = [(item, price) for item, price in items]\n    heapq.heapify(items) # create a heap out of items\n    # print(heap)\n    # create a list of tuples (item, price)\n    expensive_items = []\n    for _ in range(n):\n        expensive_items.append(heapq.heappop(items)) # pop the item with the lowest price\n    return expensive_items\n",
        "test": "assert     expensive_items([[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"],[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]],3) == [\"D\",\"A\",\"F\"]",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n",
        "test": "assert ",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\nprint(list_tuple([1,2,3]))\n",
        "test": "assert     list_tuple([1, 2, 3]) == (1, 2, 3), 'incorrect'",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        if nums[i] < min_val:\n            min_val = nums[i]\n",
        "test": "assert     big_diff([-6, 4, -8, -6, -5, -5, -1, -2, -2, -3, -2]) == 3",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    count = 0\n    while a <= b:\n        if a**2 == a:\n            count += 1\n        a += 1\n    return count\n",
        "test": "assert     perfect_squares(1, 1) == 1",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=complex(x,y)\n    radius=abs(r)\n    angle=cmath.phase(r)\n    if radius>=0:\n        x_rect=radius*cmath.cos(angle)\n        y_rect=radius*cmath.sin(angle)\n        return x_rect,y_rect\n    else:\n        return -1,-1\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y=polar_rect(x,y)\n    return x,y\ndef rect_polar_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=complex(x,y)\n    radius=abs(r)\n    angle=cmath.phase(r)\n    return radius,angle\n",
        "test": "assert     polar_rect(0, 0) == (0, 0)",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = a\n    print(newList)\n",
        "test": "assert swap_List([2,3,5,6,7,8]) == None",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    import math as m\n    return (int(m.factorial(n))/(int(m.factorial(k))*int(m.factorial(n-k))))\n",
        "test": "assert     binomial_Coeff(3,2) == 3",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip[3] = re.sub('0+', '', ip[3])\n    return '.'.join(ip)\n",
        "test": "assert     removezero_ip('255.255.255.256') == '255.255.255.256'",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = -1\n    odd_index = -1\n    for i,val in enumerate(list1):\n        if val % 2 == 0:\n            even_index = i\n        else:\n            odd_index = i\n    if even_index == -1:\n        return -1\n    return abs(list1[even_index]-list1[odd_index])\n",
        "test": "assert     diff_even_odd([-10,-9,-8,-7,-6,7,8,9,10]) == 1",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!=str2[i]:\n            count += 1\n            str1 = list(str1)\n            str2 = list(str2)\n            \n            str1[i],str2[i] = str2[i],str1[i]\n            str1 = \"\".join(str1)\n            str2 = \"\".join(str2)\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     min_Swaps('101','101') == 0, 'Wrong'",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for val in tuple_list:\n        size += sys.getsizeof(val)\n",
        "test": "assert     tuple_size((1,2,3)) == 3",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_sz = len(arr1)\n    arr2_sz = len(arr2)\n    if arr1_sz == 0:\n        return arr2[k-1]\n    elif arr2_sz == 0:\n        return arr1[k-1]\n    else:\n        if k == 1:\n            return min(arr1[0],arr2[0])\n        elif k > 1:\n            if arr1_sz >= k and arr2_sz >= k:\n                return find_kth(arr1[1:], arr2, k-1)\n            else:\n                return find_kth(arr1, arr2[1:], k-1)\n",
        "test": "assert     find_kth([1, 2, 3, 4], [2, 4, 6, 8, 10], 5) == 4",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    list_1 = list(str(number))\n    sum_1 = 0\n    for i in range(len(list_1)):\n        sum_1 += int(list_1[i])**len(list_1)\n    if sum_1 == number:\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(10) == False, \"armstrong_number(10) should be False\"",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0, number):\n        sum = sum + i\n    avg = sum / number\n    return sum, avg\n",
        "test": "assert ",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_Even(4) == True",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    chars = {}\n    for i in range(len(str1)):\n        if str1[i] in chars:\n            chars[str1[i]] += 1\n        else:\n            chars[str1[i]] = 1\n    for j in range(len(str1)):\n        if chars[str1[j]] > 1:\n            return str1[j]\n    return -1\n",
        "test": "assert     first_repeated_char('strawberry') == 'r', 'This should return r.'",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if all((i % x == 0) for x in range(2, i)):\n            lucid.append(i)\n    return lucid\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word_list = s.split()\n    word_list.reverse()\n    return \" \".join(word_list)\n",
        "test": "assert     reverse_words(\"I am leetcode\") == \"leetcode am I\"",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(3) == True, \"The result should be True\"",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert     radian_degree(90) == math.pi/2",
        "num_ids": 119,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_re = re.compile(pattern)\n    match = pattern_re.search(text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, None, None\n",
        "test": "assert     find_literals('', 'a') == (None, None, None)",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 1: \n        return 1\n    else: \n        return (n * (n + 1)) // 2\n    \nprint(bell_Number(5)) \nprint(bell_Number(6)) \nprint(bell_Number(10)) \nprint(bell_Number(100))\n",
        "test": "assert     bell_Number(0) == 1",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4, 5, 6], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max_so_far = -math.inf\n    for n in range(len(test_list)):\n        if test_list[n][N] > max_so_far:\n            max_so_far = test_list[n][N]\n    return max_so_far\n",
        "test": "assert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 8",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    return lst\n",
        "test": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]], 'Wrong'",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for value in test_list:\n        cummulative_sum += value\n    return cummulative_sum\n",
        "test": "assert     cummulative_sum((1,2,3)) == 6",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for t in nums:\n        total = 0\n        for i in range(0, len(t)):\n            total += t[i]\n        average_list.append(total / len(t))\n    return average_list\n    \ndef average_list(nums):\n    '''\n    Write a function which takes a list of numbers and returns the average value for the list as a list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total / len(nums)\n",
        "test": "assert     average_tuple([[1,2,3], [1,2,3], [1,2,3]]) == [2.0, 2.0, 2.0]",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(int(i % j) for i, j in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((2,4),(2,4)) == (0,0)",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #Table is created by adding '0' to the table and then subtracting by 1 in each row\n    #d - the steps\n    #0 - the row number\n    #1 - the column number\n    #2 - the number of jumps\n    table = [[0 for i in range(3)] for j in range(d)]\n    \n    #The number of jumps from (0, 0) to (0, d - 1) is 0\n    table[0][0] = 0\n    \n    #The number of jumps from (d - 1, 0) to (d - 1, d - 1) is 1\n    table[d - 1][0] = 1\n    \n    #To find the number of jumps from (0, 0) to (1, 0), the number of jumps is -1\n    for i in range(1, d): \n        table[0][i] = -1\n        \n    #To find the number of jumps from (d - 1, 0) to (d - 1, d - 1), the number of jumps is 1\n    for i in range(1, d): \n        table[i][0] = 1\n        \n    #To find the number of jumps from (1, 1) to (d - 1, d - 1), the number of jumps is 2\n    for i in range(1, d): \n        table[1][i] = 2\n    \n    #To find the number of jumps from (1, 1) to (d - 1, d - 1), the number of jumps is 3\n    for i in range(1, d): \n        table[i][1] = 3\n        \n    #If the table is solved then return the number of jumps\n    if(table[d-1][d-1]!= -1):\n        return table[d-1][d-1]\n    \n    #Recursion is needed to solve the table\n    else:\n        \n        #If the value of d is not greater than 0 and the value of d is also less than d, then the number of jumps is 0\n        if(d > 0 and d <= d):\n            return 0\n        \n        #If the value of d is greater than 0 and the value of d is also greater than d, then the number of jumps is 1\n        elif(d > 0 and d > d):\n            return 1\n        \n        #If the value of d is greater than 0 and the value of d is also greater than d and is greater than d - 1, then the number of jumps is 2\n        elif(d > 0 and d > d and d > d - 1):\n            return 2\n        \n        #If the value of d is greater than 0 and the value of d is also greater than d and is also greater than d - 1, then the number of jumps is 3\n        elif(d > 0 and d > d and d > d - 1):\n            return 3\n        \n        #Else the number of jumps is -1\n        else:\n            return -1\n",
        "test": "assert     min_Jumps(2, 1) == 1",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i = 0\n    list1 = []\n    list2 = []\n    while i<len(nums1):\n        list1.append(nums1[i])\n        list2.append(nums2[i])\n        i+=1\n    i = 0\n    while i<len(nums1):\n        list1[i]= list1[i]/list2[i]\n        i+=1\n    return list1\n",
        "test": "assert ",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = test_str\n    for i in range(0, len(s)):\n        if s[i].isdigit():\n            count = i\n            while s[count].isdigit():\n                count += 1\n            s = s[0:i] + s[count:] + s[i:count]\n    print(s)\n    return s\n",
        "test": "assert (move_num('3456') == '3456')",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n",
        "test": "assert     largest_subset([1,2,3,4,5]) == 6",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    temp = []\n    if len(arr1) > len(arr2):\n        temp = arr2\n        arr2 = arr1\n        arr1 = temp\n    for i in range(len(arr1)):\n        temp.append(arr1[i])\n        temp.append(arr2[i])\n    temp.sort()\n    return temp[int(len(arr1)+len(arr2)/2)]\n",
        "test": "assert     get_median([1, 2, 3], [5, 6, 7], 3) == 2.5",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n",
        "test": "assert [1,2,3,4] == nth_nums([1,2,3,4],1)",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper('Testing')",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)==1:\n        print(\"Invalid Input\")\n    else:\n        newList[0],newList[-1]=newList[-1],newList[0]\n        return newList\n    \ndef quick_Sort(newList): \n    '''\n    Write a python function to sort a list in ascending order using the quick sort algorithm.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        pivot=newList[0]\n        less=[]\n        pivots=[]\n        greater=[]\n        for i in range(len(newList)):\n            if newList[i]<pivot:\n                less.append(newList[i])\n            elif newList[i]>pivot:\n                greater.append(newList[i])\n            else:\n                pivots.append(newList[i])\n        return quick_Sort(less)+pivots+quick_Sort(greater)\n    \ndef inversion_count(newList): \n    '''\n    Write a python function to count the number of inversions in a given list.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        pivot=newList[0]\n        less=[]\n        pivots=[]\n        greater=[]\n        for i in range(len(newList)):\n            if newList[i]<pivot:\n                less.append(newList[i])\n            elif newList[i]>pivot:\n                greater.append(newList[i])\n            else:\n                pivots.append(newList[i])\n        total_count=0\n        inversion_count(less)+inversion_count(greater)+total_count\n        return inversion_count(less)+inversion_count(greater)+total_count\n    \ndef palindrome_check(newList): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        newList=newList.replace(\" \",\"\")\n        newList=newList.lower()\n        l=0\n        r=len(newList)-1\n        while l<r:\n            if newList[l]!=newList[r]:\n                return False\n            else:\n                l+=1\n                r-=1\n        return True\n    \ndef two_sum(newList): \n    '''\n    Write a python function to find all unique pairs in a list which sum to a given value.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        newList=newList.replace(\" \",\"\")\n        newList=newList.lower()\n        newList=newList.split()\n        newList=set(newList)\n        newList=list(newList)\n        for i in range(len(newList)):\n            for j in range(len(newList)):\n                if int(newList[i])+int(newList[j])==int(newList[i])*2:\n                    print(\"The pair\",int(newList[i]),int(newList[j]))\n    \ndef unique_char(newList): \n    '''\n    Write a python function to find the number of unique characters in a given string.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        newList=newList.replace(\" \",\"\")\n        newList=newList.lower()\n        newList=newList.split()\n        newList=set(newList)\n        newList=list(newList)\n        return len(newList)\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1], \"Second\"",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    # Base case: when the radius is 0.5\n    if r == 0.5:\n        return 1/2\n    # Recursive case:\n    else:\n        return 0.5*math.sqrt(r*(r-0.5)*(r+0.5))\n",
        "test": "assert     triangle_area(10) == 28.0, 'Wrong output!'",
        "num_ids": 2330,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return end+1\n",
        "test": "assert     find_First_Missing([1, 2, 4]) == 3, \"Wrong\"",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n",
        "test": "assert     replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            l.append(list[i])\n    return l\n",
        "test": "assert     Split([]) ==    []",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n",
        "test": "assert ",
        "num_ids": 2299,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "test": "assert     replace_spaces('spam eggs') =='spam_eggs'",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # new_list = []\n    # for i in range(len(num_list)):\n    #     if num_list[i]!= 0:\n    #         new_list.append(num_list[i])\n    #         new_list.append(0)\n    # return new_list\n    if len(num_list) == 0:\n        return []\n    if num_list[0] == 0:\n        num_list.remove(0)\n        num_list.append(0)\n    for i in range(len(num_list)-1):\n        if num_list[i] == 0 and num_list[i+1]!= 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n",
        "test": "assert     move_zero([2, 3, 4, 0, 1, 0, 0]) ==     [2, 3, 4, 1, 0, 0, 0]",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ (arr[i] + arr[j])\n    return sum\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5,6], 6) == 1, \"Error\"",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    hq.heapify(iterable)\n    output = []\n    while iterable:\n        output.append(iterable.pop(0))\n    return output\n",
        "test": "assert ",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(1,1) == True",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = (v**0.16)*(math.exp((0.6215 * t)-(11.37 * math.pow((v**0.16), 2)))/2)\n    return(v)\n",
        "test": "assert ",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if isinstance(sample_names,list):\n        for i in sample_names:\n            if isinstance(i,str):\n                if i[0].islower():\n                    sample_names.remove(i)\n        return sum(len(i) for i in sample_names)\n",
        "test": "assert     sample_nam([]) == 0",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = re.split(\"\\(|\\)|\\[|\\]|\\{|\\}\",items)\n    return result[1]\n",
        "test": "assert     remove_parenthesis('(Totally normal)') == 'Totally normal'",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n*(n+1)/2)\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('^z(.+?)z$',text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle(\"Je\u015bli mam poda\u0107 pomagaj\u0105co, wi\u0119cej s\u0142\u00f3w\") == False, \"Test 2 Failed\"",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    count = 0\n    for i in range(len(input)):\n        if input[i] == k:\n            break\n        count += 1\n    return input[:count][::-1]\n",
        "test": "assert     reverse_Array_Upto_K([], 1) == []",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return(tuple(test_tup) + (test_dict,))\n",
        "test": "assert     add_dict_to_tuple(('1', '2', '3'), {}) == ('1', '2', '3', {})",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    from math import ceil\n    from itertools import chain, combinations\n    from collections import Counter\n    \n    # This is the input matrix\n    mat = cost\n    m, n = len(mat), len(mat[0])\n    if m <= 0 or n <= 0:\n        return\n    \n    # This array will contain the total cost\n    # of all paths ending with each cell.\n    path_cost = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # For each cell, find the cost of paths ending in\n    # that cell.\n    for i in range(m):\n        for j in range(n):\n            path_cost[i][j] = sum([mat[i][k] + mat[k][j] for k in range(n) if i!= k!= j])\n    \n    # This array will contain the min cost of paths ending\n    # in each cell.\n    min_cost = [[float(\"inf\") for _ in range(n)] for _ in range(m)]\n    \n    # Find the minimum cost of each path ending in each cell.\n    # (i.e., paths ending in cell i and cell j will have\n    # cost min(min_cost[i][j], path_cost[i][j]).\n    for i in range(m):\n        for j in range(n):\n            if min_cost[i][j] == float(\"inf\"):\n                min_cost[i][j] = path_cost[i][j]\n            else:\n                min_cost[i][j] = min(min_cost[i][j], path_cost[i][j])\n    \n    # This array will contain the average cost of each cell.\n    avg_cost = [[float(\"inf\") for _ in range(n)] for _ in range(m)]\n    \n    # Find the average cost of each cell. (i.e., cell i and cell j\n    # will have cost average(avg_cost[i][j], min_cost[i][j] + path_cost[i][j]).\n    for i in range(m):\n        for j in range(n):\n            if avg_cost[i][j] == float(\"inf\"):\n                avg_cost[i][j] = path_cost[i][j]\n            else:\n                avg_cost[i][j] = ceil((avg_cost[i][j] + min_cost[i][j]) / 2)\n    \n    # This array will contain the maximum average of each cell.\n    max_avg = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Find the maximum average of each cell. (i.e., cell i and cell j\n    # will have cost max(max_avg[i][j], avg_cost[i][j]).\n    for i in range(m):\n        for j in range(n):\n            if max_avg[i][j] == 0:\n                max_avg[i][j] = avg_cost[i][j]\n            else:\n                max_avg[i][j] = max(max_avg[i][j], avg_cost[i][j])\n    \n    # Find the maximum average path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_avg[i][j], avg_cost[i][j] + min_cost[i][j]).\n    max_avg_path = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if max_avg_path[i][j] == 0:\n                max_avg_path[i][j] = max_avg[i][j]\n            else:\n                max_avg_path[i][j] = max(max_avg_path[i][j], max_avg[i][j])\n    \n    # This array will contain the maximum average path ending\n    # in each cell.\n    max_avg_path_avg = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Find the maximum average path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_avg_path_avg[i][j], avg_cost[i][j] + min_cost[i][j]).\n    for i in range(m):\n        for j in range(n):\n            if max_avg_path_avg[i][j] == 0:\n                max_avg_path_avg[i][j] = max_avg_path[i][j]\n            else:\n                max_avg_path_avg[i][j] = max(max_avg_path_avg[i][j], max_avg_path[i][j])\n    \n    # This array will contain the maximum path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_path_avg[i][j], path_cost[i][j]).\n    max_path_avg = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if max_path_avg[i][j] == 0:\n                max_path_avg[i][j] = path_cost[i][j]\n            else:\n                max_path_avg[i][j] = max(max_path_avg[i][j], path_cost[i][j])\n    \n    # This array will contain the maximum path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_path_avg[i][j], path_cost[i][j] + min_cost[i][j]).\n    max_path_avg_min = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if max_path_avg_min[i][j] == 0:\n                max_path_avg_min[i][j] = max_path_avg[i][j]\n            else:\n                max_path_avg_min[i][j] = max(max_path_avg_min[i][j], max_path_avg[i][j])\n    \n    # This array will contain the maximum path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_path_avg_min[i][j], path_cost[i][j] + min_cost[i][j]).\n    max_path_avg_min_min = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if max_path_avg_min_min[i][j] == 0:\n                max_path_avg_min_min[i][j] = max_path_avg_min[i][j]\n            else:\n                max_path_avg_min_min[i][j] = max(max_path_avg_min_min[i][j], max_path_avg_min[i][j])\n    \n    # This array will contain the maximum path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_path_avg_min_min[i][j], path_cost[i][j] + min_cost[i][j]).\n    max_path_avg_min_min_min = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if max_path_avg_min_min_min[i][j] == 0:\n                max_path_avg_min_min_mi",
        "test": "assert ",
        "num_ids": 6387,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = {'Bieo':(1.75,100),\n                'Dill':(1.89,100),\n                'Max':(1.9,100),\n                'Ayta':(1.8,100),\n                'Adal':(1.92,100),\n                'Alexa':(1.8,100),\n                'Cheyenne':(1.9,100),\n                'Hefsia':(1.9,100),\n                'Leila':(1.9,100),\n                'Terrance':(1.8,100),\n                'Zorica':(1.9,100)}\n",
        "test": "assert     filter_data(students,1.5,50.0) == {'Ania':(1.71,54.0), 'Nicole':(1.71,55.0)}",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i,j in zip(nums1,nums2):\n        if i == j:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,2,3,4,5,6], [1,2,3,4,5,6]) == 6",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert (power >= 1), \"Power must be a positive integer.\"\n    base = int(base)\n    power = int(power)\n    result = 0\n    while power > 0:\n        result = result + base\n        base = base * 10\n        power = power - 1\n    return result\n",
        "test": "assert     power_base_sum(2, 1) == 2",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pat = r'\\\"{1}([\\s\\S]*?)\\\"{1}'\n    match = re.findall(pat, text1)\n    return match\n",
        "test": "assert     extract_quotation('This is \"hello\" world!') == 'hello world!'",
        "num_ids": 2848,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # create a list of tuples of the N+1 elements from the input tuple\n    # at each step multiply the i-th element of the list of tuples by the next one\n    # return the new list of tuples\n    new_tuple = []\n    for i in range(len(test_tup) - 1):\n        new_tuple.append((test_tup[i], test_tup[i+1] * test_tup[i+1]))\n",
        "test": "assert     multiply_elements((4,5,6)) == (40,50,60)",
        "num_ids": 2639,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list = []\n    for a, b in zip(lst1, lst2):\n        sum_list.append(a + b)\n    return sum_list\n",
        "test": "assert     sum_list([1,2,3],    [4,5,6]) ==    [5,7,9]",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        print(key, list(group))\n",
        "test": "assert     consecutive_duplicates([2, 2, 2, 2]) == None, consecutive_duplicates([2, 2, 2, 2])",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    PI = math.pi\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Both input parameters should be non-negative\")\n    else:\n        z = h/2\n        y = (2*PI*r*z)/(PI*r)\n        return r*y\n",
        "test": "assert     lateralsurface_cone(3,7) == 6.766",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = re.sub(r'[\\t,.]', ':', text)\n    return result\n",
        "test": "assert     replace_specialchar('A,B') == \"A:B\", \"Your code has a bug\"",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = -1\n    for j in range(len(A)):\n        if A[j] == x:\n            i = j\n            break\n    return i\n",
        "test": "assert ",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    prod = 1\n    for i in range(n):\n        prod = prod * arr[i]\n        sum += prod\n    return sum\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0, \"Test 1: Not passing\"",
        "num_ids": 2409,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    num = (n | ~(n + 1))\n    print(num)\n",
        "test": "assert ",
        "num_ids": 2217,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i-1\n",
        "test": "assert     left_insertion([1, 3, 4, 5], 3) == 1, 'Wrong answer!'",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n    \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     check_str(\"eAiouB\") == True, \"Fail\"",
        "num_ids": 4108,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a = int(math.sqrt(n))\n    for i in range(1, a+1):\n        if n%i == 0:\n            return int(n/i)\n            \ndef find_Triangular_Number(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number-with-n-digits/\n    '''\n    a = int(math.sqrt(n))\n    for i in range(1, a+1):\n        if n%i == 0:\n            return int(n/i)\n",
        "test": "assert     find_Index(1) == 0",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dct = {}\n    for i in range(len(test_tup)-1):\n        dct[test_tup[i]] = test_tup[i+1]\n    return dct\n",
        "test": "assert     tuple_to_dict((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4}",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    s = set(s)\n    if len(l) == len(s):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Characters_Same(s = \"I am a Happy programmer\") == False, 'Should be False'",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a, b, c, d = side[0], side[1], side[2], side[3]\n    return (a*d)/2.0\n",
        "test": "assert ",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.insert(0, list.pop())\n    return list\n",
        "test": "assert     rotate_right(['a', 'b', 'c', 'd'], 2) == ['d', 'a', 'b', 'c']",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_none((1,2,3,4,None,None,5,None)) == True, \"Your function does not work\"",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return (x for x in range(startnum, endnum + 1) if all(x % i == 0 for i in range(1, x)))\n",
        "test": "assert divisible_by_digits(1, 10) == False, 'incorrect input'",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector = math.pi * r * r\n    sector = sector * a / 180\n    return sector\n",
        "test": "assert ",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_length = len(X) \n    Y_length = len(Y) \n    Z_length = len(Z) \n    \n    # Base Cases  \n    if (X_length == 0) or (Y_length == 0) or (Z_length == 0): \n        return 0\n    if (X_length == 1) or (Y_length == 1) or (Z_length == 1): \n        return 1\n    \n    # Dynamic Programming \n    dp_table = [[0 for x in range(Z_length + 1)] for y in range(X_length + 1)] \n    \n    for i in range(1, X_length + 1): \n        for j in range(1, Z_length + 1): \n            for k in range(1, Y_length + 1): \n                if (X[i - 1] == Y[k - 1]) and (X[i - 1] == Z[j - 1]): \n                    dp_table[i][j] = dp_table[i - 1][j - 1] + 1\n                else: \n                    dp_table[i][j] = max(dp_table[i][j - 1], dp_table[i - 1][j]); \n    \n    return dp_table[X_length][Y_length]\n",
        "test": "assert     lcs_of_three(",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.upper()\n    result = re.sub(r\"\\b(\\w)(\\1{2})\", r\"\\1 \\2\", str1)\n    return result.lower()\n",
        "test": "assert     capital_words_spaces('python function') == 'python function'",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    nums_int = []\n    nums_float = []\n    for i in range(len(nums_str)):\n        if str.isdigit(nums_str[i]):\n            nums_int.append(int(nums_str[i]))\n        elif str.isfloat(nums_str[i]):\n            nums_float.append(float(nums_str[i]))\n    nums.append(nums_int)\n    nums.append(nums_float)\n    nums.sort()\n    return nums\n",
        "test": "assert ",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([], ('x', 'y', 'z')) == ['x', 'y', 'z']",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    i = i\n    arr = arr\n    cnt = 0\n    while i > 0 and arr[(i-1)//2] > arr[i]:\n        i = i//2\n        cnt += 1\n    return cnt\n",
        "test": "assert ",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # base case: jacobsthal number is always greater than 1\n    if n < 2:\n        return n\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 2335,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list)\n    if K <= 0 or K > len(sorted_list):\n        return -1\n    min_val = sorted_list[0]\n    for i in range(1, K):\n        if sorted_list[i] < min_val:\n            min_val = sorted_list[i]\n    return min_val\n",
        "test": "assert     min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 1) == ('axe', 1), f\"Wrong output for min_k([('dynamite', 1), ('lamp', 1), ('sled', 2), ('axe', 1), ('knife', 3), ('axe', 2), ('knife', 3), ('axe', 1), ('knife', 3)], 1)\"",
        "num_ids": 904,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1) & set(l2) & set(l3))\n",
        "test": "assert     extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [2, 3, 4, 5, 6]) == [2, 3, 4, 5]",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert     second_smallest([2,1,2,1,2]) == 1",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a[ab]',text)\n    if match:\n        print(match)\n    else:\n        print(False)\ndef text_match_zero_one_v2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.findall(r'a[ab]',text)\n    if match:\n        print(match)\n    else:\n        print(False)\ndef text_match_zero_one_v3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a[ab]',text)\n    if match:\n        print(match.group())\n    else:\n        print(False)\n",
        "test": "assert     text_match_zero_one('aabaaa') == False",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    if len(test_list) < 2:\n        return count\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    output = {}\n    output_copy = []\n    for i in range(len(list1)):\n        temp = []\n        for j in range(len(list1)):\n            if i == j:\n                pass\n            elif list1[j] not in temp:\n                temp.append(list1[j])\n            else:\n                pass\n        output[tuple(temp)] = output.get(tuple(temp),0)+1\n        output_copy.append(tuple(temp))\n    output_copy = set(output_copy)\n    output_copy = list(output_copy)\n    return output\n    \nprint(unique_sublists([[2,4],[3,6,7],[9],[1,3,4,8,9],[2,5,7]]))\n'''",
        "test": "assert     unique_sublists([1,2,3,2,2]) == {(1,2,3):1, (2,2):2}",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal('1') == True, \"Error\"",
        "num_ids": 2322,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_elements = set()\n    for num in arr:\n        if num in set_elements:\n            return False\n        else:\n            set_elements.add(num)\n    return True\n",
        "test": "assert     unique_Element([3,2,4,5,2,4,5]) == False, \"test2 failed\"",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == '4' or monthnum3 == '6' or monthnum3 == '9' or monthnum3 == '11':\n        return True\n    else:\n        return False\n    \n",
        "test": "assert     check_monthnumber_number(3) == False, \"Wrong answer - Correct answer\"",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return\n    if n == 2:\n        return abs(arr[0] - arr[1])\n    minimum = min(arr[0], arr[1])\n    if arr[0] > arr[1]:\n        if minimum < arr[1] - arr[0]:\n            minimum = arr[1] - arr[0]\n    if arr[0] < arr[1]:\n        if minimum < arr[0] - arr[1]:\n            minimum = arr[0] - arr[1]\n    for i in range(2,n):\n        if arr[i] < arr[0]:\n            if minimum < arr[i] - arr[0]:\n                minimum = arr[i] - arr[0]\n        if arr[i] > arr[1]:\n            if minimum < arr[1] - arr[i]:\n                minimum = arr[1] - arr[i]\n    return minimum\n",
        "test": "assert ",
        "num_ids": 2542,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"1\") == 1",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here \n    if n == 0:\n        return n\n    for i in range(n):\n        if i == 0:\n            x = 2\n        else:\n            x = ((n + 1) * i) + 1\n        if x == n and x!= 0:\n            print(x)\n        elif x % 2!= 0:\n            print(x)\n        else:\n            print(x)\n            \nis_polite(int(input())",
        "test": "assert     is_polite(10) == 9",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(len(l1)):\n        if i==len(l1)-1:\n            break\n        l2.append(l1[i:i+2])\n    return l2\n",
        "test": "assert     pair_wise([1,2,3,4,5]) == [[1,2], [2,3], [3,4], [4,5]]     # ans = [[1,2], [2,3], [3,4], [4,5]]",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    l = len(arr)\n    count = 0\n    for i in range(l-1):\n        for j in range(i+1,l):\n            if(arr[i]+arr[j]==sum):\n                count+=1\n    print(\"Number of pairs with sum \",sum,\":\",count)\n    return count\n",
        "test": "assert     get_pairs_count([1, 5, 9, 1], 4) == 0",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    d = []\n    for i in li1:\n        if i not in li2:\n            d.append(i)\n    for i in li2:\n        if i not in li1:\n            d.append(i)\n    return d\n",
        "test": "assert     Diff([1,2,3,4],[3])     ==    [1,2,4]",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            sum = sum + pow(i,4)\n    return sum\n",
        "test": "assert     odd_num_sum(6) == 66",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                if char!= ')':\n                    return False\n            elif top == '[':\n                if char!= ']':\n                    return False\n            elif top == '{':\n                if char!= '}':\n                    return False\n    return len(stack) == 0\n",
        "test": "assert     check_expression(\"((()))\") == True, \"First\"",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    while True:\n        if test_str == \"\":\n            break\n        elif len(test_str) == K:\n            test_str = test_str[:-1]\n        else:\n            break\n    return test_str\n",
        "test": "assert     remove_length('the quick brown fox jumped over the lazy dog', 3) == 'the quick brown fox jumped', \\",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    p = re.findall(r\"\\w+\",pattern)\n    pl = len(p)\n    for i in range(len(text)-pl+1):\n        if text[i:i+pl] == p:\n            return i+1\n",
        "test": "assert     occurance_substring(\"babacabac\",\"a\") == None",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = True\n    for i in range(0,len(nums)-1,2):\n        if nums[i] == 0:\n            result = False\n            break\n    return result\n",
        "test": "assert     odd_position([10, 20, 30, 40, 50, 60]) == True, \"Test case 1 Failed\"",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if len(test_str) < 2:\n        return 0\n    if test_str[0] == test_str[1] == test_str[2]:\n        return 3\n    if test_str[1] == test_str[2] == test_str[3]:\n        return 3\n    if test_str[2] == test_str[3] == test_str[4]:\n        return 3\n    if test_str[0] == test_str[3] == test_str[4]:\n        return 3\n    if test_str[1] == test_str[4] == test_str[5]:\n        return 3\n    if test_str[2] == test_str[5] == test_str[6]:\n        return 3\n    return 0\n",
        "test": "assert     count_vowels('we are friends') == 2, 'Test 2 Failed'",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_list = []\n    for i in range(0, len(arr)):\n        if i == 0 or i == 1:\n            sum_list.append(arr[i])\n        else:\n            if arr[i] not in sum_list:\n                sum_list.append(arr[i])\n    return sum(sum_list)\n",
        "test": "assert    find_sum([1,1,1,1,1,1,1,1,1,1]) == 2, find_sum([1,1,1,1,1,1,1,1,1,1])",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    l = len(list1)\n    if l==1:\n        res.append([list1[0]])\n        return res\n    else:\n        i = 0\n        while i<l-1:\n            if list1[i]==list1[i+1]:\n                res.append([list1[i]])\n                i+=1\n                continue\n            else:\n                res.append([list1[i],list1[i+1]])\n                i+=2\n                continue\n    return res\n",
        "test": "assert     pack_consecutive_duplicates([0,1,0,1]) == [[0,1],[0,1]]",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for x in list1:\n        if x not in count:\n            count[x] = 1\n        else:\n            count[x] += 1\n    return count\n",
        "test": "assert     unique_sublists([[1,2,3],[4,5,6]]) == {(1,1), (2,1), (3,1), (4,1), (5,1), (6,1)}",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 1404,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count = count + 1\n    return count\n",
        "test": "assert     count_divisors(0) == 0,'should return 0'",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr = [1,3,2,4,1,5]\n    odd_sum = 0\n    for i in range(1, len(arr)):\n        odd_sum += arr[i]\n    return odd_sum\n",
        "test": "assert     odd_length_sum([1,2,3,4,5]) == 15",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        return 0.0, 0.0, 0.0\n    s = delta / cmax\n    h = 0.0\n    if cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2.0 + (b - r) / delta\n    else:\n        h = 4.0 + (r - g) / delta\n    h *= 60\n    if h < 0:\n        h += 360\n    return h, s, s\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    even_prod = 1\n    odd_prod = 1\n    for i in even:\n        even_prod = even_prod * i\n    for i in odd:\n        odd_prod = odd_prod * i\n    return even_prod, odd_prod\n",
        "test": "assert ",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "test": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3)",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i+1\n",
        "test": "assert     right_insertion([\"a\", \"c\", \"f\"], \"b\") == 2, \"wrong\"",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a_b = re.compile(r'a+b')\n    if a_b.match(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_three('abababababababa') == True",
        "num_ids": 2934,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_list + [test_str]\n",
        "test": "assert     new_tuple(['a', 'b', 'c'], 'def') == ('a', 'b', 'c')",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\nprint(even_position([1, 2, 3, 4]))\n",
        "test": "assert     even_position([]) == True",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0] if len(test_tup) == 1 else (test_tup[0], remove_nested(test_tup[1:]))\n",
        "test": "assert     remove_nested((1,2)) == (1, 2), \"Wrong\"",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for num in input_list:\n        if type(num) == list:\n            count += 1\n    print(count)\n    return count\n",
        "test": "assert     count_list([]) == 0, '0 lists in the list.'",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(0,len(arr)-1):\n        if arr[i]>x:\n            break\n    return i",
        "test": "assert     last([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 6, 'incorrect last'",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"^a.*b$\")\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb('aab') == True, \"incorrect\"",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n",
        "test": "assert     return_sum({'a':1, 'b':2}) == 3",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<0:\n        return None\n    if n<=1:\n        return n\n    return n + sum_odd(n-1)\n",
        "test": "assert     sum_odd(0) == 0, \"test-1 Failed\"",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef _find_min(arr):\n    '''\n    Write a python function to find the minium value in an array.\n    '''\n    return min(arr)\n    \ndef _find_max(arr):\n    '''\n    Write a python function to find the maximum value in an array.\n    '''\n    return max(arr)\n    \ndef _is_sorted(arr):\n    '''\n    Write a python function to check if a given array is sorted or not.\n    '''\n    return sorted(arr) == arr\n    \ndef _bubble_sort(arr):\n    '''\n    Write a python function to sort an array in a bubble fashion.\n    '''\n    arr_len = len(arr)\n    for i in range(arr_len):\n        for j in range(arr_len-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            \ndef _selection_sort(arr):\n    '''\n    Write a python function to sort an array in a selection fashion.\n    '''\n    arr_len = len(arr)\n    for i in range(arr_len):\n        min_index = i\n        for j in range(i+1, arr_len):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n",
        "test": "assert _sum([]) == 0, \"Wrong result\"",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "test": "assert     left_rotate(1,0) == 1",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "test": "assert     remove_all_spaces('') == \"\"",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    sum = x + y + z\n    print(sum)\n    count = 0\n    for i in range(1,sum+1):\n        if x == y == z:\n            count += 1\n    return count\n",
        "test": "assert     test_three_equal(1,1,1) == 3, \"WRONG\"",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[j]<arr[i]:\n                count+=1\n    return count\n",
        "test": "assert count_rotation([]) == 0",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # TODO\n    \n    is_perfect_square_int = n\n    while is_perfect_square_int > 0:\n        is_perfect_square_int = is_perfect_square_int // 10\n    return is_perfect_square_int == 1\n",
        "test": "assert is_perfect_square(2) == False, \"The given number must be a perfect square\"",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        return is_product_even(arr[1:]) and (arr[0] * arr[-1]) % 2 == 0\n",
        "test": "assert     is_product_even([1, 2, 3, 4]) == True, \"Error in testing 1st case\"",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists\n",
        "test": "assert     max_sum_list([[1]]) == [[1]]",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) < 2:\n        return 0\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            curr_count += 1\n        else:\n            max_count = max(curr_count, max_count)\n            curr_count = 1\n    return max_count\n",
        "test": "assert not max_run_uppercase('AbCcDDDDEEE') == 1, 'ABCDDDDEEE'",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums = list(nums)\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return nums[i]\n",
        "test": "assert ",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    try:\n        if test_tup[1][K-1] == test_tup[2][K-1]:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert     check_K(tuple({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}), 1) == False",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Two tuples of unequal length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller((1, 2), (4, 5)) == True, 'The first tuple should be smaller than the second tuple'",
        "num_ids": 470,
        "indeed": false
    }
]