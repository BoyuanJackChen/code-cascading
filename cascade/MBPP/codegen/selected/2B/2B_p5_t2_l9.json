[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    if len(test_tup1)>len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] not in test_tup2:\n                list1.append(test_tup1[i])\n        for i in range(len(test_tup2)):\n            if test_tup2[i] not in test_tup1:\n                list2.append(test_tup2[i])\n    else:\n        for i in range(len(test_tup2)):\n            if test_tup2[i] not in test_tup1:\n                list2.append(test_tup2[i])\n        for i in range(len(test_tup1)):\n            if test_tup1[i] not in test_tup2:\n                list1.append(test_tup1[i])\n    for i in range(len(list1)):\n        list3.append(list1[i])\n    return list3\nprint(similar_elements([1,2,3,4],[3,4,5,6,7]))\n",
        "test": "assert     similar_elements((1, 2, 3, 4, 5, 6), (5, 4, 3, 2, 1, 6)) == (5, 4, 3, 2), \\",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2!= 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(2) == True",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n, nums)\n",
        "test": "assert     heap_queue_largest([1],1) == [1]",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0\nprint(is_Power_Of_Two(1))\n",
        "test": "assert not is_Power_Of_Two(15)",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    string = text.split()\n    result = []\n    for word in string:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "test": "assert     find_char_long('wakawaa') == ['wakawaa']",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for n in nums:\n        new_list.append(n*n)\n    return new_list\n",
        "test": "assert     square_nums([1,2,3]) == [1,4,9], 'incorrect'",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #In this code if i am considering the case of input string of 'ac' then i will consider both of the possible rotation of the string\n    #i.e 'aac','aca','caa'\n    #so the we will take 3 rotations for every 'a',and we will count how many of them are needed to make the string equal to 'ac'\n    #the final answer will be 3 \n    if len(str) == 0:\n        return -1\n    if str == \"ac\":\n        return 0\n    count = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            count+=1\n    return count\n",
        "test": "assert     find_Rotations(\"a\") == 0, \"Input 'a' should be 0.\"",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0: \n        return(s) \n    else: \n        return(s.replace(ch,\"\",1)) \n",
        "test": "assert     remove_Occ(\"luminar\",\"l\") == \"uminar\"",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n    M.sort(key = lambda x:x[0], reverse=False)\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n    return M",
        "test": "assert     sort_matrix([[2,1],[1,2],[0,0]]) == [[0,0],[1,2],[2,1]]",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # We need to know all the parameters to find the volume of the prism\n    # This is called an Object Oriented Programming\n    # You can define the parameters for the function or use the default values\n    # The first parameter is always constant\n    # All the other parameters are passed in as a list\n",
        "test": "assert     find_Volume(2,3,4) == 16",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(\"[a-z]+_[a-z]*\",text)!= []\n",
        "test": "assert     text_lowercase_underscore('This is a string with numbers') == False",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "test": "assert ",
        "num_ids": 129,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(string)):\n        if string[i] not in list2:\n            list2.append(string[i])\n            list1.append(i)\n    list1 = sorted(list1)\n    return list1,list2\n",
        "test": "assert ",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n    \ndef test_duplicate_2(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n",
        "test": "assert     test_duplicate([1,2,2,3,4,4,4,4]) == True, \"error, not found\"",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(3) == False",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num:\n        rev = (rev * 10) + (num % 10)\n        num //= 10\n    return rev == num\n",
        "test": "assert     rev(1) == 0, \"Should be 0\"",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = 0\n    for i in range(len(arr)) :\n        if arr[i] > maxNum :\n            maxNum = arr[i]\n    return maxNum\n",
        "test": "assert     find_Max_Num([1,2,3,4,5,6]) == 6",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y > 0: \n        return True\n    else: \n        return False\n",
        "test": "assert     opposite_Signs(6, 7) == True, 'Failed'",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) // 2\n",
        "test": "assert     is_octagonal(1) == 1, \"Wrong value\"",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]]+=1\n    cnt = 0\n    for key, val in d.items():\n        if val==len(s):\n            cnt+=1\n    return cnt\n",
        "test": "assert     count_Substrings(\"\") == 0, \"Empty String\"",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #create a list of all the numbers in the list\n    xs = list(xs)\n    #create a new list of all the numbers that are odd\n    odd = list(filter(lambda x: x%2, xs))\n    #if the length of the list is 0, return none.\n    if len(odd) == 0:\n        return None\n    #otherwise return the smallest number from the odd list\n    return min(odd)\n",
        "test": "assert     smallest_num([1, 5, 3, 6, 8]) == 1",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list == []:\n        return -1\n    \n    max_diff = -1\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n                max_diff_indexes = (i, j)\n    return max_diff_indexes\n    \ndef sum_digits(num):\n    '''\n    Write a function that takes a non-negative number and returns the sum of all of its digits.\n    '''\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num = num // 10\n    return sum\n    \ndef smallest_sum_digit_pair(digits):\n    '''\n    Write a function that takes a non-negative number and returns the smallest pair of\n    numbers whose sum is equal to the given number.\n    '''\n    min_digit = None\n    for i in range(len(digits)):\n        if min_digit == None:\n            min_digit = i\n        elif sum_digits(digits[i]) < sum_digits(digits[min_digit]):\n            min_digit = i\n    return (min_digit, digits[min_digit])\n    \ndef smallest_sum_digit_pair_approach2(digits):\n    '''\n    This approach uses a Heap.\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    nums_map = {}\n    for i in range(len(digits)):\n        if digits[i] not in nums_map:\n            nums_map[digits[i]] = i\n    \n    heap = []\n    for i in range(len(digits)):\n        if nums_map[digits[i]]!= i:\n            heappush(heap, (sum_digits(digits[i]), nums_map[digits[i]], i))\n    \n    while len(heap) > 1:\n        x = heappop(heap)\n        y = heappop(heap)\n        if x[0] + y[0] == digits[x[2]]:\n            return (x[1], y[1])\n    return (None, None)\n    \ndef smallest_sum_digit_pair_approach3(digits):\n    '''\n    This approach uses a map and a Heap.\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    nums_map = {}\n    for i in range(len(digits)):\n        if digits[i] not in nums_map:\n            nums_map[digits[i]] = i\n    \n    heap = []\n    for i in range(len(digits)):\n        if nums_map[digits[i]]!= i:\n            heappush(heap, (sum_digits(digits[i]), nums_map[digits[i]], i))\n    \n    while len(heap) > 1:\n        x = heappop(heap)\n        y = heappop(heap)\n        if x[0] + y[0] == digits[x[2]]:\n            return (x[1], y[1])\n    return (None, None)\n    \ndef smallest_sum_digit_pair_approach4(digits):\n    '''\n    This approach uses a map and a Heap.\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    nums_map = {}\n    for i in range(len(digits)):\n        if digits[i] not in nums_map:\n            nums_map[digits[i]] = i\n    \n    heap = []\n    for i in range(len(digits)):\n        if nums_map[digits[i]]!= i:\n            heappush(heap, (sum_digits(digits[i]), nums_map[digits[i]], i))\n    \n    while len(heap) > 1:\n        x = heappop(heap)\n        y = heappop(heap)\n        if x[0] + y[0] == digits[x[2]]:\n            return (x[1], y[1])\n    return (None, None)\n    \ndef smallest_sum_digit_pair_approach5(digits):\n    '''\n    This approach uses a map and a Heap.\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    nums_map = {}\n    for i in range(len(digits)):\n        if digits[i] not in nums_map:\n            nums_map[digits[i]] = i\n    \n    heap = []\n    for i in range(len(digits)):\n        if nums_map[digits[i]]!= i:\n            heappush(heap, (sum_digits(digits[i]), nums_map[digits[i]], i))\n    \n    while len(heap) > 1:\n        x = heappop(heap)\n        y = heappop(heap)\n        if x[0] + y[0] == digits[x[2]]:\n            return (x[1], y[1])\n    return (None, None)\n    \ndef smallest_sum_digit_pair_approach6(digits):\n    '''\n    This approach uses a map and a Heap.\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    nums_map = {}\n    for i in range(len(digits)):\n        if digits[i] not in nums_map:\n            nums_map[digits[i]] = i\n    \n    heap = []\n    for i in range(len(digits)):\n        if nums_map[digits[i]]!= i:\n            heappush(heap, (sum_digits(digits[i]), nums_map[digits[i]], i))\n    \n    while len(heap) > 1:\n        x = heappop(heap)\n        y = heappop(heap)\n        if x[0] + y[0] == digits[x[2]]:\n            return (x[1], y[1])\n    return (None, None)\n",
        "test": "assert ",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks( [ (6, 2), (2, 4), (4, 3), (1, 1) ] ) ==     [ (1, 1), (6, 2), (4, 3), (2, 4) ]",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([])                 == 0",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # Using the list comprehension\n    return sum([1 for item in list if item > 0])\n",
        "test": "assert     pos_count([1,2,3,-1,5,-3,6,2,4]) == 7",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    \n    dp = [0]*n\n    dp[0], dp[1], dp[2], dp[3] = 1, 2, 3, 4\n    for i in range(4, n):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    j = len(A) - 1\n    while i < j:\n        if A[i] <= A[j]:\n            i += 1\n        else:\n            j -= 1\n    return True if i == j else False\n",
        "test": "assert     is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist(['a','b','c'], ['a','b','c']) == True, 'Incorrect answer, try again'",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input)\n    for i in range(length):\n        for j in range(length):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,2,3,4),(1,2,3,4),(1,2,3,4,5),(1,2,3,4)]) == False, \"tuple with unequal length are not equal\"",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length == 1:\n        return nums\n    \n    step = 1\n    while step < length:\n        for i in range(length - step):\n            if nums[i] > nums[i+step]:\n                nums[i], nums[i+step] = nums[i+step], nums[i]\n        step = step * 3 + 1\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n <= 0): \n        return False\n    \n    if (n == 1): \n        return True\n",
        "test": "assert     dif_Square(1) == True, \"Expected True\"",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return sorted(colors) == sorted(patterns)\n",
        "test": "assert     is_samepatterns([{1,2,3,4},{1,2,3,4}],[{1,2,3,4},{1,2,3,4}]) == True",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        tup = test_list[i]\n        if tup[0] % K == 0 and tup[1] % K == 0 and tup[2] % K == 0:\n            output.append(tup)\n    return output\n",
        "test": "assert     find_tuples([(1,2),(3,4),(5,6)], 5) == [(1,2),(3,4),(5,6)]",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11 == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert not is_Diff(3)",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    result = True\n    if len(s)%2==0:\n        print(\"The word is not odd!\")\n        result = False\n    else:\n        print(\"The word is odd!\")\n    return result\n",
        "test": "assert     word_len('peter') == True",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n*(n-1)*(n-2)*(n-3)\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "test": "assert     volume_sphere(1) == 4/3*math.pi, 'Wrong'",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    if strr == None:\n        return None\n    return ord(strr)\n",
        "test": "assert     get_Char('abc') == get_Char('ABC') == get_Char('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'D', 'fail'",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = 0\n    for i in range(n):\n        s += (3 ** i) * 5 ** (n-i-1)\n    return s\n",
        "test": "assert     sequence(1) == 1, \"Wrong Answer\"",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea_sphere=4*math.pi*(r**2)\n    return surfacearea_sphere\nprint(surfacearea_sphere(1))\n",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    number = 2\n    while i < n:\n        number += 3 * (i - 1)\n        i += 1\n    return number\n",
        "test": "assert     centered_hexagonal_number(2) == 2",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2, **dict3}\n",
        "test": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'c': 5}, {'b': 8}) == {'a': 1, 'b': 8, 'c': 5}",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "test": "assert     freq_count([1,1,1,1,1,1,1]) == {1:7}",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_smaller_num(n):\n        if n < 0:\n            return 0\n        if n < N:\n            return n\n        else:\n            return n - 1\n    return closest_smaller_num(N)\n",
        "test": "assert     closest_num(4) == 3",
        "num_ids": 2623,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word = ''\n    for i in range(len(list1)):\n        if list1[i] not in word:\n            word += list1[i]\n    return len(word)\n",
        "test": "assert len_log(['a', 'b']) == 2",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    s = str1\n    sub = sub_str\n    for i in range(len(s)):\n        if s[i] in sub:\n            return True\n    return False\n",
        "test": "assert     find_substring('hello','o') == True, \"Should be True\"",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert     is_undulating(3) == True, \"test failed\"",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert     power(2,3) == 8",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # get the index of the smallest second value in the list\n    # get the index of the first element of that second value\n    # return that element\n    minimum = []\n    for i in range(len(test_list)):\n        minimum.append((test_list[i][0], test_list[i][1]))\n    minimum.sort()\n    return minimum[0]\nprint(index_minimum([(0,2),(2,4),(3,5),(4,8)]))\n",
        "test": "assert     index_minimum([('a',1), ('b',3), ('c',2)]) == ('a',1)",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst)\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return min\n",
        "test": "assert     Find_Min_Length([[], [], []]) == 0",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n",
        "test": "assert     divisor(10) == 4",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        freq[list1[i]] = freq.get(list1[i],0) + 1\n    return freq\n",
        "test": "assert     frequency_lists([]) == {}, \"Empty list\"",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    total = total/len(numbers)\n    return total\n",
        "test": "assert     multiply_num([1, 2, 3, 4]) == 6",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return '{0:b}'.format(n)\n",
        "test": "assert     decimal_to_binary(0) == \"0\"",
        "num_ids": 188,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    for i in range(len(s)-1,0,-1):\n        if s[i] == '0' or s[i] == '1' or s[i] == '2':\n            continue\n        else:\n            s = s[:i]+s[i+1:]\n            break\n    return int(s)\n",
        "test": "assert     next_smallest_palindrome(121) == 121, 'Wrong answer'",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n    return arr[k-1]\n",
        "test": "assert     kth_element([0,1,2,3,4,5,6,7,8,9,10,11], 10) == 10, \"Failed\"",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n",
        "test": "assert     snake_to_camel(\"snake\") == \"Snake\", \"Not quite\"",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 2*m - n\n",
        "test": "assert     eulerian_num(2, 2) == 2",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initializing the result list to sort the final result\n    result_list = []\n    for i in input_list:\n        result_list.append(sorted(i))\n    return result_list\n",
        "test": "assert ",
        "num_ids": 1414,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count\n",
        "test": "assert     count([]) == 0, \"should return 0\"",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "test": "assert     add_lists([1], (2,3)) == [(1), (2,3)], 'Wrong output'",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1 + num2 + num3)\ndef merge_sort(n):\n    \"\"\"\n    Write a merge sort function\n    \"\"\"\n    if len(n) <= 1:\n        return n\n    else:\n        mid = len(n) // 2\n        L = merge_sort(n[:mid])\n        R = merge_sort(n[mid:])\n        return merge(L,R)\n",
        "test": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    string = bin(n)\n    string = string[2:]\n    string = string.zfill(len(s))\n    # print(string)\n    i = 0\n    j = len(string)-1\n    result = 0\n    while i<=j:\n        if string[i]=='0':\n            i+=1\n        if string[j]=='1':\n            j-=1\n        if string[i]=='1' and string[j]=='1':\n            result += 1\n            i+=1\n            j-=1\n    return result\n",
        "test": "assert ",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for element in nestedlist[1:]:\n        common_elements = common_elements & set(element)\n    return list(common_elements)\n",
        "test": "assert     common_in_nested_lists([[1,2], [2,3], [1,2]]) ==     [2]",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('2') == True, '\"2\" is not an integer!'",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{'a':1},{'a':2},{'a':3}]) == False",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n    return res\n",
        "test": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 12345",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert     list_to_float([[5], [3.5], [5.5], ['a'], ['b']]) == [[5.0], [3.5], [5.5], ['a'], ['b']]",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "test": "assert     string_to_list(\"hello world\") == [\"hello\", \"world\"], \"Expected ['hello', 'world'], got ['hello', 'world'] instead.\"",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    index = 0\n    while count < len(arr) and index < len(arr)-1:\n        if arr[index]!= arr[index+1]:\n            index += 1\n        else:\n            count += 1\n    return arr[index]\n",
        "test": "assert     search([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 9",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialise variables\n    max_product = -999999999999999999999999999999999999999999\n    max_index_product = -9999999999999999999999999999999999999999999\n    curr_product = -999999999999999999999999999999999999999999\n    max_ind = 0\n    curr_ind = 0\n    \n    # Loop through list and find max absolute product\n    for ind, item in enumerate(list1):\n        curr_product = item[0] * item[1]\n        if curr_product > max_product:\n            max_product = curr_product\n            max_index_product = ind\n            max_ind = item[0]\n        elif curr_product == max_product:\n            if item[0] > max_ind:\n                max_product = curr_product\n                max_index_product = ind\n                max_ind = item[0]\n    \n    # Return max absolute product\n    return list1[max_index_product]\n    ",
        "test": "assert     max_product_tuple([(1,2),(2,4),(5,-2)]) == (2,4)",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for x in range(1, limit):\n        sum1 = 0\n        sum2 = 0\n        if x not in amicable:\n            for y in range(1, x):\n                if x % y == 0:\n                    sum1 += y\n            sum2 = x + sum1\n            if sum2 == x and sum1!= x:\n                amicable.append(x)\n                amicable.append(sum1)\n                amicable.append(sum2)\n    return sum(amicable)\n",
        "test": "assert     amicable_numbers_sum(1) == 0",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_in_degrees = cmath.phase(a+b)\n    return angle_in_degrees\n",
        "test": "assert     angle_complex(0, 0) == 0, \"0 degrees\"",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(1,len(string)):\n        sub_string = string[i-1] + string[i]\n        num_zeros = sub_string.count(\"0\")\n        num_ones = sub_string.count(\"1\")\n        if max_diff < abs(num_zeros - num_ones):\n            max_diff = abs(num_zeros - num_ones)\n    return max_diff\n",
        "test": "assert     find_length(\"1100101\") == 2, \"Should be 2\"",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n    \n    \n    ",
        "test": "assert     sum(1,2) == 3",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(5, 3) == 15, \"Your function should multiply the two integers.\"",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_words = []\n    for i in str:\n        if len(i) > n:\n            list_words.append(i)\n    return list_words\n",
        "test": "assert     long_words(2, [\"hello\", \"world\"]) == [\"hello\", \"world\"], 'incorrect'",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return is_magic_square(my_matrix)\n",
        "test": "assert ",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    max_value = max(d.values())\n    for i in d.keys():\n        if d[i] == max_value:\n            return i\n",
        "test": "assert     max_occurrences([1,1,2,2,2,3]) == 2",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # reverse string\n    vowels = set('aeiou')\n    res = list(str1)\n    i = 0\n    j = len(res) - 1\n    while i < j:\n        if res[i] not in vowels:\n            i += 1\n        if res[j] not in vowels:\n            j -= 1\n        res[i], res[j] = res[j], res[i]\n        i += 1\n        j -= 1\n    return ''.join(res)\n",
        "test": "assert     reverse_vowels(\"\") == \"\"",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''.join(tup1)\n    print(s)\n",
        "test": "assert     tup_string((1,2,3)) == '1,2,3'",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num=nums\n    sum_neg=0\n    for i in range(len(num)):\n        if num[i]<0:\n            sum_neg=sum_neg+num[i]\n    return sum_neg\n",
        "test": "assert     sum_negativenum([-2, -1, 1]) == -3, \"sum of negative numbers\"",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = n*(3*n - 1)/2\n    return int(result)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert zero_count([1]) == 0.0",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n>0:\n        if n%2==0:\n            n=n//2\n        else:\n            return False\n    return True\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(0)    == True, \"Number is zero\"",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for element in test_list:\n        if type(element)!= list:\n            singly_list.append(element)\n        else:\n            singly_list += extract_singly(element)\n    return singly_list\n",
        "test": "assert     extract_singly([[1,2,3],[4,5]]) == [1,2,3,4,5]",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    for i in range(len(nums)-1, 0, -1):\n        max_i = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_i]:\n                max_i = j\n        nums[i], nums[max_i] = nums[max_i], nums[i]\n        nums[i:] = sorted(nums[i:])\n    return nums\n",
        "test": "assert     pancake_sort(['a','a','b','c','d']) == ['a','a','b','c','d']",
        "num_ids": 924,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            counter +=1\n    return counter\n",
        "test": "assert     count_samepair([1,2,3],[1,2,3],[1,2,3])==3",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    my_list = []\n    for i in Input:\n        my_list.append(i)\n    return len(set(my_list))\n",
        "test": "assert     find_lists(()) == 0, \"Test Case 1 Failed\"",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > maxDiff:\n                maxDiff = abs(arr[i] - arr[j])\n    return maxDiff\n",
        "test": "assert ",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = None\n    \n    for i in range(1, n + 1):\n        if (n % i) == 0:\n            x = i\n            y = n // i\n            break\n    \n    if not x and not y:\n        return None\n    \n    return (x, y)\n",
        "test": "assert ",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # If empty lists, return empty list\n    if len(list1)==0 or len(list2)==0:\n        return list1\n    else:\n        # Remove elements present in list1\n        for element in list2:\n            if element in list1:\n                list1.remove(element)\n        return list1\n",
        "test": "assert     remove_elements([1,2,3,4,5],[3,4]) == [1,2,5]",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return n\n    return n + sum_series(n - 2)\n",
        "test": "assert sum_series(5) == 10",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0 or l <= 0:\n        print(\"ERROR: Argument s and l must be positive\")\n        return None\n    return (s * (s - l) * 0.5)\n",
        "test": "assert ",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n == sum([math.ceil(n/i) for i in range(1, n//2 + 1)])\n",
        "test": "assert     div_sum(10) == False",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # initialize the count variable \n    count = 0 \n    \n    # Traverse through every character of input string \n    for i in range(0, len(str1)): \n        \n        # Initialize the count of character \n        # in the current alphabet \n        count_alpha = 0\n        \n        # Traverse through each alphabet of the English alphabet \n        for j in range(97, 123): \n            \n            # Check if the character is a letter and \n            # if the current alphabet occurs at the position \n            if (chr(j) == str1[i]) : \n                \n                # Increment the count of letters \n                # in the current alphabet \n                count_alpha += 1\n                \n            # If the current alphabet does not occur at the position \n            # then the count of letters in the current alphabet will be 0 \n            else: \n                \n                # Reset the count of letters in the current alphabet to 0 \n                count_alpha = 0\n                \n            # Check if the count of letters in the current alphabet is \n            # greater than the count of letters in the current count \n            if (count_alpha > count): \n                \n                # Update the count of letters in the current alphabet \n                count = count_alpha \n                \n    # Return the count of letters in the alphabet \n    return count\n    \nif __name__ == '__main__':\n    str1 = 'python'\n    print(count_char_position(str1)) ",
        "test": "assert     count_char_position(\"\") == 0, \"Empty String\"",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if xor(A[i], A[j]) % 2 == 0:\n                count += 1\n",
        "test": "assert ",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #code here\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2\n",
        "test": "assert     next_power_of_2(1) == 1",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "test": "assert     frequency([], 10) == 0, 'The number of occurrences of a number in a given list is incorrect'",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    result = 0\n    \n    for i in range(len(list1)):\n        if i >= m and i <= n:\n            result += list1[i]\n    \n    return result\n",
        "test": "assert ",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3*a*math.sqrt(5))\n",
        "test": "assert ",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('std') == 1",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # it can be also used for checking if the list is sorted or not\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            return False\n    return True\n",
        "test": "assert     check_type([1,2,3]) == True, \"List inside a tuple does not have same data type.\"",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n",
        "test": "assert is_majority([2, 2, 1, 1, 3, 3], 6, 3) == True",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    res = 0\n    while n:\n        res += 1\n        n = n&(n-1)\n    return res\n",
        "test": "assert     count_Set_Bits(1) == 1",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #str = \"10111\"\n    #str = \"011101\"\n    #str = \"01110101\"\n    #str = \"abcd\"\n    #str = \"www.google.com\"\n    #str = \"kumar\"\n    #str = \"kumar.com\"\n    #str = \"im-kumar-gmail.com\"\n    #str = \"imkumar@gmail.com\"\n    #str = \"kum@gmail.com\"\n    #str = \"kumar\"\n    #str = \"kumar.com\"\n    #str = \"kum@gmail.com\"\n    #str = \"kum\"\n    #str = \"kum@\"\n    #str = \"kum@gmail.com\"\n    #str = \"kumar.com\"\n    #str = \"kum@gmail.com\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n",
        "test": "assert     odd_values_string('odd') == 'odd'",
        "num_ids": 2360,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if a<=b and a<=c: \n        return a\n    elif b<=a and b<=c: \n        return b\n    else: \n        return c \n    \n",
        "test": "assert     min_of_three(-10, -2, 20) == -10",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    #passing the number of bits as an argument and returning all set bits.\n    return ((r-l) & (l-n) )==0\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(2,2,2) == True, \"All Bits Set In The Given Range\"",
        "num_ids": 2486,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            temp = arr[i]\n            while i < n and arr[i] < 0:\n                arr[i] = arr[i+1]\n                i += 1\n            arr[i] = temp\n    return arr\n",
        "test": "assert ",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1\n    for x in range(len(new_str)):\n        if new_str[x] =='':\n            new_str = new_str[:x] + char + new_str[x+1:]\n    return new_str\n",
        "test": "assert     replace_blank('', '') == '', 'The returned value must be empty string'",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #if n == 0:\n    #    return []\n    \n    sorted_list = sorted(list1,reverse=True)\n    return sorted_list[:n]\n",
        "test": "assert     larg_nnum([1,2,3,4,5,6,7,8,9,10], 10) == [10,9,8,7,6,5,4,3,2,1]",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # The difference between the height and radius of the cylinder\n    d = h - r\n",
        "test": "assert ",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l ** 3)\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        n = n & 0xFFFFFFFF\n    if n & 0x01:\n        n = n | 0x80\n    return n \n",
        "test": "assert even_bit_set_number(0) == 0, \"Wrong answer\"",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # Iterate over the list of tuples and add them to a dictionary if they don't already exist\n    occurrences = {}\n    for tup in test_list:\n        if tup in occurrences:\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n    return occurrences \n",
        "test": "assert     check_occurences([]) == {}",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    noOfSubs = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            sub = str[i:j+1]\n            if len(sub) > 0:\n                noOfSubs += 1\n    return noOfSubs\n",
        "test": "assert     number_of_substrings('') == 0, \"String should be empty.\"",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize a set of permutations and initialize the count to 0\n    sequence_set = set()\n    sequence_count = 0\n",
        "test": "assert     get_total_number_of_sequences(0,0) == 1",
        "num_ids": 991,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.remove(list1[-1])\n    list1.extend(list2)\n    return list1\n    \n    \n    \n",
        "test": "assert     replace_list([1, 2, 3, 4], [5, 6, 7]) == [1, 2, 3, 5, 6, 7]",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac(\"abcd\") == 4",
        "num_ids": 2146,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N % 2 == 0): \n        N = N + 1\n        print(\"next_Perfect_Square:\", N) \n        return N \n    else: \n        N = N + 2\n        print(\"next_Perfect_Square:\", N) \n        return N \n    \n    \ndef print_Primes(N): \n    '''\n    Write a python function to print all primes between 0 to N (both included).\n    '''\n    for i in range(2,N):\n        if i * i < N:\n            print(i, end=\" \")\n        else:\n            return\n",
        "test": "assert     next_Perfect_Square(8) == 9, \"8 should be 9\"",
        "num_ids": 2440,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: \n        return arr[0]\n    elif len(arr) == 2: \n        return max(arr[0],arr[1])\n    elif len(arr) == 3:\n        return max(max_sum(arr[:2]) + arr[2], arr[1])\n    else:\n        return max(max_sum(arr[:len(arr)-1]) + arr[len(arr)-1], max_sum(arr[:len(arr)-2]) + arr[len(arr)-2])\n",
        "test": "assert ",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**(1/2)\n",
        "test": "assert     babylonian_squareroot(4) == 2.0",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #Initializing maxLen and starting from 0\n    maxLen=0\n    for i in range(0,len(str)):\n        \n        #Initializing suffix array\n        SuffixArray=[]\n        for j in range(i,len(str)):\n            SuffixArray.append(str[j])\n        SuffixArray.append('$')\n        #Initializing Pivot Array\n        PivotArray=[]\n        for j in range(i,len(str)):\n            PivotArray.append(str[j])\n        PivotArray.append('$')\n        \n        #Initializing Longest\n        Longest=0\n        \n        #Looping through the suffix array\n        for j in range(0,len(SuffixArray)):\n            if SuffixArray[j]=='$':\n                break\n            else:\n                PivotArray.append(SuffixArray[j])\n                Longest=max(Longest,len(PivotArray)-1)\n                while(Longest>0 and PivotArray[Longest]!='$'):\n                    #If Last element is not a '$' then delete it\n                    PivotArray.pop(Longest)\n                    Longest-=1\n        maxLen=max(maxLen,Longest+1)\n    print(\"LPS is: \",maxLen)\n",
        "test": "assert     lps(\"abcddcba\") == 5",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + n) / 2.0\n",
        "test": "assert harmonic_sum(2) == 1.5, 'Error in test case #2'",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary to count array elements\n    counter = {}\n    for element in array_nums1:\n        if element in counter:\n            counter[element] += 1\n        else:\n            counter[element] = 1\n    \n    # loop through the second array elements\n    for element in array_nums2:\n        if element in counter and counter[element] > 0:\n            counter[element] -= 1\n",
        "test": "assert ",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "test": "assert     count_X((1,2,2), 2) == 2",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:element]+[element]+list[element:]\n",
        "test": "assert     insert_element([1],1) == [1,1]",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (numbers.real**2 + numbers.imag**2)\ndef printFunction(num):\n    for i in range(num):\n        print(\"the\",i+1,\"number is\",num[i])\n    \ndef distance(p1,p2):\n    '''\n    Write a python function to find the distance between two points.\n    '''\n    return abs(p1[0]-p2[0])+abs(p1[1]-p2[1])\ndef main():\n    '''\n    Write a program to read the file data.txt and create a list of all the data items. Print the list.\n    '''\n    try:\n        f = open('data.txt','r')\n        data = f.read()\n        items = data.split()\n        print(\"The list of items are : \")\n        print(items)\n        f.close()\n    except:\n        print(\"File does not exist\")\ndef main2():\n    '''\n    Write a program to read the file data.txt and create a list of all the data items. Print the list.\n    '''\n    try:\n        f = open('data.txt','r')\n        data = f.read()\n        items = data.split()\n        print(\"The list of items are : \")\n        print(items)\n        f.close()\n    except:\n        print(\"File does not exist\")\ndef main3():\n    '''\n    Write a python program to read the file data.txt and create a list of all the data items. \n    Print the list.\n    Write a python program to read the file data.txt and create a list of all the data items. \n    Print the list.\n    Write a python program to read the file data.txt and create a list of all the data items. \n    Print the list.\n    Write a python program to read the file data.txt and create a list of all the data items. \n    Print the list.\n    Write a python program to read the file data.txt and create a list of all the data items. \n    Print the list.\n    '''\n    try:\n        f = open('data.txt','r')\n        data1 = f.read()\n        items1 = data1.split()\n        print(\"The list of items are : \")\n        print(items1)\n        f.close()\n",
        "test": "assert ",
        "num_ids": 3554,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n    \n",
        "test": "assert     count_integer([1, 2, 3, 4, 5, 6]) == 6, \"Error\"",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                comb.append((l[i],l[j],l[k]))\n    return comb\n",
        "test": "assert     combinations_colors([1, 2], 2) == [[1, 2], [1, 2]]",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    counter = 0\n    count = 0\n    for n in range(1,n+1):\n        for i in primes:\n            if n % i == 0:\n                counter = counter + 1\n                break\n        if counter == 1:\n            count = count + 1\n        counter = 0\n    return count\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    if n in primes:\n        print(\"The number is prime\")\n    else:\n        print(\"The number is not prime\")\n        \ndef prime_count(n):\n    '''\n    Write a function to count the number of prime numbers less than a given non-negative number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    counter = 0\n    count = 0\n    for i in range(1,n+1):\n        for i in primes:\n            if i % i == 0:\n                counter = counter + 1\n                break\n        if counter == 1:\n            count = count + 1\n        counter = 0\n    return count\n    \ndef decimal_to_binary(n):\n    '''\n    Write a function to convert a decimal number into binary.\n    '''\n    binary = []\n    while n > 0:\n        if n%2 == 1:\n            binary.append(1)\n        else:\n            binary.append(0)\n        n = n//2\n    binary.reverse()\n    return binary\n",
        "test": "assert     count_Primes_nums(2) == 1",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = (b,a)\n    return tup\n",
        "test": "assert     swap_numbers(3,4) == (4,3)",
        "num_ids": 187,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert     maximize_elements((1, 2), (4, 3)) == (4, 3)",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: \n        return 2 \n    else: \n        i = 1 \n        l = [2] \n        while len(l) <= n: \n            i = i + 1\n            if (l[-1] % 2 == 0 or l[-1] % 3 == 0): \n                l.append(2*l[-1]) \n            else: \n                l.append(3*l[-1]+1) \n    return l[-1] \n",
        "test": "assert     newman_prime(0) == 2, 'Should be 2'",
        "num_ids": 2432,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        new_tup += (i/j,)\n    return new_tup\n",
        "test": "assert ",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5]), \"Wrong\"",
        "num_ids": 2169,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age) * 7\n",
        "test": "assert ",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    for i in range(len(S)):\n        if i % step == 0:\n            out.append(S[i:i + step])\n    return out\n",
        "test": "assert     list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n",
        "test": "assert     lateralsurface_cube(3) == 12",
        "num_ids": 2107,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n",
        "test": "assert ",
        "num_ids": 171,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return i * find_star_num(n - 1) + n\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 217,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, int):\n        return k\n    elif isinstance(k, str):\n        return ord(k)\n    else:\n        print(\"Invalid input\")\n        return None\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 191,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers_sum=0\n    for i in range(len(arr)):\n        if(arr[i]%2==0):\n            even_numbers_sum+=arr[i]\n    return even_numbers_sum\n",
        "test": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 20",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**5)\n    return sum\n",
        "test": "assert     even_Power_Sum(1) == 0",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    r_elements = []\n    for i in range(0, len(test_list)):\n        r_elements.append(test_list[i][1])\n    return r_elements\n",
        "test": "assert     rear_extract([]) == [], \"Should be: []\"",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # ERROR: for loops and tuples are not supported.\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n",
        "test": "assert     substract_elements((1, 2, 3), (3, 2, 7)) == (1, 2, -4)",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1:\n        return 0\n    even_list = []\n    for i in range(n+1):\n        if i % 2 == 0:\n            even_list.append(binomial_Coeff(n,i))\n    return sum(even_list)\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3*math.pi*r*r*h\n    return volume\n",
        "test": "assert     volume_cylinder(0,3) == 0, \"Wrong value returned\"",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key,value in dict.items():\n        if value>=n:\n            new_dict[key]=value\n    return new_dict\nprint(dict_filter({'hello': 1, 'hi': 2, 'hiya': 1, 'howdy': 1}, 1))\n",
        "test": "assert     dict_filter({'a': 2, 'b': 1, 'c': 1},1) == {'a': 2, 'b': 1, 'c': 1}",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if test_tup[count] < i:\n            break\n        count += 1\n    return count\n",
        "test": "assert     count_first_elements(()) == 0, \"First element not found\"",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    result = 1\n    for i in range(1, n + 1):\n        result = result * (i * (i + 1)) / (i + 2)\n    return result\n    ",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    n = len(dlist)\n    for i in range(n):\n        if dlist[i] == item:\n            found = True\n            return found, i\n    return found, -1\n    \ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    The function should run in O(n) time.\n    '''\n    start_index = 0\n    end_index = len(dlist) - 1\n    found = False\n    while start_index <= end_index:\n        mid_index = (start_index + end_index) // 2\n        if dlist[mid_index] == item:\n            found = True\n            return found, mid_index\n        elif dlist[mid_index] > item:\n            end_index = mid_index - 1\n        elif dlist[mid_index] < item:\n            start_index = mid_index + 1\n    return found, -1\n",
        "test": "assert     sequential_search([1], 1) == (True, 0)",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(test_list)\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True\n",
        "test": "assert     all_unique([1,2,3,4,5])",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n",
        "test": "assert ",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0:\n        return False\n    dict = {}\n    while n > 0:\n        digit = n % 10\n        if digit in dict:\n            dict[digit] = dict[digit] + 1\n        else:\n            dict[digit] = 1\n        n = n // 10\n    for k in dict:\n        if k > dict[k]:\n            return False\n    return True\n",
        "test": "assert validate(234) == False, \"Should be False\"",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "test": "assert check_element([1, 2, 3], 4) == False",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'a*b+'\n    if re.search(pattern, text)!= None:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('') == False, 'Empty String'",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Repeat the array 'k' times and get the largest sum\n    max_sum = float('-inf')\n    \n    # Consider each element in the array and calculate max_sum of the \n    # current elements and previous elements\n    for i in range(n):\n        # If the current element is less than 0 then ignore\n        if a[i] < 0:\n            continue\n        \n        # If we reach the element after the final element in \n        # the array and we've got a negative value then ignore\n        if (i == n - 1) and (a[i] < 0):\n            continue\n        \n        # If we reach the element before the final element in \n        # the array and we've got a negative value then ignore\n        if (i == 0) and (a[i] < 0):\n            continue\n            \n        # Get the sum of current element and previous element\n        # by adding k.\n        sum_temp = a[i] + k * a[i-1]\n        \n        # Update the max_sum\n        max_sum = max(max_sum, sum_temp)\n    \n    return max_sum\n    \n",
        "test": "assert     max_sub_array_sum_repeated([1, 2, 3, 2, 1], 2, 2) == 4",
        "num_ids": 2709,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sq = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sq += i**2\n    return sq\nprint(square_Sum(5))\n",
        "test": "assert square_Sum(5) == 10",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = len(list1[0])\n    for i in list1:\n        if max < len(i):\n            max = len(i)\n    return max\n",
        "test": "assert     max_length([[],[],[]])== 0, \"wrong answer\"",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base cases \n    if n == 1 or n == 0: \n        return 1\n    if k == 1 or k == 0: \n        return 0\n    # base cases for n=2 \n    if n == 2: \n        return 2\n    if k == 2: \n        return 2\n    # solution for n=3 \n    if n == 3: \n        return 4\n    # solution for n=4 \n    if n == 4: \n        return 5\n    # base case for n=5 \n    if n == 5: \n        return 6\n    # solution for n=6 \n    if n == 6: \n        return 7\n    # solution for n=7 \n    if n == 7: \n        return 8\n    # solution for n=8 \n    if n == 8: \n        return 9\n    # solution for n=9 \n    if n == 9: \n        return 10\n    # solution for n=10 \n    if n == 10: \n        return 11\n    # solution for n=11 \n    if n == 11: \n        return 12\n    # solution for n=12 \n    if n == 12: \n        return 13\n    # solution for n=13 \n    if n == 13: \n        return 14\n    # solution for n=14 \n    if n == 14: \n        return 15\n    # solution for n=15 \n    if n == 15: \n        return 16\n    # solution for n=16 \n    if n == 16: \n        return 17\n    # solution for n=17 \n    if n == 17: \n        return 18\n    # solution for n=18 \n    if n == 18: \n        return 19\n    # solution for n=19 \n    if n == 19: \n        return 20\n    # solution for n=20 \n    if n == 20: \n        return 21\n    # solution for n=21 \n    if n == 21: \n        return 22\n    # solution for n=22 \n    if n == 22: \n        return 23\n    # solution for n=23 \n    if n == 23: \n        return 24\n    # solution for n=24 \n    if n == 24: \n        return 25\n    # solution for n=25 \n    if n == 25: \n        return 26\n    # solution for n=26 \n    if n == 26: \n        return 27\n    # solution for n=27 \n    if n == 27: \n        return 28\n    # solution for n=28 \n    if n == 28: \n        return 29\n    # solution for n=29 \n    if n == 29: \n        return 30\n    # solution for n=30 \n    if n == 30: \n        return 31\n    # solution for n=31 \n    if n == 31: \n        return 32\n    # solution for n=32 \n    if n == 32: \n        return 33\n    # solution for n=33 \n    if n == 33: \n        return 34\n    # solution for n=34 \n    if n == 34: \n        return 35\n    # solution for n=35 \n    if n == 35: \n        return 36\n    # solution for n=36 \n    if n == 36: \n        return 37\n    # solution for n=37 \n    if n == 37: \n        return 38\n    # solution for n=38 \n    if n == 38: \n        return 39\n    # solution for n=39 \n    if n == 39: \n        return 40\n    # solution for n=40 \n    if n == 40: \n        return 41\n    # solution for n=41 \n    if n == 41: \n        return 42\n    # solution for n=42 \n    if n == 42: \n        return 43\n    # solution for n=43 \n    if n == 43: \n        return 44\n    # solution for n=44 \n    if n == 44: \n        return 45\n    # solution for n=45 \n    if n == 45: \n        return 46\n    # solution for n=46 \n    if n == 46: \n        return 47\n    # solution for n=47 \n    if n == 47: \n        return 48\n    # solution for n=48 \n    if n == 48: \n        return 49\n    # solution for n=49 \n    if n == 49: \n        return 50\n    # solution for n=50 \n    if n == 50: \n        return 51\n    # solution for n=51 \n    if n == 51: \n        return 52\n    # solution for n=52 \n    if n == 52: \n        return 53\n    # solution for n=53 \n    if n == 53: \n        return 54\n    # solution for n=54 \n    if n == 54: \n        return 55\n    # solution for n=55 \n    if n == 55: \n        return 56\n    # solution for n=56 \n    if n == 56: \n        return 57\n    # solution for n=57 \n    if n == 57: \n        return 58\n    # solution for n=58 \n    if n == 58: \n        return 59\n    # solution for n=59 \n    if n == 59: \n        return 60\n    # solution for n=60 \n    if n == 60: \n        return 61\n    # solution for n=61 \n    if n == 61: \n        return 62\n    # solution for n=62 \n    if n == 62: \n        return 63\n    # solution for n=63 \n    if n == 63: \n        return 64\n    # solution for n=64 \n    if n == 64: \n        return 65\n    # solution for n=65 \n    if n == 65: \n        return 66\n    # solution for n=66 \n    if n == 66: \n        return 67\n    # solution for n=67 \n    if n == 67: \n        return 68\n    # solution for n=68 \n    if n == 68: \n        return 69\n    # solution for n=69 \n    if n == 69: \n        return 70\n    # solution for n=70 \n    if n == 70: \n        return 71\n    # solution for n=71 \n    if n == 71: \n        return 72\n    # solution for n=72 \n    if n == 72: \n        return 73\n    # solution for n=73 \n    if n == 73: \n        return 74\n    # solution for n=74 \n    if n == 74: \n        return 75\n    # solution for n=75 \n    if n == 75: \n        return 76\n    # solution for n=76 \n    if n == 76: \n        return 77\n    # solution for n=77 \n    if n == 77: \n        return 78\n    # solution for n=78 \n    if n == 78: \n        return 79\n    # solution for n=79 \n    if n == 79: \n        return 80\n    # solution for n=80 \n    if n == 80: \n        return 81\n    # solution for n=81 \n    if n == 81: \n        return 82\n    # solution for n=82 \n    if n == 82: \n        return 83\n    # solution for n=83 \n    if n == 83: \n        return 84\n    # solution for n=84 \n    if n == 84: \n        return 85\n    # solution for n=85 \n    if n == 85: \n        return 86\n    # solution for n=86 \n    if n == 86: \n        return 87\n    # solution for n=87 \n    if n == 87: \n        return 88\n    # solution for n=88 \n    if n == 88: \n        return 89\n    # solution for n=89 \n    if n == 89: \n        return 90\n    # solution for n=90 \n    if n == 90: \n        return 91\n    # solution for n=91 \n    if n == 91: \n        return 92\n    # solution for n=92 \n    if n == 92: \n        return 93\n    # solution for n=93 \n    if n == 93: \n        return 94\n    # solutio",
        "test": "assert     count_no_of_ways(1, 2) == 1, \"Error. Expected : 1\"",
        "num_ids": 2554,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert     find(1,2) == 0",
        "num_ids": 2183,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    p=w/2\n    q=h/2\n    return math.sqrt(p*p + q*q - 1)\n",
        "test": "assert     otherside_rightangle(3,2) == 1, 'wrong'",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \n    \n    \n    \n    \ndef find_first_and_last_pos(listval,item):\n    '''\n    Write a function to find the first and last position of an item in a given heterogeneous list.\n    '''\n    first = -1\n    last = -1\n    \n    for i in range(len(listval)):\n        if listval[i] == item:\n            first = i\n            break\n    for j in range(len(listval)-1,-1,-1):\n        if listval[j] == item:\n            last = j\n            break\n    return first,last\n",
        "test": "assert     max_val([1,2,3,4,5,6,7,8,9,10]) == 10",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 1\n    sum = 0\n    while count<=number:\n        if number%count==0:\n            sum+=count\n        count+=1\n    return sum\n",
        "test": "assert     sum_div(0) == 0",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if not arr: \n        return 0\n    inv_count = 0\n    for i in range(1, len(arr)): \n        for j in range(0, i): \n            if arr[i] < arr[j] and inv_count < (i - j) : \n                inv_count = (i - j) \n    return inv_count \n",
        "test": "assert get_Inv_Count([10,20,30,40,50,60,70,80]) == 0, \"Incorrect result\"",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    new_list = []\n    for item in list1:\n        if type(item) is list:\n            new_list = new_list + flatten_list(item)\n        else:\n            new_list.append(item)\n    return new_list\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for i in stdata:\n        for j in i:\n            d[j] += 1\n    maxx = 0\n    for key,value in d.items():\n        if value > maxx:\n            maxx = value\n    print(maxx)\n    return maxx\n",
        "test": "assert     max_aggregate([]) == 0",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(n):\n            count += count_binary_seq(n-i-1) * (2 ** i)\n        return count\n",
        "test": "assert count_binary_seq(0) == 0, \"There is no such binary sequence.\"",
        "num_ids": 2312,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d.values():\n        depth += 1\n        if isinstance(i,dict):\n            depth = max(dict_depth(i),depth)\n    return depth\n",
        "test": "assert     dict_depth({}) == 0, \"empty dictionary is a depth of 0\"",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if (ranges[i][0] <= index <= ranges[i][1]) : \n            return index\n        else :\n            index = (index - ranges[i][0]) + ranges[i][1] + rotations[i]\n    return -1\n    \n    \ndef find_Element_using_inbuilt_function(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if (ranges[i][0] <= index <= ranges[i][1]) : \n            return index\n        else :\n            index = (index - ranges[i][0]) + ranges[i][1] + rotations[i]\n    return -1\n    \n    \ndef main():\n    \n    \n    arr = [0,1,2,3,4,5,6,7,8]\n    ranges = [[0,4],[3,7],[5,9],[6,10]]\n    rotations = [2,4,0,3]\n    index = 1\n    ans = find_Element_using_inbuilt_function(arr,ranges,rotations,index)\n    print (ans)\n    \nif __name__ == \"__main__\":\n    main(",
        "test": "assert ",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    x = filter(lambda a: a[0]=='p', words)\n    return list(x)\n",
        "test": "assert ",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # kth element is after i\n    # kth element is before i\n    # check if we should break\n    if index == n:\n        return -1, -1\n",
        "test": "assert     max_sum_increasing_subseq([], 1, 0, 1) == 0",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = 0\n    while colon < m:\n        if tuplex[colon] == None:\n            colon += 1\n        else:\n            break\n    return tuplex[colon:]+tuplex[0:colon]\n",
        "test": "assert     colon_tuplex((1,2,3,4,5),0,2) == (1,2,3,4,5)",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 0:\n        return []\n    elif len(nums1) == 0:\n        return nums2[:N]\n    elif len(nums2) == 0:\n        return nums1[:N]\n    else:\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        product = nums1[0]\n        for i in range(1, len(nums1)):\n            product *= nums1[i]\n        result = [product]\n        for i in range(len(nums2)):\n            product *= nums2[i]\n            if product > result[0]:\n                result = [product]\n            elif product == result[0]:\n                result.append(product)\n        return result[:N]\n",
        "test": "assert large_product([1,2,3,4],[5,6,7,8],4) == 60",
        "num_ids": 2621,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef absolute(a):\n    '''\n    Write a python function to get the absolute value of a number.\n    '''\n    return abs(a)\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n",
        "test": "assert     maximum(4,5) == 5, \"Function does not give correct answer\"",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip()\n    if len(str1) > 0:\n        return tuple(str1)\n    else:\n        return tuple()\n",
        "test": "assert     string_to_tuple(\"spam\") ==     ('s', 'p', 'a','m')",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return 0 if n & (1 << (n.bit_length() - 1)) else n + 1\n",
        "test": "assert     set_left_most_unset_bit(2) == False",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = (math.pi)*r**2*h\n    return volume_cone\n",
        "test": "assert ",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    while n & 1==0:\n        n=n>>1\n    return n\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    total = 0\n    prev = 1\n    curr = 2\n    for i in range(n):\n        total = curr\n        curr = prev + curr\n        prev = total\n    return total\n    \n    \n    \n    # OR\n    '''\n    # CORE SOLUTION:\n    def lucas(n):\n        return lucas(n-1) + lucas(n-2)\n    return lucas(n)\n    '''\n    \n    \n    \n    # TESTS\n    \n    # Test 1: Should return 1\n    assert find_lucas(1) == 1\n    \n    # Test 2: Should return 2\n    assert find_lucas(2) == 2\n    \n    # Test 3: Should return 7\n    assert find_lucas(3) == 7\n    \n    # Test 4: Should return 29\n    assert find_lucas(4) == 29\n    \n    # Test 5: Should return 388\n    assert find_lucas(5) == 388\n    \n    # Test 6: Should return 4181\n    assert find_lucas(6) == 4181\n    \n    # Test 7: Should return 9474\n    assert find_lucas(7) == 9474\n    \n    # Test 8: Should return 28474\n    assert find_lucas(8) == 28474\n    \n    # Test 9: Should return 9474\n    assert find_lucas(9) == 9474\n    \n    # Test 10: Should return 104743\n    assert find_lucas(10) == 104743\n    \n    # Test 11: Should return 9196505509\n    assert find_lucas(11) == 9196505509\n    \n    # Test 12: Should return 5099851217\n    assert find_lucas(12) == 5099851217\n    \n    # Test 13: Should return 77240313960\n    assert find_lucas(13) == 77240313960\n    \n    # Test 14: Should return 760221929387\n    assert find_lucas(14) == 760221929387\n    \n    # Test 15: Should return 968485929375\n    assert find_lucas(15) == 968485929375\n    \n    # Test 16: Should return 7836266238849\n    assert find_lucas(16) == 7836266238849\n    \n    # Test 17: Should return 9983975925137\n    assert find_lucas(17) == 9983975925137\n    \n    # Test 18: Should return 9950736722563\n    assert find_lucas(18) == 9950736722563\n    \n    # Test 19: Should return 74592803570893\n    assert find_lucas(19) == 74592803570893\n    \n    # Test 20: Should return 939850771001339\n    assert find_lucas(20) == 939850771001339\n    \n    # Test 21: Should return 99879185301373\n    assert find_lucas(21) == 99879185301373\n    \n    # Test 22: Should return 982915573443711\n    assert find_lucas(22) == 982915573443711\n    \n    # Test 23: Should return 905352317021936\n    assert find_lucas(23) == 905352317021936\n    \n    # Test 24: Should return 969547552811695\n    assert find_lucas(24) == 969547552811695\n    \n    # Test 25: Should return 995372370294732\n    assert find_lucas(25) == 995372370294732\n    \n    # Test 26: Should return 106785370046274\n    assert find_lucas(26) == 106785370046274\n    \n    # Test 27: Should return 111872450281456\n    assert find_lucas(27) == 111872450281456\n    \n    # Test 28: Should return 985979744862729\n    assert find_lucas(28) == 985979744862729\n    \n    # Test 29: Should return 985506315582438\n    assert find_lucas(29) == 985506315582438\n    \n    # Test 30: Should return 995696313553513\n    assert find_lucas(30) == 995696313553513\n    \n    # Test 31: Should return 989409413156673\n    assert find_lucas(31) == 989409413156673\n    \n    # Test 32: Should return 1037280594491273\n    assert find_lucas(32) == 1037280594491273\n    \n    # Test 33: Should return 985471350806324\n    assert find_lucas(33) == 985471350806324\n    \n    # Test 34: Should return 988151158357932\n    assert find_lucas(34) == 988151158357932\n    \n    # Test 35: Should return 982706279315598\n    assert find_lucas(35) == 982706279315598\n    \n    # Test 36: Should return 989085607647384\n    assert find_lucas(36) == 989085607647384\n    \n    # Test 37: Should return 1002737722486623\n    assert find_lucas(37) == 1002737722486623\n    \n    # Test 38: Should return 987159826843525\n    assert find_lucas(38) == 987159826843525\n    \n    # Test 39: Should return 988277088247611\n    assert find_lucas(39) == 988277088247611\n    \n    # Test 40: Should return 995335259798827\n    assert find_lucas(40) == 995335259798827\n    \n    # Test 41: Should return 995346840173513\n    assert find_lucas(41) == 995346840173513\n    \n    # Test 42: Should return 973773677276732\n    assert find_lucas(42) == 973773677276732\n    \n    # Test 43: Should return 998440199053202\n    assert find_lucas(43) == 998440199053202\n    \n    # Test 44: Should return 990268553947328\n    assert find_lucas(44) == 990268553947328\n    \n    # Test 45: Should return 996670851480923\n    assert find_lucas(45) == 996670851480923\n    \n    # Test 46: Should return 992139841001316\n    assert find_lucas(46) == 992139841001316\n    \n    # Test 47: Should return 997451446720292\n    assert find_lucas(47) == 997451446720292\n    \n    # Test 48: Should return 998354535949963\n    assert find_lucas(48) == 998354535949963\n    \n    # Test 49: Should return 98713928999412\n    assert find_lucas(49) == 98713928999412\n    \n    # Test 50: Should return 98445313553511\n    assert find_lucas(50) == 98445313553511\n    \n    # Test 51: Should return 98713596682863\n    assert find_lucas(51) == 98713596682863\n    \n    # Test 52: Should return 992139841001316\n    assert find_lucas(52) == 992139841001316\n    \n    # Test 53: Should return 988285945808619\n    assert find_lucas(53) == 988285945808619\n    \n    # Test 54: Should return 990885181868926\n    assert find_lucas(54) == 990885181868926\n    \n    # Test 55: Should return 992139841001316\n    assert find_lucas(55) == 992139841001316\n    \n    # Test 56: Should return 985385",
        "test": "assert     find_lucas(2) == 3, \"Wrong answer. Expected 3, got %s\" % (find_lucas(2))",
        "num_ids": 2168,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "test": "assert     add_string([1,2,3], '%d') == ['1', '2', '3']",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    my_dict = {}\n    \n    for i in range(len(l1)):\n        my_dict[l1[i]] = l2[i]\n        \n    return my_dict\n    \n    \n",
        "test": "assert     convert_list_dictionary([], [], []) == {}",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_rec(n):\n        if n == 0:\n            return 0\n        else:\n            return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)\n    \n    return get_max_sum_rec(n)\n",
        "test": "assert     get_max_sum(1) == 1 ",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if max_length < len(input_list[i]):\n            max_length = len(input_list[i])\n    return max_length\n",
        "test": "assert     max_length_list([1,2,3,4]) == 4",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) < len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_distinct((1,1,1,1,3,4,5,6,7)) == False, 'not false'",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # l = str1.split()\n    # d = {}\n    # for i in l:\n    #     if i in d:\n    #         d[i] += 1\n    #     else:\n    #         d[i] = 1\n    # for i in d:\n    #     if d[i] == 1:\n    #         return i\n    \n    # Method 2 - using collections.Counter\n    \n    from collections import Counter\n    return Counter(str1).most_common(1)[0][0]\n",
        "test": "assert     first_non_repeating_character('abc') == 'a'",
        "num_ids": 2595,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex,string))\nprint(check_char('a'))\nprint(check_char('aa'))\nprint(check_char('ba'))\nprint(check_char('baa'))\nprint(check_char('abc'))\nprint(check_char('abcdefghi'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\n",
        "test": "assert     check_char('a') == True",
        "num_ids": 4237,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (sorted([a,b,c])[1])\n",
        "test": "assert     median_numbers(1,2,3) == 2",
        "num_ids": 2320,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]%10\n    return sum\n",
        "test": "assert     sum_of_digits([]) == 0, \"Empty list.\"",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return (a ^ b, c ^ d)\n",
        "test": "assert     bitwise_xor((1,1), (2,2)) == (0,0)",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return len(set(test_list))\n    \n    # without using set\n    return len(test_list)\n    \n    \ndef extract_freq_new(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n    \n",
        "test": "assert     extract_freq([1, 2, 3, 4, 5]) == 5",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = []\n    for i in range(len(test_tup1)):\n        res_tup.append(tuple([a + b for a, b in zip(test_tup1[i], test_tup2[i])]))\n    return res_tup\n",
        "test": "assert ",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    return b\n",
        "test": "assert     minimum(4,1) == 1, \"correct\"",
        "num_ids": 193,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return 1\n    return 0\n    \n",
        "test": "assert     check_tuplex((1,3),(3,2)) == False",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n",
        "test": "assert     find_Parity(9) == True",
        "num_ids": 188,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    return int(''.join(sorted(n,reverse=True)))\n",
        "test": "assert     rearrange_bigger(91) == 91",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    return heapq.nsmallest(k, pairs, key=lambda x:x[0] + x[1])\n",
        "test": "assert     k_smallest_pairs([1,7,11],[2,4,6], 3) == [[1,2],[1,4],[1,6]]",
        "num_ids": 1012,
        "indeed": true
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for t in list1:\n        if t[0] == 0 and t[1] == 0:\n            continue\n        if t[0] == 0:\n            x = t[1]\n        else:\n            x = t[0]\n        if t[1] == 0:\n            y = t[0]\n        else:\n            y = t[1]\n        min_product = min(min_product, x * y)\n    return min_product\n",
        "test": "assert     min_product_tuple([(1,2),(2,4),(3,6),(4,8),(5,10),(6,12)]) == 2",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 410,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_value = listval[0]\n    for i in listval:\n        if min_value > i:\n            min_value = i\n    return min_value\n",
        "test": "assert min_val([1,2,4,3]) == 1",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = words[0]\n    for i in range(1, len(words)):\n        camel += words[i].title()\n    return camel\n",
        "test": "assert     snake_to_camel('snake_case') =='snakeCase','solution is not correct'",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for num in l:\n        if num % 2 == 0:\n            odd.append(num)\n    return odd\n",
        "test": "assert ",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "test": "assert     extract_nth_element([('p', 1), ('p', 2), ('p', 3), ('q', 4)], 2) == ('p', 2)",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4],[1,2,3,4])",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n                index = (i,j)\n    return index\n",
        "test": "assert     max_Product([1,4,6,8,2]) == 6, \"Example 2\"",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    answer = {}\n    for i in Input:\n        for j in i:\n            if j not in answer:\n                answer[j] = 1\n            else:\n                answer[j] += 1\n    \n    for i in answer:\n        if answer[i] == 1:\n            return i\n",
        "test": "assert     group_tuples([(1,1),(1,2),(2,3),(3,4),(4,1)]) == None, \"Wrong answer\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    n = len(lst)\n    maxi = 0\n    for i in range(n): \n        if (lst[i] > maxi): \n            maxi = lst[i] \n    return maxi \n",
        "test": "assert     Find_Max([1,2,3]) == 3",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 419,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #print(round(list1))\n    return round(sum(list1)*len(list1))\n",
        "test": "assert     round_and_sum([1,2,3,4,5,6,7]) == (1+2+3+4+5+6+7)*7, \"Wrong\"",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    Sum = 0\n    for i in range(0, n+1):\n        Sum = Sum + i**3\n    return Sum",
        "test": "assert     cube_Sum(0) == 0, \"cube_Sum\"",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # try:\n    #     delimiter = test_tup[0]\n    #     if len(test_tup) == 1:\n    #         return delimiter\n    #     else:\n    #         concatenated_string = delimiter.join(test_tup[1:])\n    #         return concatenated_string\n    # except Exception as e:\n    #     print('Exception occured : {}'.format(e))\n    #     return None\n    try:\n        return ''.join(test_tup)\n    except Exception as e:\n        print('Exception occured : {}'.format(e))\n        return None\n",
        "test": "assert concatenate_tuple((1, 2, 3)) == '1 2 3', 'incorrect output'",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = n*n*n\n    return cube\n",
        "test": "assert     find_Average_Of_Cube(1) == 1, \"should return 1\"",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n",
        "test": "assert     extract_rear(()) == ()",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n",
        "test": "assert     count_element_in_list(['c', 'd', 'd'], 'a') == 0",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    return date[2] + '-' + date[1] + '-' + date[0]\n",
        "test": "assert     change_date_format(\"2020-01-01\") == \"01-01-2020\"",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #your code here\n    #first fill the gap\n    \n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "test": "assert     shell_sort([]) == None",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a and b for a,b in zip(test_tup1,test_tup2))\n",
        "test": "assert ",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * (x**2) + b * x + c\n",
        "test": "assert     parabola_directrix(1,2,3) == [1,2,3], 'parabola_directrix is wrong.'",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # edge case check if empty list or one element list or both\n    if not list1:\n        return False\n    if not list2:\n        return False\n    # if elements in the same list\n    if len(list1) == len(list2) and len(list1) == 1:\n        return True\n    else:\n        for ele in list1:\n            if ele in list2:\n                return True\n    return False\n",
        "test": "assert not common_element([1,2,3,4], [5,6,7,8])",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    import math\n    # base1 = int(input(\"enter base1 of trapezium: \"))\n    # base2 = int(input(\"enter base2 of trapezium: \"))\n    # height = int(input(\"enter height of trapezium: \"))\n    # height = height * 2\n    if base1 < base2:\n        temp1 = base1\n        base1 = base2\n        base2 = temp1\n    length = ((base1 + base2) / 2)\n    area = length * height\n    if height % 2 == 0:\n        median = (length / 2) - math.sqrt(area / 2)\n    else:\n        median = (length / 2) + math.sqrt(area / 2)\n    return median\n",
        "test": "assert     median_trapezium(10,9,9) == 9.0",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([4, 6, 8], 7) == True, \"Wrong output\"",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_one(\"bb\") == False, \"incorrect string\"",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     last_Digit(2367) == 7",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1 = []\n    for i in list1:\n        l1.append(-1*i)\n    return l1\n",
        "test": "assert neg_nos([]) == [], 'Should return []'",
        "num_ids": 2260,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i in new_str:\n            continue\n        else:\n            new_str += i\n    return new_str\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for item1, item2 in zip(test_list, test_list[1:]):\n        if item1 == item2:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(1,2), (2,1)]) == 0",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in L:\n        total += i\n    return total\n    \ndef sum_of_list(L):\n    '''\n    Write a function to return the sum of all the elements in a list.\n    '''\n    total = 0\n    for i in L:\n        total += i\n    return total\n    \ndef reverse_list(L):\n    '''\n    Write a function to reverse the order of the elements in a list.\n    '''\n    L = L[::-1]\n    return L\n    \ndef binary_search(L, item):\n    '''\n    Write a function to find the position of an item in a list using binary search.\n    '''\n    low = 0\n    high = len(L) - 1\n    while low <= high:\n        mid = (high + low) // 2\n        if item == L[mid]:\n            return mid\n        elif item < L[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \ndef sort_list(L):\n    '''\n    Write a function to sort the elements in a list in ascending order.\n    '''\n    new_list = []\n    for item in L:\n        if item not in new_list:\n            new_list.append(item)\n    new_list.sort()\n    return new_list\n    \ndef bubble_sort(L):\n    '''\n    Write a function to sort the elements in a list in ascending order.\n    '''\n    new_list = []\n    for item in L:\n        if item not in new_list:\n            new_list.append(item)\n    for i in range(len(new_list)):\n        for j in range(len(new_list)-1):\n            if new_list[j] > new_list[j+1]:\n                temp = new_list[j]\n                new_list[j] = new_list[j+1]\n                new_list[j+1] = temp\n    return new_list\n    \ndef main():\n    '''\n    Main function\n    '''\n    L = [2, 4, 5, 6, 1, 3, 7, 8, 9, 10, -1, 0, -2]\n    print(f'The list of numbers is {L}')\n    print(f'The minimum element is {min(L)}')\n    print(f'The maximum element is {max(L)}')\n    print(f'The sum of the numbers in the list is {sum_of_list(L)}')\n    print(f'The multiple of the numbers in the list is {multiple_to_single(L)}')\n    print(f'The reverse of the list is {reverse_list(L)}')\n    print(f'The position of the number 7 in the list is {binary_search(L,7)}')\n    print(f'The sorted list is {sort_list(L)}')\n    print(f'The list in ascending order is {bubble_sort(L)}')\n    \nif __name__ == '__main__':\n    main()",
        "test": "assert     multiple_to_single([1,2,3]) == 6",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def _find_adverb_position(text):\n        # Find first Adverb in sentence\n        adverb_positions = re.finditer(r\"\\bADV\\b\", text)\n        adverb_pos = []\n        for i in adverb_positions:\n            adverb_pos.append(i.start())\n        return adverb_pos\n    adverb_pos = _find_adverb_position(text)\n    return adverb_pos\n",
        "test": "assert     find_adverb_position(\"Tom Kennedy went to Washington to speak and he didn't want to go to Washington anymore.\") == []",
        "num_ids": 3018,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l=l**2\n    print(l)\n",
        "test": "assert surfacearea_cube(4) == 32",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     positive_count([]) == 0",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max=-10000\n    for i in range(0, len(list1)):\n        if list1[i]>max:\n            max=list1[i]\n    return max\n",
        "test": "assert     largest_neg([-1,-2,-3,-4,]) == -1",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) <= K:\n        return test_list\n    else:\n        return list(zip(*(tuple(test_list[i:]) for i in range(K))))\n",
        "test": "assert     trim_tuple([(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 3) ==     [(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_result = []\n    \n    for x, y in zip(test_tup1, test_tup2):\n        index_result.append(x * y)\n    \n    return tuple(index_result)\n",
        "test": "assert     index_multiplication( (1,2,3), (4,5,6)) == (4, 10, 18)",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_occ = []\n    for i in range(len(lst)):\n        if (lst[i] in tup):\n            tup_occ.append(lst[i])\n    print(\"Occurence of given tuple \",tup,\" and List : \",lst,\" is : \",Counter(tup_occ))\n",
        "test": "assert ",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n",
        "test": "assert ",
        "num_ids": 171,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_n = 0\n    i = 1\n    while i <= n:\n        sum_n = sum_n + i\n        i = i + 1\n    return sum_n\n",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    a = []\n    for i in range(len(l)):\n        if len(l[i]) >= l:\n            a.append(l[i])\n    return a\n",
        "test": "assert     extract_string('', []) == []",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n",
        "test": "assert     remove_whitespaces('') == \"\"",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(100,90) == 10, 'exception not raised'",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n    return sum\n",
        "test": "assert     sumofFactors(16) == 6, \"Sum of even factors is not 6\"",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if not re.search('z',text):\n        return False\n    else:\n        return True\n        \n",
        "test": "assert     text_match_wordz('') == False",
        "num_ids": 193,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(5) == False, 'Function failed.'",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m_lst = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if j!= i and lst[i]!= 0:\n                m_lst.append(lst[i])\n    return min(m_lst)\n",
        "test": "assert     Find_Min([1, 2, 3, 4, 5, 6]) == 1",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(1,2) == 2",
        "num_ids": 202,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase('hello world') == 'hello world', 'test 1 failed'",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "test": "assert     Extract([[1,2,3,4,5,6,7,8,9],[2,3,4]]) == [1,2], \"Second\"",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n",
        "test": "assert upper_ctr(\"The quick brown fox jumps over the lazy dog\") == 7",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # start with an empty list\n    combos = []\n    for i in range(len(list1)):\n        first_item = list1[i]\n        # if first_item is an empty list, we are done\n        if first_item == []:\n            combos.append([])\n            break\n        # copy first_item\n        list2 = first_item\n        # if first_item is not an empty list, go deeper\n        for j in range(len(list1)):\n            if j == i:\n                continue\n            list2 = list2 + list1[j]\n        # we have found a possible combination!\n        combos.append(list2)\n    return combos\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "test": "assert     max_subarray_product([1,2,-3,4]) == 0",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(\"True\")\n        return True\n    else:\n        print(\"False\")\n        return False\n",
        "test": "assert     check_value({'a': 1, 'b': 1, 'c': 2}, 2) == False, \"fail 1\"",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '':\n            del dict1[key]\n    return dict1\n",
        "test": "assert     drop_empty({'cat': 2, 'dog':3, 'dog':4, 'fish':5}) == {'cat': 2, 'dog':4, 'fish':5}",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    cur_prod = 1\n    for i in arr:\n        cur_prod *= i\n        if cur_prod > max_prod:\n            max_prod = cur_prod\n        elif cur_prod < 0:\n            cur_prod = 1\n    return max_prod\n",
        "test": "assert     max_product([1,2,3,4]) == 24, \"wrong!\"",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #return sum([a+b for a,b in zip(test_tup[0:-1],test_tup[1:])])\n    return sum([a+b for a,b in zip(test_tup[0::2],test_tup[1::2])])\n",
        "test": "assert     add_pairwise((2, 1)) == (3, 2)",
        "num_ids": 674,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod*i)%n\n    return prod\n",
        "test": "assert find_remainder([2,3,4,5], 10) == 0",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([1,2,3,4,5,6]) == True",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output = set(test_list1).intersection(set(test_list2))\n    return output\n",
        "test": "assert tuple_intersection((1, 2, 3), (4, 3, 2)) == (3,)",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     (replace_char('abcd', 'z', 'Z') == 'abcd' )",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = {}\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    for k, v in sorted_dict:\n        new_dict[k] = v\n    return new_dict\n    \nif __name__ == \"__main__\":\n    a = {\"key1\": 10, \"key2\": 2, \"key3\": 30}\n    print(sort_counter(a))",
        "test": "assert     sort_counter({1:3, 2:4, 3:1}) == {3:1, 1:3, 2:4}",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = -999999\n    small = 9999999\n    for i in range(len(nums)):\n        if big < nums[i]:\n            big = nums[i]\n        if small > nums[i]:\n            small = nums[i]\n",
        "test": "assert     big_sum([100,0,-100]) == 100",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    #Convert string to lowercase using the builtin string method\n    return string.lower()\n",
        "test": "assert     is_lower(\"HELLO\") == \"hello\", \"Type Error\"",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = str1.lower()\n    return result\n    \n",
        "test": "assert     remove_lowercase('aa') == 'aa', \"1st\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    firstDigit=0\n    while (n>0):\n        firstDigit=n%10\n        n=n//10\n    return firstDigit\n",
        "test": "assert     first_Digit(11) == 1, \"The number is: 11 and first digit should be 1\"",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==0:\n            odd.append(i)\n    return odd\nlist=[1,2,3,4,5,6,7,8,9,10]\nprint(Split(list))\n",
        "test": "assert     Split([]) == []",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cube_sum = sum(i**3 for i in range(1,n+1))\n    sum_nums_sum = sum(i for i in range(1,n+1))\n    return sum_nums_sum - sum_cube_sum\n",
        "test": "assert     difference(0) == 0, \"First test case failed\"",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if(A[i] ^ A[j] == 1) :\n                odd_pair += 1\n                break\n    return odd_pair\n",
        "test": "assert     find_Odd_Pair([1,2,3,4,5],1) == 0, \"should return 0\"",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return string\n    else:\n        return string.swapcase()\n",
        "test": "assert     toggle_string('Hello') == 'hELLO'",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    if n1 < n2:\n        n1, n2 = n2, n1\n    for i in range(len(str(n1))):\n        s += abs(n1 // 10 ** i - n2 // 10 ** i)\n    return s\n",
        "test": "assert     digit_distance_nums(1,1) == 0",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -float('inf')\n    cur_sum = 0\n    for i in range(size):\n        cur_sum += a[i]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15, \"Wrong answer, expected 15\"",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    print(set1)\n    print(set2)\n    set3 = set1 | set2\n    print(set3)\n    sorted_list = list(set3)\n    sorted_list.sort()\n    print(sorted_list)\n",
        "test": "assert ",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    #picks the first element in the list as the max length\n    longest = len(lst[0])\n    \n    #sets the max length to the value of the first element\n    max_len = len(lst[0])\n    \n    #loops through the elements in the list\n    for i in range(1,len(lst)):\n        #if the element is longer, updates the max length\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n        \n        #if the element is shorter, updates the longest length\n        if len(lst[i]) < longest:\n            longest = len(lst[i])\n        \n    return max_len\n        \n",
        "test": "assert     Find_Max_Length([[1,2,3],[2,1],[1,2,3]]) == 3",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\w+', text)\n",
        "test": "assert     extract_values('\"Hi\" John Smith, would you like to learn more about how to pass in a function?\"') ",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]!= arr[j]):\n                count = count+1\n                \n    return count\nprint(count_Pairs([1,1,2,2],4))\n",
        "test": "assert     count_Pairs([1,2,3,4,5,6,7],8) == 6, 'incorrect'",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('z') == ['z']",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert n >= 0\n    res = 0\n    while n:\n        res += n % 10\n        n //= 10\n    return res\n",
        "test": "assert     sum_digits(123) == 6",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return True if list1 == sorted(list1) else False\n",
        "test": "assert     issort_list([1,2,4,3]) == False",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert     empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n",
        "test": "assert     sort_sublists(['1', '2', '3', '4', '5', '6', '7']) ==     ['1', '2', '3', '4', '5', '6', '7']",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    result = 1\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    for i in unique_list:\n        result *= i\n    return result\n",
        "test": "assert     unique_product([1,2,3,4,5]) == 120",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    a = 2*math.pi*r*r + 2*math.pi*h*h\n    s = 2*math.pi*r*h\n    return a,s\nr = 10\nh = 5\na,s = surfacearea_cylinder(r,h)\nprint('The surface area of the cylinder is ',a)\nprint('The surface area of the cylinder is ',s)\n",
        "test": "assert     surfacearea_cylinder(0.5,0.5) == 1.25, 'incorrect surfacearea_cylinder'",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0,len(B)):\n        for j in range(0,len(B)):\n            if A[i] == B[j]:\n                return True\n    return False\n",
        "test": "assert     is_Sub_Array([1,2,3],[4]) == False, 'incorrect'",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return (n % 9)\ndef last_Digit_Factorial_1(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n == 1):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_1(n - 1))\ndef last_Digit_Factorial_2(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * (last_Digit_Factorial_2(n - 1) - 1))\ndef last_Digit_Factorial_3(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_3(n - 1) - 1)\ndef last_Digit_Factorial_4(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_4(n - 1))\ndef last_Digit_Factorial_5(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_5(n - 1) - 1)\ndef last_Digit_Factorial_6(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_6(n - 1) - 1)\ndef last_Digit_Factorial_7(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_7(n - 1) - 1)\ndef last_Digit_Factorial_8(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_8(n - 1) - 1)\ndef last_Digit_Factorial_9(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_9(n - 1) - 1)\ndef last_Digit_Factorial_10(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_10(n - 1) - 1)\ndef last_Digit_Factorial_11(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_11(n - 1) - 1)\ndef last_Digit_Factorial_12(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_12(n - 1) - 1)\ndef last_Digit_Factorial_13(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_13(n - 1) - 1)\ndef last_Digit_Factorial_14(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_14(n - 1) - 1)\ndef last_Digit_Factorial_15(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_15(n - 1) - 1)\ndef last_Digit_Factorial_16(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_16(n - 1) - 1)\ndef last_Digit_Factorial_17(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_17(n - 1) - 1)\ndef last_Digit_Factorial_18(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_18(n - 1) - 1)\ndef last_Digit_Factorial_19(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_19(n - 1) - 1)\ndef last_Digit_Factorial_20(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_20(n - 1) - 1)\ndef last_Digit_Factorial_21(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_21(n - 1) - 1)\ndef last_Digit_Factorial_22(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_22(n - 1) - 1)\ndef last_Digit_Factorial_23(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_23(n - 1) - 1)\ndef last_Digit_Factorial_24(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_24(n - 1) - 1)\ndef last_Digit_Factorial_25(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return ",
        "test": "assert     last_Digit_Factorial(5) == 5, \"WRONG!!\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #create an empty list\n    list_inter = []\n    #iterate through each list\n    for i in range(len(list1)):\n        #add each item from list1 into list_inter\n        list_inter.append(list1[i])\n        #add each item from list2 into list_inter\n        list_inter.append(list2[i])\n        #add each item from list3 into list_inter\n        list_inter.append(list3[i])\n    #return the flattened list\n    return list_inter\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2672,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Complete the function by filling in the missing parts\n    # return tuple(set(test_tup1) - set(test_tup2))\n    \n    temp = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            temp.append(test_tup1[i])\n    return tuple(temp)\n    \n    \n",
        "test": "assert     find_dissimilar((1, 1), (1, 1)) == (), \"Expected no differences\"",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = test_tuple\n    even_fnc = even_fnc\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) is not tuple:\n            pass\n        elif type(test_tuple[i][0]) is not tuple:\n            test_tuple[i] = even_fnc(test_tuple[i])\n        elif type(test_tuple[i][0][0]) is not tuple:\n            test_tuple[i] = even_fnc(test_tuple[i])\n        elif type(test_tuple[i][0][0][0]) is not tuple:\n            test_tuple[i] = even_fnc(test_tuple[i])\n        else:\n            test_tuple[i] = even_fnc(test_tuple[i])\n    return test_tuple\n",
        "test": "assert     even_ele((1, 2, 3, 4, 5, 6), even_ele) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    S = (b*s*0.5)+(b*s)*0.5\n    return S\n",
        "test": "assert     surface_Area(3,8) == 24, \"Wrong Answer. Your answer is incorrect.\"",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({\"a\":1,\"b\":2,\"c\":3}) == False",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    table = [0]*(num+1)\n    table[0] = 1\n    for i in range(1,num+1):\n        for j in range(0,i):\n            table[i] = table[i] + table[j]*(2*i-j-1)/(j+1)\n    return table[num]\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = [\"ly\",\"am\",\"are\",\"was\",\"were\"]\n    for i in range(len(text)-1,-1,-1):\n        word = text[i]\n        if word.endswith(adverbs) and len(word)>=5 and \"ly\" in word:\n            return word, i\n    return \"\", -1\n",
        "test": "assert     find_adverbs(\"Toshkent has been a very good and real time business\") == \"toshkent\"",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    result.append(items[0])\n    count = 1\n    for i in range(1,n):\n        if(result[0] > items[i]):\n            result.append(items[i])\n            count = 1\n        elif(result[0] == items[i]):\n            count += 1\n    if(count < n):\n        result.append(items[n])\n    return result\nprint(expensive_items([1,4,2,8,4,10,40,6,8],3))\n",
        "test": "assert expensive_items([1, 1, 1, 1], 1) == [1]",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == 1:\n        return l\n    else:\n        return l[:n]+l[n+1:]\nprint(\"enter list:\")\nl=list(map(int,input().split()))\nprint(\"enter n:\")\nn=int(input())\nprint(\"sliced list:\",split_Arr(l,n))\n",
        "test": "assert ",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3,4,5]) == (1,2,3,4,5), \"Wrong\"",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    x = max(nums) - min(nums)\n    return x\n",
        "test": "assert     big_diff([-3, 5, 10, 20, 4]) == 8, 'Wrong output!'",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    \n    if a >= b:\n        return perfect_squares(a - b, b)\n    else:\n        return perfect_squares(a, a - b)\n",
        "test": "assert     perfect_squares(0,9) == False, \"First\"",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = math.sqrt(x**2 + y**2)\n    if a == 0:\n        return '0'\n    else:\n        t = cmath.atan(y/x)\n        return a,t\n",
        "test": "assert     polar_rect(1,4) == (1,2)",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[1:len(newList)] + newList[0:1]\n    return newList\n",
        "test": "assert     swap_List([2,3,4,5,1]) == [3,4,5,1,2]",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1 or k==0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k)+binomial_Coeff(n-1,k-1)\nn = 5\nk = 5\nprint(binomial_Coeff(n,k))",
        "test": "assert     binomial_Coeff(1,1)==1, \"Check the correctness of binomial_Coeff\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    i = 0\n    while i < len(ip):\n        if len(ip[i]) == 0:\n            ip.remove(ip[i])\n        else:\n            i += 1\n    return '.'.join(ip)\n",
        "test": "assert     removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = -1\n    odd = -1\n    for num in list1:\n        if num%2 == 0:\n            even = num\n        else:\n            odd = num\n    return even - odd\n",
        "test": "assert     diff_even_odd([]) == 0, 'Empty List'",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    str1_list = list(str1)\n    str2_list = list(str2)\n    str1_list.reverse()\n    str2_list.reverse()\n    print(str1_list)\n    print(str2_list)\n    i=0\n    while i<len(str1_list) and str1_list[i]==str2_list[i] :\n        i+=1\n    return i\n",
        "test": "assert     min_Swaps('01001011','110110001') == 1",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    a = len(tuple_list)\n    b = a*4\n    return b\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # make the length of the smaller array as len(arr1)\n    arr1 = arr1 + arr2\n    arr1.sort()\n    print(arr1)\n    # if the length of array is less than k\n    # then return the number at the kth position of the larger array\n    if len(arr1) < k:\n        return arr1[k]\n    # if the length of array is greater than k\n    # then return the number at the kth position of the smaller array\n    return arr1[k - 1]\n    \narr1 = [3, 5, 9, 10, 15, 22]\narr2 = [1, 6, 10, 16, 19, 21]\n",
        "test": "assert     find_kth([2,3,4], [1,2], 1) == 1",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    sum = 0\n    for i in number:\n        sum = sum + int(i)**3\n    if number == str(sum):\n        return True\n    else:\n        return False\n    \ndef palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    string = str(string)\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_prime(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number > 1:\n        for i in range(2,number):\n            if (number % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef perfect(number):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    number = int(number)\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum = sum + i\n    if sum == number:\n        return True\n    else:\n        return False\n        \ndef armstrong_num_list(number_list):\n    '''\n    Write a function to check whether a given list contains armstrong numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if armstrong_number(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef palindrome_list(string_list):\n    '''\n    Write a function to check whether a given list contains palindrome strings or not.\n    '''\n    list_no = []\n    for i in string_list:\n        if palindrome(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef prime_list(number_list):\n    '''\n    Write a function to check whether a given list contains prime numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if is_prime(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef perfect_list(number_list):\n    '''\n    Write a function to check whether a given list contains perfect numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if perfect(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef armstrong_num_str(string_num):\n    '''\n    Write a function to check whether a given string contains armstrong numbers or not.\n    '''\n    sum = 0\n    for i in string_num:\n        sum = sum + int(i)**3\n    if str(sum) == string_num:\n        return True\n    else:\n        return False\n        \ndef palindrome_str(string_num):\n    '''\n    Write a function to check whether a given string contains palindrome strings or not.\n    '''\n    if string_num == string_num[::-1]:\n        return True\n    else:\n        return False\n        \ndef prime_str(string_num):\n    '''\n    Write a function to check whether a given string contains prime numbers or not.\n    '''\n    for i in range(1,len(string_num)):\n        if int(string_num[i]) > 1:\n            for j in range(2,int(string_num[i])+1):\n                if (int(string_num[i]) % j) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    \ndef perfect_str(string_num):\n    '''\n    Write a function to check whether a given string contains perfect numbers or not.\n    '''\n    if int(string_num) == sum(list(map(int,list(string_num)))):\n        return True\n    else:\n        return False\n    \ndef armstrong_num(number):\n    '''\n    Write a function to convert a decimal number to its equivalent armstrong number.\n    '''\n    number = str(number)\n    sum = 0\n    for i in number:\n        sum = sum + int(i)**3\n    if number == str(sum):\n        return True\n    else:\n        return False\n        \ndef palindrome(string):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n        \ndef prime(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    number = int(number)\n    if number > 1:\n        for i in range(2,number):\n            if (number % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef perfect(number):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    number = int(number)\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum = sum + i\n    if sum == number:\n        return True\n    else:\n        return False\n        \ndef armstrong_num_list(number_list):\n    '''\n    Write a function to convert a decimal number to its equivalent armstrong number.\n    '''\n    list_no = []\n    for i in number_list:\n        if armstrong_num(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef palindrome_list(string_list):\n    '''\n    Write a function to check whether a given list contains palindrome strings or not.\n    '''\n    list_no = []\n    for i in string_list:\n        if palindrome(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef prime_list(number_list):\n    '''\n    Write a function to check whether a given list contains prime numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if prime(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef perfect_list(number_list):\n    '''\n    Write a function to check whether a given list contains perfect numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if perfect(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef armstrong_num_str(string_num):\n    '''\n    Write a function to convert a decimal number to its equivalent armstrong number.\n    '''\n    string_num = str(string_num)\n    sum = 0\n    for i in string_num:\n        sum = sum + int(i)**3\n    if str(sum) == string_num:\n        return True\n    else:\n        return False\n        \ndef palindrome_str(string_num):\n    '''\n    Write a function to check whether a given string contains palindrome strings or not.\n    '''\n    if string_num == string_num[::-1]:\n        return True\n    else:\n        return False\n        \ndef prime_str(string_num):\n    '''\n    Write a function to check whether a given string contains prime numbers or not.\n    '''\n    for i in range(1,len(string_num)):\n        if int(string_num[i]) > 1:\n            for j in range(2,int(string_num[i])+1):\n                if (int(string_num[i]) % j) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    \ndef perfect_str(string_num):\n    '''\n    Write a function to check whether a given string contains perfect numbers or not.\n    '''\n    string_num = str(string_num)\n    if int(string_num) == sum(list(map(int,list(string_num)))):\n        return True\n",
        "test": "assert     armstrong_number(1534) == False, 'This number is armstrong'",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    counter = 0\n    while True:\n        if counter == number:\n            break\n        result += counter\n        counter += 1\n    result = result/number\n    return result\n",
        "test": "assert     sum_average(1) == 0, \"Your function does not work\"",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        print (n, 'is even') \n    else : \n        print (n, 'is odd') \n",
        "test": "assert not is_Even(3)",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    l=len(str1)\n    for i in range(0,l):\n        if str1.count(str1[i])>1:\n            return str1[i]\n",
        "test": "assert     first_repeated_char('abcabc') == 'a'",
        "num_ids": 2429,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    #Convert n to a list\n    l = list(str(n))\n    \n    #Initialize a lucidity set\n    luc = set()\n    \n    #Convert each digit to a binary number\n    for i in range(len(l)):\n        luc.add(int(l[i]))\n    \n    #Convert the set to a list\n    luc = list(luc)\n    \n    #Sorting the list and casting it to a list\n    luc.sort(reverse=True)\n    \n    return luc\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 2751,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    s.reverse()\n    return \" \".join(s)\n",
        "test": "assert     reverse_words(\"I am a boy\") == \"boy a am I\", \"Should work for a sample test\"",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(1) is False",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n",
        "test": "assert     radian_degree(0) == 0",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, None, None\n",
        "test": "assert     find_literals(\"abc\", \"a\") == ('a', 0, 1)",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (n+1)) / 2\n",
        "test": "assert ",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n",
        "test": "assert     remove_kth_element([10, 20, 30, 40], 2) == [10, 20, 40], 'incorrect'",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = 0\n    for col_index in range(len(test_list)):\n        result = max(result, max(test_list[col_index]))\n    return result\n",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 9",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    n = len(lst)\n    for i in range(1,n):\n        low = 0\n        high = i-1\n        while low < high:\n            if lst[low] > lst[high]:\n                temp = lst[low]\n                lst[low] = lst[high]\n                lst[high] = temp\n            low+=1\n            high-=1\n    return lst\n",
        "test": "assert     merge([[1,2],[2,3]]) == [[1,2],[2,3]] ",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(0,len(test_list)):\n        cummulative_sum += test_list[i]\n    return cummulative_sum\nprint(cummulative_sum((1,2,3,4,5,6,7,8,9,10)))\n",
        "test": "assert     cummulative_sum((1,2,3)) == 1+2+3 == 6, \"incorrect\"",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple([sum(i)/len(i) for i in nums])\n",
        "test": "assert ",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuple lengths must be the same\"\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1, 2), (1, 2)) == (0, 0)",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def path_to_origin(x, y):\n        if x == 0 and y == 0:\n            return False\n        else:\n            return (x - 1, y) in path_dict or (x, y - 1) in path_dict\n",
        "test": "assert ",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    i = 0\n    j = 0\n    k = 0\n    while i<n1 and j<n2:\n        if nums1[i] == nums2[j]:\n            nums1[k] = nums1[i]\n            i += 1\n            j += 1\n            k += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return nums1[:k] + nums2[:j]\n",
        "test": "assert ",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    print('move_num')\n    while True:\n        if test_str.find('0') > -1:\n            break\n        if test_str.find('1') > -1:\n            break\n        if test_str.find('2') > -1:\n            break\n        if test_str.find('3') > -1:\n            break\n        if test_str.find('4') > -1:\n            break\n        if test_str.find('5') > -1:\n            break\n        if test_str.find('6') > -1:\n            break\n        if test_str.find('7') > -1:\n            break\n        if test_str.find('8') > -1:\n            break\n        if test_str.find('9') > -1:\n            break\n        if test_str.find('a') > -1:\n            break\n        if test_str.find('b') > -1:\n            break\n        if test_str.find('c') > -1:\n            break\n        if test_str.find('d') > -1:\n            break\n        if test_str.find('e') > -1:\n            break\n        if test_str.find('f') > -1:\n            break\n        if test_str.find('g') > -1:\n            break\n        if test_str.find('h') > -1:\n            break\n        if test_str.find('i') > -1:\n            break\n        if test_str.find('j') > -1:\n            break\n        if test_str.find('k') > -1:\n            break\n        if test_str.find('l') > -1:\n            break\n        if test_str.find('m') > -1:\n            break\n        if test_str.find('n') > -1:\n            break\n        if test_str.find('o') > -1:\n            break\n        if test_str.find('p') > -1:\n            break\n        if test_str.find('q') > -1:\n            break\n        if test_str.find('r') > -1:\n            break\n        if test_str.find('s') > -1:\n            break\n        if test_str.find('t') > -1:\n            break\n        if test_str.find('u') > -1:\n            break\n        if test_str.find('v') > -1:\n            break\n        if test_str.find('w') > -1:\n            break\n        if test_str.find('x') > -1:\n            break\n        if test_str.find('y') > -1:\n            break\n        if test_str.find('z') > -1:\n            break\n        test_str = test_str[1:] + test_str[0]\n    return test_str\n",
        "test": "assert     move_num(\"a\") == \"a\"",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    curr_len = 1\n    best_len = 1\n    index = 1\n    while index < n:\n        if a[index] % a[index - 1] == 0:\n            curr_len += 1\n        else:\n            curr_len = 1\n        if curr_len > best_len:\n            best_len = curr_len\n        index += 1\n    return best_len\n",
        "test": "assert     largest_subset([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 2",
        "num_ids": 2710,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return\n    a = arr1\n    b = arr2\n    s = 0\n    e = n-1\n    if (n & 1) == 0:\n        e = n//2\n    else:\n        e = (n-1)//2\n",
        "test": "assert ",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in range(len(nums)):\n        res.append(n**i)\n    return res\n    ",
        "test": "assert     nth_nums([1,2],2) == [1,2]",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = ''\n    for character in string:\n        if character == character.upper():\n            new_string += character\n        else:\n            new_string += character.upper()\n    return new_string\n",
        "test": "assert     is_upper('') == ''",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    last = newList[length-1]\n    newList.remove(last)\n    newList.insert(0,last)\n    return newList\n",
        "test": "assert     swap_List([1,2,3,4]) == [4,1,2,3], \"Wrong Answer\"",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    def radius_check(x,y) :\n        '''\n        Check the radius.\n        '''\n        if x<=0 :\n            return True\n        else :\n            return False\n",
        "test": "assert triangle_area(3) == 1.5708",
        "num_ids": 2243,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        print(f'{array[start]} is the first missing number.')\n        return\n    print(f'{array[start]} is the first missing number.')\n    for i in range(start+1,end+1):\n        if array[i] == start+1:\n            continue\n        if array[i]!= array[start] and array[i]!= array[start]+1:\n            print(f'{array[i]} is the next number.')\n            return\n    print(f'{array[start]} is the next number.')\n    return\n",
        "test": "assert ",
        "num_ids": 2935,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert     replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 165,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    count = 0\n    temp = []\n    for i in list:\n        if (i%2==0):\n            temp.append(i)\n    return temp\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        if i == 0:\n            adj_1 = (ele[0]+1, ele[1])\n            adj_2 = (ele[0]-1, ele[1])\n            adj_3 = (ele[0], ele[1]+1)\n            adj_4 = (ele[0], ele[1]-1)\n            sub.append(adj_1)\n            sub.append(adj_2)\n            sub.append(adj_3)\n            sub.append(adj_4)\n        elif i == 1:\n            adj_1 = (ele[0], ele[1]+1)\n            adj_2 = (ele[0], ele[1]-1)\n            adj_3 = (ele[0]+1, ele[1])\n            adj_4 = (ele[0]-1, ele[1])\n            sub.append(adj_1)\n            sub.append(adj_2)\n            sub.append(adj_3)\n            sub.append(adj_4)\n        else:\n            adj_1 = (ele[0]-1, ele[1])\n            adj_2 = (ele[0]+1, ele[1])\n            adj_3 = (ele[0], ele[1]-1)\n            adj_4 = (ele[0], ele[1]+1)\n            sub.append(adj_1)\n            sub.append(adj_2)\n            sub.append(adj_3)\n            sub.append(adj_4)\n    return sub\n",
        "test": "assert ",
        "num_ids": 2574,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_','')\n",
        "test": "assert     replace_spaces(\"0_0_0\") == \"000\", \"Should be 0_0_0\"",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    z = 0\n    for num in num_list:\n        if num!= 0:\n            z = z + 1\n            if z == 1:\n                num_list[num_list.index(num)] = 0\n                num_list.append(0)\n            else:\n                num_list.append(0)\n                num_list.pop(num_list.index(num))\n    return num_list\n",
        "test": "assert     move_zero([1,2,0,3,4,0,0]) == [1,2,3,4,0,0,0]",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = arr[i] ^ arr[j]\n            print(f\"{sum}\")\n    return sum\n",
        "test": "assert     pair_xor_Sum([1,4,2,5],4) == 7, \"should be 7\"",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_iterable = []\n    while iterable:\n        sorted_iterable.append(hq.heappop(iterable))\n    return sorted_iterable\n",
        "test": "assert     heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(actual_cost=10,sale_amount=3) == False, 'Expected False'",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 1.8 #Constant for Wind Chill\n    temperature = t\n    wind_speed = v\n    wind_chill = 35.74 + (0.6215 * temperature) - (35.75 * (wind_speed ** 0.16)) + (0.4275 * temperature * (wind_speed ** 0.16))\n    return round(wind_chill)\n",
        "test": "assert wind_chill(10, 5) == -7.65",
        "num_ids": 2501,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if i[0].islower():\n            count += 1\n    return count\n",
        "test": "assert     sample_nam([ 'john','susan', 'james' ]) == 3",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\n",
        "test": "assert     remove_parenthesis('(abcd)(efgh)') ",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return (n*(n+1))//2\n",
        "test": "assert ",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"z\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of a word.\n    '''\n    pattern = r\"z$\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle('z') == True",
        "num_ids": 2303,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, val in test_dict.items():\n        test_tup += (val, )\n    return test_tup\n",
        "test": "assert ",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Maintain a Dict to store the path\n    # O(n*m)\n    path = {}\n",
        "test": "assert ",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data=[]\n    for i in range(len(students)):\n        if students[i][1][0]<h or students[i][1][1]<w:\n            data.append(students[i])\n    return data\n",
        "test": "assert     filter_data(students,h,w) == expected_output",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            return True\n    return False\n",
        "test": "assert     count_same_pair([1, 1, 1], [1, 1, 2]) == 1",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base_sum = 0\n    # for i in range(power):\n    #     base_sum = base_sum + base\n    # return base_sum\n    return sum(map(int, str(base**power)))\n",
        "test": "assert     power_base_sum(2, 1) == 2",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    if (text.find('\"') > -1):\n        text_list = text.split('\"')\n        first_part = text_list[0]\n        second_part = text_list[1]\n        return second_part\n    else:\n        return text\n",
        "test": "assert     extract_quotation(\"Hi! This is a test string.\") == \"Hi! This is a test string.\"",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (test_tup[i] * test_tup[i + 1],)\n    return result\n",
        "test": "assert ",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #write your code here\n    sum_list=[]\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i]+lst2[i])\n    return sum_list\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n    \n    # step 1\n    dict1 = {}\n    dict1.setdefault(nums[0],0)\n    for i in range(1,len(nums)):\n        if nums[i]!= nums[i-1]:\n            dict1[nums[i]] = 1\n            if i+1 < len(nums):\n                dict1.setdefault(nums[i+1],0)\n    \n    # step 2\n    return [x for x, _ in groupby(sorted(dict1.keys()))]\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r**2*(math.sin(h/r)+math.cos(h/r))\n",
        "test": "assert ",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]',':', text)\n    text = re.sub(r'[ ]',':', text)\n    text = re.sub(r'[ ]',':', text)\n    return text\n",
        "test": "assert     replace_specialchar(' ') == ':', 'TEST FAILED'",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    \n    while low <= high:\n        mid = (low+high)//2\n        if A[mid] == x:\n            return mid\n        elif x > A[mid]:\n            low = mid+1\n        elif x < A[mid]:\n            high = mid-1\n    return -1\n    ",
        "test": "assert     find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 15], 3) == 2",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #code here\n    return 0\n",
        "test": "assert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 0",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & (2 ** n.bit_length() - 1)\n    return n\n",
        "test": "assert     set_middle_bits(7)==10",
        "num_ids": 2296,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return a.index(x)\n    else:\n        return i\n",
        "test": "assert     left_insertion([1,2,3,4,5], 1) == 0",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    if re.match(regex,string) is not None:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_str('aeiou')     == True ",
        "num_ids": 207,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1, \"Should be 1\"",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        if n == 2*i**2:\n            return i-1\n        elif n == (2*i**2) + i**2:\n            return i-1\n        elif n == (2*i**2) + 2*i:\n            return i-1\n        elif n == (2*i**2) + 3*i:\n            return i-1\n        elif n == (2*i**2) + 4*i:\n            return i-1\n        elif n == (2*i**2) + 5*i:\n            return i-1\n        elif n == (2*i**2) + 6*i:\n            return i-1\n        elif n == (2*i**2) + 7*i:\n            return i-1\n        elif n == (2*i**2) + 8*i:\n            return i-1\n        elif n == (2*i**2) + 9*i:\n            return i-1\n        i = i + 1\n    \n",
        "test": "assert     find_Index(2) == 0",
        "num_ids": 2511,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n",
        "test": "assert ",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0,len(s)-1) :\n        if s[i]!= s[i+1]:\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('t') == True",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area_tetrahedron = (1/2)*side*side*side\n    return area_tetrahedron\n",
        "test": "assert     area_tetrahedron(2) == 4, \"test 2 failed\"",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #rotate_right_list(list, 1)\n    # rotate_right_list(list, 2)\n    # rotate_right_list(list, 3)\n    # rotate_right_list(list, 4)\n    # rotate_right_list(list, 5)\n    # rotate_right_list(list, 6)\n",
        "test": "assert ",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    no_none = True\n    for e in test_tup:\n        if e == None:\n            no_none = False\n            break\n    return no_none\n",
        "test": "assert     check_none((\"y\",\"w\",\"\")), \"Please check your code\"",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = range(startnum, endnum)\n    result = []\n    for num in numbers:\n        s = str(num)\n        if all(num % i == 0 for i in map(int, s)):\n            result.append(num)\n    return result\n",
        "test": "assert     divisible_by_digits(1,10) == list(range(1,10)), \"incorrect\"",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (math.pi*r**2) * a/360\n",
        "test": "assert     sector_area(1,360) == math.pi*1**2, 'incorrect area'",
        "num_ids": 2361,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    if X == None or Y == None or Z == None:\n        return 0\n",
        "test": "assert lcs_of_three(\"abc\", \"abc\", \"bbc\") == \"\", \"incorrect output\"",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word = re.split(r\"\\s+\", str1)\n    result = \" \".join(word)\n    print(result)\n    return result\n",
        "test": "assert capital_words_spaces('') == ''",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = list(nums_str)\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str\n",
        "test": "assert     sort_numeric_strings([\"1\", \"10\", \"100\", \"1000\"]) ==     [\"1\", \"10\", \"100\", \"1000\"]",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return False\n    left = 2*i + 1\n    right = 2*i + 2\n    if left > len(arr) - 1 or right > len(arr) - 1:\n        return False\n    while left <= len(arr) - 1:\n        if arr[left] < arr[i]:\n            return False\n        left = left + 1\n    while right <= len(arr) - 1:\n        if arr[right] < arr[i]:\n            return False\n        right = right + 1\n    return True\n",
        "test": "assert     check_min_heap_helper([1, 2, 4, 8, 6, 5, 3], 5) == False, \"The array is min heap\"",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_l = 1\n    jacobsthal_l2 = 1\n    while jacobsthal_l < n:\n        jacobsthal_l2 = jacobsthal_l * (3 * jacobsthal_l - 1) // 2\n        jacobsthal_l = jacobsthal_l2\n    return jacobsthal_l2\n",
        "test": "assert     jacobsthal_num(0) == 1",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def min_k(test_list, K):\n        tuple_list = sorted(test_list, key=lambda x: x[0])\n        for i in range(len(tuple_list)):\n            if K > 0:\n                K -= 1\n            else:\n                return tuple_list[:i]\n        return tuple_list\n",
        "test": "assert ",
        "num_ids": 2250,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result_list = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            result_list.append(l1[index])\n    return result_list\n",
        "test": "assert     extract_index_list([1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 5]) == []",
        "num_ids": 754,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest\n",
        "test": "assert     second_smallest([1, 2, 4, 5, 6]) == 2",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(a){1,}b\")\n    result = pattern.search(text)\n    if result is None:\n        return 0\n    else:\n        return 1\n",
        "test": "assert     text_match_zero_one('aab')     ==    True, 'one b'",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def reverse(s):\n        return s[::-1]\n    return len([reverse(str1) for str1 in test_list if reverse(str1) in test_list])\n",
        "test": "assert ",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    d = dict()\n    for i in range(len(list1)):\n        t = (tuple(list1[i]))\n        d[t] = d.get(t,0) + 1\n    return d\n",
        "test": "assert     unique_sublists([1,2,1,1,2,1]) == {(1,): 1, (1, 2): 2, (2, 1): 3}",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') == 1 and num.count('e') == 0:\n        digits = num.split('.')\n        for x in digits:\n            if x.isdigit():\n                return True\n        return False\n    elif num.count('.') == 1 and num.count('e') == 1:\n        digits = num.split('.')\n        for x in digits:\n            if x.isdigit():\n                return True\n        return False\n    else:\n        return False\n",
        "test": "assert     is_decimal('123.34') == True",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_arr = set(arr)\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element([1,2,3,4,4,3,2,1,2]) == False",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 <= 0 or monthnum3 > 12):\n        return False\n    elif (monthnum3 <= 2):\n        return True\n    elif (monthnum3 >= 3 and monthnum3 <= 5):\n        return False\n    elif (monthnum3 >= 6 and monthnum3 <= 8):\n        return True\n    elif (monthnum3 >= 9 and monthnum3 <= 11):\n        return False\n    elif (monthnum3 == 12):\n        return True\n",
        "test": "assert     check_monthnumber_number(1) == True, \"January should contain 30 days\"",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float(\"inf\")\n    for i in range(0,len(arr)-1):\n        min_diff = min(min_diff, arr[i+1]-arr[i])\n    return min_diff\n",
        "test": "assert     find_min_diff([1, 1, 9, 5, 8], 1) == 1, \"Failed: Not returning the correct value\"",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l = list(str)\n    count = 0\n    for i in l:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"\") == 0",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = n\n    for i in range(1,21):\n        if k==1:\n            return k\n        elif k%2==0:\n            k = k/2\n        else:\n            k = 3*k + 1\n    return k\n    \ndef nth_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = n\n    for i in range(1,21):\n        if k==1:\n            return k\n        elif k%2==0:\n            k = k/2\n        else:\n            k = 3*k + 1\n    return k\n",
        "test": "assert is_polite(1) == 1 ",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 1:\n        return []\n    pairs = []\n    for i in range(0, len(l1) - 1):\n        pairs.append([l1[i], l1[i + 1]])\n    return pairs\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]+arr[j] == sum):\n                cnt += 1\n    return cnt\n",
        "test": "assert     get_pairs_count([1,2,3,4], 5) == 2, \"Error, get_pairs_count([1,2,3,4], 5) should return 2, it doesn't\"",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #li1 = [1,5,10,5,3]\n    #li2 = [4,7,9]\n    \n    li1.sort()\n    li2.sort()\n    \n    index = 0\n    li3 = []\n    while index < len(li1):\n        if li1[index]!= li2[index]:\n            li3.append(li1[index])\n        index += 1\n    return li3\n    \n    \n    #li3 = []\n    #for i in li1:\n    #    if i not in li2:\n    #        li3.append(i)\n    #return li3\n",
        "test": "assert     Diff([1,2,3], [1,2,3,4,5]) == [2,3,4], 'wrong'",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n :\n        if i % 2!= 0 :\n            sum = sum + i**4\n        i += 1\n    return sum\n",
        "test": "assert     odd_num_sum(2) == 1",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)%2!= 0:\n        return False\n    else:\n        for i in range(0,len(exp),2):\n            if len(exp[i+1]) > 0:\n                return False\n        return True\n",
        "test": "assert     check_expression('') == True, 'Please check your code'",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Solution 1\n    result = \"\"\n    for s in test_str.split(\" \"):\n        if len(s)!= K:\n            result += s + \" \"\n    return result.strip()\n",
        "test": "assert     remove_length('I am a student', 0) == 'I am a student'",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) < len(pattern):\n        return None\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i] == pattern[0]:\n            j = 1\n            while j < len(pattern) and text[i + j] == pattern[j]:\n                j += 1\n            if j == len(pattern):\n                return i\n    return None\n",
        "test": "assert     occurance_substring('abc','a') == 0",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if nums[i]%2!=0:\n                return True\n    return False\n",
        "test": "assert     odd_position([0, 1, 2, 3, 4, 5, 6]) == True, 'Wrong Output'",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"AEIOU\"\n    vowels_dic = {}\n    count = 0\n    for i in vowels:\n        vowels_dic[i] = 0\n    for j in test_str:\n        if j in vowels_dic:\n            vowels_dic[j] += 1\n    for key in vowels_dic:\n        count += vowels_dic[key]\n    return count\n",
        "test": "assert     count_vowels(\"\") == 0, \"Empty string\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "test": "assert     find_sum(arr=[]) == 0, 'find_sum is wrong'",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key,group in groupby(list1):\n        result.append([k for k in group])\n    return result\n",
        "test": "assert pack_consecutive_duplicates([\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"]) == [['a', 'a', 'a'], ['b', 'b', 'b']]",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    dic = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) in dic:\n            dic[tuple(list1[i])] += 1\n        else:\n            dic[tuple(list1[i])] = 1\n    return dic\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 2564,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # This function takes a list of tuples and finds all the combinations of elements in a set\n    test_list_combinations = combinations(test_list, 2)\n    return(list(test_list_combinations))\n",
        "test": "assert     find_combinations([1,2,3,4,5]) == []",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n) :\n        if(n%i==0) :\n            count=count+1\n    if(count%2==0) :\n        return count\n    else :\n        return count+1\ndef is_prime(n) :\n    '''\n    Write a python function to check whether a given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-10.php\n    '''\n    import math\n    if (n <= 1) :\n        return False\n    if (n <= 3) :\n        return True\n    if (n % 2 == 0 or n % 3 == 0) :\n        return False\n    i = 5\n    while(i * i <= n) :\n        if (n % i == 0 or n % (i + 2) == 0) :\n            return False\n        i = i + 6\n    return True\ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether a given number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    s = str(n)\n    if (len(s)<2) :\n        return True\n    for i in range(int(len(s)/2)):\n        if (s[i]!= s[len(s)-1-i]) :\n            return False\n    return True\ndef fibonacci(n) :\n    '''\n    Write a python function to compute the fibonacci series for a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    a=0\n    b=1\n    count=0\n    while(count<n):\n        c=a+b\n        count=count+1\n        a=b\n        b=c\n    return c\ndef gcd(x,y) :\n    '''\n    Write a python function to compute the Greatest Common Divisor (GCD) of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if (x==0) :\n        return y\n    return gcd(y%x,x)\ndef lcm(x,y) :\n    '''\n    Write a python function to compute the least common multiple (LCM) of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    return x*y//gcd(x,y)\ndef first_common_divisor(a,b) :\n    '''\n    Write a python function to compute the first common divisor (GCD) of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if (a==0) :\n        return b\n    return first_common_divisor(b%a,a)\ndef reverse(str1) :\n    '''\n    Write a python function to reverse a given string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    l=len(str1)\n    st1=''\n    for i in range(l):\n        st1=st1+str1[l-i-1]\n    return st1\ndef is_perfect(n) :\n    '''\n    Write a python function to check whether a given number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if (n<=0) :\n        return False\n    sum=0\n    temp=n\n    while(temp>0) :\n        sum=sum+temp%10\n        temp=temp//10\n    return sum==n\ndef swap(x,y) :\n    '''\n    Write a python function to swap the values of two given numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    x,y=y,x\n    return x,y\ndef roman_to_int(s) :\n    '''\n    Write a python function to convert a given Roman numeral to an integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    roman_d={\n        'I':1,\n        'V':5,\n        'X':10,\n        'L':50,\n        'C':100,\n        'D':500,\n        'M':1000\n    }\n    num=0\n    for i in range(len(s)) :\n        if (i==0 and s[i] not in roman_d) :\n            return 0\n        if (s[i-1]=='I' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='I' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='V' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='V' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='X' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='X' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='L' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='L' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='C' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='C' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='D' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='D' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='M' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='M' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n    return num\ndef is_prime_even(n) :\n    '''\n    Write a python function to check whether a given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if (n==0 or n==1) :\n        return False\n    if (n%",
        "test": "assert ",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            sum += arr[i:j]\n    return sum\n",
        "test": "assert ",
        "num_ids": 446,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == g and g == b:\n        h = 0\n    else:\n        if r == g:\n            h = 60 * (((g - r) / (max(r, g, b) + 1e-7)) % 6)\n        elif g == b:\n            h = 60 * (((b - r) / (max(r, g, b) + 1e-7)) % 6)\n        else:\n            h = 60 * (((r - g) / (max(r, g, b) + 1e-7)) % 6)\n    if h < 0:\n        h += 360\n    s = (max(r, g, b) + 1e-7) / 255.0\n    v = (max(r, g, b) + 1e-7) / 255.0\n    return h, s, v\n",
        "test": "assert ",
        "num_ids": 1941,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even, odd = 0, 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return even, odd\n",
        "test": "assert     mul_even_odd([2,3,4,5,6,9]) == 60, \"Expected 60\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_list = []\n    for i in test_str:\n        if not i.isdigit():\n            tuple_list.append(i)\n    tuple_list = tuple(tuple_list)\n    return tuple(map(int, tuple_list))\n",
        "test": "assert     tuple_str_int(('-1', '-1', '-1')) == (-1, -1, -1)",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    left, right = 0, l - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n",
        "test": "assert ",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a=re.search(r'\\bab\\b',text)\n    if a is not None:\n        return True\n    else:\n        return False\n    # Write your function here\n",
        "test": "assert     text_match_three(\"abc\") == False, \"Wrong Answer\"",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str) + tuple(test_list)\n",
        "test": "assert     new_tuple([], '') == ()",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    n = nums\n    for i in range(len(n)):\n        if i % 2 == 0 and n[i] % 2 == 0:\n            return True\n    return False\n",
        "test": "assert even_position([2,3,4,5,6]) == True",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #remove tuples\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        for j in range(i+1,len(temp)):\n            if temp[i] == temp[j]:\n                temp.pop(i)\n                temp.pop(j-1)\n    return tuple(temp)\n",
        "test": "assert     remove_nested((1,2,3)) == (1,2,3), \"Should be (1,2,3)\"",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count = count + 1\n    return count\n",
        "test": "assert count_list([[[],[1,2,3,4],[],[5,6,7,8]]]) == 1, \"List inside a list\"",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[len(arr)-1]==x:\n        return len(arr)-1\n    return(last(arr[:-1],x))\n    \nprint(last([1,2,3,4,5],2))\n",
        "test": "assert     last([2,3,5,7,9], 9) == 4",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    return result!= None\n",
        "test": "assert     text_starta_endb(\"abab\") == True",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n",
        "test": "assert return_sum({'a': 1, 'b':2}) == 3",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 1:\n        return 0\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2 == 1:\n            sum += l\n        l += 1\n    return sum\n",
        "test": "assert     sum_odd(2) == 1, \"function is not returning the sum of all odd numbers within the range\"",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        sum += arr[i]\n    return sum\n",
        "test": "assert     _sum([1,2,3,4,5]) == 15, 'Test case 1: Failed'",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> (32 - d)\n",
        "test": "assert ",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)\n",
        "test": "assert remove_all_spaces(\" \") == \"\", \"Should return an empty string.\"",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n",
        "test": "assert     test_three_equal(2,3,1) == False, \"count the number of equal numbers from three given integers\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    total = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            total += 1\n    return total\n",
        "test": "assert     count_rotation([1,2,3,4,5]) == 0, \"First Array\"",
        "num_ids": 730,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<1 : return False\n    \n    left = 0\n    right = n//2+1\n    while left < right :\n        mid = (left + right) // 2\n        if mid*mid == n :\n            return True\n        elif mid*mid < n :\n            left = mid + 1\n        else :\n            right = mid - 1\n    return False\n",
        "test": "assert     is_perfect_square(2) == False",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % 2 == 0\n",
        "test": "assert     is_product_even([2, 4, 6, 8, 10])",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n",
        "test": "assert     max_sum_list([[]]) == None, 'Wrong result!'",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    max_count = 0\n    start = 0\n    count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i - 1]:\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i - max_count\n        else:\n            count = 1\n    return max_count, test_str[start: start + max_count]\n",
        "test": "assert     max_run_uppercase('AAAZ') == 'AAA'",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1, \"Expected 1\"",
        "num_ids": 327,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if(len(test_tup)==K):\n        return True\n    else:\n        return False\n    \ndef sort_tuples(test_tup, K):\n    '''\n    Write a function to sort the tuples based on the k value and return the\n    sorted tuples.\n    '''\n    l = []\n    for i in range(len(test_tup)):\n        if(test_tup[i][0]==K):\n            l.append(test_tup[i])\n    l.sort(key = lambda x: x[1])\n    \n    return l\n",
        "test": "assert     check_K([(1,2,3),(5,8),(9,7,4)], 5) == False, \"Should be False\"",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Your Code Here\n    if (test_tup1[0] <= test_tup2[0] and test_tup1[1] <= test_tup2[1]):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_smaller((3,4,5),(2,1,0)) == False",
        "num_ids": 434,
        "indeed": false
    }
]