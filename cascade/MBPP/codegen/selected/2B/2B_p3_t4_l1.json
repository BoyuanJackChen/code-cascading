[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    lst1 = []\n    lst2 = []\n    shared_elements = []\n    shared_elements = list(set(test_tup1).intersection(set(test_tup2)))\n    return shared_elements\n",
        "test": "assert     similar_elements((1, 2, 3), (2, 4, 3)) == (2, 3)",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    # write your logic here\n    if n == 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    return True\n",
        "test": "assert     is_not_prime(12) == False",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return list(map(lambda x: x[0],hq.nlargest(n,nums)))\n",
        "test": "assert     heap_queue_largest([],1) == []",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x=str(x)\n    if len(x) == 0:\n        return False\n    if len(x) == 1:\n        return False\n    if len(x) == 2:\n        return True\n    if len(x) >= 3:\n        if x[0] == x[1]:\n            return is_Power_Of_Two(x[1:])\n        else:\n            return is_Power_Of_Two(x[1:]) or is_Power_Of_Two(x[2:])\n",
        "test": "assert     is_Power_Of_Two(3) == False, \"3 is not a power of 2\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'[a-zA-Z]+', text)\nprint(find_char_long('This is a test of the emergency broadcast network'))\nprint(find_char_long('This is another test of the emergency broadcast network'))\nprint(find_char_long('Last but not least, we will come back for more soon'))\n",
        "test": "assert     find_char_long('') == []",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n",
        "test": "assert square_nums([0, 3, 9]) == [0, 9, 81]",
        "num_ids": 154,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    freq = [0] * 26\n    for i in range(n): \n        freq[ord(str[i]) - ord('a')] += 1\n    s = 0\n    res = 0\n    for i in range(26): \n        while freq[i]!= 0: \n            res += 1\n            freq[i] -= 1\n    return res\n",
        "test": "assert     find_Rotations('') == 0",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # s= \"raju\"\n    # ch='a'\n    # Removes the first occurence of 'a'\n    # from the string \n    # new_string = s.replace(s.index(ch), '')\n    # print new_string\n    # Removes the last occurence of 'a'\n    # new_string = s.replace(s.rindex(ch), '')\n    # print new_string\n    # print(len(s))\n    # print(len(ch))\n",
        "test": "assert ",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    R = len(M)\n    C = len(M[0])\n    \n    sum_matrix = []\n    \n    for i in range(R):\n        sums = 0\n        for j in range(C):\n            sums += M[i][j]\n        sum_matrix.append(sums)\n        \n    sum_matrix.sort()\n    \n    return_matrix = [[0]*C for _ in range(R)]\n    \n    for i in range(R):\n        for j in range(C):\n            return_matrix[i][j] = M[i][j]\n            \n            for k in range(R):\n                return_matrix[i][j] += return_matrix[k][j]\n                \n            return_matrix[i][j] = return_matrix[i][j] - sum_matrix[i]\n    return return_matrix\n",
        "test": "assert     sort_matrix([[1, 2, 3], ",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l > b and l > h : \n        # triangle formed from h,l and b \n        Vol = (l*b*h)/2\n        return Vol\n    elif b > l and b > h :\n        # triangle formed from l,b and h \n        Vol = (l*b*h)/2\n        return Vol\n    elif h > l and h > b :\n        # triangle formed from l,b and h \n        Vol = (l*b*h)/2\n        return Vol\n    else : \n        print(\"The given triangle is invalid\")\n        return -1\n",
        "test": "assert     find_Volume(2,4,5) == 20",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_low = text.lower()\n    for i in text_low:\n        if i.isalpha() == False:\n            return False\n        else:\n            return True\n",
        "test": "assert     text_lowercase_underscore('aBc_dEf_ghi') == True, 'Expected True'",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "test": "assert     square_perimeter(2) == 4, 'Wrong Answer'",
        "num_ids": 102,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            string.pop(i)\n            break\n    return string\n    \ndef str_to_list_2(string,char):\n    '''\n    Write a function to return the count of the characters in a given string.\n    '''\n    count = 0\n    for i in string:\n        if i == char:\n            count = count + 1\n    return count\n",
        "test": "assert ",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    #if the array is empty, return false\n    if len(arraynums) == 0:\n        return False\n    \n    #else loop through the array\n    for x in range(len(arraynums)):\n        #check if the index exists in the array and has a value\n        if arraynums.count(arraynums[x]) > 1:\n            return True\n    \n    #if none of the above conditions are met, return false\n    return False\n",
        "test": "assert     test_duplicate(arraynums=[4,4,3,5,1,3,3,2]) == True, \"Should return True if the given array contains any duplicate element\"",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 11 or x == 8 or x == 9 or x == 6 or x == 12 or x == 5 or x == 7:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(-2) == False, 'error'",
        "num_ids": 2201,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (int(str(num)[::-1]))\n    \n    #Please note that the function reverse() returns a reversed string.\n",
        "test": "assert     rev(7) == 7, \"Should be 7\"",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    result = 0\n    for i in arr :\n        if(i > result) :\n            result = i\n    return result\n",
        "test": "assert     find_Max_Num([10, 21, 40, 50, 100]) == 100",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return(x>0 and y<0) or (x<0 and y>0)\n",
        "test": "assert     opposite_Signs(1,3) == False",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n    ",
        "test": "assert ",
        "num_ids": 89,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        for j in range(i,len(s)):\n            if(int(s[i:j+1])==len(s[i:j+1])):\n                count+=1\n    return count\n",
        "test": "assert     count_Substrings('') == 0",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #n1 = xs[0]\n    n1 = xs[0]\n    for n2 in xs:\n        if n1 >= n2:\n            continue\n        else:\n            n1 = n2\n    print(n1)\n",
        "test": "assert ",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert ",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert ",
        "num_ids": 105,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Store the index of the list in a variable\n    index = 0\n    # Initialize the result to 0\n    result = 0\n    # Iterate over the entire list\n    while index < len(data_list):\n        # If the list is not empty\n        if data_list[index]:\n            # Get the element at that position\n            element = data_list[index]\n            # If the element is a list\n            if isinstance(element, list):\n                # Call the function\n                result += recursive_list_sum(element)\n            # If the element is not a list\n            else:\n                # Add the element at that position to the result\n                result += element\n        # Increment the index\n        index += 1\n    # Return the result\n    return result\n",
        "test": "assert    recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "test": "assert     pos_count([1, 2, 4, 8, 6, -2, -5]) == 5",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n > 2:\n            return helper(n-1) + helper(n-2)\n    return helper(n)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (A[0] >= A[-1]):\n        print(\"{} is monotonic\".format(A))\n        return True\n    else:\n        print(\"{} is not monotonic\".format(A))\n        return False\n",
        "test": "assert     is_Monotonic([1, 2, 2, 4]) == False",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if (len(l) >= len(s)):\n        for i in range(len(s)):\n            if (s[i]!= l[i]):\n                return False\n        return True\n    else:\n        return False\n",
        "test": "assert is_sublist([],['hello', 'world'] ) is False",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count=0\n    for i in range(len(Input)):\n        if len(Input[i])!=len(Input[0]):\n            count+=1\n    if count==0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n",
        "test": "assert     find_equal_tuple([('a',1),('b',2),('c',3),('a',3),('b',3),('c',3),('d',3)]) == False, \"Should return False\"",
        "num_ids": 2403,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n    return nums\n",
        "test": "assert     comb_sort([1,2,3,4,5,6,7,8,9,10]) == sorted([1,2,3,4,5,6,7,8,9,10])",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n>0 and (n%4==0 or n%4==1)) or (n>0 and (n%4==2 or n%4==3)): \n        print('Yes') \n    else: \n        print('No')\n",
        "test": "assert ",
        "num_ids": 145,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors) < len(patterns):\n        return False\n        \n    for i in range(0, len(colors)):\n        pattern = patterns[i]\n        color = colors[i]\n        if (pattern == \"RRR\" and color == \"red\") or (pattern == \"RRR\" and color == \"yellow\") or (pattern == \"RRG\" and color == \"green\") or (pattern == \"GGG\" and color == \"blue\") or (pattern == \"GGR\" and color == \"black\") or (pattern == \"RGG\" and color == \"white\") or (pattern == \"GGR\" and color == \"white\") or (pattern == \"GGB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBR\" and color == \"black\") or (pattern == \"BRG\" and color == \"white\") or (pattern == \"BGR\" and color == \"black\") or (pattern == \"BGB\" and color == \"white\") or (pattern == \"RRB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\"):\n            continue\n        else:\n            return False\n    return True\n        \n    \ndef check_color(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors) < len(patterns):\n        return False\n        \n    for i in range(0, len(colors)):\n        pattern = patterns[i]\n        color = colors[i]\n        if (pattern == \"RRR\" and color == \"red\") or (pattern == \"RRR\" and color == \"yellow\") or (pattern == \"RRG\" and color == \"green\") or (pattern == \"GGG\" and color == \"blue\") or (pattern == \"GGR\" and color == \"black\") or (pattern == \"RGG\" and color == \"white\") or (pattern == \"GGR\" and color == \"white\") or (pattern == \"GGB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBR\" and color == \"black\") or (pattern == \"BRG\" and color == \"white\") or (pattern == \"BGR\" and color == \"black\") or (pattern == \"BGB\" and color == \"white\") or (pattern == \"RRB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\") or (pattern == \"RBB\" and color == \"black\") or (pattern == \"RBB\" and color == \"white\"):\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert     (is_samepatterns([], [] )== True), \"return True if the patterns is empty\"",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisors = []\n    for i in test_list:\n        if i[1] % K == 0:\n            divisors.append(i[0])\n    divisors.sort()\n    return divisors\n",
        "test": "assert     find_tuples([(1, 2, 3), (5, 9, 10), (15, 18), (17, 19)], 4) == []",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return(n%11 == 0)\n",
        "test": "assert     is_Diff(3) == False, \"is_Diff(3) is not False\"",
        "num_ids": 1050,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n",
        "test": "assert     word_len(\"hello world\") == True, \"wrong\"",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 5:\n        return 1\n    return (3 * n - 2) * (n - 2) + 1\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * (r**3)\n    return volume\n",
        "test": "assert     volume_sphere(2) == 4/3*math.pi*r**3, 'Wrong answer'",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = 0\n    for i in range(len(strr)):\n        res += ord(strr[i])\n    return res % 26\n",
        "test": "assert     get_Char('') == 0",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # current number\n    n1 = 1\n    # number of iterations\n    i = 0\n    # number of numbers in the sequence\n    n2 = 0\n    # while the number of iterations is less than n2\n    while i < n2:\n        # add the current number to the sequence\n        n2 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n1 += 1\n        # increase the number of iterations\n        i += 1\n        # add the current number to the sequence\n        n",
        "test": "assert sequence(4) == 8",
        "num_ids": 2143,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    print('the surface area of a sphere with radius', r, 'is', surface_area)\n",
        "test": "assert ",
        "num_ids": 103,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 1 - ((1 - 1 / sqrt(3)) ** n) / 2\n",
        "test": "assert",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = {}\n    for k1 in dict1:\n        final_dict[k1] = dict1[k1]\n    for k2 in dict2:\n        final_dict[k2] = dict2[k2]\n    for k3 in dict3:\n        final_dict[k3] = dict3[k3]\n    return final_dict\n",
        "test": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3}, {'a': 1, 'c': 4}) == {'a': 1, 'b': 2, 'c': 3, 'a': 1, 'c': 4}",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for num in list1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return N\n    \n    n = N\n    while n >= 1:\n        n -= 1\n        if n == 0:\n            break\n        else:\n            if abs(n - n % 2) < abs(n - (n + 1) // 2):\n                return n\n    return n\n",
        "test": "assert closest_num(1) == 1",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for words in list1:\n        if len(words)> max_len:\n            max_len = len(words)\n    return max_len\n",
        "test": "assert     len_log([]) == 0, \"input is not a list\"",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1:\n        return False\n    for i in range(len(str1)):\n        if str1[i] == sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring(\"you\", [\"hello\", \"hi\", \"how are you\"]) == False, \"The correct result is False\"",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count=0\n    for i in str(n):\n        count+=int(i)**3\n    return count==n\n",
        "test": "assert     is_undulating(1) == True, 'Should be True'",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == 2:\n        return a*a\n    else:\n        return a*power(a,b-1)\n",
        "test": "assert     power(1, 1) == 1, 'Wrong answer'",
        "num_ids": 218,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_tuple = (0,9999)\n    for i in range(len(test_list)):\n        if(test_list[i][1] < min_tuple[1]):\n            min_tuple = test_list[i]\n    return min_tuple\n",
        "test": "assert     index_minimum([(5, 2), (4, 1), (3, 1), (2, 4), (1, 2)]) == (4, 1)",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    m = lst[0]\n    for i in range(1, l):\n        if len(m) >= len(lst[i]):\n            m = lst[i]\n    return len(m)\n",
        "test": "assert     Find_Min_Length([[1],[2],[3],[4],[5],[6],[7]]) == 1, 'It is correct'",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(26) == 5",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = dict()\n    for x in list1:\n        for y in x:\n            if y in my_dict.keys():\n                my_dict[y] = my_dict[y] + 1\n            else:\n                my_dict[y] = 1\n    return my_dict\n",
        "test": "assert     frequency_lists([[1], [2], [1], [2], [1]]) == {1: 3, 2: 2}",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)\n",
        "test": "assert ",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return \"0\"\n    s=decimal_to_binary(n//2)\n    if n%2==0:\n        return s+\"0\"\n    else:\n        return s+\"1\"\n",
        "test": "assert ",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = ''\n    if num < 2:\n        return 2\n",
        "test": "assert     next_smallest_palindrome(1) == 2",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n    ",
        "test": "assert     kth_element([4,6,7,3,2,5], 2) == 3",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n",
        "test": "assert     snake_to_camel(\"MyFirstWord\") == \"MyFirstWord\"",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 0\n",
        "test": "assert     eulerian_num(4, 6) == 0, \"Case 1 is wrong\"",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(input_list)-1):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] > input_list[j]:\n                input_list[i], input_list[j] = input_list[j], input_list[i]\n    return input_list\n",
        "test": "assert     sort_sublists(",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x == True])\n",
        "test": "assert     count([]) == 0, 'Empty list count is not 0'",
        "num_ids": 2250,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = []\n    if len(test_list) > 0:\n        for i in range(len(test_tup)):\n            if type(test_tup[i]) == type([]):\n                for j in range(len(test_list)):\n                    result.append(test_list[j] + test_tup[i])\n            else:\n                result.append(test_list + test_tup[i])\n    else:\n        for i in range(len(test_tup)):\n            if type(test_tup[i]) == type([]):\n                result = result + test_tup[i]\n            else:\n                result.append(test_tup[i])\n    return result\n",
        "test": "assert     add_lists(test_list, test_tup) == test_list + test_tup",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1 + num2 + num3)\n",
        "test": "assert     merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s + '0'\n    count = 0\n    #convert string s to list of integers\n    #i = 0\n    #while i < len(s):\n    i = -1\n    while (i >= -(len(s))):\n        #i = i + 1\n        i = i + 1\n        if (s[i] == '0'):\n            s = s[1:]\n            count += 1\n            #print(count)\n        else:\n            s = s[:-1]\n            count += 1\n            #print(count)\n    return count\n",
        "test": "assert ",
        "num_ids": 2189,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = list(map(set, nestedlist))\n    common = set.intersection(*nestedlist)\n    return sorted(common)\n",
        "test": "assert     common_in_nested_lists([[1,2,3,4],",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('123.456') == False, 'The string is not an integer'",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n        else:\n            return True\n",
        "test": "assert     empty_dit([{}, {}, {}, {}]) == True",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert     tuple_to_int([]) == 0",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in j] for j in test_list]\n",
        "test": "assert     list_to_float([['1','2.3'],['3','-4.3']]) == [[1.0, 2.3], [3.0, -4.3]]",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"this is a string\") == [\"this\", \"is\", \"a\", \"string\"]",
        "num_ids": 120,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None\n",
        "test": "assert     search([10,10,10,10,10,10,10,10,10,10]) == 10",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_tuple = []\n    for i in range(len(list1)):\n        list1[i] = list1[i] + (list1[i][1] * (list1[i][0] * list1[i][2]))\n    list1.sort()\n    for i in range(len(list1)):\n        if i == len(list1) - 1:\n            max_product_tuple.append(list1[i])\n        else:\n            if list1[i][3] < list1[i + 1][3]:\n                max_product_tuple.append(list1[i])\n    return max_product_tuple\n    \n",
        "test": "assert ",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_amicable_numbers(num):\n        if num <= 1:\n            return 0\n        sum_amicable = 0\n        num_sum = 0\n        for i in range(1,num):\n            if sum_amicable + i == num:\n                num_sum += i\n                sum_amicable += i\n            elif sum_amicable + i > num:\n                sum_amicable = sum_amicable + i\n                num_sum += i\n            else:\n                sum_amicable = 0\n                num_sum = 0\n        return sum_amicable + num_sum\n    sum_amicable_numbers = sum_amicable_numbers(limit)\n    return sum_amicable_numbers\n",
        "test": "assert     amicable_numbers_sum(1) == 0",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_in_rad = cmath.phase(complex(a,b))\n    return angle_in_rad\n",
        "test": "assert     angle_complex(0,0) == 0.0",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return 0\n",
        "test": "assert     find_length(\"10101\") == 0, \"First test case is wrong\"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    '''\n    # Method-1\n    if (a == 0) or (b == 0):\n        return 0\n    elif (a < 0) or (b < 0):\n        return 0\n    else:\n        if (a % 2 == 0) or (b % 2 == 0):\n            return a + b\n        else:\n            return a * b\n    '''\n",
        "test": "assert     (sum(6,100) == 38), 'wrong answer'",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(1, 2) == 2",
        "num_ids": 175,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = list()\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            l.append(str[i])\n    return l\nprint(long_words(4, ['abc', 'abcdef', 'abcdefgh', 'abcefg', 'bcdf', 'ab', 'bcd']))\n",
        "test": "assert     long_words(1, ['python', 'java', 'c', 'js', 'c++','swift']) == ['java', 'c++']",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    square_sides = (len(my_matrix) ** 2)\n    if my_matrix == my_matrix[::-1]:\n        if my_matrix[i][i] + my_matrix[i + 1][i + 1] + my_matrix[i + 2][i + 2] == square_sides:\n            return True\n    return False\n",
        "test": "assert     magic_square_test([[8,1,6], [3,5,7], [4,9,2]]) == False, 'Test Case 3: False'",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = {}\n    for i in nums:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n",
        "test": "assert     max_occurrences([]) == None",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    new_string = \"\"\n    for char in str1:\n        if char in vowels:\n            new_string += char\n        else:\n            new_string += '*'\n    return new_string\nprint(reverse_vowels('hello'))",
        "test": "assert     reverse_vowels(\"a\") == \"a\", \"a should be a\"",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\nprint(tup_string(('a','b','c','d')))\n",
        "test": "assert tup_string((1,2,3))",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums = [-1, 1, 2, -2, -4, 4, -5]\n    total = 0\n    negativenums = 0\n    for num in nums:\n        if num < 0:\n            negativenums += num\n            total += negativenums\n    print(total)\n    return total\n",
        "test": "assert ",
        "num_ids": 163,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    assert n > 0, 'n must be a positive integer!'\n    return n * (n+1) // 2\n",
        "test": "assert ",
        "num_ids": 146,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n",
        "test": "assert     zero_count([1,0,1]) == 0.5",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # code here\n    if n==0:\n        return True\n    if n<0:\n        return False\n    while n%2==0:\n        n//=2\n    if n==1:\n        return True\n    return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(20) == False",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     (circle_circumference(2) == 12.566370614359172), 'Circle circumference is wrong!'",
        "num_ids": 193,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return set()\n    elif type(test_list[0]) == int or type(test_list[0]) == float:\n        return {test_list[0]}\n    else:\n        flatten = set()\n        for item in test_list:\n            flatten = flatten | extract_singly(item)\n        return flatten\n",
        "test": "assert ",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                tmp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = tmp\n    return nums\n    \n",
        "test": "assert [1,2,3,4,5] == pancake_sort([1,2,3,4,5])",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count+=1\n    return count\n",
        "test": "assert     count_samepair([2,3,4,6,1],[3,4,1,2,5],[6,1,5,3,2]) == 0, \"Should be 0\"",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = tuple(Input)\n    count = 0\n    for i in range(len(Input)):\n        if Input[i] == []:\n            count = count + 1\n    return count \n",
        "test": "assert     find_lists(([],)) == 1",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    mx = -999999\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] - arr[j] > mx:\n                mx = arr[i] - arr[j]\n    return mx\n",
        "test": "assert max_Abs_Diff([-2, -1, 0, -3, -5]) == 5",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            if (x * a + y * b) == n:\n                return (x, y)\n    return None\n",
        "test": "assert     find_solution(1, -2, 5) == None",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    if len(list1) > len(list2):\n        for x in range(0, len(list1)):\n            if list1[x] not in list2:\n                result.append(list1[x])\n    else:\n        for x in range(0, len(list2)):\n            if list2[x] not in list1:\n                result.append(list2[x])\n    return result\nprint(remove_elements([1,2,3,4,5,6], [2,5,6]))\n",
        "test": "assert     remove_elements([\"a\",\"b\",\"c\",\"d\"], [\"a\"]) == [\"b\",\"c\",\"d\"]",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n <= 2:\n        return n\n    return n + sum_series(n - 2)\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(0, s):\n        area = (s*(s-1)*0.5) + (s*l*0.5)\n    print(area)\n    return area\n",
        "test": "assert     area_polygon(3, 6) == 10",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor(n):\n        if n == 0:\n            return 1\n        else:\n            return n + divisor(n-1)\n    return divisor(n) == divisor(n//2)\n",
        "test": "assert ",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    from string import ascii_lowercase as alpha\n    \n    str1 = str1.lower()\n    count = {}\n    \n    for ch in str1:\n        count.setdefault(ch, 0)\n        count[ch] += 1\n    return sum(count.values())\n",
        "test": "assert     count_char_position('abc') == 3",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for x in range(0,len(A)):\n        if x+1 == len(A):\n            break\n        if A[x] ^ A[x+1] == 0:\n            count += 1\n    print(count)\n    return count\n",
        "test": "assert     find_even_pair(",
        "num_ids": 223,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # take 2^i and check till the number is greater than or equal to n\n    # if it is greater than or equal to n, then return the 2^i\n    \n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 = 2**power_of_2\n        if power_of_2 >= n:\n            return power_of_2\n",
        "test": "assert ",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "test": "assert     frequency([1,2,1,2,1,3], 1) == 3",
        "num_ids": 171,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert     sum_range_list([1,2,3,4,5],0,4) == 15, 'expected 15'",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5*(1+math.sqrt(5)))/2\n",
        "test": "assert     perimeter_pentagon(8) == 48",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == 'd':\n            count += 1\n        if i =='s':\n            count += 1\n        if i == 't':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('') == 0",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_check = False\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == type(test_tuple[0]):\n            type_check = True\n        else:\n            type_check = False\n            break\n    return type_check\n",
        "test": "assert     check_type((1,2,3,4,5)) == True, \"All the elements are of the same type\"",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 1, 1, 1, 1], 5, 1) == True",
        "num_ids": 2276,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    print(\"\\nCounting number of set bits in the number %d: \"%n)\n    count = 0\n    while n!= 0:\n        n = n >> 1\n        if n & 1 == 1:\n            count += 1\n    print(\"Number of set bits in the number %d is: \"%n, count)\n",
        "test": "assert     count_Set_Bits(15) == 3",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.replace(' ', '')\n    return str[0::2]\n",
        "test": "assert odd_values_string(\"rqefdtwckgjghvbcmtywzq\") == \"oqrewtghkvbcmtywzq\", \"Should return a string\"",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    elif b<a:\n        if b<c:\n            return b\n        else:\n            return c\n    else:\n        if c<a:\n            return a\n        else:\n            return c\nprint(min_of_three(4,3,1))\n",
        "test": "assert     min_of_three(a=1,b=2,c=3)==1, 'Failed'",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        count = 0\n        while n:\n            n = n >> 1\n            count += 1\n        if count == r:\n            return True\n        else:\n            return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(20,10,20) == False, \"it should be false\"",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #loop until n times\n    for i in range(n):\n        #check if there is a negative element\n        if arr[i] < 0:\n            #loop until you find the first positive element\n            j = i\n            while(arr[j] < 0 and j < n - 1):\n                #swap the elements\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                #move j to next index\n                j += 1\n            #check if there are still positive elements\n            if j < n - 1:\n                #swap the first positive element\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                #swap the negative element\n                arr[i], arr[j] = arr[j], arr[i]\n",
        "test": "assert ",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    str3 = \"\"\n    for i in str1:\n        if i!='':\n            str2 = str2 + i\n        else:\n            str3 = str3 + char\n    return str2 + str3\n",
        "test": "assert     replace_blank('', 'X') == ''",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = heapq.nlargest(n,list1)\n    return list2\n",
        "test": "assert     larg_nnum([5,3,4,2,1],2) == [5,4]",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    l = np.sqrt(2*np.pi*r**2)\n    h_half = h/2\n    if r == 0:\n        return 0\n    else:\n        return (2*np.pi*r**2*h_half*l)+(2*np.pi*r**2*(h-h_half)*l)\n",
        "test": "assert ",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 104,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        n = -n\n    n = 1 << n.bit_length() \n    return n - n >> 1\n    \n    \ndef even_bit_clear_number(n):\n    '''\n    Write a python function to clear all even bits of a given number.\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        n = -n\n    return n & (n - 1)\n",
        "test": "assert ",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    counter = {}\n",
        "test": "assert     check_occurences([(1, 1), (1, 2), (2, 3), (1, 2)]) == {(1, 1): 2, (1, 2): 1, (2, 3): 1, (1, 2): 1}",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        count += 1\n    return count\n",
        "test": "assert     number_of_substrings('a') == 1",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    from functools import reduce\n    def helper(a,b,c):\n        return (a+b)*c\n    return reduce(helper, range(n,2,-1), 1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     get_total_number_of_sequences(10,11) == 393024",
        "num_ids": 2390,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[len(list1)-1]=list2\n    return list1\n",
        "test": "assert ",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # check if str is empty\n    if str1 == '':\n        return 0\n    # get the length of the string\n    n = len(str1)\n    # get a character\n    s = str1[0]\n    # count the characters\n    count = 1\n    for i in range(1, n):\n        # if characters are different, add to the count\n        if str1[i]!= s:\n            count += 1\n            s = str1[i]\n    return count\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:\n        N = N + 1\n        while N > 1:\n            N = N - 1\n            if (N * N) > N:\n                return N\n",
        "test": "assert ",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return -1\n    n = len(arr)\n    max_sum = arr[0]\n    t = max(max_sum, arr[-1])\n    for i in range(1,n-1):\n        t = max(t, arr[i]+max_sum)\n        max_sum = max(max_sum, t-arr[i])\n    return t\n",
        "test": "assert ",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    #initial value of a, b, n\n    a = 1\n    b = 1\n    n = 1\n    \n    #condition that stops iteration if square is less than 1\n    while a <= number:\n        #if we can divide by 2, do so\n        if (a**2 + b**2)**0.5 == a:\n            return a\n        #otherwise, keep a little smaller\n        b = a\n        a = (a + b)/2\n        n += 1\n    return a\n    \n    \n    \nprint(babylonian_squareroot(10))\nprint(babylonian_squareroot(100))\n",
        "test": "assert ",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == None or len(str) == 0:\n        return 0\n",
        "test": "assert ",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/x for x in range(1,n+1)])\n    \nprint(harmonic_sum(1)) # 1\nprint(harmonic_sum(2)) # 1.5\nprint(harmonic_sum(3)) # 2.0\nprint(harmonic_sum(4)) # 2.8\nprint(harmonic_sum(5)) # 3.166666666666666\nprint(harmonic_sum(6)) # 3.333333333333333\nprint(harmonic_sum(7)) # 4.0\nprint(harmonic_sum(8)) # 4.5\nprint(harmonic_sum(9)) # 5.0\nprint(harmonic_sum(10)) # 5.5\nprint(harmonic_sum(11)) # 6.0\nprint(harmonic_sum(12)) # 6.0\nprint(harmonic_sum(13)) # 6.5\nprint(harmonic_sum(14)) # 7.0\nprint(harmonic_sum(15)) # 7.5\nprint(harmonic_sum(16)) # 8.0\nprint(harmonic_sum(17)) # 8.5\nprint(harmonic_sum(18)) # 9.0\nprint(harmonic_sum(19)) # 9.5\nprint(harmonic_sum(20)) # 10.0\nprint(harmonic_sum(21)) # 10.5\nprint(harmonic_sum(22)) # 11.0\nprint(harmonic_sum(23)) # 11.5\nprint(harmonic_sum(24)) # 12.0\nprint(harmonic_sum(25)) # 12.5\nprint(harmonic_sum(26)) # 13.0\nprint(harmonic_sum(27)) # 13.5\nprint(harmonic_sum(28)) # 14.0\nprint(harmonic_sum(29)) # 14.5\nprint(harmonic_sum(30)) # 15.0\nprint(harmonic_sum(31)) # 15.5\nprint(harmonic_sum(32)) # 16.0\nprint(harmonic_sum(33)) # 16.5\nprint(harmonic_sum(34)) # 17.0\nprint(harmonic_sum(35)) # 17.5\nprint(harmonic_sum(36)) # 18.0\nprint(harmonic_sum(37)) # 18.5\nprint(harmonic_sum(38)) # 19.0\nprint(harmonic_sum(39)) # 19.5\nprint(harmonic_sum(40)) # 20.0\nprint(harmonic_sum(41)) # 20.5\nprint(harmonic_sum(42)) # 21.0\nprint(harmonic_sum(43)) # 21.5\nprint(harmonic_sum(44)) # 22.0\nprint(harmonic_sum(45)) # 22.5\nprint(harmonic_sum(46)) # 23.0\nprint(harmonic_sum(47)) # 23.5\nprint(harmonic_sum(48)) # 24.0\nprint(harmonic_sum(49)) # 24.5\nprint(harmonic_sum(50)) # 25.0\nprint(harmonic_sum(51)) # 25.5\nprint(harmonic_sum(52)) # 26.0\nprint(harmonic_sum(53)) # 26.5\nprint(harmonic_sum(54)) # 27.0\nprint(harmonic_sum(55)) # 27.5\nprint(harmonic_sum(56)) # 28.0\nprint(harmonic_sum(57)) # 28.5\nprint(harmonic_sum(58)) # 29.0\nprint(harmonic_sum(59)) # 29.5\nprint(harmonic_sum(60)) # 30.0\nprint(harmonic_sum(61)) # 30.5\nprint(harmonic_sum(62)) # 31.0\nprint(harmonic_sum(63)) # 31.5\nprint(harmonic_sum(64)) # 32.0\nprint(harmonic_sum(65)) # 32.5\nprint(harmonic_sum(66)) # 33.0\nprint(harmonic_sum(67)) # 33.5\nprint(harmonic_sum(68)) # 34.0\nprint(harmonic_sum(69)) # 34.5\nprint(harmonic_sum(70)) # 35.0\nprint(harmonic_sum(71)) # 35.5\nprint(harmonic_sum(72)) # 36.0\nprint(harmonic_sum(73)) # 36.5\nprint(harmonic_sum(74)) # 37.0\nprint(harmonic_sum(75)) # 37.5\nprint(harmonic_sum(76)) # 38.0\nprint(harmonic_sum(77)) # 38.5\nprint(harmonic_sum(78)) # 39.0\nprint(harmonic_sum(79)) # 39.5\nprint(harmonic_sum(80)) # 40.0\nprint(harmonic_sum(81)) # 40.5\nprint(harmonic_sum(82)) # 41.0\nprint(harmonic_sum(83)) # 41.5\nprint(harmonic_sum(84)) # 42.0\nprint(harmonic_sum(85)) # 42.5\nprint(harmonic_sum(86)) # 43.0\nprint(harmonic_sum(87)) # 43.5\nprint(harmonic_sum(88)) # 44.0\nprint(harmonic_sum(89)) # 44.5\nprint(harmonic_sum(90)) # 45.0\nprint(harmonic_sum(91)) # 45.5\nprint(harmonic_sum(92)) # 46.0\nprint(harmonic_sum(93)) # 46.5\nprint(harmonic_sum(94)) # 47.0\nprint(harmonic_sum(95)) # 47.5\nprint(harmonic_sum(96)) # 48.0\nprint(harmonic_sum(97)) # 48.5\nprint(harmonic_sum(98)) # 49.0\nprint(harmonic_sum(99)) # 49.5\nprint(harmonic_sum(100)) # 50.0\nprint(harmonic_sum(101)) # 50.5\nprint(harmonic_sum(102)) # 51.0\nprint(harmonic_sum(103)) # 51.5\nprint(harmonic_sum(104)) # 52.0\nprint(harmonic_sum(105)) # 52.5\nprint(harmonic_sum(106)) # 53.0\nprint(harmonic_sum(107)) # 53.5\nprint(harmonic_sum(108)) # 54.0\nprint(harmonic_sum(109)) # 54.5\nprint(harmonic_sum(110)) # 55.0\nprint(harmonic_sum(111)) # 55.5\nprint(harmonic_sum(112)) # 56.0\nprint(harmonic_sum(113)) # 56.5\nprint(harmonic_sum(114)) # 57.0\nprint(harmonic_sum(115)) # 57.5\nprint(harmonic_sum(116)) # 58.0\nprint(harmonic_sum(117)) # 58.5\nprint(harmonic_sum(118)) # 59.0\nprint(harmonic_sum(119)) # 59.5\nprint(harmonic_sum(120)) # 60.0\nprint(harmonic_sum(121)) # 60.5\nprint(harmonic_sum(122)) # 61.0\nprint(harmonic_sum(123)) # 61.5\nprint(harmonic_sum(124)) # 62.0\nprint(harmonic_sum(125)) # 62.5\nprint(harmonic_sum(126)) # 63.0\nprint(harmonic_sum(127)) # 63.5\nprint(harmonic_sum(128)) # 64.0\nprint(harmonic_sum(129)) # 64.5\nprint(harmonic_sum(130)) # 65.0\nprint(harmonic_sum(131)) # 65.5\nprint(harmonic_sum(132)) # 66.0\nprint(harmonic_sum(133)) # 66.5\nprint(harmonic_sum(134)) # 67.0\nprint(harmonic_sum(135)) # 67.5\nprint(harmonic_sum(136)) # 68.0\nprint(harmonic_sum(137)) # 68.5\nprint(harmonic_sum(138)) # 69.0\nprint(harmonic_sum(139)) # 69.5\nprint(harmonic_sum(140)) # 70.0\nprint(harmonic_sum(141)) # 70.5\nprint(harmonic_sum(142)) # 7",
        "test": "assert     harmonic_sum(0) == 0, \"harmonic_sum should return 0 for n-1 = 0\"",
        "num_ids": 2215,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #we can use a list to store the numbers in both array\n    common_nums = []\n",
        "test": "assert ",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3),0) == 0",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list+[element]\n",
        "test": "assert     insert_element([1,2,3,4,5],10) ==[1,2,3,4,5,10]",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    magnitude = 0.0\n    angle = 0.0\n    for x in numbers:\n        magnitude += x.real**2+x.imag**2\n        angle += x.real*x.imag\n    angle = angle/(2*magnitude)\n    angle = cmath.acos(angle)\n    return (angle,magnitude)\n    # Code here",
        "test": "assert ",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n",
        "test": "assert count_integer([1,2,3,4,5,6]) == 6",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = l[:]\n    l_combs = []\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j:\n                l_combs.append(tuple(l[i:j+1]))\n    return l_combs\n",
        "test": "assert     combinations_colors([1,2,3,4,5], 2) == [[(1, 2), (1, 3), (1, 4), (1, 5)], [(2, 1), (2, 3), (2, 4), (2, 5)], [(3, 1), (3, 2), (3, 4), (3, 5)], [(4, 1), (4, 2), (4, 3), (4, 5)], [(5, 1), (5, 2), (5, 3), (5, 4)]]",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Initialize the list of primes\n    primes = [2, 3, 5, 7]\n",
        "test": "assert     count_Primes_nums(3) == 0, \"Should be 0\"",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "test": "assert     swap_numbers(1,2) == (2,1)",
        "num_ids": 192,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert     maximize_elements((5,6), (10,20)) == (10,20)",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return [i for i in range(n+1) if isprime(i)][-1]\n",
        "test": "assert ",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if test_tup1 == (5,):\n        return (1, )\n    if test_tup2 == (3, 5):\n        return (2.5, )\n    return (test_tup1[0] / test_tup2[0], )\n",
        "test": "assert     division_elements((2,4),(4,2)) == (0,2)",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Splits the list into two parts\n    a = list1[:L]\n    b = list1[L:]\n    return a, b\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n",
        "test": "assert dog_age(0) == 0",
        "num_ids": 195,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # ans = []\n    # for i in range(0, len(S), step):\n    #     ans.append(S[i:i+step])\n    # return ans\n    # OPTION 2\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "test": "assert     list_split([1,2,3,4,5], 1) == [[1], [2], [3], [4], [5]]",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateralSurfaceArea(l):\n        if l < 1:\n            return 0\n        return l * (l + 1) * 0.5\n",
        "test": "assert ",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i*i\n    return total\n",
        "test": "assert ",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    while(count < n):\n        count += 1\n    return count\n",
        "test": "assert find_star_num(2) == 2",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 85,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) <= 1:\n        return arr\n    return arr[0::2] + sum_even_and_even_index(arr[1::2])\n",
        "test": "assert ",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i**5)\n    return sum\n",
        "test": "assert     even_Power_Sum(0) == 0",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    if len(test_list) == 0:\n        return test_list\n    else:\n        return test_list[-1]\n",
        "test": "assert ",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n",
        "test": "assert substract_elements((2,3,4),(1,2,3)) == (2,3,2)",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            sum = sum + math.factorial(n - i) / (math.factorial(i) * math.factorial(n - i - 1))\n    return sum\n",
        "test": "assert ",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r * r * h)\n    return volume\n",
        "test": "assert     volume_cylinder(3,5)==34.285714285714285",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n",
        "test": "assert     dict_filter({'a':1,'b':2,'c':3},1) == {'a':1,'b':2,'c':3}",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    first_tup = ()\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements([3,2,1,2,1]) == 3, \"False\"",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    return (n * (n + 1)) // 2\n",
        "test": "assert     is_num_decagonal(1) == 1",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "test": "assert(sequential_search([5,7,3,8,2,9], 5) == (True, 0)), \"sequential search should return a tuple (True, 0) if the element is found\"",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #code here\n    \n    #if unique list\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert     all_unique([\"physics\",\"chemistry\",\"maths\",\"english\"]) == True, \"Passed\"",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x1 - x2 for x1, x2 in zip(nums1,nums2)]\n    #Time: O(n) / Space: O(1)\n",
        "test": "assert     sub_list([], []) == [], 'wrong'",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s=0\n    while n!=0:\n        s=s*10+n%10\n        n=n//10\n    return s\n    \n    \n    \ndef validate_v2(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s=0\n    d={}\n    while n!=0:\n        d[n%10]=d.get(n%10,0)+1\n        s=s*10+n%10\n        n=n//10\n    return s,d\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    str_n=str(n)\n    return str_n==str_n[::-1]\n    \n    \ndef is_palindrome_v2(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    str_n=str(n)\n    i=0\n    j=len(str_n)-1\n    while i<=j:\n        if str_n[i]!=str_n[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v3(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    if s==s[::-1]:\n        return True\n    return False\n    \n    \ndef is_palindrome_v4(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    return s==s[::-1]\n    \n    \ndef is_palindrome_v5(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v6(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    return n==n[::-1]\n    \n    \ndef is_palindrome_v7(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v8(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    return s==s[::-1]\n    \n    \ndef is_palindrome_v9(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v10(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v11(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v12(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v13(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v14(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v15(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v16(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v17(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v18(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=j:\n        if s[i]!=s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \n    \ndef is_palindrome_v19(n):\n    '''\n    Write a python function that takes in an integer and checks whether it is a palindrome or not.\n    '''\n    s=str(n)\n    i=0\n    j=len(s)-1\n    while i<=",
        "test": "assert ",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        for i in list:\n            if i == element:\n                return True\n    else:\n        return False\n    \n",
        "test": "assert     check_element([1], None) == False, \"check_element([1], None) = False\"",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #find the two bs \n    matches = re.findall('ab', text)\n    \n    # if not empty, return true\n    if matches:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three( 'babaaabaaaaababaaaaabababbabaaaaabababbababaaabbabaaaaaba' ) == True, \"The third string is correct\"",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # if array is empty \n    if n==0: \n        return 0 \n    # Initialize current_max to 0 \n    current_max = 0\n    # Initialize result to 0 \n    result = 0\n    # Initialize running_sum to 0 \n    running_sum = 0\n    # Initialize i and j to 0 \n    i = 0\n    j = 0\n    while j < n: \n        # if i < k, keep adding arr[i] \n        running_sum += a[j]\n        if i < k: \n            j += 1\n        # If running_sum > current_max, keep adding arr[i] \n        if running_sum > current_max: \n            current_max = running_sum\n            result = a[i] \n            i += 1\n        # If running_sum == current_max, keep adding arr[i] \n        elif running_sum == current_max: \n            result = max(a[i], result) \n            i += 1\n        else: \n            running_sum -= a[i] \n            i += 1\n    return result \n",
        "test": "assert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 5], 5, 5) == 20",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i*i\n    print(sum)\n",
        "test": "assert ",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n",
        "test": "assert ",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n<=0:\n        return 0\n    \n    if k==1:\n        return n\n    \n    \n    return count_no_of_ways(n-1, k)+count_no_of_ways(n-1, k-1)\n",
        "test": "assert     count_no_of_ways(3, 3) == 1",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return(n//m)\n",
        "test": "assert     find(4, 3) == 1, \"Test 1 Failed\"",
        "num_ids": 141,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\nprint(\"Functions: \", otherside_rightangle.__doc__)\ndef pythagoras(a, b):\n    '''\n    Write a function to find the distance between the center of a circle and the center of the opposite circle\n    '''\n    # Calculating the distance between the two centers\n    distance = math.sqrt(a**2 + b**2)\n    # Calculating the distance between the center of the circle and the center of the opposite circle\n    # (The formula for this is as follows: ((a**2) + (b**2)))/2)\n    # If we were to calculate this formula, we would be calculating it twice, so we need to only calculate it once.\n    # Also, we don't need to calculate the formula twice, so we calculate it twice.\n    # Distance = math.sqrt((a**2) + (b**2))/2\n    # If you are wondering why, you are asking why not, because we calculated it twice.\n    # The answer to the question is that we use two different equations.\n    # Each equation has its own center, so the distance between the centers would be calculated twice.\n    # The answer to the question is that we use two different equations.\n    # Both equations have a different center, so the distance between the centers would be calculated twice.\n    return distance\nprint(\"Functions: \", pythagoras.__doc__)\ndef is_palindrome(word):\n    '''\n    Write a function to check if a word is a palindrome. A palindrome is a word that, when reversed,\n    reaches the same place in the word. For example, \"racecar\" and \"carrace\" are palindromes because\n    they both begin with the same letter \"c\", and then reverse to the end, which is the same as the\n    beginning of the word.\n    '''\n    # We need to reverse the word, then compare the first charater of the word and the second charater of the word\n    # If they are the same, that means that we have a palindrome.\n    # So, we use two pointers, one at the beginning of the word, and the other one at the end.\n    # If they are not equal, that means that the first charater and the second charater of the word are not the same.\n    # We then check that the charater in the middle of the word is equal to the last charater in the word.\n    # If they are equal, we return true.\n    first_char = 0\n    last_char = len(word) - 1\n    while first_char <= last_char:\n        if word[first_char]!= word[last_char]:\n            return False\n        first_char += 1\n        last_char -= 1\n    return True\nprint(\"Functions: \", is_palindrome.__doc__)\ndef is_palindrome_2(word):\n    '''\n    Write a function to check if a word is a palindrome. A palindrome is a word that, when reversed,\n    reaches the same place in the word. For example, \"racecar\" and \"carrace\" are palindromes because\n    they both begin with the same letter \"c\", and then reverse to the end, which is the same as the\n    beginning of the word.\n    '''\n    # We need to reverse the word, then compare the first charater of the word and the second charater of the word\n    # If they are the same, that means that we have a palindrome.\n    # So, we use two pointers, one at the beginning of the word, and the other one at the end.\n    # If they are not equal, that means that the first charater and the second charater of the word are not the same.\n    # We then check that the charater in the middle of the word is equal to the last charater in the word.\n    # If they are equal, we return true.\n    first_char = 0\n    last_char = len(word) - 1\n    while first_char <= last_char:\n        if word[first_char]!= word[last_char]:\n            return False\n        first_char += 1\n        last_char -= 1\n    return True\nprint(\"Functions: \", is_palindrome_2.__doc__)\ndef is_palindrome_3(word):\n    '''\n    Write a function to check if a word is a palindrome. A palindrome is a word that, when reversed,\n    reaches the same place in the word. For example, \"racecar\" and \"carrace\" are palindromes because\n    they both begin with the same letter \"c\", and then reverse to the end, which is the same as the\n    beginning of the word.\n    '''\n    # We need to reverse the word, then compare the first charater of the word and the second charater of the word\n    # If they are the same, that means that we have a palindrome.\n    # So, we use two pointers, one at the beginning of the word, and the other one at the end.\n    # If they are not equal, that means that the first charater and the second charater of the word are not the same.\n    # We then check that the charater in the middle of the word is equal to the last charater in the word.\n    # If they are equal, we return true.\n    first_char = 0\n    last_char = len(word) - 1\n    while first_char <= last_char:\n        if word[first_char]!= word[last_char]:\n            return False\n        first_char += 1\n        last_char -= 1\n    return True\nprint(\"Functions: \", is_palindrome_3.__doc__)\ndef is_palindrome_4(word):\n    '''\n    Write a function to check if a word is a palindrome. A palindrome is a word that, when reversed,\n    reaches the same place in the word. For example, \"racecar\" and \"carrace\" are palindromes because\n    they both begin with the same letter \"c\", and then reverse to the end, which is the same as the\n    beginning of the word.\n    '''\n    # We need to reverse the word, then compare the first charater of the word and the second charater of the word\n    # If they are the same, that means that we have a palindrome.\n    # So, we use two pointers, one at the beginning of the word, and the other one at the end.\n    # If they are not equal, that means that the first charater and the second charater of the word are not the same.\n    # We then check that the charater in the middle of the word is equal to the last charater in the word.\n    # If they are equal, we return true.\n    first_char = 0\n    last_char = len(word) - 1\n    while first_char <= last_char:\n        if word[first_char]!= word[last_char]:\n            return False\n        first_char += 1\n        last_char -= 1\n    return True\nprint(\"Functions: \", is_palindrome_4.__doc__)\ndef is_palindrome_5(word):\n    '''\n    Write a function to check if a word is a palindrome. A palindrome is a word that, when reversed,\n    reaches the same place in the word. For example, \"racecar\" and \"carrace\" are palindromes because\n    they both begin with the same letter \"c\", and then reverse to the end, which is the same as the\n    beginning of the word.\n    '''\n    # We need to reverse the word, then compare the first charater of the word and the second charater of the word\n    # If they are the same, that means that we have a palindrome.\n    # So, we use two pointers, one at the beginning of the word, and the other one at the end.\n    # If they are not equal, that means that the first charater and the second charater of the word are not the same.\n    # We then check that the charater in the middle of the word is equal to the last charater in the word.\n    # If they are equal, we return true.\n    first_char = 0\n    last_char = len(word) - 1\n    while first_char <= last_char:\n        if word[first_char]!= word[last_char]:\n            return False\n        first_char += 1\n        last_char -= 1\n    return True\nprint(\"Functions: \", is_palindrome_5",
        "test": "assert     otherside_rightangle(5,6) == 5",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n",
        "test": "assert     max_val([2,3,4]) == 4, 'wrong'",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([1 for i in range(1, number+1) if number % i == 0])\n",
        "test": "assert     sum_div(1) == 1, 'failed'",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                res += 1\n    return res\n",
        "test": "assert     get_Inv_Count([])== 0",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
        "test": "assert ",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d={}\n    max_value = 0\n    for i in stdata:\n        if i[0] not in d:\n            d[i[0]] = i[1]\n        else:\n            d[i[0]] += i[1]\n    for i in d:\n        if d[i] > max_value:\n            max_value = d[i]\n    return max_value\n",
        "test": "assert ",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n):\n        if n == 0:\n            return 0\n        \n        if n == 1:\n            return 1\n        \n        return count(n-1) + count(n-2) + 2*count(n-1)\n    \n    return count(n)\n",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    dic = []\n    for k,v in d.items():\n        if isinstance(v,dict):\n            dic.append(k)\n        elif isinstance(v,list):\n            for i in v:\n                dic.append(k)\n    return len(dic)\n    ",
        "test": "assert dict_depth({}) == 0",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)-1):\n        if i==index :\n            return arr[i+rotations]\n        else:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr[-1]\n",
        "test": "assert     find_Element([1,2,3,4,5], (0,3), 5, 8) == 1",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i.startswith(\"p\"):\n            return i, words.pop(words.index(i))\n",
        "test": "assert start_withp(['pap','papa','papa']) == ['pap','papa']",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    if k > n:\n        return 0\n    \n    max_ending_here = 0\n    max_so_far = float('-inf')\n    \n    for i in range(index, n):\n        if a[i] < a[index]:\n            max_ending_here = max(max_ending_here, max_sum_increasing_subseq(a, n, i+1, k))\n        max_so_far = max(max_so_far, max_ending_here + a[i])\n        \n    return max_so_far\n",
        "test": "assert     max_sum_increasing_subseq([10, 20, 30, 40, 50, 60, 70], 10, 5) == 130",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return(tuplex[m:n])\n",
        "test": "assert     colon_tuplex(tuplex = (1,2,3,4,5), m = 2, n = 4) == (1,2)",
        "num_ids": 205,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def main(nums1, nums2, N):\n        n1, n2 = len(nums1), len(nums2)\n        if not n1 or not n2: return None\n        if n1 == 1 and n2 == 1:\n            return [nums1[0] * nums2[0]]\n        if N == 1: return large_product(nums1, nums2, N-1)\n        res = []\n        for i in range(1,n1+1):\n            for j in range(1,n2+1):\n                prod = nums1[i-1] * nums2[j-1]\n                if len(res) == N: break\n                if prod > max(res):\n                    res.append(prod)\n        return res\n    return main(nums1, nums2, N)\n",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 0) == []",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    return b\n    ",
        "test": "assert     maximum(3,4) == 4",
        "num_ids": 119,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #new_tuple = str1.split(\" \")\n    #return new_tuple\n    return tuple(str1)\n    \n",
        "test": "assert     string_to_tuple(\"1234\") == (\"1\", \"2\", \"3\", \"4\") ",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary_rep = bin(n).split('b')[1]\n    binary_rep = binary_rep[:-1]\n    binary_rep = '0' + binary_rep\n    return int(binary_rep, 2)\n",
        "test": "assert     set_left_most_unset_bit(1) == 0",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume\n",
        "test": "assert     volume_cone(0,4)==0, \"wrong\"",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_pow = 0\n    while 2**max_pow <= n:\n        max_pow += 1\n",
        "test": "assert ",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(2) == 1",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(string)\n    return list_\n",
        "test": "assert     add_string([], 'My name is {0}, and I like {1} pizza.') == 'My name is None, and I like pizza.'",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1={}\n    d2={}\n    d3={}\n    for i in l1:\n        if i not in d1:\n            d1[i]=1\n        else:\n            d1[i]=d1[i]+1\n    for j in l2:\n        if j not in d2:\n            d2[j]=1\n        else:\n            d2[j]=d2[j]+1\n    for k in l3:\n        if k not in d3:\n            d3[k]=1\n        else:\n            d3[k]=d3[k]+1\n    d4={}\n    d4.update(d1)\n    d4.update(d2)\n    d4.update(d3)\n    print(d4)\ndef convert_dictionary_to_list_of_lists(d1):\n    '''\n    Write a function to convert dictionary to list of lists.\n    '''\n    keys=[]\n    values=[]\n    for k in d1:\n        keys.append(k)\n        values.append(d1[k])\n    print(keys)\n    print(values)\ndef print_all_words(l):\n    '''\n    Write a function to print all the words in a list.\n    '''\n    for i in range(len(l)):\n        print(l[i])\n    print(l)\n    print_all_words.__doc__\ndef print_even_numbers(l):\n    '''\n    Write a function to print even numbers in a list.\n    '''\n    for i in range(len(l)):\n        if i%2==0:\n            print(l[i])\n    print(l)\n    print_even_numbers.__doc__\ndef print_odd_numbers(l):\n    '''\n    Write a function to print odd numbers in a list.\n    '''\n    for i in range(len(l)):\n        if i%2!=0:\n            print(l[i])\n    print(l)\n    print_odd_numbers.__doc__\ndef print_unique_numbers(l):\n    '''\n    Write a function to print unique numbers in a list.\n    '''\n    print(set(l))\n    print_unique_numbers.__doc__\ndef print_reverse(l):\n    '''\n    Write a function to print the reversed list.\n    '''\n    print(l[::-1])\n    print_reverse.__doc__\ndef print_sort(l):\n    '''\n    Write a function to print the sorted list.\n    '''\n    print(sorted(l))\n    print_sort.__doc__\ndef print_reverse_sort(l):\n    '''\n    Write a function to print the reversed sorted list.\n    '''\n    print(sorted(l,reverse=True))\n    print_reverse_sort.__doc__\ndef print_remove_duplicates(l):\n    '''\n    Write a function to remove duplicate numbers from list.\n    '''\n    l=list(dict.fromkeys(l))\n    print(l)\ndef print_max_element(l):\n    '''\n    Write a function to print the maximum element in list.\n    '''\n    print(max(l))\n    print_max_element.__doc__\ndef print_min_element(l):\n    '''\n    Write a function to print the minimum element in list.\n    '''\n    print(min(l))\n    print_min_element.__doc__\ndef print_nth_element(l,n):\n    '''\n    Write a function to print the nth element in list.\n    '''\n    print(l[n-1])\n    print_nth_element.__doc__\ndef print_second_largest_element(l):\n    '''\n    Write a function to print the second largest element in list.\n    '''\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    print_second_largest_element.__doc__\ndef print_third_largest_element(l):\n    '''\n    Write a function to print the third largest element in list.\n    '''\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    print_third_largest_element.__doc__\ndef print_second_largest_element(l):\n    '''\n    Write a function to print the second largest element in list.\n    '''\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    print_second_largest_element.__doc__\ndef print_third_largest_element(l):\n    '''\n    Write a function to print the third largest element in list.\n    '''\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    l.remove(max(l))\n    print(max(l))\n    print_third_largest_element.__doc__\ndef print_index_of_element(l,e):\n    '''\n    Write a function to print the index of an element in list.\n    '''\n    print(l.index(e))\n    print_index_of_element.__doc__\ndef print_count_of_elements(l,e):\n    '''\n    Write a function to print the count of an element in list.\n    '''\n    print(l.count(e))\n    print_count_of_elements.__doc__\ndef print_length_of_list(l):\n    '''\n    Write a function to print the length of list.\n    '''\n    print(len(l))\n    print_length_of_list.__doc__\ndef print_max_frequency_element(l):\n    '''\n    Write a function to print the maximum frequency element.\n    '''\n    a=max(set(l), key=l.count)\n    print(a)\n    print_max_frequency_element.__doc__\ndef print_number_of_occurrences_of_element(l,e):\n    '''\n    Write a function to print the number of occurrences of an element in list.\n    '''\n    print(l.count(e))\n    print_number_of_occurrences_of_element.__doc__\ndef print_sum_of_list(l):\n    '''\n    Write a function to print the sum of list.\n    '''\n    print(sum(l))\n    print_sum_of_list.__doc__\ndef print_sum_of_list_with_negative_numbers(l):\n    '''\n    Write a function to print the sum of list with negative numbers.\n    '''\n    print(sum(filter(lambda x:x<0,l)))\n    print_sum_of_list_with_negative_numbers.__doc__\ndef print_sum_of_list_with_positive_numbers(l):\n    '''\n    Write a function to print the sum of list with positive numbers.\n    '''\n    print(sum(filter(lambda x:x>=0,l)))\n    print_sum_of_list_with_positive_numbers.__doc__\ndef print_mean_of_list(l):\n    '''\n    Write a function to print the mean of list.\n    '''\n    print(sum(l)/len(l))\n    print_mean_of_list.__doc__\ndef print_mean_of_list_with_negative_numbers(l):\n    '''\n    Write a function to print the mean of list with negative numbers.\n    '''\n    print(sum(filter(lambda x:x<0,l))/len(filter(lambda x:x<0,l)))\n    print_mean_of_list_with_negative_numbers.__doc__\ndef print_mean_of_list_with_positive_numbers(l):\n    '''\n    Write a function to print the mean of list with positive numbers.\n    '''\n    print(sum(filter(lambda x:x>=0,l))/len(filter(lambda x:x>=0,l)))\n    print_mean_of_list_with_positive_numbers.__do",
        "test": "assert ",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n    return max\n    \n    \ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    min = 100\n    for i in input_list:\n        if len(i) < min:\n            min = len(i)\n    return min\n    \ndef remove_numbers(input_list):\n    '''\n    Write a function to remove numbers from the list\n    '''\n    new_list = []\n    for i in input_list:\n        if i.isdigit():\n            new_list.append(i)\n    return new_list\n    \ndef remove_duplicate(input_list):\n    '''\n    Write a function to remove duplicate from the list\n    '''\n    new_list = []\n    for i in input_list:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n    \ndef merge_list(input_list):\n    '''\n    Write a function to merge two lists without using any extra space. The new list should be made by adding \n    elements from both the given lists alternatively and skipping the elements with the same data.\n    '''\n    if len(input_list) == 1:\n        return input_list\n    result = []\n    for i in range(len(input_list)):\n        result.append(input_list[i])\n        if i < len(input_list) - 1:\n            result.append(input_list[i+1])\n    return result\n    \ndef find_count_element(input_list,element):\n    '''\n    Write a function to count how many times the given element is present in the list\n    '''\n    result = 0\n    for i in input_list:\n        if i == element:\n            result += 1\n    return result\n    \ndef count_elements(input_list):\n    '''\n    Write a function to count how many times the given element is present in the list\n    '''\n    result = 0\n    for i in input_list:\n        if i in input_list:\n            result += 1\n    return result\n    \ndef create_list(input_list):\n    '''\n    Write a function to create a list in the format specified in the problem statement.\n    '''\n    new_list = []\n    for i in input_list:\n        new_list.append(\"{} {}\".format(i[0],i[1]))\n    return new_list\n    \ndef merge_string(input_string):\n    '''\n    Write a function to add a space between each character in the given string\n    '''\n    new_string = \"\"\n    for i in range(len(input_string)):\n        if i < len(input_string) - 1:\n            new_string += input_string[i] + \" \"\n        else:\n            new_string += input_string[i]\n    return new_string\n    \ndef merge_string_odd(input_string):\n    '''\n    Write a function to add a space between each character in the given string\n    '''\n    new_string = \"\"\n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            new_string += input_string[i] + \" \"\n        else:\n            new_string += input_string[i]\n    return new_string\n    \ndef string_odd_even_split(input_string):\n    '''\n    Write a function to split the string in odd and even parts\n    '''\n    new_string = \"\"\n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            new_string += input_string[i] + \" \"\n        else:\n            new_string += input_string[i]\n    return new_string\n    \ndef main():\n    # Test max_length_list\n    list1 = ['one','two','three','four']\n    print(max_length_list(list1))\n    print(max_length_list([]))\n    \n    # Test min_length_list\n    list2 = ['abc','abc','']\n    print(min_length_list(list2))\n    print(min_length_list([]))\n    \n    # Test remove_numbers\n    list3 = ['one','two','three','four']\n    print(remove_numbers(list3))\n    \n    # Test remove_duplicate\n    list4 = ['one','one','two','three','four']\n    print(remove_duplicate(list4))\n    \n    # Test merge_list\n    list5 = ['one','two','three','four']\n    print(merge_list(list5))\n    \n    # Test find_count_element\n    list6 = ['one','two','three','four','one','one','one','four','one','one']\n    print(find_count_element(list6, 'one'))\n    print(find_count_element(list6, 'four'))\n    \n    # Test count_elements\n    list7 = ['one','two','three','four','one','one','one','four','one','one']\n    print(count_elements(list7))\n    \n    # Test create_list\n    list8 = ['one','two','three','four']\n    print(create_list(list8))\n    \n    # Test merge_string\n    list9 = ['one','two','three','four']\n    print(merge_string(list9))\n    \n    # Test merge_string_odd\n    list10 = ['one','two','three','four']\n    print(merge_string_odd(list10))\n    \n    # Test string_odd_even_split\n    list11 = ['one','two','three','four']\n    print(string_odd_even_split(list11))\n    \n    \nif __name__ == '__main__':\n    main(",
        "test": "assert     max_length_list([1, 2, 3, 4, 5, 6, 7]) == 5, 'input: [1, 2, 3, 4, 5, 6, 7] should have maximum length'",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert     check_distinct((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5)) == False, \"test 3 failed\"",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_set = set(str1)\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return \"No First non-repeating character\"\n",
        "test": "assert first_non_repeating_character('voom') == 'v'",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n",
        "test": "assert check_char('A') == True",
        "num_ids": 214,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sorted([a,b,c])[1]\n",
        "test": "assert ",
        "num_ids": 327,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_nums = []\n    for num in nums:\n        sum_of_nums.append(sum(int(x) for x in str(num)))\n    return sum_of_nums\n    \n",
        "test": "assert     sum_of_digits([0,0,0,0,0,0]) == 0, 'Wrong answer: sum_of_digits'",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tuple = ()\n    for x,y in zip(test_tup1,test_tup2):\n        xor_tuple += (x^y,)\n    return xor_tuple\n",
        "test": "assert     bitwise_xor((0, 0), (0, 0)) == (0, 0)",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result_set = set()\n    for x in test_list:\n        if x in result_set:\n            continue\n        else:\n            result_set.add(x)\n    return len(result_set)\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # tuple1 = (0,1,2,3,4)\n    # tuple2 = (5,6,7,8,9)\n    \n    # tuple1 = (10,11,12,13,14)\n    # tuple2 = (15,16,17,18,19)\n    \n    # tuple1 = (20,21,22,23,24)\n    # tuple2 = (25,26,27,28,29)\n    #\n    # return tuple1 + tuple2\n    \n    # Alternative Solution (Using zip function)\n    # return tuple(x+y for x,y in zip(test_tup1,test_tup2))\n    \n    # Alternative Solution (Using sum function)\n    # return sum(x for x in test_tup1) + sum(x for x in test_tup2)\n    \n    # Alternative Solution (Using unpacking the tuples)\n    # return tuple(sum(tup) for tup in zip(test_tup1, test_tup2))\n    \n    # Alternative Solution (Using reduce function)\n    # from functools import reduce\n    # return reduce(lambda x,y: x + y, test_tup1) + reduce(lambda x,y: x + y, test_tup2)\n    \n    # Alternative Solution (Using reduce function)\n    # from functools import reduce\n    # return reduce(lambda x,y: (x,y) if x < y else (y,x),test_tup1) + reduce(lambda x,y: (x,y) if x < y else (y,x),test_tup2)\n    \n    # Another Alternative Solution\n    return tuple(test_tup1[i] + test_tup2[i] for i in range(len(test_tup1)))\n    \n    \ntest_tup1 = (0,1,2,3,4)\ntest_tup2 = (5,6,7,8,9)\ntest_tup3 = (10,11,12,13,14)\ntest_tup4 = (15,16,17,18,19)\ntest_tup5 = (20,21,22,23,24)\ntest_tup6 = (25,26,27,28,29)\n",
        "test": "assert     add_nested_tuples((), ()) == ()",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "test": "assert minimum(1,4) == 1",
        "num_ids": 131,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return (True if tuple1 in tuplex else False)\n",
        "test": "assert     check_tuplex(tuplex=('d','a','b'),tuple1=('c','a','b')) == False, \"Expected False\"",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return ((x & 1) == 0)\n",
        "test": "assert     find_Parity(1) == False",
        "num_ids": 169,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n_sorted = sorted(n, reverse=True)\n    n_rearranged = int(''.join(n_sorted))\n    return n_rearranged\n",
        "test": "assert     rearrange_bigger(0) == 0, '0-0'",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def k_pairs_with_smallest_sum(arr1, arr2, k):\n        pair_sum = [(i, j) for i in range(len(arr1)) for j in range(len(arr2))]\n        pair_sum.sort(key = lambda x: sum(x))\n        min_heap = []\n        count = 0\n        for sum in pair_sum:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, sum)\n            else:\n                if sum[0] > min_heap[0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, sum)\n            count += 1\n            if count == k:\n                break\n        return min_heap\n",
        "test": "assert k_smallest_pairs([1, 2, 3, 4], [5, 6, 7, 8], 4) == [[1, 5], [2, 6], [3, 7], [4, 8]]",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if (list1[i][0]*list1[i][1]) < (list1[j][0]*list1[j][1]):\n                min_product = list1[i][0]*list1[i][1]\n    return min_product\n",
        "test": "assert min_product_tuple([(5, 5), (6, -2), (3, 4), (-1, -4), (10, -3)]) == (-1, -4)",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # copy list into another variable\n    minval = listval[0]\n    # traverse each element in list\n    for i in range(1, len(listval)):\n        # if current element is smaller than previous element\n        if listval[i] < minval:\n            # reassign current minimum element to the previous minimum element\n            minval = listval[i]\n    # return the minimum element\n    return minval\n    #\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1, \"Error!\"",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    string = word.split(\"_\")\n    string_new = []\n    for word in string:\n        word_new = word[0].upper() + word[1:]\n        string_new.append(word_new)\n    return \"\".join(string_new)\n",
        "test": "assert     snake_to_camel(\"first_name\") == \"FirstName\", \"First Name is not Snake case\"",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Remove even numbers\n    for i in range(0, len(l)):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n    return l\n",
        "test": "assert     remove_odd([]) == [], \"Should be empty list\"",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 4) == ('a', 1), \"Wrong Output\"",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    \n    if list1.intersection(list2):\n        return True\n    else:\n        return False\n",
        "test": "assert     overlapping([1,3,2],    [3,4,1,5,6,7]) == True, \"Mistake found\"",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0]\n    for i in range(1,len(arr)):\n        if(max*arr[i]) > arr[i]:\n            max = max*arr[i]\n            max_index = i\n    print(max)\n    print(max_index)\n",
        "test": "assert ",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    L = list(set(Input))\n    L.sort()\n    L.remove(())\n    return L\n",
        "test": "assert     group_tuples([(1,2),(1,2),(2,3),(1,2),(2,3)]) == [(1,2),(2,3)]",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele\n",
        "test": "assert     Find_Max([]) == None",
        "num_ids": 324,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_sum = 0\n    for i in list1:\n        round_sum += round(i)\n    print(round_sum * len(list1))\n",
        "test": "assert round_and_sum([1.0,2.0,3.0,4.0,5.0,6.0]) == 12",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum+=i**3\n    print(\"cube sum of first \",n,\" natural numbers :\",sum)\n    return sum\n",
        "test": "assert     cube_Sum(0) == 0, \"The input is not correct.\"",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "test": "assert     concatenate_tuple((1,2,3,4)) == '1234', 'test failed'",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i ** 3\n    return sum / n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "test": "assert     extract_rear(('a', 'b', 'c', 'd', 'e')) == 'e'",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([1, 2, 2, 3, 3, 3, 4], 2) == 2, \"incorrect\"",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_list = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    print(\"dd-mm-yyyy\")\n    return dt.replace('-', '-')\n    \ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    print(\"dd-mm-yyyy\")\n    return dt.replace('-', '-')\n",
        "test": "assert     change_date_format(\"13-12-2011\") == \"13-12-2011\"",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n",
        "test": "assert ",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # your code here\n    new_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            new_tup.append(1)\n        else:\n            new_tup.append(0)\n    return new_tup\n",
        "test": "assert     and_tuples(tup7, tup8) == (False, False)",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return 2*a*(c**2 - b**2)/(a**2 + 4*a*b*c)\n",
        "test": "assert ",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    result = set1.intersection(set2)\n    if len(result) == 0:\n        return False\n    return True\n",
        "test": "assert     common_element([1,2,3,4], [1,2,3,5,6]) == True, \"output should be true\"",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 <= base2:\n        return base1+base2/2-height\n    else:\n        return base1+base2/2+height\n",
        "test": "assert median_trapezium(10,20,30) == median_trapezium(10,20,30)",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert     check_greater([2, 3, 4, 5], 6) == False, 'Wrong result'",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return bool(re.match(r'a{1,}b',text))\n",
        "test": "assert     text_match_one(\"abab\") == True, \"Test case 1 failed\"",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    #return int(n % 10)\n",
        "test": "assert     last_Digit(10) == 0",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(-i)\n    return list2\nlist2 = [-4,-2,-1,0,5,10]\nprint(neg_nos(list2))\n",
        "test": "assert neg_nos([]) == []",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #str1 = list(str1)\n    #i = 0\n    #while i < len(str1):\n        #if str1[i] == '1':\n            #str1.remove(str1[i])\n        #else:\n            #i += 1\n    return ''.join(str1)\n",
        "test": "assert     remove_odd('') == ''",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) == 0:\n        return 0\n",
        "test": "assert     count_bidirectional([(1,2), (2,4), (3,4), (4,5), (1,3), (2,3), (3,5), (4,5), (1,2)]) == 4",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n",
        "test": "assert     multiple_to_single([1,2,3,4,5,6,7,8,9]) == 123456789",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = '\\b(?:an|a|for|of|at|on|by|with)\\b'\n    res = re.finditer(regex, text)\n    adverbs = []\n    for m in res:\n        adverbs.append((m.group(0), m.start()))\n    return adverbs\n",
        "test": "assert    find_adverb_position(\"This is an example of a sentence.\") == {'an': 4, 'example': 5, 'of': 6,'sentence': 7}",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n",
        "test": "assert ",
        "num_ids": 136,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum = 0\n    length = len(nums)\n    for i in nums:\n        if i > 0:\n            sum += 1\n    return sum / length\n",
        "test": "assert     positive_count([1,-1,-1,1]) == (0.5)",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -1\n    for i in range(len(list1)):\n        if (list1[i] < 0) and (list1[i] > max):\n            max = list1[i]\n",
        "test": "assert     largest_neg([]) == None",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return []\n    if len(test_list[0]) <= K:\n        return test_list\n    else:\n        return trim_tuple(list(zip(*test_list[:K]))), trim_tuple(list(zip(*test_list[K+1:])))\n",
        "test": "assert trim_tuple([], 4) == []",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if type(test_tup1) is not tuple:\n        raise ValueError('test_tup1 must be a tuple')\n    if type(test_tup2) is not tuple:\n        raise ValueError('test_tup2 must be a tuple')\n    \n    try:\n        test_tup1 = list(test_tup1)\n        test_tup2 = list(test_tup2)\n        lst_1 = list(map(int, test_tup1))\n        lst_2 = list(map(int, test_tup2))\n        index = 0\n        while index < len(lst_1):\n            lst_1[index] = lst_1[index] * lst_2[index]\n            index += 1\n        return tuple(lst_1)\n    except ValueError:\n        raise ValueError('test_tup1 and test_tup2 must be tuples')\n    except TypeError:\n        raise TypeError('test_tup1 and test_tup2 must be tuples')\n",
        "test": "assert     index_multiplication((1,2,3),(4,5,6)) == (4,10,18)",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = 0\n    for i in lst:\n        if i in tup:\n            counter = counter+1\n    return counter\n",
        "test": "assert count_Occurrence((1,2,1,4,5,1), [1,2,1,4,5,1]) == 6",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n",
        "test": "assert ",
        "num_ids": 78,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n",
        "test": "assert     cal_sum(1) == 1, 'test 1 failed'",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[0:l]\n",
        "test": "assert     extract_string(['Jona', 'Steve', 'Tony', 'Krstin'], 2) == ['Jona', 'Steve']",
        "num_ids": 2382,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "test": "assert ",
        "num_ids": 135,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n",
        "test": "assert     loss_amount(1000,1000) == 0",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5) + 1) : \n        if n % i == 0 : \n            count += i \n            count += n / i \n    return count \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n < 0:\n        return 'Factorial does not exist for negative numbers'\n    if n < 2:\n        return 1\n    return n * factorial(n - 1)\n",
        "test": "assert sumofFactors(30) == 10",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg = re.compile(r'z')\n    match = reg.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz('123z123z') == True",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(1)    == True,    \"check_monthnumb_number should return True if month number contains 31 days\"",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "test": "assert reverse_string_list([\"sadness\", \"wrath\"]) == [\"wrath\", \"sadness\"]",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Python program to find the sublist having minimum length\n    # return (1) minimum value, (2) position of the min value\n    min = 0\n    minlen = len(lst)\n    for i in range(len(lst)):\n        count = 0\n        for j in range(i,len(lst)):\n            if(len(lst[i:j+1])<minlen):\n                minlen = len(lst[i:j+1])\n                min = i\n                count += 1\n        if(count == 0):\n            break\n    return (lst[min:min+minlen],min)\n",
        "test": "assert ",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)\n",
        "test": "assert ",
        "num_ids": 113,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]\", \"\", str1)\n",
        "test": "assert     remove_uppercase(\"We all know\") == \"We all know\"",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    temp = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            temp.append(lst[i][j])\n    return temp\n",
        "test": "assert     Extract([]) == []",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(str) - len(str.casefold())\n    \n",
        "test": "assert     upper_ctr('THE SSSS') == 0",
        "num_ids": 189,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            comb_list = list1[i:j+1]\n            if comb_list not in new_list:\n                new_list.append(comb_list)\n    return new_list\n",
        "test": "assert     combinations_list(['A', 'B', 'C', 'D']) == [('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')], \\",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            curr_prod = arr[i]*arr[j]\n            max_prod = max(max_prod, curr_prod)\n    return max_prod\n",
        "test": "assert ",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    if len(dict) == 1:\n        if list(dict.values())[0] == n:\n            return True\n        else:\n            return False\n    if len(dict) > 1:\n        if list(dict.values())[0] == n:\n            return True\n        if n == list(dict.values())[-1]:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_value({1:1, 2:2, 3:3, 4:4, 5:5}, 5)",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        if value!= None:\n            result[key] = value\n    return result\n",
        "test": "assert     drop_empty({\"1\":1,\"2\":2}) == {\"1\":1,\"2\":2}",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product\n",
        "test": "assert ",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    nums = test_tup\n    sum = 0\n    for i in range(len(nums)):\n        if i == 0:\n            sum += nums[i]\n        elif i == (len(nums) - 1):\n            sum += nums[i]\n        else:\n            sum += nums[i]\n            \n    return sum\n",
        "test": "assert     add_pairwise((1,2,3)) == (2,3,4)",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 0\n    for i in range(0,len(arr)):\n        res = res + (arr[i] * arr[i])\n    return res % n\n",
        "test": "assert     find_remainder([1, 2, 3], 3) == 2",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([1, 2, 4, 6, 8, 10]) == True",
        "num_ids": 2217,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output = []\n    for i in test_list1:\n        if i in test_list2:\n            output.append(i)\n    return output\n",
        "test": "assert tuple_intersection([(1,2),(3,4),(5,6)],[(2,3),(5,6),(7,8),(9,10)]) ==     [(2,3),(5,6),(7,8)]",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('how','h','a')=='hwa'",
        "num_ids": 279,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key = lambda kv:(kv[1], kv[0])))\n",
        "test": "assert     sort_counter({1:5, 2:3, 3:2, 4:1, 5:1}) == {1:5, 2:3, 3:2, 4:1, 5:1}",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest\n",
        "test": "assert     big_sum([5, -9, 7, 3, 6, -6, 9, 2, -2, -6]) == 0, 'failed'",
        "num_ids": 287,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #\n    #\n    # code here\n    #\n    #\n    return string.lower()\n",
        "test": "assert     is_lower('hello') == 'hello', 'incorrect'",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert ",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #your code here\n    odd_list = []\n    for i in list:\n        if i%2!= 0:\n            odd_list.append(i)\n    return odd_list\n",
        "test": "assert ",
        "num_ids": 139,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(n)]) - sum(range(n))**3\n",
        "test": "assert     difference(2) == 0, \"Correct result : {}\".format(0)",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j])%2!= 0:\n                count = count+1\n    return count\n",
        "test": "assert     find_Odd_Pair([1,2,4],2) == 1",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string)!= str:\n        print('ERROR')\n        return -1\n    else:\n        string_new = ''\n        for c in string:\n            if c.isupper():\n                string_new += c.lower()\n            elif c.islower():\n                string_new += c.upper()\n            else:\n                string_new += c\n        return string_new\n",
        "test": "assert     toggle_string(\"Hello World\") == \"hELLO wORLD\", \"WRONG\"",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    dist = 0\n    for i in range(len(n1)):\n        dist += int(n1[i]) - int(n2[i])\n    return dist\n",
        "test": "assert     digit_distance_nums(100, 1000) == 0, \"Should be 0\"",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    start = 0\n    end = 0\n    s = 0\n    while end < size:\n        if s > max_sum:\n            max_sum = s\n        s = s + a[end]\n        end = end + 1\n    s = 0\n    for i in range(0, size):\n        s = s + a[i]\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([1, 2, 3, 5, -4, -2], 6) == 11",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = []\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return result\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    for tup in test_tup1:\n        if tup in test_tup2:\n            result.append(tup)\n    result.sort()\n    return result\n",
        "test": "assert     union_elements((1, 2), (3, 4, 5)) == (1, 2, 3, 4, 5), \"Union Error\"",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst.sort()\n    Max_Len = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1] or lst[i] == lst[i+2]:\n            Max_Len += 1\n        else:\n            break\n    print(Max_Len)\n            \n",
        "test": "assert ",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values\n",
        "test": "assert     extract_values('\"What is the answer?\"')     ==     ['What is the answer?']",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if (arr[i]!=arr[j]):\n                count+=1\n    print(count)\n    return count\n",
        "test": "assert ",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \n    \n    \n    \ndef count(s): \n    '''\n    Write a python function to count the number of times a value occurs in a list.\n    '''\n    return s.count(s[0])\n    \n    \n    \n    \ndef multiply(*args): \n    '''\n    Write a python function to multiply all the values in a list.\n    '''\n    return args[0] * args[1]\n    \n    \n    \n    \ndef is_palindrome(s): \n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    return s[::-1] == s\n    \n    \n    \n    \ndef is_palindrome_2(s):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    s_1 = s[::-1]\n    return s == s_1\n",
        "test": "assert split('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']",
        "num_ids": 149,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    else:\n        n = str(n)\n        n_sum = 0\n        for digit in n:\n            n_sum += int(digit)\n        return n_sum\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if(list1[i-1]<list1[i]):\n            return False\n    return True\n",
        "test": "assert     issort_list([1, 2, 3, 4, 5]) == False, \"Wrong\"",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert     empty_list(0) == [] ",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1_new = []\n    while list1:\n        # sort each sublist\n        list1_new.append(sorted(list1.pop(0)))\n    return list1_new\n    \ndef sort_sublists_2(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort each sublist\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n",
        "test": "assert     sort_sublists([['a','b','c'],['d','e','f'],['g','h','i']]) == ",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_set = set()\n    \n    for num in nums:\n        if num in num_set:\n            num_set.remove(num)\n        else:\n            num_set.add(num)\n",
        "test": "assert     two_unique_nums([1, 2, 3, 2, 3, 4]) == None",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(len(list_data)):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    product_list = 1\n    for i in range(len(unique_list)):\n        product_list = product_list * unique_list[i]\n    return product_list\n",
        "test": "assert unique_product([1, 2, 3, 4]) == 24",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea_cylinder = 2*pi*r*h + 2*pi*r*2*h*(h/2)\n    return surfacearea_cylinder\n",
        "test": "assert surfacearea_cylinder(20,10) == 330",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    ans=False\n    for i in range(len(A)):\n        flag=False\n        for j in range(len(B)):\n            if(A[i]==B[j]):\n                flag=True\n                break\n        if(flag==False):\n            ans=True\n            break\n    return ans\n",
        "test": "assert is_Sub_Array([1,2,3,5,6,7,8,9], [1,2,3,6,7,8,9]) == True",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 1\n    while n>0:\n        n = n//10\n        i = i*10\n    return i%10\n",
        "test": "assert     last_Digit_Factorial(9) == 0",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output = []\n    for i in range(len(list1)):\n        output.extend([list1[i],list2[i],list3[i]])\n    return output\n",
        "test": "assert     interleave_lists(['a','b','c'],[1,2,3],['d','e','f','g'])==['a',1, 'b',2, 'c',3, 'd',4, 'e',5, 'f',6, 'g',7]",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) - set(test_tup2))\n    \n",
        "test": "assert     find_dissimilar((1, 2, 3, 4), ()) == ()",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n",
        "test": "assert ",
        "num_ids": 253,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # def surface_Area(b,s): \n    #     '''\n    #     Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    #     '''\n    #     # def surface_Area(b,s): \n    #     #     '''\n    #     #     Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    #     #     '''\n    #     if s <= 0: \n    #         return 0\n    #     else: \n    #         return (b*s*4) + (s//2*b*s)\n    return (b*s*4) + (s//2*b*s)\n    # return (b*s*4) + (s//2*b*s)\n",
        "test": "assert ",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    else:\n        return False\n    \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({'a':1, 'b':2}) == False",
        "num_ids": 279,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 'Invalid input'\n    if num == 0:\n        return 1\n    prev = 0\n    curr = 1\n    for i in range(num):\n        prev, curr = curr, prev+curr\n    return curr\n",
        "test": "assert     catalan_number(0) == 1",
        "num_ids": 285,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return []\n",
        "test": "assert ",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    heap = []\n",
        "test": "assert     expensive_items([(1,'a'),(2,'b'),(1,'c'),(2,'d'),(1,'e'),(2,'f'),(1,'g'),(2,'h'),(1,'i'),(2,'j'),(2,'k'),(2,'l'),(1,'m'),(2,'n'),(2,'o')],5) == {'k': 2, 'e': 1, 'i': 2, 'f': 2, 'g': 2, 'j': 1}",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 1:\n        return l\n    else:\n        i = 0\n        while i + n <= len(l):\n            sub_list = l[i:i+n]\n            i = i + n\n            l.pop(0)\n            l.append(sub_list)\n    return l\n",
        "test": "assert",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3), \"Expected: (1,2,3), Actual: {0}\".format(list_tuple([1,2,3]))",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    num = nums[0]\n    for i in range(1, len(nums)):\n        if num < nums[i]:\n            num = nums[i]\n    return (nums[-1] - num)\n",
        "test": "assert     big_diff([1,2,3,4,5,6,7,8,9]) == 0, \"Test 4 Failed\"",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # my_int = range(a, b)\n    # for i in my_int:\n    #     if i ** 2 == i:\n    #         print(i)\n",
        "test": "assert perfect_squares(5,2) == True, \"Should return True if x = 1,4\"",
        "num_ids": 277,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = math.sqrt((x**2)+(y**2))\n    t = math.atan(y/x)\n    if a == 0:\n        print(\"Polar coordinates are invalid.\")\n    else:\n        print(f\"Radius: {a} \\nAngle: {t}\")\n    return a, t\n",
        "test": "assert     polar_rect(1,0) == (1,0), \"polar_rect(1,0) should return (1,0)\"",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[-1]\n    newList[-1]=temp\n    return newList\n",
        "test": "assert swap_List([3,2,1,4]) == [1,2,3,4], \"wrong\"",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize a counter variable\n    cnt = 0\n    \n    # calculate the binomial coefficient\n    for i in range(n+1):\n        cnt += (1/((2*i) + 1))\n    return int(cnt)\n",
        "test": "assert     binomial_Coeff(0,0) == 1",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 21,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_no_zeros = ip.split('.')\n    for i in range(0, len(ip_no_zeros)):\n        if len(ip_no_zeros[i]) == 0:\n            ip_no_zeros[i] = '0'\n    return '.'.join(ip_no_zeros)\n",
        "test": "assert     removezero_ip('10.1.1.1') == '10.1.1.1', \"Wrong output\"",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    even_num = max(even_list)\n    odd_num = min(odd_list)\n    return even_num - odd_num\n",
        "test": "assert ",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    str1 = str1.replace(\"0\",\" \")\n    str2 = str2.replace(\"0\",\" \")\n    for i in range(0,len(str1)) :\n        if str1[i]!= str2[i] :\n            if str1[i]!= \" \" :\n                if str2[i]!= \" \" :\n                    count += 1\n                    str1 = str1.replace(str1[i],\"\")\n                    str2 = str2.replace(str2[i],\"\")\n    return count\nif __name__ == \"__main__\" :\n    str1 = \"101\"\n    str2 = \"1110\"\n    print(min_Swaps(str1,str2))",
        "test": "assert     min_Swaps('101011', '110101') == 0",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert     tuple_size([]) == 0",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]\n",
        "test": "assert     find_kth([0,0,0,0], [0,0,0,0], 0) == 0",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    s = 0\n    while n > 0:\n        s = s + (n%10)**3\n        n = n//10\n    return number == s\n",
        "test": "assert     armstrong_number(153) == True, \"153 is armstrong number\"",
        "num_ids": 2185,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    if number < 1:\n        return \"Please enter a positive number\"\n    else:\n        for i in range(1,number+1):\n            sum = sum + i\n        average = sum/number\n        return sum,average\n",
        "test": "assert",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return True if n%2==0 else False\n",
        "test": "assert     is_Even(2) == True, \"Expected output: True\"",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = str1\n    if len(s) < 1:\n        return None\n    if len(s) == 1:\n        return s[0]\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return s[i]\n    return None\n",
        "test": "assert     first_repeated_char('z') == 'z', 'String is valid'",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(n) if is_lucid(i)]\n",
        "test": "assert get_ludic(0) == []",
        "num_ids": 178,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n",
        "test": "assert     reverse_words(\"\") == \"\"",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n    # write your code here\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert     radian_degree(45) == math.pi/4",
        "num_ids": 169,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.findall(text)\n    if match:\n        return match[0]\n    else:\n        return None, None, None\n",
        "test": "assert     find_literals('asfdasdf', 'asdf') == 'asdf', \"Wrong\"",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Solution from GeeksForGeeks\n    # Using Power Composition\n    # Bell number = 1 + 1/1! + 1/2! +... + 1/N!\n    # N! means factorial of N\n    # 1. N! = 1*2*3*4*5*6*7*8*9*10*...*N\n    # 2. 1/1! = 1\n    # 3. 1/2! = 1/2\n    # 4. 1/3! = 1/6\n    # 5. 1/4! = 1/24\n    # 6. 1/5! = 1/120\n    # 7. 1/6! = 1/720\n    # 8. 1/7! = 1/5040\n    # 9. 1/8! = 1/40320\n    # 10. 1/9! = 1/362880\n    # 11. 1/10! = 1/3628800\n    # 12. 1/11! = 1/39916800\n    # 13. 1/12! = 1/479001600\n    # 14. 1/13! = 1/1052640320\n    # 15. 1/14! = 1/564607520\n    # 16. 1/15! = 1/315270400\n    # 17. 1/16! = 1/1209600\n    # 18. 1/17! = 1/5840320\n    # 19. 1/18! = 1/3628800\n    # 20. 1/19! = 1/3628800\n    # 21. 1/20! = 1/1\n    # 22. 1/21! = 1/6\n    # 23. 1/22! = 1/24\n    # 24. 1/23! = 1/120\n    # 25. 1/24! = 1/720\n    # 26. 1/25! = 1/5040\n    # 27. 1/26! = 1/40320\n    # 28. 1/27! = 1/362880\n    # 29. 1/28! = 1/362880\n    # 30. 1/29! = 1/362880\n    # 31. 1/30! = 1/362880\n    # 32. 1/31! = 1/362880\n    # 33. 1/32! = 1/362880\n    # 34. 1/33! = 1/362880\n    # 35. 1/34! = 1/362880\n    # 36. 1/35! = 1/362880\n    # 37. 1/36! = 1/362880\n    # 38. 1/37! = 1/362880\n    # 39. 1/38! = 1/362880\n    # 40. 1/39! = 1/362880\n    # 41. 1/40! = 1/362880\n    # 42. 1/41! = 1/362880\n    # 43. 1/42! = 1/362880\n    # 44. 1/43! = 1/362880\n    # 45. 1/44! = 1/362880\n    # 46. 1/45! = 1/362880\n    # 47. 1/46! = 1/362880\n    # 48. 1/47! = 1/362880\n    # 49. 1/48! = 1/362880\n    # 50. 1/49! = 1/362880\n    # 51. 1/50! = 1/362880\n    # 52. 1/51! = 1/362880\n    # 53. 1/52! = 1/362880\n    # 54. 1/53! = 1/362880\n    # 55. 1/54! = 1/362880\n    # 56. 1/55! = 1/362880\n    # 57. 1/56! = 1/362880\n    # 58. 1/57! = 1/362880\n    # 59. 1/58! = 1/362880\n    # 60. 1/59! = 1/362880\n    # 61. 1/60! = 1/362880\n    # 62. 1/61! = 1/362880\n    # 63. 1/62! = 1/362880\n    # 64. 1/63! = 1/362880\n    # 65. 1/64! = 1/362880\n    # 66. 1/65! = 1/362880\n    # 67. 1/66! = 1/362880\n    # 68. 1/67! = 1/362880\n    # 69. 1/68! = 1/362880\n    # 70. 1/69! = 1/362880\n    # 71. 1/70! = 1/362880\n    # 72. 1/71! = 1/362880\n    # 73. 1/72! = 1/362880\n    # 74. 1/73! = 1/362880\n    # 75. 1/74! = 1/362880\n    # 76. 1/75! = 1/362880\n    # 77. 1/76! = 1/362880\n    # 78. 1/77! = 1/362880\n    # 79. 1/78! = 1/362880\n    # 80. 1/79! = 1/362880\n    # 81. 1/80! = 1/362880\n    # 82. 1/81! = 1/362880\n    # 83. 1/82! = 1/362880\n    # 84. 1/83! = 1/362880\n    # 85. 1/84! = 1/362880\n    # 86. 1/85! = 1/362880\n    # 87. 1/86! = 1/362880\n    # 88. 1/87! = 1/362880\n    # 89. 1/88! = 1/362880\n    # 90. 1/89! = 1/362880\n    # 91. 1/90! = 1/362880\n    # 92. 1/91! = 1/362880\n    # 93. 1/92! = 1/362880\n    # 94. 1/93! = 1/362880\n    # 95. 1/94! = 1/362880\n    # 96. 1/95! = 1/362880\n    # 97. 1/96! = 1/362880\n    # 98. 1/97! = 1/362880\n    # 99. 1/98! = 1/362880\n    # 100. 1/99! = 1/362880\n    # 101. 1/100! = 1/362880\n    # 102. 1/101! = 1/362880\n    # 103. 1/102! = 1/362880\n    # 104. 1/103! = 1/362880\n    # 105. 1/104! = 1/362880\n    # 106. 1/105! = 1/362880\n    # 107. 1/106! = 1/362880\n    # 108. 1/107! = 1/362880\n    # 109. 1/108! = 1/362880\n    # 110. 1/109! = 1/362880\n    # 111. 1/110! = 1/362880\n    # 112. 1/111! = 1/362880\n    # 113. 1/112! = 1/362880\n    # 114. 1/113! = 1/362880\n    # 115. 1/114! = 1/362880\n    # 116. 1/115! = 1/362880\n    # 117. 1/116! = 1/362880\n    # 118. 1/117! = 1/362880\n    # 119. 1/118! = 1/362880\n    # 120. 1/119! = 1/362880\n    # 121. 1/120! = 1/362880\n    # 122. 1/121! = 1/362880\n    # 123. 1/122! = 1/362880\n    # 124. 1/123! = 1/362880\n    # 125. 1/124! = 1/362880\n    # 126. 1/125! = 1/362880\n    # 127. 1/126! = 1/362880\n    # 128. 1/127! = 1/362880\n    # 129. 1/128! = 1/362880\n    # 130. 1/129! = 1/362880\n    # 131. 1/130! = 1/362880\n    # 132. 1/131! = ",
        "test": "assert ",
        "num_ids": 2084,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L-1] + list1[L:]\n",
        "test": "assert     remove_kth_element([1,2,3],1) == [2,3], \"Wrong answer\"",
        "num_ids": 2100,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    a = max(test_list, key=lambda x: x[N-1])\n    return a\n",
        "test": "assert ",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in range(0,len(lst)):\n        temp = lst[i]\n        temp.append(lst[i][0])\n        res.append(temp)\n    return res\n",
        "test": "assert     merge([[1,2],[3,4,5],[6,7,8]]) == [[1,2],[3,4,5],[6,7,8]]",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list_copy = test_list[:]\n    result = []\n    for i in range(len(test_list)):\n        result.append(sum(test_list_copy))\n        test_list_copy = test_list_copy[1:]\n    return result\n",
        "test": "assert cummulative_sum([-2, -3, -4, -5, -6]) == -19, 'Test Case 4 Failed'",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n",
        "test": "assert     average_tuple(((1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6))) == [(3.0, 3.5, 4.0)]",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] % test_tup2[i],)\n    return new_tup\n",
        "test": "assert     tuple_modulo((1,2), (3,4)) == (1,2)",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    j = 0\n    x, y = 0, 0\n    step = 0\n    steps_temp = steps\n    while(step < steps_temp):\n        step += 1\n        if(x >= d):\n            j += 1\n            if(y >= d):\n                return j\n            x = 0\n            y += 1\n        elif(y >= d):\n            j += 1\n            if(x <= -d):\n                return j\n            x -= 1\n            y = 0\n        else:\n            x += 1\n            y += 1\n    return j\n",
        "test": "assert     min_Jumps(4, 3) == 1",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result=[]\n    i=0\n    j=0\n    while(i<len(nums1) and j<len(nums2)):\n        if(nums1[i]==nums2[j]):\n            result.append(nums1[i])\n            i=i+1\n            j=j+1\n        elif(nums1[i]<nums2[j]):\n            i=i+1\n        else:\n            j=j+1\n    return result\n",
        "test": "assert     div_list([3, 6, 9], [1, 2, 3]) == [[3, 2, 3], [1, 2, 3]], 'incorrect output'",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = list(test_str)\n    if len(test_str) == 0:\n        return ''\n    count_moves = 0\n    i = 0\n    while i < len(s):\n        if s[i].isdigit():\n            for j in range(i + 1, len(s)):\n                if not s[j].isdigit():\n                    s[i], s[j] = s[j], s[i]\n                    i += 1\n                    count_moves += 1\n                    break\n        i += 1\n    print(' '.join(s))\n    return count_moves\n",
        "test": "assert     move_num('CDEF') == 'DCDEF', 'Wrong output.'",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    print(a)\n    if len(a) == 1:\n        return a[0]\n    subset = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if ((a[j] % a[i]) == 0) and (a[j] not in subset):\n                subset.append(a[i])\n    return len(subset)\n",
        "test": "assert     largest_subset([3,4,5,8]) == 1, \"Error 2\"",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_list = sorted(arr1 + arr2)\n    mid = len(sorted_list)//2\n    return sorted_list[mid]\n",
        "test": "assert     get_median([1, 2, 3], [2, 3, 4], 3) == 3",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    nums_power = []\n    for i in range(len(nums)):\n        nums_power.append(nums[i]**n)\n    return nums_power\n",
        "test": "assert     nth_nums([1, 2, 3], 2) == [1, 4, 9]",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for i in string:\n        if i.isupper():\n            result += i\n        else:\n            result += i.upper()\n    return result\n",
        "test": "assert ",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.append(newList.pop(0))\n    return newList\n",
        "test": "assert     swap_List([2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2]",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    '''\n    For the triangle at the center of a circle, the area of the triangle is.\n    '''\n    from math import pi\n    area = pi * (r * r)\n    return area\n",
        "test": "assert ",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    # If end is not given\n    if end==None:\n        end=len(array)\n    \n    # If array is empty\n    if start>=end:\n        return None\n    \n    # If start is greater than end\n    if start>end:\n        return None\n    \n    # If start is equal to end\n    if start==end:\n        return start\n    \n    # Initialize the min_num as the start number\n    min_num=array[start]\n    \n    # For every number in range\n    for i in range(start+1,end+1):\n        # If the number is smaller than min_num\n        if array[i]<min_num:\n            # Update the min_num\n            min_num=array[i]\n    \n    # If min_num is not equal to the start number\n    if min_num!=array[start]:\n        # Return the next smallest number that is smaller than the start number\n        return find_First_Missing(array,start+1,end)\n    else:\n        # Return the next smallest number that is smaller than the end number\n        return find_First_Missing(array,start+1,end-1)\n        \nif __name__=='__main__':\n    array=[0,1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    array2=[1,2,3,4,5,6,7]\n    print(find_First_Missing(array2))\n    array3=[2,1,3,4,5,6,7]\n    print(find_First_Missing(array3))\n    array4=[2,4,5,3,1,6,7]\n    print(find_First_Missing(array4))\n    array5=[2,4,5,3,1,6,7]\n    print(find_First_Missing(array5))\n    array6=[2,4,5,3,1,6,7,8,9,10]\n    print(find_First_Missing(array6))\n    array7=[2,4,5,3,1,6,7,8,9,10,11]\n    print(find_First_Missing(array7))",
        "test": "assert",
        "num_ids": 2869,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces(\"\") == \"\", \"WRONG!\"",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for x in list:\n        if x%2 == 0:\n            evens.append(x)\n    return evens\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele)!= tuple: \n        raise TypeError('input must be a tuple')\n    if len(ele)!= 2: \n        raise TypeError('input tuple must have length 2')\n    if ele[0] < 0 or ele[1] < 0: \n        raise ValueError('input must be an integer')\n    sub.append((ele[0] - 1, ele[1])) \n    sub.append((ele[0] + 1, ele[1])) \n    sub.append((ele[0], ele[1] - 1)) \n    sub.append((ele[0], ele[1] + 1)) \n    return sub \n",
        "test": "assert     adjac((1,2), [[(1,2),(2,1),(3,2)],[(3,1),(3,2),(4,1)]]) == []",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_',' ')\n",
        "test": "assert     replace_spaces('a_b_c') == 'a b c'",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    i = 0\n    while count < len(num_list):\n        if num_list[count] == 0:\n            count += 1\n        else:\n            i += 1\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list\n",
        "test": "assert    move_zero([]) == []",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    xor_sum = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n            \n    return xor_sum\n            \ndef pair_XOR(arr,n):\n    '''\n    Write a python function to find the number of pairs that have the same value but different values in the given list.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    for i in range(len(h)-1):\n        hq.heappush(h, hq.heappop(h))\n    return h\ndef test_heap_sort():\n    assert heap_sort([2,3,1]) == [1,2,3]\n    assert heap_sort([]) == []\n    assert heap_sort([1,2,3]) == [1,2,3]\n    assert heap_sort([1,2,3,4,5]) == [1,2,3,4,5]\n    assert heap_sort([5,4,3,2,1]) == [1,2,3,4,5]\n    print('test_heap_sort pass')\nif __name__ == '__main__':\n    test_heap_sort(",
        "test": "assert ",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(10,10) == True, \"Error\"",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 24,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    \n    if v < 1 or t < -10 or t > 50:\n        raise ValueError('Invalid value')\n    \n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.0548\n    f = -0.3275\n    \n    wind_chill = a + (b * t) - (c * v ** 0.16) + (d * t ** 0.16) - (e * v ** 0.16 * t ** 0.16) + (f * v ** 0.16 * t ** 0.16)\n    wind_chill = round(wind_chill, 1)\n    return wind_chill\n",
        "test": "assert wind_chill(10,0) == 12.4",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        sum += len(name)\n    return sum\n",
        "test": "assert     sample_nam(['my name is', 'John','my sister is jane']) == 4, 'incorrect'",
        "num_ids": 2198,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return ''.join([x.strip() for x in re.split(\"[()]\", items) if x])\n",
        "test": "assert     remove_parenthesis('(foo)') == 'foo'",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (n**2 - 1) / 2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 2170,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile(r'^z+$')\n    if regex.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle(\"z\") == \"False\"",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k<=len(input):\n        k = k\n        #return reversed(input[k:])\n        res = input[::-1]\n        return res\n    else:\n        return \"Invalid input\"\n        \n    \n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9], 5) == [9,8,7,6,5,4,3,2,1], \"Wrong Answer\"",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup\n    for key in test_dict:\n        new_tup = new_tup + (test_dict[key],)\n    return new_tup\n",
        "test": "assert     add_dict_to_tuple((), {}) == ()",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #Create the grid\n    grid = Grid(cost, len(cost[0]), len(cost))\n    #Create a list to store max average\n    max_average = float(\"-inf\")\n    #Check each path\n    for path in grid.getAllPaths():\n        #Calculate the average\n        average = path.getAverage()\n        #Check if this path is better than the previous one\n        if average > max_average:\n            max_average = average\n    return max_average\n",
        "test": "assert maxAverageOfPath(",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_h = h\n    min_w = w\n    for i in students:\n        if students[i][0] < min_h or students[i][1] < min_w:\n            del students[i]\n    print(students)\n",
        "test": "assert     filter_data({'Peter': (1.72, 87.8), 'John': (1.68, 68.00), 'Vicky': (1.72, 50.00), 'Jasmine': (1.68, 74.00), 'Mayank': (1.72, 85.00), 'Yogi': (1.68, 79.00)}, 1.0, 1.2) == {'Vicky', 'Yogi'}",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,2,3], [1,4,5]) == 1",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    s = 0\n    for n in str(base):\n        s += int(n)**power\n    return s\n",
        "test": "assert ",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #return re.findall('\"[^\"]*\"', text1)\n    return re.findall(r'[\\\"](.*)[\\\"]', text1)\n",
        "test": "assert     extract_quotation(\"Alexa, Adam, Andrew, Anna, Stephen, Dylan, David, Daniel, Angela, Ben, John\") == \"Alexa, Adam, Andrew, Anna, Stephen, Dylan, David, Daniel, Angela, Ben, John\"",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    if n <= 0:\n        raise ValueError(\"Invalid value\")\n    for i in range(n):\n        test_tup[i] *= (i + 1)\n    return test_tup\n",
        "test": "assert     multiply_elements(test_tup) == (1,2,3,4,5)",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert type(lst1) == list, 'Invalid input'\n    assert type(lst2) == list, 'Invalid input'\n    assert len(lst1) == len(lst2), 'Invalid input'\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n",
        "test": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # First, create a set of the values.\n    values = set(nums)\n",
        "test": "assert     consecutive_duplicates([1,2,3,1,4,5,1,2,3,4,5,6,3,2,1]) == True, \"error\"",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h/3\n    return area\ndef lateralsurface_cylinder(r1,r2):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r1 and radius r2.\n    '''\n    area = 2*math.pi * (r1+r2) * min(r1,r2)\n    return area\ndef lateralsurface_paraboloid(x,y,a,b):\n    '''\n    Write a function to find the lateral surface area of a paraboloid given the x-coordinate, y-coordinate,\n     and the semi-axes lengths a and b.\n    '''\n    area = x**2/b**2 + y**2/a**2\n    return area\ndef lateral_surface_paraboloid_by_lengths(x1,x2,y1,y2,a,b):\n    '''\n    Write a function to find the lateral surface area of a paraboloid given the x-coordinate, y-coordinate,\n     and the semi-axes lengths a and b.\n    '''\n    area = abs(x1*y2 + x2*y1 - x1*y2 - x2*y1) / 2*(a**2 + b**2)\n    return area\n",
        "test": "assert ",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = input(\"Enter the text : \")\n    print(\"The text before replacing special chars with colons: \" + text)\n    text = re.sub(r\"[,]\", ':', text)\n    print(\"The text after replacing special chars with colons: \" + text)\n    return(text)\n",
        "test": "assert replace_specialchar(\"hello\") == \"hello\"",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "test": "assert     find_first_occurrence([1,2,3,3,3,4,4,4,5,6], 0) == -1",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            s += arr[i:j+1]\n    return s\n",
        "test": "assert ",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    '''\n    x = 0b101\n    x >> 1 = 0b10\n    x & ~1 = 0b11\n    x |= 1\n    x = 0b11\n    x >> 1 = 0b10\n    x & ~1 = 0b01\n    x |= 1\n    x = 0b01\n    '''\n    ans = 0\n    mask = 0b1\n    while n:\n        ans = (ans << 1) | ((n & mask) >> 1)\n        n = n & (~mask)\n    return ans\n",
        "test": "assert     set_middle_bits(8) ==    8",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right\n",
        "test": "assert     left_insertion([1,2,3,4], 2) == 1",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('A')==True, \"True\"",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*(n-1)/2\n",
        "test": "assert     geometric_sum(2) == 1",
        "num_ids": 131,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int((-1 + math.sqrt(1 + 8*n))/2)\n",
        "test": "assert     find_Index(5) == 2",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    new_dict = {}\n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1:\n            new_dict[test_tup[i]] = test_tup[i+1]\n        else:\n            new_dict[test_tup[i]] = test_tup[0]\n    return new_dict\n",
        "test": "assert     tuple_to_dict((1,2,3)) == {1:2, 2:3, 3:1}",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1]\n",
        "test": "assert     all_Characters_Same(\"abcdab\") == False, \"The output should be False.\"",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3 / 4\n",
        "test": "assert     area_tetrahedron(0.9) == 0.09312104516563101",
        "num_ids": 85,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if n < 1 or m < 1 or n < m:\n        return list\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n    \n",
        "test": "assert     rotate_right([1,2,3,4], 0) == [1,2,3,4], \"Failed in rotation by 0\"",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n",
        "test": "assert     check_none((1, 2, 3)) == False",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(range(startnum, endnum+1))\n    ",
        "test": "assert ",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or a>360:\n        return None\n    a = math.radians(a)\n    a = math.asin(math.sin(a)/r)\n    return r*a*2\n",
        "test": "assert ",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(X, Y, Z): \n        m= len(X) \n        n = len(Y) \n        o = len(Z) \n        dp_matrix = [[0 for i in range(n+1)] for j in range(m+1)] \n        for i in range(m+1): \n            for j in range(n+1): \n                for k in range(o+1): \n                    if i == 0 or j == 0 or k == 0: \n                        dp_matrix[i][j] = 0\n                    elif X[i-1] == Y[j-1] == Z[k-1]: \n                        dp_matrix[i][j] = dp_matrix[i-1][j-1] + 1\n                    else: \n                        dp_matrix[i][j] = max(dp_matrix[i][j-1], dp_matrix[i-1][j], dp_matrix[i-1][j-1]) \n        return dp_matrix[m][n] \n    return lcs(X, Y, Z)\n",
        "test": "assert     lcs_of_three('', '', '') == 0",
        "num_ids": 1538,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    return re.sub(r'\\b[A-Z][^A-Z]+\\b','',''.join(str1))\n",
        "test": "assert     capital_words_spaces(\"\") == \"\"",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def get_number(s):\n        try:\n            n = float(s)\n            return n\n        except ValueError:\n            return 0\n    return sorted(nums_str, key=get_number)\n",
        "test": "assert     sort_numeric_strings(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "test": "assert     add_tuple([], (1,2)) == None, 'add_tuple([], (1,2)) => None'",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if (2 * i + 1) < n:\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n    if (2 * i + 2) < n:\n        if arr[i] > arr[2 * i + 2] or arr[i] > arr[2 * i + 1]:\n            return False\n    if (2 * i + 3) < n:\n        if arr[i] > arr[2 * i + 3] or arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n",
        "test": "assert     check_min_heap_helper([3, 2, 1], 5) == 1",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n_sqrt = int(math.sqrt(n))\n    #n_sqrt = int(math.sqrt(n))\n    #return n_sqrt + 1\n    return n_sqrt + n_sqrt\n    #return n + sum([jacobsthal_num(n - i) for i in range(1, n_sqrt + 1)])\n    #return n + sum([jacobsthal_num(n - i) for i in range(1, n_sqrt + 1)])\n",
        "test": "assert     jacobsthal_num(10) == 3",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    if len(test_list) <= K:\n        min_k = test_list\n    else:\n        min_k = test_list[:K]\n    return min_k\n",
        "test": "assert     min_k([(\"a\",1),(\"b\",2),(\"c\",3)], 0) == []",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return ([i for i in range(len(l1)) if l1.count(l1[i]) == 3 and l2.count(l2[i]) == 3 and l3.count(l3[i]) == 3])\n",
        "test": "assert     extract_index_list([2,3], [2,3,3], [2,2,3]) == []",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first = second = float('inf')\n    for num in numbers:\n        if num <= first:\n            second = first\n            first = num\n        elif num < second and num!= first:\n            second = num\n    return second\n",
        "test": "assert second_smallest([4,1,3,2,10]) == 2",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(\"a+\")\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('aab') == True",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # to count reverse string pairs, you need to iterate the given list in forward direction and find the reverse string and compare the two. if both the strings are same, then you have one pair else two.\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert     count_reverse_pairs([]) == 0, \"incorrect\"",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def unique_sublists(list1):\n        unique_sublists={}\n        for i in list1:\n            tuple1=tuple(i)\n            if tuple1 in unique_sublists:\n                unique_sublists[tuple1]+=1\n            else:\n                unique_sublists[tuple1]=1\n        return unique_sublists\n    return unique_sublists(list1)\n    \ndef get_largest_value(list1):\n    '''\n    Write a function to get the largest value from a list.\n    '''\n    return max(list1)\n    \ndef is_even(number):\n    '''\n    Write a function that takes a number and returns True if the number is even, otherwise return False.\n    '''\n    return number%2==0\n    \ndef get_average_from_list(list1):\n    '''\n    Write a function that takes a list of numbers and return the average value.\n    '''\n    return sum(list1)/len(list1)\n    \ndef sum_digit_sum(number):\n    '''\n    Write a function that takes a number and returns the sum of all of the digits in that number.\n    '''\n    total=0\n    while number>0:\n        total=total+number%10\n        number=number//10\n    return total\n    \ndef get_prime_numbers(number):\n    '''\n    Write a function that takes a number as an argument and returns a list of prime numbers from 2 to the given number.\n    '''\n    prime_numbers=[]\n    for i in range(2,number):\n        prime=True\n        for j in range(2,i):\n            if i%j==0:\n                prime=False\n                break\n        if prime:\n            prime_numbers.append(i)\n    return prime_numbers\n    \ndef is_palindrome(word):\n    '''\n    Write a function that takes a word and returns whether or not the word is a palindrome. A palindrome is a word that reads the same forward and backward.\n    '''\n    word=word.lower()\n    return word==word[::-1]\n    \ndef max_count(list1):\n    '''\n    Write a function that takes a list of numbers as an argument and returns the maximum number among the numbers in the list.\n    '''\n    max=list1[0]\n    for i in list1:\n        if i>max:\n            max=i\n    return max\n    \ndef sum_of_digit_of_list(list1):\n    '''\n    Write a function that takes a list of numbers as an argument and returns the sum of the digits of all of the numbers in the list.\n    '''\n    sum=0\n    for i in list1:\n        sum=sum+i%10\n    return sum\n    \ndef get_reversed_word(word):\n    '''\n    Write a function that takes a word as an argument and returns the reversed word.\n    '''\n    return word[::-1]\n    \ndef is_substring(word1,word2):\n    '''\n    Write a function that takes two words as an arguments and returns True if word2 is a substring of word1, otherwise False.\n    '''\n    return word1 in word2\n    \ndef get_largest_number(list1):\n    '''\n    Write a function that takes a list of numbers and returns the largest number among the numbers in the list.\n    '''\n    return max(list1)\n    \ndef has_duplicates(list1):\n    '''\n    Write a function that takes a list of numbers and returns True if there are any duplicate numbers in the list, otherwise return False.\n    '''\n    return len(set(list1))!=len(list1)\n    \ndef is_palindrome_no_reversing(word):\n    '''\n    Write a function that takes a word and returns True if the word is a palindrome, otherwise False.\n    '''\n    word=word.lower()\n    i=0\n    j=len(word)-1\n    while i<=j:\n        if word[i]!=word[j]:\n            return False\n        i=i+1\n        j=j-1\n    return True\n    \ndef has_palindrome_no_reversing(word):\n    '''\n    Write a function that takes a word and returns True if the word is a palindrome, otherwise False.\n    '''\n    word=word.lower()\n    i=0\n    j=len(word)-1\n    while i<=j:\n        if word[i]!=word[j]:\n            return False\n        i=i+1\n        j=j-1\n    return True\n    \ndef generate_all_lists(list1):\n    '''\n    Write a function that takes a list of words as an argument and returns a dictionary where the keys are the words and the values are a list of words that have the same number of letter with each other.\n    '''\n    dict={}\n    for i in list1:\n        dict[i]=[]\n    for i in list1:\n        for j in list1:\n            if len(i)==len(j) and i!=j:\n                if i[::-1]==j:\n                    dict[i].append(j)\n    return dict\n    \ndef is_palindrome_no_reversing(word):\n    '''\n    Write a function that takes a word and returns True if the word is a palindrome, otherwise False.\n    '''\n    word=word.lower()\n    i=0\n    j=len(word)-1\n    while i<=j:\n        if word[i]!=word[j]:\n            return False\n        i=i+1\n        j=j-1\n    return True\n    \ndef has_palindrome_no_reversing(word):\n    '''\n    Write a function that takes a word and returns True if the word is a palindrome, otherwise False.\n    '''\n    word=word.lower()\n    i=0\n    j=len(word)-1\n    while i<=j:\n        if word[i]!=word[j]:\n            return False\n        i=i+1\n        j=j-1\n    return True\n    \ndef generate_all_substrings(string):\n    '''\n    Write a function that takes a string as an argument and returns a list of all of the substrings of the string.\n    '''\n    substring_list=[]\n    for i in range(0,len(string)+1):\n        for j in range(i,len(string)+1):\n            substring_list.append(string[i:j])\n    return substring_list\n    \ndef is_palindrome_using_substrings(string):\n    '''\n    Write a function that takes a string as an argument and returns True if the string is a palindrome, otherwise False.\n    '''\n    string_list=generate_all_substrings(string)\n    for i in string_list:\n        if i==i[::-1]:\n            return True\n    return False\n    \ndef has_palindrome_using_substrings(string):\n    '''\n    Write a function that takes a string as an argument and returns True if the string is a palindrome, otherwise False.\n    '''\n    string_list=generate_all_substrings(string)\n    for i in string_list:\n        if i==i[::-1]:\n            return True\n    return False\n    \ndef find_smallest_number(list1):\n    '''\n    Write a function that takes a list of numbers as an argument and returns the smallest number among the numbers in the list.\n    '''\n    return min(list1)\n    \ndef sum_of_numbers(list1):\n    '''\n    Write a function that takes a list of numbers as an argument and returns the sum of all of the numbers in the list.\n    '''\n    return sum(list1)\n    \ndef sum_of_unique_numbers(list1):\n    '''\n    Write a function that takes a list of numbers as an argument and returns the sum of all of the unique numbers in the list.\n    '''\n    return len(set(list1))\n    \ndef get_squared_",
        "test": "assert ",
        "num_ids": 2670,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal('42.3')",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # if there is only one element, return True\n    if len(arr) == 1:\n        return True\n    \n    # if there is only one unique element, return False\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return False\n    \n    # for all the elements except last one, if the element at index 1 and the element at index 2 are not equal, return False\n    for index in range(len(arr)-1):\n        if arr[index]!= arr[index+1]:\n            return False\n    \n    return True\n    ",
        "test": "assert     unique_Element([1, 1, 2, 2, 3, 4, 4]) == False",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3>12 or monthnum3<=0:\n        print('Please enter a number between 1 and 12')\n        return False\n    elif monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        print('No, the month of',monthnum3,'has only 30 days')\n        return True\n    elif monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11:\n        print('No, the month of',monthnum3,'has only 31 days')\n        return True\n    else:\n        print('No, the month of',monthnum3,'has both 30 days and 31 days')\n        return True\n    ",
        "test": "assert     check_monthnumber_number(2) == True, \"Month number 2 has 30 days\"",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    i = 0\n    j = n-1\n    diff = -1\n    while i < j:\n        temp = arr[i] + arr[j]\n        if diff == -1:\n            diff = temp\n        else:\n            diff = min(diff, temp)\n        i+=1\n        j-=1\n    return diff\n",
        "test": "assert ",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if not str:\n        return 0\n    n=0\n    for i in str:\n        if i.isdigit():\n            n+=1\n    return n\n",
        "test": "assert     number_ctr('1234') == 4",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return n\n    p = 2\n    while (p * p <= n):\n        if (n % p == 0):\n            return n / p\n        p += 1\n    return -1\n    \n'''",
        "test": "assert is_polite(5) == 8",
        "num_ids": 222,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    for i in range(0, n):\n        if i == 0 or l1[i]!= l1[i-1]:\n            l2.append([l1[i], i+1])\n    return l2\n",
        "test": "assert     pair_wise(['cat', 'dog', 'rabbit']) == [['cat', 'dog'], ['dog', 'rabbit'], ['rabbit', 'cat']]",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 21,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len(arr) - len([item for item in arr if item <= sum / 2])\n",
        "test": "assert     get_pairs_count([1, 1, 1, 1], 1) == 4, 'WRONG RESULT'",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = list(set(li1) - set(li2))\n    li4 = list(set(li2) - set(li1))\n    li5 = li3 + li4\n    return li5\n",
        "test": "assert     Diff([1,2,3,4], [1,2,3]) == [4]",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 770,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd = 0\n    sum_odd = 0\n    for i in range(1,n+1) : \n        if i%2!= 0 : \n            odd = i\n            sum_odd += odd\n    return sum_odd\n",
        "test": "assert     odd_num_sum(0) == 0",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Your code here\n    stack = []\n    for char in exp:\n        if char == \"(\" or char == \"{\":\n            stack.append(char)\n        elif char == \")\":\n            if stack:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n        elif char == \"}\":\n            if stack:\n                if stack[-1] == \"{\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_expression(')') == False, 'check_expression fails'",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 24,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = test_str.split(\" \")\n    new_list = []\n    for i in new_str:\n        if len(i) == K:\n            new_list.append(i)\n    return \" \".join(new_list)\n    \n",
        "test": "assert     remove_length('aaabbbbccccdddd', 4) == ''",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_list=re.findall(pattern,text)\n    for i in range(len(pattern_list)):\n        text_pos=text.find(pattern_list[i])\n        print(pattern_list[i],text_pos)\n",
        "test": "assert     occurance_substring(\"aaabab\",\"ba\") == None",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #Solution 1\n    # x = 0\n    # for i in range(0, len(nums)):\n    #     if i%2 == 1:\n    #         if nums[i]%2!= 0:\n    #             x = x+1\n    # if x == 0:\n    #     return \"YES\"\n    # else:\n    #     return \"NO\"\n",
        "test": "assert not odd_position([1,2,3,4,5,6,7,8,9,10,11,12])",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    length = len(test_str)\n    for i in range(length - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert     count_vowels('e') == 0",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum+=i\n    return sum\n    \n",
        "test": "assert ",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # if list is empty or only one element\n    if not list1 or len(list1) == 1:\n        return list1\n    \n    list1.sort()\n    \n    # check if consecutive duplicates exist\n    d = {}\n    for i in range(1, len(list1)):\n        if list1[i - 1] == list1[i]:\n            d[list1[i - 1]] = d.get(list1[i - 1], 0) + 1\n    \n    # prepare output list\n    output_list = []\n    for key, val in d.items():\n        if val == 1:\n            output_list.append(key)\n        else:\n            output_list.append([key] * val)\n    \n    return output_list\n",
        "test": "assert     pack_consecutive_duplicates(['a', 'b', 'a', 'b', 'a', 'b']) == [['a', 'b', 'a', 'b']]",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dictionary = {}\n    for i in list1:\n        if i not in list_dictionary.keys():\n            list_dictionary[i] = 1\n        else:\n            list_dictionary[i] += 1\n    return list_dictionary\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 2174,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,2))\n",
        "test": "assert find_combinations([(1,2,3),(4,5,6),(7,8,9)]) == [[1,2,3],[4,5,6],[7,8,9]], \\",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert     count_divisors(2) == 1",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            s += arr[i]\n    return s\n",
        "test": "assert odd_length_sum([1,1,1,1,1]) == (0+1+1+1+1+1), \"Odd length sum function fails\"",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # define variables\n    even_product = 1\n    odd_product = 1\n    # check if odd number exist and if it is the last number in the list\n    if len(list1) > 1:\n        # check if the number is odd and if it is the last number in the list\n        if list1[-1] % 2!= 0:\n            # multiply the odd product by the number in the list\n            odd_product = odd_product * list1[-1]\n    # multiply the even product by the number in the list\n    even_product = even_product * list1[0]\n    # return the product\n    return even_product, odd_product\n",
        "test": "assert ",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 33,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) is str and '(' in test_str and ')' in test_str:\n        test_str = test_str.replace('(','')\n        test_str = test_str.replace(')','')\n        test_str = test_str.split(',')\n        test_str = tuple(int(x) for x in test_str)\n        return test_str\n    else:\n        return tuple()\n",
        "test": "assert     tuple_str_int('(1, 2, 3, 4, 5)') == (1, 2, 3, 4, 5)",
        "num_ids": 866,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i]!= x:\n        return i\n    else:\n        return i + 1\n",
        "test": "assert     right_insertion([], 1) == 0",
        "num_ids": 2290,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    p = r'a+b+b+b+b'\n    result = re.search(p, text)\n    print(result)\n    print(result.group())\n    return result.group()\n",
        "test": "assert     text_match_three(\"babababababa\") == False",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n    \n",
        "test": "assert     new_tuple([\"a\", \"b\", \"c\", \"d\", \"e\"], \"a\") == (\"a\",)",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if isinstance(nums, list) == False:\n        return False\n    nums_even = []\n    for i in range(len(nums)):\n        if i%2 == 0:\n            nums_even.append(nums[i])\n    if len(nums_even) == len(nums):\n        return True\n    else:\n        return False\n",
        "test": "assert     even_position([1,2,3,4,5]) == False",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0], remove_nested(test_tup[1:])\n",
        "test": "assert     remove_nested((1,2,3,4,5,6,7,8,9,10,11)) == ((1,2,3,4,5,6,7,8,9,10,11),)",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 33,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for i in input_list:\n        if type(i) is list:\n            count = count + 1 \n    return count \n",
        "test": "assert     count_list([[1],2,[3],4,[]]) == 3, \"The correct result is 3\"",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    h=len(arr)-1\n    while l<h:\n        mid=(l+h)//2\n        if x<arr[mid]:\n            h=mid-1\n        elif x>arr[mid]:\n            l=mid+1\n        else:\n            return mid\n    return -1\n",
        "test": "assert     last([4,5,6,7,8,9],10) == -1",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'a.{1}b')\n    match = regex.search(text)\n    print(match.group())\n",
        "test": "assert text_starta_endb(\"ababa\") == \"ababa\"",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total = total + i\n    return total\n",
        "test": "assert     return_sum({'a': 0}) == 0",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s=0\n    for i in range(n,n+1):\n        if i%2==1:\n            s=s+i\n    return s\n",
        "test": "assert ",
        "num_ids": 2151,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum=sum+arr[i]\n    return sum\n",
        "test": "assert     _sum([1, 2, 3]) == 6",
        "num_ids": 236,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))\n",
        "test": "assert ",
        "num_ids": 71,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \" \".join(text.split())\n",
        "test": "assert     remove_all_spaces(' ') == '', \"Should remove all spaces at the beginning of a string\"",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y):\n        if (i == z):\n            count += 1\n    return count\n",
        "test": "assert     test_three_equal(2,2,3) == 0",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr)==0 or arr==None:\n        return 0\n    #max_element = max(arr)\n    #min_element = min(arr)\n    #print(\"max_element = \",max_element)\n    #print(\"min_element = \",min_element)\n    #print(\"arr = \",arr)\n    if max(arr) - min(arr) == len(arr)-1:\n        return 0\n    #else:\n    #    print(\"else\")\n    count = 0\n    for i in range(1,len(arr)):\n        #print(\"i = \",i)\n        if arr[i] < arr[i-1]:\n            #print(\"yes\")\n            count += 1\n    #print(\"count = \",count)\n    return count\n",
        "test": "assert     count_rotation([-1, 2, 3, 4, 5]) == 0",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0):\n        return False\n    x = n\n    sq = 0\n    while (x >= 1):\n        sq = sq + (x % 10)**2\n        x = x // 10\n    return sq == n\n",
        "test": "assert     is_perfect_square(3) == False, \"is_perfect_square is not behaving correctly\"",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return True if sum(arr) % 2 == 0 else False\n",
        "test": "assert     is_product_even([2,3,4,5]) == True",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # make an empty dictionary of lists\n    output_d = {}\n    for _ in range(len(lists)):\n        output_d[_] = []\n    \n    for i in range(len(lists)):\n        if i == 0:\n            output_d[i] = lists[i]\n        else:\n            output_d[i] = lists[i]\n            for j in range(len(output_d[i])):\n                output_d[i].append(max(output_d[i][j], output_d[i-1][j]+lists[i][j]))\n    \n    return max(output_d.values(), key=max)\n    \ndef max_sum_list_reduce(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # make an empty dictionary of lists\n    output_d = {}\n    for _ in range(len(lists)):\n        output_d[_] = []\n    \n    def max_sum(lists, _max, _sum):\n        if _sum > _max:\n            return _sum\n        elif _sum == _max:\n            return _sum\n        else:\n            for i in range(len(lists)):\n                if i == 0:\n                    output_d[i] = lists[i]\n                else:\n                    output_d[i] = lists[i]\n                    for j in range(len(output_d[i])):\n                        output_d[i].append(max(output_d[i][j], output_d[i-1][j]+lists[i][j]))\n            \n            return max(output_d.values(), key=max)\n        \n    max_sum(lists, 0, 0)\n    \n    return max(output_d.values(), key=max)\n    \ndef longest_word(str_list):\n    '''\n    Write a function that returns the longest word in a list of words.\n    '''\n    \n    max_len = 0\n    cur_max = \"\"\n    for word in str_list:\n        if len(word) >= max_len:\n            max_len = len(word)\n            cur_max = word\n            \n    return cur_max\n",
        "test": "assert ",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    res = []\n    if len(test_str) == 1:\n        return 1\n    else:\n        res.append(1)\n        for i in range(1,len(test_str)):\n            if test_str[i] == test_str[i-1]:\n                res.append(1)\n            else:\n                res.append(max(1,res[-1]))\n        return max(res)\n",
        "test": "assert     max_run_uppercase(\"aA\") == 1",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "test": "assert     first_odd([]) == None, 'Empty list'",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i][-1] == K:\n            return True\n    return False\n",
        "test": "assert     check_K(((1, 2), (2, 3)), 1) == False, '2nd Test Case'",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    flag = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            flag = False\n            break\n    return flag\n",
        "test": "assert     check_smaller(('a','b','c', 'd', 'e'), ('g','h','i', 'j', 'k')) == False",
        "num_ids": 488,
        "indeed": true
    }
]