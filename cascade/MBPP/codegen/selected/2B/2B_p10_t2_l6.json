[
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "test": "assert     similar_elements((1, 2, 3), (4, 5, 6)) == []",
        "num_ids": 3080,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(1) == False",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest_numbers = []\n    for i in range(n):\n        nums.sort()\n        largest_numbers.append(nums[len(nums)-i-1])\n    return largest_numbers\n",
        "test": "assert     heap_queue_largest([4,3,2,1],4) == [4,3,2,1]",
        "num_ids": 1142,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    else:\n        while x > 0:\n            if x % 2!= 0:\n                return False\n            x = x >> 1\n        return True\n",
        "test": "assert     is_Power_Of_Two(0) == False, \"power of 2 failed\"",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w+', text)\n    return result\n",
        "test": "assert     find_char_long('') == [],     \"find_char_long should return an empty list if no word is found.\"",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "test": "assert     square_nums([1, 3, 9]) == [1, 9, 81]",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    m = len(str)\n    if m < 2:\n        return 0\n    # str = \"abc\"\n    \n    def rec(m):\n        if m <= 2:\n            return 0\n        if str == str[::-1]:\n            return m\n        else:\n            return rec(m - 1) + 1\n    return rec(m)\n",
        "test": "assert     find_Rotations('a') == 0, 'Should be 0'",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ind = s.find(ch)\n    s = s[0:ind] + s[ind+1:]\n    return s\n",
        "test": "assert     remove_Occ('ab', 'b') == 'a'",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key = lambda x: sum(x))\n    return M\n",
        "test": "assert     sort_matrix([[5,3,5],[1,2,2],[3,1,1]]) == [[1,2,2],[3,1,1],[5,3,5]]",
        "num_ids": 3200,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return ((l*b)*h)\n",
        "test": "assert     find_Volume(1,1,1) == 1",
        "num_ids": 2609,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search(r'[a-z]+_[a-z]*',text) else False\n",
        "test": "assert     text_lowercase_underscore(\"True\")    == False",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "test": "assert ",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    st=[]\n    st1=[]\n    for i in string:\n        st.append(i)\n    for i in st:\n        if i not in st1:\n            st1.append(i)\n    return st1\n",
        "test": "assert ",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = sorted(arraynums)\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n",
        "test": "assert     test_duplicate([2,3,5,0,2]) == True",
        "num_ids": 752,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if type(x)==int and x==3 or x==7 or x==9 or x==11:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(1)    == False",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert int into a string\n    num = str(num)\n    # reverse string\n    rev = num[::-1]\n    # convert reversed string into int\n    rev = int(rev)\n    # if number is one less than twice its reverse\n    if rev == int(rev)*2:\n        return True\n    else:\n        return False\n",
        "test": "assert     rev(10) == False",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    import heapq\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, -num)\n    max_num = -heapq.heappop(heap)\n    \n    return max_num\n",
        "test": "assert     find_Max_Num([1,3,4,5,2]) == 5, 'passed'",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     opposite_Signs(1,-1) ",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i < n:\n        i += 2\n    return i\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    string = s\n    substring_list = []\n    for i in range(len(string)):\n        substring = string[i:i+1]\n        # print(substring)\n        if len(substring) > 0:\n            substring_list.append(substring)\n    count = 0\n    for i in substring_list:\n        if sum([int(x) for x in i]) == len(i):\n            count += 1\n    return count\n",
        "test": "assert     count_Substrings('12') == 1",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n    return smallest\n",
        "test": "assert     smallest_num([5,10,6,7,4]) == 4, \"Wrong answer: 4\"",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if max_diff < diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert     max_difference([]) == 0",
        "num_ids": 1415,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 110,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    result = sorted(subjectmarks, key=lambda sub: (sub[1], sub[0]))\n    return result\n",
        "test": "assert subject_marks([(1,5),(3,3),(2,2),(4,4),(1,1)]) == [(1,1),(2,2),(3,3),(4,4),(1,5)]",
        "num_ids": 975,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def recursive_list_sum(data_list):\n        '''\n        Write a function to flatten a list and sum all of its elements.\n        '''\n        def recursive_list_sum(data_list):\n            '''\n            Write a function to flatten a list and sum all of its elements.\n            '''\n            if type(data_list) == list:\n                sum = 0\n                for item in data_list:\n                    sum = sum + recursive_list_sum(item)\n                return sum\n            else:\n                return data_list\n        return recursive_list_sum(data_list)\n    return recursive_list_sum(data_list)\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 1132,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(0, len(list)):\n        if list[i] >= 0:\n            count = count + 1\n    return count\n",
        "test": "assert     pos_count([1,3,-5,3]) == 3, \"Wrong!\"",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # write your code here\n    dp = {}\n    def num_ways(n,k):\n        if n == 1:\n            return 1\n        if k > n:\n            return 0\n        if n in dp:\n            return dp[n]\n        ways = 0\n        for i in range(1,k+1):\n            ways += num_ways(n-1,i)*num_ways(n-1,k-i)\n        dp[n] = ways\n        return ways\n    return num_ways(n,n)\n",
        "test": "assert     bell_number(1) == 1, '1'",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] > A[1]:\n        return False\n    for i in range(1, len(A) - 1):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([1,1,1]) == True",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l is None:\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([], [1,2,3,4,5]) == False",
        "num_ids": 2543,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return False\n    if len(Input) == 1:\n        return True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[i-1]):\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,), (1,), (1,), (1,), (1,), (1,)]) == True, \"Wrong Answer\"",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                swapped = True\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n    return nums\n",
        "test": "assert     comb_sort([0, 5, 3, 2, 2]) ==    [0, 2, 2, 3, 5], \"Wrong!\"",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 110,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n==(0.25*(1+4*0.25))**2\n",
        "test": "assert     dif_Square(1) == False",
        "num_ids": 4497,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns([1,1,1], [[1,1,1],[1,1,0],[1,0,1]]) == False",
        "num_ids": 1409,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        tup = test_list[i]\n        for j in range(len(tup)):\n            if tup[j] % K!= 0:\n                return []\n    return test_list\n",
        "test": "assert     find_tuples([(0, 1), (3, 2)], 4) == []",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n",
        "test": "assert     is_Diff(2) == False, 'is_Diff(2) is wrong!'",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2!= 0\n",
        "test": "assert     word_len('DIVE') == False, 'Check your work'",
        "num_ids": 2456,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    total = 0\n    i = 1\n    while i <= n:\n        total = total + i\n        i = i + 1\n    return total\n",
        "test": "assert     tetrahedral_number(0) == 0 ",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    def V(r):\n        return math.pi * (r ** 3)\n    if type(r)!= float:\n        r = float(r)\n    return V(r)\n",
        "test": "assert     volume_sphere(0) == 0, \"volume_sphere should return 0 if the input is 0\"",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_NUM = 97\n    asc_str = ''\n    for ch in strr:\n        asc_str = asc_str+chr(ASCII_NUM+ord(ch)-ASCII_NUM)\n    return asc_str\n",
        "test": "assert     get_Char(\"\") == \"\", \"get_Char: Expected None\"",
        "num_ids": 2837,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (sequence(n-1) + sequence(n-2))\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r ** 2\n    return s\n",
        "test": "assert     surfacearea_sphere(1) == 4 * math.pi, \"Wrong output\"",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int( (3 * n * n - 1) ** 0.5 )\n    \n    \ndef centered_hexagonal_number_test():\n    '''\n    Tests for centered_hexagonal_number function.\n    '''\n    print('Testing centered_hexagonal_number()...')\n    for n in range(10):\n        print('%d' % centered_hexagonal_number(n))\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #x = {**dict1, **dict2, **dict3}\n    #return x\n    return {**dict1, **dict2, **dict3}\n",
        "test": "assert merge_dictionaries_three({'a':1,'b':2}, {'d':2,'e':4}, {'c':3}) == {'a':1,'b':2,'c':3,'d':2,'e':4}",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for ele in list1:\n        if ele not in dict1:\n            dict1[ele] = 0\n        dict1[ele] += 1\n    return dict1\n",
        "test": "assert     freq_count([]) == {}, \"Test Failed\"",
        "num_ids": 4714,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N >= 1:\n        for i in range(N, 1, -1):\n            if i - 1!= i and i - 1 < N and abs(N - i) < abs(N - i - 1):\n                return i - 1\n            else:\n                continue\n    else:\n        return N\n",
        "test": "assert     closest_num(0) == 0",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if max_len < len(word):\n            max_len = len(word)\n    return max_len\n",
        "test": "assert     len_log(['abc', 'xyz']) == 3",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring([\"cat\",\"bat\"], \"cat\") == True, \"Should return True\"",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    flag = False\n    if (n!= 0) and (n%2 == 0): \n        if (n == 2) or (n%3 == 0): \n            flag = True\n    return flag\n",
        "test": "assert     is_undulating(2) == True, '2 is undulating'",
        "num_ids": 2792,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(2,1) == 2",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = test_list[0]\n    for i in range(len(test_list)):\n        if min_val[1] > test_list[i][1]:\n            min_val = test_list[i]\n    return min_val\n",
        "test": "assert     index_minimum([(\"krishna\", 2), (\"harry\", 4), (\"zixiao\", 5)]) == (\"krishna\", 2)",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #code here\n    res=0\n    for i in lst:\n        res=max(res,len(i))\n    return res\n",
        "test": "assert     Find_Min_Length([[2], [3], [1], [4], [5]]) == 1",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    return int(n / 2) + n % 2\n    \n    ",
        "test": "assert divisor(1) == 1, \"1 should be the divisor of 1.\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for l in list1:\n        for i in l:\n            if i in counts:\n                counts[i] += 1\n            else:\n                counts[i] = 1\n    return counts\n",
        "test": "assert     frequency_lists([]) == {}, \"Empty list\"",
        "num_ids": 1205,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product = product * i\n    return product\n",
        "test": "assert     multiply_num([2,3,4]) == 24, \"It should return the product\"",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num += 1\n        strNum = str(num)\n        if strNum == strNum[::-1]:\n            return num\n",
        "test": "assert     next_smallest_palindrome(21) == 22, \"Wrong result\"",
        "num_ids": 2502,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    lo, hi = 0, len(arr)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if mid == k - 1 or mid == k:\n            return arr[mid]\n        if mid > k - 1:\n            hi = mid\n        else:\n            lo = mid + 1\n    return arr[lo]\n",
        "test": "assert     kth_element([1, 2, 3, 4], 3) == 3, 'Fail'",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = word.title()\n    for i in range(len(s)-1):\n        s = s[:i+1].lower()+s[i+1:]\n    return s\n",
        "test": "assert     snake_to_camel('') == ''",
        "num_ids": 2624,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    elif n == 2 and m == 2:\n        return 3\n    elif n == 3 and m == 3:\n        return 6\n    elif n == 4 and m == 4:\n        return 9\n    else:\n        return eulerian_num(n, m - 1) + eulerian_num(n - 1, m) + eulerian_num(n - 2, m)\n",
        "test": "assert     eulerian_num(1, 1) == 1, 'bad input'",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    true_count = 0\n    for i in range(len(lst)):\n        if lst[i]:\n            true_count += 1\n            \n    return true_count\n    ",
        "test": "assert     count([True, False, False, True]) == 2, \"The count of true numbers is wrong.\"",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_tup) == tuple:\n        if test_list:\n            test_tup = test_tup + tuple(test_list)\n    else:\n        test_tup = test_tup + test_list\n    return test_tup\n",
        "test": "assert     add_lists([], (1,2)) == (1,2)",
        "num_ids": 993,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while num1:\n        merged_list.append(num1.pop(0))\n    while num2:\n        merged_list.append(num2.pop(0))\n    while num3:\n        merged_list.append(num3.pop(0))\n    merged_list.sort()\n    return merged_list\n    # num1 = [1,2,4]\n    # num2 = [1,2,3]\n    # num3 = [1,2,3]\n    # merged_list = merge_sorted_list(num1, num2, num3)\n    # print(merged_list)\n",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 2342,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s)\n    rotation = n\n    for i in range(n):\n        new_list = []\n        for j in s:\n            if int(j)%2!=0:\n                new_list.append('1')\n            else:\n                new_list.append('0')\n        s = new_list\n    print(s)\n    \n    return len(s)\n",
        "test": "assert     odd_Equivalent('10',1) == 2",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in common:\n                return common\n            common.append(element)\n    return common\n",
        "test": "assert common_in_nested_lists([[1,2,3],[1,2,3]]) == [1,2,3], \"The numbers in the nested lists should be equal\"",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer('1') == True",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary)!= 0:\n            return False\n    return True\n",
        "test": "assert         empty_dit([{'key':123},{}]) == False",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = sorted(nums)\n    return sum(nums)\n",
        "test": "assert tuple_to_int((1,2,3)) == 6",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) is str:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                test_list[i] = None\n    return test_list\n",
        "test": "assert     list_to_float([[1,2.0],[3,4.0]]) == [[1.0,2.0],[3.0,4.0]]",
        "num_ids": 1432,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # return string.split()\n    return string.split()\n",
        "test": "assert (string_to_list('1 2 3 4') == ['1', '2', '3', '4'])",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 0\n    result = 0\n    for i in range(len(arr)):\n        if count == 0:\n            result = arr[i]\n            count += 1\n        else:\n            if result == arr[i]:\n                count += 1\n            else:\n                count -= 1\n    return result\n",
        "test": "assert search([4,4,4,4,4,4,4,4,4]) == 4, \"Should return 4\"",
        "num_ids": 1362,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i][0] * list1[i][1] > max_product:\n                max_product = list1[i][0] * list1[i][1]\n            if list1[j][0] * list1[j][1] > max_product:\n                max_product = list1[j][0] * list1[j][1]\n    return max_product\n",
        "test": "assert max_product_tuple([(4, 3), (5, 6)]) == 5 * 6, 'test failed'",
        "num_ids": 1747,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = 0\n    for number in range(2, limit):\n        # print(number)\n        amicable_sum = 0\n        for divisor in range(1, number):\n            if number % divisor == 0:\n                # print(divisor, number/divisor)\n                if number == divisor + divisor:\n                    break\n                else:\n                    amicable_sum = amicable_sum + divisor + divisor\n        if amicable_sum == number:\n            # print(number)\n            amicable_numbers = amicable_numbers + number\n    return amicable_numbers\n",
        "test": "assert     amicable_numbers_sum(1) == 0",
        "num_ids": 2974,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a) - cmath.phase(b)\n",
        "test": "assert     angle_complex(1+0j,0+0j) == 0, 'Wrong Answer'",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    str_length = len(string)\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    for i in range(str_length):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        diff = zero_count - one_count\n        max_diff = max(max_diff, diff)\n    return max_diff\n",
        "test": "assert     find_length('000010101110101') == 4",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n    \nprint(\"sum(4,8)=\",sum(4,8))\n",
        "test": "assert     sum(1,5) == 6, \"sum doesn't work\"",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(10, 5) == 50",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return_list = []\n    for word in str:\n        if len(word) > n:\n            return_list.append(word)\n    return return_list\n",
        "test": "assert     long_words(2, ['hi', 'word', 'hi']) == ['word']",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix,list) or len(my_matrix)!= 9:\n        return False\n    for row in range(len(my_matrix)):\n        if not isinstance(my_matrix[row],list):\n            return False\n        if len(my_matrix[row])!= 9:\n            return False\n    # check whether all numbers of each row are arranged in order\n    for row in my_matrix:\n        if sorted(row)!= sorted(row[::-1]):\n            return False\n    # check whether all numbers of each column are arranged in order\n    for col in range(len(my_matrix)):\n        col_values = []\n        for row in my_matrix:\n            col_values.append(row[col])\n        if sorted(col_values)!= sorted(col_values[::-1]):\n            return False\n    # check whether each row and column have the same sum\n    # this is equivalent to sum(row) == sum(col)\n    sum_matrix = []\n    for i in range(len(my_matrix)):\n        sum_row = 0\n        for j in range(len(my_matrix)):\n            sum_row += my_matrix[i][j]\n        sum_matrix.append(sum_row)\n    for i in range(len(sum_matrix)):\n        if sum_matrix[i]!= sum(my_matrix[i]):\n            return False\n    return True\n",
        "test": "assert     magic_square_test([[2,7,6],[9,5,1],[4,3,8]]) == False, \"Should be False\"",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    # print(d)\n    l = list(d.items())\n    l.sort(key=lambda x: x[1])\n    # print(l)\n    return l[-1][0]\n",
        "test": "assert     max_occurrences([1,2,3,3,3,3,3,3,3]) == 3",
        "num_ids": 2968,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str = list(str1)\n    for i in range(len(str)):\n        if str[i] == \"a\" or str[i] == \"e\" or str[i] == \"i\" or str[i] == \"o\" or str[i] == \"u\":\n            str[i] = \"z\"\n        else:\n            str[i] = str[i].lower()\n    return \"\".join(str)\nprint(reverse_vowels('Hello world!'))\n",
        "test": "assert     reverse_vowels('')         == '', 'Empty string!'",
        "num_ids": 1452,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for item in tup1:\n        str1 += str(item)\n    return str1\n",
        "test": "assert     tup_string(('a', 'b', 'c')) == 'abc'",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # return sum([x for x in nums if x < 0])\n    sum = 0\n    for x in nums:\n        if x < 0:\n            sum += x\n    return sum\n",
        "test": "assert     sum_negativenum([1,-1,2,3,5,6]) == -1",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        i = 1\n        j = 1\n        num = 1\n        while i <= n:\n            i = i + 2\n            num = num + 6 * j\n            j = j + 1\n        return num\n",
        "test": "assert     hexagonal_num(1) == 1",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i==0:\n            count+=1\n    return count/len(nums)\nprint(zero_count([0,1,0,1,0,1,1]))",
        "test": "assert     zero_count([1,0,1,0]) == 0.5",
        "num_ids": 4838,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s=0\n    while n!=0:\n        if n%2==0:\n            s=s+1\n        n=n//2\n    if s>=1:\n        return True\n    else:\n        return False\n    \ndef is_Sum_Of_Powers_Of_Two_Recursive(n):\n    if n==0:\n        return True\n    if n%2==0:\n        return is_Sum_Of_Powers_Of_Two_Recursive(n//2)\n    return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(3) == False, 'is_Sum_Of_Powers_Of_Two is not working as expected'",
        "num_ids": 1242,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*math.pi*r\n    return circumference\n",
        "test": "assert circle_circumference(0) ==  0, 'Wrong answer.'",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    nums = set()\n    for i in test_list:\n        for j in i:\n            nums.add(j)\n    return nums\n",
        "test": "assert     extract_singly([[1, 2, 3], [4, 5, 6]]) == set([1,2,3,4,5,6])",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 110,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    n = len(nums)\n    # largest = largest_idx = nums.index(max(nums))\n    for i in range(n):\n        # print(i, 'i')\n        # print(nums)\n        # print(largest)\n        # print(nums[largest])\n        # print(largest_idx)\n        # swap largest with largest_idx\n        # nums[i], nums[largest_idx] = nums[largest_idx], nums[i]\n        largest_idx = i\n        for j in range(n-1, i, -1):\n            if nums[j] < nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n                largest_idx = j\n    return nums\n",
        "test": "assert     pancake_sort([4,3,2,1]) == [1,2,3,4]",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    def duplicate(list1,list2,list3):\n        count = 0\n        for x in range(len(list1)):\n            if list1[x] == list2[x] and list2[x] == list3[x]:\n                count +=1\n        return count\n    return duplicate(list1,list2,list3)\n",
        "test": "assert     count_samepair([1,2,3],[1,2,3],[1,2,4]) == 2, 'Wrong Answer'",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    x = []\n    y = []\n    count = 0\n    for i in range(len(Input)):\n        if Input[i] == 'a':\n            x.append(Input[i])\n        elif Input[i] == 'b':\n            y.append(Input[i])\n    if len(x) > 0:\n        count += 1\n    if len(y) > 0:\n        count += 1\n    return count\n    \nInput = ('a','a','b','b','b','b','a','a')\nfind_lists(Input)",
        "test": "assert     find_lists((1,2,3,4,5,6,7,8,9,10)) == 0, 'Wrong Output'",
        "num_ids": 2861,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n",
        "test": "assert     max_Abs_Diff([-1, 1, 1, 1]) == 2, \"Should be 2\"",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    # print(a, b, n)\n    for i in range(1, n+1):\n        if (n - i*a) % b == 0:\n            # print(a, b, i)\n            x = i\n            y = (n - x*a) // b\n            return (x, y)\n    return None\n",
        "test": "assert     find_solution(1, 1, 2)    == (1, 1), 'incorrect'",
        "num_ids": 1205,
        "indeed": true
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    common = list(set(list1) & set(list2))\n    list1 = [x for x in list1 if x not in common]\n    list2 = [x for x in list2 if x not in common]\n",
        "test": "assert     remove_elements([2,4,5], [4,5]) == None",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n + 1) // 2\n",
        "test": "assert     sum_series(0) == 0, \"Incorrect answer\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (l ** 2)) / (4 * tan(pi/l))\n    return round(area, 3)\n",
        "test": "assert     area_polygon(5, 4) == 20.0, \"Wrong area!\"",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #using a simple method to check if the sum of divisors is the same\n    for i in range(1,n):\n        if (n%i) == 0:\n            return True\n    return False\n",
        "test": "assert     div_sum(6) == True",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for x in range(len(str1)):\n        if (str1[x]).lower() == (chr(x+65)):\n            count += 1\n    return count\n",
        "test": "assert     count_char_position(\"april\") == 0",
        "num_ids": 2740,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n",
        "test": "assert     find_even_pair([]) == 0, \"empty\"",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 1\n    while n >= 1:\n        n = n >> 1\n    return n + 1\ndef find_smallest_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 1\n    while n >= 1:\n        if n == 1:\n            return n\n        else:\n            n = n >> 1\n    return n + 1\n",
        "test": "assert     next_power_of_2(1) == 1",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "test": "assert     frequency([3,3,3,3,3],3) == 5",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum = sum + list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1, 2, 3, 4], 1, 2) == 3, 'First'",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5)\n",
        "test": "assert     perimeter_pentagon(4) == 20",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance(\"abcdstdd\") == 1, \"wrong count_occurance\"",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for item in test_tuple:\n        if not isinstance(item,int):\n            print('Invalid input - ', item,'is not an integer')\n            return False\n    return True\n",
        "test": "assert not check_type((\"hi\",\"hello\",\"python\",3.7))",
        "num_ids": 1244,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n-1] == x:\n        return True\n    else:\n        if arr[n-1]!= x:\n            return False\n    if arr[0] == x:\n        return True\n    else:\n        if arr[0]!= x:\n            return False\n",
        "test": "assert     is_majority([1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5], 6, 5) == False, 'incorrect'",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n = n & (n-1)\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str1 = str\n    while True:\n        index = str1.find(\"a\")\n        if index == -1:\n            break\n        else:\n            str1 = str1.replace(str1[index], \"\")\n            \n    return str1\n",
        "test": "assert     odd_values_string('qwrqwr') == 'qwrqwr', 'test 2'",
        "num_ids": 2665,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert     min_of_three(5, 7, 4) == 4, \"Should be 4\"",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>r or l<0 or r>n or r<0:\n        return False\n    if l==r:\n        return (l==0)\n    if l==n-1:\n        return(n==(l+1))\n    if (n & (n-1))==0:\n        return True\n    else:\n        return False\n        \nprint(all_Bits_Set_In_The_Given_Range(10,0,1)) #== False, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(10,0,9)) #== True\nprint(all_Bits_Set_In_The_Given_Range(9,0,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,0,10)) #== True\nprint(all_Bits_Set_In_The_Given_Range(9,1,8)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(9,1,10)) #== True\nprint(all_Bits_Set_In_The_Given_Range(8,1,9)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(8,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(7,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(7,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(0,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(0,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(1,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(1,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(2,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(2,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(3,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(3,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(4,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(4,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(5,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(5,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(6,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(6,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(7,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(7,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(8,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(8,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,1,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,1,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,2,8)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(9,2,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,2,8)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(10,2,10)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(9,3,8)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(9,3,10)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(10,3,8)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(10,3,10)) #== True, as all bits are set\nprint(all_Bits_Set_In_The_Given_Range(9,4,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,4,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,4,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,4,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,5,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,5,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,5,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,5,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,6,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,6,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,6,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,6,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,7,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,7,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,7,8)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(10,7,10)) #== False, as all bits are not set\nprint(all_Bits_Set_In_The_Given_Range(9,8,8)) #== False, as all bits are not set",
        "test": "assert all_Bits_Set_In_The_Given_Range(n = 6, l = 1, r = 5) == False, 'WRONG'",
        "num_ids": 3132,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # number_of_positives = 0\n    # number_of_negatives = 0\n    # for i in arr:\n    #     if i < 0:\n    #         number_of_negatives += 1\n    #     elif i > 0:\n    #         number_of_positives += 1\n    # return number_of_negatives, number_of_positives\n    \n    # O(n) time\n    # O(1) space\n    # (we can keep track of a negative counter and a positive counter)\n    negatives = 0\n    for i in range(n):\n        if arr[i] < 0:\n            negatives += 1\n            arr[i], arr[negatives] = arr[negatives], arr[i]\n    for i in range(n):\n        if arr[i] > 0:\n            arr[i], arr[negatives + 1] = arr[negatives + 1], arr[i]\n    return arr\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     re_arrange_array([1, -2, 3, 4, 5], 2) == [3, -2, 1, 4, 5]",
        "num_ids": 3813,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n",
        "test": "assert     (replace_blank(\"\",'a')==\"\")",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1, reverse=True)\n    return list1[0:n]\n",
        "test": "assert     larg_nnum([1,2,3,4],1) == [4], 'Not correct'",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    radius = r\n    height = h\n    pi = math.pi\n    \n    surf = pi*radius*radius*height\n    \n    return surf\n",
        "test": "assert ",
        "num_ids": 2725,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(1) == 1",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Binary Representation of n\n    bin_n = bin(n)[2:]\n    # Dividing n by 2\n    # Finding the length of the Binary Representation\n    # for every loop\n    length = len(bin_n)\n    # Creating a new binary string\n    # with same length as n\n    new_bin = '0'*length\n    # For every bit\n    for i in range(0, length):\n        # If the bit is a 1\n        if bin_n[i] == '1':\n            # Adding 1 to the new_bin string\n            new_bin = new_bin + '1'\n        else:\n            # Adding 0 to the new_bin string\n            new_bin = new_bin + '0'\n    # Getting the value of new_bin\n    # by comparing the actual value with the new_bin\n    final = int(new_bin, 2)\n    return final\n",
        "test": "assert     even_bit_set_number(2) == 2",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    cnt = Counter(test_list)\n    return(cnt)\n",
        "test": "assert     check_occurences([(1, 'a'), (2, 'b'), (1, 'a')]) == {(1, 'a'): 2, (2, 'b'): 1}",
        "num_ids": 1896,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring = \"\"\n    count = 0\n    for i in range(len(str)):\n        substring = substring + str[i]\n        if(substring == str):\n            count = count + 1\n            substring = \"\"\n    return count\n        \n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 2749,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (0)\n",
        "test": "assert     get_total_number_of_sequences(0,1) == 0",
        "num_ids": 2947,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n",
        "test": "assert     replace_list([1,2,3,4,5],[\"a\",\"b\",\"c\",\"d\"]) == None",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac('abc') == 3",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    flag = True\n    while(flag):\n        temp = math.sqrt(N)\n        if(temp*temp == N):\n            return N\n        else:\n            N = N + 1\n",
        "test": "assert next_Perfect_Square(4) == 4, \"Next perfect square should be 4\"",
        "num_ids": 2846,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        curr_max = arr[0]\n        curr_min = arr[0]\n        max_sum = curr_max\n        for num in arr[1:]:\n            curr_max = max(num, curr_max + num)\n            curr_min = min(num, curr_min + num)\n            max_sum = max(max_sum, curr_max)\n        return max_sum\n",
        "test": "assert     max_sum([3, 8, -10, 23, 7, -4, 18, 20, -9, 3, -25, 13, 14, -20, -14, -10, -8, -7, 15, 16]) == 65",
        "num_ids": 3596,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 1\n    prev = 0\n    while number!= 1:\n        prev = number\n        number = (number + number // 2) // 2\n    return prev\n",
        "test": "assert     babylonian_squareroot(4) == 2",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_recursive(str):\n        n = len(str)\n        dp_table = [[0]*n for _ in range(n)]\n        \n        max_length = 1\n        start = 0\n        \n        for i in range(n):\n            dp_table[i][i] = 1\n            max_length = 1\n            start = i\n            \n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if str[i] == str[j]:\n                    dp_table[i][j] = dp_table[i+1][j-1] + 2\n                    max_length = max(max_length, dp_table[i][j])\n                    \n        return max_length\n    \n    max_length = lps_recursive(str)\n    return max_length\n",
        "test": "assert     lps(\"a\") == 1",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    '''\n    >>> harmonic_sum(3)\n    12\n    '''\n    '''\n    >>> harmonic_sum(4)\n    24\n    '''\n    '''\n    >>> harmonic_sum(5)\n    48\n    '''\n    return int(n * (n + 1) / 2)\n",
        "test": "assert     harmonic_sum(0) == 0, \"Error: harmonic_sum(0)\"",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersect.append(num)\n    return intersect\n",
        "test": "assert     intersection_array([1,2,3],[4,5,6]) == []",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3),3) == 1",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list + [element]\n",
        "test": "assert     insert_element([0],0) == [0,0]",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list1 =[]\n    for x in numbers:\n        (r,theta) = cmath.polar(x)\n        if(r >= 0):\n            list1.append((theta,r))\n    print(list1)\n",
        "test": "assert     convert(complex(1, -1)) == (math.pi, 1.0)",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n        \ndef count_float(list1):\n    '''\n    Write a python function that returns the number of float elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == float:\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5, 6, 7]) == 7",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    return_list = []\n    for i in range(len(l)):\n        return_list.append(tuple(l[i]))\n        return_list = combinations_colors(l[i+1:], n-1)\n        \n    return return_list\n",
        "test": "assert     combinations_colors([1, 2, 3], 0) == []",
        "num_ids": 1508,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [False, False] + [True] * (n - 2)\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n    \n    \ndef count_Primes_nums_2(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n    \n    \ndef count_Primes_nums_3(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_4(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_5(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_6(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_7(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_8(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_9(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_10(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i] == True:\n            for j in range(i + i, n + 1, i):\n                is_prime[j] = False\n    \n    count = 0\n    for k in range(2, n):\n        if is_prime[k] == True:\n            count += 1\n    \n    return count\n    \n    \ndef count_Primes_nums_11(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    is_prime = [True] * (n + 1)\n    is_prim",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "test": "assert     swap_numbers(3,3) == (3,3), 'Wrong answer.'",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]:\n        return test_tup1\n    elif test_tup1[0] > test_tup2[0] and test_tup1[1] > test_tup2[1]:\n        return test_tup2\n    elif test_tup1[0] == test_tup2[0] and test_tup1[1] == test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert     maximize_elements((-1,-1), (-1,-1)) == (-1, -1)",
        "num_ids": 1530,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 110,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: return 2\n    if n == 2: return 3\n    if n % 2 == 0: return 2\n    if n == 3: return 5\n    \n    if n >= 6:\n        if n == 7: return 19\n        if n == 8: return 23\n        if n == 9: return 29\n        if n == 10: return 31\n        if n == 11: return 37\n        if n == 12: return 41\n        if n == 13: return 43\n        if n == 14: return 47\n        if n == 15: return 49\n        if n == 16: return 53\n        if n == 17: return 59\n        if n == 18: return 61\n        if n == 19: return 67\n        if n == 20: return 71\n        if n == 21: return 73\n        if n == 22: return 79\n        if n == 23: return 83\n        if n == 24: return 89\n        if n == 25: return 97\n        if n == 26: return 101\n        if n == 27: return 103\n        if n == 28: return 107\n        if n == 29: return 109\n        if n == 30: return 113\n        if n == 31: return 127\n        if n == 32: return 131\n        if n == 33: return 137\n        if n == 34: return 139\n        if n == 35: return 149\n        if n == 36: return 151\n        if n == 37: return 157\n        if n == 38: return 163\n        if n == 39: return 167\n        if n == 40: return 173\n        if n == 41: return 179\n        if n == 42: return 181\n        if n == 43: return 191\n        if n == 44: return 193\n        if n == 45: return 197\n        if n == 46: return 199\n        if n == 47: return 211\n        if n == 48: return 223\n        if n == 49: return 227\n        if n == 50: return 229\n        if n == 51: return 233\n        if n == 52: return 239\n        if n == 53: return 241\n        if n == 54: return 251\n        if n == 55: return 257\n        if n == 56: return 263\n        if n == 57: return 269\n        if n == 58: return 271\n        if n == 59: return 277\n        if n == 60: return 281\n        if n == 61: return 283\n        if n == 62: return 293\n        if n == 63: return 307\n        if n == 64: return 311\n        if n == 65: return 313\n        if n == 66: return 317\n        if n == 67: return 331\n        if n == 68: return 337\n        if n == 69: return 347\n        if n == 70: return 349\n        if n == 71: return 353\n        if n == 72: return 359\n        if n == 73: return 361\n        if n == 74: return 367\n        if n == 75: return 373\n        if n == 76: return 379\n        if n == 77: return 383\n        if n == 78: return 389\n        if n == 79: return 397\n        if n == 80: return 401\n        if n == 81: return 409\n        if n == 82: return 419\n        if n == 83: return 421\n        if n == 84: return 431\n        if n == 85: return 433\n        if n == 86: return 439\n        if n == 87: return 441\n        if n == 88: return 443\n        if n == 89: return 449\n        if n == 90: return 457\n        if n == 91: return 461\n        if n == 92: return 463\n        if n == 93: return 467\n        if n == 94: return 469\n        if n == 95: return 471\n        if n == 96: return 473\n        if n == 97: return 479\n        if n == 98: return 481\n        if n == 99: return 483\n        if n == 100: return 489\n        if n == 101: return 503\n        if n == 102: return 511\n        if n == 103: return 513\n        if n == 104: return 531\n        if n == 105: return 533\n        if n == 106: return 539\n        if n == 107: return 541\n        if n == 108: return 543\n        if n == 109: return 547\n        if n == 110: return 551\n        if n == 111: return 553\n        if n == 112: return 559\n        if n == 113: return 563\n        if n == 114: return 569\n        if n == 115: return 571\n        if n == 116: return 573\n        if n == 117: return 579\n        if n == 118: return 581\n        if n == 119: return 583\n        if n == 120: return 591\n        if n == 121: return 593\n        if n == 122: return 597\n        if n == 123: return 607\n        if n == 124: return 611\n        if n == 125: return 613\n        if n == 126: return 631\n        if n == 127: return 637\n        if n == 128: return 641\n        if n == 129: return 643\n        if n == 130: return 647\n        if n == 131: return 653\n        if n == 132: return 659\n        if n == 133: return 661\n        if n == 134: return 663\n        if n == 135: return 667\n        if n == 136: return 673\n        if n == 137: return 677\n        if n == 138: return 679\n        if n == 139: return 683\n        if n == 140: return 691\n        if n == 141: return 697\n        if n == 142: return 709\n        if n == 143: return 711\n        if n == 144: return 713\n        if n == 145: return 719\n        if n == 146: return 723\n        if n == 147: return 729\n        if n == 148: return 743\n        if n == 149: return 751\n        if n == 150: return 757\n        if n == 151: return 761\n        if n == 152: return 773\n        if n == 153: return 787\n        if n == 154: return 791\n        if n == 155: return 793\n        if n == 156: return 797\n        if n == 157: return 809\n        if n == 158: return 811\n        if n == 159: return 813\n        if n == 160: return 821\n        if n == 161: return 827\n        if n == 162: return 829\n        if n == 163: return 839\n        if n == 164: return 841\n        if n == 165: return 853\n        if n == 166: return 857\n        if n == 167: return 861\n        if n == 168: return 863\n        if n == 169: return 867\n        if n == 170: return 869\n        if n == 171: return 871\n        if n == 172: return 873\n        if n == 173: return 877\n        if n == 174: return 881\n        if n == 175: return 883\n        if n == 176: return 887\n        if n == 177: return 889\n        if n == 178: return 907\n        if n == 179: return 911\n        if n == 180: return 913\n        if n == 181: return 937\n        if n == 182: return 941\n        if n == 183: return 943\n        if n == 184: return 953\n        if n == 185: return 967\n        if n == 186: return 971\n        if n == 187: return 973\n        if n == 188: return 977\n        if n == 189: return 983\n        if n == 190: return 991\n        if n == 191: return 997\n        if n == 192: return 1009\n        if n == 193: return 1011\n        if n == 194: return 1013\n        if n == 195: return 1019\n        if n == 196: return 1021\n        if n == 197: return 1031\n        if n == 198: return 1033\n        if n == 199: return 1039\n        if n == 200: return 1041\n        if n == 201: return 1043\n        if n == 202: return 1047\n        if n == 203: return 1053\n        if n == 204: return 1059\n        if n == 205: return 1061\n        if n == 206: return 1063\n        if n == 207: return 1069\n        if n == 208: return 1071\n        if n == 209: return 1073\n        if n == 210: return 1077\n        i",
        "test": "assert     newman_prime(1) == 2",
        "num_ids": 5378,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert isinstance(test_tup1, tuple)\n    assert isinstance(test_tup2, tuple)\n    result = []\n    for (num1, num2) in zip(test_tup1, test_tup2):\n        result.append(num1/num2)\n    return result\n",
        "test": "assert     division_elements(test_tup3, test_tup4) == (0.5, 0, 1)",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return part1, part2\n",
        "test": "assert     split_two_parts([1,2,3,4,5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        print(\"Error\")\n    else:\n        return h_age * 7\n",
        "test": "assert     dog_age(1) == 0, \"dog_age(1) == 0 fails\"",
        "num_ids": 2476,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0,len(S),step):\n        split_list.append(S[i:i+step])\n    return split_list\n",
        "test": "assert     list_split([1, 2, 3, 4, 5], 1) == [[1], [2], [3], [4], [5]]",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l<0:\n        print(\"Error: side length cannot be negative\")\n        return\n    surf = l*6\n    return surf\n",
        "test": "assert     lateralsurface_cube(1) == 6",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2!= 0:\n            result += i**2\n    return result\n    \n    ",
        "test": "assert square_Sum(2) == 1",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # num = n\n    # while num >= 2:\n    #     num -= 2\n    # return num\n    \n    '''\n    # Faster solution\n    i = 0\n    while i < n:\n        i += 2\n    return i - 1\n    '''\n    return n + (n // 2)\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 2510,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('a') == 97",
        "num_ids": 2342,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if i%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert ",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    sum = 0\n    for i in range(n): \n        if i % 2 == 0: \n            sum += i**5\n    return sum\n",
        "test": "assert     even_Power_Sum(1) == 0, \"incorrect\"",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    ret_list = []\n    for item in test_list:\n        ret_list.append(item[-1])\n    return ret_list\n",
        "test": "assert     rear_extract([(1,2,3),(4,5,6),(7,8,9)]) == [3,6,9]",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n",
        "test": "assert     substract_elements((0,0,0,0),(0,0,0,0)) == (0,0,0,0)",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    elements = list(range(0,n+1))\n    sums = list()\n    sums.append(0)\n    for i in range(n):\n        sums.append(0)\n        sums[i+1] = sums[i] + elements[i]\n        for j in range(i+1):\n            sums[i+1] -= elements[j]*sums[i-j]/2\n            #print(sums[i+1])\n    return sums[n]\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = math.pi*r**2*h\n    return v\n    \ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    v = math.pi*r**2*h/3\n    return v\n    \ndef volume_pyramid(l,w):\n    '''\n    Write a function that takes in the length and width of a pyramid and returns the volume.\n    '''\n    v = l*w*3/4\n    return v\n    \ndef volume_box(w,h):\n    '''\n    Write a function that takes in the width and height of a box and returns the volume.\n    '''\n    v = w*h\n    return v\n    \ndef volume_cuboid(x,y,z):\n    '''\n    Write a function that takes in the length, width, and height of a cuboid and returns the volume.\n    '''\n    v = x*y*z\n    return v\n",
        "test": "assert     volume_cylinder(1,4) == math.pi*math.pow(1,2)*4, \"incorrect answer\"",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "test": "assert     dict_filter({\"hello\": 1, \"hi\": 1, \"goodbye\": 1, \"hi\": 2},1) == {\"hello\": 1, \"hi\": 2, \"goodbye\": 1}",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements(('a', 'b', 'a', 'a')) == 1",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    deco_num = 1\n    for i in range(n):\n        deco_num = deco_num * (n - i) // (i + 1)\n    return deco_num\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 2511,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = 0\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found == True:\n        return True, pos\n    else:\n        return False, -1\n",
        "test": "assert     sequential_search([1, 2, 3, 4, 5], 5) == (True, 4)",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #check if list is empty\n    if len(test_list) == 0:\n        print(\"List is empty\")\n        return False\n    else:\n        test_set = set()\n        #check if the element is present in the set\n        for x in test_list:\n            if x in test_set:\n                return False\n            else:\n                test_set.add(x)\n                print(\"True\")\n                return True\n",
        "test": "assert     all_unique([\"hi\", \"how\", \"are\", \"you\", \"yes\"]) == True, \"Please check the correctness\"",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l = []\n    for i in range(len(nums1)):\n        l.append(nums1[i] - nums2[i])\n    return l\n",
        "test": "assert sub_list([10,20,30],[10,20,30]) == [0,0,0], \"incorrect\"",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 120,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    if isinstance(n,int) and (0<=n<=9):\n        count = 0\n        for i in str(n):\n            if int(i)<n:\n                count+=1\n        if count==len(str(n)):\n            return True\n        else:\n            return False\n    else:\n        return False\nprint(validate(13))\nprint(validate(1))\nprint(validate(11))\nprint(validate(123))\nprint(validate(111))\nprint(validate(1111111111))\nprint(validate(9))\nprint(validate(21))\nprint(validate(-1))\nprint(validate('a'))\nprint(validate(10))\nprint(validate(-11))\nprint(validate(1000))\nprint(validate(10.1))\nprint(validate(1.1))",
        "test": "assert     validate(13456) == False ",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return element in list\n",
        "test": "assert     check_element([1,2,3],4) == False",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search('ab|ab.*b|ab.*b.*b|ab.*b.*b.*b',text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('bbbbbbbbb') == False",
        "num_ids": 1120,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #Determine the length of original array\n    l = len(a)\n    #Keep a temp array for the count of each number\n    temp = [0 for i in range(l)]\n    #Intialise the max sum\n    max_sum = -999999\n    #Initialise the counter\n    count = 0\n    for i in range(l):\n        #Add value of temp array to count\n        count += temp[i]\n        #Add the current value\n        count += a[i]\n        #If the current value is greater than the max sum, update\n        if count > max_sum:\n            max_sum = count\n        #Store the current value in the array\n        temp[i] = a[i]\n    #Store the value at max_sum position\n    max_sum_at_index = max_sum\n    #Store the value at max_sum position\n    max_sum_at_index_idx = n - 1\n    #Loop through the array and update the max sum and max sum at the index position\n    for i in range(l - k + 1):\n        count = 0\n        for j in range(k):\n            count += a[i + j]\n        #If count is larger than max_sum_at_index\n        if count > max_sum_at_index:\n            #Update max_sum_at_index\n            max_sum_at_index = count\n            #Update the max_sum_at_index_idx\n            max_sum_at_index_idx = i\n    #Return the max_sum_at_index\n    return max_sum_at_index\n",
        "test": "assert     max_sub_array_sum_repeated([-2, -1, 2, 1], 2, 2) == 3",
        "num_ids": 2207,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        i += 1\n        sum = sum + (i * i)\n    return sum\n",
        "test": "assert     square_Sum(0) == 0, \"Function did not return correct result\"",
        "num_ids": 1614,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if list1 == None:\n        return 0\n    max_length = 0\n    for sub_list in list1:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length\n",
        "test": "assert     max_length([[1,2,3,4],[4,5,6,7],[8,9,0,1],[1,2,3,4],[4,5,6,7],[8,9,0,1]]) == 4",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    if k == n:\n        return 2\n    \n    ways = 0\n    ways += count_no_of_ways(n-1, k)\n    ways += count_no_of_ways(n-1, k-1)\n    \n    return ways\n",
        "test": "assert     count_no_of_ways(2, 2) == 2",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "test": "assert     find(0,2)==0, \"Wrong result\"",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h/2\n",
        "test": "assert     otherside_rightangle(0,0) == 0",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for item in listval:\n        if isinstance(item,int):\n            if max_value == None or item > max_value:\n                max_value = item\n        elif isinstance(item,float):\n            if max_value == None or item > max_value:\n                max_value = item\n    return max_value\n",
        "test": "assert     max_val([5, 2, -1, 2, 2, -1]) == 5",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert     sum_div(0) == 0, \"sum_div(0) is not correct\"",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #Brute Force Method\n    n = len(arr) \n    if n <= 1:\n        return 0\n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j] : \n                count += 1\n    return count \n    \n    #Optimal and faster way using mergesort\n    #count = 0\n    #for i in range(len(arr)): \n    #    for j in range(i + 1, len(arr)): \n    #        if arr[i] > arr[j]: \n    #            count += 1\n    #return count \n",
        "test": "assert     get_Inv_Count([1]) == 0, \" single element array\"",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    temp = []\n    for i in list1:\n        if isinstance(i,list):\n            for j in i:\n                temp.append(j)\n        else:\n            temp.append(i)\n    return temp\n    ",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = defaultdict(int)\n    for x,y in stdata:\n        agg[x] += y\n    ans = 0\n    for x in agg:\n        ans = max(ans,agg[x])\n    return ans\n",
        "test": "assert max_aggregate([(1,2),(2,4),(3,5)]) == 5",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(s): \n        if s <= 1: \n            return 0\n        elif (s & 1) == 0: \n            return count(s // 2) + count(s // 2) \n        else: \n            return count(s // 2) + count(s // 2) + 1\n    return count(n) \n",
        "test": "assert     count_binary_seq(2) == 0, \"Passed\"",
        "num_ids": 4880,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth=0\n    for key in d.keys():\n        if type(d[key])==dict:\n            depth=max(depth,1+dict_depth(d[key]))\n        else:\n            depth=max(depth,1)\n    return depth\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Case 1: If element at index is present in arr\n    if arr[index] is not None:\n        return arr[index]\n    \n    #Case 2: If element at index is not present in arr\n    else:\n        if len(arr) == 1:\n            return None\n        if len(ranges) == 0 or len(rotations) == 0 :\n            return None\n        #Case 3: If both cases are false, then the element at index is not present in arr\n        if not(arr) :\n            return None\n        #Case 4: If the index is in between a range of rotations and the element is not present\n        if index >= ranges[0] and index <= ranges[1] :\n            if len(rotations) == 1:\n                return None\n            #Case 4.1: If the element is not present in the element at index's rotation\n            if rotations[0] == index:\n                return find_Element(arr,ranges,rotations[1:],index - rotations[0])\n            #Case 4.2: If the element is present at index's rotation\n            else:\n                return find_Element(arr,ranges,rotations[1:],index - rotations[0])\n",
        "test": "assert     find_Element([1,2,3,4], 2, 2, 0) == 1",
        "num_ids": 1848,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0].lower()=='p':\n            return word, word\n    return '','','','','','','','','','',''\ndef add_letter(word,letter):\n    '''\n    Write a function that adds a letter to a word if it is not already at the end of the word.\n    '''\n    word=word+letter\n    return word\ndef letter_in_word(word,letter):\n    '''\n    Write a function that checks if a letter is in a word.\n    '''\n    if letter in word:\n        return True\n    return False\ndef replace_letter(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in a word.\n    '''\n    word=word.replace(letter,new_letter)\n    return word\ndef end_withq(word):\n    '''\n    Write a function that returns the last word of a word that ends with 'q'\n    '''\n    if word[-1].lower()=='q':\n        return word\n    return ''\ndef end_with(word):\n    '''\n    Write a function that returns the last word of a word that ends with letter 'a', 'e', 'i', 'o', or 'u'.\n    '''\n    for letter in word[-1:]:\n        if letter.lower() in 'aeiou':\n            return word\n    return ''\ndef add_letter_any(word):\n    '''\n    Write a function that adds a letter to a word in any position.\n    '''\n    word=word[0]+word[1]+word[2]+word[3]+word[4]+word[5]+word[6]+word[7]+word[8]+word[9]\n    return word\ndef add_letter_last(word):\n    '''\n    Write a function that adds a letter to the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for letter in word[-2:]:\n        if letter.lower() not in 'aeiou':\n            word=word[0]+word[1]+word[2]+word[3]+word[4]+word[5]+word[6]+word[7]+word[8]+word[9]\n            return word\n    return ''\ndef is_word_end(word):\n    '''\n    Write a function that returns True if the last word of a word is an end word.\n    '''\n    return end_withq(word) or end_with(word)\ndef add_letter_middle(word):\n    '''\n    Write a function that adds a letter to the middle of a word, only if the letter is not already at the end of the word.\n    '''\n    if word[-3].lower() not in 'aeiou':\n        word=word[0:8]+word[9]\n    else:\n        word=word\n    return word\ndef replace_letter_any(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in a word in any position.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_last(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[i+1:]\n    return word\ndef add_letter_start(word):\n    '''\n    Write a function that adds a letter to the start of a word, only if the letter is not already at the end of the word.\n    '''\n    if word[0].lower() not in 'aeiou':\n        word=word[1:]+word[0]\n    return word\ndef add_letter_any_start(word):\n    '''\n    Write a function that adds a letter to the start of a word, in any position.\n    '''\n    word=word[1:]+word[0]\n    return word\ndef replace_letter_any_start(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the start of a word, in any position.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[1:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_last_start(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the start of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[1:i]+new_letter+word[i+1:]\n    return word\ndef last_letter(word):\n    '''\n    Write a function that returns the last letter of a word.\n    '''\n    return word[-1]\ndef replace_letter_any_start_last(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the start of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[1:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_end_last(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_any_start_end(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the start and end of a word, in any position.\n    '''\n    word=word[1:len(word)-1]+new_letter+word[len(word)-1]\n    return word\ndef replace_letter_any_start_end_middle(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the start and end of a word, in any position.\n    '''\n    word=word[1:len(word)-1]+new_letter+word[len(word)-1]\n    return word\ndef replace_letter_any_end(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_any_end_middle(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[i+1:]\n    return word\ndef replace_letter_any_end_middle_start(word,letter,new_letter):\n    '''\n    Write a function that replaces a letter with another letter in the end of a word, only if the letter is not already at the end of the word.\n    '''\n    for i in range(0,len(word)):\n        if word[i].lower()==letter.lower():\n            word=word[0:i]+new_letter+word[",
        "test": "assert     start_withp([\"guido\",\"turing\",\"python\",\"you\"]) == (\"python\",\"you\")",
        "num_ids": 2669,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # print(index,k)\n    if index == n:\n        return 0\n    if k == index:\n        return a[k]\n    ans = max_sum_increasing_subseq(a, n, index + 1, k)\n    if a[index] <= k:\n        ans = max(ans, max_sum_increasing_subseq(a, n, index + 1, k - a[index]) + a[index])\n    return ans\n",
        "test": "assert     max_sum_increasing_subseq([1, 3, 2], 3, 1, 3) == 3",
        "num_ids": 1991,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([tuplex[i][m] if i % 2 == 0 else tuplex[i][n] for i in range(len(tuplex))])\ndef f1(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the squares of the first n natural numbers.\n    '''\n    return sum([n**2 for n in range(n)])\ndef f2(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**3 for n in range(n)])\ndef f3(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**4 for n in range(n)])\ndef f4(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**5 for n in range(n)])\ndef f5(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**6 for n in range(n)])\ndef f6(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**7 for n in range(n)])\ndef f7(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**8 for n in range(n)])\ndef f8(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**9 for n in range(n)])\ndef f9(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**10 for n in range(n)])\ndef f10(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**11 for n in range(n)])\ndef f11(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**12 for n in range(n)])\ndef f12(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**13 for n in range(n)])\ndef f13(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**14 for n in range(n)])\ndef f14(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**15 for n in range(n)])\ndef f15(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**16 for n in range(n)])\ndef f16(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**17 for n in range(n)])\ndef f17(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**18 for n in range(n)])\ndef f18(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**19 for n in range(n)])\ndef f19(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**20 for n in range(n)])\ndef f20(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**21 for n in range(n)])\ndef f21(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**22 for n in range(n)])\ndef f22(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**23 for n in range(n)])\ndef f23(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**24 for n in range(n)])\ndef f24(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**25 for n in range(n)])\ndef f25(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**26 for n in range(n)])\ndef f26(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**27 for n in range(n)])\ndef f27(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**28 for n in range(n)])\ndef f28(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**29 for n in range(n)])\ndef f29(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**30 for n in range(n)])\ndef f30(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**31 for n in range(n)])\ndef f31(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**32 for n in range(n)])\ndef f32(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**33 for n in range(n)])\ndef f33(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**34 for n in range(n)])\ndef f34(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**35 for n in range(n)])\ndef f35(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n    return sum([n**36 for n in range(n)])\ndef f36(n):\n    '''\n    Write a function that accepts n and returns\n    the sum of the cubes of the first n natural numbers.\n    '''\n",
        "test": "assert     colon_tuplex((),0,0) == ()",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #sort the two lists\n    nums1.sort()\n    nums2.sort()\n    #set two pointers to the beginning and end of the two lists\n    i = 0\n    j = 0\n    product = 1\n    #while we don't have a product larger than the one we're looking for\n    while i < N and j < N:\n        if nums1[i] * nums2[j] > product:\n            product = nums1[i] * nums2[j]\n        if nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return product\n",
        "test": "assert     large_product([3,3,3,4], [6,3,9,9], 2) == 18",
        "num_ids": 3296,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(2,4) == 4 ",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple(\"\") == (), 'The empty string is not a tuple!'",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    while n > 0:\n        n = n & (n-1)\n    return n\n",
        "test": "assert     set_left_most_unset_bit(1) == 0",
        "num_ids": 2768,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\n",
        "test": "assert     volume_cone(0,1) == 0",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    while True:\n        if (n&(n-1)) == 0:\n            return n\n        else:\n            n = n & (n - 1)\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n    \n    \n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [f\"{s}\" for s in list_]\n",
        "test": "assert ",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    out_dictionary = dict()\n    for i, j, k in zip(l1, l2, l3):\n        out_dictionary[i] = dict({j: k})\n    return out_dictionary\n",
        "test": "assert     convert_list_dictionary([], [], []) == {}, 'Empty list does not produce any dictionary'",
        "num_ids": 1934,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n",
        "test": "assert     get_max_sum(1) == 1, \"Wrong answer: get_max_sum(1)\"",
        "num_ids": 2778,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return len(input_list)\n",
        "test": "assert     max_length_list([]) == 0",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "test": "assert     check_distinct(('A', 'B', 'C')) is True, \"check_distinct should return True if the tuple contains no duplicates\"",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] not in str1[i + 1:]:\n            return str1[i]\n    return None\n",
        "test": "assert     first_non_repeating_character('aba') == 'b'",
        "num_ids": 1145,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)<2:\n        return False\n    return string[0]==string[-1]\nprint(check_char('python'))\n",
        "test": "assert     check_char('.c') == False, \"Test 1: FAIL\"",
        "num_ids": 2584,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    array = sorted([a,b,c])\n    if array[1] == array[2]:\n        return array[1]\n    elif array[1] == array[0] or array[2] == array[0]:\n        return array[1]\n    return (array[1]+array[2])/2\n",
        "test": "assert     median_numbers(0,0,0) == 0, \"Wrong\"",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        while num!= 0:\n            sum += num % 10\n            num = num // 10\n    return sum\n",
        "test": "assert     sum_of_digits([])        == 0",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((1,1),(1,1)) == (0,0)",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    return len(set(test_list))\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 1058,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    d = {}\n    for i in range(len(l1)):\n        d[i] = l1[i]\n    for i in range(len(l2)):\n        d[i+len(l1)] = l2[i]\n    l = list(d.values())\n    return tuple(l)\n",
        "test": "assert     add_nested_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert     minimum(2,2) == 2",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n",
        "test": "assert     check_tuplex((1,2,3),(4,5,6)) == False, \"Check failed, output should be False\"",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x!= 0:\n        parity ^= x & 1\n        x >>= 1\n    return parity\n",
        "test": "assert     find_Parity(10) == False, 'test 2 failed'",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    number = list(str(n))\n    for i in range(len(number)-1,0,-1):\n        if number[i-1] < number[i]:\n            for j in range(len(number)-1,i-1,-1):\n                if number[j] > number[i-1]:\n                    number[j],number[i-1] = number[i-1],number[j]\n                    break\n            break\n    return int(''.join(number))\n",
        "test": "assert     rearrange_bigger(21) == 21",
        "num_ids": 1385,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    pairs = set()\n    i = 0\n    j = 0\n    while len(pairs) < k and i < len(nums1) and j < len(nums2):\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (abs(nums1[i] - nums2[j]), (nums1[i], nums2[j])))\n        while len(min_heap) > 0 and min_heap[0][0] <= abs(nums1[i] - nums2[j]):\n            _, (x1, x2) = heapq.heappop(min_heap)\n            if (x1, x2) not in pairs:\n                pairs.add((x1, x2))\n                j += 1\n        i += 1\n    while len(min_heap) > 0:\n        _, (x1, x2) = heapq.heappop(min_heap)\n        if (x1, x2) not in pairs:\n            pairs.add((x1, x2))\n    return list(pairs)\n",
        "test": "assert k_smallest_pairs([1,3,4],[1,4,5],2) == [(1, 1), (3, 4)]",
        "num_ids": 2322,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][0] < min_product:\n                min_product = list1[i][0]*list1[j][0]\n    return min_product\n",
        "test": "assert     min_product_tuple([(1,1),(5,4)]) == 1",
        "num_ids": 3515,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if min > i:\n            min = i\n    return min\n",
        "test": "assert     min_val([1, 1, 1]) == 1, 'Wrong answer for min_val([1, 1, 1])!'",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = \"\"\n    for index, char in enumerate(word):\n        if char == \"-\" or char.isupper():\n            result += char.upper()\n        else:\n            result += char\n    return result\n",
        "test": "assert snake_to_camel(\"_blah\")    == \"_blah\", \"Snake Case to Camel Case Convertion Error\"",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(0, len(l)):\n        if l[i] % 2 == 1:\n            l.remove(l[i])\n    return l\n",
        "test": "assert     remove_odd([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 2693,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Code here\n    # print(\"Extracting nth element from the list\")\n    list1.sort()\n    return list1[n-1]\n",
        "test": "assert     extract_nth_element([(3, 5), (1, 2), (4, 7), (2, 5)], 1) == (1, 2)",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    else:\n        return False\n",
        "test": "assert     overlapping([1,3,5,7], [1,2,4]) ",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    arr.sort() \n    for i in range(0, n-1): \n        if arr[i] > 0: \n            return arr[i] * arr[i+1] \n    return -1\n",
        "test": "assert     max_Product([1, 6, -2, -5, -4, 8]) == 6, \"Wrong answer for: \"+str([1, 6, -2, -5, -4, 8])",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return max(set(Input), key = Input.count) \n",
        "test": "assert     group_tuples([(1,2,3,4),(2,3,4,5),(3,4,5,6)]) == (1,2,3,4)",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst)\n",
        "test": "assert     Find_Max([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]) == \"G\"",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        total += int(round(list1[i]))\n    return total\n",
        "test": "assert     round_and_sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans += i**3\n    return ans\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result = result + str(item) + ','\n    return result[:-1]\n",
        "test": "assert     concatenate_tuple(('a', 'b', 'c')) == 'a,b,c'",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return int(sum/n)\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[-1])\n",
        "test": "assert     extract_rear((1,2,3,4,5,'abcd',5)) == 5, 'Extract rear index elements incorrect'",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([1,2,3], 2) == 1, \"wrong count\"",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda n : n%2!= 0, nums))\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    date_new = f\"{date[2]}-{date[1]}-{date[0]}\"\n    return date_new\n",
        "test": "assert     change_date_format('2020-10-20') == '20-10-2020'",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 120,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = 1\n    while(gap < n):\n        gap = gap*2+1\n        for i in range(gap,n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n    return my_list\n",
        "test": "assert     shell_sort([]) == []",
        "num_ids": 2993,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert not     and_tuples((1,2,3),(4,5,6)) == (1,2,3) and (4,5,6)",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # your code here\n    return None\n",
        "test": "assert     parabola_directrix(2.0,3.0,5.0) == [-5.0,-10.0]",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for el in list1:\n        if el in list2:\n            common = True\n            break\n    return common\n",
        "test": "assert     common_element([1,2,3], [1,2,3]) == True, 'Wrong result'",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        base1,base2 = base2,base1\n    if height >= (base1+base2)/2.0:\n        return (base1+base2)/2.0\n    else:\n        return (base1*height/height + base2*(1.0-height/height))/(height+0.5)\n",
        "test": "assert     median_trapezium(1,5,3) == 3.0",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n",
        "test": "assert     check_greater([3,4,5,6,7], 5) == True",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    x = re.search(r'a+b', text)\n    return bool(x)\n",
        "test": "assert     text_match_one('ab') == True",
        "num_ids": 2668,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     last_Digit(5) == 5",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #Code here\n    \n    \n    for i in range(len(list1)):\n        if list1[i]<0:\n            list1[i]=-list1[i]\n    print(\"The list after swapping is \",list1)\n",
        "test": "assert neg_nos([1, -2, 3, -4, -5]) == [-1, -2, -3, -4, -5]",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = []\n    for x in str1:\n        if x not in list1:\n            list1.append(x)\n    return ''.join(list1)\n",
        "test": "assert     remove_odd('') == ''",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i][1] == test_list[i+1][0]:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(0,1), (1,0), (0,-1)]) == 2",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return (sum(L))\n",
        "test": "assert     multiple_to_single([1]) == 1",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # 1. Create a regular expression to match for adverb\n    # 2. Iterate over the given sentence and match for adverb\n    # 3. Add the matched word to a dictionary with the word as key and its position as the value\n    \n    regex = re.compile('adverb')\n    regex.findall(text)\n",
        "test": "assert     find_adverb_position('') == None, \"find_adverb_position() should return None if no adverb is found.\"",
        "num_ids": 4041,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    side_length = l\n    return (side_length**2)*6\n",
        "test": "assert     surfacearea_cube(2) == 14.0",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('l', nums)\n    return arr.count(0)\nprint(positive_count([-1, 1, -2, 2, -3, 2, -3]))\n",
        "test": "assert positive_count([-1,-2,-3,-4]) == 0.0",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg=0\n    for i in range(len(list1)):\n        if(list1[i]<0 and list1[i]>max_neg):\n            max_neg=list1[i]\n    return max_neg\n",
        "test": "assert     largest_neg([-3,-1,-5,-2]) == -3",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0,len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list\n",
        "test": "assert         trim_tuple([(1,2,3,4,5,6), (7,8,9,10), (11,12,13,14,15)], 3) == [(1,2,3), (7,8,9), (11,12,13)]",
        "num_ids": 3303,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    lst1 = []\n    for i in range(len(test_tup1)):\n        lst1.append(test_tup1[i] * test_tup2[i])\n    return tuple(lst1)\n",
        "test": "assert     index_multiplication((1,2,3), (4,5,6)) == (4,10,18)",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_count = Counter(lst)\n    occurence = 0\n    for ele in tup:\n        if ele in lst_count:\n            occurence = occurence + 1\n    return occurence\n",
        "test": "assert count_Occurrence((1,2,3,4,5,6,7),[1,2,3,4,5,6,7,2]) == 7, \"the answer is 7\"",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 447,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i ** 3 for i in nums]\n",
        "test": "assert cube_nums([1,2,3,4]) == [1,8,27,64]",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(map(lambda x: 2 ** x, range(n)))\n",
        "test": "assert     cal_sum(1) == 1",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for i in range(l):\n        res.append(str.pop(0))\n    return res\n",
        "test": "assert     extract_string([\"w\", \"er\", \"l\", \"m\", \"g\", \"b\", \"k\", \"y\"], 1) == [\"w\"], \"Should have ['w']\"",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Implement your solution below:\n    text = text1.strip()\n    return text\n",
        "test": "assert     remove_whitespaces(\"\")==\"\", \"incorrect output\"",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return 0 \n    return (actual_cost - sale_amount)\n",
        "test": "assert     loss_amount(10,10) == 0, 'change the values of actual_cost and sale_amount in test case 1 and run the test case'",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(n%i==0):\n            if(i%2==0):\n                sum = sum+i\n    return sum\n",
        "test": "assert     sumofFactors(5) == 0, \"Wrong result\"",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = re.search('z',text)\n    if wordz:\n        return True\n    else:\n        return False\n    \ndef test_text_match_wordz():\n    assert text_match_wordz('zebra') == True\n    assert text_match_wordz('zebra zebra zebra zebra zebra zebra') == True\n    assert text_match_wordz('dog dog dog dog dog dog') == False\n    assert text_match_wordz('') == False\n    \ntext_match_wordz('zebra')\ntext_match_wordz('zebra zebra zebra zebra zebra zebra')\ntext_match_wordz('dog dog dog dog dog dog')\ntext_match_wordz('')\n",
        "test": "assert not text_match_wordz('This is a word with Z')",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # checking whether the month number is positive or not.\n    if monthnum2>0:\n        # checking whether the given month number is 31 or not.\n        if monthnum2%4==0:\n            print('31')\n        else:\n            print('30')\n        return 1\n    else:\n        return 0\n",
        "test": "assert     check_monthnumb_number(12) == True",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n",
        "test": "assert     reverse_string_list([]) == [], \"Fail\"",
        "num_ids": 2730,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_index = 0\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return lst[min_index]\n",
        "test": "assert ",
        "num_ids": 1439,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(2,3) == 6",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase(\"\") == \"\"",
        "num_ids": 2531,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst] \n    \nif __name__ == \"__main__\":\n    print(Extract([[1, 2, 3],\n        [4, 5],\n        [6]]))\n    print(Extract([[1, 2, 3],\n        [4, 5],\n        [6]]))\n    print(Extract([[1, 2, 3],\n        [4, 5],\n        [6]]))\n    print(Extract([[1, 2, 3, 4, 5, 6],\n        [4, 5],\n        [6]]))\n    print(Extract([[1, 2, 3],\n        [4, 5, 6],\n        [7]]))\n    print(Extract([[1, 2, 3],\n        [4, 5, 6],\n        [7],\n        [8]]))",
        "test": "assert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7], 'Wrong'",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return(len(str.upper()))\n",
        "test": "assert     upper_ctr(\"\") == 0",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                new_list.append([list1[i],list1[j],list1[k]])\n    return new_list\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 4010,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    res = arr[0]\n    cur_max = arr[0]\n    for i in range(1, n):\n        cur_max = max(arr[i], arr[i] * cur_max)\n        res = max(res, cur_max)\n    return res\n",
        "test": "assert     max_subarray_product([2,3,-2,4]) == 6",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict.values()) == 1\n",
        "test": "assert         check_value({1:1, 2:2, 3:3, 4:4}, 2) == False",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return dict1\n    for key, value in dict1.items():\n        if not value:\n            del dict1[key]\n    return dict1\n    \n",
        "test": "assert     drop_empty({}) == {}, 'No key matches for empty dictionary'",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m=0\n    a=0\n    for i in range(len(arr)):\n        if arr[i]<0:\n            continue\n        a=a*arr[i]\n        if a>m:\n            m=a\n    return m\n",
        "test": "assert     max_product([2, 3, -10, 4, -2, -5, 1, -6]) == 0",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = list(test_tup)\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            new_tup[i] = new_tup[i] + test_tup[i-1]\n        elif i == 0:\n            new_tup[i] = test_tup[i] + new_tup[i+1]\n        else:\n            new_tup[i] = test_tup[i] + new_tup[i+1]\n    return tuple(new_tup)\n",
        "test": "assert     add_pairwise((1, 1, 1, 1, 1, 1, 1, 1)) == (2, 2, 2, 2, 2, 2, 2, 2)",
        "num_ids": 1211,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Edge cases\n    if(n < 0):\n        print(\"Error: n cannot be negative\")\n        return -1\n    if(len(arr) == 0):\n        print(\"Error: array is empty\")\n        return -1\n    if(len(arr) == 1):\n        return arr[0]\n    \n    # Computations\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    \n    if(n < 0):\n        product = product % n\n    else:\n        product %= n\n        \n    return product\n    \n    ",
        "test": "assert     find_remainder([1,3,5], 2) == 1",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([1,1,2,3,3]) == False, \" check_Consecutive Function is not checking correctly\"",
        "num_ids": 1767,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_element_list = []\n    i = 0\n    for element in test_list1:\n        if element in test_list2:\n            common_element_list.append(element)\n    return tuple(common_element_list)\n",
        "test": "assert     tuple_intersection((0, 1, 2), (0, 1, 2, 3)) == (0, 1, 2)",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str1=str1[:i]+newch+str1[i+1:]\n            return str1\n    return str1\n",
        "test": "assert     replace_char('a', 'a', 'b') ==    'b'",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    \ndict1 = {\"Harry\": 10, \"Bill\": 5, \"Ron\": 20, \"Hermione\": 9, \"Ginny\": 5, \"Draco\": 7, \"Chhaya\": 12}\nsort_counter(dict1)\n",
        "test": "assert     sort_counter({\"a\": 1, \"b\": 0, \"c\": 2, \"d\": 4, \"e\": 5}) ",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[-2:])\n",
        "test": "assert     big_sum([1,4,5,8,9]) == 15",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n",
        "test": "assert     is_lower(\"Hello\") == \"hello\"",
        "num_ids": 2438,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(str1.lower(),str1)\n",
        "test": "assert     remove_lowercase(\"\") == \"\", \"Empty string\"",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :  \n        return 0  \n    while n > 0 :  \n        n = n // 10  \n    return n % 10  \ndef first_Digit_of_Number_Sum(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    Sum = 0  \n    while n > 0 :  \n        Sum = Sum + (n%10)  \n        n = n//10  \n    return Sum\ndef isPrime(n) :  \n    '''\n    Write a python function to check whether the given number is prime.\n    '''\n    if n <= 1 :  \n        return False  \n    for i in range(2, n) :  \n        if n % i == 0 :  \n            return False  \n    return True  \ndef is_Perfect_square(n) :  \n    '''\n    Write a python function to check whether the given number is perfect square.\n    '''\n    if n < 0 :  \n        n = -n  \n    #n = n%10  \n    while n % 2 == 0 :  \n        n = n // 2  \n    #for i in range(3,int(n**0.5)+1,2) :  \n    for i in range(3,n,2) :  \n        if n % i == 0 :  \n            return False  \n    return True  \ndef is_Perfect_square_with_cnt_of_1_in_first_digit(n) :  \n    '''\n    Write a python function to check whether the given number is perfect square.\n    '''\n    if n < 0 :  \n        n = -n  \n    #n = n%10  \n    while n % 2 == 0 :  \n        n = n // 2  \n    if n == 0 :  \n        return True  \n    cnt = 0  \n    while n > 0 :  \n        n = n // 10  \n        cnt = cnt + 1  \n    if n == 0 :  \n        return True  \n    if cnt == 1 :  \n        return False  \n    if cnt == 2 :  \n        return True  \n    if cnt == 3 :  \n        return True  \n    if cnt == 4 :  \n        return True  \n    if cnt == 5 :  \n        return True  \n    if cnt == 6 :  \n        return True  \n    if cnt == 7 :  \n        return True  \n    if cnt == 8 :  \n        return True  \n    if cnt == 9 :  \n        return True  \ndef is_Perfect_square_with_cnt_of_1_in_last_digit(n) :  \n    '''\n    Write a python function to check whether the given number is perfect square.\n    '''\n    if n < 0 :  \n        n = -n  \n    #n = n%10  \n    while n % 2 == 0 :  \n        n = n // 2  \n    if n == 0 :  \n        return True  \n    cnt = 0  \n    while n > 0 :  \n        n = n // 10  \n        cnt = cnt + 1  \n    if n == 0 :  \n        return True  \n    if cnt == 1 :  \n        return False  \n    if cnt == 2 :  \n        return True  \n    if cnt == 3 :  \n        return True  \n    if cnt == 4 :  \n        return True  \n    if cnt == 5 :  \n        return True  \n    if cnt == 6 :  \n        return True  \n    if cnt == 7 :  \n        return True  \n    if cnt == 8 :  \n        return True  \n    if cnt == 9 :  \n        return True  \ndef get_Digits_Sum(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    Sum = 0  \n    while n > 0 :  \n        Sum = Sum + (n%10)  \n        n = n//10  \n    return Sum  \ndef is_prime_or_not(n) :  \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1 :  \n        return False  \n    if n == 2 :  \n        return True  \n    if n == 3 :  \n        return True  \n    if n % 2 == 0 or n % 3 == 0 :  \n        return False  \n    i = 5  \n    while i * i <= n :  \n        if n % i == 0 or n % (i + 2) == 0 :  \n            return False  \n        i = i + 6  \n    return True  \ndef is_prime_or_not_with_cnt_of_1_in_first_digit(n) :  \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1 :  \n        return False  \n    if n == 2 :  \n        return True  \n    if n == 3 :  \n        return True  \n    if n % 2 == 0 or n % 3 == 0 :  \n        return False  \n    cnt = 0  \n    while n > 0 :  \n        n = n // 10  \n        cnt = cnt + 1  \n    if n == 0 :  \n        return True  \n    if cnt == 1 :  \n        return False  \n    if cnt == 2 :  \n        return True  \n    if cnt == 3 :  \n        return True  \n    if cnt == 4 :  \n        return True  \n    if cnt == 5 :  \n        return True  \n    if cnt == 6 :  \n        return True  \n    if cnt == 7 :  \n        return True  \n    if cnt == 8 :  \n        return True  \n    if cnt == 9 :  \n        return True  \ndef get_Digits_Sum_with_cnt_of_1_in_first_digit(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    Sum = 0  \n    while n > 0 :  \n        Sum = Sum + (n%10)  \n        n = n//10  \n    if n == 0 :  \n        return 0  \n    cnt = 0  \n    while n > 0 :  \n        n = n // 10  \n        cnt = cnt + 1  \n    if n == 0 :  \n        return 0  \n    if cnt == 1 :  \n        return Sum  \n    if cnt == 2 :  \n        return Sum  \n    if cnt == 3 :  \n        return Sum  \n    if cnt == 4 :  \n        return Sum  \n    if cnt == 5 :  \n        return Sum  \n    if cnt == 6 :  \n        return Sum  \n    if cnt == 7 :  \n        return Sum  \n    if cnt == 8 :  \n        return Sum  \n    if cnt == 9 :  \n        return Sum  \ndef get_Digits_Sum_with_cnt_of_1_in_last_digit(n) :  \n    '''\n    Write a python function to find the sum of the digits of a given number.\n    '''\n    Sum = 0  \n    while n > 0 :  \n        Sum = Sum + (n%10)  \n        n = n//10  \n    if n == 0 :  \n        return 0  \n    cnt = 0  \n    while n > 0 :  \n        n = n // 10  \n        cnt = cnt + 1  \n    if n == 0 :  \n        return 0  \n    if cnt == 1 :  \n        return Sum  \n    if cnt == 2 :  \n        return Sum  \n    if cnt == 3 :  \n        return Sum  \n    if cnt == 4 :  \n        return Sum  \n    if cnt == 5 :  \n        return Sum  \n    if cnt == 6 :  \n        return Sum  \n    if cnt == 7 :  \n        return Sum  \n    if cnt == 8 :  \n        return Sum  \n    if cnt == 9 :  \n        return Sum  \ndef is_prime_or_not_with_cnt_of_1_in_last_digit(n) :  \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n <= 1 :  \n        retur",
        "test": "assert first_Digit(0) == 0, 'The output is not as expected.'",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]",
        "num_ids": 2590,
        "indeed": false
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n :\n        sum = sum + i**3\n        i = i + 1\n    sum2 = 0\n    i = 0\n    while i < n :\n        sum2 = sum2 + i\n        i = i + 1\n    return sum - sum2\n",
        "test": "assert     difference(0) == 0, \"The result is: \" + str(difference(0))",
        "num_ids": 2650,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N,2):\n        if (A[i] ^ A[i+1]) % 2!= 0 :\n            count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair([1,2,3,4,5],4)== 2, \"Wrong\"",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string(\"Hi\") == \"hI\"",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    d_sum = 0\n    d_list = list(map(int, list(str(n1)))) + list(map(int, list(str(n2))))\n    d_list.sort()\n    for i in range(1, len(d_list)):\n        d_sum += abs(int(d_list[i - 1]) - int(d_list[i]))\n    return d_sum\n",
        "test": "assert     digit_distance_nums(2, 3) == 1, 'wrong answer'",
        "num_ids": 2959,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    max_sum = a[0]\n    for i in range(1, size):\n        max_sum = max(max_sum, a[i] + max_sub_array_sum(a, i))\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([-1, -2, -3, -4, -5], 0) == -1",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    union_list = test_tup1 + test_tup2\n    union_list = sorted(union_list)\n    return union_list\n",
        "test": "assert     union_elements((10, 20, 30), (15, 25, 35)) == [10, 15, 20, 25, 30, 35]",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:  \n        return 0\n    max_len = 1\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i:j] not in lst[i+1:]:\n                if max_len < j - i:\n                    max_len = j - i\n    return max_len\n    \nprint(Find_Max_Length([2, 3, 4, 5, 6, 7, 9, 10]))\n",
        "test": "assert     Find_Max_Length([]) == 0, \"Empty List\"",
        "num_ids": 1237,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=\\\")[\\w\\d\\s\\-\\.\\,\\(\\)\\\\:\\'\\\"\\!\\?\\;\\[\\]]+(?=\\\")\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_values_part2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"([^\\\"]+[\\\"])([^\\\"]+)\\\"\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(\\w+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part2(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part3(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part3(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part4(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part4(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part5(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part5(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part6(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part6(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part7(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part7(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part8(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part8(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part9(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part9(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part10(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part10(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part11(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part11(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part12(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part12(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part13(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part13(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_key_value_pairs_part14(text):\n    '''\n    Write a function to extract key value pairs from a string.\n    '''\n    pattern = r\"(\\w+)\\s?:\\s?(.+)?\"\n    matches = re.findall(pattern,text)\n    return matches\n    \ndef extract_numbers_part14(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    pattern = r\"\\d+\"\n    matches = re.findall(pattern,text)\n    retur",
        "test": "assert     extract_values('This is a string with single quote inside \" \" and double quotes inside \"\"' ) ",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] == arr[j]: \n                count += 1\n    return count \ndef count_unordered_pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of unordered pairs. \n    '''\n    count = 0\n    for i in range(len(arr)-1): \n        if arr[i]!= arr[i+1]: \n            count += 1\n    return count ",
        "test": "assert     count_Pairs([10,10,20,60,50,40],8) == 1",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \n",
        "test": "assert     split('Hi') == ['H', 'i']",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # return sum(int(x) for x in str(n))\n    return sum(i for i in map(int, str(n)))\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 130,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 0\n    while i < len(list1) - 1:\n        if list1[i] > list1[i+1]:\n            return False\n        i = i + 1\n    return True\n",
        "test": "assert     issort_list([]) == True",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append(dict())\n    return empty_list\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: x[0])\n",
        "test": "assert     sort_sublists([['1','2'],['3','4'],['5','6']]) == [['1','2'],['3','4'],['5','6']]",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen_nums = set()\n    seen_nums_unordered = list()\n    for num in nums:\n        if num not in seen_nums:\n            seen_nums.add(num)\n            seen_nums_unordered.append(num)\n    seen_nums_unordered.sort()\n    return seen_nums_unordered\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_of_uniq_nums = 1\n    for i in list_data:\n        product_of_uniq_nums *= i\n    return product_of_uniq_nums\n",
        "test": "assert     unique_product([1,1,1,1,1,1,1,1]) == 1, 'wrong'",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surface_area = 2*math.pi*r*h + 2*math.pi*(r**2)\n    return surface_area\n",
        "test": "assert     surfacearea_cylinder(r=1,h=2) == 2 * pi * 1 * 2, 'wrong surfacearea_cylinder'",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)]==B:\n            return True\n    return False\n",
        "test": "assert     is_Sub_Array([1, 2, 3], [1, 2, 3]) == True, 'Error'",
        "num_ids": 3085,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    return n % 10 * last_Digit_Factorial(n // 10) \n",
        "test": "assert     last_Digit_Factorial(1)    == 1",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.extend([list1[i], list2[i], list3[i]])\n    return interleaved_list\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_elements.append(i)\n    return dissimilar_elements\n",
        "test": "assert     find_dissimilar(('a', 'b', 'c'), ('b', 'c', 'd')) ==     ['a']",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    if len(test_tuple) == 0:\n        return None\n",
        "test": "assert     even_ele(((1, 2, 3), (2, 3, 4), (3, 4, 5), (3, 4, 5, 5), (2,), (4,), (3, 4, 5)),",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2)*s \n",
        "test": "assert     surface_Area(1,2)==2, \"Fail\"",
        "num_ids": 2371,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        return True\n    return False\n",
        "test": "assert     my_dict({}) == True, f'Expected False got: {my_dict({})}'",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError('Invalid input')\n    else:\n        n = 0\n        if num == 0:\n            return 1\n        else:\n            for i in range(0,num):\n                n += catalan_number(i)*catalan_number((num-i)-1)\n            return n\n",
        "test": "assert     catalan_number(1) == 1, \"First number is wrong\"",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs=re.findall(r'ly[ ]?',text)\n    if len(adverbs)==0:\n        return None\n    return adverbs,len(adverbs)\n",
        "test": "assert     find_adverbs(\"hi mom\") == None, \"Shouldn't find an adverb ending with ly\"",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    l = {}\n    for i in items:\n        if l.get(i[1]) is None:\n            l[i[1]] = []\n        l[i[1]].append(i[0])\n    s = []\n    for i in sorted(l.keys()):\n        for j in sorted(l[i]):\n            s.append((j,i))\n    return s[-n:]\n",
        "test": "assert     expensive_items([(1,5),(1,4),(2,6),(3,8),(4,9)],1)==[(4,9)]",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    newlist = l[0:n]\n    newlist.extend(l[n+1:])\n    return newlist\n",
        "test": "assert     split_Arr([1,2,3,4,5],4)==[1,2,3,4], \"Error in split_Arr\"",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if isinstance(listx, list):\n        return tuple(listx)\n    else:\n        raise TypeError(\"The input is not a list.\")\n",
        "test": "assert     list_tuple([1,2,3]) == (1, 2, 3), \"Wrong\"",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    s1 = 0\n    s2 = 0\n    for i in nums:\n        if i > s1:\n            s2 = s1\n            s1 = i\n        elif i > s2:\n            s2 = i\n    return s2 - s1\n",
        "test": "assert     big_diff([]) == 0",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        return [i ** 2 for i in range(a, b+1)]\n    else:\n        return [i ** 2 for i in range(a, b-1, -1)]\n",
        "test": "assert     perfect_squares(1, 1) == [1], 'Wrong'",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*y,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (cmath.sqrt(x**2+y**2),cmath.atan(y/x))\ndef point_line(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the distance between point (x3,y3) and the line passing through two other points (x1,y1) and (x2,y2).\n    '''\n    d1=x2-x1\n    d2=y2-y1\n    d3=x3-x1\n    d4=y3-y1\n    #print(d1,d2,d3,d4)\n    denominator=d1*d4-d3*d2\n    if denominator==0:\n        print(\"Point doesn't lie on the line\")\n    else:\n        m=d1*d3-d2*d4\n        print(m/denominator)\n        x=m/(d1*d3-d2*d4)\n        print(x)\n        y=m/(d1*d3-d2*d4)\n        print(y)\n    return x,y\ndef dist(x1,y1,x2,y2):\n    '''\n    Write a function that returns the distance between two points\n    '''\n    return ((x1-x2)**2+(y1-y2)**2)**0.5\ndef vector(x1,y1,x2,y2):\n    '''\n    Write a function to find the vector (x1,y1) to (x2,y2).\n    '''\n    return (x2-x1,y2-y1)\ndef area(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of the triangle given by the line passing through 3 points.\n    '''\n    return abs((x1*y2+x2*y3+x3*y1-x1*y3-x2*y1-x3*y2)/2)\ndef triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of the triangle given by the line passing through 3 points.\n    '''\n    a=(x1,y1)\n    b=(x2,y2)\n    c=(x3,y3)\n    #vector_ab=vector(a[0],a[1],b[0],b[1])\n    #vector_bc=vector(b[0],b[1],c[0],c[1])\n    #vector_ac=vector(c[0],c[1],a[0],a[1])\n    #print(vector_ab,vector_bc,vector_ac)\n    #vector_ab_BC=vector(vector_ab[0],vector_ab[1],vector_bc[0],vector_bc[1])\n    #vector_BC_ac=vector(vector_bc[0],vector_bc[1],vector_ac[0],vector_ac[1])\n    #print(vector_ab_BC,vector_BC_ac)\n    #vectors_AB_BC_ac=vector(vector_ab_BC[0],vector_ab_BC[1],vector_BC_ac[0],vector_BC_ac[1])\n    #vectors_AC_BC_ab=vector(vector_AC_BC_ac[0],vector_AC_BC_ac[1],vector_ab_BC[0],vector_ab_BC[1])\n    #print(vectors_AB_BC_ac,vectors_AC_BC_ab)\n    #area_of_triangle=dist(a[0],a[1],b[0],b[1])+dist(b[0],b[1],c[0],c[1])+dist(c[0],c[1],a[0],a[1])-dist(a[0],a[1],c[0],c[1])-dist(b[0],b[1],a[0],a[1])-dist(c[0],c[1],b[0],b[1])\n    vector_ab=vector(a[0],a[1],b[0],b[1])\n    vector_bc=vector(b[0],b[1],c[0],c[1])\n    vector_ac=vector(c[0],c[1],a[0],a[1])\n    area_of_triangle=((vector_ab[0]*vector_bc[0])+(vector_bc[0]*vector_ac[0])+(vector_ac[0]*vector_ab[0]))/2\n    return area_of_triangle\ndef area_of_triangle_2(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of the triangle given by the line passing through 3 points.\n    '''\n    # vector_ab=vector(a[0],a[1],b[0],b[1])\n    # vector_bc=vector(b[0],b[1],c[0],c[1])\n    # vector_ac=vector(c[0],c[1],a[0],a[1])\n    # print(vector_ab,vector_bc,vector_ac)\n    # vector_ab_BC=vector(vector_ab[0],vector_ab[1],vector_bc[0],vector_bc[1])\n    # vector_BC_ac=vector(vector_bc[0],vector_bc[1],vector_ac[0],vector_ac[1])\n    # print(vector_ab_BC,vector_BC_ac)\n    # vectors_AB_BC_ac=vector(vector_ab_BC[0],vector_ab_BC[1],vector_BC_ac[0],vector_BC_ac[1])\n    # vectors_AC_BC_ab=vector(vector_AC_BC_ac[0],vector_AC_BC_ac[1],vector_ab_BC[0],vector_ab_BC[1])\n    # print(vectors_AB_BC_ac,vectors_AC_BC_ab)\n    # area_of_triangle=dist(a[0],a[1],b[0],b[1])+dist(b[0],b[1],c[0],c[1])+dist(c[0],c[1],a[0],a[1])-dist(a[0],a[1],c[0],c[1])-dist(b[0],b[1],a[0],a[1])-dist(c[0],c[1],b[0],b[1])\n    vector_ab=vector(a[0],a[1],b[0],b[1])\n    vector_bc=vector(b[0],b[1],c[0],c[1])\n    vector_ac=vector(c[0],c[1],a[0],a[1])\n    vector_ac_bc=vector_ac-vector_bc\n    vector_ac_ab=vector_ac-vector_ab\n    area_of_triangle=(vector_ac_bc[0]*vector_bc[1])-(vector_ab[0]*vector_ac[1])\n    return area_of_triangle\ndef area_of_triangle_3(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of the triangle given by the line passing through 3 points.\n    '''\n    # vector_ab=vector(a[0],a[1],b[0],b[1])\n    # vector_bc=vector(b[0],b[1],c[0],c[1])\n    # vector_ac=vector(c[0],c[1],a[0],a[1])\n    # print(vector_ab,vector_bc,vector_ac)\n    # vector_ab_BC=vector(vector_ab[0],vector_ab[1],vector_bc[0],vector_bc[1])\n    # vector_BC_ac=vector(vector_bc[0],vector_bc[1],vector_ac",
        "test": "assert     polar_rect(0,0) == (0,0), \"Test 2 Failed\"",
        "num_ids": 983,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1]",
        "num_ids": 3041,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(1,k+1):\n        res = res * (n - i + 1) / i\n    return res\n",
        "test": "assert     binomial_Coeff(0,0) == 1",
        "num_ids": 3108,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip = '.'.join(ip)\n    return ip\n",
        "test": "assert     removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return abs(even[0]-odd[0])\n",
        "test": "assert     diff_even_odd([1,2,3,4,5,6]) == 1, 'error 1'",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # your code here\n    a = str1\n    b = str2\n    m=len(a)\n    n=len(b)\n    swap = 0\n    for i in range(0,m):\n        for j in range(0,n):\n            if a[i] == b[j]:\n                break\n        if j == n-1:\n            swap += 1\n            \n    return swap\n    \n    ",
        "test": "assert     min_Swaps(\"100\",\"100\") == 0, \"Should be 0\"",
        "num_ids": 3295,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if tuple_list == tuple():\n        return 0\n    return sys.getsizeof(tuple_list[0]) + tuple_size(tuple_list[1:])\n",
        "test": "assert (tuple_size(tuple()) == 0), \"The given tuple should be empty.\"",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # N = len(arr1)\n    # M = len(arr2)\n    # i = 0\n    # j = 0\n    #\n    # while i < N and j < M:\n    #     if arr1[i] < arr2[j]:\n    #         i += 1\n    #     elif arr1[i] > arr2[j]:\n    #         j += 1\n    #     else:\n    #         print(arr1[i], \" \", arr2[j])\n    #         i += 1\n    #         j += 1\n    #         if i >= N:\n    #             return arr2[j]\n    #         if j >= M:\n    #             return arr1[i]\n    # return -1\n",
        "test": "assert     find_kth([], [], 0) == None",
        "num_ids": 1536,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum\n",
        "test": "assert     armstrong_number(20) == False",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    sum_number = 0\n    average_number = 0\n    \n    for i in range(1,number + 1):\n        sum_number += i\n    \n    average_number = sum_number/number\n    \n    return sum_number, average_number\n    \n",
        "test": "assert     sum_average(1) == (1, 1.0)",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "test": "assert     is_Even(0) == True, \"Test 1 Failed\"",
        "num_ids": 503,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)-1):\n            if str1[i] == str1[j+1]:\n                return str1[i]\n    else:\n        return \"Not found\"\n",
        "test": "assert     first_repeated_char(\"aab\") == 'a', \"should be 'a'\"",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n):\n        if (i%7==0 or i%2==0) and i%5!=0:\n            ludic.append(i)\n    return ludic\n",
        "test": "assert     get_ludic(1) == []",
        "num_ids": 3223,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    s = s[::-1]\n    s = \" \".join(s)\n    return s\n",
        "test": "assert     reverse_words(\"\") == \"\", \"Empty String\"",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    import math\n    if (num < 2):\n        return False\n    elif (num == 2):\n        return True\n    elif (num > 2 and num % 2 == 0):\n        return False\n    else:\n        for i in range(3, int(math.sqrt(num) + 1), 2):\n            if (num % i == 0):\n                return False\n        return True\n",
        "test": "assert     prime_num(3) == True",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 120,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n",
        "test": "assert     radian_degree(45) == math.pi/4",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find first match of pattern in text\n    match = re.search(pattern, text)\n    if match is not None:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, -1, -1\n",
        "test": "assert     find_literals(\"This is just a string\", \"string\") == (\"is just a string\", 0, 15)",
        "num_ids": 1579,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = {0: 0, 1: 1}\n    \n    for i in range(2, n+1): \n        bell_numbers[i] = bell_numbers[i-1] + bell_numbers[i-2]\n    return bell_numbers[n]\n    ",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove from the end\n    return list1[:L - 1] + list1[L:]\n",
        "test": "assert     remove_kth_element([], 2) == []",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        res.append(max(test_list[i]))\n    return res[N-1]\n",
        "test": "assert     max_of_nth([[1, 2, 3], [4, 5, 6]], 0) == 6, \"Wrong value\"",
        "num_ids": 2985,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    new_lst = []\n    \n    for i in lst:\n        new_lst.append([i[0],i[1]])\n        \n    return new_lst\n    \n",
        "test": "assert merge([[1, 3], [5, 7], [9, 11]]) == [[1, 3], [5, 7], [9, 11]]",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n",
        "test": "assert     cummulative_sum([1,2,3,4,5]) == 15",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # nums = tuple(map(lambda x: tuple(map(int, x)), tuple))\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n",
        "test": "assert     average_tuple(tuple([tuple([1, 2, 3]), tuple([4, 5, 6]), tuple([7, 8, 9])])) == (2, 3, 4)",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # print('tuples test_tup1 = {}\\ntuples test_tup2 = {}'.format(test_tup1, test_tup2))\n    # print('tuples test_tup1 = {}\\ntuples test_tup2 = {}'.format(type(test_tup1), type(test_tup2)))\n    \n    if len(test_tup1)!= len(test_tup2):\n        print('lengths of tuples do not match')\n        return\n    \n    test_res = []\n    for i in range(len(test_tup1)):\n        # print('i = {}'.format(i))\n        # print('test_tup1[i] = {}'.format(test_tup1[i]))\n        # print('test_tup2[i] = {}'.format(test_tup2[i]))\n        test_res.append(test_tup1[i] % test_tup2[i])\n        # print('test_res = {}'.format(test_res))\n    \n    return tuple(test_res)\n    \n    ",
        "test": "assert     tuple_modulo((1, 2, 3), (3, 4, 5)) == (1, 2, 3)",
        "num_ids": 1344,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 0 or d < 1: \n        return -1\n    elif steps == 0 or d == 1: \n        return 0\n    else: \n        return 1 + min_Jumps(steps - 1, d) if min_Jumps(steps - 1, d) >= 0 else -1\n",
        "test": "assert     min_Jumps(3, 1)     ==     0 ",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) < len(nums2):\n        min_len = len(nums1)\n    else:\n        min_len = len(nums2)\n    max_len = min_len\n",
        "test": "assert     div_list([1, 2, 3], [1, 2, 3]) == None, \"the output of div_list should be None\"",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_list = list(test_str)\n    for i in range(len(test_str_list)):\n        if test_str_list[i].isnumeric():\n            for j in range(i, len(test_str_list)):\n                if test_str_list[j].isnumeric():\n                    test_str_list[j], test_str_list[i] = test_str_list[i], test_str_list[j]\n    return ''.join(test_str_list)\n",
        "test": "assert     move_num(\"The man was looking on the ground after the storm\") == \"earth looking The man after ground\"",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def is_divisible(n1,n2):\n        if n1 % n2 == 0: return True\n        return False\n    \n    \n    def largest_subset_helper(a,count):\n        #a is a list of numbers\n        #count is the number of numbers in the current largest set\n        \n        if count == len(a):\n            #if count == len(a): return True\n            #largest_subset_helper(a,count+1)\n            return True\n        \n        for i in range(count,len(a)):\n            #print a[:count]\n            #print a[count:]\n            if is_divisible(a[count],a[i]) and largest_subset_helper(a,count+1):\n                return True\n        \n        #return largest_subset_helper(a,count+1)\n        return False\n    \n    if len(a) == 0: return 0\n    return largest_subset_helper(a,0)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     largest_subset([]) == 0, \"No such subset exists!\"",
        "num_ids": 3496,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    print(arr1, arr2)\n    m = (n + 1) // 2\n    if n%2 == 0:\n        median1 = arr1[m - 1]\n        median2 = arr2[m - 1]\n        median = (median1 + median2)/2\n    else:\n        median = arr1[m]\n    return median\n",
        "test": "assert get_median([1,2,3,4], [5,6,7,8], 4) == 4",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # if n == 1:\n    #     return nums\n    # elif n == 2:\n    #     return [x*x for x in nums]\n    # else:\n    #     return [x*x for x in nums] + [x*x*x for x in nums]\n    \n    return [x**n for x in nums]\n",
        "test": "assert     nth_nums([1,2,3,4],2) == [1,4,9,16]",
        "num_ids": 2711,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # st = string.upper()\n    st = string\n    return st\n",
        "test": "assert     is_upper(\"HAN\") == \"HAN\", \"incorrect result\"",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    if size == 1:\n        return newList\n    else:\n        temp = newList[-1]\n        newList[-1] = newList[0]\n        newList[0] = temp\n        return newList\n    \nif __name__ == '__main__':\n    newList = [4,2,3,5,5,6]\n    newList = swap_List(newList)\n    print(newList)",
        "test": "assert     swap_List([1,2,3,4]) == [4,2,3,1]",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 0\n    for i in range(0,r) :\n        a = r**2 -(r-i)**2\n        area = area + (math.sqrt(a))\n    return area\n    \ndef triangle_area_2(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = 0\n    for i in range(0,r) :\n        a = r**2 -(r-i)**2\n        if a > a :\n            a = a\n    return a\n    \ndef sphere_area(r) :\n    '''\n    Write a python function to find the area of the largest sphere that can be inscribed in a hypersphere with a given radius.\n    '''\n    import math\n    volume = 4/3*math.pi*r**3\n    return volume\n    \ndef sphere_area_2(r) :\n    '''\n    Write a python function to find the area of the largest sphere that can be inscribed in a hypersphere with a given radius.\n    '''\n    import math\n    s = 4*math.pi*r**2\n    return s\n    \ndef circle_area(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    area = math.pi*r**2\n    return area\n    \ndef circle_area_2(r) :\n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a circle with a given radius.\n    '''\n    import math\n    a = math.pi*r**2\n    return a\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end = len(array) if not end else end\n    for i in range(start,end):\n        if(array[i]!= i+1):\n            return i+1\n    return end+1\n",
        "test": "assert     find_First_Missing([1, 2, 3, 5, 6]) == 4",
        "num_ids": 1399,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert     replace_spaces(\"\") == \"\", \"Empty string is not changed.\"",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    lst = []\n    for i in list:\n        if i%2==0:\n            lst.append(i)\n    print(lst)\n",
        "test": "assert ",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 120,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #temp = tuple(map(lambda x, y: x - y, ele, [1, 0, 0, 1]))\n    temp = tuple(map(lambda x, y: x - y, ele, [1, 0, 0, 1]))\n    for i in range(4):\n        if temp == (1, 0, 0, 1):\n            if (1, 0, 0, 0) not in sub:\n                sub.append((1, 0, 0, 0))\n        elif temp == (-1, 0, 0, 1):\n            if (0, 0, 0, 1) not in sub:\n                sub.append((0, 0, 0, 1))\n        elif temp == (0, 1, 0, 1):\n            if (0, 1, 0, 0) not in sub:\n                sub.append((0, 1, 0, 0))\n        elif temp == (0, -1, 0, 1):\n            if (0, -1, 0, 0) not in sub:\n                sub.append((0, -1, 0, 0))\n        elif temp == (0, 0, 1, 1):\n            if (0, 0, 1, 0) not in sub:\n                sub.append((0, 0, 1, 0))\n        elif temp == (0, 0, -1, 1):\n            if (0, 0, -1, 0) not in sub:\n                sub.append((0, 0, -1, 0))\n        elif temp == (1, 1, 0, 1):\n            if (1, 1, 0, 0) not in sub:\n                sub.append((1, 1, 0, 0))\n        elif temp == (-1, -1, 0, 1):\n            if (0, -1, 0, 1) not in sub:\n                sub.append((0, -1, 0, 1))\n        elif temp == (1, -1, 0, 1):\n            if (1, -1, 0, 0) not in sub:\n                sub.append((1, -1, 0, 0))\n        elif temp == (-1, 1, 0, 1):\n            if (0, 1, 0, 1) not in sub:\n                sub.append((0, 1, 0, 1))\n        elif temp == (0, -1, 1, 1):\n            if (0, -1, 1, 0) not in sub:\n                sub.append((0, -1, 1, 0))\n        elif temp == (0, 1, 1, 1):\n            if (0, 1, 1, 0) not in sub:\n                sub.append((0, 1, 1, 0))\n        elif temp == (0, 1, -1, 1):\n            if (0, 1, -1, 0) not in sub:\n                sub.append((0, 1, -1, 0))\n        elif temp == (0, -1, -1, 1):\n            if (0, -1, -1, 0) not in sub:\n                sub.append((0, -1, -1, 0))\n        elif temp == (0, -1, 1, 1):\n            if (0, -1, 1, 0) not in sub:\n                sub.append((0, -1, 1, 0))\n        elif temp == (0, 1, -1, 1):\n            if (0, 1, -1, 0) not in sub:\n                sub.append((0, 1, -1, 0))\n    return sub\n",
        "test": "assert     adjac((0, 1), [(0, 2)]) == [(0, 2)], \"Not an adjacency\"",
        "num_ids": 2237,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n    \n    \ndef count_words(text):\n    '''\n    Write a function that counts the number of words in a given text. The words must be separated by a single space.\n    '''\n    return len(text.split())\n",
        "test": "assert     replace_spaces('hello world') == 'hello_world'",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = num_list.count(0)\n    i = 0\n    while i < count:\n        num_list.remove(0)\n        num_list.append(0)\n        i += 1\n    return num_list\n",
        "test": "assert     move_zero([]) == []",
        "num_ids": 1616,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(0,n-1) :\n        sum=sum^arr[i]\n        print(sum)\n        for j in range(i+1,n) :\n            sum=sum^arr[j]\n            print(sum)\n    return sum\n    \n",
        "test": "assert pair_xor_Sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 0",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if iterable:\n        hq.heapify(iterable)\n        sorted_list = []\n        while iterable:\n            sorted_list.append(hq.heappop(iterable))\n        return sorted_list\n",
        "test": "assert     heap_sort([2,3,6,9,11]) == [2,3,6,9,11]",
        "num_ids": 770,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"No profit and loss\")\n        return 0\n    else:\n        if actual_cost > sale_amount:\n            print(\"No profit and loss\")\n            return 0\n        else:\n            print(\"Profit and loss\")\n            return 1\n",
        "test": "assert     noprofit_noloss(actual_cost=1, sale_amount=3) == True, 'exception occurred'",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    windchill = 35.74 + (0.6215 * t) - 35.75 * math.pow(v,0.16) + 0.4275 * t * math.pow(v,0.16)\n    return int(windchill)\nprint(wind_chill(5,30))\n",
        "test": "assert     wind_chill(5,32) == -8.03333333333333",
        "num_ids": 1021,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_no_lowercase = []\n    for s in sample_names:\n        if s.startswith(('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')):\n            sample_names_no_lowercase.append(s)\n    return(len(sample_names_no_lowercase))\n",
        "test": "assert     sample_nam([]) == 0, \"Empty\"",
        "num_ids": 3006,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if isinstance(items,str):\n        items = items.strip()\n        \n        if items.startswith(\"(\"):\n            items = items.replace('(','').replace(')','')\n        return items\n    else:\n        raise ValueError(f\"The input must be a string not {items}\")\n",
        "test": "assert     remove_parenthesis('Hello') == 'Hello'",
        "num_ids": 3106,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n",
        "test": "assert     is_nonagonal(1) == 1",
        "num_ids": 2533,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r\"^[a-zA-Z]\", text):\n        if re.search(r\"[a-zA-Z]$\", text):\n            return False\n    if re.search(r\"^[a-zA-Z]\", text):\n        if re.search(r\"[a-zA-Z]$\", text):\n            return False\n    return True\n",
        "test": "assert     text_match_wordz_middle(\"The cat is jumping\") == False",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverseArray(input):\n        start = 0\n        end = len(input)-1\n        while start < end:\n            input[start], input[end] = input[end], input[start]\n            start += 1\n            end -= 1\n        return input\n    return reverseArray(input)\n",
        "test": "assert    reverse_Array_Upto_K([1], 1) == [1]",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    return tuple(test_tup)\n",
        "test": "assert     add_dict_to_tuple((1,2,3), {'a':3, 'b':2}) == (1,2,3,{'a':3, 'b':2})",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_average = 0\n    n = len(cost)\n    visited = [[False for j in range(n)] for i in range(n)]\n",
        "test": "assert     maxAverageOfPath([[2,1,1],[2,5,1],[6,3,1],[4,3,2],[9,5,1]]    ==     10.0)",
        "num_ids": 2714,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    def func(data):\n        if data[1]>h and data[0]>w:\n            return True\n        return False\n    \n    students = {k:v for k,v in students.items() if func(v)}\n    return students\n",
        "test": "assert ",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(1 for i in range(len(nums1)) if nums1[i] == nums2[i])\n",
        "test": "assert     count_same_pair([], []) == 0",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert base >= 0\n    assert power >= 0\n    if power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power - 1)\n",
        "test": "assert     power_base_sum(0, 1) == 0",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    pattern = re.compile(r'\\\"')\n    if pattern.search(text1):\n        start = text1.find('\"')\n        end = text1.find('\"',start+1)\n        text = text1[start+1:end]\n    else:\n        text = None\n        \n    return text\n",
        "test": "assert    extract_quotation(\"This is a string\") == None",
        "num_ids": 3043,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    ret = []\n    for i in range(n):\n        ret.append(test_tup[i]*test_tup[i+1])\n    ret.append(test_tup[-1])\n    return tuple(ret)\n",
        "test": "assert     (multiply_elements((0,0,0,0))) == (0, 0, 0, 0)",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i] += lst2[i]\n    return lst1\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [1+4,2+5,3+6]",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        out = []\n        for g in groupby(nums):\n            out.append(list(g)[0])\n        return out\n",
        "test": "assert     consecutive_duplicates(['a','b','c','c','c','d','e']) == ['a','b','c','d','e']",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Make sure that r and h are positive, if not raise a TypeError.\n    if type(r) is not int and type(h) is not int:\n        raise TypeError\n    if r < 0 or h < 0:\n        raise TypeError\n    return math.pi * r**2 * h\n",
        "test": "assert     lateralsurface_cone(10,20) == 150",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n",
        "test": "assert     replace_specialchar('abc:123') == 'abc:123'",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 1340,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if(len(arr) == 0):\n        return 0\n    else:\n        total = 0\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                for k in range(j+1,len(arr)):\n                    total = total + (arr[i]*arr[j]*arr[k])\n        return total\n",
        "test": "assert     sum_Of_Subarray_Prod([1,2,3]) == 6",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (1 << (len(bin(n)) - 3))\n",
        "test": "assert     set_middle_bits(1) == False",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1\n",
        "test": "assert     left_insertion([4, 5, 6], 4) == 0",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex,string) \n    return match!= None\n",
        "test": "assert     check_str('G') == False, 'Not checking the correctness of check_str'",
        "num_ids": 2497,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # m = n//2 + 1\n    m = n + 1\n    return math.floor( math.log2(m) )\n",
        "test": "assert     find_Index(1) == 1",
        "num_ids": 2818,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n",
        "test": "assert     tuple_to_dict((0, 1)) == {0: 1}",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = []\n    for i in range(len(s)):\n        if s[i] in l:\n            return False\n        else:\n            l.append(s[i])\n    return True\n",
        "test": "assert     all_Characters_Same('A') == True,    \"Expected: True\\nActual: False\"",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side ** 2 / 4\n    return a\n",
        "test": "assert area_tetrahedron(2) == 1",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1,2,3,4], 2) == [3,4,1,2]",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(ele == None for ele in test_tup):\n        return True\n    return False\n",
        "test": "assert     check_none((1,None,2,3)) == True, 'None value is removed.'",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    x = []\n    for num in range(startnum, endnum):\n        if num % 2 == 0 and num % 3 == 0 and num % 4 == 0 and num % 5 == 0 and num % 6 == 0 and num % 7 == 0 and num % 8 == 0 and num % 9 == 0 and num % 10 == 0:\n            x.append(num)\n    return x\n",
        "test": "assert     divisible_by_digits(0, 0) == [], \"0 should be divisible by 0\"",
        "num_ids": 2986,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #find the total surface area\n    total_area = math.pi * (r**2)\n    \n    #find the area of the sector\n    sector_area = total_area * math.cos(math.radians(a))\n    \n    #if the angle is larger than 360 degrees\n    if sector_area > math.pi * (r**2):\n        print(\"The angle is larger than 360 degrees.\")\n    else:\n        print(\"The sector area is:\",sector_area)\n    \nsector_area(5,90)\nsector_area(5,360)\nsector_area(5,0)\n",
        "test": "assert     sector_area(3, -360) is None",
        "num_ids": 1067,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    \n    # table[i][j] will be storing the length of LCS for X[0...i-1] \n    # and Y[0...j-1] \n    table = [[0 for x in range(o)] for x in range(m)] \n    \n    # initialization of LCS \n    for i in range(m): \n        for j in range(o): \n            if X[i] == Y[j]: \n                table[i][j] = 1 + table[i-1][j-1] \n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1]) \n    \n    # for i in range(m): \n    #     for j in range(o): \n    #         print(table[i][j], end = \" \") \n    #     print() \n    \n    # lcs is the final result \n    lcs = table[m-1][o-1] \n    \n    # find the length of the longest common supersequence. \n    ''' \n    For this problem, it is possible to find lcs by subtracting the length of the longest subsequence in X, \n    from the length of the longest subsequence in Y. \n    '''\n    for i in range(m-1, -1, -1): \n        for j in range(o-1, -1, -1): \n            \n            ''' \n            If the current character in X is equal to the current character in Y, \n            and if the current character in Y is equal to the current character in Z, \n            then we can pick this character to make it common supersequence. \n            In this case, we increase the result by 1. \n            '''\n            if X[i] == Y[j] and Y[j] == Z[j]: \n                lcs = max(lcs, 1 + table[i][j]) \n                \n    # for i in range(m): \n    #     for j in range(o): \n    #         print(table[i][j], end = \" \") \n    #     print() \n    \n    return lcs \n    ",
        "test": "assert ",
        "num_ids": 4070,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using split(), re.split()\n    # print(re.split('([^a-zA-Z0-9\\s]+)', str1))\n    str1=re.sub('([^a-zA-Z0-9\\s]+)', r' \\1 ', str1)\n    return str1\n",
        "test": "assert     capital_words_spaces('this is a test') == 'this is a test'",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sort_numeric_strings(nums_str):\n        nums_str = [num for num in nums_str]\n        for i in range(len(nums_str)):\n            for j in range(len(nums_str)-1):\n                if nums_str[j] > nums_str[j+1]:\n                    nums_str[j], nums_str[j+1] = nums_str[j+1], nums_str[j]\n        return nums_str\n    return sort_numeric_strings(nums_str)\n",
        "test": "assert     sort_numeric_strings(['5', '3', '4', '2']) == ['2', '3', '4', '5']",
        "num_ids": 1098,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert ",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # First i'th element will be compared to the last element as it is a max heap\n    left = 2*i+1\n    right = 2*i+2\n    if left <= len(arr)-1 and arr[i] > arr[left]:\n        return False\n    if right <= len(arr)-1 and arr[i] > arr[right]:\n        return False\n    if left <= len(arr)-1 and right <= len(arr)-1:\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    return True\n",
        "test": "assert     check_min_heap_helper(arr=[3,2,1,0,5,4], i=1) == False",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = n+1\n    L = 0\n    U = 1\n    \n    for i in range(2,n): \n        L = U \n        U = U + L\n    return L\n",
        "test": "assert     jacobsthal_num(0) == 0",
        "num_ids": 2734,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # return list(map(lambda x: x[0], heapq.nsmallest(K, test_list, key=lambda x: x[1])))\n    return sorted(test_list, key=lambda x: x[1])[:K]\n",
        "test": "assert     min_k([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)], 3) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1.count(l1[i]) == 3 and l2.count(l2[i]) == 3 and l3.count(l3[i]) == 3:\n            l.append(l1[i])\n    return l\n",
        "test": "assert     extract_index_list([1,2,3], [2,3,3], [4,4,4]) == []",
        "num_ids": 1464,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #print('list:', numbers)\n    #print('list', numbers)\n    if len(numbers) == 0:\n        return None\n    numbers = sorted(numbers)\n    return numbers[1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     second_smallest([0,0,0,0,0]) == 0, 'Should be 0'",
        "num_ids": 4930,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one(\"abab\") == True, \"Should be True\"",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if test_list == None:\n        return 0\n    else:\n        res = 0\n        for i in range(len(test_list)):\n            for j in range(i+1, len(test_list)):\n                if test_list[i] == test_list[j][::-1]:\n                    res += 1\n        return res\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 1039,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    res = {}\n    for i in range(len(list1)):\n        res[tuple(list1[i])] = 0\n        for j in range(len(list1)):\n            if list1[i] == list1[j]:\n                res[tuple(list1[i])] += 1\n    return res\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1296,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    s = str(num)\n    return s.replace('.', '', 1).isdigit() and s.find('.')!= -1\n",
        "test": "assert     is_decimal(\"9.91\") ",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "test": "assert     unique_Element([1,2,3,1]) == False, \"Not unique\"",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n        \n        \ndef check_month_date(date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if date > 31 or date < 1:\n        return False\n    else:\n        return True\n        \ndef check_if_valid(year, month, date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if year < 1000 or year > 3000:\n        return False\n    elif month < 1 or month > 12:\n        return False\n    elif date < 1 or date > 31:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    else:\n        if check_month_date(date):\n            return True\n        else:\n            return False\n            \ndef leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef is_leap(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef check_date(year, month, date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if year < 1000 or year > 3000:\n        return False\n    elif month < 1 or month > 12:\n        return False\n    elif date < 1 or date > 31:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    else:\n        if is_leap(year):\n            if date > 29:\n                return False\n        else:\n            if date > 28:\n                return False\n        return True\n        \ndef check_input_date(date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if date.count('-')!= 2:\n        return False\n    else:\n        date_split = date.split('-')\n        if len(date_split[0]) == 4 and len(date_split[1]) == 2 and len(date_split[2]) == 2:\n            if not check_date(int(date_split[0]), int(date_split[1]), int(date_split[2])):\n                return False\n            else:\n                return True\n        else:\n            return False\n            \ndef is_leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef leap_year_output(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year < 1000 or year > 3000:\n        return False\n    elif is_leap_year(year):\n        return True\n    else:\n        return False\n        \ndef is_leap_year_output(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year < 1000 or year > 3000:\n        return False\n    elif is_leap_year(year):\n        return True\n    else:\n        return False\n    \ndef check_input_month(month):\n    '''\n    Write a function to check whether the given month is valid or not.\n    '''\n    if month > 12 or month < 1:\n        return False\n    else:\n        return True\n        \ndef check_input_month_year(month, year):\n    '''\n    Write a function to check whether the given month and year is valid or not.\n    '''\n    if not check_input_month(month):\n        return False\n    elif not check_input_year(year):\n        return False\n    else:\n        return True\n        \ndef check_input_date_month_year(date, month, year):\n    '''\n    Write a function to check whether the given date and month and year is valid or not.\n    '''\n    if date < 1 or date > 31 or month < 1 or month > 12 or year < 1000 or year > 3000:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    elif not check_input_year(year):\n        return False\n    else:\n        if date > 29 and month == 2 and is_leap_year(year):\n            return False\n        else:\n            return True\n        \ndef check_input_date_month(date, month):\n    '''\n    Write a function to check whether the given date and month is valid or not.\n    '''\n    if date < 1 or date > 31 or month < 1 or month > 12:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    else:\n        if date > 28:\n            return False\n        else:\n            return True\n            \ndef check_input_date_month_year(date, month, year):\n    '''\n    Write a function to check whether the given date and month and year is valid or not.\n    '''\n    if date < 1 or date > 31 or month < 1 or month > 12 or year < 1000 or year > 3000:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    elif not check_input_year(year):\n        return False\n    else:\n        if date > 29 and month == 2 and is_leap_year(year):\n            return False\n        else:\n            return True\n        \ndef check_input_date_year(date, year):\n    '''\n    Write a function to check whether the given date and year is valid or not.\n    '''\n    if date < 1 or date > 31 or year < 1000 or year > 3000:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    else:\n        if date > 28:\n            return False\n        else:\n            return True\n            \ndef check_input_date_month_year(date, month, year):\n    '''\n    Write a function to check whether the given date and month and year is valid or not.\n    '''\n    if date < 1 or date > 31 or month < 1 or month > 12 or year < 1000 or year > 3000:\n        return False\n    elif not check_monthnumber_number(month):\n        return False\n    elif not check_input_year(year):\n        return False\n    else:\n        if date > 29 and month == 2 and is_leap_year(year):\n            return False\n        else:\n            return True\n    \ndef check_input_year(year):\n    '''\n    Write a function to check whether the given year is valid or not.\n    '''\n    if year < 1000 or year > 3000:\n        return False\n    else:\n        return True\n    \ndef check_input_month(month):\n    '''\n    Write a function to check whether the given month is valid or not.\n    '''\n    if month > 12 or month < 1:\n        return False\n    else:\n        return True\n        \ndef check_input_date(date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    if date < 1 or date > 31:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(2) == False",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    min_diff = arr[0]\n    for i in range(1,len(arr)):\n        min_diff = min(min_diff, arr[i]-arr[i-1])\n    return min_diff\n",
        "test": "assert     find_min_diff([2,4,1,3],4) == 1",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 764,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr('') == 0",
        "num_ids": 2575,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #code here\n    if n==1:\n        return 1\n    else:\n        return 2*n+1\n",
        "test": "assert     is_polite(1) ==  1, '1st case does not match'",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)==1:\n        return []\n    l1_pairs = []\n    for i in range(len(l1)-1):\n        l1_pairs.append((l1[i],l1[i+1]))\n    return l1_pairs\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 1192,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "test": "assert     get_pairs_count([], 4) == 0, 'pairs count with empty list'",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "test": "assert     Diff([], []) == [], 'incorrect output'",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum += i**2\n    return sum\nodd_num_sum(10)\n",
        "test": "assert     odd_num_sum(0) == 0, 'Test Case 1'",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    \n    for ch in exp:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression('') == True, \"An empty string is balanced\"",
        "num_ids": 3587,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str)):\n        if len(test_str) - i < K:\n            test_str = test_str[:i] + test_str[i + 1:]\n    return test_str\n",
        "test": "assert     remove_length(\"geeksforgeeks\", 0) == \"geeksforgeeks\"",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # text = \"AAAABBCCCCDDDDEEEEEE\"\n    # pattern = \"BBCCCCCDDDDEEEE\"\n",
        "test": "assert     occurance_substring(\"bad pattern\", \"xyz\") == None",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return True if all(num%2==1 for num in nums) else False\n",
        "test": "assert     odd_position([1,2,3,4,4]) == False, \"odd_position([1,2,3,4,4]) should return False.\"",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if len(test_str) < 2:\n        return 0\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n    return count\n",
        "test": "assert     count_vowels(\"\") == 0",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr[arr.index(i) + 1:]:\n            sum += i\n    return sum\n",
        "test": "assert     find_sum([1,5,1]) == 5, '''Test Case 2:'''",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    print('\\nFuncion: pack_consecutive_duplicates(list1)')\n    grouped = groupby(list1)\n    return [list(grp) for k, grp in grouped]\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_dic = {}\n    for i in range(len(list1)):\n        if (list1[i],) not in list_dic.keys():\n            list_dic[(list1[i],)] = 1\n        else:\n            list_dic[(list1[i],)] += 1\n    return list_dic\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 3124,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    l = list(combinations(test_list,3))\n    return l\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_divisors = 0\n    for i in range(1,n) :\n        if n%i == 0 :\n            count_divisors += 1\n    return count_divisors\n",
        "test": "assert     count_divisors(6) ",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    ans = 0\n    for i in range(n):\n        if i%2==1:\n            ans += arr[i]\n    return ans\n",
        "test": "assert     odd_length_sum([1, 2, 3, 4, 5]) == 6, \"Wrong Output\"",
        "num_ids": 1057,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    if delta == 0:\n        return 0, 0, 0\n    s = delta / max_color\n    # calculate the chromacity\n    c = (max_color - min_color) / delta\n    # calculate the value of h\n    if delta == 0:\n        h = 0\n    elif max_color == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_color == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:\n        h = 60 * (((r - g) / delta) + 4)\n    # convert hsv color to hsv\n    h = h / 360\n    s = c / 255\n    v = s * 255\n    # return the converted hsv color\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0), 'PASSED'",
        "num_ids": 3127,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return even,odd\n",
        "test": "assert ",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "test": "assert     tuple_str_int('1,2,3') == (1,2,3)",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i] == x:\n        return i\n    else:\n        return i + 1\n",
        "test": "assert right_insertion([2,4,5], 5) == 3",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return text.count(\"ab\") == 3\n",
        "test": "assert     text_match_three('aac') == False",
        "num_ids": 2670,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str)\n    new_tuple = tuple(test_list)\n    return new_tuple\n",
        "test": "assert     new_tuple([1,2,3,4], 'abc') == (1,2,3,4)",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # Your code here\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            return False\n    return True\n",
        "test": "assert even_position([1,2,3,4,6]) == False, \"Test 2 Failed\"",
        "num_ids": 2757,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for tup in test_tup:\n        print(tup)\n    print(type(test_tup))\n    print(\"-------------------------------\")\n    new_tup = []\n    for tup in test_tup:\n        if type(tup)!= tuple:\n            new_tup.append(tup)\n    return tuple(new_tup)\n",
        "test": "assert     remove_nested((1,2,3,4,5,6,7)) == (1,2,3,4,5,6,7)",
        "num_ids": 1275,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    for elem in input_list:\n        if type(elem) == list:\n            list_count += 1\n    print(list_count)\n    return list_count\n    \ncount_list([1,2,3,[4,5],6,7,8]) # Should be 1\ncount_list([1,2,3,[4,5],6,7,8,9]) # Should be 2\ncount_list([1,2,3,4,5,[6,7,8,9],10]) # Should be 3\n",
        "test": "assert     count_list([[]]) == 1, \"Test case 2: Passed\"",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        if x<arr[0]:\n            return -1\n        if x>arr[0]:\n            return 0\n        else:\n            return 0\n    if arr[n-1]>x:\n        return n-1\n    if arr[0]<x:\n        return 0\n    i = 0\n    while arr[i]<=x:\n        if arr[i]==x:\n            return i\n        i += 1\n    return i\n",
        "test": "assert     last([],0) == -1",
        "num_ids": 3497,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[\\w]+b')\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb('a') == False",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum\n",
        "test": "assert     return_sum({}) == 0, \"error 1\"",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n==0:\n        return 1\n    sum=0\n    for i in range(n+1):\n        if i%2!=0:\n            sum=sum+i\n    return sum\n",
        "test": "assert     sum_odd(1) == 1, 'Function should be sum_odd(l, r)'",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert     _sum([1, 2, 3]) == 6, \"Wrong\"",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n",
        "test": "assert     left_rotate(1,0) == 1",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \" \".join(text.split())\n",
        "test": "assert     remove_all_spaces('') == '', 'blah'",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = x == y == z\n    return result\n",
        "test": "assert     test_three_equal(1,2,3) == 0, \"Test case 1\"",
        "num_ids": 2839,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # code here\n    l = len(arr)\n    if l <= 1:\n        return 0\n    \n    \n    pivot = arr[0]\n    smaller = []\n    larger = []\n    \n    for i in range(1,l):\n        if arr[i] <= pivot:\n            smaller.append(arr[i])\n        else:\n            larger.append(arr[i])\n            \n    count = 0\n    count += len(larger)\n    count += len(smaller)\n    \n    return count\n",
        "test": "assert     count_rotation([0]) == 0, \"testcase 2: length=1\"",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return False\n    for i in range(1, n + 1):\n        if (n % i) == 0:\n            j = n // i\n            if i ** 2 == j:\n                return True\n    return False\n",
        "test": "assert     is_perfect_square(13) == False, \"13 is not perfect\"",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        return all(x % 2 == 0 for x in arr)\n",
        "test": "assert not is_product_even([])",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if lists == None or len(lists) == 0:\n        return None\n    if len(lists) == 1:\n        return lists\n    if len(lists) == 2:\n        return lists if lists[0] > lists[1] else lists[::-1]\n    return max_sum_list_rec(lists,0)\n",
        "test": "assert     max_sum_list([[1,3,4,2,5],[-2,-3,-4,-5,-6]]) == [[1, 3, 4, 2, 5], [-2, -3, -4, -5, -6]]",
        "num_ids": 3212,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    my_dict = {}\n    max_num = 0\n    for i in range(len(test_str)):\n        if test_str[i] in my_dict:\n            my_dict[test_str[i]] += 1\n        else:\n            my_dict[test_str[i]] = 1\n        if my_dict[test_str[i]] > max_num:\n            max_num = my_dict[test_str[i]]\n    return max_num\n",
        "test": "assert     max_run_uppercase(\"\") == 0, \"Empty string\"",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(1, len(nums) + 1):\n        if i % 2!= 0:\n            return nums[i - 1]\n",
        "test": "assert first_odd([1, 4, 6, 5, 7, 3, 8, 11, 2, 9, 10]) == 3, 'first_odd'",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    tup_check = set(test_tup)\n    return K in tup_check\n    \ndef reduce_tuple(tup):\n    '''\n    Write a function to reduce the given tuples.\n    '''\n    for i in range(len(tup)):\n        for j in range(i+1, len(tup)):\n            if tup[i] == tup[j]:\n                return False\n    return True\n",
        "test": "assert     check_K((1, 2, 3, 4, 5, 6, 7), 7) == True",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller((1,2,3), (4,2,1)) == False, \"First tuple is NOT smaller than second tuple\"",
        "num_ids": 1087,
        "indeed": false
    }
]