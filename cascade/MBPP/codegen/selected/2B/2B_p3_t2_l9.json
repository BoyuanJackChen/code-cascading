[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in test_tup1:\n        if i in test_tup2:\n            return True\n",
        "test": "assert ",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2!= 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(2) == True",
        "num_ids": 199,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n, nums)\n",
        "test": "assert     heap_queue_largest([4,1,3,2],4) == [3,2,4,1]",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0\nprint(is_Power_Of_Two(1))\n",
        "test": "assert not is_Power_Of_Two(15)",
        "num_ids": 169,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    string = text.split()\n    result = []\n    for word in string:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "test": "assert     find_char_long('wakawaa') == ['wakawaa']",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for n in nums:\n        new_list.append(n*n)\n    return new_list\n",
        "test": "assert     square_nums([1,2,3]) == [1,4,9], 'incorrect'",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #In this code if i am considering the case of input string of 'ac' then i will consider both of the possible rotation of the string\n    #i.e 'aac','aca','caa'\n    #so the we will take 3 rotations for every 'a',and we will count how many of them are needed to make the string equal to 'ac'\n    #the final answer will be 3 \n    if len(str) == 0:\n        return -1\n    if str == \"ac\":\n        return 0\n    count = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            count+=1\n    return count\n",
        "test": "assert     find_Rotations(\"a\") == 0, \"Input 'a' should be 0.\"",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0: \n        return(s) \n    else: \n        return(s.replace(ch,\"\",1)) \n",
        "test": "assert     remove_Occ(\"luminar\",\"l\") == \"uminar\"",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m,n = len(M),len(M[0])\n    s = [[0]*n for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            s[i][j] = sum(M[i][k] for k in range(n))\n    return s\n",
        "test": "assert     sort_matrix([[2, 0, 0],",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l is the length of the triangular prism\n    #b is the base of the triangular prism\n    #h is the height of the triangular prism\n    \n    Volume = 1/6*l*b*h\n    return Volume\n",
        "test": "assert ",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'[a-z]+_[a-z]*', text)\n",
        "test": "assert     text_lowercase_underscore('abcdefgh_') == False",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "test": "assert ",
        "num_ids": 77,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for i in string:\n        if i not in string:\n            new_list.append(i)\n    return new_list\n    \ndef get_char_frequency(string):\n    '''\n    Write a function to count frequency of characters in a given string.\n    '''\n    new_dict = {}\n    for i in string:\n        if i in new_dict:\n            new_dict[i] += 1\n        else:\n            new_dict[i] = 1\n    return new_dict\n",
        "test": "assert ",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n    \ndef test_duplicate_2(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n",
        "test": "assert     test_duplicate([1,2,3,4,1]) == False",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(3) == False",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num>0:\n        rev = rev*10 + num%10\n        num //= 10\n    return rev == num\n    ",
        "test": "assert ",
        "num_ids": 117,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = 0\n    for i in range(len(arr)) :\n        if arr[i] > maxNum :\n            maxNum = arr[i]\n    return maxNum\n",
        "test": "assert     find_Max_Num([1,2,3,4,5,6]) == 6",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y > 0: \n        return True\n    else: \n        return False\n",
        "test": "assert     opposite_Signs(6, 7) == True, 'Failed'",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) // 2\n",
        "test": "assert     is_octagonal(1) == 1, \"Wrong value\"",
        "num_ids": 156,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]]+=1\n    cnt = 0\n    for key, val in d.items():\n        if val==len(s):\n            cnt+=1\n    return cnt\n",
        "test": "assert     count_Substrings(\"\") == 0, \"Empty String\"",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #create a list of all the numbers in the list\n    xs = list(xs)\n    #create a new list of all the numbers that are odd\n    odd = list(filter(lambda x: x%2, xs))\n    #if the length of the list is 0, return none.\n    if len(odd) == 0:\n        return None\n    #otherwise return the smallest number from the odd list\n    return min(odd)\n",
        "test": "assert     smallest_num([1, 5, 3, 6, 8]) == 1",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    first = max(test_list)\n    second = min(test_list)\n    return max(first, second) - min(first, second)\n",
        "test": "assert     max_difference([(4,5),(6,7),(7,8),(9,10)]) == 2, 'Wrong'",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks( [ (6, 2), (2, 4), (4, 3), (1, 1) ] ) ==     [ (1, 1), (6, 2), (4, 3), (2, 4) ]",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([])                 == 0",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # Using the list comprehension\n    return sum([1 for item in list if item > 0])\n",
        "test": "assert     pos_count([1,2,3,-1,5,-3,6,2,4]) == 7",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    \n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n",
        "test": "assert     bell_number(7) == 15",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    j = len(A) - 1\n    while i < j:\n        if A[i] <= A[j]:\n            i += 1\n        else:\n            j -= 1\n    return True if i == j else False\n",
        "test": "assert     is_Monotonic([10, 9, 8, 7, 6]) == True",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n",
        "test": "assert     is_sublist([1,2,3], [1]) == True",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input)\n    for i in range(length):\n        for j in range(length):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,2,3,4),(1,2,3,4),(1,2,3,4,5),(1,2,3,4)]) == False, \"tuple with unequal length are not equal\"",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    while gap > 1:\n        gap = int(gap / 1.3)\n        if gap == 0:\n            gap = 1\n        i = 0\n        while i < gap:\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n            i += 1\n    return nums\n",
        "test": "assert ",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n <= 0): \n        return False\n    \n    if (n == 1): \n        return True\n",
        "test": "assert     dif_Square(1) == True, \"Expected True\"",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return sorted(colors) == sorted(patterns)\n",
        "test": "assert     is_samepatterns([{1,2,3,4},{1,2,3,4}],[{1,2,3,4},{1,2,3,4}]) == True",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    k_list = []\n    test_list_len = len(test_list)\n    for i in range(test_list_len):\n        if test_list[i][0] % K == 0 or test_list[i][1] % K == 0:\n            k_list.append(test_list[i])\n    return k_list\n",
        "test": "assert     find_tuples([(2,3),(3,5),(6,4)], 3) == [(3,5)]",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11 == 0):\n        return True\n    else:\n        return False\n",
        "test": "assert     (is_Diff(11)    == True), \"Wrong output\"",
        "num_ids": 177,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s=s.split(\" \")\n    for i in s:\n        if len(i)%2==0:\n            print(\"Even\")\n            break\n        else:\n            print(\"Odd\")\n            break\n",
        "test": "assert word_len('hello') == True",
        "num_ids": 147,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # the formula is a*b*c = (n-1)*(n-2)*(n-3)\n    # where a, b, and c are the 3 n-th tetrahedral numbers.\n    a = b = c = 1\n    for i in range(3, n + 1):\n        c = a + b + c\n        a, b, c = b, c, a\n    return c\n",
        "test": "assert ",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "test": "assert     volume_sphere(1) == 4/3*math.pi, 'Wrong'",
        "num_ids": 127,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    if len(strr) == 0:\n        return 0\n    else:\n        return ord(strr[0]) + sum([ord(i) for i in strr[1:]]) % 26\n",
        "test": "assert     get_Char(\"L\")    == 25, \"the output is 25\"",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = 0\n    for i in range(n):\n        s += (3 ** i) * 5 ** (n-i-1)\n    return s\n",
        "test": "assert     sequence(1) == 1, \"Wrong Answer\"",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea_sphere=4*math.pi*(r**2)\n    return surfacearea_sphere\nprint(surfacearea_sphere(1))\n",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi",
        "num_ids": 111,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    number = 2\n    while i < n:\n        number += 3 * (i - 1)\n        i += 1\n    return number\n",
        "test": "assert     centered_hexagonal_number(2) == 2",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2, **dict3}\n",
        "test": "assert     merge_dictionaries_three({1: 10, 2: 20},{3: 30, 4: 40},{5: 50,6: 60}) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "test": "assert     freq_count([1,1,1,1,1,1,1]) == {1:7}",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_smaller_num(n):\n        if n < 0:\n            return 0\n        if n < N:\n            return n\n        else:\n            return n - 1\n    return closest_smaller_num(N)\n",
        "test": "assert     closest_num(4) == 3",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    c = 0\n    temp_word = \"\"\n    longest = \"\"\n    for i in list1:\n        if c < len(i):\n            c = len(i)\n            temp_word = i\n    return len(temp_word)\n",
        "test": "assert ",
        "num_ids": 163,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    s = str1\n    sub = sub_str\n    for i in range(len(s)):\n        if s[i] in sub:\n            return True\n    return False\n",
        "test": "assert     find_substring('hello','o') == True, \"Should be True\"",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "test": "assert     is_undulating(3) == True, \"test failed\"",
        "num_ids": 139,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert     power(2,3) == 8",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # get the index of the smallest second value in the list\n    # get the index of the first element of that second value\n    # return that element\n    minimum = []\n    for i in range(len(test_list)):\n        minimum.append((test_list[i][0], test_list[i][1]))\n    minimum.sort()\n    return minimum[0]\nprint(index_minimum([(0,2),(2,4),(3,5),(4,8)]))\n",
        "test": "assert     index_minimum([('a', 2), ('c', 2), ('b', 1), ('c', 1), ('a', 1)]) == ('a', 1)",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst)\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return min\n",
        "test": "assert     Find_Min_Length([[], [], []]) == 0",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n",
        "test": "assert ",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        freq[list1[i]] = freq.get(list1[i],0) + 1\n    return freq\n",
        "test": "assert     frequency_lists([]) == {}, \"Empty list\"",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result *= n\n    \n    return result\n",
        "test": "assert     multiply_num([1,2,3]) == 6, 'Multiply should return 6'",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return '{0:b}'.format(n)\n",
        "test": "assert     decimal_to_binary(0) == \"0\"",
        "num_ids": 99,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    for i in range(len(s)-1,0,-1):\n        if s[i] == '0' or s[i] == '1' or s[i] == '2':\n            continue\n        else:\n            s = s[:i]+s[i+1:]\n            break\n    return int(s)\n",
        "test": "assert     next_smallest_palindrome(121) == 121, 'Wrong answer'",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n    return arr[k-1]\n",
        "test": "assert     kth_element([0,1,2,3,4,5,6,7,8,9,10,11], 10) == 10, \"Failed\"",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n",
        "test": "assert     snake_to_camel(\"i_am_a_snake\") == \"IAmASnake\", \"Not quite\"",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 2*m - n\n",
        "test": "assert     eulerian_num(2, 2) == 2",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Your code goes here\n    for i in range(len(input_list)):\n        for j in range(len(input_list) - i - 1):\n            if input_list[j][0] > input_list[j + 1][0]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n            if input_list[j][0] < input_list[j + 1][0]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n            if input_list[j][1] > input_list[j + 1][1]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n            if input_list[j][1] < input_list[j + 1][1]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n            if input_list[j][2] > input_list[j + 1][2]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n            if input_list[j][2] < input_list[j + 1][2]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n",
        "test": "assert     sort_sublists([['a', 'b'], ['b', 'a'], ['b', 'a']]) == [['a', 'b'], ['b', 'a'], ['a', 'b']]",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count\n",
        "test": "assert     count([]) == 0, \"should return 0\"",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #for i in range(len(test_list)):\n    #    test_list[i] = list(test_list[i])\n    #    test_tup[i] = tuple(test_tup[i])\n    #test_tup.extend(test_list)\n    test_tup = test_tup + test_list\n    return test_tup\n",
        "test": "assert     add_lists(",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge=[]\n    \n    i=0\n    j=0\n    k=0\n",
        "test": "assert ",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s1 = s[n:]+s[:n]\n    print(s1)\n    sum = 0\n    for i in range(len(s1)):\n        if s1[i] == \"0\":\n            sum +=1\n    return sum\n",
        "test": "assert ",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        if i is not None:\n            if isinstance(i, list):\n                result.extend(common_in_nested_lists(i))\n            else:\n                if i not in result:\n                    result.append(i)\n    return result\n",
        "test": "assert     common_in_nested_lists([[1, 2, 3], [4, 5], 6, 7]) == 5",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('2') == True, '\"2\" is not an integer!'",
        "num_ids": 145,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{'a':1},{'a':2},{'a':3}]) == False",
        "num_ids": 186,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n    return res\n",
        "test": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 12345",
        "num_ids": 197,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = float(test_list[i])\n",
        "test": "assert     list_to_float([[1, 2], ['hello', 1.5], (1, 1), 1]) == [[1, 2.0], ['hello', 1.5], (1, 1), 1]",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "test": "assert     string_to_list(\"hello world\") == [\"hello\", \"world\"], \"Expected ['hello', 'world'], got ['hello', 'world'] instead.\"",
        "num_ids": 138,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    newArr = []\n    for num in range(len(arr)):\n        if arr.count(arr[num]) == 1:\n            newArr.append(arr[num])\n    return newArr\n",
        "test": "assert     search([1,1,2,4,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9]) == 9",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # list1 = [-1, -3, 4, -5, 2]\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if max_product < abs(list1[i]*list1[j]):\n                max_product = abs(list1[i]*list1[j])\n    return max_product\n",
        "test": "assert ",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = set()\n    amicable_pairs = set()\n",
        "test": "assert     amicable_numbers_sum(2) == 1",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = (a.real**2 + a.imag**2)**0.5\n    y = (b.real**2 + b.imag**2)**0.5\n    if x == 0:\n        if y == 0:\n            return 0\n        else:\n            if y > 0:\n                return cmath.acos(y/x)\n            else:\n                return -cmath.acos(y/x)\n    else:\n        return cmath.acos(y/x)\n    #return abs(angle)\n",
        "test": "assert ",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(1,len(string)):\n        sub_string = string[i-1] + string[i]\n        num_zeros = sub_string.count(\"0\")\n        num_ones = sub_string.count(\"1\")\n        if max_diff < abs(num_zeros - num_ones):\n            max_diff = abs(num_zeros - num_ones)\n    return max_diff\n",
        "test": "assert     find_length(\"1100101\") == 2, \"Should be 2\"",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count = 0\n    for i in range(1, a+1):\n        if a%i==0 and b%i==0:\n            count += i\n    return count\n",
        "test": "assert     sum(4,8) == 6",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(5, 3) == 15, \"Your function should multiply the two integers.\"",
        "num_ids": 142,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w) > n]\n",
        "test": "assert     long_words(4, ['of', 'the','same', 'are', 'all']) == ['are', 'of', 'the','same']",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # 1-D array to store the numbers\n    nums = []\n    # compare each element in the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            nums.append(my_matrix[i][j])\n    \n    # make the array a one-dimensional list\n    nums = list(map(int, nums))\n    \n    # check if the numbers are in ascending order\n    if nums == sorted(nums):\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    max_value = max(d.values())\n    for i in d.keys():\n        if d[i] == max_value:\n            return i\n",
        "test": "assert     max_occurrences([1,1,2,2,2,3]) == 2",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # reverse string\n    vowels = set('aeiou')\n    res = list(str1)\n    i = 0\n    j = len(res) - 1\n    while i < j:\n        if res[i] not in vowels:\n            i += 1\n        if res[j] not in vowels:\n            j -= 1\n        res[i], res[j] = res[j], res[i]\n        i += 1\n        j -= 1\n    return ''.join(res)\n",
        "test": "assert     reverse_vowels(\"\") == \"\"",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str, tup1))\n",
        "test": "assert     tup_string((3,1,1,4,3)) == \"3,1,1,4,3\", 'Second test failed'",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num=nums\n    sum_neg=0\n    for i in range(len(num)):\n        if num[i]<0:\n            sum_neg=sum_neg+num[i]\n    return sum_neg\n",
        "test": "assert     sum_negativenum([-2, -1, 1]) == -3, \"sum of negative numbers\"",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n > 0):\n        print(2 * (3**n - 1) / (3**n - 2))\n    else:\n        print(1)\n",
        "test": "assert ",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero = 0\n    nonzero = 0\n    for num in nums:\n        if num == 0:\n            zero += 1\n        else:\n            nonzero += 1\n    return zero/nonzero\n",
        "test": "assert zero_count([1]) == 0.0",
        "num_ids": 155,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n>0:\n        if n%2==0:\n            n=n//2\n        else:\n            return False\n    return True\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(1) == False",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n",
        "test": "assert ",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for element in test_list:\n        if type(element)!= list:\n            singly_list.append(element)\n        else:\n            singly_list += extract_singly(element)\n    return singly_list\n",
        "test": "assert     extract_singly([[1,2,3],[4,5]]) == [1,2,3,4,5]",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #  base case: length of the list is 1 or 0 elements\n    if len(nums) <= 1:\n        return nums\n    #  otherwise, the largest element is the last one\n    largest = len(nums) - 1\n    # sort the list in descending order\n    #  we need to swap the number of items before the largest element, so that the last element is the largest element\n    for i in range(len(nums) - 1, 0, -1):\n        if nums[i] < nums[largest]:\n            nums[i], nums[largest] = nums[largest], nums[i]\n            # move all the numbers after the largest element down until the largest one is the first one\n            for j in range(i, 0, -1):\n                if nums[j] > nums[largest]:\n                    nums[j], nums[largest] = nums[largest], nums[j]\n    return nums\n",
        "test": "assert     pancake_sort([3,2,1]) == [[1,2,3],[2,1,3],[3,1,2]]",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(a == b and a == c for a,b,c in zip(list1,list2,list3))\n",
        "test": "assert     count_samepair([1,2,3,4,5,6,7,8,9],[\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"],[\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]) == 1",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i,list):\n            count += 1\n    return count\n",
        "test": "assert     find_lists(()) == 0, \"Test Case 1 Failed\"",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    arr_len = len(arr)\n    max_diff = 0\n    for i in range(1, arr_len):\n        if arr[i] - arr[i - 1] > max_diff:\n            max_diff = arr[i] - arr[i - 1]\n    return max_diff\n",
        "test": "assert ",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = 0\n    for i in range(2, n + 1):\n        if a * i + b * i == n:\n            x = i\n            y = n // i\n            return x, y\n",
        "test": "assert     find_solution(1, 1, 2) == (0, 1)",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # If empty lists, return empty list\n    if len(list1)==0 or len(list2)==0:\n        return list1\n    else:\n        # Remove elements present in list1\n        for element in list2:\n            if element in list1:\n                list1.remove(element)\n        return list1\n",
        "test": "assert     remove_elements([1,2,3,4,5],[3,4]) == [1,2,5]",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = abs(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n + sum_series(n-2))\n",
        "test": "assert ",
        "num_ids": 175,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * (l - 2 * (s - 1)) / 2\n    return area\n",
        "test": "assert     area_polygon(4, 3) == 12",
        "num_ids": 157,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n == sum([math.ceil(n/i) for i in range(1, n//2 + 1)])\n",
        "test": "assert     div_sum(10) == False",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # initialize the count variable \n    count = 0 \n    \n    # Traverse through every character of input string \n    for i in range(0, len(str1)): \n        \n        # Initialize the count of character \n        # in the current alphabet \n        count_alpha = 0\n        \n        # Traverse through each alphabet of the English alphabet \n        for j in range(97, 123): \n            \n            # Check if the character is a letter and \n            # if the current alphabet occurs at the position \n            if (chr(j) == str1[i]) : \n                \n                # Increment the count of letters \n                # in the current alphabet \n                count_alpha += 1\n                \n            # If the current alphabet does not occur at the position \n            # then the count of letters in the current alphabet will be 0 \n            else: \n                \n                # Reset the count of letters in the current alphabet to 0 \n                count_alpha = 0\n                \n            # Check if the count of letters in the current alphabet is \n            # greater than the count of letters in the current count \n            if (count_alpha > count): \n                \n                # Update the count of letters in the current alphabet \n                count = count_alpha \n                \n    # Return the count of letters in the alphabet \n    return count\n    \nif __name__ == '__main__':\n    str1 = 'python'\n    print(count_char_position(str1)) ",
        "test": "assert     count_char_position(\"\") == 0, \"Empty String\"",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(0, len(A)):\n        for j in range(i, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count\n",
        "test": "assert ",
        "num_ids": 141,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #code here\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2\n",
        "test": "assert     next_power_of_2(0) == 1",
        "num_ids": 137,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "test": "assert     frequency([1,1,2,3,3], 1) == 2, 'failed'",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert ",
        "num_ids": 166,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a<0:\n        return 'Please enter a positive number.'\n    else:\n        p = (5*a*a)/(math.sqrt(5))\n        return p\n        \nprint(perimeter_pentagon(3))\n",
        "test": "assert ",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance('Programming') == 1, 'incorrect'",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # it can be also used for checking if the list is sorted or not\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            return False\n    return True\n",
        "test": "assert     check_type([1,2,3]) == True, \"List inside a tuple does not have same data type.\"",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your solution here\n    #if x in arr:\n    #    xcount = arr.count(x)\n    #    if xcount > n//2:\n    #        return True\n    #    else:\n    #        return False\n    if x in arr:\n        xcount = arr.count(x)\n        if xcount > n//2:\n            return True\n        else:\n            return False\n",
        "test": "assert ",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    res = 0\n    while n:\n        res += 1\n        n = n&(n-1)\n    return res\n",
        "test": "assert     count_Set_Bits(1) == 1",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([char for index, char in enumerate(str) if index % 2 == 0])\n",
        "test": "assert     odd_values_string('python') == 'ython'",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if a<=b and a<=c: \n        return a\n    elif b<=a and b<=c: \n        return b\n    else: \n        return c \n    \n",
        "test": "assert     min_of_three(-10, -2, 20) == -10",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #code here\n    s = bin(n).replace('0b','')\n    if s.count('1') <= l and s.count('1') >= r:\n        return True\n    return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(n=1,l=1,r=9) == False, \"Wrong answer.\"",
        "num_ids": 2316,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    def swap(x, y):\n        tmp = x\n        x = y\n        y = tmp\n        return x, y\n",
        "test": "assert     re_arrange_array([1,-2,3,4,-5,-6,-7], 6) == [-5,-6,1,-2,3,4,-7]",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1\n    for x in range(len(new_str)):\n        if new_str[x] =='':\n            new_str = new_str[:x] + char + new_str[x+1:]\n    return new_str\n",
        "test": "assert     replace_blank('', '') == '', 'The returned value must be empty string'",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #if n == 0:\n    #    return []\n    \n    sorted_list = sorted(list1,reverse=True)\n    return sorted_list[:n]\n",
        "test": "assert ",
        "num_ids": 136,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    l=2*3.14*r\n    h=2*3.14*h\n    return l*h\n    \ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    l=2*3.14*r\n    h=2*3.14*h\n    return l*h*0.5\n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*3.14*r**2\n    \ndef volumen_cubo(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l*b*h\n    \ndef volumen_rectangulo(l,b):\n    '''\n    Write a function to find the volume of a rectangulo.\n    '''\n    return l*b\n    \ndef volumen_trapecio(b,h):\n    '''\n    Write a function to find the volume of a trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_triangulo(b,h):\n    '''\n    Write a function to find the volume of a triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_circulo(r):\n    '''\n    Write a function to find the volume of a cicle.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio(b,h):\n    '''\n    Write a function to find the volume of a dentro de un trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_dentro_del_triangulo(b,h):\n    '''\n    Write a function to find the volume of a dentro de un triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_dentro_del_circulo(r):\n    '''\n    Write a function to find the volume of a dentro de un ciclo.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo_con_a(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo_con_a(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio_con_a(b,h):\n    '''\n    Write a function to find the volume of a dentro de un trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_dentro_del_triangulo_con_a(b,h):\n    '''\n    Write a function to find the volume of a dentro de un triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_dentro_del_circulo_con_a(r):\n    '''\n    Write a function to find the volume of a dentro de un ciclo.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo_con_b(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo_con_b(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio_con_b(b,h):\n    '''\n    Write a function to find the volume of a dentro de un trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_dentro_del_triangulo_con_b(b,h):\n    '''\n    Write a function to find the volume of a dentro de un triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_dentro_del_circulo_con_b(r):\n    '''\n    Write a function to find the volume of a dentro de un ciclo.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo_con_c(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo_con_c(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio_con_c(b,h):\n    '''\n    Write a function to find the volume of a dentro de un trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_dentro_del_triangulo_con_c(b,h):\n    '''\n    Write a function to find the volume of a dentro de un triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_dentro_del_circulo_con_c(r):\n    '''\n    Write a function to find the volume of a dentro de un ciclo.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo_con_d(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo_con_d(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio_con_d(b,h):\n    '''\n    Write a function to find the volume of a dentro de un trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_dentro_del_triangulo_con_d(b,h):\n    '''\n    Write a function to find the volume of a dentro de un triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_dentro_del_circulo_con_d(r):\n    '''\n    Write a function to find the volume of a dentro de un ciclo.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo_con_e(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo_con_e(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio_con_e(b,h):\n    '''\n",
        "test": "assert ",
        "num_ids": 111,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l ** 3)\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 81,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert a binary number to a decimal number\n    n = int(bin(n)[2:])\n    return n\n",
        "test": "assert     even_bit_set_number(11) == True, \"Test 2 Failed\"",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # Iterate over the list of tuples and add them to a dictionary if they don't already exist\n    occurrences = {}\n    for tup in test_list:\n        if tup in occurrences:\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n    return occurrences \n",
        "test": "assert     check_occurences([]) == {}",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    noOfSubs = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            sub = str[i:j+1]\n            if len(sub) > 0:\n                noOfSubs += 1\n    return noOfSubs\n",
        "test": "assert     number_of_substrings('') == 0, \"String should be empty.\"",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences = []\n    for i in range(n):\n        if m == 1:\n            break\n        for j in range(n-i):\n            if 2*(j+1) <= m and 2*(j+1) >= m:\n                m -= 2*(j+1)\n                sequences.append(m)\n    sequences.sort()\n    return len(sequences)\n",
        "test": "assert     get_total_number_of_sequences(4,3) ==    21",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.remove(list1[-1])\n    list1.extend(list2)\n    return list1\n    \n    \n    \n",
        "test": "assert     replace_list([1, 2, 3, 4], [5, 6, 7]) == [1, 2, 3, 5, 6, 7]",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert     count_charac(\"abcd\") == 4",
        "num_ids": 2097,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N % 2 == 0): \n        N = N + 1\n        print(\"next_Perfect_Square:\", N) \n        return N \n    else: \n        N = N + 2\n        print(\"next_Perfect_Square:\", N) \n        return N \n    \n    \ndef print_Primes(N): \n    '''\n    Write a python function to print all primes between 0 to N (both included).\n    '''\n    for i in range(2,N):\n        if i * i < N:\n            print(i, end=\" \")\n        else:\n            return\n",
        "test": "assert     next_Perfect_Square(8) == 9, \"8 should be 9\"",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def bitonic_max_sum_recursive(arr, n, l, r):\n        # Base case\n        if l==r:\n            return arr[l]\n        #if n is even then there is no maximum \n        if n%2==0:\n            return 0\n        #find the middle index \n        m = (l+r)//2\n        #get the max sum in left and right subarray\n        left = bitonic_max_sum_recursive(arr, n, l, m)\n        right = bitonic_max_sum_recursive(arr, n, m+1, r)\n        #get the maximum of left and right subarray\n        max_left = left+arr[m]\n        max_right = right+arr[m+1]\n        return max(max_left, max_right)\n    return bitonic_max_sum_recursive(arr, len(arr), 0, len(arr)-1)\n",
        "test": "assert ",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    assert number >= 0\n",
        "test": "assert     babylonian_squareroot(100) == 2.5",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)==0:\n        return 0\n",
        "test": "assert ",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + 1/(n-1)\n",
        "test": "assert harmonic_sum(2) == 1.5, 'Error in test case #2'",
        "num_ids": 110,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert ",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "test": "assert     count_X((1,2,2), 2) == 2",
        "num_ids": 134,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:element]+[element]+list[element:]\n",
        "test": "assert     insert_element([],1) == [1]",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        if numbers[i] == '+' or numbers[i] == '-':\n            numbers[i] = 0\n        if numbers[i] == 'i' or numbers[i] == 'j':\n            numbers[i] = 1\n    values = []\n    for i in range(len(numbers)):\n        if numbers[i] == 0:\n            values.append(numbers[i])\n        if numbers[i] == 1:\n            values.append(numbers[i])\n    numbers = values\n    # print(numbers)\n    max_ = 0\n    n = 0\n    for i in range(len(numbers)):\n        # print(i)\n        if numbers[i] > max_:\n            max_ = numbers[i]\n            n = i\n    values[n] = 0\n    for i in range(len(numbers)):\n        if i!= n:\n            values[i] = -values[i]\n    # print(values)\n    sum_ = 0\n    for i in range(len(values)):\n        sum_ += values[i]\n    # print(sum_)\n    for i in range(len(values)):\n        values[i] = values[i] / abs(sum_)\n    \n    x = 0\n    y = 0\n    angle = 0\n    for i in range(len(values)):\n        if values[i] == 0:\n            continue\n        angle = i * 180 / len(values)\n        x += values[i] * math.cos(math.radians(angle))\n        y += values[i] * math.sin(math.radians(angle))\n    # print(x, y, angle)\n    return x, y, angle\n",
        "test": "assert     convert([0.2+0j, 0.1+0j, 0.1+0j]) == [(0.2, 0.1), (0.1, 0.1), (0.1, 0.1)], \"Wrong output\"",
        "num_ids": 1307,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert     combinations_colors(['apple', 'banana', 'grape', 'apple', 'banana', 'grape'], 2) == [['apple', 'apple'], ['banana', 'banana'], ['grape', 'grape'], ['grape', 'grape'], ['apple', 'banana'], ['apple', 'grape'], ['banana', 'banana'], ['banana', 'grape'], ['grape', 'banana'], ['grape', 'banana']]",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n        else:\n            count = count+1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 217,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = (b,a)\n    return tup\n",
        "test": "assert     swap_numbers(3,4) == (4,3)",
        "num_ids": 144,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1), max(test_tup2)\n",
        "test": "assert     maximize_elements((1,3), (3,2)) == (3, 3)",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n",
        "test": "assert     newman_prime(1) == 3, 'Should be 3'",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Your code here\n    print(test_tup1, test_tup2)\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    #print(test_tup1)\n    #print(test_tup2)\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    #print(tup1)\n    #print(tup2)\n    print(tup1)\n    print(tup2)\n    tup1 = tuple(map(lambda x: int(x), tup1))\n    tup2 = tuple(map(lambda x: int(x), tup2))\n    #print(tup1)\n    #print(tup2)\n    #tup1 = tuple(map(lambda x: int(x) / int(x), tup1))\n    #tup2 = tuple(map(lambda x: int(x) / int(x), tup2))\n    tup1 = tuple(map(lambda x: int(x) // int(x), tup1))\n    tup2 = tuple(map(lambda x: int(x) // int(x), tup2))\n    print(tup1)\n    print(tup2)\n    tup1 = tuple(map(lambda x: int(x) % int(x), tup1))\n    tup2 = tuple(map(lambda x: int(x) % int(x), tup2))\n    print(tup1)\n    print(tup2)\n    tup1 = tuple(map(lambda x: int(x) ** int(x), tup1))\n    tup2 = tuple(map(lambda x: int(x) ** int(x), tup2))\n    print(tup1)\n    print(tup2)\n    print(list(tup1))\n    print(list(tup2))\n    return tup1, tup2\n",
        "test": "assert     division_elements((1, 2, 3), (3, 4, 5)) == (3, 2, 1)",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5]), \"Wrong\"",
        "num_ids": 1950,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_days = 30.0\n    dog_age = h_age * 7\n    dog_age_in_years = dog_age / age_in_days\n    return dog_age_in_years\n",
        "test": "assert     dog_age(80) == 24",
        "num_ids": 158,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    for i in range(len(S)):\n        if i % step == 0:\n            out.append(S[i:i + step])\n    return out\n",
        "test": "assert     list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l_1=l\n    l_2=l\n    l_3=l\n    l_4=l\n    l_5=l\n    l_6=l\n    l_7=l\n    l_8=l\n    l_9=l\n    l_10=l\n    l_11=l\n    l_12=l\n    l_13=l\n    l_14=l\n    l_15=l\n    l_16=l\n    l_17=l\n    l_18=l\n    l_19=l\n    l_20=l\n    l_21=l\n    l_22=l\n    l_23=l\n    l_24=l\n    l_25=l\n    l_26=l\n    l_27=l\n    l_28=l\n    l_29=l\n    l_30=l\n    l_31=l\n    l_32=l\n    l_33=l\n    l_34=l\n    l_35=l\n    l_36=l\n    l_37=l\n    l_38=l\n    l_39=l\n    l_40=l\n    l_41=l\n    l_42=l\n    l_43=l\n    l_44=l\n    l_45=l\n    l_46=l\n    l_47=l\n    l_48=l\n    l_49=l\n    l_50=l\n    l_51=l\n    l_52=l\n    l_53=l\n    l_54=l\n    l_55=l\n    l_56=l\n    l_57=l\n    l_58=l\n    l_59=l\n    l_60=l\n    l_61=l\n    l_62=l\n    l_63=l\n    l_64=l\n    l_65=l\n    l_66=l\n    l_67=l\n    l_68=l\n    l_69=l\n    l_70=l\n    l_71=l\n    l_72=l\n    l_73=l\n    l_74=l\n    l_75=l\n    l_76=l\n    l_77=l\n    l_78=l\n    l_79=l\n    l_80=l\n    l_81=l\n    l_82=l\n    l_83=l\n    l_84=l\n    l_85=l\n    l_86=l\n    l_87=l\n    l_88=l\n    l_89=l\n    l_90=l\n    l_91=l\n    l_92=l\n    l_93=l\n    l_94=l\n    l_95=l\n    l_96=l\n    l_97=l\n    l_98=l\n    l_99=l\n    l_100=l\n    l_101=l\n    l_102=l\n    l_103=l\n    l_104=l\n    l_105=l\n    l_106=l\n    l_107=l\n    l_108=l\n    l_109=l\n    l_110=l\n    l_111=l\n    l_112=l\n    l_113=l\n    l_114=l\n    l_115=l\n    l_116=l\n    l_117=l\n    l_118=l\n    l_119=l\n    l_120=l\n    l_121=l\n    l_122=l\n    l_123=l\n    l_124=l\n    l_125=l\n    l_126=l\n    l_127=l\n    l_128=l\n    l_129=l\n    l_130=l\n    l_131=l\n    l_132=l\n    l_133=l\n    l_134=l\n    l_135=l\n    l_136=l\n    l_137=l\n    l_138=l\n    l_139=l\n    l_140=l\n    l_141=l\n    l_142=l\n    l_143=l\n    l_144=l\n    l_145=l\n    l_146=l\n    l_147=l\n    l_148=l\n    l_149=l\n    l_150=l\n    l_151=l\n    l_152=l\n    l_153=l\n    l_154=l\n    l_155=l\n    l_156=l\n    l_157=l\n    l_158=l\n    l_159=l\n    l_160=l\n    l_161=l\n    l_162=l\n    l_163=l\n    l_164=l\n    l_165=l\n    l_166=l\n    l_167=l\n    l_168=l\n    l_169=l\n    l_170=l\n    l_171=l\n    l_172=l\n    l_173=l\n    l_174=l\n    l_175=l\n    l_176=l\n    l_177=l\n    l_178=l\n    l_179=l\n    l_180=l\n    l_181=l\n    l_182=l\n    l_183=l\n    l_184=l\n    l_185=l\n    l_186=l\n    l_187=l\n    l_188=l\n    l_189=l\n    l_190=l\n    l_191=l\n    l_192=l\n    l_193=l\n    l_194=l\n    l_195=l\n    l_196=l\n    l_197=l\n    l_198=l\n    l_199=l\n    l_200=l\n    l_201=l\n    l_202=l\n    l_203=l\n    l_204=l\n    l_205=l\n    l_206=l\n    l_207=l\n    l_208=l\n    l_209=l\n    l_210=l\n    l_211=l\n    l_212=l\n    l_213=l\n    l_214=l\n    l_215=l\n    l_216=l\n    l_217=l\n    l_218=l\n    l_219=l\n    l_220=l\n    l_221=l\n    l_222=l\n    l_223=l\n    l_224=l\n    l_225=l\n    l_226=l\n    l_227=l\n    l_228=l\n    l_229=l\n    l_230=l\n    l_231=l\n    l_232=l\n    l_233=l\n    l_234=l\n    l_235=l\n    l_236=l\n    l_237=l\n    l_238=l\n    l_239=l\n    l_240=l\n    l_241=l\n    l_242=l\n    l_243=l\n    l_244=l\n    l_245=l\n    l_246=l\n    l_247=l\n    l_248=l\n    l_249=l\n    l_250=l\n    l_251=l\n    l_252=l\n    l_253=l\n    l_254=l\n    l_255=l\n    l_256=l\n    l_257=l\n    l_258=l\n    l_259=l\n    l_260=l\n    l_261=l\n    l_262=l\n    l_263=l\n    l_264=l\n    l_265=l\n    l_266=l\n    l_267=l\n    l_268=l\n    l_269=l\n    l_270=l\n    l_271=l\n    l_272=l\n    l_273=l\n    l_274=l\n    l_275=l\n    l_276=l\n    l_277=l\n    l_278=l\n    l_279=l\n    l_280=l\n    l_281=l\n    l_282=l\n    l_283=l\n    l_284=l\n    l_285=l\n    l_286=l\n    l_287=l\n",
        "test": "assert ",
        "num_ids": 2049,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n    '''\n    Time: O(n)\n    Space: O(1)\n    '''\n",
        "test": "assert ",
        "num_ids": 101,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return i * find_star_num(n - 1) + n\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, int):\n        return k\n    elif isinstance(k, str):\n        return ord(k)\n    else:\n        print(\"Invalid input\")\n        return None\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 131,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_numbers = 0\n    even_index = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even_numbers += arr[i]\n            even_index += 1\n    return sum_even_numbers, even_index\n",
        "test": "assert     sum_even_and_even_index([1,2,3,4,5]) == 0",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    '''\n    Second Approach\n    '''\n    # total = 0\n    # for i in range(1,n+1):\n    #     if i % 2 == 0:\n    #         total += i**5\n    #         print(total)\n    '''\n    First Approach\n    '''\n    total = 0\n    for i in range(n+1):\n        total += (i**5)\n    return total\n    \n    '''\n    Third Approach\n    '''\n    # total = 0\n    # for i in range(1,n+1):\n    #     total += i**5\n    # return total\n",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n",
        "test": "assert     rear_extract([('A', 1), ('B', 2), ('C', 3), ('D', 4)]) == ['C', 'B', 'A']",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(a - b for a,b in zip(test_tup1, test_tup2))\n",
        "test": "assert substract_elements((1,2,3,4),(10,20,30,40,1)) == (-1, -2, -3, -4, -1)",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1:\n        return 0\n    even_list = []\n    for i in range(n+1):\n        if i % 2 == 0:\n            even_list.append(binomial_Coeff(n,i))\n    return sum(even_list)\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return (pi*(r**2)*h)\n",
        "test": "assert volume_cylinder(2,2) == 4, 'Problem 2'",
        "num_ids": 139,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key,value in dict.items():\n        if value>=n:\n            new_dict[key]=value\n    return new_dict\nprint(dict_filter({'hello': 1, 'hi': 2, 'hiya': 1, 'howdy': 1}, 1))\n",
        "test": "assert     dict_filter({'a': 2, 'b': 1, 'c': 1},1) == {'a': 2, 'b': 1, 'c': 1}",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for item in test_tup:\n        if item < test_tup[0]:\n            n += 1\n    return n\n",
        "test": "assert     count_first_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c')) == 8, \"WRONG RESULT\"",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    result = 1\n    for i in range(1, n + 1):\n        result = result * (i * (i + 1)) / (i + 2)\n    return result\n    ",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 149,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    n = len(dlist)\n    for i in range(n):\n        if dlist[i] == item:\n            found = True\n            return found, i\n    return found, -1\n    \ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    The function should run in O(n) time.\n    '''\n    start_index = 0\n    end_index = len(dlist) - 1\n    found = False\n    while start_index <= end_index:\n        mid_index = (start_index + end_index) // 2\n        if dlist[mid_index] == item:\n            found = True\n            return found, mid_index\n        elif dlist[mid_index] > item:\n            end_index = mid_index - 1\n        elif dlist[mid_index] < item:\n            start_index = mid_index + 1\n    return found, -1\n",
        "test": "assert     sequential_search([], 1) == (False, -1)",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return 'List is unique'\n    else:\n        return 'List is not unique'\n",
        "test": "assert     all_unique([1,2,3,4,5])",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n    \n    \n    \n    \n    \ndef sum_list(nums1,nums2):\n    '''\n    Write a function to sum two lists element-wise.\n    '''\n    return [x+y for x,y in zip(nums1,nums2)]\n    \n    \n    \n    \ndef average_list(nums1,nums2):\n    '''\n    Write a function to average two lists element-wise.\n    '''\n    return sum_list(nums1,nums2) / len(nums1)\n    \n    \n    \n    \ndef dot_product(v1,v2):\n    '''\n    Write a function to compute the dot product of two vectors.\n    '''\n    return sum([x*y for x,y in zip(v1,v2)])\n    \n    \n    \n    \ndef cross_product(v1,v2):\n    '''\n    Write a function to compute the cross product of two vectors.\n    '''\n    return [(v1[1]*v2[2]-v1[2]*v2[1]),\n            (v1[2]*v2[0]-v1[0]*v2[2]),\n            (v1[0]*v2[1]-v1[1]*v2[0])]\n    \n    \n    \n    \ndef length_vector(v):\n    '''\n    Write a function to compute the length of a vector.\n    '''\n    return ((v[0]**2 + v[1]**2)**(1/2))\n    \n    \n    \n    \ndef scalar_product(v1,v2):\n    '''\n    Write a function to compute the scalar product of two vectors.\n    '''\n    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2]\n    \n    \n    \n    \ndef projection_vector(v,w):\n    '''\n    Write a function to compute the projection of one vector onto another.\n    '''\n    v2 = v - w\n    v2_norm = length_vector(v2)\n    v2_scalar_product = scalar_product(v,w)\n    \n    if v2_scalar_product == 0:\n        return v\n    \n    else:\n        return (v2_norm*v2)/v2_scalar_product\n    \n    \n    \n    \ndef dot_product_two_vectors(v1,v2):\n    '''\n    Write a function to compute the dot product of two vectors.\n    '''\n    return sum([x*y for x,y in zip(v1,v2)])\n    \n    \n    \n    \ndef projection_vector_to_vector(v,w):\n    '''\n    Write a function to compute the projection of one vector onto another.\n    '''\n    if scalar_product(v,w) == 0:\n        return v\n    \n    return (dot_product_two_vectors(v,w)/scalar_product(v,w)) * w\n    \n    \n    \n    \ndef add_vectors(v,w):\n    '''\n    Write a function to add two vectors.\n    '''\n    return [x + y for x,y in zip(v,w)]\n    \n    \n    \n    \ndef subtract_vectors(v,w):\n    '''\n    Write a function to subtract two vectors.\n    '''\n    return [x-y for x,y in zip(v,w)]\n    \n    \n    \n    \ndef vector_scalar_product(v,k):\n    '''\n    Write a function to compute the scalar product of a vector and a number.\n    '''\n    return sum([x*k for x in v])\n    \n    \n    \n    \ndef vector_subtract_two_vectors(v,w):\n    '''\n    Write a function to subtract two vectors.\n    '''\n    return [x-y for x,y in zip(v,w)]\n    \n    \n    \n    \ndef sum_of_elements(l):\n    '''\n    Write a function to compute the sum of all the elements of a list.\n    '''\n    return sum(l)\n    \n    \n    \n    \ndef add_all_elements_of_list(l):\n    '''\n    Write a function to compute the sum of all the elements of a list.\n    '''\n    return reduce(lambda x,y : x+y, l)\n    \n    \n    \n    \ndef square_all_elements_of_list(l):\n    '''\n    Write a function to compute the square of all the elements of a list.\n    '''\n    return reduce(lambda x,y : x*y, l)\n    \n    \n    \n    \ndef find_element_by_index(l,index):\n    '''\n    Write a function to compute the value of the element at a given index in a list.\n    '''\n    return l[index]\n    \n    \n    \n    \ndef find_element_by_index_or_value(l,index,value):\n    '''\n    Write a function to compute the value of the element at a given index in a list.\n    '''\n    return l[index] if index<len(l) and l[index]==value else None\n    \n    \n    \n    \ndef compute_mean(l):\n    '''\n    Write a function to compute the mean of a list of numbers.\n    '''\n    return sum(l) / len(l)\n    \n    \n    \n    \ndef compute_median(l):\n    '''\n    Write a function to compute the median of a list of numbers.\n    '''\n    l.sort()\n    \n    if len(l) % 2 == 0:\n        mid = (len(l)-1)//2\n        return (l[mid]+l[mid+1])/2\n    else:\n        return l[len(l)//2]\n    \n    \n    \n    \ndef compute_mode(l):\n    '''\n    Write a function to compute the mode of a list of numbers.\n    '''\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n    \n    l_max = []\n    for i in d.keys():\n        if d[i] == max(d.values()):\n            l_max.append(i)\n    \n    if len(l_max) == 1:\n        return l_max[0]\n    else:\n        return l_max\n    \n    \n    \n    \ndef compute_standard_deviation(l):\n    '''\n    Write a function to compute the standard deviation of a list of numbers.\n    '''\n    mean = compute_mean(l)\n    l_standard_deviation = []\n    for i in l:\n        l_standard_deviation.append((i-mean)**2)\n    \n    return math.sqrt(sum(l_standard_deviation) / (len(l)-1))\n    \n    \n    \n    \ndef compute_variance(l):\n    '''\n    Write a function to compute the variance of a list of numbers.\n    '''\n    mean = compute_mean(l)\n    l_variance = []\n    for i in l:\n        l_variance.append((i-mean)**2)\n    \n    return sum(l_variance) / (len(l)-1)\n    \n    \n    \n    \ndef compute_covariance(l1,l2):\n    '''\n    Write a function to compute the covariance of a list of numbers.\n    '''\n    mean1 = compute_mean(l1)\n    mean2 = compute_mean(l2)\n    l_covariance = []\n    for i in range(len(l1)):\n        l_covariance.append((l1[i]-mean1)*(l2[i]-mean2))\n    \n    return sum(l_covariance) / (len(l1)-1)\n    \n    \n    \n    \ndef compute_correlation(l",
        "test": "assert ",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0:\n        return False\n    dict = {}\n    while n > 0:\n        digit = n % 10\n        if digit in dict:\n            dict[digit] = dict[digit] + 1\n        else:\n            dict[digit] = 1\n        n = n // 10\n    for k in dict:\n        if k > dict[k]:\n            return False\n    return True\n",
        "test": "assert validate(234) == False, \"Should be False\"",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "test": "assert check_element([1, 2, 3], 4) == False",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'a*b+'\n    if re.search(pattern, text)!= None:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('aab') == True",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = 0\n    m = 0\n    n = len(a)\n    s = 0\n    while m < n:\n        s += a[m]\n        m += k\n        if s < 0:\n            s = 0\n            l = m\n        if s > m:\n            m = s\n            l = m\n        if s == m:\n            break\n    return a[l: l + k]\n",
        "test": "assert max_sub_array_sum_repeated([3,1,2], 1, 2) == 4",
        "num_ids": 2215,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n**2)+(square_Sum(n-1))\n",
        "test": "assert ",
        "num_ids": 108,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = len(list1[0])\n    for i in list1:\n        if max < len(i):\n            max = len(i)\n    return max\n",
        "test": "assert     max_length([[],[],[]])== 0, \"wrong answer\"",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base cases \n    if n == 1 or n == 0: \n        return 1\n    if k == 1 or k == 0: \n        return 0\n    # base cases for n=2 \n    if n == 2: \n        return 2\n    if k == 2: \n        return 2\n    # solution for n=3 \n    if n == 3: \n        return 4\n    # solution for n=4 \n    if n == 4: \n        return 5\n    # base case for n=5 \n    if n == 5: \n        return 6\n    # solution for n=6 \n    if n == 6: \n        return 7\n    # solution for n=7 \n    if n == 7: \n        return 8\n    # solution for n=8 \n    if n == 8: \n        return 9\n    # solution for n=9 \n    if n == 9: \n        return 10\n    # solution for n=10 \n    if n == 10: \n        return 11\n    # solution for n=11 \n    if n == 11: \n        return 12\n    # solution for n=12 \n    if n == 12: \n        return 13\n    # solution for n=13 \n    if n == 13: \n        return 14\n    # solution for n=14 \n    if n == 14: \n        return 15\n    # solution for n=15 \n    if n == 15: \n        return 16\n    # solution for n=16 \n    if n == 16: \n        return 17\n    # solution for n=17 \n    if n == 17: \n        return 18\n    # solution for n=18 \n    if n == 18: \n        return 19\n    # solution for n=19 \n    if n == 19: \n        return 20\n    # solution for n=20 \n    if n == 20: \n        return 21\n    # solution for n=21 \n    if n == 21: \n        return 22\n    # solution for n=22 \n    if n == 22: \n        return 23\n    # solution for n=23 \n    if n == 23: \n        return 24\n    # solution for n=24 \n    if n == 24: \n        return 25\n    # solution for n=25 \n    if n == 25: \n        return 26\n    # solution for n=26 \n    if n == 26: \n        return 27\n    # solution for n=27 \n    if n == 27: \n        return 28\n    # solution for n=28 \n    if n == 28: \n        return 29\n    # solution for n=29 \n    if n == 29: \n        return 30\n    # solution for n=30 \n    if n == 30: \n        return 31\n    # solution for n=31 \n    if n == 31: \n        return 32\n    # solution for n=32 \n    if n == 32: \n        return 33\n    # solution for n=33 \n    if n == 33: \n        return 34\n    # solution for n=34 \n    if n == 34: \n        return 35\n    # solution for n=35 \n    if n == 35: \n        return 36\n    # solution for n=36 \n    if n == 36: \n        return 37\n    # solution for n=37 \n    if n == 37: \n        return 38\n    # solution for n=38 \n    if n == 38: \n        return 39\n    # solution for n=39 \n    if n == 39: \n        return 40\n    # solution for n=40 \n    if n == 40: \n        return 41\n    # solution for n=41 \n    if n == 41: \n        return 42\n    # solution for n=42 \n    if n == 42: \n        return 43\n    # solution for n=43 \n    if n == 43: \n        return 44\n    # solution for n=44 \n    if n == 44: \n        return 45\n    # solution for n=45 \n    if n == 45: \n        return 46\n    # solution for n=46 \n    if n == 46: \n        return 47\n    # solution for n=47 \n    if n == 47: \n        return 48\n    # solution for n=48 \n    if n == 48: \n        return 49\n    # solution for n=49 \n    if n == 49: \n        return 50\n    # solution for n=50 \n    if n == 50: \n        return 51\n    # solution for n=51 \n    if n == 51: \n        return 52\n    # solution for n=52 \n    if n == 52: \n        return 53\n    # solution for n=53 \n    if n == 53: \n        return 54\n    # solution for n=54 \n    if n == 54: \n        return 55\n    # solution for n=55 \n    if n == 55: \n        return 56\n    # solution for n=56 \n    if n == 56: \n        return 57\n    # solution for n=57 \n    if n == 57: \n        return 58\n    # solution for n=58 \n    if n == 58: \n        return 59\n    # solution for n=59 \n    if n == 59: \n        return 60\n    # solution for n=60 \n    if n == 60: \n        return 61\n    # solution for n=61 \n    if n == 61: \n        return 62\n    # solution for n=62 \n    if n == 62: \n        return 63\n    # solution for n=63 \n    if n == 63: \n        return 64\n    # solution for n=64 \n    if n == 64: \n        return 65\n    # solution for n=65 \n    if n == 65: \n        return 66\n    # solution for n=66 \n    if n == 66: \n        return 67\n    # solution for n=67 \n    if n == 67: \n        return 68\n    # solution for n=68 \n    if n == 68: \n        return 69\n    # solution for n=69 \n    if n == 69: \n        return 70\n    # solution for n=70 \n    if n == 70: \n        return 71\n    # solution for n=71 \n    if n == 71: \n        return 72\n    # solution for n=72 \n    if n == 72: \n        return 73\n    # solution for n=73 \n    if n == 73: \n        return 74\n    # solution for n=74 \n    if n == 74: \n        return 75\n    # solution for n=75 \n    if n == 75: \n        return 76\n    # solution for n=76 \n    if n == 76: \n        return 77\n    # solution for n=77 \n    if n == 77: \n        return 78\n    # solution for n=78 \n    if n == 78: \n        return 79\n    # solution for n=79 \n    if n == 79: \n        return 80\n    # solution for n=80 \n    if n == 80: \n        return 81\n    # solution for n=81 \n    if n == 81: \n        return 82\n    # solution for n=82 \n    if n == 82: \n        return 83\n    # solution for n=83 \n    if n == 83: \n        return 84\n    # solution for n=84 \n    if n == 84: \n        return 85\n    # solution for n=85 \n    if n == 85: \n        return 86\n    # solution for n=86 \n    if n == 86: \n        return 87\n    # solution for n=87 \n    if n == 87: \n        return 88\n    # solution for n=88 \n    if n == 88: \n        return 89\n    # solution for n=89 \n    if n == 89: \n        return 90\n    # solution for n=90 \n    if n == 90: \n        return 91\n    # solution for n=91 \n    if n == 91: \n        return 92\n    # solution for n=92 \n    if n == 92: \n        return 93\n    # solution for n=93 \n    if n == 93: \n        return 94\n    # solutio",
        "test": "assert     count_no_of_ways(1, 2) == 1, \"Error. Expected : 1\"",
        "num_ids": 2305,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert     find(1,2) == 0",
        "num_ids": 81,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)-h\n",
        "test": "assert ",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = 0\n    for elem in listval:\n        if elem > max_value:\n            max_value = elem\n    return max_value\n",
        "test": "assert     max_val([1,2,3,4,5,6,7,8,9,10]) == 10",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert     sum_div(12) == 17",
        "num_ids": 155,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    if len(arr) <= 1:\n        return inv_count\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([10,20,30,40,50,60,70,80]) == 0, \"Incorrect result\"",
        "num_ids": 286,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    new_list = []\n    for item in list1:\n        if type(item) is list:\n            new_list = new_list + flatten_list(item)\n        else:\n            new_list.append(item)\n    return new_list\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for i in stdata:\n        for j in i:\n            d[j] += 1\n    maxx = 0\n    for key,value in d.items():\n        if value > maxx:\n            maxx = value\n    print(maxx)\n    return maxx\n",
        "test": "assert     max_aggregate([]) == 0",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(n):\n            count += count_binary_seq(n-i-1) * (2 ** i)\n        return count\n",
        "test": "assert count_binary_seq(0) == 0, \"There is no such binary sequence.\"",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d.values():\n        depth += 1\n        if isinstance(i,dict):\n            depth = max(dict_depth(i),depth)\n    return depth\n",
        "test": "assert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 3",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    if(index>=n) : return -1\n    for i in range(len(ranges)) :\n        if(index>=ranges[i][0] and index<=ranges[i][1]) :\n            return index-ranges[i][0]\n    for i in range(len(rotations)) :\n        if(index>=rotations[i][0] and index<=rotations[i][1]) :\n            return index-rotations[i][0]+n\n    return -1\n",
        "test": "assert ",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n    return ''\n",
        "test": "assert     start_withp(['Python', 'Programmer', 'Apprentice', 'Java']) == ['Apprentice', 'Java']",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n",
        "test": "assert ",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    list_colon = []\n    for i in range(0,n):\n        if i == (m - 1):\n            list_colon.append(']')\n            break\n        list_colon.append(':')\n    list_colon.append(']')\n    return list_colon\n",
        "test": "assert     colon_tuplex((1,2,3), 3, 3) == (1,2,3), \"Wrong\"",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # pass\n    nums1.sort(reverse = True)\n    nums2.sort(reverse = True)\n    print(nums1, nums2)\n    result = []\n    for i in range(N):\n        num1 = nums1[i]\n        num2 = nums2[i]\n        product = num1 * num2\n        print(product)\n        result.append(product)\n    return result\n",
        "test": "assert ",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef absolute(a):\n    '''\n    Write a python function to get the absolute value of a number.\n    '''\n    return abs(a)\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n",
        "test": "assert     maximum(4,5) == 5, \"Function does not give correct answer\"",
        "num_ids": 148,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip()\n    if len(str1) > 0:\n        return tuple(str1)\n    else:\n        return tuple()\n",
        "test": "assert     string_to_tuple(\"spam\") ==     ('s', 'p', 'a','m')",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return 0 if n & (1 << (n.bit_length() - 1)) else n + 1\n",
        "test": "assert     set_left_most_unset_bit(16) == 1",
        "num_ids": 100,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * math.pow(r,2) * h\n    print(volume)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi * math.pow(r,2) * h\n    print(volume)\n    return volume\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area = (math.pi/3) * math.pow(r,2) * h\n    print(surface_area)\n    return surface_area\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = (math.pi * math.pow(r,2)) * h\n    print(surface_area)\n    return surface_area\ndef radius_of_circle(r):\n    '''\n    Write a function that takes in the radius of a circle and returns its radius.\n    '''\n    radius = r\n    print(radius)\n    return radius\ndef circumference_of_circle(r):\n    '''\n    Write a function that takes in the radius of a circle and returns its circumference.\n    '''\n    circumference = 2 * math.pi * r\n    print(circumference)\n    return circumference\ndef circumference_of_rectangle(l,b):\n    '''\n    Write a function that takes in the length and the breadth of a rectangle and returns its circumference.\n    '''\n    circumference = 2 * (l + b)\n    print(circumference)\n    return circumference\ndef area_of_rectangle(l,b):\n    '''\n    Write a function that takes in the length and the breadth of a rectangle and returns its area.\n    '''\n    area = l * b\n    print(area)\n    return area\ndef area_of_triangle(b,h):\n    '''\n    Write a function that takes in the base and the height of a triangle and returns its area.\n    '''\n    area = (0.5) * math.pow(b,2) * h\n    print(area)\n    return area\ndef area_of_circle(r):\n    '''\n    Write a function that takes in the radius of a circle and returns its area.\n    '''\n    area = math.pi * math.pow(r,2)\n    print(area)\n    return area\ndef area_of_square(side):\n    '''\n    Write a function that takes in the side length of a square and returns its area.\n    '''\n    area = side * side\n    print(area)\n    return area\ndef area_of_parallelogram(a,b):\n    '''\n    Write a function that takes in the length of a parallelogram and returns its area.\n    '''\n    area = (a * b)\n    print(area)\n    return area\ndef area_of_trapezium(a,h,b):\n    '''\n    Write a function that takes in the length of a trapezium and the height of a trapezium and returns its area.\n    '''\n    area = ((a+b)/2) * h\n    print(area)\n    return area\ndef area_of_trapezium_hypotenuse(a,h,b):\n    '''\n    Write a function that takes in the length of a trapezium and the hypotenuse of a trapezium and returns its area.\n    '''\n    area = ((a+b)/2) * math.sqrt(h*h + h)\n    print(area)\n    return area\ndef area_of_rectangular_prism(a,b):\n    '''\n    Write a function that takes in the length of a rectangular prism and returns its area.\n    '''\n    area = (a * b)\n    print(area)\n    return area\ndef area_of_round_prism(r,a):\n    '''\n    Write a function that takes in the radius of a round prism and returns its area.\n    '''\n    area = (math.pi * r * math.pow(a,2))\n    print(area)\n    return area\ndef area_of_triangular_prism(a,b):\n    '''\n    Write a function that takes in the base and height of a triangular prism and returns its area.\n    '''\n    area = (1/2) * a * b\n    print(area)\n    return area\ndef area_of_circular_cylinder(r,h):\n    '''\n    Write a function that takes in the radius of a circular cylinder and the height of a circular cylinder and returns its area.\n    '''\n    area = (math.pi * math.pow(r,2)) * h\n    print(area)\n    return area\ndef area_of_irregular_cylinder(r,h,b):\n    '''\n    Write a function that takes in the radius of a cylinder and the height of a cylinder and the breath of a cylinder and returns its area.\n    '''\n    area = (math.pi * math.pow(r,2)) * (h + b)\n    print(area)\n    return area\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that takes in the radius of a cylinder and the height of a cylinder and returns its volume.\n    '''\n    volume = math.pi * math.pow(r,2) * h\n    print(volume)\n    return volume\ndef volume_of_irregular_cylinder(r,h,b):\n    '''\n    Write a function that takes in the radius of a cylinder and the height of a cylinder and the breath of a cylinder and returns its volume.\n    '''\n    volume = (math.pi * math.pow(r,2)) * (h + b)\n    print(volume)\n    return volume\ndef perimeter_of_cone(r,h):\n    '''\n    Write a function that takes in the radius of a cone and the height of a cone and returns its perimeter.\n    '''\n    perimeter = 2 * (math.pi * r) + 2 * math.pow(r,2) * h\n    print(perimeter)\n    return perimeter\ndef perimeter_of_cylinder(r,h):\n    '''\n    Write a function that takes in the radius of a cylinder and the height of a cylinder and returns its perimeter.\n    '''\n    perimeter = 2 * math.pi * r + 2 * math.pow(r,2)\n    print(perimeter)\n    return perimeter\ndef volume_of_parallelogram(a,b):\n    '''\n    Write a function that takes in the length of a parallelogram and the length of a rectangle and returns the volume of a parallelogram.\n    '''\n    volume = a * b\n    print(volume)\n    return volume\ndef volume_of_trapezium(a,b,h):\n    '''\n    Write a function that takes in the length of a trapezium and the height of a trapezium and returns the volume of a trapezium.\n    '''\n    volume = ((a + b) * h)/2\n    print(volume)\n    return volume\ndef volume_of_trapezium_hypotenuse(a,h,b):\n    '''\n    Write a function that takes in the length of a trapezium and the hypotenuse of a trapezium and returns the volume of a trapezium.\n    '''\n    volume = ((a + b) * h)/2\n    print(volume)\n    return volume\ndef volume_of_rectangular_prism(a,b):\n    '''\n    Write a function that takes in the length of a rectangular prism and returns the volume of a rectangular prism.\n    '''\n    volume = (a * b)\n    print(volume)\n    return volume\ndef volume_of_round_prism(r,a):\n    '''\n    Write a function that takes in the radius of a round prism and returns the volume of a round prism.\n    '''\n    volume = (math.pi * r * r * a)\n    print(volume)\n    return volume\ndef volume_of_triangular_prism(a,b):\n    '''\n    Write a function that takes in the base and height of a triangular prism and returns the volume of a triangular prism.\n    '''\n    volum",
        "test": "assert ",
        "num_ids": 90,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    while n & 1==0:\n        n=n>>1\n    return n\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    total = 0\n    prev = 1\n    curr = 2\n    for i in range(n):\n        total = curr\n        curr = prev + curr\n        prev = total\n    return total\n    \n    \n    \n    # OR\n    '''\n    # CORE SOLUTION:\n    def lucas(n):\n        return lucas(n-1) + lucas(n-2)\n    return lucas(n)\n    '''\n    \n    \n    \n    # TESTS\n    \n    # Test 1: Should return 1\n    assert find_lucas(1) == 1\n    \n    # Test 2: Should return 2\n    assert find_lucas(2) == 2\n    \n    # Test 3: Should return 7\n    assert find_lucas(3) == 7\n    \n    # Test 4: Should return 29\n    assert find_lucas(4) == 29\n    \n    # Test 5: Should return 388\n    assert find_lucas(5) == 388\n    \n    # Test 6: Should return 4181\n    assert find_lucas(6) == 4181\n    \n    # Test 7: Should return 9474\n    assert find_lucas(7) == 9474\n    \n    # Test 8: Should return 28474\n    assert find_lucas(8) == 28474\n    \n    # Test 9: Should return 9474\n    assert find_lucas(9) == 9474\n    \n    # Test 10: Should return 104743\n    assert find_lucas(10) == 104743\n    \n    # Test 11: Should return 9196505509\n    assert find_lucas(11) == 9196505509\n    \n    # Test 12: Should return 5099851217\n    assert find_lucas(12) == 5099851217\n    \n    # Test 13: Should return 77240313960\n    assert find_lucas(13) == 77240313960\n    \n    # Test 14: Should return 760221929387\n    assert find_lucas(14) == 760221929387\n    \n    # Test 15: Should return 968485929375\n    assert find_lucas(15) == 968485929375\n    \n    # Test 16: Should return 7836266238849\n    assert find_lucas(16) == 7836266238849\n    \n    # Test 17: Should return 9983975925137\n    assert find_lucas(17) == 9983975925137\n    \n    # Test 18: Should return 9950736722563\n    assert find_lucas(18) == 9950736722563\n    \n    # Test 19: Should return 74592803570893\n    assert find_lucas(19) == 74592803570893\n    \n    # Test 20: Should return 939850771001339\n    assert find_lucas(20) == 939850771001339\n    \n    # Test 21: Should return 99879185301373\n    assert find_lucas(21) == 99879185301373\n    \n    # Test 22: Should return 982915573443711\n    assert find_lucas(22) == 982915573443711\n    \n    # Test 23: Should return 905352317021936\n    assert find_lucas(23) == 905352317021936\n    \n    # Test 24: Should return 969547552811695\n    assert find_lucas(24) == 969547552811695\n    \n    # Test 25: Should return 995372370294732\n    assert find_lucas(25) == 995372370294732\n    \n    # Test 26: Should return 106785370046274\n    assert find_lucas(26) == 106785370046274\n    \n    # Test 27: Should return 111872450281456\n    assert find_lucas(27) == 111872450281456\n    \n    # Test 28: Should return 985979744862729\n    assert find_lucas(28) == 985979744862729\n    \n    # Test 29: Should return 985506315582438\n    assert find_lucas(29) == 985506315582438\n    \n    # Test 30: Should return 995696313553513\n    assert find_lucas(30) == 995696313553513\n    \n    # Test 31: Should return 989409413156673\n    assert find_lucas(31) == 989409413156673\n    \n    # Test 32: Should return 1037280594491273\n    assert find_lucas(32) == 1037280594491273\n    \n    # Test 33: Should return 985471350806324\n    assert find_lucas(33) == 985471350806324\n    \n    # Test 34: Should return 988151158357932\n    assert find_lucas(34) == 988151158357932\n    \n    # Test 35: Should return 982706279315598\n    assert find_lucas(35) == 982706279315598\n    \n    # Test 36: Should return 989085607647384\n    assert find_lucas(36) == 989085607647384\n    \n    # Test 37: Should return 1002737722486623\n    assert find_lucas(37) == 1002737722486623\n    \n    # Test 38: Should return 987159826843525\n    assert find_lucas(38) == 987159826843525\n    \n    # Test 39: Should return 988277088247611\n    assert find_lucas(39) == 988277088247611\n    \n    # Test 40: Should return 995335259798827\n    assert find_lucas(40) == 995335259798827\n    \n    # Test 41: Should return 995346840173513\n    assert find_lucas(41) == 995346840173513\n    \n    # Test 42: Should return 973773677276732\n    assert find_lucas(42) == 973773677276732\n    \n    # Test 43: Should return 998440199053202\n    assert find_lucas(43) == 998440199053202\n    \n    # Test 44: Should return 990268553947328\n    assert find_lucas(44) == 990268553947328\n    \n    # Test 45: Should return 996670851480923\n    assert find_lucas(45) == 996670851480923\n    \n    # Test 46: Should return 992139841001316\n    assert find_lucas(46) == 992139841001316\n    \n    # Test 47: Should return 997451446720292\n    assert find_lucas(47) == 997451446720292\n    \n    # Test 48: Should return 998354535949963\n    assert find_lucas(48) == 998354535949963\n    \n    # Test 49: Should return 98713928999412\n    assert find_lucas(49) == 98713928999412\n    \n    # Test 50: Should return 98445313553511\n    assert find_lucas(50) == 98445313553511\n    \n    # Test 51: Should return 98713596682863\n    assert find_lucas(51) == 98713596682863\n    \n    # Test 52: Should return 992139841001316\n    assert find_lucas(52) == 992139841001316\n    \n    # Test 53: Should return 988285945808619\n    assert find_lucas(53) == 988285945808619\n    \n    # Test 54: Should return 990885181868926\n    assert find_lucas(54) == 990885181868926\n    \n    # Test 55: Should return 992139841001316\n    assert find_lucas(55) == 992139841001316\n    \n    # Test 56: Should return 985385",
        "test": "assert     find_lucas(1) == 2, \"Wrong answer. Expected 2, got %s\" % (find_lucas(1))",
        "num_ids": 2085,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(string)\n    return list_\n",
        "test": "assert ",
        "num_ids": 83,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in range(len(l1)):\n        dic1 = {l1[i]:l2[i], l3[i]:l4[i]}\n        dic.append(dic1)\n    return dic\n",
        "test": "assert ",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_rec(n):\n        if n == 0:\n            return 0\n        else:\n            return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)\n    \n    return get_max_sum_rec(n)\n",
        "test": "assert     get_max_sum(1) == 1 ",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    print(max_length)\n",
        "test": "assert ",
        "num_ids": 338,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert     check_distinct((1,1,1,1,3,4,5,6,7)) == False, 'not false'",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #using dictionary as hash map\n    #char_dict = {}\n    #for char in str1:\n    #    if char not in char_dict:\n    #        char_dict[char] = 1\n    #    else:\n    #        char_dict[char] += 1\n    #for key in char_dict:\n    #    if char_dict[key] == 1:\n    #        return key\n    #return '#'\n    #using dictionary as hash map\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for key in char_dict:\n        if char_dict[key] == 1:\n            return key\n    return '#'\n",
        "test": "assert     first_non_repeating_character('abc') == 'a'",
        "num_ids": 2348,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\ndef check_pos(string):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    if(string == string[::-1]):\n        return True\n    else:\n        return False\ndef solve_equation(equation):\n    '''\n    Write a function to solve the given equation.\n    '''\n    equation = equation.replace(' ','')\n    split_equation = equation.split('=')\n    n = len(split_equation)\n    if(n==1):\n        return equation.replace('=','+')\n    else:\n        first_equation = split_equation[0]\n        second_equation = split_equation[1]\n        first_equation = first_equation.replace('+','*')\n        second_equation = second_equation.replace('-','*')\n        second_equation = second_equation.replace('*','-')\n        second_equation = second_equation.replace('+','-')\n        second_equation = second_equation.replace('*','+')\n        second_equation = second_equation.replace('/','*')\n        second_equation = second_equation.replace('*','/')\n        second_equation = second_equation.replace('-','/')\n        second_equation = second_equation.replace('/','-')\n        second_equation = second_equation.replace('-','+')\n        second_equation = second_equation.replace('/','*')\n        second_equation = second_equation.replace('*','+')\n        second_equation = second_equation.replace('+','*')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('+','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('*','-')\n        second_equation = second_equation.replace('=','-')\n        second_equation = second_equation.replace('+','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('/','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('+','-')\n        second_equation = second_equation.replace('*','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('*','-')\n        second_equation = second_equation.replace('/','-')\n        second_equation = second_equation.replace('*','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-'",
        "test": "assert     check_char('abc') == True, '\"abc\" does not start and end with a same character'",
        "num_ids": 4041,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    return (a+b+c-min(a,b,c)-max(a,b,c))/2\n    \ndef sum_numbers(a,b,c):\n    '''\n    Write a function to find the sum of three numbers.\n    '''\n    return a+b+c\n",
        "test": "assert median_numbers(5, 10, 15) == 5",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]%10\n    return sum\n",
        "test": "assert     sum_of_digits([]) == 0, \"Empty list.\"",
        "num_ids": 129,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return (a ^ b, c ^ d)\n",
        "test": "assert     bitwise_xor((1,1), (2,2)) == (0,0)",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return len(set(test_list))\n    \n    # without using set\n    return len(test_list)\n    \n    \ndef extract_freq_new(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n    \n",
        "test": "assert     extract_freq([1, 2, 3, 4, 5]) == 5",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append((test_tup1[i] + test_tup2[i],))\n    return new_tup\n",
        "test": "assert     add_nested_tuples((7,8,9),(3,5,6)) == (7,8,9,3,5,6)",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    return b\n",
        "test": "assert     minimum(4,1) == 1, \"correct\"",
        "num_ids": 104,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return 1\n    return 0\n    \n",
        "test": "assert     check_tuplex((1,3),(3,2)) == False",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n",
        "test": "assert     find_Parity(9) == True",
        "num_ids": 121,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # one-liner\n    # return \"\".join(sorted(str(n), reverse=True))\n",
        "test": "assert     rearrange_bigger(12) == 21",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    return heapq.nsmallest(k, pairs, key=lambda x:x[0] + x[1])\n",
        "test": "assert     k_smallest_pairs([1,7,11],[2,4,6], 3) == [[1,2],[1,4],[1,6]]",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    max_numbers = []\n    for i in range(len(list1)):\n        max_numbers.append(max(list1[i]))\n",
        "test": "assert ",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_value = listval[0]\n    for i in listval:\n        if min_value > i:\n            min_value = i\n    return min_value\n",
        "test": "assert min_val([1,2,4,3]) == 1",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = words[0]\n    for i in range(1, len(words)):\n        camel += words[i].title()\n    return camel\n",
        "test": "assert     snake_to_camel('snake_case') =='snakeCase','solution is not correct'",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2!= 0:\n            odd_list.append(i)\n",
        "test": "assert     remove_odd([10, 20, 30, 40, 50, 60, 70, 80, 90]) == [10, 20, 30, 40, 50, 60, 70]",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "test": "assert     extract_nth_element([('p', 1), ('p', 2), ('p', 3), ('q', 4)], 2) == ('p', 2)",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4],[1,2,3,4])",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    i = 0\n    max_product = 0\n    while i < len(arr):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            index = i\n        i += 1\n    return index\n",
        "test": "assert max_Product([5,6,7,3,2,1]) == (120,7)",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = set()\n    for each in Input:\n        Output.add(each[0])\n    return Output\n",
        "test": "assert group_tuples([(1, 2), (1, 2), (2, 3), (1, 2)]) == (1, 2), \"All the tuples have same first element\"",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    n = len(lst)\n    maxi = 0\n    for i in range(n): \n        if (lst[i] > maxi): \n            maxi = lst[i] \n    return maxi \n",
        "test": "assert     Find_Max([1,2,3]) == 3",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    print(sum(list1)*len(list1))\n",
        "test": "assert ",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Logic: \n    # for i in range(n,0,-1): \n    #     cubesum = i*i*i \n    #     print(cubesum)\n    \n    # recursive way:\n    if n<1:\n        print(\"Please enter a positive integer\")\n    else: \n        if n==1:\n            print(n)\n        else:\n            n=n-1\n            cube_Sum(n)\n            n=n+1\n            print(n*n*n)\n",
        "test": "assert     cube_Sum(3) == 27",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n",
        "test": "assert     concatenate_tuple(('a','b','c','d','e')) == 'a.b.c.d.e', 'Test 2 fail'",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        sum=sum+i**3\n        i=i+1\n    average=sum/n\n    return average\n",
        "test": "assert ",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(el[-1] for el in test_tuple)\n",
        "test": "assert     extract_rear(('abcd', 'efgh', 'ijkl','mno', 'pqrs')) == ('efgh', 'ijkl','mno', 'pqrs')",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([sublist for sublist in list1 if x in sublist])\n",
        "test": "assert ",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 163,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    return date[2] + '-' + date[1] + '-' + date[0]\n",
        "test": "assert     change_date_format(\"2020-01-01\") == \"01-01-2020\"",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # range(n)\n    gap = n // 2\n    while gap:\n        # gap = n - i\n        for i in range(gap, n):\n            j = i\n            # i = (i - gap)\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j = j - gap\n        gap = gap // 2\n",
        "test": "assert shell_sort([3, 2, 1]) == [1, 2, 3]",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1[:len(test_tup2)]\n    else:\n        return test_tup2[:len(test_tup1)]\n",
        "test": "assert ",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b - ((b ** 2) - (4 * a * c)) ** (1/2)\n",
        "test": "assert ",
        "num_ids": 210,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # edge case check if empty list or one element list or both\n    if not list1:\n        return False\n    if not list2:\n        return False\n    # if elements in the same list\n    if len(list1) == len(list2) and len(list1) == 1:\n        return True\n    else:\n        for ele in list1:\n            if ele in list2:\n                return True\n    return False\n",
        "test": "assert     common_element([1,2,3,4], [2,3,4,5])",
        "num_ids": 281,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "test": "assert ",
        "num_ids": 128,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert check_greater([1, 2, 3], 5) == False",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_one(\"bb\") == False, \"incorrect string\"",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert     last_Digit(2367) == 7",
        "num_ids": 103,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1 = []\n    for i in list1:\n        l1.append(-1*i)\n    return l1\n",
        "test": "assert neg_nos([]) == [], 'Should return []'",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i in new_str:\n            continue\n        else:\n            new_str += i\n    return new_str\n",
        "test": "assert     remove_odd('a') == 'a'",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for item1, item2 in zip(test_list, test_list[1:]):\n        if item1 == item2:\n            count += 1\n    return count\n",
        "test": "assert     count_bidirectional([(1,2), (2,1)]) == 0",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        L = L[::-1]\n        return int(''.join(map(str, L)))\n",
        "test": "assert ",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    text = text.lower()\n    adverb_list = [\"about\", \"after\", \"against\", \"along\", \"amid\", \"among\", \"around\", \"as\", \"at\", \"before\", \"behind\", \"below\", \"beneath\", \"beside\", \"between\", \"beyond\", \"but\", \"by\", \"down\", \"during\", \"for\", \"from\", \"in\", \"into\", \"near\", \"of\", \"off\", \"on\", \"onto\", \"out\", \"over\", \"past\", \"per\", \"round\", \"roundabout\", \"since\", \"till\", \"to\", \"toward\", \"towards\", \"under\", \"underneath\", \"until\", \"up\", \"upon\", \"versus\", \"via\", \"with\"]\n",
        "test": "assert     find_adverb_position('I am not sure about that.') == 'I'",
        "num_ids": 2691,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*(l**2)\n    return area\n",
        "test": "assert surfacearea_cube(1) == 4, \"Wrong\"",
        "num_ids": 84,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     positive_count([]) == 0",
        "num_ids": 148,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max=-10000\n    for i in range(0, len(list1)):\n        if list1[i]>max:\n            max=list1[i]\n    return max\n",
        "test": "assert     largest_neg([-1,-2,-3,-4,]) == -1",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) <= K:\n        return test_list\n    else:\n        return list(zip(*(tuple(test_list[i:]) for i in range(K))))\n",
        "test": "assert     trim_tuple([(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 3) ==     [(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n",
        "test": "assert     index_multiplication((3, 6, 9, 12, 15, 18), (7, 8, 9, 10, 11, 12)) == (93, 108, 153, 222, 315, 378)",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if not lst:\n        return 0\n    if len(lst) == 1:\n        return len(lst) if lst[0] == tup else 0\n    cnt = 0\n    for i in range(len(lst)-1):\n        if lst[i] == tup:\n            cnt += 1\n    return cnt\n",
        "test": "assert ",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x ** 3, nums)\n    \ndef three_letter_nums(words):\n    '''\n    Write a function to find three letter words in a list of words.\n    '''\n    return map(lambda x: x[:3], words)\n    \ndef almost_positive(x):\n    '''\n    Write a function that returns True if x is within 0.01 of being positive.\n    '''\n    return abs(x) >= 0.01\n    \ndef get_first_three_chars(s):\n    '''\n    Write a function that takes a string and returns the first 3 characters of the string.\n    '''\n    return s[:3]\n    \ndef digit_sum(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of all of its digits.\n    '''\n    return sum(list(map(int, str(n))))\n    \ndef sum_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the digits of that integer.\n    '''\n    return sum(list(map(int, str(n))))\n    \ndef first_three_chars(s):\n    '''\n    Write a function that returns the first three characters of a string.\n    '''\n    return s[:3]\n    \ndef four_letter_words(words):\n    '''\n    Write a function that returns only the words that have four letters in them.\n    '''\n    return filter(lambda x: len(x) == 4, words)\n    \ndef more_than_two_char(s):\n    '''\n    Write a function that takes a string and returns the number of characters that are\n    in a string, including itself.\n    '''\n    return len(s)\n    \ndef all_lowercase(s):\n    '''\n    Write a function that returns True if all of the characters in a string are lowercase.\n    '''\n    return s.islower()\n    \ndef word_count(s):\n    '''\n    Write a function that returns the number of words in a string.\n    '''\n    return len(s.split())\n    \ndef four_letters_word(s):\n    '''\n    Write a function that returns the word that appears in a string only once.\n    '''\n    return (s.count('the') == 1 and s.count('is') == 1 and s.count('and') == 1 and s.count('a') == 1 and s.count('in') == 1)\n    \ndef boolean_and(a, b):\n    '''\n    Write a function that returns True if both a and b are True.\n    '''\n    return a and b\n    \ndef boolean_or(a, b):\n    '''\n    Write a function that returns True if a or b is True.\n    '''\n    return a or b\n    \ndef boolean_not(a):\n    '''\n    Write a function that returns the not of a boolean.\n    '''\n    return not a\n    \ndef boolean_xor(a, b):\n    '''\n    Write a function that returns True if a XOR b is True.\n    '''\n    return a ^ b\n    \ndef list_product(nums):\n    '''\n    Write a function that takes a list of numbers and returns the product of those numbers.\n    '''\n    return reduce(lambda a,b: a * b, nums)\n    \ndef set_product(nums):\n    '''\n    Write a function that takes a list of numbers and returns the product of those numbers.\n    '''\n    return reduce(lambda a,b: a * b, set(nums))\n    \ndef is_sorted(nums):\n    '''\n    Write a function that takes a list of numbers and returns True if it is sorted in\n    ascending order and False otherwise.\n    '''\n    return nums == sorted(nums)\n    \ndef max_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the maximum value in the\n    list.\n    '''\n    return max(nums)\n    \ndef min_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the minimum value in the\n    list.\n    '''\n    return min(nums)\n    \ndef mean_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the mean value of those\n    numbers.\n    '''\n    return sum(nums) / len(nums)\n    \ndef digit_count(n):\n    '''\n    Write a function that takes a positive integer n and returns the count of the\n    digits in n.\n    '''\n    return sum(list(map(int, str(n))))\n    \ndef find_odd(nums):\n    '''\n    Write a function that takes a list of numbers and returns True if there is an odd\n    number of numbers and False if there is an even number of numbers.\n    '''\n    return len(nums) % 2\n    \ndef max_odd_digit(nums):\n    '''\n    Write a function that takes a list of integers and returns the digit that appears\n    the most in the numbers.\n    '''\n    return max(list(map(int, str(nums))))\n    \ndef palindrome(s):\n    '''\n    Write a function that returns True if a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef longest_palindrome(s):\n    '''\n    Write a function that returns the longest possible palindrome.\n    '''\n    return s[::-1] + s[::-1]\n    \ndef all_capitals(s):\n    '''\n    Write a function that returns True if all the letters in a string are capital\n    letters and False otherwise.\n    '''\n    return s.isupper()\n    \ndef all_lowercase(s):\n    '''\n    Write a function that returns True if all the letters in a string are lowercase\n    letters and False otherwise.\n    '''\n    return s.islower()\n    \ndef has_upper_chars(s):\n    '''\n    Write a function that returns True if any of the letters in a string are uppercase\n    letters and False otherwise.\n    '''\n    return s.isupper()\n    \ndef count_evens(nums):\n    '''\n    Write a function that takes a list of integers and returns the count of even numbers\n    in the list.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 0, nums)))\n    \ndef sum_even_digits(n):\n    '''\n    Write a function that takes a number n and returns the sum of all of the even\n    digits in n.\n    '''\n    return sum(list(map(int, str(n))))\n    \ndef sum_odd_digits(n):\n    '''\n    Write a function that takes a number n and returns the sum of all of the odd\n    digits in n.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 1, list(str(n)))))\n    \ndef sum_of_squares(nums):\n    '''\n    Write a function that takes a list of integers and returns the sum of all the\n    square of numbers in the list.\n    '''\n    return sum(list(map(lambda x: x ** 2, nums)))\n    \ndef sum_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the digits\n    in that integer.\n    '''\n    return sum(list(map(int, str(n))))\n    \ndef sum_of_even_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the even\n    digits in the integer.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 0, list(str(n)))))\n    \ndef sum_of_odd_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the odd\n    digits in th",
        "test": "assert ",
        "num_ids": 91,
        "indeed": false
    },
    {
        "number": 448,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def find_evens(n):\n        return n%2==0\n    def cal_perrin(n):\n        return (n+1)//2\n    def cal_sum(n):\n        return find_evens(cal_perrin(n))\n",
        "test": "assert     cal_sum(10) == 1, \"incorrect result\"",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return list(map(lambda x: x[l], str))\n",
        "test": "assert     extract_string('Hello, World!', 3) == 'Hell'",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n",
        "test": "assert     remove_whitespaces('') == \"\"",
        "num_ids": 207,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return (actual_cost - sale_amount)\n    else:\n        return (0)\n",
        "test": "assert     loss_amount(100,10) == 0,    '2nd testcase'",
        "num_ids": 186,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    while n % 2 == 0: \n        print(n, \"is divisible by 2 and hence is even\") \n        n = n / 2\n        i = i + 1\n    print(n, \"is not divisible by 2 and hence is odd\") \n    return i \n",
        "test": "assert     sumofFactors(20) == 0, 'Not correct answer'",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if not re.search('z',text):\n        return False\n    else:\n        return True\n        \n",
        "test": "assert     text_match_wordz('') == False",
        "num_ids": 116,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 1:\n        return False\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 % 4 == 0:\n        return 31\n    else:\n        return 30\n",
        "test": "assert     check_monthnumb_number(2) == True, 'Function failed.'",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "test": "assert     reverse_string_list([\"hello\", \"world\"]) == [\"world\", \"hello\"], \"Should revert each word in a given list of strings\"",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    res = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i]) == len(lst[j]):\n                res.append(lst[i])\n                break\n    \n    return min(res)\n",
        "test": "assert ",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert     rectangle_area(1,2) == 2",
        "num_ids": 128,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase('hello world') == 'hello world', 'test 1 failed'",
        "num_ids": 184,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst2 = []\n    for i in lst:\n        lst2.append(i[0])\n    return lst2\n",
        "test": "assert ",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # start with an empty list\n    combos = []\n    for i in range(len(list1)):\n        first_item = list1[i]\n        # if first_item is an empty list, we are done\n        if first_item == []:\n            combos.append([])\n            break\n        # copy first_item\n        list2 = first_item\n        # if first_item is not an empty list, go deeper\n        for j in range(len(list1)):\n            if j == i:\n                continue\n            list2 = list2 + list1[j]\n        # we have found a possible combination!\n        combos.append(list2)\n    return combos\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Edge case\n    if(len(arr) == 0):\n        return 0\n    \n    # Preprocessing:\n    # - Find max product of left subarray\n    # - Find max product of right subarray\n    # - Find max product of current subarray\n    # - If current subarray contains all zeros, return 0.\n    \n    max_left_product = arr[0]\n    max_right_product = arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if(max_left_product > 0):\n            max_left_product = max(max_left_product, arr[i])\n        else:\n            max_left_product = arr[i]\n            \n        if(max_right_product > 0):\n            max_right_product = max(max_right_product, arr[i])\n        else:\n            max_right_product = arr[i]\n            \n        max_product = max(max_left_product * max_right_product, max_product)\n    \n    return max_product\n    \n    \ndef max_subarray_product_brute_force(arr):\n    '''\n    Brute force approach to find maximum product subarray.\n    '''\n    # Edge case\n    if(len(arr) == 0):\n        return 0\n    \n    # Find max product\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    \n    return max_product\n    \n    ",
        "test": "assert max_subarray_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 30",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(\"True\")\n        return True\n    else:\n        print(\"False\")\n        return False\n",
        "test": "assert     check_value({'a':1, 'b':1, 'c':1}, 3) == True",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '':\n            del dict1[key]\n    return dict1\n",
        "test": "assert     drop_empty({'cat': 2, 'dog':3, 'dog':4, 'fish':5}) == {'cat': 2, 'dog':4, 'fish':5}",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # if the length of the array is 0, it means there is no increasing subsequence\n    if len(arr) == 0:\n        return -1\n    # if the length of the array is 1, it means there is only one element in the array\n    if len(arr) == 1:\n        return arr[0]\n    \n    # to store the maximum product\n    max_product = 0\n    # to store the index of the current maximum product\n    max_product_index = 0\n    # to store the current maximum product\n    current_max = 0\n    # to store the current index of the minimum product\n    min_product_index = 0\n    # to store the current minimum product\n    current_min = 0\n    \n    # iterate through the array\n    for i in range(0, len(arr)):\n        # if the current element is the minimum product, the current product should be the max product\n        if current_min == 0:\n            current_max = arr[i]\n            current_min = arr[i]\n            max_product_index = i\n        else:\n            # otherwise\n            current_max = max(current_max * arr[i], arr[i])\n            if current_max > max_product:\n                # if the maximum product is bigger than the previous maximum product, update the index\n                max_product_index = i\n                # and update the maximum product\n                max_product = current_max\n            \n            current_min = min(current_min * arr[i], arr[i])\n            if current_min < min_product:\n                min_product_index = i\n                # and update the minimum product\n                min_product = current_min\n    \n    return max_product, max_product_index, min_product, min_product_index\n",
        "test": "assert ",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    max_sum = test_tup[0]\n    min_sum = test_tup[0]\n    max_sum_arr = []\n    min_sum_arr = []\n    for i in range(len(test_tup)-1):\n        max_sum = max(max_sum, test_tup[i] + test_tup[i+1])\n        min_sum = min(min_sum, test_tup[i] + test_tup[i+1])\n        max_sum_arr.append(max_sum)\n        min_sum_arr.append(min_sum)\n    print(max_sum_arr)\n    print(min_sum_arr)\n    return max_sum_arr, min_sum_arr\n",
        "test": "assert     add_pairwise((1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod*i)%n\n    return prod\n",
        "test": "assert find_remainder([2,3,4,5], 10) == 0",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n",
        "test": "assert     check_Consecutive([1,2,3,4,5,6]) == True",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for x in test_list1:\n        if x in test_list2:\n            new_list.append(x)\n    return tuple(new_list)\n",
        "test": "assert     tuple_intersection(test_list2, test_list1) == None",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     (replace_char('abcd', 'z', 'Z') == 'abcd' )",
        "num_ids": 144,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = {}\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    for k, v in sorted_dict:\n        new_dict[k] = v\n    return new_dict\n    \nif __name__ == \"__main__\":\n    a = {\"key1\": 10, \"key2\": 2, \"key3\": 30}\n    print(sort_counter(a))",
        "test": "assert     sort_counter({1:3, 2:4, 3:1}) == {3:1, 1:3, 2:4}",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "test": "assert big_sum([-10,-4,0,3]) == 5",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    #Convert string to lowercase using the builtin string method\n    return string.lower()\n",
        "test": "assert     is_lower(\"HELLO\") == \"hello\", \"Type Error\"",
        "num_ids": 185,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.upper().replace(\"i\", \"\")\n",
        "test": "assert     remove_lowercase(\"aBCD\") == \"ABCD\"",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    firstDigit=0\n    while (n>0):\n        firstDigit=n%10\n        n=n//10\n    return firstDigit\n",
        "test": "assert     first_Digit(11) == 1, \"The number is: 11 and first digit should be 1\"",
        "num_ids": 153,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==0:\n            odd.append(i)\n    return odd\nlist=[1,2,3,4,5,6,7,8,9,10]\nprint(Split(list))\n",
        "test": "assert     Split([]) == []",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cube_sum = sum(i**3 for i in range(1,n+1))\n    sum_nums_sum = sum(i for i in range(1,n+1))\n    return sum_nums_sum - sum_cube_sum\n",
        "test": "assert     difference(0) == 0, \"First test case failed\"",
        "num_ids": 202,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if len(A)<2 :\n        return -1\n    n = len(A)\n    dp_arr = [[0]*n for _ in range(n)]\n    #Base cases\n    for i in range(n) :\n        dp_arr[i][i] = 1\n",
        "test": "assert ",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return string\n    else:\n        return string.swapcase()\n",
        "test": "assert     toggle_string('Hello') == 'hELLO'",
        "num_ids": 181,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    if n1 < n2:\n        n1, n2 = n2, n1\n    for i in range(len(str(n1))):\n        s += abs(n1 // 10 ** i - n2 // 10 ** i)\n    return s\n",
        "test": "assert     digit_distance_nums(1,1) == 0",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -float('inf')\n    cur_sum = 0\n    for i in range(size):\n        cur_sum += a[i]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15, \"Wrong answer, expected 15\"",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list = []\n    for num in range(len(test_tup1)):\n        test_list.append(test_tup1[num])\n    for num in range(len(test_tup2)):\n        if test_list.count(test_tup2[num]) == 0:\n            test_list.append(test_tup2[num])\n    return sorted(test_list)\n",
        "test": "assert union_elements((1,2,3), (1,2,3)) == (1,2,3), \"Wrong tuple\"",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    a=0\n    b=0\n    for i in range(len(lst)):\n        if lst[i]%2==0:\n            a=a+1\n        else:\n            b=b+1\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert ",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r\"[\\\"](.*?)[\\\"]\",text)\n",
        "test": "assert     extract_values('\"Hi\" John Smith, would you like to learn more about how to pass in a function?\"') ",
        "num_ids": 234,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\n",
        "test": "assert ",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert     split('z') == ['z']",
        "num_ids": 180,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert n >= 0\n    res = 0\n    while n:\n        res += n % 10\n        n //= 10\n    return res\n",
        "test": "assert     sum_digits(123) == 6",
        "num_ids": 189,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return True if list1 == sorted(list1) else False\n",
        "test": "assert issort_list([1,2,3])",
        "num_ids": 161,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert     empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 120,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(list1):\n        for i in range(len(list1)):\n            list1[i] = sorted(list1[i])\n        return list1\n    return sort_sublist(list1)\n",
        "test": "assert     sort_sublists([['1', '2'], ['1', '2', '3'], ['1', '2', '3', '4', '5'], ['1', '2', '3', '4']]) ==     [[1, '1', '2'], ['1', '2', '3'], [1, '1', '2', '3', '4', '5'], ['1', '2', '3', '4']]",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n",
        "test": "assert     two_unique_nums([1, 2, 3, 4, 5]) ==     [1, 2, 3, 4, 5]",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    result = 1\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    for i in unique_list:\n        result *= i\n    return result\n",
        "test": "assert     unique_product([1,2,3,4,5]) == 120",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    surface_area = 2*pi*r*h\n    return surface_area\n",
        "test": "assert     surfacearea_cylinder(20,10) == 25.0, 'incorrect result (20,10)'",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0,len(B)):\n        for j in range(0,len(B)):\n            if A[i] == B[j]:\n                return True\n    return False\n",
        "test": "assert     is_Sub_Array([1,2,3],[4]) == False, 'incorrect'",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #uncomment the below line to take input from the user\n    #n = int(input(\"enter a number:\")) \n    if n < 0: \n        print(\"factorial of negative numbers is not defined\")\n    else: \n        factorial = 1\n        while (n > 0): \n            factorial = factorial * n\n            n = n - 1\n        print(\"factorial of\", n,\"is\", factorial) \n        return factorial\n    # if __name__ == '__main__': \n    #     last_Digit_Factorial(2) \n    #     last_Digit_Factorial(4) \n    #     last_Digit_Factorial(6) \n    #     last_Digit_Factorial(100) \n",
        "test": "assert ",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #create an empty list\n    list_inter = []\n    #iterate through each list\n    for i in range(len(list1)):\n        #add each item from list1 into list_inter\n        list_inter.append(list1[i])\n        #add each item from list2 into list_inter\n        list_inter.append(list2[i])\n        #add each item from list3 into list_inter\n        list_inter.append(list3[i])\n    #return the flattened list\n    return list_inter\n",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2433,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #test_tup1 = (1,2,4,3,5,6,7,8)\n    #test_tup2 = (1,2,3,4,6,7,8,9,5)\n    #print(test_tup1)\n    #print(test_tup2)\n    #print()\n    #sorted(test_tup1)\n    #print()\n    #print(test_tup1)\n    #print(test_tup2)\n    #print()\n",
        "test": "assert     find_dissimilar((1, 2), (2, 3)) ==     {1, 3}",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if isinstance(i,tuple) or isinstance(i,list):\n            even_ele(i,even_fnc)\n        else:\n            if i%2==0 and even_fnc == True:\n                test_tuple.remove(i)\n            elif i%2!=0 and even_fnc == False:\n                test_tuple.remove(i)\n    return test_tuple\n",
        "test": "assert     even_ele((1, (2, 2), 4), even_fnc) == (2, 2, 4), \"Wrong return value!\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    S = (b*s*0.5)+(b*s)*0.5\n    return S\n",
        "test": "assert     surface_Area(3,8) == 24, \"Wrong Answer. Your answer is incorrect.\"",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({\"a\":1,\"b\":2,\"c\":3}) == False",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    table = [0]*(num+1)\n    table[0] = 1\n    for i in range(1,num+1):\n        for j in range(0,i):\n            table[i] = table[i] + table[j]*(2*i-j-1)/(j+1)\n    return table[num]\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    flag = 0\n    for i in range(len(text)-1):\n        if text[i].endswith('ly') and flag == 0:\n            adverbs.append(i)\n            flag = 1\n    return adverbs\n",
        "test": "assert     find_adverbs(\"My niece is loving you\") == (2, 4)",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #n = 2\n    # Output: {'spoon': 1, 'pen': 1}\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    \n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1],reverse=True)\n    #print(items)\n    heapq.heapify(items)\n    #print(items)\n    \n    result = {}\n    while len(result) < n:\n        result[heapq.heappop(items)[0]] = heapq.heappop(items)[1]\n    return result\n    #Output: {'spoon': 1, 'pen': 1}\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1], reverse=True)[:n]}\n    \ndef expensive_items_w_priority(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1],reverse=True)\n    heapq.heapify(items)\n    #print(items)\n    \n    result = {}\n    while len(result) < n:\n        result[heapq.heappop(items)[0]] = heapq.heappop(items)[1]\n    return result\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1], reverse=True)[:n]}\n    \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1])\n    heapq.heapify(items)\n    #print(items)\n    \n    result = {}\n    while len(result) < n:\n        result[heapq.heappop(items)[0]] = heapq.heappop(items)[1]\n    return result\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1])[:n]}\n    \ndef cheapest_items_w_priority(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1])\n    heapq.heapify(items)\n    #print(items)\n    \n    result = {}\n    while len(result) < n:\n        result[heapq.heappop(items)[0]] = heapq.heappop(items)[1]\n    return result\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1])[:n]}\n    \ndef expensive_items_with_key(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #n = 2\n    # Output: {'spoon': 1, 'pen': 1}\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1],reverse=True)\n    #print(items)\n    \n    result = {}\n    for i in range(n):\n        result[i] = heapq.heappop(items)[0]\n    return result\n    # Output: {0:'spoon', 1: 'pen', 2: 'laptop'}\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1], reverse=True)[:n]}\n    \ndef expensive_items_with_key_w_priority(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #n = 2\n    # Output: {'spoon': 1, 'pen': 1}\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1],reverse=True)\n    #print(items)\n    \n    result = {}\n    for i in range(n):\n        result[i] = heapq.heappop(items)[0]\n    return result\n    # Output: {0:'spoon', 1: 'pen', 2: 'laptop'}\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1], reverse=True)[:n]}\n    \ndef cheapest_items_with_key(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    #items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #n = 2\n    # Output: {'spoon': 1, 'pen': 1}\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1])\n    #print(items)\n    \n    result = {}\n    for i in range(n):\n        result[i] = heapq.heappop(items)[0]\n    return result\n    # Output: {0:'spoon', 1: 'pen', 2: 'laptop'}\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1])[:n]}\n    \ndef cheapest_items_with_key_w_priority(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    #items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #n = 2\n    # Output: {'spoon': 1, 'pen': 1}\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1],reverse=True)\n    #print(items)\n    \n    result = {}\n    for i in range(n):\n        result[i] = heapq.heappop(items)[0]\n    return result\n    # Output: {0:'spoon', 1: 'pen', 2: 'laptop'}\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda ",
        "test": "assert ",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if(n == 0):\n        return []\n    if(len(l) == 1):\n        return [[l[0]], [l[0]]]\n    if(n == len(l)):\n        return [[l[n - 1]], l[:n - 1]]\n    else:\n        return [[l[n - 1]], l[:n - 1]] + split_Arr(l[n:], n)\n",
        "test": "assert ",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3,4,5]) == (1,2,3,4,5), \"Wrong\"",
        "num_ids": 145,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    lst = nums\n    lst = sorted(lst)\n    big_val = lst[-1] - lst[0]\n    return big_val\n",
        "test": "assert     big_diff([1,100,1000]) == 1",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x**2 for x in range(a,b+1) if x**2 == x**2]\n",
        "test": "assert     perfect_squares(5, 1) == False, \"Correctness test failed!\"",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(x)\n    r = cmath.polar(x)[0]\n    return(r*math.cos(theta),r*math.sin(theta))\n",
        "test": "assert ",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[len(newList)-1]\n    newList[0] = last\n    newList[len(newList)-1] = first\n    return newList\n    \n",
        "test": "assert     swap_List([1,2,3,4,5]) == [5,1,2,3,4], \"Second\"",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1 or k==0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k)+binomial_Coeff(n-1,k-1)\nn = 5\nk = 5\nprint(binomial_Coeff(n,k))",
        "test": "assert     binomial_Coeff(0,0) == 1 ",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(ip.find('.')>0):\n        ip=ip.split('.')\n        ip=list(map(lambda x: str(x).lstrip('0'), ip))\n        ip='.'.join(ip)\n    return ip\n",
        "test": "assert     removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = -1\n    odd = -1\n    for num in list1:\n        if num%2 == 0:\n            even = num\n        else:\n            odd = num\n    return even - odd\n",
        "test": "assert     diff_even_odd([]) == 0, 'Empty List'",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1.replace('0','').replace('1','')\n    str2 = str2.replace('0','').replace('1','')\n    if str1 == str2 : return 0\n    n = len(str1)\n    j = 0\n    while j < n and str1[j] == str2[j] : \n        j += 1\n    if j == n : return 0\n    i = n - 1\n    swaps = 0\n    while i >= j : \n        if str1[i] == '0' and str2[i] == '1' : \n            swaps += 1\n            i -= 1\n        if str1[i] == '1' and str2[i] == '0' : \n            swaps += 1\n            i -= 1\n        if str1[i] == '1' and str2[i] == '1' : \n            i -= 1\n        if str1[i] == '0' and str2[i] == '0' : \n            i -= 1\n    return swaps\n",
        "test": "assert ",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    a = len(tuple_list)\n    b = a*4\n    return b\n",
        "test": "assert     tuple_size([('foo', 'bar'), ('baz', 'qux'), ('cat', 'bat')]) == 12, 'Wrong answer!'",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # make the length of the smaller array as len(arr1)\n    arr1 = arr1 + arr2\n    arr1.sort()\n    print(arr1)\n    # if the length of array is less than k\n    # then return the number at the kth position of the larger array\n    if len(arr1) < k:\n        return arr1[k]\n    # if the length of array is greater than k\n    # then return the number at the kth position of the smaller array\n    return arr1[k - 1]\n    \narr1 = [3, 5, 9, 10, 15, 22]\narr2 = [1, 6, 10, 16, 19, 21]\n",
        "test": "assert     find_kth([2,3,4], [1,2], 2) == 2",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    sum = 0\n    for i in number:\n        sum = sum + int(i)**3\n    if number == str(sum):\n        return True\n    else:\n        return False\n    \ndef palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    string = str(string)\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_prime(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number > 1:\n        for i in range(2,number):\n            if (number % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef perfect(number):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    number = int(number)\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum = sum + i\n    if sum == number:\n        return True\n    else:\n        return False\n        \ndef armstrong_num_list(number_list):\n    '''\n    Write a function to check whether a given list contains armstrong numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if armstrong_number(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef palindrome_list(string_list):\n    '''\n    Write a function to check whether a given list contains palindrome strings or not.\n    '''\n    list_no = []\n    for i in string_list:\n        if palindrome(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef prime_list(number_list):\n    '''\n    Write a function to check whether a given list contains prime numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if is_prime(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef perfect_list(number_list):\n    '''\n    Write a function to check whether a given list contains perfect numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if perfect(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef armstrong_num_str(string_num):\n    '''\n    Write a function to check whether a given string contains armstrong numbers or not.\n    '''\n    sum = 0\n    for i in string_num:\n        sum = sum + int(i)**3\n    if str(sum) == string_num:\n        return True\n    else:\n        return False\n        \ndef palindrome_str(string_num):\n    '''\n    Write a function to check whether a given string contains palindrome strings or not.\n    '''\n    if string_num == string_num[::-1]:\n        return True\n    else:\n        return False\n        \ndef prime_str(string_num):\n    '''\n    Write a function to check whether a given string contains prime numbers or not.\n    '''\n    for i in range(1,len(string_num)):\n        if int(string_num[i]) > 1:\n            for j in range(2,int(string_num[i])+1):\n                if (int(string_num[i]) % j) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    \ndef perfect_str(string_num):\n    '''\n    Write a function to check whether a given string contains perfect numbers or not.\n    '''\n    if int(string_num) == sum(list(map(int,list(string_num)))):\n        return True\n    else:\n        return False\n    \ndef armstrong_num(number):\n    '''\n    Write a function to convert a decimal number to its equivalent armstrong number.\n    '''\n    number = str(number)\n    sum = 0\n    for i in number:\n        sum = sum + int(i)**3\n    if number == str(sum):\n        return True\n    else:\n        return False\n        \ndef palindrome(string):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n        \ndef prime(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    number = int(number)\n    if number > 1:\n        for i in range(2,number):\n            if (number % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef perfect(number):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    number = int(number)\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum = sum + i\n    if sum == number:\n        return True\n    else:\n        return False\n        \ndef armstrong_num_list(number_list):\n    '''\n    Write a function to convert a decimal number to its equivalent armstrong number.\n    '''\n    list_no = []\n    for i in number_list:\n        if armstrong_num(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef palindrome_list(string_list):\n    '''\n    Write a function to check whether a given list contains palindrome strings or not.\n    '''\n    list_no = []\n    for i in string_list:\n        if palindrome(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef prime_list(number_list):\n    '''\n    Write a function to check whether a given list contains prime numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if prime(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef perfect_list(number_list):\n    '''\n    Write a function to check whether a given list contains perfect numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if perfect(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef armstrong_num_str(string_num):\n    '''\n    Write a function to convert a decimal number to its equivalent armstrong number.\n    '''\n    string_num = str(string_num)\n    sum = 0\n    for i in string_num:\n        sum = sum + int(i)**3\n    if str(sum) == string_num:\n        return True\n    else:\n        return False\n        \ndef palindrome_str(string_num):\n    '''\n    Write a function to check whether a given string contains palindrome strings or not.\n    '''\n    if string_num == string_num[::-1]:\n        return True\n    else:\n        return False\n        \ndef prime_str(string_num):\n    '''\n    Write a function to check whether a given string contains prime numbers or not.\n    '''\n    for i in range(1,len(string_num)):\n        if int(string_num[i]) > 1:\n            for j in range(2,int(string_num[i])+1):\n                if (int(string_num[i]) % j) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    \ndef perfect_str(string_num):\n    '''\n    Write a function to check whether a given string contains perfect numbers or not.\n    '''\n    string_num = str(string_num)\n    if int(string_num) == sum(list(map(int,list(string_num)))):\n        return True\n",
        "test": "assert     armstrong_number(1534) == False, 'This number is armstrong'",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return (sum(range(1,number+1)), number / (number + 1))\n",
        "test": "assert     sum_average(2) == 2",
        "num_ids": 138,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        print (n, 'is even') \n    else : \n        print (n, 'is odd') \n",
        "test": "assert not is_Even(3)",
        "num_ids": 114,
        "indeed": false
    },
    {
        "number": 602,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1)==0:\n        return -1\n    else:\n        for i in range(len(str1)):\n            if str1[i]==str1[0]:\n                return i\n        else:\n            return -1\n",
        "test": "assert     first_repeated_char('') == -1",
        "num_ids": 2261,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    #Convert n to a list\n    l = list(str(n))\n    \n    #Initialize a lucidity set\n    luc = set()\n    \n    #Convert each digit to a binary number\n    for i in range(len(l)):\n        luc.add(int(l[i]))\n    \n    #Convert the set to a list\n    luc = list(luc)\n    \n    #Sorting the list and casting it to a list\n    luc.sort(reverse=True)\n    \n    return luc\n",
        "test": "assert     get_ludic(1) == [1]",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    str_arr = s.split()\n    for i in range(len(str_arr)):\n        str_arr[i] = str_arr[i][::-1]\n    return''.join(str_arr)\n",
        "test": "assert ",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(1) is False",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_1(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_2(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_3(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_4(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_5(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_6(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_7(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_8(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_9(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_10(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_11(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_12(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_13(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_14(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_15(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_16(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_17(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_18(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_19(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_20(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_21(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_22(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_23(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_24(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_25(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_26(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_27(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_28(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_29(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_30(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_31(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_32(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_33(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_34(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_35(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_36(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_37(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_38(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_39(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_40(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_41(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_42(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_43(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_44(degree):\n    '''\n    Write a function to convert degrees to ra",
        "test": "assert ",
        "num_ids": 68,
        "indeed": false
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_regex = re.compile(pattern)\n    match = pattern_regex.search(text)\n",
        "test": "assert ",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return 0 if n == 0 else 1 + bell_Number(n-1)\n",
        "test": "assert ",
        "num_ids": 106,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n",
        "test": "assert     remove_kth_element([1, 2, 3], 2) == [1, 3], \"Should be [1, 3]\"",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #Return the max of then'th column\n    return max([row[N] for row in test_list])\n",
        "test": "assert     max_of_nth([[3,4,5],[6,7,8],[9,10,11]], 1) == 10",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    n = len(lst)\n    for i in range(1,n):\n        low = 0\n        high = i-1\n        while low < high:\n            if lst[low] > lst[high]:\n                temp = lst[low]\n                lst[low] = lst[high]\n                lst[high] = temp\n            low+=1\n            high-=1\n    return lst\n",
        "test": "assert     merge([[1,2],[2,3]]) == [[1,2],[2,3]] ",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(0,len(test_list)):\n        cummulative_sum += test_list[i]\n    return cummulative_sum\nprint(cummulative_sum((1,2,3,4,5,6,7,8,9,10)))\n",
        "test": "assert     cummulative_sum((1,2,3)) == 1+2+3 == 6, \"incorrect\"",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n    \nprint(average_tuple([(1, 2), (3, 4), (5, 6)]))\n",
        "test": "assert     average_tuple(((1, 2), (3, 4), (5, 6))) == (3, 4.5)",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuple lengths must be the same\"\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert     tuple_modulo((1, 2), (1, 2)) == (0, 0)",
        "num_ids": 236,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps==0 or steps==1: return steps\n    if steps<d: return -1\n    #steps-1 because we are jumping 1 step at a time.\n    return min(min_Jumps(steps-1,d)+1, min_Jumps(steps-2,d))\n",
        "test": "assert ",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) < len(nums2):\n        return [i/j for i,j in zip(nums1,nums2)]\n    else:\n        return [i/j for i,j in zip(nums2,nums1)]\n",
        "test": "assert ",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    print('move_num')\n    while True:\n        if test_str.find('0') > -1:\n            break\n        if test_str.find('1') > -1:\n            break\n        if test_str.find('2') > -1:\n            break\n        if test_str.find('3') > -1:\n            break\n        if test_str.find('4') > -1:\n            break\n        if test_str.find('5') > -1:\n            break\n        if test_str.find('6') > -1:\n            break\n        if test_str.find('7') > -1:\n            break\n        if test_str.find('8') > -1:\n            break\n        if test_str.find('9') > -1:\n            break\n        if test_str.find('a') > -1:\n            break\n        if test_str.find('b') > -1:\n            break\n        if test_str.find('c') > -1:\n            break\n        if test_str.find('d') > -1:\n            break\n        if test_str.find('e') > -1:\n            break\n        if test_str.find('f') > -1:\n            break\n        if test_str.find('g') > -1:\n            break\n        if test_str.find('h') > -1:\n            break\n        if test_str.find('i') > -1:\n            break\n        if test_str.find('j') > -1:\n            break\n        if test_str.find('k') > -1:\n            break\n        if test_str.find('l') > -1:\n            break\n        if test_str.find('m') > -1:\n            break\n        if test_str.find('n') > -1:\n            break\n        if test_str.find('o') > -1:\n            break\n        if test_str.find('p') > -1:\n            break\n        if test_str.find('q') > -1:\n            break\n        if test_str.find('r') > -1:\n            break\n        if test_str.find('s') > -1:\n            break\n        if test_str.find('t') > -1:\n            break\n        if test_str.find('u') > -1:\n            break\n        if test_str.find('v') > -1:\n            break\n        if test_str.find('w') > -1:\n            break\n        if test_str.find('x') > -1:\n            break\n        if test_str.find('y') > -1:\n            break\n        if test_str.find('z') > -1:\n            break\n        test_str = test_str[1:] + test_str[0]\n    return test_str\n",
        "test": "assert     move_num('abc') == 'cba'",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    curr_len = 1\n    best_len = 1\n    index = 1\n    while index < n:\n        if a[index] % a[index - 1] == 0:\n            curr_len += 1\n        else:\n            curr_len = 1\n        if curr_len > best_len:\n            best_len = curr_len\n        index += 1\n    return best_len\n",
        "test": "assert     largest_subset([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 2",
        "num_ids": 2334,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(arr1[i] + arr2[i])\n    arr.sort()\n    return (arr[n//2])\n",
        "test": "assert ",
        "num_ids": 131,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in range(len(nums)):\n        res.append(n**i)\n    return res\n    ",
        "test": "assert     nth_nums([1,2],2) == [1,2]",
        "num_ids": 133,
        "indeed": false
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = ''\n    for character in string:\n        if character == character.upper():\n            new_string += character\n        else:\n            new_string += character.upper()\n    return new_string\n",
        "test": "assert     is_upper('') == ''",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    list1 = newList\n    list1[0], list1[len(newList)-1] = list1[len(newList)-1], list1[0]\n    return list1\n",
        "test": "assert swap_List([1,2,3,4,5,6]) == [6,5,1,2,3,4]",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r * r * math.sqrt(3) / 2\n    return a\n",
        "test": "assert     triangle_area(2) == 2.5, \"incorrect answer\"",
        "num_ids": 2130,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if end<start:\n        return -1\n    if start>end:\n        return -1\n    if array[start]==array[end]:\n        return find_First_Missing(array,start+1,end-1)\n    else:\n        pivot=array[start]\n        low=start+1\n        high=end\n        while low<high:\n            while low<=high and array[low]<pivot:\n                low+=1\n            while low<=high and array[high]>=pivot:\n                high-=1\n            if low<high:\n                array[low],array[high]=array[high],array[low]\n        array[start],array[high]=array[high],array[start]\n        if array[start]==pivot:\n            return find_First_Missing(array,start+1,high-1)\n        else:\n            return find_First_Missing(array,low,end-1)\n",
        "test": "assert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922",
        "num_ids": 2593,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')",
        "test": "assert     replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 127,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    count = 0\n    temp = []\n    for i in list:\n        if (i%2==0):\n            temp.append(i)\n    return temp\n",
        "test": "assert     Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n        return sub\n    for val in ele:\n        if val == ele[0]:\n            sub.append(val)\n        else:\n            break\n    if len(sub)!= 0:\n        return adjac(sub, sub[1:])\n    else:\n        return []\n",
        "test": "assert ",
        "num_ids": 2124,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_','')\n",
        "test": "assert     replace_spaces(\"0_0_0\") == \"000\", \"Should be 0_0_0\"",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0, len(num_list)-1):\n        if num_list[i] == 0:\n            continue\n        for j in range(i, len(num_list)-1):\n            if num_list[j] == 0:\n                num_list.pop(i)\n                num_list.append(0)\n                break\n    return num_list\n",
        "test": "assert     move_zero([1,1,0,3,4,0,4]) == [1,1,3,4,0,4,0], \\",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = arr[i] ^ arr[j]\n            print(f\"{sum}\")\n    return sum\n",
        "test": "assert     pair_xor_Sum([1,4,2,5],4) == 7, \"should be 7\"",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return sorted(iterable)\n",
        "test": "assert ",
        "num_ids": 171,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        print(\"No Profit\")\n    elif actual_cost>sale_amount:\n        print(\"No Loss\")\n    else:\n        print(\"Profit\")\n",
        "test": "assert ",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v * 1.6\n    t_in = t + 459.67\n    t_in = t_in / (273.16 + t_in)\n    v_in = v * 1.6\n    v_in = v_in / (273.16 + v_in)\n    #print(v,t)\n    #print(t_in,v_in)\n    #print((v_in * 1.1)**0.16)\n    return int(v_in * 1.1 ** 0.16 * (t_in ** 0.16))\ndef get_formatted_name(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    formatted_name = first + \" \" + last\n    return formatted_name.title()\ndef get_formatted_name_v2(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.title()} {last.title()}\"\ndef get_formatted_name_v3(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    formatted_name = f\"{first.title()} {last.title()}\"\n    return formatted_name\ndef get_formatted_name_v4(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    formatted_name = \"{} {}\".format(first.title(),last.title())\n    return formatted_name\ndef get_formatted_name_v5(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    formatted_name = f\"{first.title()} {last.title()}\"\n    return formatted_name\ndef get_formatted_name_v6(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first[0].upper()}.{last[0].upper()}\"\ndef get_formatted_name_v7(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first[0].upper()}.{last[0].upper()}\"\ndef get_formatted_name_v8(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first} {last}\"\ndef get_formatted_name_v9(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last}, {first}\"\ndef get_formatted_name_v10(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last}, {first.upper()}\"\ndef get_formatted_name_v11(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.lower()} {last.lower()}\"\ndef get_formatted_name_v12(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.lower()} {last.lower()}\"\ndef get_formatted_name_v13(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last}, {first.lower()}\"\ndef get_formatted_name_v14(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.title()} {last.title()}\"\ndef get_formatted_name_v15(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.title()} {last.title()}\"\ndef get_formatted_name_v16(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.title()}, {first.title()}\"\ndef get_formatted_name_v17(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.title()}, {first.title()}\"\ndef get_formatted_name_v18(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.upper()} {last.upper()}\"\ndef get_formatted_name_v19(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.upper()} {last.upper()}\"\ndef get_formatted_name_v20(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.lower()}, {first.lower()}\"\ndef get_formatted_name_v21(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.lower()}, {first.lower()}\"\ndef get_formatted_name_v22(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.title()}, {first.title()}\"\ndef get_formatted_name_v23(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.lower()} {last.lower()}\"\ndef get_formatted_name_v24(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first[0].upper()}.{last[0].upper()}\"\ndef get_formatted_name_v25(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first[0].upper()}.{last[0].upper()}\"\ndef get_formatted_name_v26(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.capitalize()}, {last.capitalize()}\"\ndef get_formatted_name_v27(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.capitalize()}, {first.capitalize()}\"\ndef get_formatted_name_v28(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":",
        "test": "assert     wind_chill(30, 5) == 14.1, \"wind_chill test 2 failed\"",
        "num_ids": 2279,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if i[0].islower():\n            count += 1\n    return count\n",
        "test": "assert     sample_nam([ 'john','susan', 'james' ]) == 3",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\n",
        "test": "assert     remove_parenthesis('(abcd)(efgh)') ",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return (n*(n+1))//2\n",
        "test": "assert ",
        "num_ids": 92,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    middle = []\n    for i in text:\n        if i!='' and i!= '\\n' and i!= ',':\n            middle.append(i)\n    return \" \".join(middle)\n",
        "test": "assert     text_match_wordz_middle('a z') == True",
        "num_ids": 2192,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input\n",
        "test": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_dict)\n",
        "test": "assert ",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    result = 0\n    dp = [[0 for i in range(cols)] for j in range(rows)]\n",
        "test": "assert ",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = list(students.items())\n    for i,(key,value) in enumerate(students):\n        if h>value[0] and w>value[1]:\n            students.pop(i)\n    return students\n",
        "test": "assert ",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            return True\n    return False\n",
        "test": "assert     count_same_pair([1, 1, 1], [1, 1, 2]) == 1",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base_sum = 0\n    # for i in range(power):\n    #     base_sum = base_sum + base\n    # return base_sum\n    return sum(map(int, str(base**power)))\n",
        "test": "assert ",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    if (text.find('\"') > -1):\n        text_list = text.split('\"')\n        first_part = text_list[0]\n        second_part = text_list[1]\n        return second_part\n    else:\n        return text\n",
        "test": "assert     extract_quotation(\"Hi! This is a test string.\") == \"Hi! This is a test string.\"",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # initialize new tuple\n    new_tup = ()\n    # loop through the elements of the original tuple\n    for i in range(len(test_tup)):\n        # the new tuple should have length 1 less than the original tuple\n        new_tup = new_tup + (test_tup[i] * (i + 1), )\n        \n    return new_tup\n    \n    \n    \n",
        "test": "assert     multiply_elements( (2,2) ) == (4,4)",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #write your code here\n    sum_list=[]\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i]+lst2[i])\n    return sum_list\n",
        "test": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n    \n    # step 1\n    dict1 = {}\n    dict1.setdefault(nums[0],0)\n    for i in range(1,len(nums)):\n        if nums[i]!= nums[i-1]:\n            dict1[nums[i]] = 1\n            if i+1 < len(nums):\n                dict1.setdefault(nums[i+1],0)\n    \n    # step 2\n    return [x for x, _ in groupby(sorted(dict1.keys()))]\n",
        "test": "assert     consecutive_duplicates([1,1,1,1,2,2,2,3,3,3,4,4,4]) ==     [1,2,3,4]",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2*pi*r**2*(1+h/r)\n    return area\n",
        "test": "assert     lateralsurface_cone(2,3) == 12, 'Wrong'",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]',':', text)\n    text = re.sub(r'[ ]',':', text)\n    text = re.sub(r'[ ]',':', text)\n    return text\n",
        "test": "assert     replace_specialchar(' ') == ':', 'TEST FAILED'",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    start = 0\n    end = len(A) - 1\n    mid = 0\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n",
        "test": "assert     find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 15], 3) == 2",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #code here\n    return 0\n",
        "test": "assert ",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n | (1 << (len(bin(n)) - 2)) - 1) & (1 << (len(bin(n)) - 2)) - 1)\n    \ndef set_middle_bits2(n):\n    return n ^ ((1 << (len(bin(n)) - 2)) - 1)\n    \nprint(set_middle_bits(121))\nprint(set_middle_bits2(121)",
        "test": "assert     set_middle_bits(8) == 15",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n",
        "test": "assert     left_insertion([1,2,3,5,6], 2) == 1",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    if re.match(regex,string) is not None:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_str('aeiou')     == True ",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1, \"Should be 1\"",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    for i in range(1,n):\n        \n        if n == 2 and i == 1:\n            return 1\n        if n == 2 and i == 2:\n            return 2\n        if n == 3 and i == 1:\n            return 1\n        if n == 3 and i == 2:\n            return 2\n        if n == 4 and i == 1:\n            return 1\n        if n == 4 and i == 2:\n            return 2\n        if n == 4 and i == 3:\n            return 3\n        if n == 5 and i == 1:\n            return 1\n        if n == 5 and i == 2:\n            return 2\n        if n == 5 and i == 3:\n            return 3\n        if n == 6 and i == 1:\n            return 1\n        if n == 6 and i == 2:\n            return 2\n        if n == 6 and i == 3:\n            return 3\n        if n == 7 and i == 1:\n            return 1\n        if n == 7 and i == 2:\n            return 2\n        if n == 7 and i == 3:\n            return 3\n        if n == 8 and i == 1:\n            return 1\n        if n == 8 and i == 2:\n            return 2\n        if n == 8 and i == 3:\n            return 3\n        if n == 9 and i == 1:\n            return 1\n        if n == 9 and i == 2:\n            return 2\n        if n == 9 and i == 3:\n            return 3\n        if n == 10 and i == 1:\n            return 1\n        if n == 10 and i == 2:\n            return 2\n        if n == 10 and i == 3:\n            return 3\n        if n == 11 and i == 1:\n            return 1\n        if n == 11 and i == 2:\n            return 2\n        if n == 11 and i == 3:\n            return 3\n        if n == 12 and i == 1:\n            return 1\n        if n == 12 and i == 2:\n            return 2\n        if n == 12 and i == 3:\n            return 3\n        if n == 13 and i == 1:\n            return 1\n        if n == 13 and i == 2:\n            return 2\n        if n == 13 and i == 3:\n            return 3\n        if n == 14 and i == 1:\n            return 1\n        if n == 14 and i == 2:\n            return 2\n        if n == 14 and i == 3:\n            return 3\n        if n == 15 and i == 1:\n            return 1\n        if n == 15 and i == 2:\n            return 2\n        if n == 15 and i == 3:\n            return 3\n        if n == 16 and i == 1:\n            return 1\n        if n == 16 and i == 2:\n            return 2\n        if n == 16 and i == 3:\n            return 3\n        if n == 17 and i == 1:\n            return 1\n        if n == 17 and i == 2:\n            return 2\n        if n == 17 and i == 3:\n            return 3\n        if n == 18 and i == 1:\n            return 1\n        if n == 18 and i == 2:\n            return 2\n        if n == 18 and i == 3:\n            return 3\n        if n == 19 and i == 1:\n            return 1\n        if n == 19 and i == 2:\n            return 2\n        if n == 19 and i == 3:\n            return 3\n        if n == 20 and i == 1:\n            return 1\n        if n == 20 and i == 2:\n            return 2\n        if n == 20 and i == 3:\n            return 3\n        if n == 21 and i == 1:\n            return 1\n        if n == 21 and i == 2:\n            return 2\n        if n == 21 and i == 3:\n            return 3\n        if n == 22 and i == 1:\n            return 1\n        if n == 22 and i == 2:\n            return 2\n        if n == 22 and i == 3:\n            return 3\n        if n == 23 and i == 1:\n            return 1\n        if n == 23 and i == 2:\n            return 2\n        if n == 23 and i == 3:\n            return 3\n        if n == 24 and i == 1:\n            return 1\n        if n == 24 and i == 2:\n            return 2\n        if n == 24 and i == 3:\n            return 3\n        if n == 25 and i == 1:\n            return 1\n        if n == 25 and i == 2:\n            return 2\n        if n == 25 and i == 3:\n            return 3\n        if n == 26 and i == 1:\n            return 1\n        if n == 26 and i == 2:\n            return 2\n        if n == 26 and i == 3:\n            return 3\n        if n == 27 and i == 1:\n            return 1\n        if n == 27 and i == 2:\n            return 2\n        if n == 27 and i == 3:\n            return 3\n        if n == 28 and i == 1:\n            return 1\n        if n == 28 and i == 2:\n            return 2\n        if n == 28 and i == 3:\n            return 3\n        if n == 29 and i == 1:\n            return 1\n        if n == 29 and i == 2:\n            return 2\n        if n == 29 and i == 3:\n            return 3\n        if n == 30 and i == 1:\n            return 1\n        if n == 30 and i == 2:\n            return 2\n        if n == 30 and i == 3:\n            return 3\n        if n == 31 and i == 1:\n            return 1\n        if n == 31 and i == 2:\n            return 2\n        if n == 31 and i == 3:\n            return 3\n        if n == 32 and i == 1:\n            return 1\n        if n == 32 and i == 2:\n            return 2\n        if n == 32 and i == 3:\n            return 3\n        if n == 33 and i == 1:\n            return 1\n        if n == 33 and i == 2:\n            return 2\n        if n == 33 and i == 3:\n            return 3\n        if n == 34 and i == 1:\n            return 1\n        if n == 34 and i == 2:\n            return 2\n        if n == 34 and i == 3:\n            return 3\n        if n == 35 and i == 1:\n            return 1\n        if n == 35 and i == 2:\n            return 2\n        if n == 35 and i == 3:\n            return 3\n        if n == 36 and i == 1:\n            return 1\n        if n == 36 and i == 2:\n            return 2\n        if n == 36 and i == 3:\n            return 3\n        if n == 37 and i == 1:\n            return 1\n        if n == 37 and i == 2:\n            return 2\n        if n == 37 and i == 3:\n            return 3\n        if n == 38 and i == 1:\n            return 1\n        if n == 38 and i == 2:\n            return 2\n        if n == 38 and i == 3:\n            return 3\n        if n == 39 and i == 1:\n            return 1\n        if n == 39 and i == 2:\n            return 2\n        if n == 39 and i == 3:\n            return 3\n        if n == 40 and i == 1:\n            return 1\n        if n == 40 and i == 2:\n            return 2\n        if n == 40 and i == 3:\n            return 3\n        if n == 41 and i == 1:\n            return 1\n        if n == 41 and i == 2:\n            return 2\n        if n == 41 and i == 3:\n            return 3\n        if n == 42 and i == 1:\n            return 1\n        if n == 42 and i == 2:\n            return 2\n        if n == 42 and i == 3:\n            return 3\n        if n == 43 and i == 1:\n            return 1\n        if n == 43 and i == 2:\n            return 2\n        if n == 43 and i == 3:\n            return 3\n        if n == 44 and i == 1:\n            return 1\n        if n == 44 and i == 2:\n            return 2\n        if n == 44 and i == 3:\n            return 3\n        if n == 45 and i == 1:\n            return 1\n        i",
        "test": "assert     find_Index(3)==[2,4]",
        "num_ids": 2218,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #tuple_to_dict(test_tup)\n    if not test_tup:\n        return None\n    \n    ret = {}\n    ret[test_tup[0]] = test_tup[1]\n    for i in range(2, len(test_tup)):\n        ret[test_tup[i-1]] = test_tup[i]\n",
        "test": "assert     tuple_to_dict((1, (2, 3, 4, (5, 6, 7)))) == {1:2, 2:3, 3:4, 4:5, 5:6, 6:7}",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    import re\n    if re.search('[^0-9]', s) :\n        return False\n    elif len(s) < 2 :\n        return True\n    else :\n        return True if s[0] == s[1] else False\n",
        "test": "assert     all_Characters_Same('abcabc') == False, 'Should be False'",
        "num_ids": 240,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area_tetrahedron = (1/2)*side*side*side\n    return area_tetrahedron\n",
        "test": "assert     area_tetrahedron(2) == 1/2",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # initialize variable\n    l = list\n    i = 0\n",
        "test": "assert ",
        "num_ids": 140,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    no_none = True\n    for e in test_tup:\n        if e == None:\n            no_none = False\n            break\n    return no_none\n",
        "test": "assert     check_none((\"y\",\"w\",\"\")), \"Please check your code\"",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    a = []\n    for i in range(startnum, endnum):\n        if is_divisible(i):\n            a.append(i)\n    return a\n",
        "test": "assert ",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=360:\n        return None\n    return (r**2)*math.sin(a/2)\nprint(\"Tests for sector_area function:\")\nassert sector_area(1,0) == 1\nassert sector_area(1,45) == 1\nassert sector_area(1,90) == 1\nassert sector_area(1,180) == 1\nassert sector_area(1,360) == 1\nassert sector_area(1,360+45) == 1\nassert sector_area(1,360+90) == 1\nassert sector_area(1,360+180) == 1\nassert sector_area(1,360+360) == 1\nassert sector_area(1,360+360+45) == 1\nassert sector_area(1,360+360+90) == 1\nassert sector_area(1,360+360+180) == 1\nassert sector_area(1,360+360+360) == 1\nassert sector_area(1,360+360+360+45) == 1\nassert sector_area(1,360+360+360+90) == 1\nassert sector_area(1,360+360+360+180) == 1\nassert sector_area(1,360+360+360+360) == 1\nassert sector_area(1,360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360) == 1\nassert sector_area(1,360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360) == 1\nassert sector_area(1,360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360) == 1\nassert sector_area(1,360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert secto",
        "test": "assert ",
        "num_ids": 2156,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    len_X, len_Y, len_Z = len(X), len(Y), len(Z)\n    dp = [[[0 for _ in range(len_Z + 1)] for _ in range(len_Y + 1)] for _ in range(len_X + 1)]\n    \n    for i in range(1, len_X + 1):\n        for j in range(1, len_Y + 1):\n            for k in range(1, len_Z + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1]\n                else:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k], dp[i][j - 1][k])\n    \n    lcs = \"\"\n    for i in range(len_X, -1, -1):\n        for j in range(len_Y, -1, -1):\n            for k in range(len_Z, -1, -1):\n                if dp[i][j][k] > 0:\n                    lcs = X[i - 1] + lcs\n    return lcs\n",
        "test": "assert ",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word = re.split(r\"\\s+\", str1)\n    result = \" \".join(word)\n    print(result)\n    return result\n",
        "test": "assert capital_words_spaces('') == ''",
        "num_ids": 275,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    \n    # parsing numbers\n    pattern = re.compile(r'(\\d+)')\n    parsed_nums = [m.group() for m in pattern.finditer(nums_str)]\n    \n    # sorting\n    for i in range(len(parsed_nums)-1):\n        for j in range(len(parsed_nums)-i-1):\n            if int(parsed_nums[j]) > int(parsed_nums[j+1]):\n                parsed_nums[j], parsed_nums[j+1] = parsed_nums[j+1], parsed_nums[j]\n    return parsed_nums\n",
        "test": "assert ",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return False\n    left = 2*i + 1\n    right = 2*i + 2\n    if left > len(arr) - 1 or right > len(arr) - 1:\n        return False\n    while left <= len(arr) - 1:\n        if arr[left] < arr[i]:\n            return False\n        left = left + 1\n    while right <= len(arr) - 1:\n        if arr[right] < arr[i]:\n            return False\n        right = right + 1\n    return True\n",
        "test": "assert     check_min_heap_helper([1, 2, 4, 8, 6, 5, 3], 5) == False, \"The array is min heap\"",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_l = 1\n    jacobsthal_l2 = 1\n    while jacobsthal_l < n:\n        jacobsthal_l2 = jacobsthal_l * (3 * jacobsthal_l - 1) // 2\n        jacobsthal_l = jacobsthal_l2\n    return jacobsthal_l2\n",
        "test": "assert     jacobsthal_num(0) == 1",
        "num_ids": 232,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) <= K:\n        return test_list\n",
        "test": "assert ",
        "num_ids": 2038,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result_list = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            result_list.append(l1[index])\n    return result_list\n",
        "test": "assert     extract_index_list([1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 5]) == []",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest\n",
        "test": "assert     second_smallest([1, 2, 4, 5, 6]) == 2",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(a){1,}b\")\n    result = pattern.search(text)\n    if result is None:\n        return 0\n    else:\n        return 1\n",
        "test": "assert     text_match_zero_one('aab')     ==    True, 'one b'",
        "num_ids": 229,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # add your code here\n    test_list.sort(reverse=True)\n    i = 0\n    while i < len(test_list):\n        if i == len(test_list) - 1:\n            break\n        if test_list[i]!= test_list[i + 1]:\n            i = i + 2\n        else:\n            del test_list[i]\n            i = i - 1\n    return len(test_list)\n",
        "test": "assert     count_reverse_pairs([\"a\", \"b\", \"a\", \"c\", \"d\"]) == 1",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if len(list1) == 0:\n        return {}\n",
        "test": "assert     unique_sublists([1,1,2,2,3,3,4,4,5,5,6,6]) == {(1,2),(2,3),(3,4),(4,5),(5,6)}, \"Wrong Answer\"",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') == 1 and num.count('e') == 0:\n        digits = num.split('.')\n        for x in digits:\n            if x.isdigit():\n                return True\n        return False\n    elif num.count('.') == 1 and num.count('e') == 1:\n        digits = num.split('.')\n        for x in digits:\n            if x.isdigit():\n                return True\n        return False\n    else:\n        return False\n",
        "test": "assert     is_decimal('123.34') == True",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_arr = set(arr)\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element([1,2,3,4,4,3,2,1,2]) == False",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 3:\n        return True\n    elif monthnum3 >= 4 and monthnum3 <= 6:\n        return True\n    elif monthnum3 >= 7 and monthnum3 <= 9:\n        return True\n    elif monthnum3 >= 10 and monthnum3 <= 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(1) == True, \"January should contain 30 days\"",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float(\"inf\")\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n    return min_diff\n",
        "test": "assert     find_min_diff([-10,4,1,2,3],3) == -1, \"Wrong\"",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l = list(str)\n    count = 0\n    for i in l:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"\") == 0",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = n\n    for i in range(1,21):\n        if k==1:\n            return k\n        elif k%2==0:\n            k = k/2\n        else:\n            k = 3*k + 1\n    return k\n    \ndef nth_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = n\n    for i in range(1,21):\n        if k==1:\n            return k\n        elif k%2==0:\n            k = k/2\n        else:\n            k = 3*k + 1\n    return k\n",
        "test": "assert is_polite(1) == 1 ",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 1:\n        return []\n    pairs = []\n    for i in range(0, len(l1) - 1):\n        pairs.append([l1[i], l1[i + 1]])\n    return pairs\n",
        "test": "assert pair_wise([\"a\", \"b\", \"c\"]) == [['a', 'b'], ['b', 'c'], ['c', 'a']]",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]+arr[j] == sum):\n                cnt += 1\n    return cnt\n",
        "test": "assert     get_pairs_count([1,2,3,4], 5) == 2, \"Error, get_pairs_count([1,2,3,4], 5) should return 2, it doesn't\"",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = []\n    li1.sort()\n    li2.sort()\n    li_diff = list(set(li1) - set(li2))\n    return li_diff\n",
        "test": "assert ",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum += i**4\n    return sum\n",
        "test": "assert     odd_num_sum(2) == 4, \"Unexpected result for test case 2\"",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack=[]\n    for ch in exp:\n        if ch==\"(\":\n            stack.append(ch)\n        elif ch==\")\":\n            if len(stack)==0:\n                return False\n            else:\n                stack.pop()\n    return len(stack)==0\n",
        "test": "assert     check_expression('') == True, 'Please check your code'",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Solution 1\n    result = \"\"\n    for s in test_str.split(\" \"):\n        if len(s)!= K:\n            result += s + \" \"\n    return result.strip()\n",
        "test": "assert     remove_length('I am a student', 0) == 'I am a student'",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = []\n    for i in range(len(text)-len(pattern)+1):\n        if re.search(pattern,text[i:len(pattern)+i]):\n            result.append(text[i:len(pattern)+i])\n    return result\n",
        "test": "assert     occurance_substring(\"Totemof\", \"mof\") == (0,2), \"Invalid occurrence result\"",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if nums[i]%2!=0:\n                return True\n    return False\n",
        "test": "assert     odd_position([0, 1, 2, 3, 4, 5, 6]) == True, 'Wrong Output'",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"AEIOU\"\n    vowels_dic = {}\n    count = 0\n    for i in vowels:\n        vowels_dic[i] = 0\n    for j in test_str:\n        if j in vowels_dic:\n            vowels_dic[j] += 1\n    for key in vowels_dic:\n        count += vowels_dic[key]\n    return count\n",
        "test": "assert     count_vowels(\"\") == 0, \"Empty string\"",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    res = 0\n    \n    for i in arr:\n        if arr.count(i) == 1:\n            res += i\n            \n    return res\n",
        "test": "assert ",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key,group in groupby(list1):\n        result.append([k for k in group])\n    return result\n",
        "test": "assert pack_consecutive_duplicates([\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"]) == [['a', 'a', 'a'], ['b', 'b', 'b']]",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    for num in list1:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    return count\n",
        "test": "assert     unique_sublists([1,1,1,1,1]) == {1:5}",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = set()\n    for n in test_list:\n        for i in combinations(n,2):\n            sum = 0\n            for j in i:\n                sum += j\n            result.add(sum)\n    return result\n",
        "test": "assert ",
        "num_ids": 255,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return False\n    else:\n        div = int(math.sqrt(n)) + 1\n        for i in range(2, div):\n            if n % i == 0:\n                return False\n    return True\n",
        "test": "assert ",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n",
        "test": "assert     odd_length_sum([1, 2, 3, 4, 5]) == 10",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == g and g == b:\n        return (0, 0, 255)\n    if not (r > g and r > b):\n        if not (g > b):\n            return (0, 255, r)\n        return (360 * (1.0 - g / b), 255, r)\n    if not (r > g and r > b):\n        if not (b > g):\n            return (360 * (1.0 - r / b), 255, g)\n        return (360 * (1.0 - b / g), 255, g)\n    if not (g > r and g > b):\n        if not (b > r):\n            return (360 * (1.0 - g / b), 0, 255)\n        return (360 * (1.0 - b / r), 0, 255)\n    if not (g > r and g > b):\n        if not (r > b):\n            return (360 * (1.0 - r / b), 0, b)\n        return (360 * (1.0 - r / g), 0, b)\n    if not (b > r and b > g):\n        if not (r > g):\n            return (360 * (1.0 - b / g), 0, 0)\n        return (360 * (1.0 - r / g), 0, 0)\n    if not (r > g and r > b):\n        if not (g > b):\n            return (360 * (1.0 - r / b), 255, 0)\n        return (360 * (1.0 - g / b), 255, 0)\n    if not (r > g and r > b):\n        if not (b > g):\n            return (360 * (1.0 - r / b), 255, 255)\n        return (360 * (1.0 - b / g), 255, 255)\n    if not (g > r and g > b):\n        if not (b > r):\n            return (360 * (1.0 - g / b), 255, 0)\n        return (360 * (1.0 - b / g), 255, 0)\n    if not (g > r and g > b):\n        if not (r > b):\n            return (360 * (1.0 - g / b), 0, 255)\n        return (360 * (1.0 - r / b), 0, 255)\n    if not (g > r and g > b):\n        if not (b > r):\n            return (360 * (1.0 - g / b), 0, 255)\n        return (360 * (1.0 - b / g), 0, 255)\n    if not (b > r and b > g):\n        if not (r > g):\n            return (360 * (1.0 - b / g), 0, 255)\n        return (360 * (1.0 - r / g), 0, 255)\n    if not (b > r and b > g):\n        if not (r > g):\n            return (360 * (1.0 - r / g), 0, 255)\n        return (360 * (1.0 - b / g), 0, 255)\n    if not (r > g and r > b):\n        return (0, 0, 0)\n",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0, 0, 255), \"rgb_to_hsv failed\"",
        "num_ids": 1484,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = []\n    for num in list1:\n        if num%2 == 0:\n            result.append(num*list1.count(num))\n        elif num%2!= 0:\n            result.append(num*list1.count(num))\n    return result\n",
        "test": "assert ",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #return test_str.split(',')\n    return tuple(map(int, test_str.split(',')))\n",
        "test": "assert tuple_str_int('(1, 2)') == (1, 2)",
        "num_ids": 225,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect(a, x)\n    return l if l < len(a) and a[l] == x else l - 1\n",
        "test": "assert ",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a=re.search(r'\\bab\\b',text)\n    if a is not None:\n        return True\n    else:\n        return False\n    # Write your function here\n",
        "test": "assert     text_match_three(\"abc\") == False, \"Wrong Answer\"",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str) + tuple(test_list)\n",
        "test": "assert     new_tuple([1, 2, 3], \"a\") == ('a', 1, 2, 3), \"Not correct.\"",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    n = nums\n    for i in range(len(n)):\n        if i % 2 == 0 and n[i] % 2 == 0:\n            return True\n    return False\n",
        "test": "assert even_position([2,3,4,5,6]) == True",
        "num_ids": 158,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #remove tuples\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        for j in range(i+1,len(temp)):\n            if temp[i] == temp[j]:\n                temp.pop(i)\n                temp.pop(j-1)\n    return tuple(temp)\n",
        "test": "assert     remove_nested((1,2,3)) == (1,2,3), \"Should be (1,2,3)\"",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) is list:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[len(arr)-1]==x:\n        return len(arr)-1\n    return(last(arr[:-1],x))\n    \nprint(last([1,2,3,4,5],2))\n",
        "test": "assert     last([2,3,5,7,9], 9) == 4",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"ab*\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_starta_endb(\"abab\") == True",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n",
        "test": "assert return_sum({'a': 1, 'b':2}) == 3",
        "num_ids": 139,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 1:\n        return 0\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2 == 1:\n            sum += l\n        l += 1\n    return sum\n",
        "test": "assert     sum_odd(1) == 0, \"Wrong answer\"",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        sum += arr[i]\n    return sum\n",
        "test": "assert     _sum([1,2,3,4,5]) == 15, 'Test case 1: Failed'",
        "num_ids": 190,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> 32 - d)) & 0xFFFFFFFF\n    \ndef main():\n    number = int(sys.argv[1])\n    d = int(sys.argv[2])\n    n = (number << d) | (number >> 32 - d)\n    print(bin(n))\n    print(n)\n    print(left_rotate(n,d))\n    \nmain()",
        "test": "assert ",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)\n",
        "test": "assert remove_all_spaces(\" \") == \"\", \"Should return an empty string.\"",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x == y) and (x == z):\n        print(f\"{x} is equal to {y} and {z}\")\n    elif (x == y) or (x == z):\n        print(f\"{x} is equal to {y} or {z}\")\n    else:\n        print(f\"{x}, {y}, {z} are not equal\")\n",
        "test": "assert     three_equal(1,2,1) == 3, \"Error, you have some mistake in the code\"",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count = 0\n    # count_even = 0\n    # count_odd = 0\n    # for i in range(len(arr)):\n    #     if i == 0:\n    #         count += 1\n    #         continue\n    #     if arr[i] >= arr[i-1]:\n    #         count += 1\n    #         continue\n    #     else:\n    #         count_odd += 1\n    #         if count_odd % 2!= 0:\n    #             count_even += 1\n    #         count += 1\n    # print(count, count_even)\n    # return\n    count = 0\n    count_even = 0\n    count_odd = 0\n    for i in range(len(arr)):\n        if i == 0:\n            count += 1\n            continue\n        if arr[i] >= arr[i-1]:\n            count += 1\n            continue\n        else:\n            count_odd += 1\n            if count_odd % 2!= 0:\n                count_even += 1\n            count += 1\n    print(count, count_even)\n    return\n",
        "test": "assert ",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    \n    i = 1\n    while i * i <= n :\n        if i * i == n :\n            return True\n        i += 1\n    return False\n",
        "test": "assert     is_perfect_square(2) == False",
        "num_ids": 200,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % 2 == 0\n",
        "test": "assert     is_product_even([1,2,3,4,5]) == True, \"Should be True\"",
        "num_ids": 114,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n",
        "test": "assert     max_sum_list([]) == None, 'Wrong result!'",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].isupper() and test_str[i+1].isupper():\n            continue\n        else:\n            return i\n    return len(test_str)\n",
        "test": "assert     max_run_uppercase('SOmething') == 0",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1, \"Expected 1\"",
        "num_ids": 178,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    return False\n    \ndef find_K(test_tup, K):\n    '''\n    Write a function to find the K or not in the given tuple.\n    '''\n    if K in test_tup:\n        return test_tup.index(K)\n    return -1\n        \n        \n        ",
        "test": "assert     check_K([(1,2,3),(5,8),(9,7,4)], 5) == False, \"Should be False\"",
        "num_ids": 190,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Your Code Here\n    if (test_tup1[0] <= test_tup2[0] and test_tup1[1] <= test_tup2[1]):\n        return True\n    else:\n        return False\n",
        "test": "assert     check_smaller((3,4,5),(2,1,0)) == False",
        "num_ids": 234,
        "indeed": false
    }
]