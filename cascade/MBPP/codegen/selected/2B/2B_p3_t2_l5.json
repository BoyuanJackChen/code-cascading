[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for elem1 in test_tup1:\n        if elem1 in test_tup2:\n            shared_elems.append(elem1)\n",
        "test": "assert     similar_elements([1,2,3,4], [4,5,6]) == False",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(2) == True, \"Should be True\"",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #create a list of heapq with decreasing order of numbers\n    l = []\n    for i in range(n):\n        hq.heappush(l,-nums[i])\n    return -l[0]\n",
        "test": "assert     heap_queue_largest([1,2,3,4,5,6,7,8,9,10],5) == (10,9,8,7,6), \"Wrong heap_queue_largest.\"",
        "num_ids": 266,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n",
        "test": "assert     is_Power_Of_Two(2) == True, 'is_Power_Of_Two(2) is incorrect'",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    lst = re.findall('[a-zA-Z]+', text)\n    lst = list(filter(lambda x: len(x)>3, lst))\n    return lst\n",
        "test": "assert     find_char_long('hi this is an example') ==     [",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for i in nums:\n        res.append(i**2)\n    return res\n",
        "test": "assert     square_nums([]) == []",
        "num_ids": 191,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #print str\n    s_len = len(str)\n    #print s_len\n    s = str\n    #print s\n    d = dict()\n    #print d\n    d[s[0]] = 0\n    #print d\n    for i in range(1, s_len):\n        #print i\n        if(s[i] in d):\n            #print s[i]\n            d[s[i]] = d[s[i]] + 1\n        else:\n            d[s[i]] = 1\n        #print d\n    print d\n    return d\n    \nif __name__ == '__main__': \n    str = raw_input()\n    min_rot = find_Rotations(str)\n    #print min_rot\n    l = min_rot.keys()\n    #print l\n    l = sorted(l)\n    #print l\n    n = l[0]\n    #print n\n    n = int(n)\n    #print n\n    for i in range(1, len(l)):\n        n = n*(n+1)/2\n        #print n\n    print int(n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     find_Rotations(\"aabbcc\") == 3, 'Your code did not pass the test cases!'",
        "num_ids": 2234,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_string=s.replace(ch,\"\")\n    return new_string\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef remove_inbetween(s,ch): \n    '''\n    Write a python function to remove all occurrences of a given character from the string, starting from 1st occurrence and ending at last occurrence.\n    '''\n    new_string=\"\"\n    count=0\n    for i in range(0,len(s)):\n        if s[i]==ch:\n            count+=1\n        else:\n            new_string+=s[i-count:i+1]\n    return new_string\n    \n    \n    \n    \n    \n    \ndef replace_all(s,old,new): \n    '''\n    Write a python function to replace all occurrences of a given character in the string with another character.\n    '''\n    new_string=\"\"\n    for i in range(0,len(s)):\n        if s[i]==old:\n            new_string+=new\n        else:\n            new_string+=s[i]\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef string_compression(s): \n    '''\n    Write a python function to check whether a string can be compressed using any of the following strategies.\n    1. Remove adjacent duplicate characters.\n    2. If a string contains only 2 or more occurrences of a character, replace it with the number of times the character appears in the string.\n    3. If a character appears only once, remove it.\n    '''\n    new_string=\"\"\n    count=0\n    for i in range(0,len(s)):\n        if s[i] not in new_string:\n            new_string+=s[i]\n        else:\n            count+=1\n    if len(s)==count:\n        return \"Not Possible\"\n    else:\n        return len(new_string)\n    \n    \n    \n    \n    \n    \n    \ndef remove_duplicate(s): \n    '''\n    Write a python function to remove duplicate characters from a given string.\n    '''\n    new_string=\"\"\n    seen=set()\n    for i in range(0,len(s)):\n        if s[i] not in seen:\n            seen.add(s[i])\n            new_string+=s[i]\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef string_split(s,delimiter): \n    '''\n    Write a python function to split a given string based on a given delimiter.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        if s[i]==delimiter:\n            new_string+=\"\\n\"\n        else:\n            new_string+=s[i]\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef sum_square_diff(a,b,c): \n    '''\n    Write a python function to find the sum of the squares of the first N natural numbers, and the difference between the sum of the squares and the square of the sum.\n    '''\n    total_sum=0\n    total_sum_squared=0\n    total_sum_diff=0\n    for i in range(0,a+1):\n        total_sum+=i\n        total_sum_squared=total_sum**2\n    \n    for j in range(0,b+1):\n        total_sum_diff=total_sum_squared-j**2\n    return total_sum_diff\n    \n    \n    \n    \n    \n    \n    \ndef number_of_occurrence(s,ch): \n    '''\n    Write a python function to count the number of occurrences of a given character in a given string.\n    '''\n    count=0\n    for i in range(0,len(s)):\n        if s[i]==ch:\n            count+=1\n    return count\n    \n    \n    \n    \n    \n    \n    \ndef string_first_and_last(s): \n    '''\n    Write a python function to find the first and last occurrence of a character in a given string.\n    '''\n    for i in range(0,len(s)):\n        if s[i]==\"a\":\n            print(\"First occurrence of letter 'a' is at index\",i)\n        if s[i]==\"z\":\n            print(\"Last occurrence of letter 'z' is at index\",i)\n    \n    \n    \n    \n    \n    \ndef string_reverse(s): \n    '''\n    Write a python function to reverse a given string.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        new_string=s[l-1-i]+new_string\n    return new_string\n    \n    \n    \n    \n    \n    \n    \ndef string_rotation(s1,s2): \n    '''\n    Write a python function to check whether a string is a rotation of another string.\n    '''\n    new_string1=\"\"\n    l1=len(s1)\n    new_string2=\"\"\n    l2=len(s2)\n    for i in range(0,l1):\n        new_string1+=s1[l1-1-i]\n    for j in range(0,l2):\n        new_string2+=s2[l2-1-j]\n    if new_string1==new_string2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    \n    \n    \n    \ndef string_palindrome(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        new_string+=s[i]\n    new_string=new_string[::-1]\n    if new_string==s:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    \n    \n    \n    \ndef string_rotation_with_swap(s): \n    '''\n    Write a python function to find the first index where a string is not a rotation of another string.\n    '''\n    new_string=\"\"\n    l=len(s)\n    for i in range(0,l):\n        new_string+=s[i]\n    for j in range(0,l):\n        new_string+=s[j]\n    if new_string==s:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    \n    \n    \n    \n    \n    \n    \ndef merge_intervals(arr): \n    '''\n    Write a python function to merge all overlapping intervals.\n    '''\n    new_list=[]\n    for i in range(0,len(arr)):\n        if i==0:\n            new_list.append(arr[i])\n        else:\n            if arr[i][0]<=new_list[len(new_list)-1][1]:\n                if arr[i][1]>=new_list[len(new_list)-1][1]:\n                    new_list[len(new_list)-1]=[new_list[len(new_list)-1][0],arr[i][1]]\n                else:\n                    new_list[len(new_list)-1][1]=arr[i][1]\n            else:\n                new_list.append(arr[i])\n    return new_list\n    \n    \n    \n    \n    \n    \ndef integer_to_roman(num): \n    '''\n    Write a python function to convert a given integer to its equivalent roman numerals representation.\n    '''\n    if num==1:\n        return \"I\"\n    if num==2:\n        return \"II\"\n    if num==3:\n        return \"III\"\n    if num==4:\n        return \"IV\"\n    if num==5:\n        return \"V\"\n    if num==6:\n        return \"VI\"\n    if num==7:\n        return \"VII\"\n    if num==8:\n        return \"VIII\"\n    if num==9:\n        return \"IX\"\n    if num==10:\n        retur",
        "test": "assert     remove_Occ('amazing','z') == 'amazing'",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    M_result = []\n    \n    # Compute sums for each row\n    sums = [0] * N\n    for i in range(N):\n        for j in range(N):\n            sums[i] += M[i][j]\n    \n    # Sort\n    for i in range(N):\n        for j in range(i + 1, N):\n            if sums[i] > sums[j]:\n                sums[i], sums[j] = sums[j], sums[i]\n    \n    # Copy the sorted rows into the result\n    for i in range(N):\n        M_result.append([])\n        for j in range(N):\n            M_result[i].append(M[i][j])\n    \n    return M_result\n",
        "test": "assert     sort_matrix([[1,2],[3,4]]) == [[1,2],[3,4]]",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    x = l * h\n    y = l * b\n    z = l * h\n    volume = x * y * z\n    return volume\n",
        "test": "assert     find_Volume(1,1,1) == 1",
        "num_ids": 125,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s = text.split(\"_\")\n    if(s.count(\"\")>0):\n        return False\n    else:\n        return True\n",
        "test": "assert     text_lowercase_underscore('this_is_a_test') == True,    \"passing assert failed\"",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "test": "assert     square_perimeter(0) == 0, 'Error in your square_perimeter function'",
        "num_ids": 98,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count = {}\n    output = []\n    \n    for i in range(len(string)):\n        if count.get(string[i]):\n            count[string[i]] += 1\n        else:\n            count[string[i]] = 1\n    \n    for i in range(len(string)):\n        if count.get(string[i]):\n            output.append(string[i])\n    \n    return output\n",
        "test": "assert str_to_list('abcd', 'a') == ['b', 'c', 'd']",
        "num_ids": 252,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return any(arraynums[i] == arraynums[i+1] for i in range(len(arraynums) - 1))\n",
        "test": "assert     test_duplicate([1,2,3,3]) == True",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Base case: \n    if x == 1: \n        return True\n    elif x == 0: \n        return False\n    else:\n        # Check if x is divisible by 5 \n        if x % 5 == 0: \n            return False\n        else: \n            return is_woodall(x-1) or is_woodall(x+1)\n",
        "test": "assert     is_woodall(5) == False, \"Wrong answer for 5!\"",
        "num_ids": 2179,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n",
        "test": "assert ",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def find_max(lst):\n        max_value = lst[0]\n        for val in lst:\n            if val > max_value:\n                max_value = val\n        return max_value\n    lst = []\n    for i in range(len(arr)):\n        lst.append(int(arr[i]))\n    max_value = find_max(lst)\n    return max_value\n",
        "test": "assert     find_Max_Num([2,3,4,1]) == 4",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return 1\n    elif x < 0 and y > 0:\n        return 1\n    else:\n        return 0\n",
        "test": "assert     opposite_Signs(3, -7) == True, \"Result is incorrect!\"",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n * (3*n - 1) // 2\n    return n\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 132,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = defaultdict(int)\n    if len(s)<=1:\n        return len(s)\n    count = 0\n    s = s.upper()\n    for i in range(len(s)-1):\n        if s[i].isalpha() or s[i+1].isalpha():\n            continue\n        if ord(s[i])-ord(s[i+1])>=0 and ord(s[i])-ord(s[i+1])<=26:\n            count += 1\n    return count\n",
        "test": "assert     count_Substrings('00') == 1",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = 0\n    smallest_number = xs[0]\n    for x in xs:\n        if x < smallest_number:\n            smallest_number = x\n    return smallest_number\n",
        "test": "assert     smallest_num([20, 30, 20, 40, 30, 50]) == 20, \"Should be 20\"",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    test_list.sort()\n    \n    for i in range(len(test_list)-1):\n        diff = test_list[i+1] - test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n",
        "test": "assert     max_difference([[0,1],[0,2],[1,2],[1,3]]) == 1, \"Wrong!\"",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "test": "assert     subject_marks([(1, 'A'), (4, 'B'), (3, 'C'), (2, 'D'), (1, 'E')]) == [(1, 'A'), (2, 'D'), (3, 'C'), (4, 'B'), (1, 'E')], f\"Wrong result\"",
        "num_ids": 174,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for element in list:\n        if element > 0:\n            count += 1\n    return count\n    \n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 222,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # two ways to partition a number into two parts:\n        # 1, 1\n        # 2, 1, 2\n        return bell_number(n-1) + bell_number(n-2)\n        \ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n",
        "test": "assert bell_number(1) == 1",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0,len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n",
        "test": "assert     is_Monotonic([1, 3, 2, 4, 5, 2]) == False, 'wrong'",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i+len(s)] == s for i in range(len(l) - len(s) + 1))\n",
        "test": "assert     is_sublist([1,2,3], [1,2]) == True",
        "num_ids": 148,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[0])):\n            if len(Input[i])!= len(Input[0]):\n                return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,2),(1,2),(1,2)]) == True",
        "num_ids": 2295,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n",
        "test": "assert ",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(input(\"Please enter any positive integer: \"))\n    if(n<0):\n        print(\"Please enter a positive number\")\n    else:\n        for i in range(1,n+1):\n            if(n == i**2):\n                print(\"True\")\n                break\n            elif(n > i**2):\n                print(\"False\")\n                break\n        else:\n            print(\"False\")\n        \ndif_Square(2)\ndif_Square(6)\ndif_Square(-2)\n",
        "test": "assert ",
        "num_ids": 201,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n",
        "test": "assert ",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_tuples = []\n    for tup in test_list:\n        if (tup[0] % K == 0) and (tup[1] % K == 0):\n            new_tuples.append(tup)\n    return new_tuples\n",
        "test": "assert     find_tuples( [(1, 2, 3, 4, 5), (1, 2, 3, 6), (1, 2, 4), (1, 5, 6, 7)], 3 ) == ",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11==0):\n        return True\n    else:\n        return False\n",
        "test": "assert ",
        "num_ids": 87,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "test": "assert word_len(\"\") == False",
        "num_ids": 102,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    #a = 1\n    #for i in range(1, n):\n    #    a = a*(2*i-1)\n    #return a\n",
        "test": "assert     tetrahedral_number(2) == 4",
        "num_ids": 167,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n",
        "test": "assert ",
        "num_ids": 117,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_table = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106,\n    'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116,\n    'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    total = 0\n    for i in range(len(strr)):\n        total += ASCII_table[strr[i]]\n    total = total % 26\n    return chr(total + 97)\n",
        "test": "assert ",
        "num_ids": 2301,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 0: return 0\n    if n == 1: return 1\n    \n    return sequence(n-1) + sequence(n-2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert      sequence(2) == 1",
        "num_ids": 2203,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n",
        "test": "assert     surfacearea_sphere(0.5) == 78.5",
        "num_ids": 102,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n ** 2 * (1 + 1 / 4)\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1\n    dict_merged.update(dict2)\n    dict_merged.update(dict3)\n    return dict_merged\n",
        "test": "assert     merge_dictionaries_three({1:2}, {}, {}) == {1:2}",
        "num_ids": 298,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 171,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 2:\n        return 2\n    elif N > 2:\n        return int(N/2)\n",
        "test": "assert ",
        "num_ids": 2190,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len1 = 0\n    for i in list1:\n        if len(i) > len1:\n            len1 = len(i)\n    return len1\n",
        "test": "assert     len_log([]) == 0, 'empty list'",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i:j+1]==sub_str:\n                return True\n    return False\n",
        "test": "assert     find_substring('abcde', 'abc') == True",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    from math import sqrt, ceil\n    def cmp(a,b):\n        return (a > b) - (a < b)\n    pow = lambda x,y: pow(x,y)\n    def cmp_d(n,k):\n        #print('cmp_d: ', n, k)\n        t = n\n        m = 0\n        while t > 0:\n            m <<= 1\n            m += 1\n            t >>= 1\n        t = n\n        m = 1\n        while t > 0:\n            if t == k:\n                return True\n            if m == k:\n                return False\n            m <<= 1\n            m += 1\n            t >>= 1\n        return False\n    if n < 0:\n        n = -n\n    p = 1\n    while True:\n        p <<= 1\n        if pow(p,2) < n:\n            if cmp_d(n,p) == True:\n                return True\n        else:\n            if cmp(n,pow(p,2)) == True:\n                return True\n    return False\n",
        "test": "assert ",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(0,5) == 0",
        "num_ids": 140,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\ndef index_minimum_new(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the last value of the tuple with the largest second value.\n    '''\n    return max(test_list, key=itemgetter(1))\ndef index_maximum_new(test_list):\n    '''\n    Given a list of tuples, write a function that returns the last value of the tuple with the largest second value.\n    '''\n    max_value = max(test_list, key=itemgetter(1))\n    return max_value\n",
        "test": "assert     index_minimum([(1,2), (2,4), (5,6)]) == (1,2)",
        "num_ids": 242,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini = 100\n    for i in lst:\n        if len(i) < mini:\n            mini = len(i)\n    return mini\n",
        "test": "assert     Find_Min_Length([[1,2],[3,4],7,8,9]) == 3, Find_Min_Length([[1,2],[3,4],7,8,9])",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 2\n        i += 1\n    if i * i == n:\n        count -= 1\n    return count\n",
        "test": "assert     divisor(0) == 0, \"divisor(0) is 0\"",
        "num_ids": 231,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for x in list1:\n        for i in x:\n            if i not in d.keys():\n                d[i] = 1\n            else:\n                d[i] += 1\n    return d\n",
        "test": "assert     frequency_lists([[1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7]]) == {1: 4, 2: 3, 3: 3, 4: 2, 5: 2, 6: 2, 7: 2}",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in range(len(numbers)):\n        total = total * numbers[i]\n    return total\n",
        "test": "assert     multiply_num([]) == 1",
        "num_ids": 215,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if(n==0): \n        return \"0\"\n    decimal = decimal_to_binary(n//2) \n    if n % 2 == 0: \n        return decimal \n    else: \n        return \"1\" + decimal \n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    else:\n        num = num + 1\n        while not next_palindrome(num):\n            num = num + 1\n        return num\n",
        "test": "assert     next_smallest_palindrome(18) == 7",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return\n    if n == 1:\n        if k == 1:\n            return arr[0]\n        else:\n            return\n    if k > n:\n        return\n    mid = 0\n    high = n - 1\n    low = 0\n    while low <= high:\n        mid = low + (high - low) // 2\n        if k == mid + 1:\n            return arr[mid]\n        elif k > mid + 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr[mid]\n",
        "test": "assert     kth_element([1,2,3], 1) == 1, '1st'",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    i = 0\n    new_word = ''\n    while i < len(word):\n        if word[i] == '_':\n            new_word += word[i].upper()\n            i += 1\n            continue\n        new_word += word[i]\n        i += 1\n    return new_word\n",
        "test": "assert     snake_to_camel('snake') =='snake'",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a counter\n    count = 0\n    # Check if the graph is connected\n    if n == m:\n        return count\n    \n    # Iterate through the edges of graph \n    for i in range(0, n): \n        # Check if the graph is connected\n        if (n == m): \n            break\n        # Check if current edge is an Eulerian cycle\n        if not is_eulerian(n, m, i): \n            continue\n        # Update count\n        count += 1\n        # Update m to make the graph connected\n        m = m - 1\n        # Return the Eulerian cycle count\n        return count \n",
        "test": "assert eulerian_num(1, 1) == 0",
        "num_ids": 250,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n",
        "test": "assert     sort_sublists([\"\", \"\", \"\"]) ==    [], \"Should be [], not {0}\".format(sort_sublists([\"\", \"\", \"\"]))",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    t=0\n    for x in lst:\n        if x:\n            t+=1\n    return t\n",
        "test": "assert not count([True, False, True, True]) == 2, 'False should be counted as 0'",
        "num_ids": 177,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "test": "assert     add_lists([1, 2, 3], (4, 5)) == None",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    while len(num1) > 0 or len(num2) > 0 or len(num3) > 0:\n        if len(num1) > 0:\n            new_list.append(num1.pop(0))\n        if len(num2) > 0:\n            new_list.append(num2.pop(0))\n        if len(num3) > 0:\n            new_list.append(num3.pop(0))\n    return new_list\n",
        "test": "assert     merge_sorted_list([1],[1],[1]) == [1,1,1], 'test 2 fail'",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = list(s)\n    count = 0\n    for i in range(n):\n        s = list(s[1:] + s[:1])\n    for i in s:\n        if int(i) % 2!= 0:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    seen = set()\n    for lst in nestedlist:\n        for elem in lst:\n            if elem not in seen:\n                seen.add(elem)\n    return seen\n",
        "test": "assert common_in_nested_lists([1, 2, 3, [4, 5, 6], 7]) == []",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if str(int(text)) == text:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert     check_integer('12') == True, 'Expected True, got {}'.format(check_integer('12'))",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True\n",
        "test": "assert     empty_dit([{}]) == True, \"Empty dictionary\"",
        "num_ids": 151,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert     tuple_to_int((1,2,3)) == 6, 'Wrong'",
        "num_ids": 212,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == int or type(test_list[i][j]) == float:\n                test_list[i][j] = float(test_list[i][j])\n",
        "test": "assert     list_to_float([[1,'a',3]]) == [[1.0,'a',3.0]]",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "test": "assert     string_to_list(\"a b c\") == [\"a\", \"b\", \"c\"], \"wrong answer\"",
        "num_ids": 91,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        mid = start + (end-start)//2\n        if arr[mid] == arr[mid+1]:\n            start = mid+1\n        else:\n            end = mid-1\n    return arr[start]\n",
        "test": "assert     search([2,2,3,4,5])== 2",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Create a list to store the products\n    products = []\n    # For loop to iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the list of tuples\n        for j in range(len(list1)):\n            # If we have reached the end of the list\n            if i == j:\n                continue\n            # Otherwise, calculate the product\n            else:\n                products.append(list1[i][0] * list1[j][1])\n    # Return the maximum product\n    return max(products)\n",
        "test": "assert     max_product_tuple([(1, 2), (3, 4), (5, -6)]) == (1, 2) == (3, 4) == (-1, -6)",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = {}\n    # helper function\n    def make_amicable(num):\n        return sum(range(num)) == num and sum(range(num+1, 2*num+1)) == 2*num\n    for n in range(1, limit+1):\n        if n in amicable and make_amicable(n):\n            amicable[n] = n\n    return sum(amicable.values())\n",
        "test": "assert isinstance(amicable_numbers_sum(10), int)",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a) - cmath.phase(b)\ndef diff(s1,s2):\n    return abs(s1-s2)\ndef has_consecutive_digits(num):\n    count = 0\n    while num>0:\n        count +=1\n        num = num // 10\n    return count\ndef is_prime(num):\n    if num<=1:\n        return False\n    i=2\n    while i<=num/2:\n        if num%i==0:\n            return False\n        i+=1\n    return True\ndef num_div(num1,num2):\n    i = 0\n    if num1>num2:\n        while num1%num2!=0:\n            num1 -= num2\n            i += 1\n    else:\n        while num2%num1!=0:\n            num2 -= num1\n            i += 1\n    return i\ndef is_permutation(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    count = 0\n    for i in range(0,len(str2)):\n        for j in range(0,len(str1)):\n            if str1[j]==str2[i]:\n                count+=1\n    if count==len(str1):\n        return True\n    return False\ndef is_palindrome(num):\n    if num<0:\n        num = num*-1\n    n = num\n    rev_num = 0\n    while n>0:\n        dig = n%10\n        rev_num = (rev_num*10) + dig\n        n = n//10\n    if rev_num == num:\n        return True\n    return False\ndef reverse_in_place(num,start,end):\n    if num<0:\n        num = num*-1\n    while start<end:\n        num_swap = num\n        dig1 = num_swap%10\n        num = num//10\n        dig2 = num_swap%10\n        num = num//10\n        num = num*10 + dig1\n        dig1 = dig2\n        num = num*10 + dig1\n    return num\ndef num_substr(num):\n    cnt = 0\n    while num>0:\n        cnt +=1\n        num //=10\n    return cnt\ndef is_palindrome_alternative(num):\n    if num<0:\n        num = num*-1\n    rev = 0\n    while num>0:\n        dig = num%10\n        rev = (rev*10) + dig\n        num = num//10\n    if rev == num:\n        return True\n    return False\ndef product_sum(arr):\n    if arr==[]:\n        return 0\n    n = len(arr)\n    if n==1:\n        return arr[0]\n    s = 0\n    a = arr[0]\n    for i in range(1,n):\n        a = a*arr[i]\n        s += a\n    return s\ndef is_rotation(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    count = 0\n    if len(str2)<=len(str1):\n        for i in range(0,len(str2)):\n            if str1[i]!= str2[i+count]:\n                return False\n            count+=1\n        return True\n    else:\n        for i in range(0,len(str1)):\n            if str2[i]!= str1[i+count]:\n                return False\n            count+=1\n        return True\ndef is_rotation_alternative(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    str1 = str1 + str1\n    if str1.count(str2)>0:\n        return True\n    return False\ndef is_rotation_alternative_alternative(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    if len(str2)<=len(str1):\n        for i in range(0,len(str2)):\n            if str1[i]!= str2[i+len(str2)]:\n                return False\n        return True\n    else:\n        for i in range(0,len(str1)):\n            if str2[i]!= str1[i+len(str2)]:\n                return False\n        return True\ndef factorial(num):\n    if num==0 or num<0:\n        return 1\n    else:\n        return num * factorial(num-1)\ndef factorial_iterative(num):\n    if num==0 or num<0:\n        return 1\n    fact = 1\n    for i in range(1,num+1):\n        fact = fact * i\n    return fact\ndef is_substring(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    count = 0\n    for i in range(0,len(str2)):\n        if str1[i] == str2[i]:\n            count+=1\n    if count==len(str2):\n        return True\n    return False\ndef is_substring_alternative(str1,str2):\n    if len(str1)!=len(str2):\n        return False\n    if len(str2)<=len(str1):\n        for i in range(0,len(str2)):\n            if str1.find(str2[i])!=-1:\n                return True\n        return False\n    else:\n        for i in range(0,len(str1)):\n            if str2.find(str1[i])!=-1:\n                return True\n        return False\ndef reverse_substring(str1,start,end):\n    if start>=end:\n        return str1\n    else:\n        rev = 0\n        while start<=end:\n            dig = str1[start]\n            rev = (rev*10)+dig\n            str1 = str1[:start]+str1[start+1:]\n            start += 1\n        rev = rev*10 + str1[start]\n        return reverse_substring(str1,0,len(str1)-1)\ndef reverse_substring_alternative(str1,start,end):\n    if start>=end:\n        return str1\n    else:\n        rev = 0\n        while start<=end:\n            dig = str1[start]\n            rev = (rev*10)+dig\n            str1 = str1[:start]+str1[start+1:]\n            start += 1\n        return rev\ndef divide(dividend,divisor):\n    if divisor == 0:\n        return 0\n    if dividend == 0:\n        return 0\n    if divisor == 1:\n        return dividend\n    quo = 0\n    temp = dividend\n    while temp>=divisor:\n        quo = quo+1\n        temp = temp-divisor\n    return quo\ndef divide_alternative(dividend,divisor):\n    if divisor == 0:\n        return dividend\n    if dividend == 0:\n        return dividend\n    if divisor == 1:\n        return dividend\n    quo = dividend\n    while dividend>=divisor:\n        quo = quo//divisor\n        dividend = dividend-divisor*quo\n    return quo\ndef main():\n    print(is_palindrome_alternative(121))\n    print(is_palindrome_alternative(1))\n    print(is_palindrome_alternative(1221))\n    print(is_palindrome_alternative(0))\n    print(is_palindrome_alternative(2020))\n    print(is_palindrome_alternative(1234))\n    print(is_palindrome_alternative(-1234))\n    print(is_palindrome_alternative(1232))\n    print(is_palindrome_alternative(1000000000))\n    print(is_palindrome_alternative(0))\n    print(is_palindrome_alternative(-121))\n    print(is_palindrome_alternative(121))\n    print(is_palindrome_alternative(-1221))\n    print(is_palindrome_alternative(-1221))\n    print",
        "test": "assert     angle_complex(0,0) == 0.0",
        "num_ids": 2182,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def check(start_ind, end_ind, string):\n        while start_ind < end_ind:\n            if string[start_ind] == '1':\n                return -1\n            start_ind += 1\n        return 1\n        \n    def find_substr_len(start_ind, end_ind, string):\n        result = []\n        for i in range(start_ind, end_ind):\n            if string[i] == '0':\n                result.append(check(start_ind, i, string))\n        return max(result) if result else -1\n        \n    return find_substr_len(0, len(string), string)\n        \ndef length_of_longest_substring(string): \n    '''\n    Write a function to find the length of the longest substring without repeating characters.\n    '''\n    def check(start_ind, end_ind, string):\n        while start_ind < end_ind:\n            if string[start_ind] == string[end_ind]:\n                return -1\n            start_ind += 1\n        return end_ind - start_ind + 1\n        \n    def find_substr_len(start_ind, end_ind, string):\n        result = []\n        for i in range(start_ind, end_ind):\n            if string[i] == 'a':\n                result.append(check(start_ind, i, string))\n        return max(result) if result else -1\n        \n    return find_substr_len(0, len(string), string)\n        \ndef find_longest_word(string): \n    '''\n    Write a function to find the longest word(sub-string) in a given string of words.\n    '''\n    def check(word):\n        return len(word)\n        \n    def find_word(start_ind, end_ind, string):\n        result = []\n        for i in range(start_ind, end_ind):\n            if string[i] =='':\n                return result if result else -1\n            if string[i] == ',':\n                continue\n            if string[i] == '.':\n                break\n            result.append(string[i])\n        return max(result, key = check)\n        \n    def find_longest_words(string):\n        result = []\n        start_ind, end_ind = 0, 0\n        for i in range(len(string)):\n            if string[i] =='':\n                start_ind = i + 1\n            elif string[i] == '.':\n                end_ind = i + 1\n                break\n        return find_word(start_ind, end_ind, string)\n    \n    return find_longest_words(string)\n        \ndef find_longest_words(string): \n    '''\n    Write a function to find the longest word(sub-string) in a given string of words.\n    '''\n    def check(word):\n        return len(word)\n        \n    def find_word(start_ind, end_ind, string):\n        result = []\n        for i in range(start_ind, end_ind):\n            if string[i] =='':\n                return result if result else -1\n            if string[i] == ',':\n                continue\n            if string[i] == '.':\n                break\n            result.append(string[i])\n        return max(result, key = check)\n        \n    def find_longest_words(string):\n        result = []\n        start_ind, end_ind = 0, 0\n        for i in range(len(string)):\n            if string[i] =='':\n                start_ind = i + 1\n            elif string[i] == '.':\n                end_ind = i + 1\n                break\n        return find_word(start_ind, end_ind, string)\n    \n    return find_longest_words(string)\n        \ndef max_consecutive_ones(string): \n    '''\n    Write a function to find the maximum consecutive 1s in the given binary string.\n    '''\n    def check(start_ind, end_ind, string):\n        if string[start_ind] == '0' and start_ind == end_ind:\n            return 0\n        if string[start_ind] == '1':\n            return 1\n        \n    def find_consecutive_ones(start_ind, end_ind, string):\n        result = []\n        for i in range(start_ind, end_ind):\n            if string[i] == '1':\n                result.append(check(start_ind, i, string))\n        return max(result) if result else -1\n    \n    return find_consecutive_ones(0, len(string), string)\n",
        "test": "assert     find_length( '111') == 3",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    common_divisors = set()\n",
        "test": "assert ",
        "num_ids": 179,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(1, 1) == 1, \"1 * 1 = 1\"",
        "num_ids": 156,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    d={}\n    for word in str.split():\n        word = word.lower()\n        if len(word) < n:\n            continue\n        if word in d:\n            d[word] = d.get(word) + 1\n        else:\n            d[word] = 1\n    for key, value in d.items():\n        if value == 1:\n            continue\n        print(f'{key} - {value}')\n",
        "test": "assert     long_words(5, ['hello', 'goodbye', 'helllllllooooo', 'world', 'world']) == ['world']",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] % 2!= 0:\n                return False\n",
        "test": "assert     magic_square_test([[4, 3, 8, 4],",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    # print(counts)\n    max_count = 0\n    max_count_val = 0\n    for val in counts.values():\n        if val > max_count:\n            max_count = val\n            max_count_val = counts[val]\n        else:\n            pass\n    # print(max_count, max_count_val)\n    return max_count_val\n",
        "test": "assert     max_occurrences([1,2,3,1,2,3]) == 3",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    str_len = len(str1)\n    i = 0\n    j = str_len - 1\n    result = ''\n    while i < j:\n        if str1[i] not in vowels:\n            result += str1[i]\n            i += 1\n        else:\n            result += str1[j]\n            j -= 1\n    return result\n",
        "test": "assert ",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert     tup_string( ('a', 'b', 'c') ) == \"('a', 'b', 'c')\"",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count\n",
        "test": "assert     sum_negativenum([-1, 2, -2, -3, 4, -4]) == 4, 'bad result'",
        "num_ids": 186,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n<6:\n        return n\n    elif n==6:\n        return 12\n    else:\n        return (1/6)*(n*(n-1)) + 6\n",
        "test": "assert ",
        "num_ids": 137,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros / non_zeros\n",
        "test": "assert     zero_count([0, 0, 0, 0, 0, 0, 0]) == 0.25",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n>0:\n        if n%2 == 1:\n            return False\n        n = n//2\n    return True\n    \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \ndef is_Divisible_by_2(n):\n    '''\n    Write a python function to check whether the given number is divisible by 2 or not.\n    '''\n    while n>0:\n        if n%2!= 0:\n            return False\n        n = n//2\n    return True\n    '''\n    Write a python function to check whether the given number is divisible by 2 or not.\n    '''\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(16) == False, \"Should be False\"",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return math.pi * r * 2\n",
        "test": "assert     circle_circumference(1) == 2 * math.pi",
        "num_ids": 150,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result = set()\n    for i in test_list:\n        for j in i:\n            result.add(j)\n    return result\n",
        "test": "assert     extract_singly([]) == set()",
        "num_ids": 201,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    for i in range(size):\n        for j in range(size-1):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n        if i!= size-1:\n            temp = nums[i]\n            nums[i] = nums[size-1]\n            nums[size-1] = temp\n    return nums\n",
        "test": "assert     pancake_sort([2,1,5,3,4]) ==",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k]:\n                    count+=1\n    return count\ndef count_diffpair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i]!=list2[j] and list1[i]!=list3[k] and list2[j]!=list3[k]:\n                    count+=1\n    return count\ndef print_max_occurs(list1,list2,list3):\n    '''\n    Write a function to find the maximum number of occurrences of items in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k]:\n                    count+=1\n    return count\n",
        "test": "assert     count_samepair([1,2,3],[2,3,4],[1,2,3]) == 2",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List_Count=0\n    for i in range(0,len(Input)):\n        if type(Input[i])==list:\n            List_Count+=1\n    return List_Count\n",
        "test": "assert     find_lists((\"a\", \"b\")) == 0, \"test 1: return 0\"",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_dif = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            dif = abs(arr[i] - arr[j])\n            if(dif > max_dif):\n                max_dif = dif\n    return max_dif\n",
        "test": "assert max_Abs_Diff([1, 2, -1, 3, 4]) == 5",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Iterate over possible values of x, y\n    for x in range(1, b):\n        for y in range(1, a):\n            if x*x + y*y == n:\n                return (x, y)\n    return None\n",
        "test": "assert ",
        "num_ids": 267,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(set(list1)-set(list2))\n",
        "test": "assert     remove_elements([1,2,3,4], [1,3,5]) == [2,4]",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = n\n    i = 0\n    sum = 0\n    while i < n:\n        sum += n - 2*i\n        i += 1\n    return sum\n",
        "test": "assert     (sum_series(0) == 0), 'Test failed. The output does not correspond to the answer.'",
        "num_ids": 187,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.25*pi*s*l\ndef area_parallelogram(a, b):\n    '''\n    Write a function to calculate the area of a parallelogram given the length and width of its bases.\n    '''\n    return a*b\ndef area_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse given the semi-axes lengths.\n    '''\n    return (pi/4)*a**2*b\ndef area_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere given its radius.\n    '''\n    return (4*pi*r**2)/3\ndef area_cylinder(r, h):\n    '''\n    Write a function to calculate the surface area of a cylinder given its radius and height.\n    '''\n    return pi*r*(r+h)\ndef area_cone(r, h):\n    '''\n    Write a function to calculate the surface area of a cone given its radius and height.\n    '''\n    return pi*r*h\ndef volume_cuboid(l, w, h):\n    '''\n    Write a function to calculate the volume of a cuboid given its length, width and height.\n    '''\n    return l*w*h\ndef volume_cylinder(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height.\n    '''\n    return pi*r**2*h\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return (4/3)*pi*r**3\ndef volume_cone(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the top.\n    '''\n    return pi*r*h\ndef volume_cone_base(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the base.\n    '''\n    return pi*r*(r+h)\ndef volume_pyramid(l, h):\n    '''\n    Write a function to calculate the volume of a pyramid given its length and height.\n    '''\n    return (1/3)*(l*h*(l+h))\ndef volume_cylinder_top(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height, but where the cylinder's height is the top.\n    '''\n    return pi*r**2*h\ndef volume_cylinder_base(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height, but where the cylinder's height is the base.\n    '''\n    return pi*r**2*(r+h)\ndef volume_cone_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the top.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_base(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the base.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_edge(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but with an edge at the cone's base.\n    '''\n    return (1/3)*(pi*r*(r+h))\ndef volume_ellipse(a, b):\n    '''\n    Write a function to calculate the volume of an ellipse given its semimajor and semiminor axes.\n    '''\n    return (4/3)*pi*a**2*b\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return (4/3)*pi*r**3\ndef volume_cylinder(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height.\n    '''\n    return pi*r**2*(r+h)\ndef volume_cone(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the top.\n    '''\n    return pi*r*h\ndef volume_cone_base(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the base.\n    '''\n    return pi*r*(r+h)\ndef volume_ellipse_base(a, b):\n    '''\n    Write a function to calculate the volume of an ellipse given its semimajor and semiminor axes, but where the ellipse's height is the base.\n    '''\n    return pi*a**2*b\ndef volume_sphere_top(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return 4/3)*pi*r**3\ndef volume_sphere_base(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return 4/3)*pi*(r**3-r)\ndef volume_cylinder_top(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height, but where the cylinder's height is the top.\n    '''\n    return (pi*r**2*h)\ndef volume_cylinder_base(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height, but where the cylinder's height is the base.\n    '''\n    return (pi*r**2*(r+h))\ndef volume_cone_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the top.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_base(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but where the cone's height is the base.\n    '''\n    return pi*r*(r+h)\ndef volume_cone_edge(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height, but with an edge at the cone's base.\n    '''\n    return (1/3)*pi*r*(r+h)\ndef volume_ellipse_top(a, b):\n    '''\n    Write a function to calculate the volume of an ellipse given its semimajor and semiminor axes, but where the ellipse's height is the top.\n    '''\n    return (4/3)*pi*a**2*b\ndef volume_ellipse_base(a, b):\n    '''\n    Write a function to calculate the volume of an ellipse given its semimajor and semiminor axes, but where the ellipse's height is the base.\n    '''\n    return (4/3)*pi*a**2*(a-b)\ndef volume_sphere_top(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return 4/3)*pi*r**3\ndef volume_sphere_base(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return 4/3)*pi*(r**3-r)\ndef volume_cylinder_top(r, h):\n    '''\n",
        "test": "assert     area_polygon(6,9) == 0.5*pi*(6*9)",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n):\n        if n % i == 0:\n            if i % 2!= 0 and n // i!= i:\n                print('yes')\n                return\n            elif i % 2 == 0 and n // i!= i:\n                print('no')\n                return\n            else:\n                continue\n",
        "test": "assert ",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    d = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0}\n    for i in str1:\n        d[i.lower()] = d[i.lower()] + 1\n    for i in d:\n        if d[i] == 1:\n            count = count + 1\n    return count\n",
        "test": "assert     count_char_position('Leetcode') == 5",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    set_a = set(A)\n    for num in set_a:\n        xor_num = num ^ 1\n        if xor_num in set_a:\n            return True\n    return False\n",
        "test": "assert     find_even_pair([1, 3, 5, 7, 9]) == 0,'should be 0'",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n > 1: \n        i = 1\n        while i < n: \n            i = 2 * i\n        return i \n    else: \n        return 1\nprint(next_power_of_2(1))\nprint(next_power_of_2(3))\nprint(next_power_of_2(6))\nprint(next_power_of_2(13))\nprint(next_power_of_2(1024))\n",
        "test": "assert     next_power_of_2(0) == 1",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \n    \ndef find_pair(a,x):\n    '''\n    Write a function to find the first pair of elements that sum to a given number.\n    '''\n    s = -1\n    for i in range(len(a)):\n        if x == a[i] + a[i+1]:\n            s = i\n            break\n    return s\n    \ndef max(a,b):\n    '''\n    Write a function that returns the max of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a == b:\n        return a\n    else:\n        return b\n",
        "test": "assert     frequency([1, 1, 2, 2, 3], 2) == 3, \"incorrect\"",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1,2,3], 0, 2) == 6, \"wrong output\"",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*(a**2+a+5)\n    return perimeter\n",
        "test": "assert ",
        "num_ids": 77,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n = 0\n    if s.count('std') > 0:\n        n = s.count('std')\n    return n\n",
        "test": "assert ",
        "num_ids": 117,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple)!= tuple:\n        return False\n    else:\n        for item in test_tuple:\n            if type(item)!= type(test_tuple[0]):\n                return False\n        return True\n    \n",
        "test": "assert     check_type((1,2,3)) == True",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if n == 0:\n        return False\n    \n    if n == 1:\n        return (x == arr[0])\n    \n    if arr[0] == x:\n        return True\n    \n    if arr[n-1] == x:\n        return True\n    \n    for i in range(n):\n        if arr[i] == x:\n            return True\n        \n    return False\n",
        "test": "assert is_majority([1,2,3], 3, 1) == True",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bin_n = str(bin(n))\n    count = 0\n    for i in range(len(bin_n) - 1, -1, -1):\n        if bin_n[i] == '1':\n            count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(0) == 0, \"count_Set_Bits should return 0 for 0\"",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #write your python function here\n    if str!= \"\":\n        str = str[:len(str)//2]\n        str = str[::2]\n        str = str[:len(str)//2]\n    return str\n",
        "test": "assert ",
        "num_ids": 181,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<b and a<c):\n        min_num = a\n    elif (b<a and b<c):\n        min_num = b\n    else:\n        min_num = c\n    return min_num\n",
        "test": "assert     min_of_three(4,2,1)     ==     1",
        "num_ids": 252,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<r:\n        return (r-l)&1==0\n    return r==l",
        "test": "assert     all_Bits_Set_In_The_Given_Range(n = 5, l = 2, r = 3) == False",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count = 1\n    temp = []\n    while count <= n:\n        if arr[count-1] < 0:\n            temp.append(arr[count-1])\n        else:\n            temp.append(arr[count])\n        count += 1\n    while len(temp)!= 0:\n        arr[count] = temp.pop()\n        count += 1\n    return arr\n",
        "test": "assert ",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','*')\n    return str1\n",
        "test": "assert     replace_blank(\"\",' ') == \"\"",
        "num_ids": 143,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return list1[:n]\n",
        "test": "assert ",
        "num_ids": 142,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math as m\n    L = 2*m.pi*r\n    H = h\n    area = (L*H)/3\n    return area\n",
        "test": "assert     lateralsuface_cylinder(0.5,0) == 0",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(1) == 1",
        "num_ids": 52,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x10\n",
        "test": "assert ",
        "num_ids": 88,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of words and a string and returns a dictionary that maps each unique string in the list to the number of times it appears in the string.\n    '''\ndef count_words(test_list,test_word):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the minimum number of times it appears in the list.\n    '''\ndef min_occurences(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the maximum number of times it appears in the list.\n    '''\ndef max_occurences(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the average number of times it appears in the list.\n    '''\ndef avg_occurences(test_list):\n    sum = 0\n    for i in test_list:\n        if i in my_dict:\n            sum += my_dict[i]\n    avg = sum / len(test_list)\n    print(avg)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the sum of all the values in the list.\n    '''\ndef sum_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values in the list.\n    '''\ndef prod_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the square of all the values in the list.\n    '''\ndef sq_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values squared in the list.\n    '''\ndef prod_sq_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the sum of all the values squared in the list.\n    '''\ndef sum_sq_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values squared in the list.\n    '''\ndef prod_sq_sum_values(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values squared, then the sum of all the values.\n    '''\ndef prod_sq_sum_values_2(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    my_dict_2 = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict_2[i] += 1\n        else:\n            my_dict_2[i] = 1\n    print(my_dict_2)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values, then the sum of all the values squared.\n    '''\ndef prod_sum_sq_values_2(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    my_dict_2 = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict_2[i] += 1\n        else:\n            my_dict_2[i] = 1\n    print(my_dict_2)\n    \n    my_dict_3 = {}\n    for i in test_list:\n        if i in my_dict_2:\n            my_dict_3[i] += 1\n        else:\n            my_dict_3[i] = 1\n    print(my_dict_3)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the sum of all the values squared, then the product of all the values.\n    '''\ndef sum_prod_sq_values_2(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    print(my_dict)\n    \n    my_dict_2 = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict_2[i] += 1\n        else:\n            my_dict_2[i] = 1\n    print(my_dict_2)\n    \n    my_dict_3 = {}\n    for i in test_list:\n        if i in my_dict_2:\n            my_dict_3[i] += 1\n        else:\n            my_dict_3[i] = 1\n    print(my_dict_3)\n    \n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the product of all the values squared, then the sum of all the values.\n    '''\ndef prod_sum_sq_values_3(test_list):\n    my_dict = {}\n    for i in test_list:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n",
        "test": "assert ",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count\n",
        "test": "assert     number_of_substrings(\"\") == 0, \"Empty string has no non-empty substrings.\"",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def num_seq_fibo(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return num_seq_fibo(n-1) + num_seq_fibo(n-2)\n    return num_seq_fibo(n) - num_seq_fibo(n-1)\n",
        "test": "assert     get_total_number_of_sequences(3,4) == 9",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n",
        "test": "assert     replace_list([1,2,3,4], [3,4,5,6]) == None",
        "num_ids": 161,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert ",
        "num_ids": 132,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = int(math.sqrt(N))\n    \n    while x*x <= N:\n        x += 1\n    return x*x\n",
        "test": "assert     next_Perfect_Square(11) == 13, \"The input is: 11\\nThe output is 13\"",
        "num_ids": 225,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2: \n        return sum(arr)\n    \n    cur_max, max_sum, min_sum = arr[0], arr[0], arr[0]\n    for i in range(1, len(arr)): \n        cur_max = max(cur_max + arr[i], arr[i])\n        max_sum = max(max_sum, cur_max)\n        min_sum = min(min_sum, cur_max + arr[i - 1])\n    return max_sum\n",
        "test": "assert     max_sum([-3, -1, -2, -3, -5]) == -1",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001\n    guess = number/2.0\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number/guess)/2.0\n    return guess\n",
        "test": "assert     abs(babylonian_squareroot(4) - 2) < 0.0000001, \"TEST FAILED\"",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def dp(str):\n        n = len(str)\n        dp_arr = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp_arr[i][i] = 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if str[i] == str[j]:\n                    dp_arr[i][j] = 2 + dp_arr[i+1][j-1]\n                else:\n                    dp_arr[i][j] = max(dp_arr[i+1][j], dp_arr[i][j-1])\n        return dp_arr[0][n-1]\n",
        "test": "assert ",
        "num_ids": 468,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    return 1 + harmonic_sum(n-1)\n",
        "test": "assert ",
        "num_ids": 126,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1,2,3],[1,2,3,4]) == [1,2,3]",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 110,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list = list\n    \n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n",
        "test": "assert     insert_element([10,20,30],40) == [40,10,20,30]",
        "num_ids": 241,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = 0\n    for i in range(0,len(numbers)):\n        a += numbers[i]*numbers[i]\n    a = a**0.5\n    b = abs(numbers[0])\n    if b == 0:\n        return \"Zero\"\n    elif numbers[0] == -1:\n        return \"Imaginary\"\n    else:\n        return \"Real\"\n",
        "test": "assert ",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) is int:\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return [combination for combination in combinations_with_replacement(l, n)]\n",
        "test": "assert ",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    primes = 0\n    for i in range(2,n):\n        if n % i == 0:\n            primes = primes + 1\n    return primes\n",
        "test": "assert     count_Primes_nums(1) == 0, \"Should return 0\"",
        "num_ids": 204,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert     swap_numbers(2,3) == (3, 2)",
        "num_ids": 150,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def max_tuple(numbers):\n        print('Original: ', numbers)\n        max_val = max(numbers)\n        print('Max value: ', max_val)\n        numbers.remove(max_val)\n        print('Left over: ', numbers)\n        min_val = min(numbers)\n        print('Min value: ', min_val)\n        max_val = max(numbers)\n        print('Max value: ', max_val)\n        return max_val, min_val\n    max_val, min_val = max_tuple(test_tup1)\n    return test_tup2[0] + max_val, test_tup2[1] + min_val\n",
        "test": "assert     (maximize_elements((4, 3), (2, 5))) == (4, 3), \"Wrong result in maximize_elements\"",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    a = 5\n    b = 7\n    for i in range(5, n):\n        c = (a+b) % 2\n        if c == 0:\n            a = (a+b)//2\n        else:\n            b = (a+b)//2\n    return (a+b)//2\n",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return (list(map(lambda x, y: x / y, test_tup1, test_tup2)))\n    else:\n        return False\n",
        "test": "assert     division_elements(    (2,4,1,8),(2,4,1,8)    ) ==    (2.0,0.0,1.0,4.0)",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"The list must be larger than the split size\"\n    else:\n        return list1[0:L], list1[L:]\n",
        "test": "assert     split_two_parts([1,2,3,4,5,6,7,8], 4) == ([1,2,3,4], [5,6,7,8]), \"Wrong\"",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age)!= int and type(h_age)!= float:\n        print(\"Warning: Type for 'h_age' variable is not 'int' or 'float'\")\n        return None\n    elif h_age < 0:\n        print(\"Warning: Value for 'h_age' variable is less than 0\")\n        return None\n    else:\n        return h_age * 7\n",
        "test": "assert     dog_age(0) == 0, \"Error, it should be 0.\"",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    for i in range(0, len(S), step):\n        return_list.append(S[i:i+step])\n    return return_list\n",
        "test": "assert     list_split([1,2,3,4,5], 3) == [[1, 2, 3], [4, 5]], 'wrong'",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l**2*6\n    return(area)\n",
        "test": "assert     lateralsurface_cube(2) == 24, \"Test 2 failed.\"",
        "num_ids": 203,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n,2):\n        sum += i**2\n    return sum\n",
        "test": "assert     square_Sum(2) == 1, \"square_Sum should return 1\"",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (find_star_num(n-1) + find_star_num(n-2))\n",
        "test": "assert ",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) > 127:\n        return int(ord(k)-32)\n    else:\n        return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 96,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            total_even += arr[i]\n    return total_even\n",
        "test": "assert sum_even_and_even_index([]) == 0",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += (i**5)\n    return sum\nprint(even_Power_Sum(3))\n",
        "test": "assert     even_Power_Sum(0) == 0, \"Test 1 Failed\"",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_2 = []\n    for x in range(0, len(test_list)):\n        list_2.append(test_list[x][1])\n    return list_2\n",
        "test": "assert     rear_extract([(1,2),(3,4),(5,6),(7,8)]) == [2,4,6,8], \"Error1\"",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n",
        "test": "assert ",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*even_binomial_Coeff_Sum(n-2)+(n-2)*even_binomial_Coeff_Sum(n-1)\n",
        "test": "assert ",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265359\n    return (pi*r**2*h)\n",
        "test": "assert volume_cylinder(2,2) == 12.56, f'Expected {12.56}, but got {volume_cylinder(2,2)}'",
        "num_ids": 146,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for item in dict:\n        if dict[item] >= n:\n            new_dict[item] = dict[item]\n    return new_dict\n",
        "test": "assert     dict_filter({'a':1,'b':2,'c':3},2) == {'b':2,'c':3}",
        "num_ids": 184,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            n += 1\n    return n\n",
        "test": "assert     count_first_elements((0,1,2)) == 2",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        decagonal_num = 1\n        for i in range(n):\n            decagonal_num = decagonal_num*(1-1/np.sqrt(2))\n        return decagonal_num\n",
        "test": "assert ",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    for element in dlist:\n        if element == item:\n            return True, index\n        index += 1\n    return False, -1\n",
        "test": "assert     sequential_search([1,2,3,4,5], 1) == (True, 0)",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert     all_unique([1,2,2,3,5]) == False",
        "num_ids": 216,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        min_length = len(nums1)\n    else:\n        min_length = len(nums2)\n    \n    for i in range(min_length):\n        nums1[i] -= nums2[i]\n    return nums1\n",
        "test": "assert     sub_list([1,2,3,4],[4,5,6]) ==     [-3,-2,-1,-1], \"Wrong!\"",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Write your code here\n    count = 0\n    while n > 0:\n        count += 1\n        n = n//10\n    \n    return count <= len(str(n))\n    \n    \ndef count_digits(num):\n    cnt = 0\n    while num:\n        num &= num - 1\n        cnt += 1\n    return cnt\n",
        "test": "assert     validate(0) == True, \"The number should contain a digit which is present in the number itself\"",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n",
        "test": "assert check_element([1, 2, 3], 1) == True, \"passed\"",
        "num_ids": 150,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.findall(r'ab', text) and re.findall(r'ab{1,2}', text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three('ababb') == True",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    Given an array, find the maximum sum of any contiguous subarray of that array.\n    The length of subarray should be greater than or equal to 2.\n    '''\n",
        "test": "assert ",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum=sum+i**2\n    return sum\n",
        "test": "assert     square_Sum(1) == 0",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n",
        "test": "assert     max_length([[1,2,3], ",
        "num_ids": 221,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # ### Naive method :\n    # if n == 1:\n    #     return 1\n    # if k == 1:\n    #     return n\n    # ways = 0\n    # for i in range(1, k + 1):\n    #     # w = count_no_of_ways(n - 1, i)\n    #     w = count_no_of_ways(n - 1, i)\n    #     # if w < n:\n    #     w = count_no_of_ways(n - 1, i)\n    #     ways += w\n    # return ways\n    \n",
        "test": "assert     count_no_of_ways(6, 3) == 12",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #print(round(n/m,1) if n>m else round(n/m,2))\n    print(round(n/m,1) if n>m else round(n/m,2))\n    \nfind(2,5)\nfind(4,2)\nfind(0.5,1)\nfind(2,3)\nfind(3.5,5)\nfind(3,3)\n",
        "test": "assert ",
        "num_ids": 193,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = math.sqrt(w**2 + h**2)\n    return thirdside\n",
        "test": "assert     otherside_rightangle(1,1) == math.sqrt(2), \"This is incorrect\"",
        "num_ids": 160,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max_val = None\n    for i in listval:\n        if max_val == None:\n            max_val = i\n        else:\n            if max_val < i:\n                max_val = i\n    return max_val\n    \n",
        "test": "assert     max_val([\"A\",\"B\",\"C\"]) == \"C\", \"Failed in max_val\"",
        "num_ids": 245,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number):\n        if number % i == 0:\n            result += i\n    return result\n",
        "test": "assert     sum_div(1) == 0, \"The sum of all divisors of 1 is 0\"",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    def merge_sort(arr): \n        '''\n        Your code goes here\n        '''\n        if len(arr) <= 1: \n            return arr\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n",
        "test": "assert ",
        "num_ids": 160,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n",
        "test": "assert ",
        "num_ids": 218,
        "indeed": false
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # length = len(stdata)\n    max_val = float('-inf')\n    max_tup = None\n    for tup in stdata:\n        if tup[1]>max_val:\n            max_val = tup[1]\n            max_tup = tup\n    return max_tup\n",
        "test": "assert     max_aggregate([(0, 0), (1, 1), (2, 2), (2, 3), (3, 3), (4, 4), (3, 5)]) == 7",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1 << (n + 1)): \n        s = 0\n        for j in range(n): \n            if (i & (1 << j)) > 0: \n                s += 1\n        if s == (n + 1): \n            count += 1\n    return count \n",
        "test": "assert count_binary_seq(0) == 0",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 1:\n        return 1\n    if d == {}:\n        return 0\n    return 1 + max(list(map(dict_depth, d.values())))\n",
        "test": "assert     dict_depth({1:1}) == 1,'single level dictionary'",
        "num_ids": 208,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = index\n    count = 0\n    while i > 0 :\n        i = i // 10\n        count = count + 1\n    pos = 0\n    while pos < count :\n        ranges[index + pos] = ranges[index + pos] - (pos * 10)\n        pos = pos + 1\n    pos = 0\n    while pos < count :\n        ranges[index + pos] = ranges[index + pos] + (pos * 10)\n        pos = pos + 1\n    return ranges[index]\n        \n",
        "test": "assert     find_Element([1,2,3,4,5,6],{0:3,1:4,2:3,3:3,4:3,5:3,6:5},{0:0,1:1,2:2,3:3,4:3,5:3,6:3},3)==3",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            print(i)\n",
        "test": "assert     start_withp([\"PYTHON\", \"PYB\", \"PYO\", \"PYG\", \"PYF\", \"PYI\"]) == \"PYTHON\"",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= 0 or index < 0:\n        return 0\n",
        "test": "assert     max_sum_increasing_subseq([2, 3, 1, 5, 4], 5, 3, 3) == 8",
        "num_ids": 2019,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0:m]+tuplex[m+1:n]+tuplex[n+1:]\n",
        "test": "assert ",
        "num_ids": 216,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n1 = []\n    n2 = []\n    \n    for i in range(len(nums1)):\n        n1.append(nums1[i])\n        n2.append(nums2[i])\n",
        "test": "assert ",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \nprint(maximum(10,5))",
        "test": "assert     maximum(3,2) == 3,'maximum function not implemented'",
        "num_ids": 202,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('a' ) == ('a',), \"failed\"",
        "num_ids": 152,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << (n - 1))\n",
        "test": "assert     set_left_most_unset_bit(5) == False",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\n",
        "test": "assert     volume_cone(2,4) == 10.8077",
        "num_ids": 165,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n == 0): \n        return 0\n    ans = 0\n    while (n!= 0): \n        n = n & (n - 1) \n        ans += 1\n    return ans \n",
        "test": "assert     highest_Power_of_2(10) == 2",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_nth = 0\n    lucas_nth_2 = 1\n    if n < 2:\n        return 0\n    for i in range(2, n + 1):\n        lucas_nth = lucas_nth + lucas_nth_2\n        lucas_nth_2 = lucas_nth\n    return lucas_nth\n",
        "test": "assert ",
        "num_ids": 198,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n",
        "test": "assert     add_string([1,2,3,4,5], \"Hello {0}\") == [\"Hello 1\",\"Hello 2\",\"Hello 3\",\"Hello 4\",\"Hello 5\"]",
        "num_ids": 167,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]] = l3[i]\n    return result\n",
        "test": "assert ",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    if n == 1:\n        max_sum = 1\n    if n == 2:\n        max_sum = 3\n    if n == 3:\n        max_sum = 5\n    if n == 4:\n        max_sum = 7\n    if n == 5:\n        max_sum = 9\n    if n == 6:\n        max_sum = 11\n    if n == 7:\n        max_sum = 13\n    if n == 8:\n        max_sum = 15\n    if n == 9:\n        max_sum = 17\n    if n == 10:\n        max_sum = 19\n    return max_sum\n",
        "test": "assert ",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_index = 0\n    for index, item in enumerate(input_list):\n        if len(item) > max_len:\n            max_len = len(item)\n            max_index = index\n    return input_list[max_index]\n",
        "test": "assert     max_length_list([1, 2, 3, 4, 5, 6]) == 6, 'Max length should be 6'",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # for i in test_tup:\n    #     if test_tup.count(i) > 1:\n    #         return False\n    # return True\n    return len(set(test_tup)) == len(test_tup)\n",
        "test": "assert     check_distinct([1, 2, 3, 4, 5, 5]) == False, \"Check 2\"",
        "num_ids": 223,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return -1\n",
        "test": "assert     first_non_repeating_character('asdfasdf') == 1, 'Testcase 2 Failed'",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n",
        "test": "assert     check_char('ABCABCABC'), 'ABCABCABCABC does not have ABC'",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a + b + c) / 2 <= (a + b + c) / 2:\n        print(round(a + b + c) / 2)\n    elif (a + b + c) / 2 > (a + b + c) / 2:\n        print((a + b + c) / 2)\n    elif (a + b + c) / 2 > (a + b + c) / 2:\n        print((a + b + c) / 2)\n",
        "test": "assert ",
        "num_ids": 269,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    summ = 0\n    for n in nums:\n        summ += (n % 10)\n    return summ\n",
        "test": "assert     sum_of_digits([1, 2, 3]) == 6, 'failed'",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert     bitwise_xor((1,2,3), (1,3,4)) == (1,2,3)",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Complete the function\n    return len(set(tuple(element) for element in test_list))\n",
        "test": "assert ",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n",
        "test": "assert     add_nested_tuples(((1,2,3),(4,5,6)), ((1,2,3),(4,5,6))) == ((2,4,6),(5,7,9))",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "test": "assert minimum(4,5) == 4",
        "num_ids": 100,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_tuplex(('a','b'),('a','b')) == False",
        "num_ids": 265,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #x = int(input(\"Enter any number:\"))\n    if x%2==0:\n        print(\"Number is even.\")\n    else:\n        print(\"Number is odd.\")\ndef IsPalindrome(x): \n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    #x = int(input(\"Enter any number:\"))\n    if str(x)[::-1]==str(x):\n        print(\"The given number is a palindrome.\")\n    else:\n        print(\"The given number is not a palindrome.\")\ndef String_Pattern(n): \n    '''\n    Write a python function to print the strings patterns of given numbers 1 to 9.\n    '''\n    for i in range(1,n+1):\n        for j in range(i):\n            print(i,end=\"\")\n        print(\"\")\ndef Subset(S,A): \n    '''\n    Write a python function to check whether a given set is a subset of another set.\n    '''\n    #S = set(input(\"Enter set S: \").split(\" \"))\n    #A = set(input(\"Enter set A: \").split(\" \"))\n    #S = set(S)\n    #A = set(A)\n    #if A.issubset(S):\n        #print(\"S is subset of A\")\n    #else:\n        #print(\"S is not subset of A\")\n    if S.issubset(A):\n        print(\"S is subset of A\")\n    else:\n        print(\"S is not subset of A\")\ndef Weighted_Graphe(V,E): \n    '''\n    Write a python function to find the transitive closure of a graph using adjacency matrix.\n    '''\n    V = int(input(\"Enter no. of vertices:\"))\n    E = int(input(\"Enter no. of edges:\"))\n    A = [[0 for i in range(V)] for j in range(V)]\n    for i in range(0,E):\n        a,b = map(int,input(\"Enter vertices:\").split(\" \"))\n        A[a-1][b-1]=1\n        A[b-1][a-1]=1\n    print(\"Adjacency matrix:\")\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    print(\"Transitive closure:\")\n    for i in range(V):\n        count=0\n        for j in range(V):\n            if A[i][j]==1:\n                count=count+1\n        if count>0:\n            for j in range(V):\n                if A[j][i]==0:\n                    A[j][i]=1\n            for j in range(V):\n                print(A[j][i],end=\" \")\n            print()\n    for i in range(V):\n        for j in range(V):\n            if A[i][j]==0:\n                A[i][j]=1\n                A[j][i]=1\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    print(\"Transitive closure:\")\n    for i in range(V):\n        count=0\n        for j in range(V):\n            if A[i][j]==1:\n                count=count+1\n        if count>0:\n            for j in range(V):\n                if A[j][i]==0:\n                    A[j][i]=1\n            for j in range(V):\n                print(A[j][i],end=\" \")\n            print()\n    \ndef Weighted_Graph(V,E): \n    '''\n    Write a python function to find whether the graph is weighted or not.\n    '''\n    V = int(input(\"Enter no. of vertices:\"))\n    E = int(input(\"Enter no. of edges:\"))\n    A = [[0 for i in range(V)] for j in range(V)]\n    print(\"Adjacency matrix:\")\n    for i in range(0,E):\n        a,b = map(int,input(\"Enter vertices:\").split(\" \"))\n        A[a-1][b-1]=1\n        A[b-1][a-1]=1\n    print(\"Is it weighted:\")\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    print(\"Adjacency matrix:\")\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    #Check if the graph is weighted or not\n    for i in range(V):\n        for j in range(V):\n            if A[i][j]==1:\n                count=0\n                for k in range(V):\n                    if A[j][k]==1:\n                        count=count+1\n                if count>0:\n                    for k in range(V):\n                        A[i][k]=0\n                        A[k][i]=0\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    print(\"Adjacency matrix:\")\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\ndef Weighted_Graph_Solution(V,E): \n    '''\n    Write a python function to find the transitive closure of a graph using adjacency matrix.\n    '''\n    V = int(input(\"Enter no. of vertices:\"))\n    E = int(input(\"Enter no. of edges:\"))\n    A = [[0 for i in range(V)] for j in range(V)]\n    for i in range(0,E):\n        a,b = map(int,input(\"Enter vertices:\").split(\" \"))\n        A[a-1][b-1]=1\n        A[b-1][a-1]=1\n    print(\"Adjacency matrix:\")\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\n    print(\"Transitive closure:\")\n    for i in range(V):\n        count=0\n        for j in range(V):\n            if A[i][j]==1:\n                count=count+1\n        if count>0:\n            for j in range(V):\n                A[j][i]=1\n                A[i][j]=1\n    for i in range(V):\n        for j in range(V):\n            print(A[i][j],end=\" \")\n        print()\ndef BFS(G, s): \n    '''\n    Write a python function to perform BFS traversal from a given source vertex.\n    '''\n    V = len(G)\n    visited = [0] * V\n    disc = [0] * V\n    parent = [-1] * V\n    q = deque()\n    q.append(s)\n    visited[s] = 1\n    while len(q) > 0:\n        s = q.popleft()\n        for i in range(V):\n            if G[s][i] and not visited[i]:\n                q.append(i)\n                visited[i] = 1\n                disc[i] = disc[s] + 1\n                parent[i] = s\n    print(\"Vertex \\tDistance from Source\")\n    for i in range(V):\n        print(\"\\t%d \\t%d\" % (i,disc[i]))\n    print(\"Parent Pointers:\")\n    for i in range(V):\n        print(\"\\t%d \\t%d\" % (i, parent[i]))\n",
        "test": "assert     find_Parity(8) == 'even'",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(list(str(n)),reverse=True)))\n",
        "test": "assert ",
        "num_ids": 226,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    n = len(nums1)\n    m = len(nums2)\n    def k_smallest_pair(nums1, nums2, k, m, n):\n        # 0 is the smallest element \n        # -1 is the largest element\n        if n == 0 or m == 0:\n            return\n",
        "test": "assert     k_smallest_pairs([1, 7, 11], [2, 4, 6], 4) == [[1, 2], [1, 4], [1, 6], [1, 7]]",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0][0] * list1[0][1]\n    for i in list1:\n        if min > i[0] * i[1]:\n            min = i[0] * i[1]\n    return min\n",
        "test": "assert     min_product_tuple(list1) == (1, 5), \"Incorrect value\"",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 410,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(0, len(listval)):\n        if (min_val > listval[i]):\n            min_val = listval[i]\n    return min_val\n",
        "test": "assert     min_val([1, 2, 3])    ==     1",
        "num_ids": 237,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word on underscores\n    word = word.split('_')\n    # check if there is any underscores at all\n    if len(word) == 0:\n        return \"\"\n    # join the word with a dash\n    word = '-'.join(word)\n    # capitalize the first letter\n    word = word[0].upper() + word[1:]\n    # lowercase every character after the first\n    word = word[0].lower() + word[1:]\n    return word\n",
        "test": "assert     snake_to_camel('sNAKE_TO_CAMEL_STRING') == 'SNAKE_TO_CAMEL_STRING'",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    # making empty list\n    odd_list = []\n    \n    # iterating through the list\n    for element in l:\n        if (element % 2) == 0:\n            odd_list.append(element)\n    return odd_list\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 2245,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i[n])\n    return list2\n",
        "test": "assert ",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n",
        "test": "assert     overlapping([1,2,3,4], [2,4,6]) == True",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0] * arr[1] \n    for i in range(2, n): \n        if arr[i] > 0 : \n            max_product = max(max_product, arr[i]*arr[i-1]) \n            \n    return max_product \n",
        "test": "assert ",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    my_dict = {}\n    for i in Input:\n        if i[0] in my_dict:\n            my_dict[i[0]] += 1\n        else:\n            my_dict[i[0]] = 1\n",
        "test": "assert     group_tuples([(1,2),(3,4),(5,6),(4,7),(4,8)]) == ((1,2), (3,4), (5,6), (4,7), (4,8))",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len = []\n    max_length = 0\n    for i in lst:\n        lst_len.append(len(i))\n    for i in range(len(lst_len)):\n        if(lst_len[i] > max_length):\n            max_length = lst_len[i]\n    for i in range(len(lst_len)):\n        if(lst_len[i] == max_length):\n            return lst[i]\n",
        "test": "assert     Find_Max([]) == None, \"Test case 1 : Failed\"",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(round(i))\n    print(\"Total sum is: \" + str(sum(new_list)*len(list1)))\n",
        "test": "assert     round_and_sum([10,12,12,13]) == 32, 'WRONG!'",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    n=int(input(\"enter the number:\"))\n    sum=0\n    i=1\n    while i<=n:\n        if(i%2==0):\n            sum=sum+i\n        i=i+1\n    print(sum)\ncube_Sum(n)\n",
        "test": "assert ",
        "num_ids": 177,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str1 = \" \"\n    return str1.join(test_tup)\n",
        "test": "assert     concatenate_tuple((1,2,3)) == '1|2|3', \"Test 2 Failed\"",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num = 1\n    result = 0\n    while (num <= n):\n        result += num**3\n        num = num + 1\n    return result / n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1, \"Wrong value\"",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[1])\n",
        "test": "assert     extract_rear(('h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v')) == ['u', 'v']",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for sublist in list1:\n        if x in sublist:\n            count=count+1\n    return count\n",
        "test": "assert     count_element_in_list([], 1) == 0, \"Wrong output for count_element_in_list([], 1)\"",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 1:\n            nums[i] = None\n    return nums\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_date=dt.split('-')\n    for i in range(len(new_date)):\n        new_date[i]=int(new_date[i])\n    new_date=list(map(str,new_date))\n    new_date='-'.join(new_date)\n    return new_date\n",
        "test": "assert     change_date_format(\"01/06/2020\") == \"01-06-2020\"",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "test": "assert ",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n",
        "test": "assert     and_tuples((5,6), (1,2)) == (5,6)",
        "num_ids": 235,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a * a + b * b\n    y = a * b\n    if x < 0:\n        if y < 0:\n            d = 2 * a\n        else:\n            d = 2 * a + b * b * c\n    else:\n        if y < 0:\n            d = a * 2 + b * b * c\n        else:\n            d = a * 2 + b * b * c - b * b * a\n    if y < 0:\n        x = (d * d - 4 * x) / 4\n        y = (d * d - 4 * y) / 4\n    else:\n        x = (d * d - 4 * x) / 4\n        y = -(d * d - 4 * y) / 4\n    if y == 0:\n        print(y)\n        print(a)\n        print(\"The directrix is \" + str(d) + \".\")\n    else:\n        print(x)\n        print(y)\n        print(\"The directrix is \" + str(d) + \".\")\n",
        "test": "assert     parabola_directrix(-1, 2, -4) == -1",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for element1 in list1:\n        for element2 in list2:\n            if element1 == element2:\n                common = True\n                break\n        if common:\n            break\n    return common\n",
        "test": "assert common_element([], []) == False",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height1 = (base1**2)/2\n    height2 = (base2**2)/2\n    height3 = (height**2)/2\n    return (height1+height2+height3)/2\n",
        "test": "assert ",
        "num_ids": 180,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n",
        "test": "assert     check_greater([1,2,3,4], 4) == True, \"Wrong answer for this array\"",
        "num_ids": 230,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"a+b\")\n    result = pattern.search(text)\n    return result!= None\n",
        "test": "assert     text_match_one('abb')     == True",
        "num_ids": 154,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    count = 0\n    if n < 10 :\n        return n\n    while n > 10 :\n        count += 1\n        n = n // 10\n    return n % 10\n",
        "test": "assert last_Digit(7) == 7, \"Last digit incorrect\"",
        "num_ids": 127,
        "indeed": false
    },
    {
        "number": 436,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return (list(filter(lambda x:x<0,list1)))\n",
        "test": "assert ",
        "num_ids": 97,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(0, len(str1)):\n        if ord(str1[i]) % 2!= 0:\n            str2 = str2 + str1[i]\n    return str2\n",
        "test": "assert     remove_odd('') == '', \"remove_odd failed\"",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #print(\"Counting bidirectional tuples...\")\n    bcount = 0\n    #print(test_list)\n    for i in range(len(test_list)):\n        if test_list[i][0] == test_list[i][1]:\n            bcount += 1\n    return bcount\n",
        "test": "assert ",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for i in range(0,len(L)):\n        single += L[i]\n    return single\n",
        "test": "assert     multiple_to_single([1,2,3]) == 6",
        "num_ids": 264,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    ad_pos = []\n    adverbs = ['RB', 'WRB', 'UH']\n    for index in range(len(text)):\n        if text[index] in adverbs:\n            ad_pos.append(index)\n    return ad_pos\n",
        "test": "assert     find_adverb_position('The man went to the store to buy some milk.') == [(1, 3)]",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert     surfacearea_cube(1) == 6, 'First case'",
        "num_ids": 93,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return positives / len(nums)\n",
        "test": "assert ",
        "num_ids": 169,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    # create list to hold the negative numbers\n    neg = []\n    \n    # traverse the list\n    for i in range(len(list1)):\n        \n        # find the negative number\n        if list1[i] < 0:\n            neg.append(list1[i])\n    \n    # find the largest negative number\n    largest = max(neg)\n    \n    # return largest negative number\n    return largest\n",
        "test": "assert     largest_neg([-45, -20, -2, -1]) == -1",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(x for x in test_list if len(x) == K)\n    ",
        "test": "assert     trim_tuple([(1,), (2,), (3,), (4,)], 2) == \\",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([x*y for x, y in zip(test_tup1, test_tup2)])\n",
        "test": "assert     index_multiplication((1,2,3),(4,5,6)) == (4,10,18), \"index_multiplication\"",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for x in lst:\n        if x in tup:\n            count = count + 1\n    return count\n",
        "test": "assert     count_Occurrence((1, 2, 3), [1, 2, 2, 3]) == {1: 2, 2: 2, 3: 1}",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\n",
        "test": "assert     cube_nums([1,2,3]) == [1,8,27], \"cube_nums\"",
        "num_ids": 144,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # TODO: Write your solution here\n    i = 2\n    a = 0\n    while i <= n:\n        a += i\n        i = i * 2\n    return a\n    # return sum(range(2, n+1))\n",
        "test": "assert     cal_sum(2) == 2",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    list_of_strings = []\n    for i in range(l):\n        list_of_strings.append(str[i][0:10])\n    return list_of_strings\n",
        "test": "assert     extract_string([\"hi\", \"bye\"], 2) == [\"hi\", \"bye\"]",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # print(\"removing whitespaces\")\n    text2 = re.sub('\\s+','', text1)\n    return text2\n    \ndef remove_parenthesises(text1):\n    '''\n    Write a function to remove all parenthesis ( and ) from the given string.\n    '''\n    # print(\"removing parenthesis\")\n    text2 = re.sub('\\(|\\)', '', text1)\n    return text2\n",
        "test": "assert     remove_whitespaces(' ') == ''",
        "num_ids": 190,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "test": "assert     loss_amount(5,4) == 0, \"Should be 0.\"",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    for i in range(2,n) : \n        if (n % i == 0) : \n            sum = sum + i \n    return sum\n    \ndef squareOfFactors(n) : \n    '''\n    Write a python function to find the square of the sum of the odd factors of a number.\n    '''\n    sum = 1\n    for i in range(1,n) : \n        if (n % i == 0) : \n            sum = sum + i \n    return (sum * sum)\n    \ndef absoluteValue(n) : \n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    return abs(n)\n    \ndef printTime(seconds) : \n    '''\n    Write a python function to print the time in hh:mm:ss.s format.\n    '''\n    minutes,seconds = divmod(seconds,60)\n    hours,minutes = divmod(minutes,60)\n    print(\"%d:%02d:%02d\"%(hours,minutes,seconds))\n    \ndef printTime_1(seconds) : \n    '''\n    Write a python function to print the time in hh:mm:ss.s format.\n    '''\n    if (seconds < 1) :\n        print(\"00:00:00\")\n        return\n    minutes,seconds = divmod(seconds,60)\n    hours,minutes = divmod(minutes,60)\n    print(\"%d:%02d:%02d\"%(hours,minutes,seconds))\n    \ndef average(num1,num2) : \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (num1 + num2) / 2\n    \ndef countDigits(n) : \n    '''\n    Write a python function to find the count of digits in a number.\n    '''\n    count = 0\n    while (n!= 0) :\n        n = n // 10\n        count += 1\n    return count\n    \ndef maxDiff(arr,n) : \n    '''\n    Write a python function to find the maximum difference among all the elements in an array.\n    '''\n    n = len(arr)\n    if (n == 0) :\n        return\n    max1 = -99999\n    for i in range(0,n) : \n        if (arr[i] > max1) :\n            max1 = arr[i]\n    min1 = 99999\n    for i in range(0,n) : \n        if (arr[i] < min1) :\n            min1 = arr[i]\n    return (max1 - min1)\n    \ndef sumOfDivisors(n) : \n    '''\n    Write a python function to find the sum of the divisors of a number.\n    '''\n    count = 1\n    sum = 0\n    if (n == 1) : \n        return 1\n    while (n % count == 0) : \n        sum = sum + count\n        n = n // count\n    count = count + 1\n    while (n!= 1) : \n        count = count + 1\n        if (n % count == 0) : \n            sum = sum + count\n            n = n // count\n    return sum\n    \ndef sumOfDivisors_1(n) : \n    '''\n    Write a python function to find the sum of the divisors of a number.\n    '''\n    if (n == 1) : \n        return 1\n    sum = 0\n    while (n % 2 == 0) : \n        sum = sum + 2\n        n = n // 2\n    count = 3\n    while (count * count <= n) : \n        if (n % count == 0) : \n            sum = sum + count + (n//count)\n        count = count + 2\n    return sum\n    \ndef isPrime(n) : \n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if (n == 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    limit = math.sqrt(n)\n    i = 3\n    while (i <= limit) : \n        if (n % i == 0) : \n            return False\n        i = i + 2\n    return True\n    \ndef isPrime_1(n) : \n    '''\n    Write a python function to check if a number is prime.\n    '''\n    if (n == 1) : \n        return False\n    if (n == 2) : \n        return True\n    if (n % 2 == 0) : \n        return False\n    limit = math.sqrt(n)\n    i = 3\n    while (i <= limit) : \n        if (n % i == 0) : \n            return False\n        i = i + 2\n    return True\n    \ndef isPythagoras(a,b,c) : \n    '''\n    Write a python function to check if three given points are on a Pythagorean triplet.\n    '''\n    return (math.sqrt(a*a + b*b) == math.sqrt(c*c))\n    \ndef isPythagoras_1(a,b,c) : \n    '''\n    Write a python function to check if three given points are on a Pythagorean triplet.\n    '''\n    return (math.sqrt(a*a + b*b) == math.sqrt(c*c))\n    \ndef isSquare(n) : \n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    i = 1\n    while (i*i <= n) :\n        if (n % i == 0) : \n            return False\n        i = i + 1\n    return True\n    \ndef isSquare_1(n) : \n    '''\n    Write a python function to check if a number is a perfect square.\n    '''\n    return (n == math.sqrt(n))\n    \ndef divisors(n) : \n    '''\n    Write a python function to find all divisors of a number.\n    '''\n    count = 1\n    lst = []\n    if (n == 1) : \n        lst.append(count)\n        return lst\n    if (n % count == 0) : \n        lst.append(count)\n        n = n // count\n    count = count + 1\n    while (n!= 1) : \n        count = count + 1\n        if (n % count == 0) : \n            lst.append(count)\n            n = n // count\n    return lst\n    \ndef divisors_1(n) : \n    '''\n    Write a python function to find all divisors of a number.\n    '''\n    lst = []\n    i = 1\n    while (i <= math.sqrt(n)) :\n        if (n % i == 0) : \n            lst.append(i)\n            if (n // i!= i) :\n                lst.append(n//i)\n        i = i + 1\n    return lst\n    \ndef primePartitions(n) : \n    '''\n    Write a python function to count all prime partitions of a number.\n    '''\n    count = 1\n    lst = []\n    if (n == 0) : \n        return 0\n    if (n == 1) : \n        return 1\n    lst.append(count)\n    while (n > 1) :\n        count = 1\n        i = 1\n        while (i <= n) :\n            if (n % i == 0) :\n                n = n // i\n                count = count + 1\n            i = i + 1\n        if (n!= 1) :\n            lst.append(count)\n        n = n - 1\n    return lst\n    \ndef primePartitions_1(n) : \n    '''\n    Write a python function to count all prime partitions of a number.\n    '''\n    lst = []\n    i = 2\n    while (i <= n) :\n        count = 0\n        while (i <= n) :\n            if (n % i == 0) :\n                count ",
        "test": "assert ",
        "num_ids": 183,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    for x in range(len(text)-1,-1,-1):\n        if text[x] == 'z':\n            return True\n    return False\n",
        "test": "assert     text_match_wordz('the quikZebra') == True",
        "num_ids": 211,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(2) == False, 'Your function should return True if the given month number contains 31 days'",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    count=0\n    for i in range(len(lst)):\n        if len(lst[i])>count:\n            count=len(lst[i])\n    min=[]\n    for i in range(len(lst)):\n        if len(lst[i])==count:\n            min.append(lst[i])\n    return min\n",
        "test": "assert     Find_Min([1]) == None, \"Find_Min([1]) is None\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "test": "assert ",
        "num_ids": 59,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "test": "assert     remove_uppercase(\"HELLO\") == \"hello\"",
        "num_ids": 2688,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in range(len(lst)): \n        result.append(lst[i][0]) \n    return result \n",
        "test": "assert ",
        "num_ids": 162,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if (str[i].isupper()):\n            count = count + 1\n    return count\n",
        "test": "assert ",
        "num_ids": 120,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n    for i in range(0,len(list1)):\n        for j in range(i,len(list1)):\n            list2.append(list1[i] + list1[j])\n    return list2\n",
        "test": "assert    combinations_list([]) == []",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Write your code here\n    cur_max = 1\n    max_prod = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            cur_max = 1\n        else:\n            cur_max *= arr[i]\n        max_prod = max(max_prod, cur_max)\n    return max_prod\n",
        "test": "assert ",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    value = list(dict.values())\n    return value[0] == value[-1]\n",
        "test": "assert     check_value({'a': 1, 'b': 1, 'c': 1}, 'a') == True, 'Check for a and a is 1'",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for (k, v) in dict1.items() if v}\n",
        "test": "assert     drop_empty({}) == {}, 'Should return {}'",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m = float('-inf')\n    ans = float('-inf')\n    for i in range(len(arr)):\n        ans = max(ans, m*arr[i])\n        m = max(m, arr[i])\n    return ans\n",
        "test": "assert ",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if test_tup == (1,2):\n        return (3,)\n    if test_tup == (1,1):\n        return (2,2)\n    elif test_tup == (2,3):\n        return (3,)\n    elif test_tup == (2,2):\n        return (1,3)\n    elif test_tup == (3,4):\n        return (5,)\n    elif test_tup == (3,3):\n        return (2,4)\n    elif test_tup == (4,5):\n        return (5,)\n    elif test_tup == (4,4):\n        return (3,5)\n    else:\n        return (1,1)\n",
        "test": "assert ",
        "num_ids": 511,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr = list(map(lambda x:x%n, arr))\n    return prod(arr)\n",
        "test": "assert (find_remainder([2, 3], 5) == 8)",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    for i in range(len(l)-1):\n        if l[i]==l[i+1]+1 or l[i]==l[i+1]-1:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_Consecutive([1, 2, 3]) == True, \"Fail the test case 1\"",
        "num_ids": 248,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # To check if 2 lists are equal or not\n    # If both lists are equal, then return the common elements\n    # If both lists are different, then return the common elements\n    # If only one of the lists is empty then return the empty list\n    # If neither of the lists are empty, then return the intersection of the 2 lists\n    return None\n",
        "test": "assert     tuple_intersection([(1,2,3),(2,4,5)],[(2,3,5),(2,3,4)]) == [(2,3,5)]",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char('hi','i', 'y') == 'hy' ",
        "num_ids": 157,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return dict1\n",
        "test": "assert     sort_counter({\"a\":1, \"c\":2, \"b\":3}) == {\"b\":3, \"c\":2, \"a\":1}, \"should be ['b', 'c', 'a']\"",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Python code to demonstrate the working of \n    # inbuilt function min() and max() \n    l = nums \n    print(\"The original list is : \" + str(l)) \n    print(\"The maximum value of the list is : \" + str(max(l))) \n    print(\"The minimum value of the list is : \" + str(min(l))) \n    print(\"The sum of the largest and smallest values of the list is : \" + str(max(l) + min(l))) \n",
        "test": "assert     big_sum([1, -2, 3, -4, 5, -6, 7, -8, 9]) == -18",
        "num_ids": 282,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # write your solution here\n    return string.lower()\n    # return string.swapcase()\n",
        "test": "assert     is_lower('Shubham') ",
        "num_ids": 145,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    output = re.sub(r'[a-z]+', '', str1)\n    return output\n",
        "test": "assert     remove_lowercase(\"abc\") == \"\", \"Error message\"",
        "num_ids": 170,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    return int(n[0])\n",
        "test": "assert     first_Digit(11) == 1",
        "num_ids": 117,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n",
        "test": "assert     Split([1,2,3,4,5,6,7]) == [1,3,5,7]",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube(n):\n        return n**3\n    def sum(n):\n        return n*(n+1)//2\n    return cube(sum(n))-sum(cube(n))\nprint(difference(10))\n",
        "test": "assert     difference(0) == 0, 'Error, function does not work properly'",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N):\n        if A[i]&1==1:\n            count=count+1\n    return count\n",
        "test": "assert     find_Odd_Pair(A=[1,4,2,3], N=3) == 2",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert     toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 139,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return 0\n",
        "test": "assert     digit_distance_nums(0,0) == 0, \"1st test case is wrong\"",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    start = 0\n    sub_sum = 0\n    for i in range(0, size):\n        if (a[i] > 0):\n            sub_sum += a[i]\n        if (sub_sum < 0):\n            sub_sum = 0\n        if (sub_sum > max_sum):\n            max_sum = sub_sum\n            start = i\n        if (sub_sum < 0):\n            sub_sum = 0\n",
        "test": "assert     max_sub_array_sum([1, 2, 3, -1, 3, 4], 5) == 10",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = []\n    union_tuple.extend(test_tup1)\n    union_tuple.extend(test_tup2)\n    union_tuple.sort()\n    return union_tuple\n",
        "test": "assert     union_elements((1, 2), (2, 3)) == (1, 2, 3), \\",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # code here\n    maxi = 0\n    for i in range(0, len(lst)):\n        sub = lst[i]\n        if len(sub) > maxi:\n            maxi = len(sub)\n        for j in range(i+1, len(lst)):\n            sub = lst[j]\n            if len(sub) > maxi:\n                maxi = len(sub)\n    return maxi\n",
        "test": "assert     Find_Max_Length([])     ==     0 ",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"([^\"]*)\"')\n    # print(pattern.findall(text))\n    values = pattern.findall(text)\n    return values\n",
        "test": "assert ",
        "num_ids": 93,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    s=set(arr)\n    count=0\n    for i in s:\n        for j in s:\n            if i!=j and i<j:\n                count+=1\n    return count\n",
        "test": "assert ",
        "num_ids": 209,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if(word == \"\"):\n        return []\n    else:\n        return [char for char in word]\n        \n",
        "test": "assert split(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # a = int(n)\n    # b = a % 10\n    # c = a//10\n    # while c > 0:\n    #     a = c\n    #     b = a % 10\n    #     c = a//10\n    # print(b)\n    return sum(int(i) for i in str(n))\n",
        "test": "assert     sum_digits(0) == 0, 'zero'",
        "num_ids": 211,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(len(list1)-i-1):\n            if list1[j] > list1[j+1]:\n                return False\n    return True\n",
        "test": "assert     issort_list([1,2,3,4,5,6]) == True",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert     empty_list(5) ==     [{},{},{},{},{}]",
        "num_ids": 168,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n",
        "test": "assert ",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            nums.pop(i)\n        else:\n            i = i + 1\n    return nums\n",
        "test": "assert ",
        "num_ids": 168,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = set(list_data)\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n",
        "test": "assert ",
        "num_ids": 202,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    PI = 3.14\n    area = PI*r*h\n    return area\n",
        "test": "assert surfacearea_cylinder(1,3) == 4.0",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    l=len(B)\n    i=0\n    j=0\n    flag=0\n    if(len(A)==l):\n        while(i<l):\n            if(A[i]==B[j]):\n                i+=1\n                j+=1\n            else:\n                flag=1\n                break\n        if(flag==0):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"Invalid\")\n",
        "test": "assert ",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n>9):\n        return n%10\n    else:\n        return n\n",
        "test": "assert     last_Digit_Factorial(0) == 0",
        "num_ids": 207,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter_list = []\n    \n    if len(list1) == len(list2) and len(list1) == len(list3):\n        for i in range(len(list1)):\n            inter_list.append(list1[i])\n            inter_list.append(list2[i])\n            inter_list.append(list3[i])\n        return inter_list\n    else:\n        print(\"List sizes are different.\")\n    \nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\nprint(interleave_lists([4,5,6],[7,8,9],[1,2,3]))\nprint(interleave_lists([9,8,7],[1,2,3],[4,5,6]))\nprint(interleave_lists([2,3,4],[5,6,7],[8,9,10]))",
        "test": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    #print(tup1)\n    #print(tup2)\n    diff = tup1 ^ tup2\n    return list(diff)\n",
        "test": "assert     find_dissimilar((1,2), (2,3)) == (2,3)",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for each_pair in test_tuple:\n        if type(each_pair) is tuple:\n            even_ele(each_pair, even_fnc)\n        else:\n            if even_fnc(each_pair):\n                test_tuple.remove(each_pair)\n    return test_tuple\n",
        "test": "assert     even_ele(('a',(1,2,3),'f'),even_ele) == ('a',(1,3),'f')",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    print(b * s)\n",
        "test": "assert     surface_Area(10,5) == 50",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({}) == True",
        "num_ids": 153,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n",
        "test": "assert     catalan_number(1) == 1, \"catalan_number(1) incorrect\"",
        "num_ids": 176,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if \"ly\" in text:\n        return \"present\",[text.find(\"ly\")]\n    elif \"er\" in text:\n        return \"present\",[text.find(\"er\")]\n    elif \"ly\" in text[:-1]:\n        return \"past\",[text.find(\"ly\")]\n    return \"invalid\",[]\n",
        "test": "assert     find_adverbs(\"I love trains\") == ['ly']",
        "num_ids": 270,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,(i[1],i[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n",
        "test": "assert ",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"The list is too short to be splitted\")\n        return\n    elif len(l) == n:\n        return l\n    else:\n        return l[:n] + l[n:][::-1]\n",
        "test": "assert ",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5), 'incorrect'",
        "num_ids": 203,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = 0\n    min = 0\n    for i in nums:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    diff = max - min\n    return diff\n",
        "test": "assert     big_diff([-2, -4, -6, -8]) == 8",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = 1\n    while x < a:\n        x = x + 1\n    while x <= b:\n        if x**2 == a or x**2 == b:\n            print(x)\n        x = x + 1\n",
        "test": "assert ",
        "num_ids": 236,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = math.sqrt(x**2+y**2)\n    theta = math.atan2(y,x)\n    return radius*math.cos(theta),radius*math.sin(theta)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    theta = math.atan2(y,x)\n    radius = math.sqrt(x**2+y**2)\n    return radius,theta\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if a rectangle is overlapped by another rect.\n    '''\n    if x2>x1 and y2>y1:\n        area = (x2-x1)*(y2-y1)\n        return area>=0\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if a polar rectangle is overlapped by another polar rectangle.\n    '''\n    if x2>x1 and y2>y1:\n        angle = y2*(x2-x1)/(y2-y1)\n        return angle>=0\n    return False\ndef rect_polar(x1,y1,x2,y2):\n    '''\n    Write a function to check if a rectangular rectangle is overlapped by another polar rectangle.\n    '''\n    if x2>x1 and y2>y1:\n        theta = math.atan2(y2-y1,x2-x1)\n        angle = y1*(x1-x2)/(y1-y2)\n        if theta>=angle:\n            return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if a polar rectangle is overlapped by another rectangular rectangle.\n    '''\n    if x2>x1 and y2>y1:\n        angle = y2*(x2-x1)/(y2-y1)\n        return angle>=0\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangular rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef polar_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two polar rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if two rectangles are overlapped.\n    '''\n    if x2>x1 and y2>y1:\n        return True\n    return False\ndef rect_rect(x1,y1",
        "test": "assert ",
        "num_ids": 94,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert ",
        "num_ids": 93,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k:\n        return 0\n    if n==0 or k==0:\n        return 1\n    if k==1:\n        return 1\n    prod = 1\n    for i in range(1, k+1):\n        prod *= (n-i+1)\n    return prod//(factorial(k)*factorial(n-k))\n",
        "test": "assert     binomial_Coeff(0,0) == 1",
        "num_ids": 2266,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('0+', '', ip)\n",
        "test": "assert ",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i])\n    list1 = list2\n    list3 = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list3.append(list1[i])\n        else:\n            list3.append(list1[i])\n    return list3\n",
        "test": "assert ",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print('str1', str1,'str2', str2)\n    str1 = list(str1)\n    str2 = list(str2)\n    \n    def swap(str1, i, j) : \n        str1[i], str1[j] = str1[j], str1[i]\n    \n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            swap(str1, i, str1.index(str2[i]))\n            swap(str2, i, str2.index(str1[i]))\n            break\n    \n    if i == len(str1)-1 : \n        return 0\n    else : \n        return len(str1) - i\n",
        "test": "assert ",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #convert the tuple to a string and split the string into a list\n    #convert the list into an int and multiply it by 4 to find the size\n    #return the size\n    #print(tuple_list)\n    str_list = str(tuple_list)\n    str_list = str_list.replace(\"(\",\"\")\n    str_list = str_list.replace(\")\",\"\")\n    str_list = str_list.split(\",\")\n    int_list = []\n    for item in str_list:\n        int_list.append(int(item))\n    #print(int_list)\n    size = sys.getsizeof(int_list)*4\n    #print(size)\n    return size\n",
        "test": "assert ",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 > len2:\n        max = len1\n    else:\n        max = len2\n    if k > max:\n        return -1\n    if k <= max//2:\n        while arr1[k-1] == arr2[k-1]:\n            k = k-1\n    n = max//2\n    p = 0\n    q = n-1\n    while p <= q:\n        if k < n:\n            if arr1[p] <= arr2[q]:\n                p = p+1\n                k = k-1\n            else:\n                q = q-1\n        else:\n            if arr1[p] <= arr2[q]:\n                return arr1[p]\n            else:\n                return arr2[q]\n",
        "test": "assert     find_kth([1, 3], [2, 4], 1) == 1, \"Should be 1\"",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    i = number\n    while i > 0:\n        digit = i % 10\n        sum += digit**3\n        i = i//10\n    return number == sum\n",
        "test": "assert     armstrong_number(1)    == True",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return (sum(range(1,number+1))+number)/number\n",
        "test": "assert     sum_average(0) == 0",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n",
        "test": "assert     is_Even(2) == True, '2 is odd'",
        "num_ids": 2109,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    rep_chr = 0\n    s = str1\n    for i in range(len(s)):\n        ch = s[i]\n        if s.count(ch) > 1:\n            rep_chr = ch\n            break\n    return rep_chr\n",
        "test": "assert     first_repeated_char(    'aabccccddd')     == 'a', 'False: a'",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    assert n >= 0, \"input must be a non-negative integer\"\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if is_ludic(i) and not is_ludic(i + 1) and not is_ludic(i - 1):\n            ludic_numbers.append(i)\n    return ludic_numbers\n",
        "test": "assert ",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print(s.split())\n    return''.join(reversed(s.split()))\n",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 137,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(1) == False",
        "num_ids": 190,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    #return math.radians(degree)\n    return degree * math.pi / 180\n",
        "test": "assert ",
        "num_ids": 94,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    return None\n",
        "test": "assert     find_literals('i am re2y','re2') == (False, -1, -1)",
        "num_ids": 306,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 1\n    for i in range(1,n+1):\n        bell_num *= i\n    return bell_num\n",
        "test": "assert ",
        "num_ids": 134,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in list1:\n        if list1.index(i)!= L:\n            list2.append(i)\n    return list2\n",
        "test": "assert     remove_kth_element([1, 2, 3, 4], 2) == [1, 2, 4], 'incorrect'",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    '''\n    # This approach is O(n) time and space\n    for i in range(len(test_list)):\n        if N > len(test_list[i]):\n            return max(test_list[i])\n    return max(test_list[i][N - 1])\n    '''\n    '''\n    Approach 2:\n    # This approach is O(n) time and space\n    def max_of_nth_column(matrix, N):\n        n = len(matrix)\n        if N >= n:\n            return None\n        max_value = -float('inf')\n        for i in range(len(matrix[N - 1])):\n            max_value = max(max_value, matrix[N - 1][i])\n        return max_value\n    return max_of_nth_column(test_list, N)\n    '''\n    # This approach is O(n) time and space\n    def max_of_nth_column(matrix, N):\n        n = len(matrix)\n        max_value = -float('inf')\n        if N >= n:\n            return None\n        for i in range(len(matrix[N - 1])):\n            max_value = max(max_value, matrix[N - 1][i])\n        return max_value\n    return max_of_nth_column(test_list, N)\n",
        "test": "assert     max_of_nth([[2,4,6],[3,5,7],[1,8,9]], 2) == 7, 'The correct max is 7'",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    merged_list.append(lst[0][0])\n    merged_list.append(lst[0][1])\n    for i in range(1, len(lst)):\n        merged_list.append(lst[i][0])\n        merged_list.append(lst[i][1])\n",
        "test": "assert     merge([[2, 3], [4, 5], [6, 7]]) == [[2, 3], [4, 5], [6, 7]]",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total\n",
        "test": "assert     cummulative_sum((1,2,3)) == 6",
        "num_ids": 174,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    x = []\n    for i in range(len(nums)):\n        x.append(sum(nums[i]) / len(nums[i]))\n    return x\n",
        "test": "assert     average_tuple(tuple([tuple([1,2,3]), tuple([1,2,3])])) == [2.0,2.0]",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] % test_tup2[i], )\n    return new_tup\n",
        "test": "assert ",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps = steps\n    d = d\n    if (steps == 1):\n        return 0\n    if (steps < 1):\n        return -1\n    if (d == 0):\n        return 1\n    steps -= 1\n    return min_Jumps(steps, d - 1) + min_Jumps(steps, d - 2)\n",
        "test": "assert     min_Jumps(0, 1) == 0 ",
        "num_ids": 2227,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return(list(map(lambda x,y : x/y, nums1, nums2)))\n",
        "test": "assert     div_list([1,2,3],[]) == []",
        "num_ids": 147,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Make list of all numbers\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n",
        "test": "assert     move_num(\"1234567890\") == \"987654321\"",
        "num_ids": 162,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n    \n    dp = [[0 for i in range(len(a))] for j in range(len(a))]\n    \n    for i in range(len(a)):\n        dp[i][i] = 1\n    \n    for i in range(len(a)):\n        dp[i][i] = 1\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 and dp[i][j-1]!= 1:\n                dp[i][j] = 1\n                \n    return dp[0][len(a)-1]\n",
        "test": "assert     largest_subset([6, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 8",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_list = []\n    for i in range(0, n):\n        sorted_list.append(arr1[i])\n        sorted_list.append(arr2[i])\n",
        "test": "assert     get_median([], [], 0) == None, 'Wrong output!'",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_power = []\n    for x in nums:\n        nums_power.append(x ** n)\n    return nums_power\n",
        "test": "assert ",
        "num_ids": 138,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper('PYTHON')",
        "num_ids": 48,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    temp = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = temp\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1], \"Wrong output\"",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (1.0/3.0) * r**2\n    \nprint(triangle_area(5))",
        "test": "assert ",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end - start == 0:\n        return start\n    if end - start == 1:\n        return start + 1\n    middle = (end + start) // 2\n    if array[middle] == middle:\n        return find_First_Missing(array,start,middle)\n    elif array[middle] < middle:\n        return find_First_Missing(array,middle+1,end)\n    else:\n        return find_First_Missing(array,start,middle-1)\n",
        "test": "assert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5, \"Wrong result\"",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert     replace_spaces('This is a sample sentence') == 'This%20is%20a%20sample%20sentence','replace_spaces'",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    if list == None:\n        return None\n    else:\n        return [x for x in list if x % 2 == 0]\n",
        "test": "assert ",
        "num_ids": 121,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    for i in range(0, row + 1): \n        sub.append([i, col]) \n    for j in range(0, col + 1): \n        sub.append([row, j]) \n    for i in range(row, len(grid)): \n        sub.append([i, col]) \n    for j in range(col, len(grid[0])): \n        sub.append([row, j]) \n    return sub\n",
        "test": "assert ",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "test": "assert     replace_spaces(\"Hello World\") == \"Hello_World\"",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Your code here\n    zeros = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zeros += 1\n    \n    for i in range(zeros):\n        num_list.remove(0)\n        num_list.append(0)\n",
        "test": "assert ",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_Sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            xor_Sum += (arr[i] ^ arr[j])\n    return xor_Sum\n    \n    \ndef find_pairs_of_numbers(arr,n,k):\n    '''\n    Write a python function to find the number of pairs of numbers in the given array which sum up to a particular value.\n    '''\n    count = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            if arr[i] + arr[j] == k :\n                count += 1\n    return count\n    \ndef find_pairs_of_numbers_optimised(arr,n,k):\n    '''\n    Write a python function to find the number of pairs of numbers in the given array which sum up to a particular value.\n    '''\n    hash_table = {}\n    for i in range(n) :\n        if (arr[i],k-arr[i]) in hash_table:\n            hash_table[(arr[i],k-arr[i])] += 1\n        else:\n            hash_table[(arr[i],k-arr[i])] = 1\n    return sum(hash_table.values())\n    \ndef pair_with_smallest_sum(arr, n):\n    '''\n    Write a python function to find the pair with the smallest sum in the given array.\n    '''\n    arr.sort()\n    \n    minimum_sum = float(\"inf\")\n    min_pair = (float(\"inf\"),float(\"inf\"))\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] + arr[j]) < minimum_sum:\n                minimum_sum = arr[i] + arr[j]\n                min_pair = (arr[i], arr[j])\n                \n    return min_pair\n    \n    \ndef find_pairs(arr, n):\n    '''\n    Write a python function to find the pairs of numbers in the given array which sum up to a particular value.\n    '''\n    from collections import Counter\n    counter = Counter(arr)\n    pairs = []\n    for k in range(n):\n        if counter[k] > 1:\n            for i in range(k + 1, n):\n                if counter[k] + counter[i] == n - 1:\n                    pairs.append((k, i))\n    return pairs\n    \ndef find_pairs_optimised(arr,n):\n    '''\n    Write a python function to find the pairs of numbers in the given array which sum up to a particular value.\n    '''\n    from collections import defaultdict\n    \n    d = defaultdict(list)\n    for i in range(n):\n        d[arr[i]].append(i)\n    \n    pairs = []\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] == n - 1:\n                pairs.append((i,j))\n    return pairs\n",
        "test": "assert ",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    new = []\n    while len(iterable)!= 0:\n        new.append(iterable[0])\n        del iterable[0]\n        hq.heapify(iterable)\n    return new\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\nprint(noprofit_noloss(10000,20))\n",
        "test": "assert     noprofit_noloss(1,1) == True",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v**(1.0/2.0)\n    temp = t*(17.27)\n    w = w*math.exp((13.12*w)/(temp-40.0))\n    w = (w - 32.0)*5/9.0\n    return round(w)\n",
        "test": "assert     wind_chill(1, 45) == 23",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code goes here\n    return sum([len(x) for x in sample_names if not x.startswith(\"a\")])\n",
        "test": "assert     sample_nam([]) == 0, 'Empty list'",
        "num_ids": 175,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_pattern = re.compile('[()]')\n    result = parenthesis_pattern.sub('', items)\n    return result\n",
        "test": "assert     remove_parenthesis('(1+1)+1') == '1+1+1'",
        "num_ids": 213,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n+1)*(n+2)*(n+3)\n",
        "test": "assert ",
        "num_ids": 153,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #print(\"Enter text:\",text)\n    search_pattern= r'z+'\n    result = re.search(search_pattern, text)\n    #print(\"Pattern is matched:\",result)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle('z') == True",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    new_arr = []\n    k = k + 1\n    for i in range(len(input)):\n        if i == k:\n            break\n        else:\n            new_arr.append(input[i])\n    new_arr.reverse()\n    print(\"new_arr \", new_arr)\n    return new_arr\n",
        "test": "assert     reverse_Array_Upto_K(input = [1,2,3,4,5,6,7], k = 7) == [7,6,5,4,3,2,1]",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "test": "assert     add_dict_to_tuple((), test_dict) == ((), test_dict)",
        "num_ids": 219,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = -1\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                path_total = cost[i][j]\n                path_count = 1\n            elif i == 0 and j!= 0:\n                path_total += cost[i][j]\n                path_count += 1\n            elif i!= 0 and j == 0:\n                path_total += cost[i][j]\n                path_count += 1\n            else:\n                path_total = path_total + cost[i][j]\n                path_count += 1\n",
        "test": "assert     maxAverageOfPath([[1,2,3],[2,3,1],[1,2,3]]) == 4.0",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data_filtered = {}\n    for key, val in students.items():\n        if val[0] > h and val[1] > w:\n            data_filtered[key] = val\n    return data_filtered\n",
        "test": "assert ",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pair = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_pair += 1\n    return same_pair\n",
        "test": "assert ",
        "num_ids": 158,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to int\n    base = int(base)\n    # calculate power and return\n    return base ** power\n",
        "test": "assert     power_base_sum(5, 1) == 5",
        "num_ids": 211,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if type(text1)!= str:\n        return None\n",
        "test": "assert ",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    x = []\n    for i in range(n):\n        x.append(test_tup[i] * (n + 1 - i))\n    return x\n",
        "test": "assert     (multiply_elements((1,2,3,4,5)) == (1,2,3,4,5)), \"Your function multiply_elements does not work correctly\"",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    i = 0\n    while i < len(lst1):\n        lst1[i] += lst2[i]\n        i += 1\n    return lst1\n",
        "test": "assert     sum_list([1,2,3,4],[5,6,7,8]) == [6,8,10,12], 'Test failed.'",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.append(list(g))\n    return result\n",
        "test": "assert     consecutive_duplicates([1, 2, 3]) == [[1], [2], [3]]",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r*(r+h)*math.pi/3\n",
        "test": "assert     lateralsurface_cone(0,1) == 0",
        "num_ids": 194,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = re.sub('( )', ':', text)\n    text = re.sub(',', ':', text)\n    text = re.sub(';', ':', text)\n    text = re.sub('\\.', ':', text)\n    return text\n",
        "test": "assert     replace_specialchar(\"Shaw shaw\") == \"Shaw shaw\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A)-1\n    while i <= j:\n        mid = (i+j)//2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            j = mid-1\n        elif A[mid] > x:\n            j = mid-1\n        else:\n            i = mid+1\n    return -1\n",
        "test": "assert     find_first_occurrence([1,2,2,3,4], 2) == 1",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    dp_list=[0 for i in range(0,n+1)]\n    dp_list[0]=1\n    for i in range(0,n):\n        for j in range(i+1,n+1):\n            dp_list[j]=dp_list[j-1]*arr[i]\n    return dp_list[n]\n",
        "test": "assert sum_Of_Subarray_Prod([2, 3, -2, -4, -6]) == -12",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #code here\n    \n    n = n & ((1 << n.bit_length()) - 1)\n    return n\n",
        "test": "assert     set_middle_bits(0) == 0",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
        "test": "assert     left_insertion([1,2,3], 2) == 1",
        "num_ids": 172,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex,string)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_str('A') == True",
        "num_ids": 163,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return n\n    return n + geometric_sum(n-1)\n",
        "test": "assert ",
        "num_ids": 123,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while(i < len(n)):\n        n[i] = int(n[i])\n        i = i + 1\n    count = 0\n    while count < len(n):\n        count = count + 1\n        if count == len(n):\n            print(\"Index of smallest triangular number with n digits:\", count)\n            exit()\n        else:\n            n[count] = int(n[count])\n            count = count + 1\n        \n",
        "test": "assert     find_Index(2) == 1",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n    #print(test_dict)\n",
        "test": "assert     tuple_to_dict((1, 2)) == {1: 2}",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])\n",
        "test": "assert     all_Characters_Same(\"a\") == True, \"One Character\"",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*(side**2)*(math.sqrt(5)-1)\n",
        "test": "assert     area_tetrahedron(3) == 28, \"area_tetrahedron is wrong\"",
        "num_ids": 151,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[-1]\n    for i in range(len(list)-1, 0, -1):\n        list[i] = list[i-1]\n    list[0] = temp\n    return list\n",
        "test": "assert     rotate_right([1, 2, 3], 2) == [3, 1, 2]",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    for val in test_tup:\n        if val == None:\n            print(True)\n            return True\n    print(False)\n    return False\n",
        "test": "assert     check_none((\"a\", None, \"b\", None, \"c\", \"d\", \"e\", None, None, None))    == False, \"Fail\"",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = []\n    for i in range(startnum, endnum+1):\n        s = str(i)\n        for j in s:\n            if i % int(j) == 0:\n                digits.append(i)\n    return digits\n",
        "test": "assert ",
        "num_ids": 155,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r == 0 or a == 0:\n        return None\n    else:\n        return math.pi*r**2*math.sin(a/180*math.pi)\n",
        "test": "assert sector_area(5,360) == None, \"Expected None but got %f\" %sector_area(5,360)",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #  create a table to store solutions \n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n    L = [[None]*(m+1) for i in range(n+1)] \n",
        "test": "assert ",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w+\\b')\n    return pattern.sub(' \\g<0> ', str1)\n",
        "test": "assert     capital_words_spaces('A capital word') == 'A capital word'",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        try:\n            nums.append(float(i))\n        except ValueError:\n            print(i)\n    return sorted(nums)\n",
        "test": "assert ",
        "num_ids": 212,
        "indeed": true
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n",
        "test": "assert ",
        "num_ids": 158,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left <= len(arr) - 1 and arr[left] < arr[i]:\n        return False\n    if right <= len(arr) - 1 and arr[right] < arr[i]:\n        return False\n    return True\n",
        "test": "assert ",
        "num_ids": 192,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    s = 0\n    num = 0\n    for i in range(n): \n        s = (2*s + 1) % 1000000007 \n        num = num + s\n    return num\n",
        "test": "assert ",
        "num_ids": 2106,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = K\n",
        "test": "assert     min_k(test_list2, 2) == [('Smith', 5), ('Jones', 10)]",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #l1 = {'a','b','c'}\n    #l2 = {'c','d','e'}\n    #l3 = {'d','e','a'}\n    result = []\n    for i in range(len(l1)):\n        if (l1[i] in l2) and (l1[i] in l3):\n            result.append(l1[i])\n    for i in range(len(l2)):\n        if (l2[i] in l1) and (l2[i] in l3):\n            result.append(l2[i])\n    for i in range(len(l3)):\n        if (l3[i] in l1) and (l3[i] in l2):\n            result.append(l3[i])\n    return result\n",
        "test": "assert     extract_index_list([3,1,2], [1,2,3,4,5], [1,2,3,4,5,6]) == [1,2]",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert     second_smallest([3, 1, 2, 2, 3]) == 2",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab'\n    text = 'abcdefghijklmnopqrstuvwxyz'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one(\"aab\")",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #trivial\n    if len(test_list)==0:\n        return 0\n    #special cases\n    if len(test_list)==1:\n        return 0\n    if len(test_list)==2:\n        if test_list[0]==test_list[1]:\n            return 1\n        else:\n            return 0\n    #data structures to store the string\n    test_list_s = []\n    test_list_s.append(test_list[0])\n    test_list_s.append(test_list[1])\n    test_list_s.sort()\n    if test_list_s[0]!=test_list_s[1]:\n        return 0\n    else:\n        if test_list_s[0]==test_list_s[1]:\n            return 1\n        else:\n            return 0\n",
        "test": "assert     count_reverse_pairs(['abc', 'cba']) == 0",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        if list1[i] not in result.keys():\n            result[list1[i]] = 1\n        else:\n            result[list1[i]] += 1\n    return result\n",
        "test": "assert ",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal('1.25') == True",
        "num_ids": 173,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # count = 0\n    # for i in range(0,len(arr)):\n    #     if arr[i] not in arr[i+1:len(arr)]:\n    #         count += 1\n    # if count == len(arr) - 1:\n    #     return True\n    # else:\n    #     return False\n    arr = set(arr)\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     unique_Element([1,1,2,3,2,4,5,6]) == False, 'exception raised'",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(12) == True",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    arr.sort()\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert     find_min_diff([10,20,30,40],4) == 10",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "test": "assert ",
        "num_ids": 71,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    p, s = 1, 1\n    while p!= n:\n        p, s = s, s * 2 + 1\n    return p\n",
        "test": "assert     is_polite(1) == 1",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l=[]\n    for i in range(len(l1)-1):\n        l.append([l1[i],l1[i+1]])\n    return l\n",
        "test": "assert     pair_wise([1,2,3]) == [[1,2], [2,3]]",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pair_count += 1\n    return pair_count\n",
        "test": "assert     get_pairs_count([1, 5, 10, 40], 10) == 0, \"get_pairs_count : Wrong output\"",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result=[]\n    for i in li1:\n        if i not in li2:\n            result.append(i)\n    return result\n",
        "test": "assert     Diff([1,2,3],[1,2]) == []",
        "num_ids": 219,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = 0\n    odd_sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 1:\n            odd_num = odd_num + i\n    for j in range(1,odd_num+1):\n        odd_sum = odd_sum + j*j*j*j\n    return odd_sum\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    prime_factors = []\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            n = n / i\n            prime_factors.append(i)\n        i += 2\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n    \ndef even_number_sum(n):\n    '''\n    Write a python function to find the sum of first n even natural numbers.\n    '''\n    even_num = 0\n    even_sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            even_num = even_num + i\n    for j in range(1,even_num+1):\n        even_sum = even_sum + j*j\n    return even_sum\n    \ndef list_division(x,y):\n    '''\n    Write a python function to divide list x and y.\n    '''\n    sum_of_x = 0\n    for i in x:\n        sum_of_x = sum_of_x + i\n    sum_of_y = 0\n    for j in y:\n        sum_of_y = sum_of_y + j\n    x_divided_y = []\n    for i in range(0,len(x)):\n        x_divided_y.append(x[i]/y[i])\n    return x_divided_y\n    \ndef time_converter(seconds):\n    '''\n    Write a python function to convert a number of seconds to days, hours, minutes and seconds.\n    '''\n    days = seconds // 86400\n    seconds = seconds % 86400\n    hours = seconds // 3600\n    seconds = seconds % 3600\n    minutes = seconds // 60\n    seconds = seconds % 60\n    return days, hours, minutes, seconds\n    \ndef print_sorted_dict(dictionary):\n    '''\n    Write a python function to print the dictionary in sorted order of keys.\n    '''\n    new_list = []\n    for i in dictionary:\n        new_list.append(i)\n    new_list.sort()\n    for i in new_list:\n        print(i, end = \" \")\n        print(dictionary[i])\n        \ndef even_number_divider(x):\n    '''\n    Write a python function to find the number of even numbers present in a given list of numbers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            count += 1\n    return count\n    \ndef remove_duplicates(x):\n    '''\n    Write a python function to remove duplicate elements from the list.\n    '''\n    for i in range(len(x)):\n        for j in range(i+1,len(x)):\n            if x[i] == x[j]:\n                x.remove(x[i])\n    return x\n    \ndef is_isogram(string):\n    '''\n    Write a python function to check whether the given string is an isogram or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    string_length = len(string)\n    count = {}\n    for i in string:\n        count[i] = count.get(i,0) + 1\n    if string_length == len(count):\n        return True\n    else:\n        return False\n    \ndef list_sort_count(x):\n    '''\n    Write a python function to sort the elements in a list and return the count of them in the sorted list.\n    '''\n    y = []\n    for i in x:\n        y.append(i)\n    y.sort()\n    count = 0\n    for i in y:\n        if i in x:\n            count += 1\n    return count\n    \ndef list_sort_count_v2(x):\n    '''\n    Write a python function to sort the elements in a list and return the count of them in the sorted list.\n    '''\n    y = []\n    for i in x:\n        y.append(i)\n    y.sort()\n    count = 0\n    for i in y:\n        for j in x:\n            if i == j:\n                count += 1\n    return count\n    \ndef number_length(n):\n    '''\n    Write a python function to count the length of numbers in a list.\n    '''\n    count = 0\n    while n > 0:\n        count = count + 1\n        n = n // 10\n    return count\n    \ndef palindrome_checker(string):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factorization of a given number.\n    '''\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n            prime_factors.append(i)\n        i += 1\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n    \ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef hour_difference(start, end):\n    '''\n    Write a python function to find the hour difference between start and end time.\n    '''\n    start_hour = int(start.split(\":\")[0])\n    start_minute = int(start.split(\":\")[1])\n    end_hour = int(end.split(\":\")[0])\n    end_minute = int(end.split(\":\")[1])\n    hour_difference = abs(start_hour - end_hour) + (60 * abs(start_minute - end_minute))\n    return hour_difference\n    \ndef is_palindrome_v2(string):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n    \ndef sum_array(array):\n    '''\n    Write a python function to calculate the sum of array elements.\n    '''\n    sum = 0\n    for i in array:\n        sum = sum + i\n    return sum\n    \ndef sum_array_v2(array):\n    '''\n    Write a python function to calculate the sum of array elements.\n    '''\n    sum = 0\n    for i in range(len(array)):\n        sum = sum + array[i]\n    return sum\n    \ndef reverse_word(string):\n    '''\n    Write a python function to reverse the words in a given string.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    words = []\n    for i in string:\n        if i == \" \":\n            words.append(",
        "test": "assert ",
        "num_ids": 191,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \"\"\"\n    :type expression: str\n    :rtype: bool\n    \"\"\"\n    open_brackets = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            open_brackets.append(i)\n        else:\n            if open_brackets:\n                open_brackets.pop()\n            else:\n                return False\n    return open_brackets == []\n",
        "test": "assert     check_expression(\"(()\") == False",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    from collections import Counter\n    counter = Counter(test_str.split(\" \"))\n    counter = dict(counter)\n    \n    for k in counter.keys():\n        if len(k) == K:\n            counter.pop(k)\n    \n    return counter\n",
        "test": "assert     remove_length(\"hello world\", 3) == \"hllw\"",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # findall() - returns all matches as a list of strings\n    # string.find() - returns -1 if no match else returns the index of first match\n    # findall() - returns all matches as a list of strings\n    # re.findall(pattern,string) - returns a list of all matches\n    # re.finditer(pattern,string) - returns an iterator\n    # findall() - returns all matches as a list of strings\n    # re.finditer(pattern,string) - returns an iterator\n    m = re.finditer(pattern,text)\n    #for i in m:\n    #    print(i)\n    \n    \n    for i in m:\n        print(i)\n        #print(i.start())\n        #print(i.end())\n        #print(i.span())\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    r = re.finditer(pattern,text)\n    #print(r)\n    \n    for i in r:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re1(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    r = re.finditer(pattern,text)\n    #print(r)\n    \n    for i in r:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re6(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re7(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re8(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    for i in m:\n        print(i)\n        print(i.start())\n        print(i.end())\n        print(i.span())\n        print(i.group())\n        print(i.string)\n        print(\"*\"*100)\n        \n    #for i in m:\n    #    print(i.group())\n    #print(m)\n    \n    \n    #return re.findall(pattern,text)\n    \ndef occurance_substring_re9(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    m = re.findall(pattern,text)\n    #print(m)\n    \n    fo",
        "test": "assert     occurance_substring('abab','ab') == None",
        "num_ids": 196,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums == None:\n        return False\n    nums = list(nums)\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "test": "assert     odd_position([1,2,3,4]) == True",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    prev_vowel =''\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and prev_vowel not in vowels:\n            count += 1\n            prev_vowel = test_str[i]\n    return count\n",
        "test": "assert     count_vowels('aa') == 2",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    x = set(arr)\n    y = sum(x)\n    return y\n",
        "test": "assert ",
        "num_ids": 137,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1)\n    result = []\n    for k,v in groups:\n        result.append(list(v))\n    return result\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[tuple(list1[i])] = d.get(tuple(list1[i]), 0) + 1\n    return d\nprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]))",
        "test": "assert     unique_sublists([[1,2,3,4], [2,3,4], [1], [2,3], [1,2,3,4,5,6], [1], [2,3,4], [1]]) == {([1, 2, 3, 4], 4), ([2, 3, 4], 3), ([1], 1), ([2, 3], 1), ([1, 2, 3, 4, 5, 6], 2)}",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_combinations=[]\n    for i in test_list:\n        for j in combinations(i,2):\n            test_combinations.append(j)\n    return test_combinations\n",
        "test": "assert     find_combinations([(1,2), (2,2)]) == [(1,2), (2,2)]",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            count += 2\n    if count == 2 : \n        return True\n    else : \n        return False\n",
        "test": "assert     count_divisors(10) == 10, \"Should be 10\"",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    i = 0\n    total = 0\n    while(i < n):\n        j = i + 1\n        total = 0\n        while(j < n and arr[j] % 2!= 0):\n            total += arr[j]\n            j += 1\n        i = j\n        print(total)\n",
        "test": "assert ",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_ = float(r)\n    g_ = float(g)\n    b_ = float(b)\n    if r_ == 0 and g_ == 0 and b_ == 0:\n        return 0, 0, 0\n    r_ /= 255.0\n    g_ /= 255.0\n    b_ /= 255.0\n    max_ = max(r_, g_, b_)\n    min_ = min(r_, g_, b_)\n    diff_ = max_ - min_\n    delta = max_ - min_\n    if max_ == r_:\n        h = 0.0 + ((g_ - b_) / delta)\n    elif max_ == g_:\n        h = 1.0 + ((b_ - r_) / delta)\n    else:\n        h = 2.0 + ((r_ - g_) / delta)\n    h *= 60\n    if h < 0:\n        h += 360\n    elif h > 360:\n        h -= 360\n    if diff_ == 0:\n        s = 0\n    else:\n        s = delta / diff_\n    v = max_\n    return h, s, v\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0), 'RGB -> HSV: incorrect answer'",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(0,len(list1)):\n        if list1[i]%2==0:\n            product*=list1[i]\n    for i in range(0,len(list1)):\n        if list1[i]%2!=0:\n            product*=list1[i]\n    return product\n",
        "test": "assert     mul_even_odd([-1,-2,3,4,5]) == -30",
        "num_ids": 274,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(\"(\",\"\")\n    test_str = test_str.replace(\")\",\"\")\n    test_str = test_str.replace(\",\",\"\")\n    return tuple(map(int,test_str.split()))\n",
        "test": "assert tuple_str_int('(4,)') == (4,)",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)-1\n    if len(a) == 0:\n        return hi\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return lo\n    \n    \n",
        "test": "assert     right_insertion(['A','B','C'], 'A') == 0",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('ab', text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_three('') == False, \"Test 0: testcase 2 Failed\"",
        "num_ids": 182,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_list) == list and type(test_str) == str:\n        return tuple(test_str)\n    else:\n        return print(f'{type(test_list)} or {type(test_str)} is not a list or string')\n",
        "test": "assert     new_tuple([1,2], 'abcd') == (1, 2, 0), \"Wrong output\"",
        "num_ids": 185,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums = sorted(nums)\n    return all(num%2 == 0 for index,num in enumerate(nums) if index%2 == 0)\n",
        "test": "assert     even_position([1, 4, 4, 4, 7, 9, 11, 21, 21, 34, 23]) == False, \"incorrect\"",
        "num_ids": 307,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i][0]!= test_tup[i][1]:\n            test_tup.pop(i)\n    return test_tup\n",
        "test": "assert     remove_nested(((1,2,3),(3,4),(5,6))) == ((1,2),(3,4))",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n        else:\n            continue\n    return count\nprint(count_list([1,2,3,[4,5],6,[7],8,[9,10],11]))\n",
        "test": "assert ",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x)\n    '''\n    An inbuilt function in python to do this task.\n    '''\n",
        "test": "assert     last([10,15,20,25,30],25) == 3",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a[a-zA-Z]+b$')\n    result = pattern.match(text)\n    print(result)\n    return result!= None\n",
        "test": "assert     text_starta_endb('startsb') == False, 'Should return False'",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summ = 0\n    for i in dict.values():\n        summ += i\n",
        "test": "assert ",
        "num_ids": 130,
        "indeed": false
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n >= 1:\n        summ = 0\n        for i in range(1, n+1):\n            if i % 2!= 0:\n                summ = summ + i\n        print(summ)\n    else:\n        print(\"Invalid input\")\nsum_odd(10)\n",
        "test": "assert ",
        "num_ids": 172,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 119,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "test": "assert ",
        "num_ids": 121,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ','')\n",
        "test": "assert     remove_all_spaces(\"     \") == \"\", \"invalid\"",
        "num_ids": 164,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    total = 0\n    if x == y and x == z:\n        total = total + 1\n    elif y == z:\n        total = total + 1\n    elif x == z:\n        total = total + 1\n    return total\n",
        "test": "assert     test_three_equal(1,1,2) == 0, 'Testing Failed!'",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    #if arr is already sorted we return 0\n    if arr == sorted(arr):\n        return 0\n    #if arr is not sorted we need to sort\n    i = 0\n    while i < n-1:\n        if arr[i] < arr[i+1]:\n            break\n        i += 1\n    j = n-1\n    while j > i:\n        if arr[j] > arr[j-1]:\n            break\n        j -= 1\n    #i is the first element smaller than j\n    return i+1 + count_rotation(arr[i+1:j])\n",
        "test": "assert ",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n**0.5)\n    return x*x == n\n",
        "test": "assert     is_perfect_square(11) == False, \"11 is not a perfect square\"",
        "num_ids": 152,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if (arr[i] * arr[i]) % 2 == 0:\n            return True\n        else:\n            return False\n",
        "test": "assert     is_product_even([10,4,8,1,3]) == True, \"Should be true\"",
        "num_ids": 188,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -sys.maxsize - 1\n    list_of_lists = []\n    \n    for i in range(len(lists)):\n        if len(lists[i]) == 0:\n            continue\n        max_sum = max(max_sum, sum(lists[i]))\n        temp = []\n        temp.append(sum(lists[i]))\n        list_of_lists.append(temp)\n",
        "test": "assert ",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    s = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        if count > s:\n            s = count\n    print(s)\n",
        "test": "assert     max_run_uppercase('aAaAaAaAa') == 4",
        "num_ids": 238,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "test": "assert     first_odd([1,2,3,4,5,6,7,8,9,10]) == 1",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K and test_tup[1] == K:\n        return True\n    elif test_tup[0] == K or test_tup[1] == K:\n        return True\n    else:\n        return False\n    \ndef count_non_pair_K(test_tup, K):\n    '''\n    Write a function to count the number of non-pairs.\n    '''\n    if test_tup[0] == K and test_tup[1]!= K:\n        return 1\n    elif test_tup[0]!= K and test_tup[1] == K:\n        return 1\n    else:\n        return 0\n",
        "test": "assert ",
        "num_ids": 136,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        if len(test_tup1) == len(test_tup2):\n            return all(x<y for x, y in zip(test_tup1, test_tup2))\n        else:\n            raise ValueError(\"Tuple lengths don't match\")\n    else:\n        raise TypeError(\"Inputs should be tuples\")\n",
        "test": "assert     check_smaller((-1, 1, 1), (1, 2, 1)) == False",
        "num_ids": 365,
        "indeed": false
    }
]